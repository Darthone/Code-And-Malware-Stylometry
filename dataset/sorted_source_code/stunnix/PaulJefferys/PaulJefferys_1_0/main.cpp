
#include <vector>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <map>
#include <ctime>
#include <cassert>
using namespace std;ofstream fout(
"\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74");
ifstream fin(
"\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x69\x6e\x70\x75\x74\x2e\x74\x78\x74");int 
main(void){int ReplacementFor_ttt=(0x19f4+3055-0x25e3);fin>>ReplacementFor_ttt;
int ReplacementFor_ct=(0x242c+244-0x2520);string s;cout.precision(
(0x402+8087-0x2390));fout.precision((0x107f+1101-0x14c3));cout<<
"\x48\x45\x4c\x4c\x4f"<<"\x20"<<ReplacementFor_ttt<<endl;while(
ReplacementFor_ttt>(0x275+8556-0x23e1)){ReplacementFor_ct++;ReplacementFor_ttt--
;string ReplacementFor_ans;int ReplacementFor_i,ReplacementFor_j,
ReplacementFor_k;int ReplacementFor_r,ReplacementFor_nr,ReplacementFor_y,
ReplacementFor_ny,ReplacementFor_b,ReplacementFor_nb;int ReplacementFor_n;fin>>
ReplacementFor_n>>ReplacementFor_r>>ReplacementFor_nb>>ReplacementFor_y>>
ReplacementFor_nr>>ReplacementFor_b>>ReplacementFor_ny;vector<string>
ReplacementFor_rval;vector<string>ReplacementFor_yval;vector<string>
ReplacementFor_bval;bool ReplacementFor_isok=true;if(ReplacementFor_y+
ReplacementFor_ny==ReplacementFor_n&&ReplacementFor_y==ReplacementFor_ny){for(
ReplacementFor_i=(0x450+8655-0x261f);ReplacementFor_i<ReplacementFor_y;
ReplacementFor_i++){ReplacementFor_ans+="\x59\x56";}}else if(ReplacementFor_r+
ReplacementFor_nr==ReplacementFor_n&&ReplacementFor_r==ReplacementFor_nr){for(
ReplacementFor_i=(0x88+8610-0x222a);ReplacementFor_i<ReplacementFor_r;
ReplacementFor_i++){ReplacementFor_ans+="\x52\x47";}}else if(ReplacementFor_b+
ReplacementFor_nb==ReplacementFor_n&&ReplacementFor_b==ReplacementFor_nb){for(
ReplacementFor_i=(0x767+4845-0x1a54);ReplacementFor_i<ReplacementFor_b;
ReplacementFor_i++){ReplacementFor_ans+="\x42\x4f";}}else{if(ReplacementFor_nr>
(0x178f+953-0x1b48)){string s="\x52";for(ReplacementFor_i=(0x124c+494-0x143a);
ReplacementFor_i<ReplacementFor_nr;ReplacementFor_i++){s+="\x47\x52";}
ReplacementFor_rval.push_back(s);ReplacementFor_r-=(ReplacementFor_nr+
(0xb3f+793-0xe57));}if(ReplacementFor_nb>(0x1b2+5038-0x1560)){string s="\x42";
for(ReplacementFor_i=(0xa4b+3779-0x190e);ReplacementFor_i<ReplacementFor_nb;
ReplacementFor_i++){s+="\x4f\x42";}ReplacementFor_bval.push_back(s);
ReplacementFor_b-=(ReplacementFor_nb+(0x2606+263-0x270c));}if(ReplacementFor_ny>
(0x115b+548-0x137f)){string s="\x59";for(ReplacementFor_i=(0x83b+1759-0xf1a);
ReplacementFor_i<ReplacementFor_ny;ReplacementFor_i++){s+="\x56\x59";}
ReplacementFor_yval.push_back(s);ReplacementFor_y-=(ReplacementFor_ny+
(0x17f5+2073-0x200d));}}if(ReplacementFor_r<(0x13a5+420-0x1549)||
ReplacementFor_b<(0x16a8+1277-0x1ba5)||ReplacementFor_y<(0x16d4+3743-0x2573)){
ReplacementFor_isok=false;}else if(ReplacementFor_ans.size()==(0x3f2+1460-0x9a6)
){while(ReplacementFor_r>(0xa4d+5214-0x1eab)){ReplacementFor_rval.push_back(
"\x52");ReplacementFor_r--;}while(ReplacementFor_y>(0x90d+3195-0x1588)){
ReplacementFor_yval.push_back("\x59");ReplacementFor_y--;}while(ReplacementFor_b
>(0x5e5+2575-0xff4)){ReplacementFor_bval.push_back("\x42");ReplacementFor_b--;}
vector<string>ReplacementFor_mx;vector<string>ReplacementFor_s1;vector<string>
ReplacementFor_s2;if(ReplacementFor_rval.size()>=ReplacementFor_yval.size()&&
ReplacementFor_rval.size()>=ReplacementFor_bval.size()){ReplacementFor_mx=
ReplacementFor_rval;ReplacementFor_s1=ReplacementFor_yval;ReplacementFor_s2=
ReplacementFor_bval;}else if(ReplacementFor_yval.size()>=ReplacementFor_rval.
size()&&ReplacementFor_yval.size()>=ReplacementFor_bval.size()){
ReplacementFor_mx=ReplacementFor_yval;ReplacementFor_s1=ReplacementFor_rval;
ReplacementFor_s2=ReplacementFor_bval;}else{ReplacementFor_mx=
ReplacementFor_bval;ReplacementFor_s1=ReplacementFor_rval;ReplacementFor_s2=
ReplacementFor_yval;}if(ReplacementFor_mx.size()>ReplacementFor_s1.size()+
ReplacementFor_s2.size())ReplacementFor_isok=false;else{while(ReplacementFor_mx.
size()>(0xda9+4196-0x1e0d)){ReplacementFor_ans+=ReplacementFor_mx[
ReplacementFor_mx.size()-(0x1c7+1707-0x871)];ReplacementFor_mx.pop_back();if(
ReplacementFor_s1.size()>ReplacementFor_s2.size()){ReplacementFor_ans+=
ReplacementFor_s1[ReplacementFor_s1.size()-(0x91c+7258-0x2575)];
ReplacementFor_s1.pop_back();}else{ReplacementFor_ans+=ReplacementFor_s2[
ReplacementFor_s2.size()-(0xb0c+3059-0x16fe)];ReplacementFor_s2.pop_back();}}
while(ReplacementFor_s1.size()>(0x302+317-0x43f)||ReplacementFor_s2.size()>
(0x15a9+203-0x1674)){if(ReplacementFor_s1.size()>(0x1555+3809-0x2436)&&
ReplacementFor_ans[ReplacementFor_ans.size()-(0xde8+5631-0x23e6)]!=
ReplacementFor_s1[(0x1c0+3896-0x10f8)][(0xe48+4249-0x1ee1)]){ReplacementFor_ans
+=ReplacementFor_s1[ReplacementFor_s1.size()-(0x114b+1572-0x176e)];
ReplacementFor_s1.pop_back();}if(ReplacementFor_s2.size()>(0x6c+6609-0x1a3d)&&
ReplacementFor_ans[ReplacementFor_ans.size()-(0xde0+597-0x1034)]!=
ReplacementFor_s2[(0x372+4619-0x157d)][(0xf23+797-0x1240)]){ReplacementFor_ans+=
ReplacementFor_s2[ReplacementFor_s2.size()-(0x3f7+150-0x48c)];ReplacementFor_s2.
pop_back();}}}}if(!ReplacementFor_isok)ReplacementFor_ans=
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45";cout<<"\x43\x61\x73\x65\x20\x23"<<
ReplacementFor_ct<<"\x3a\x20";fout<<"\x43\x61\x73\x65\x20\x23"<<
ReplacementFor_ct<<"\x3a\x20";cout<<ReplacementFor_ans;fout<<ReplacementFor_ans;
fout<<endl;cout<<endl;}return(0x96a+1308-0xe86);}
