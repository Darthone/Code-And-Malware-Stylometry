
#include <vector>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <map>
#include <ctime>
#include <cassert>
using namespace std;ofstream fout(
"\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74");
ifstream fin(
"\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x69\x6e\x70\x75\x74\x2e\x74\x78\x74");long
 long ReplacementFor_eval[(0xa3c+2394-0x1332)];double ReplacementFor_sval[
(0x137+6840-0x1b8b)];long long ReplacementFor_d[(0x1317+4337-0x23a4)][
(0xc55+6860-0x26bd)];double ReplacementFor_t[(0x136+7396-0x1db6)][
(0xbb9+946-0xf07)];int main(void){int ReplacementFor_ttt=(0x97b+679-0xc22);fin>>
ReplacementFor_ttt;int ReplacementFor_ct=(0x4d7+1396-0xa4b);string s;cout.
precision((0x1bd8+2135-0x2426));fout.precision((0x6dd+6239-0x1f33));cout<<
"\x48\x45\x4c\x4c\x4f"<<"\x20"<<ReplacementFor_ttt<<endl;while(
ReplacementFor_ttt>(0x168a+4150-0x26c0)){ReplacementFor_ct++;ReplacementFor_ttt
--;double ReplacementFor_ans=0.0;int ReplacementFor_i,ReplacementFor_j,
ReplacementFor_k;int ReplacementFor_n,q;fin>>ReplacementFor_n>>q;for(
ReplacementFor_i=(0xa22+5215-0x1e81);ReplacementFor_i<ReplacementFor_n;
ReplacementFor_i++){fin>>ReplacementFor_eval[ReplacementFor_i]>>
ReplacementFor_sval[ReplacementFor_i];}for(ReplacementFor_i=(0xdef+5541-0x2394);
ReplacementFor_i<ReplacementFor_n;ReplacementFor_i++){for(ReplacementFor_j=
(0x1964+66-0x19a6);ReplacementFor_j<ReplacementFor_n;ReplacementFor_j++){fin>>
ReplacementFor_d[ReplacementFor_i][ReplacementFor_j];if(ReplacementFor_i==
ReplacementFor_j)ReplacementFor_d[ReplacementFor_i][ReplacementFor_j]=0.0;
ReplacementFor_t[ReplacementFor_i][ReplacementFor_j]=-1.0;}}for(ReplacementFor_k
=(0xba7+6770-0x2619);ReplacementFor_k<ReplacementFor_n;ReplacementFor_k++){for(
ReplacementFor_i=(0x49c+5196-0x18e8);ReplacementFor_i<ReplacementFor_n;
ReplacementFor_i++){for(ReplacementFor_j=(0x51+3481-0xdea);ReplacementFor_j<
ReplacementFor_n;ReplacementFor_j++){if(ReplacementFor_d[ReplacementFor_i][
ReplacementFor_k]>=(0x977+3269-0x163c)&&ReplacementFor_d[ReplacementFor_k][
ReplacementFor_j]>=(0x1284+631-0x14fb)){long long ReplacementFor_e=
ReplacementFor_d[ReplacementFor_i][ReplacementFor_k]+ReplacementFor_d[
ReplacementFor_k][ReplacementFor_j];if(ReplacementFor_d[ReplacementFor_i][
ReplacementFor_j]<(0x13eb+3855-0x22fa)||ReplacementFor_e<ReplacementFor_d[
ReplacementFor_i][ReplacementFor_j])ReplacementFor_d[ReplacementFor_i][
ReplacementFor_j]=ReplacementFor_e;}}}}for(ReplacementFor_i=(0x1ac7+1260-0x1fb3)
;ReplacementFor_i<ReplacementFor_n;ReplacementFor_i++){for(ReplacementFor_j=
(0xec6+4608-0x20c6);ReplacementFor_j<ReplacementFor_n;ReplacementFor_j++){if(
ReplacementFor_d[ReplacementFor_i][ReplacementFor_j]<=ReplacementFor_eval[
ReplacementFor_i]){double ReplacementFor_tm=((double)ReplacementFor_d[
ReplacementFor_i][ReplacementFor_j])/ReplacementFor_sval[ReplacementFor_i];if(
ReplacementFor_t[ReplacementFor_i][ReplacementFor_j]<(0x13f3+4279-0x24aa)||
ReplacementFor_tm<ReplacementFor_t[ReplacementFor_i][ReplacementFor_j]){
ReplacementFor_t[ReplacementFor_i][ReplacementFor_j]=ReplacementFor_tm;}}}}for(
ReplacementFor_k=(0x471+6890-0x1f5b);ReplacementFor_k<ReplacementFor_n;
ReplacementFor_k++){for(ReplacementFor_i=(0xfd3+1524-0x15c7);ReplacementFor_i<
ReplacementFor_n;ReplacementFor_i++){for(ReplacementFor_j=(0x103a+5305-0x24f3);
ReplacementFor_j<ReplacementFor_n;ReplacementFor_j++){if(ReplacementFor_t[
ReplacementFor_i][ReplacementFor_k]>=(0x8f7+3846-0x17fd)&&ReplacementFor_t[
ReplacementFor_k][ReplacementFor_j]>=(0xf8+2502-0xabe)){double ReplacementFor_e=
ReplacementFor_t[ReplacementFor_i][ReplacementFor_k]+ReplacementFor_t[
ReplacementFor_k][ReplacementFor_j];if(ReplacementFor_t[ReplacementFor_i][
ReplacementFor_j]<(0x1041+5650-0x2653)||ReplacementFor_e<ReplacementFor_t[
ReplacementFor_i][ReplacementFor_j])ReplacementFor_t[ReplacementFor_i][
ReplacementFor_j]=ReplacementFor_e;}}}}cout<<"\x43\x61\x73\x65\x20\x23"<<
ReplacementFor_ct<<"\x3a";fout<<"\x43\x61\x73\x65\x20\x23"<<ReplacementFor_ct<<
"\x3a";for(ReplacementFor_k=(0x987+3194-0x1601);ReplacementFor_k<q;
ReplacementFor_k++){fin>>ReplacementFor_i>>ReplacementFor_j;cout<<"\x20"<<
ReplacementFor_t[ReplacementFor_i-(0x8cc+2684-0x1347)][ReplacementFor_j-
(0x613+2207-0xeb1)];fout<<"\x20"<<ReplacementFor_t[ReplacementFor_i-
(0xb3b+3831-0x1a31)][ReplacementFor_j-(0x1978+3476-0x270b)];}fout<<endl;cout<<
endl;}return(0x1888+332-0x19d4);}
