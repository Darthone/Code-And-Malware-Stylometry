
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
#include <array>
#include <list>
#include <stack>
#include <valarray>
using namespace std;typedef unsigned ReplacementFor_uint;typedef long long Int;
typedef unsigned long long ReplacementFor_UInt;const int ReplacementFor_INF=
1001001001;const Int ReplacementFor_INFLL=1001001001001001001LL;template<
typename ReplacementFor_T>void ReplacementFor_pv(ReplacementFor_T a,
ReplacementFor_T ReplacementFor_b){for(ReplacementFor_T ReplacementFor_i=a;
ReplacementFor_i!=ReplacementFor_b;++ReplacementFor_i)cout<<*ReplacementFor_i<<
"\x20";cout<<endl;}template<typename ReplacementFor_T>void ReplacementFor_chmin(
ReplacementFor_T&a,ReplacementFor_T ReplacementFor_b){if(a>ReplacementFor_b)a=
ReplacementFor_b;}template<typename ReplacementFor_T>void ReplacementFor_chmax(
ReplacementFor_T&a,ReplacementFor_T ReplacementFor_b){if(a<ReplacementFor_b)a=
ReplacementFor_b;}int ReplacementFor_in(){int ReplacementFor_x;scanf("\x25\x64",
&ReplacementFor_x);return ReplacementFor_x;}double fin(){double ReplacementFor_x
;scanf("\x25\x6c\x66",&ReplacementFor_x);return ReplacementFor_x;}Int 
ReplacementFor_lin(){Int ReplacementFor_x;scanf("\x25\x6c\x6c\x64",&
ReplacementFor_x);return ReplacementFor_x;}int ReplacementFor_P[
(0x1079+8426-0x245e)];void solve(){ReplacementFor_in();int A[
(0x124b+5173-0x267d)],ReplacementFor_B[(0x1711+1112-0x1b66)];for(int 
ReplacementFor_i=(0x22ec+853-0x2641);ReplacementFor_i<(0x1ab7+718-0x1d82);++
ReplacementFor_i){A[ReplacementFor_i]=ReplacementFor_in();ReplacementFor_B[(
ReplacementFor_i+(0x1440+2858-0x1f68))%(0x1124+2937-0x1c9a)]=ReplacementFor_in()
;}int ReplacementFor_over=(0x16da+1776-0x1dca),ReplacementFor_over_pos=
(0xa0d+3511-0x17c4);for(int ReplacementFor_i=(0x1036+1229-0x1503);
ReplacementFor_i<(0x1084+3206-0x1d07);++ReplacementFor_i){if(ReplacementFor_B[
ReplacementFor_i]>(0x1409+339-0x155c)&&A[ReplacementFor_i]<=ReplacementFor_B[
ReplacementFor_i]){ReplacementFor_over+=ReplacementFor_B[ReplacementFor_i]-A[
ReplacementFor_i]+(0x11f9+4376-0x2310);ReplacementFor_over_pos=ReplacementFor_i;
}}if(ReplacementFor_over>(0xb70+6428-0x248b)){puts(
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45");return;}else if(ReplacementFor_over
==(0x39+2443-0x9c3)){bool ReplacementFor_ok=true;for(int ReplacementFor_i=
(0x1cbc+1727-0x237a);ReplacementFor_i<=(0x1452+3402-0x219a);++ReplacementFor_i){
ReplacementFor_ok&=A[(ReplacementFor_over_pos+ReplacementFor_i)%
(0xfb5+5237-0x2427)]==(0x5+7516-0x1d61)&&ReplacementFor_B[(
ReplacementFor_over_pos+ReplacementFor_i)%(0x815+5538-0x1db4)]==
(0x184f+1836-0x1f7b);}if(ReplacementFor_ok){for(int ReplacementFor_i=
(0x8a7+7316-0x253b);ReplacementFor_i<A[ReplacementFor_over_pos];++
ReplacementFor_i){printf("\x25\x63\x25\x63","\x52\x59\x42"[
ReplacementFor_over_pos],"\x47\x56\x4f"[ReplacementFor_over_pos]);}puts("");}
else{puts("\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45");}return;}for(int 
ReplacementFor_i=(0xca2+3466-0x1a2c);ReplacementFor_i<(0x8bd+863-0xc19);++
ReplacementFor_i){A[ReplacementFor_i]-=ReplacementFor_B[ReplacementFor_i];}int 
ReplacementFor_ma=max({A[(0xf18+1761-0x15f9)],A[(0xb8a+7039-0x2708)],A[
(0x1cc+4889-0x14e3)]});int ReplacementFor_ot=A[(0x617+1120-0xa77)]+A[
(0x3b3+2115-0xbf5)]+A[(0x14e5+4517-0x2688)]-ReplacementFor_ma;if(
ReplacementFor_ma>ReplacementFor_ot){puts(
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45");return;}int ReplacementFor_mi=
(0x6b8+1797-0xdbd);for(int ReplacementFor_i=(0x13db+1871-0x1b2a);
ReplacementFor_i<(0x59f+477-0x779);++ReplacementFor_i){if(A[ReplacementFor_i]==
ReplacementFor_ma){ReplacementFor_mi=ReplacementFor_i;break;}}fill(
ReplacementFor_P,ReplacementFor_P+(0x17e1+2844-0x15f8),-(0x6ad+1708-0xd58));for(
int ReplacementFor_i=(0xe41+4498-0x1fd3);ReplacementFor_i<A[ReplacementFor_mi];
++ReplacementFor_i){ReplacementFor_P[(0x1120+704-0x13dd)*ReplacementFor_i]=
ReplacementFor_mi;}for(int ReplacementFor_i=(0xbb6+6827-0x2661);ReplacementFor_i
<A[(ReplacementFor_mi+(0x2a2+7956-0x21b5))%(0x2223+759-0x2517)];++
ReplacementFor_i){ReplacementFor_P[(0x2b2+4625-0x14c0)*ReplacementFor_i+
(0xbfd+2125-0x1449)]=(ReplacementFor_mi+(0x83c+281-0x954))%(0xef8+57-0xf2e);}for
(int ReplacementFor_i=(0x6c0+604-0x91c);ReplacementFor_i<A[(ReplacementFor_mi+
(0x1cc+3204-0xe4e))%(0x11fc+3597-0x2006)];++ReplacementFor_i){ReplacementFor_P[
(0x1dd9+881-0x2147)*(A[ReplacementFor_mi]-ReplacementFor_i)-(0x33a+3857-0x124a)]
=(ReplacementFor_mi+(0x2df+6031-0x1a6c))%(0x15e6+1833-0x1d0c);}for(int 
ReplacementFor_i=(0x9df+4345-0x1ad8);ReplacementFor_i<(0x1834+3404-0x187b);++
ReplacementFor_i){if(ReplacementFor_P[ReplacementFor_i]==-(0x801+3084-0x140c)){
continue;}putchar("\x52\x59\x42"[ReplacementFor_P[ReplacementFor_i]]);for(int 
ReplacementFor_j=(0x2160+878-0x24ce);ReplacementFor_j<ReplacementFor_B[
ReplacementFor_P[ReplacementFor_i]];++ReplacementFor_j){putchar("\x47\x56\x4f"[
ReplacementFor_P[ReplacementFor_i]]);putchar("\x52\x59\x42"[ReplacementFor_P[
ReplacementFor_i]]);}ReplacementFor_B[ReplacementFor_P[ReplacementFor_i]]=
(0x884+6877-0x2361);}puts("");}int main(){int ReplacementFor_T=ReplacementFor_in
();for(int ReplacementFor_CN=(0x19f+4795-0x1459);ReplacementFor_CN<=
ReplacementFor_T;++ReplacementFor_CN){printf(
"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",ReplacementFor_CN);solve();}return
(0x67f+2366-0xfbd);}
