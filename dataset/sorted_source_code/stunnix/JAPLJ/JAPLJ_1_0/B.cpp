
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
#include <array>
#include <list>
#include <stack>
#include <valarray>
using namespace std;typedef unsigned ReplacementFor_uint;typedef long long Int;
typedef unsigned long long ReplacementFor_UInt;const int ReplacementFor_INF=
1001001001;const Int ReplacementFor_INFLL=1001001001001001001LL;template<
typename ReplacementFor_T>void ReplacementFor_pv(ReplacementFor_T a,
ReplacementFor_T ReplacementFor_b){for(ReplacementFor_T ReplacementFor_i=a;
ReplacementFor_i!=ReplacementFor_b;++ReplacementFor_i)cout<<*ReplacementFor_i<<
"\x20";cout<<endl;}template<typename ReplacementFor_T>void ReplacementFor_chmin(
ReplacementFor_T&a,ReplacementFor_T ReplacementFor_b){if(a>ReplacementFor_b)a=
ReplacementFor_b;}template<typename ReplacementFor_T>void ReplacementFor_chmax(
ReplacementFor_T&a,ReplacementFor_T ReplacementFor_b){if(a<ReplacementFor_b)a=
ReplacementFor_b;}int ReplacementFor_in(){int ReplacementFor_x;scanf("\x25\x64",
&ReplacementFor_x);return ReplacementFor_x;}double fin(){double ReplacementFor_x
;scanf("\x25\x6c\x66",&ReplacementFor_x);return ReplacementFor_x;}Int 
ReplacementFor_lin(){Int ReplacementFor_x;scanf("\x25\x6c\x6c\x64",&
ReplacementFor_x);return ReplacementFor_x;}int ReplacementFor_P[
(0x1e30+4160-0x216b)];void solve(){ReplacementFor_in();int A[(0x4a+8186-0x2041)]
,ReplacementFor_B[(0x8f4+6490-0x224b)];for(int ReplacementFor_i=
(0x50b+1329-0xa3c);ReplacementFor_i<(0x3dc+5474-0x193b);++ReplacementFor_i){A[
ReplacementFor_i]=ReplacementFor_in();ReplacementFor_B[(ReplacementFor_i+
(0x45f+6673-0x1e6e))%(0x7a2+585-0x9e8)]=ReplacementFor_in();}int 
ReplacementFor_over=(0x8c2+3810-0x17a4),ReplacementFor_over_pos=
(0x612+1778-0xd04);for(int ReplacementFor_i=(0x1a12+2589-0x242f);
ReplacementFor_i<(0x1050+4472-0x21c5);++ReplacementFor_i){if(ReplacementFor_B[
ReplacementFor_i]>(0x12a8+2451-0x1c3b)&&A[ReplacementFor_i]<=ReplacementFor_B[
ReplacementFor_i]){ReplacementFor_over+=ReplacementFor_B[ReplacementFor_i]-A[
ReplacementFor_i]+(0x813+3206-0x1498);ReplacementFor_over_pos=ReplacementFor_i;}
}if(ReplacementFor_over>(0xff6+2850-0x1b17)){puts(
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45");return;}else if(ReplacementFor_over
==(0xb5+6341-0x1979)){bool ReplacementFor_ok=true;for(int ReplacementFor_i=
(0x19+7268-0x1c7c);ReplacementFor_i<=(0x14f+9618-0x26df);++ReplacementFor_i){
ReplacementFor_ok&=A[(ReplacementFor_over_pos+ReplacementFor_i)%
(0x1312+222-0x13ed)]==(0x18f5+228-0x19d9)&&ReplacementFor_B[(
ReplacementFor_over_pos+ReplacementFor_i)%(0xe7+760-0x3dc)]==(0xa53+411-0xbee);}
if(ReplacementFor_ok){for(int ReplacementFor_i=(0x1bf+9105-0x2550);
ReplacementFor_i<A[ReplacementFor_over_pos];++ReplacementFor_i){printf(
"\x25\x63\x25\x63","\x52\x59\x42"[ReplacementFor_over_pos],"\x47\x56\x4f"[
ReplacementFor_over_pos]);}puts("");}else{puts(
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45");}return;}for(int ReplacementFor_i=
(0x2ca+1109-0x71f);ReplacementFor_i<(0x16a8+381-0x1822);++ReplacementFor_i){A[
ReplacementFor_i]-=ReplacementFor_B[ReplacementFor_i];}int ReplacementFor_ma=max
({A[(0x526+4892-0x1842)],A[(0x2da+8404-0x23ad)],A[(0x10ed+3461-0x1e70)]});int 
ReplacementFor_ot=A[(0x9f4+7224-0x262c)]+A[(0xc8f+3882-0x1bb8)]+A[
(0xa65+5612-0x204f)]-ReplacementFor_ma;if(ReplacementFor_ma>ReplacementFor_ot){
puts("\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45");return;}int ReplacementFor_mi=
(0x457+2085-0xc7c);for(int ReplacementFor_i=(0x1414+3232-0x20b4);
ReplacementFor_i<(0x4e3+907-0x86b);++ReplacementFor_i){if(A[ReplacementFor_i]==
ReplacementFor_ma){ReplacementFor_mi=ReplacementFor_i;break;}}fill(
ReplacementFor_P,ReplacementFor_P+(0x116c+5064-0x182f),-(0x14e4+3230-0x2181));
for(int ReplacementFor_i=(0x1e09+2162-0x267b);ReplacementFor_i<A[
ReplacementFor_mi];++ReplacementFor_i){ReplacementFor_P[(0xea7+911-0x1233)*
ReplacementFor_i]=ReplacementFor_mi;}for(int ReplacementFor_i=(0xd1+2441-0xa5a);
ReplacementFor_i<A[(ReplacementFor_mi+(0x60f+6797-0x209b))%(0x2e7+3935-0x1243)];
++ReplacementFor_i){ReplacementFor_P[(0x4f2+3808-0x13cf)*ReplacementFor_i+
(0x1d89+339-0x1edb)]=(ReplacementFor_mi+(0x1fa+4371-0x130c))%(0x4aa+1374-0xa05);
}for(int ReplacementFor_i=(0x124b+4083-0x223e);ReplacementFor_i<A[(
ReplacementFor_mi+(0x95b+6190-0x2187))%(0xa16+900-0xd97)];++ReplacementFor_i){
ReplacementFor_P[(0x23d+12-0x246)*(A[ReplacementFor_mi]-ReplacementFor_i)-
(0x1df+4485-0x1363)]=(ReplacementFor_mi+(0x1bfd+71-0x1c42))%(0x2592+340-0x26e3);
}for(int ReplacementFor_i=(0x2c4+6658-0x1cc6);ReplacementFor_i<
(0x1571+5008-0x1bfc);++ReplacementFor_i){if(ReplacementFor_P[ReplacementFor_i]==
-(0x183+614-0x3e8)){continue;}putchar("\x52\x59\x42"[ReplacementFor_P[
ReplacementFor_i]]);for(int ReplacementFor_j=(0x1f9f+1047-0x23b6);
ReplacementFor_j<ReplacementFor_B[ReplacementFor_P[ReplacementFor_i]];++
ReplacementFor_j){putchar("\x47\x56\x4f"[ReplacementFor_P[ReplacementFor_i]]);
putchar("\x52\x59\x42"[ReplacementFor_P[ReplacementFor_i]]);}ReplacementFor_B[
ReplacementFor_P[ReplacementFor_i]]=(0x13da+643-0x165d);}puts("");}int main(){
int ReplacementFor_T=ReplacementFor_in();for(int ReplacementFor_CN=
(0x125f+2911-0x1dbd);ReplacementFor_CN<=ReplacementFor_T;++ReplacementFor_CN){
printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",ReplacementFor_CN);solve();}
return(0x6e9+6036-0x1e7d);}
