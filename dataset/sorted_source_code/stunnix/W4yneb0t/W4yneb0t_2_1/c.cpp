
#include<iostream>
#include<iomanip>
#include<cstdio>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<cassert>
#define ReplacementFor_PB push_back
#define ReplacementFor_MP make_pair
#define ReplacementFor_sz(ReplacementFor_v) (ReplacementFor_in((ReplacementFor_v\
).size()))
#define ReplacementFor_forn(ReplacementFor_i,ReplacementFor_n) for(\
ReplacementFor_in ReplacementFor_i=(0x29+8540-0x2185);ReplacementFor_i<(\
ReplacementFor_n);++ReplacementFor_i)
#define ReplacementFor_forv(ReplacementFor_i,ReplacementFor_v) \
ReplacementFor_forn(ReplacementFor_i,ReplacementFor_sz(ReplacementFor_v))
#define ReplacementFor_fors(ReplacementFor_i,s) for(auto ReplacementFor_i=(s).\
begin();ReplacementFor_i!=(s).end();++ReplacementFor_i)
#define ReplacementFor_all(ReplacementFor_v) (ReplacementFor_v).begin(),(\
ReplacementFor_v).end()
using namespace std;typedef long long ReplacementFor_in;typedef vector<
ReplacementFor_in>ReplacementFor_VI;typedef vector<ReplacementFor_VI>
ReplacementFor_VVI;const ReplacementFor_in ReplacementFor_inf=1e18;
ReplacementFor_VI ReplacementFor_mdist;vector<double>ReplacementFor_spd;
ReplacementFor_VVI ReplacementFor_d;vector<vector<double> >ReplacementFor_rld;
void ReplacementFor_dot(){ReplacementFor_in ReplacementFor_n,q;cin>>
ReplacementFor_n>>q;ReplacementFor_d=ReplacementFor_VVI(ReplacementFor_n,
ReplacementFor_VI(ReplacementFor_n,ReplacementFor_inf));ReplacementFor_rld=
vector<vector<double> >(ReplacementFor_n,vector<double>(ReplacementFor_n,
ReplacementFor_inf));ReplacementFor_mdist.resize(ReplacementFor_n);
ReplacementFor_spd.resize(ReplacementFor_n);ReplacementFor_forn(ReplacementFor_i
,ReplacementFor_n)cin>>ReplacementFor_mdist[ReplacementFor_i]>>
ReplacementFor_spd[ReplacementFor_i];ReplacementFor_in ReplacementFor_tt;
ReplacementFor_forn(ReplacementFor_i,ReplacementFor_n)ReplacementFor_d[
ReplacementFor_i][ReplacementFor_i]=ReplacementFor_rld[ReplacementFor_i][
ReplacementFor_i]=(0xf78+4432-0x20c8);ReplacementFor_forn(ReplacementFor_i,
ReplacementFor_n){ReplacementFor_forn(ReplacementFor_j,ReplacementFor_n){cin>>
ReplacementFor_tt;if(ReplacementFor_tt>-(0xaf6+5944-0x222d))ReplacementFor_d[
ReplacementFor_i][ReplacementFor_j]=ReplacementFor_tt;}}ReplacementFor_forn(
ReplacementFor_j,ReplacementFor_n){ReplacementFor_forn(ReplacementFor_i,
ReplacementFor_n){ReplacementFor_forn(ReplacementFor_k,ReplacementFor_n){
ReplacementFor_d[ReplacementFor_i][ReplacementFor_k]=min(ReplacementFor_d[
ReplacementFor_i][ReplacementFor_k],ReplacementFor_d[ReplacementFor_i][
ReplacementFor_j]+ReplacementFor_d[ReplacementFor_j][ReplacementFor_k]);}}}
ReplacementFor_forn(ReplacementFor_i,ReplacementFor_n){ReplacementFor_forn(
ReplacementFor_j,ReplacementFor_n){if(ReplacementFor_d[ReplacementFor_i][
ReplacementFor_j]<=ReplacementFor_mdist[ReplacementFor_i])ReplacementFor_rld[
ReplacementFor_i][ReplacementFor_j]=ReplacementFor_d[ReplacementFor_i][
ReplacementFor_j]/ReplacementFor_spd[ReplacementFor_i];}}ReplacementFor_forn(
ReplacementFor_j,ReplacementFor_n){ReplacementFor_forn(ReplacementFor_i,
ReplacementFor_n){ReplacementFor_forn(ReplacementFor_k,ReplacementFor_n){
ReplacementFor_rld[ReplacementFor_i][ReplacementFor_k]=min(ReplacementFor_rld[
ReplacementFor_i][ReplacementFor_k],ReplacementFor_rld[ReplacementFor_i][
ReplacementFor_j]+ReplacementFor_rld[ReplacementFor_j][ReplacementFor_k]);}}}
ReplacementFor_in ReplacementFor_ta,ReplacementFor_tb;ReplacementFor_forn(
ReplacementFor_z,q){cin>>ReplacementFor_ta>>ReplacementFor_tb;cout<<
ReplacementFor_rld[ReplacementFor_ta-(0xfaf+3627-0x1dd9)][ReplacementFor_tb-
(0x137a+749-0x1666)]<<"\x20";}cout<<"\n";}int main(){ios::sync_with_stdio(
(0x16b1+3969-0x2632));cin.tie((0xf7+5531-0x1692));cout<<setprecision(
(0x641+2897-0x1183));ReplacementFor_in ReplacementFor_t;cin>>ReplacementFor_t;
ReplacementFor_forn(ReplacementFor_z,ReplacementFor_t){cout<<
"\x43\x61\x73\x65\x20\x23"<<(ReplacementFor_z+(0x64+3765-0xf18))<<"\x3a\x20";
ReplacementFor_dot();}return(0xd1d+6564-0x26c1);}
