
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<cassert>
#define ReplacementFor_PB push_back
#define ReplacementFor_MP make_pair
#define ReplacementFor_sz(ReplacementFor_v) (ReplacementFor_in((ReplacementFor_v\
).size()))
#define ReplacementFor_forn(ReplacementFor_i,ReplacementFor_n) for(\
ReplacementFor_in ReplacementFor_i=(0x29f+2808-0xd97);ReplacementFor_i<(\
ReplacementFor_n);++ReplacementFor_i)
#define ReplacementFor_forv(ReplacementFor_i,ReplacementFor_v) \
ReplacementFor_forn(ReplacementFor_i,ReplacementFor_sz(ReplacementFor_v))
#define ReplacementFor_fors(ReplacementFor_i,s) for(auto ReplacementFor_i=(s).\
begin();ReplacementFor_i!=(s).end();++ReplacementFor_i)
#define ReplacementFor_all(ReplacementFor_v) (ReplacementFor_v).begin(),(\
ReplacementFor_v).end()
using namespace std;typedef long long ReplacementFor_in;typedef vector<
ReplacementFor_in>ReplacementFor_VI;typedef vector<ReplacementFor_VI>
ReplacementFor_VVI;vector<string>ReplacementFor_bs,ReplacementFor_rs,
ReplacementFor_ys;ReplacementFor_in ReplacementFor_n,ReplacementFor_r,
ReplacementFor_o,ReplacementFor_y,ReplacementFor_g,ReplacementFor_b,
ReplacementFor_v;bool ReplacementFor_mrg(ReplacementFor_in&a,ReplacementFor_in&
ReplacementFor_b,vector<string>&ReplacementFor_v,char ReplacementFor_ca,char 
ReplacementFor_cb){if(a+ReplacementFor_b==(0x5f7+4300-0x16c3))return
(0x14cb+2538-0x1eb4);if(a==ReplacementFor_b&&a+ReplacementFor_b==
ReplacementFor_n){string s;ReplacementFor_forn(ReplacementFor_i,a){s+=
ReplacementFor_ca;s+=ReplacementFor_cb;}cout<<s<<"\n";return(0x594+5476-0x1af8);
}if(a<=ReplacementFor_b){cout<<"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45" "\n";
return(0x510+5047-0x18c7);}string s((0x18fa+209-0x19ca),ReplacementFor_ca);
ReplacementFor_forn(ReplacementFor_i,ReplacementFor_b){s+=ReplacementFor_cb;s+=
ReplacementFor_ca;}ReplacementFor_v.ReplacementFor_PB(s);ReplacementFor_forn(
ReplacementFor_i,a-ReplacementFor_b-(0x1e98+1308-0x23b3))ReplacementFor_v.
ReplacementFor_PB(string((0xf70+5618-0x2561),ReplacementFor_ca));return
(0x1007+4318-0x20e4);}void ReplacementFor_dot(){cin>>ReplacementFor_n>>
ReplacementFor_r>>ReplacementFor_o>>ReplacementFor_y>>ReplacementFor_g>>
ReplacementFor_b>>ReplacementFor_v;ReplacementFor_bs.clear();ReplacementFor_rs.
clear();ReplacementFor_ys.clear();if(!ReplacementFor_mrg(ReplacementFor_r,
ReplacementFor_g,ReplacementFor_rs,((char)(0x12e3+2982-0x1e37)),
((char)(0xd14+2311-0x15d4))))return;if(!ReplacementFor_mrg(ReplacementFor_y,
ReplacementFor_v,ReplacementFor_ys,((char)(0x74c+2047-0xef2)),
((char)(0x162+7467-0x1e37))))return;if(!ReplacementFor_mrg(ReplacementFor_b,
ReplacementFor_o,ReplacementFor_bs,((char)(0x2344+984-0x26da)),
((char)(0x7d3+2640-0x11d4))))return;if(ReplacementFor_sz(ReplacementFor_ys)>
ReplacementFor_sz(ReplacementFor_rs))swap(ReplacementFor_ys,ReplacementFor_rs);
if(ReplacementFor_sz(ReplacementFor_bs)>ReplacementFor_sz(ReplacementFor_rs))
swap(ReplacementFor_bs,ReplacementFor_rs);ReplacementFor_r=ReplacementFor_sz(
ReplacementFor_rs);ReplacementFor_y=ReplacementFor_sz(ReplacementFor_ys);
ReplacementFor_b=ReplacementFor_sz(ReplacementFor_bs);if(ReplacementFor_r>
ReplacementFor_b+ReplacementFor_y||ReplacementFor_b>ReplacementFor_r+
ReplacementFor_y||ReplacementFor_y>ReplacementFor_b+ReplacementFor_r){cout<<
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45" "\n";return;}ReplacementFor_forn(
ReplacementFor_i,ReplacementFor_r){cout<<ReplacementFor_rs.back();
ReplacementFor_rs.pop_back();if(ReplacementFor_i<ReplacementFor_b){cout<<
ReplacementFor_bs.back();ReplacementFor_bs.pop_back();}else{cout<<
ReplacementFor_ys.back();ReplacementFor_ys.pop_back();}if(ReplacementFor_i<(
ReplacementFor_b+ReplacementFor_y-ReplacementFor_r)){cout<<ReplacementFor_ys.
back();ReplacementFor_ys.pop_back();}}cout<<"\n";}int main(){ios::
sync_with_stdio((0x6f5+4874-0x19ff));cin.tie((0x16c5+1653-0x1d3a));
ReplacementFor_in ReplacementFor_t;cin>>ReplacementFor_t;ReplacementFor_forn(
ReplacementFor_z,ReplacementFor_t){cout<<"\x43\x61\x73\x65\x20\x23"<<(
ReplacementFor_z+(0x1b67+1702-0x220c))<<"\x3a\x20";ReplacementFor_dot();}return
(0x1e30+532-0x2044);}
