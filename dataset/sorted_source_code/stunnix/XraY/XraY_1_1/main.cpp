
#ifdef DEBUG
#define ReplacementFor__GLIBCXX_DEBUG
#endif
#include <bits/stdc++.h>
using namespace std;mt19937 mrand(random_device{}());int rnd(int 
ReplacementFor_x){return mrand()%ReplacementFor_x;}typedef long double 
ReplacementFor_ld;typedef long long ReplacementFor_ll;
#ifdef DEBUG
#define ReplacementFor_eprintf(...) fprintf(stderr, ReplacementFor___VA_ARGS__),\
 fflush(stderr)
#else
#define ReplacementFor_eprintf(...) ;
#endif
#define ReplacementFor_pb push_back
#define ReplacementFor_mp make_pair
#define ReplacementFor_sz(ReplacementFor_x) ((int) (ReplacementFor_x).size())
#define ReplacementFor_TASK "\x74\x65\x78\x74"
const int ReplacementFor_inf=(int)1.01e9;const ReplacementFor_ld 
ReplacementFor_eps=1e-9;const ReplacementFor_ld ReplacementFor_pi=acos((
ReplacementFor_ld)-1.0);const int ReplacementFor_mod=(int)1e9+
(0x1ecf+1313-0x23e9);void ReplacementFor_add(int&ReplacementFor_x,int 
ReplacementFor_y){if((ReplacementFor_x+=ReplacementFor_y)>=ReplacementFor_mod){
ReplacementFor_x-=ReplacementFor_mod;}}int ReplacementFor_mult(int 
ReplacementFor_x,int ReplacementFor_y){return(long long)ReplacementFor_x*
ReplacementFor_y%ReplacementFor_mod;}int ReplacementFor_power(int 
ReplacementFor_x,int ReplacementFor_pw){int ReplacementFor_res=
(0x11d7+4335-0x22c5);for(;ReplacementFor_pw;ReplacementFor_pw>>=
(0x457+6308-0x1cfa)){if(ReplacementFor_pw&(0xc27+4259-0x1cc9)){
ReplacementFor_res=ReplacementFor_mult(ReplacementFor_res,ReplacementFor_x);}
ReplacementFor_x=ReplacementFor_mult(ReplacementFor_x,ReplacementFor_x);}return 
ReplacementFor_res;}void ReplacementFor_precalc(){}int ReplacementFor_n;int 
ReplacementFor_cnt[(0x10dd+2757-0x1b9c)];int read(){if(scanf("\x25\x64",&
ReplacementFor_n)<(0x182a+3755-0x26d4)){return(0xd7b+2867-0x18ae);}for(int 
ReplacementFor_i=(0x358+379-0x4d3);ReplacementFor_i<(0x1aed+2297-0x23e0);++
ReplacementFor_i){assert(scanf("\x25\x64",ReplacementFor_cnt+ReplacementFor_i)==
(0x149b+3532-0x2266));}return(0x1194+2349-0x1ac0);}char ReplacementFor_chs[]=
"\x52\x4f\x59\x47\x42\x56";void solve(){int ReplacementFor_ks[
(0xa71+6377-0x2357)]={ReplacementFor_cnt[(0x4a6+7791-0x2315)]-ReplacementFor_cnt
[(0x1191+5453-0x26db)],ReplacementFor_cnt[(0x597+4080-0x1585)]-
ReplacementFor_cnt[(0x130d+3048-0x1ef0)],ReplacementFor_cnt[(0x1431+4215-0x24a4)
]-ReplacementFor_cnt[(0x6fa+1942-0xe8f)]};for(int ReplacementFor_i=
(0x740+5328-0x1c10);ReplacementFor_i<(0x2097+517-0x2299);++ReplacementFor_i){if(
ReplacementFor_ks[ReplacementFor_i]<(0x843+6239-0x20a2)){printf(
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45" "\n");return;}}int ReplacementFor_sum
=ReplacementFor_ks[(0x6db+5715-0x1d2e)]+ReplacementFor_ks[(0xe3d+4900-0x2160)]+
ReplacementFor_ks[(0x79b+1278-0xc97)];for(int ReplacementFor_i=
(0xadd+1818-0x11f7);ReplacementFor_i<(0x44a+7083-0x1ff2);++ReplacementFor_i){
ReplacementFor_eprintf("\x25\x64\x20\x25\x64" "\n",ReplacementFor_ks[
ReplacementFor_i],ReplacementFor_cnt[ReplacementFor_i*(0xc6d+4657-0x1e9c)]);if(
ReplacementFor_ks[ReplacementFor_i]==(0x1de0+2301-0x26dd)&&ReplacementFor_cnt[
ReplacementFor_i*(0xff8+1512-0x15de)]>(0x190c+154-0x19a6)){if(ReplacementFor_cnt
[(ReplacementFor_i*(0x10bb+2862-0x1be7)+(0x64+4407-0x1199))%(0x118+4843-0x13fd)]
||ReplacementFor_cnt[(ReplacementFor_i*(0x1650+2313-0x1f57)+(0x13e9+4288-0x24a5)
)%(0x915+4525-0x1abc)]){printf("\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45" "\n");
return;}string ReplacementFor_ans="";for(int ReplacementFor_j=
(0x15ad+2411-0x1f18);ReplacementFor_j<ReplacementFor_cnt[ReplacementFor_i*
(0x39+6332-0x18f3)];++ReplacementFor_j){ReplacementFor_ans+=ReplacementFor_chs[
ReplacementFor_i*(0x11b6+3885-0x20e1)];ReplacementFor_ans+=ReplacementFor_chs[(
ReplacementFor_i*(0x221b+571-0x2454)+(0x12d3+3137-0x1f11))%(0xd40+1895-0x14a1)];
}printf("\x25\x73" "\n",ReplacementFor_ans.c_str());return;}}int 
ReplacementFor_pos0=max_element(ReplacementFor_ks,ReplacementFor_ks+
(0x12f+4236-0x11b8))-ReplacementFor_ks;if(ReplacementFor_ks[ReplacementFor_pos0]
*(0x487+3918-0x13d3)>ReplacementFor_sum){printf(
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45" "\n");return;}string 
ReplacementFor_ans="";int last=-(0x1972+597-0x1bc6);for(;ReplacementFor_sum>
(0x1379+1492-0x194d);--ReplacementFor_sum){int ReplacementFor_pos=-
(0x18a7+923-0x1c41);for(int ReplacementFor_i=(0x1a15+1568-0x2035);
ReplacementFor_i<(0x44d+8349-0x24e7);++ReplacementFor_i){if(ReplacementFor_i==
last){continue;}if(ReplacementFor_pos==-(0x25c+6321-0x1b0c)||ReplacementFor_ks[
ReplacementFor_pos]<ReplacementFor_ks[ReplacementFor_i]){ReplacementFor_pos=
ReplacementFor_i;continue;}if(ReplacementFor_ks[ReplacementFor_pos]==
ReplacementFor_ks[ReplacementFor_i]&&ReplacementFor_i==ReplacementFor_pos0){
ReplacementFor_pos=ReplacementFor_i;}}assert(ReplacementFor_ks[
ReplacementFor_pos]>(0x3e3+6551-0x1d7a));ReplacementFor_ks[ReplacementFor_pos]-=
(0xfd6+2725-0x1a7a);ReplacementFor_ans+=ReplacementFor_chs[ReplacementFor_pos*
(0x7d+6606-0x1a49)];auto&ReplacementFor_hard=ReplacementFor_cnt[(
ReplacementFor_pos*(0xc0a+2356-0x153c)+(0x1adb+482-0x1cba))%(0x1550+1911-0x1cc1)
];while(ReplacementFor_hard){--ReplacementFor_hard;ReplacementFor_ans+=
ReplacementFor_chs[(ReplacementFor_pos*(0x1c14+124-0x1c8e)+(0x515+1679-0xba1))%
(0x698+2906-0x11ec)];ReplacementFor_ans+=ReplacementFor_chs[ReplacementFor_pos*
(0x17e2+1687-0x1e77)];}last=ReplacementFor_pos;}assert(!ReplacementFor_ks[
(0x789+3740-0x1625)]&&!ReplacementFor_ks[(0x441+8188-0x243c)]&&!
ReplacementFor_ks[(0xb11+5243-0x1f8a)]);for(int ReplacementFor_i=
(0xa8+6745-0x1b00);ReplacementFor_i<(0x12b7+4206-0x231f);ReplacementFor_i+=
(0x12f+3648-0xf6d)){assert(!ReplacementFor_cnt[ReplacementFor_i]);}printf(
"\x25\x73" "\n",ReplacementFor_ans.c_str());assert(ReplacementFor_ans[
(0x738+5290-0x1be2)]!=ReplacementFor_ans.back());}int main(){
ReplacementFor_precalc();
#ifdef ReplacementFor_LOCAL
freopen(ReplacementFor_TASK"\x2e\x6f\x75\x74","\x77",stdout);assert(freopen(
ReplacementFor_TASK"\x2e\x69\x6e","\x72",stdin));
#endif
int ReplacementFor_t;scanf("\x25\x64",&ReplacementFor_t);ReplacementFor_t=
(0x1989+1986-0x214b);while((0x2584+344-0x26db)){if(!read()){break;}printf(
"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",++ReplacementFor_t);solve();
#ifdef DEBUG
ReplacementFor_eprintf("\x54\x69\x6d\x65\x20\x25\x2e\x32\x66" "\n",(double)clock
()/CLOCKS_PER_SEC);
#endif
}return(0x1e61+776-0x2169);}
