
#ifdef DEBUG
#define ReplacementFor__GLIBCXX_DEBUG
#endif
#include <bits/stdc++.h>
using namespace std;mt19937 mrand(random_device{}());int rnd(int 
ReplacementFor_x){return mrand()%ReplacementFor_x;}typedef long double 
ReplacementFor_ld;typedef long long ReplacementFor_ll;
#ifdef DEBUG
#define ReplacementFor_eprintf(...) fprintf(stderr, ReplacementFor___VA_ARGS__),\
 fflush(stderr)
#else
#define ReplacementFor_eprintf(...) ;
#endif
#define ReplacementFor_pb push_back
#define ReplacementFor_mp make_pair
#define ReplacementFor_sz(ReplacementFor_x) ((int) (ReplacementFor_x).size())
#define ReplacementFor_TASK "\x74\x65\x78\x74"
const int ReplacementFor_inf=(int)1.01e9;const ReplacementFor_ld 
ReplacementFor_eps=1e-9;const ReplacementFor_ld ReplacementFor_pi=acos((
ReplacementFor_ld)-1.0);const int ReplacementFor_mod=(int)1e9+
(0x1502+1035-0x1906);void ReplacementFor_add(int&ReplacementFor_x,int 
ReplacementFor_y){if((ReplacementFor_x+=ReplacementFor_y)>=ReplacementFor_mod){
ReplacementFor_x-=ReplacementFor_mod;}}int ReplacementFor_mult(int 
ReplacementFor_x,int ReplacementFor_y){return(long long)ReplacementFor_x*
ReplacementFor_y%ReplacementFor_mod;}int ReplacementFor_power(int 
ReplacementFor_x,int ReplacementFor_pw){int ReplacementFor_res=
(0x13cb+1882-0x1b24);for(;ReplacementFor_pw;ReplacementFor_pw>>=
(0x613+7572-0x23a6)){if(ReplacementFor_pw&(0x695+7842-0x2536)){
ReplacementFor_res=ReplacementFor_mult(ReplacementFor_res,ReplacementFor_x);}
ReplacementFor_x=ReplacementFor_mult(ReplacementFor_x,ReplacementFor_x);}return 
ReplacementFor_res;}void ReplacementFor_precalc(){}const int ReplacementFor_maxn
=(int)1e3+(0x1018+824-0x1346);int ReplacementFor_len,ReplacementFor_n;int 
ReplacementFor_xs[ReplacementFor_maxn],ReplacementFor_ss[ReplacementFor_maxn];
int read(){if(scanf("\x25\x64\x25\x64",&ReplacementFor_len,&ReplacementFor_n)<
(0xd03+5382-0x2207)){return(0x1046+2629-0x1a8b);}for(int ReplacementFor_i=
(0x2320+826-0x265a);ReplacementFor_i<ReplacementFor_n;++ReplacementFor_i){scanf(
"\x25\x64\x25\x64",ReplacementFor_xs+ReplacementFor_i,ReplacementFor_ss+
ReplacementFor_i);}return(0xcc8+3178-0x1931);}void solve(){ReplacementFor_ld 
ReplacementFor_res=1e30;for(int ReplacementFor_i=(0x4dc+8596-0x2670);
ReplacementFor_i<ReplacementFor_n;++ReplacementFor_i){ReplacementFor_res=min(
ReplacementFor_res,(ReplacementFor_ld)ReplacementFor_len/(ReplacementFor_len-
ReplacementFor_xs[ReplacementFor_i])*ReplacementFor_ss[ReplacementFor_i]);}
printf("\x25\x2e\x31\x38\x66" "\n",(double)ReplacementFor_res);}int main(){
ReplacementFor_precalc();
#ifdef ReplacementFor_LOCAL
freopen(ReplacementFor_TASK"\x2e\x6f\x75\x74","\x77",stdout);assert(freopen(
ReplacementFor_TASK"\x2e\x69\x6e","\x72",stdin));
#endif
int ReplacementFor_t;scanf("\x25\x64",&ReplacementFor_t);ReplacementFor_t=
(0x26+448-0x1e6);while((0xd66+4562-0x1f37)){if(!read()){break;}printf(
"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",++ReplacementFor_t);solve();
#ifdef DEBUG
ReplacementFor_eprintf("\x54\x69\x6d\x65\x20\x25\x2e\x32\x66" "\n",(double)clock
()/CLOCKS_PER_SEC);
#endif
}return(0xc5a+6200-0x2492);}
