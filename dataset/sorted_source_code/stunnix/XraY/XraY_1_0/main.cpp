
#ifdef DEBUG
#define ReplacementFor__GLIBCXX_DEBUG
#endif
#include <bits/stdc++.h>
using namespace std;mt19937 mrand(random_device{}());int rnd(int 
ReplacementFor_x){return mrand()%ReplacementFor_x;}typedef long double 
ReplacementFor_ld;typedef long long ReplacementFor_ll;
#ifdef DEBUG
#define ReplacementFor_eprintf(...) fprintf(stderr, ReplacementFor___VA_ARGS__),\
 fflush(stderr)
#else
#define ReplacementFor_eprintf(...) ;
#endif
#define ReplacementFor_pb push_back
#define ReplacementFor_mp make_pair
#define ReplacementFor_sz(ReplacementFor_x) ((int) (ReplacementFor_x).size())
#define ReplacementFor_TASK "\x74\x65\x78\x74"
const int ReplacementFor_inf=(int)1.01e9;const ReplacementFor_ld 
ReplacementFor_eps=1e-9;const ReplacementFor_ld ReplacementFor_pi=acos((
ReplacementFor_ld)-1.0);const int ReplacementFor_mod=(int)1e9+(0x2d+8583-0x21ad)
;void ReplacementFor_add(int&ReplacementFor_x,int ReplacementFor_y){if((
ReplacementFor_x+=ReplacementFor_y)>=ReplacementFor_mod){ReplacementFor_x-=
ReplacementFor_mod;}}int ReplacementFor_mult(int ReplacementFor_x,int 
ReplacementFor_y){return(long long)ReplacementFor_x*ReplacementFor_y%
ReplacementFor_mod;}int ReplacementFor_power(int ReplacementFor_x,int 
ReplacementFor_pw){int ReplacementFor_res=(0xa3d+4237-0x1ac9);for(;
ReplacementFor_pw;ReplacementFor_pw>>=(0x40d+4813-0x16d9)){if(ReplacementFor_pw&
(0x39c+7201-0x1fbc)){ReplacementFor_res=ReplacementFor_mult(ReplacementFor_res,
ReplacementFor_x);}ReplacementFor_x=ReplacementFor_mult(ReplacementFor_x,
ReplacementFor_x);}return ReplacementFor_res;}void ReplacementFor_precalc(){}int
 ReplacementFor_n;int ReplacementFor_cnt[(0x47c+2614-0xeac)];int read(){if(scanf
("\x25\x64",&ReplacementFor_n)<(0x114c+813-0x1478)){return(0xe89+1696-0x1529);}
for(int ReplacementFor_i=(0x307+546-0x529);ReplacementFor_i<(0x460+5898-0x1b64);
++ReplacementFor_i){assert(scanf("\x25\x64",ReplacementFor_cnt+ReplacementFor_i)
==(0x3dc+2296-0xcd3));}return(0x782+1940-0xf15);}char ReplacementFor_chs[]=
"\x52\x4f\x59\x47\x42\x56";void solve(){int ReplacementFor_ks[
(0xa0d+1950-0x11a8)]={ReplacementFor_cnt[(0x1a61+3215-0x26f0)]-
ReplacementFor_cnt[(0x18f+2668-0xbf8)],ReplacementFor_cnt[(0x13f+2497-0xafe)]-
ReplacementFor_cnt[(0x4b5+7918-0x239e)],ReplacementFor_cnt[(0xfeb+1694-0x1685)]-
ReplacementFor_cnt[(0x668+2558-0x1065)]};for(int ReplacementFor_i=
(0x1557+2823-0x205e);ReplacementFor_i<(0x253+6224-0x1aa0);++ReplacementFor_i){if
(ReplacementFor_ks[ReplacementFor_i]<(0x6b7+4597-0x18ac)){printf(
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45" "\n");return;}}int ReplacementFor_sum
=ReplacementFor_ks[(0x1d29+599-0x1f80)]+ReplacementFor_ks[(0x244+5565-0x1800)]+
ReplacementFor_ks[(0xed+2312-0x9f3)];for(int ReplacementFor_i=
(0x9f8+1799-0x10ff);ReplacementFor_i<(0x157+96-0x1b4);++ReplacementFor_i){if(
ReplacementFor_ks[ReplacementFor_i]==(0xefb+3704-0x1d73)&&ReplacementFor_cnt[
ReplacementFor_i*(0xad2+1165-0xf5d)]>(0x12c2+2052-0x1ac6)){if(ReplacementFor_sum
!=ReplacementFor_ks[ReplacementFor_i]){printf(
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45" "\n");return;}string 
ReplacementFor_ans="";for(int ReplacementFor_j=(0x495+4332-0x1581);
ReplacementFor_j<ReplacementFor_cnt[ReplacementFor_i*(0x367+7785-0x21ce)];++
ReplacementFor_j){ReplacementFor_ans+=ReplacementFor_chs[ReplacementFor_i*
(0xbdd+1960-0x1383)];ReplacementFor_ans+=ReplacementFor_chs[(ReplacementFor_i*
(0x3d5+1699-0xa76)+(0x970+521-0xb76))%(0x75f+1428-0xced)];}printf(
"\x25\x73" "\n",ReplacementFor_ans.c_str());return;}}int ReplacementFor_pos0=
max_element(ReplacementFor_ks,ReplacementFor_ks+(0x12c+4648-0x1351))-
ReplacementFor_ks;if(ReplacementFor_ks[ReplacementFor_pos0]*(0xb7d+1101-0xfc8)>
ReplacementFor_sum){printf("\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45" "\n");
return;}string ReplacementFor_ans="";int last=-(0x1de9+430-0x1f96);for(;
ReplacementFor_sum>(0xa8a+3776-0x194a);--ReplacementFor_sum){int 
ReplacementFor_pos=-(0x690+3342-0x139d);for(int ReplacementFor_i=
(0x11df+3529-0x1fa8);ReplacementFor_i<(0x7ba+3899-0x16f2);++ReplacementFor_i){if
(ReplacementFor_i==last){continue;}if(ReplacementFor_pos==-(0x380+8795-0x25da)||
ReplacementFor_ks[ReplacementFor_pos]<ReplacementFor_ks[ReplacementFor_i]){
ReplacementFor_pos=ReplacementFor_i;continue;}if(ReplacementFor_ks[
ReplacementFor_pos]==ReplacementFor_ks[ReplacementFor_i]&&ReplacementFor_i==
ReplacementFor_pos0){ReplacementFor_pos=ReplacementFor_i;}}assert(
ReplacementFor_ks[ReplacementFor_pos]>(0x1ff+7457-0x1f20));ReplacementFor_ks[
ReplacementFor_pos]-=(0x1278+4513-0x2418);ReplacementFor_ans+=ReplacementFor_chs
[ReplacementFor_pos*(0x387+5485-0x18f2)];auto&ReplacementFor_hard=
ReplacementFor_cnt[(ReplacementFor_pos*(0x188+7040-0x1d06)+(0x11d7+3754-0x207e))
%(0x145d+4450-0x25b9)];if(ReplacementFor_hard){--ReplacementFor_hard;
ReplacementFor_ans+=ReplacementFor_chs[(ReplacementFor_pos*(0x1ffa+1164-0x2484)+
(0x1d89+214-0x1e5c))%(0x17cd+354-0x1929)];ReplacementFor_ans+=ReplacementFor_chs
[ReplacementFor_pos*(0xe93+2942-0x1a0f)];}last=ReplacementFor_pos;}printf(
"\x25\x73" "\n",ReplacementFor_ans.c_str());assert(ReplacementFor_ans[
(0x1527+649-0x17b0)]!=ReplacementFor_ans.back());}int main(){
ReplacementFor_precalc();
#ifdef ReplacementFor_LOCAL
freopen(ReplacementFor_TASK"\x2e\x6f\x75\x74","\x77",stdout);assert(freopen(
ReplacementFor_TASK"\x2e\x69\x6e","\x72",stdin));
#endif
int ReplacementFor_t;scanf("\x25\x64",&ReplacementFor_t);ReplacementFor_t=
(0x29b+6424-0x1bb3);while((0xf27+2277-0x180b)){if(!read()){break;}printf(
"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",++ReplacementFor_t);solve();
#ifdef DEBUG
ReplacementFor_eprintf("\x54\x69\x6d\x65\x20\x25\x2e\x32\x66" "\n",(double)clock
()/CLOCKS_PER_SEC);
#endif
}return(0xbdf+1423-0x116e);}
