
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <cstdio>
#include <cassert>
using namespace std;string ReplacementFor_alternate(int ReplacementFor_N,char 
ReplacementFor_ch1,char ReplacementFor_ch2){string S;for(int ReplacementFor_i=
(0x317+7998-0x2255);ReplacementFor_i<ReplacementFor_N;ReplacementFor_i++){S+=
ReplacementFor_ch1;S+=ReplacementFor_ch2;}return S;}string ReplacementFor_expand
(const string&S,int ReplacementFor_N,char ReplacementFor_ch1,char 
ReplacementFor_ch2){if(ReplacementFor_N==(0x4d1+1730-0xb93))return S;string 
ReplacementFor_T=ReplacementFor_alternate(ReplacementFor_N,ReplacementFor_ch1,
ReplacementFor_ch2);for(int ReplacementFor_i=(0xdc1+5978-0x251b);
ReplacementFor_i<S.size();ReplacementFor_i++){if(S[ReplacementFor_i]==
ReplacementFor_ch1){return S.substr((0x2d2+2448-0xc62),ReplacementFor_i)+
ReplacementFor_T+S.substr(ReplacementFor_i);}}return"";}string solve(int 
ReplacementFor_N,int ReplacementFor_R,int ReplacementFor_O,int ReplacementFor_Y,
int ReplacementFor_G,int ReplacementFor_B,int ReplacementFor_V){if(
ReplacementFor_R+ReplacementFor_G==ReplacementFor_N&&ReplacementFor_R==
ReplacementFor_G){return ReplacementFor_alternate(ReplacementFor_R,
((char)(0x3f7+973-0x772)),((char)(0xe8b+121-0xebd)));}if(ReplacementFor_Y+
ReplacementFor_V==ReplacementFor_N&&ReplacementFor_Y==ReplacementFor_V){return 
ReplacementFor_alternate(ReplacementFor_Y,((char)(0xb79+2415-0x148f)),
((char)(0x1fb+6256-0x1a15)));}if(ReplacementFor_B+ReplacementFor_O==
ReplacementFor_N&&ReplacementFor_B==ReplacementFor_O){return 
ReplacementFor_alternate(ReplacementFor_B,((char)(0x801+5232-0x1c2f)),
((char)(0x972+467-0xaf6)));}bool ReplacementFor_fail=false;if(ReplacementFor_O>
(0x95b+6417-0x226c)){ReplacementFor_B-=ReplacementFor_O;if(ReplacementFor_B<=
(0xac6+1755-0x11a1)){return"";}}if(ReplacementFor_G>(0x1a2f+2042-0x2229)){
ReplacementFor_R-=ReplacementFor_G;if(ReplacementFor_R<=(0x35a+8833-0x25db)){
return"";}}if(ReplacementFor_V>(0x701+7642-0x24db)){ReplacementFor_Y-=
ReplacementFor_V;if(ReplacementFor_Y<=(0xfa6+1438-0x1544)){return"";}}vector<
pair<int,char> >A;A.push_back(make_pair(ReplacementFor_R,
((char)(0x5af+6951-0x2084))));A.push_back(make_pair(ReplacementFor_Y,
((char)(0x79f+7918-0x2634))));A.push_back(make_pair(ReplacementFor_B,
((char)(0x802+2956-0x134c))));sort(A.rbegin(),A.rend());if(A[(0x28+4635-0x1243)]
.first>A[(0xc29+609-0xe89)].first+A[(0x4b6+6786-0x1f36)].first){return"";}string
 S(ReplacementFor_R+ReplacementFor_Y+ReplacementFor_B,((char)(0x171+3467-0xebd))
);for(int ReplacementFor_i=(0x898+4173-0x18e5);ReplacementFor_i<A[
(0x119+542-0x337)].first;ReplacementFor_i++){S[(0x440+6294-0x1cd4)*
ReplacementFor_i]=A[(0x283+5923-0x19a6)].second;}for(int ReplacementFor_i=
(0x40c+741-0x6ef)*A[(0x538+3619-0x135b)].first-(0x1559+1021-0x1955);
ReplacementFor_i<ReplacementFor_R+ReplacementFor_Y+ReplacementFor_B;
ReplacementFor_i++){if(S[ReplacementFor_i-(0x1556+4531-0x2708)]==A[
(0x107+5336-0x15de)].second){S[ReplacementFor_i]=A[(0xd34+4837-0x2017)].second;A
[(0x1b5+3131-0xdee)].first--;}else{S[ReplacementFor_i]=A[(0x17f8+3571-0x25ea)].
second;A[(0x1712+2110-0x1f4f)].first--;}}for(int ReplacementFor_i=
(0x7a0+1807-0xeaf);ReplacementFor_i<S.size();ReplacementFor_i++){if(S[
ReplacementFor_i]==((char)(0x1f9+2916-0xd1e))){if(A[(0xe48+177-0xef8)].first>
(0x395+2034-0xb87)){A[(0x23d+9309-0x2699)].first--;S[ReplacementFor_i]=A[
(0x21a4+320-0x22e3)].second;}else{A[(0x858+5753-0x1ecf)].first--;S[
ReplacementFor_i]=A[(0x17f6+1266-0x1ce6)].second;}}}assert(A[(0xded+6194-0x261e)
].first==(0xf7f+5894-0x2685));assert(A[(0x25e3+10-0x25eb)].first==
(0x1b64+592-0x1db4));S=ReplacementFor_expand(S,ReplacementFor_O,
((char)(0x1057+3614-0x1e33)),((char)(0x133c+359-0x1454)));S=
ReplacementFor_expand(S,ReplacementFor_G,((char)(0x686+1613-0xc81)),
((char)(0x54+1956-0x7b1)));S=ReplacementFor_expand(S,ReplacementFor_V,
((char)(0x173+1570-0x73c)),((char)(0x2221+114-0x223d)));return S;}void 
ReplacementFor_check(const string&S,int ReplacementFor_R,int ReplacementFor_O,
int ReplacementFor_Y,int ReplacementFor_G,int ReplacementFor_B,int 
ReplacementFor_V){map<char,int>f;map<char,int>bts;f[((char)(0xb59+5624-0x20ff))]
=ReplacementFor_R;f[((char)(0xe4f+2037-0x15f5))]=ReplacementFor_O;f[
((char)(0xd73+5768-0x23a2))]=ReplacementFor_Y;f[((char)(0x8c8+6851-0x2344))]=
ReplacementFor_G;f[((char)(0x1389+592-0x1597))]=ReplacementFor_B;f[
((char)(0x308+7072-0x1e52))]=ReplacementFor_V;bts[((char)(0x7c6+2980-0x1318))]=
(0x1835+18-0x1846);bts[((char)(0x1e10+1368-0x2319))]=(0xebb+1176-0x1342);bts[
((char)(0x173b+1858-0x1e24))]=(0xfb0+5161-0x23c9);bts[
((char)(0xcbb+4576-0x1e54))]=(0x1d5+6440-0x19ed);bts[((char)(0x21f+7491-0x1f20))
]=(0x2c4+9024-0x2504);bts[((char)(0x19d+4206-0x11b5))]=(0x29c+137-0x224);for(int
 ReplacementFor_i=(0x106f+2381-0x19bc);ReplacementFor_i<S.size();
ReplacementFor_i++){if(--f[S[ReplacementFor_i]]<(0x1e20+2241-0x26e1)){cerr<<
"\x46\x41\x49\x4c\x20\x43\x48\x45\x43\x4b"<<endl;exit((0x5a+9529-0x2592));}}for(
auto ReplacementFor_i:f){if(ReplacementFor_i.second>(0x6b1+6931-0x21c4)){cerr<<
"\x46\x41\x49\x4c\x20\x43\x48\x45\x43\x4b\x20\x32"<<endl;exit(
(0x950+7422-0x264d));}}for(int ReplacementFor_i=(0x108a+4906-0x23b4);
ReplacementFor_i<S.size();ReplacementFor_i++){char ReplacementFor_ch=S[
ReplacementFor_i];char ReplacementFor_nxt=S[(ReplacementFor_i+(0x55b+2348-0xe86)
)%S.size()];if(bts[ReplacementFor_ch]&bts[ReplacementFor_nxt]){cerr<<
"\x46\x41\x49\x4c\x20\x43\x48\x45\x43\x4b\x20\x33"<<endl;exit((0x229+223-0x307))
;}}}int main(){int ReplacementFor_T;cin>>ReplacementFor_T;for(int 
ReplacementFor_t=(0x1a5d+2972-0x25f8);ReplacementFor_t<=ReplacementFor_T;
ReplacementFor_t++){int ReplacementFor_N,ReplacementFor_R,ReplacementFor_O,
ReplacementFor_Y,ReplacementFor_G,ReplacementFor_B,ReplacementFor_V;cin>>
ReplacementFor_N>>ReplacementFor_R>>ReplacementFor_O>>ReplacementFor_Y>>
ReplacementFor_G>>ReplacementFor_B>>ReplacementFor_V;string S=solve(
ReplacementFor_N,ReplacementFor_R,ReplacementFor_O,ReplacementFor_Y,
ReplacementFor_G,ReplacementFor_B,ReplacementFor_V);if(S.size()==
(0x55d+6814-0x1ffb)){S="\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45";}else{
ReplacementFor_check(S,ReplacementFor_R,ReplacementFor_O,ReplacementFor_Y,
ReplacementFor_G,ReplacementFor_B,ReplacementFor_V);}cout<<
"\x43\x61\x73\x65\x20\x23"<<ReplacementFor_t<<"\x3a\x20"<<S<<endl;}return
(0x1e8+7716-0x200c);}
