
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <ctype.h>
#include <deque>
#include <queue>
#include <cstring>
#include <set>
#include <list>
#include <map>
#include <random>
#include <unordered_map>
#include <stdio.h>
using namespace std;typedef long long ReplacementFor_ll;typedef long double 
ReplacementFor_ld;typedef std::vector<ReplacementFor_ld>ReplacementFor_vld;
typedef std::vector<ReplacementFor_vld>ReplacementFor_vvld;typedef std::vector<
int>ReplacementFor_vi;typedef std::vector<bool>ReplacementFor_vb;typedef std::
vector<string>ReplacementFor_vs;typedef std::vector<double>ReplacementFor_vd;
typedef std::vector<long long>ReplacementFor_vll;typedef std::vector<std::vector
<int> >ReplacementFor_vvi;typedef vector<ReplacementFor_vvi>ReplacementFor_vvvi;
typedef vector<ReplacementFor_vll>ReplacementFor_vvll;typedef std::vector<std::
pair<int,int> >ReplacementFor_vpi;typedef vector<ReplacementFor_vpi>
ReplacementFor_vvpi;typedef std::pair<int,int>ReplacementFor_pi;typedef std::
pair<ReplacementFor_ll,ReplacementFor_ll>ReplacementFor_pll;typedef std::vector<
ReplacementFor_pll>ReplacementFor_vpll;const long long ReplacementFor_mod=
1000000007;
#define ReplacementFor_all(ReplacementFor_c) (ReplacementFor_c).begin(),(\
ReplacementFor_c).end()
#define ReplacementFor_sz(ReplacementFor_c) (int)(ReplacementFor_c).size()
#define ReplacementFor_forn(ReplacementFor_i, a, ReplacementFor_b) for(int \
ReplacementFor_i = a; ReplacementFor_i < ReplacementFor_b; ReplacementFor_i++)
#define ReplacementFor_pb push_back
#define ReplacementFor_mp make_pair
int main(){
#ifndef ReplacementFor_ONLINE_JUDGE
freopen("\x69\x6e\x70\x75\x74\x2e\x74\x78\x74","\x72\x74",stdin);freopen(
"\x6f\x75\x74\x70\x75\x74\x2e\x74\x78\x74","\x77\x74",stdout);
#endif
int ReplacementFor_t;scanf("\x25\x64",&ReplacementFor_t);ReplacementFor_forn(
ReplacementFor_iad,(0x1a0c+1924-0x2190),ReplacementFor_t){printf(
"\x43\x61\x73\x65\x20\x23\x25\x64\x3a",ReplacementFor_iad+(0x1901+3287-0x25d7));
int ReplacementFor_n,q;scanf("\x25\x64\x20\x25\x64",&ReplacementFor_n,&q);
ReplacementFor_vll ReplacementFor_st(ReplacementFor_n),ReplacementFor_sp(
ReplacementFor_n);ReplacementFor_forn(ReplacementFor_i,(0x11ef+1609-0x1838),
ReplacementFor_n){scanf("\x25\x6c\x6c\x64\x20\x25\x6c\x6c\x64",&
ReplacementFor_st[ReplacementFor_i],&ReplacementFor_sp[ReplacementFor_i]);}
ReplacementFor_vvll ReplacementFor_d(ReplacementFor_n,ReplacementFor_vll(
ReplacementFor_n,(0x7b5+7935-0x26b4)));ReplacementFor_forn(ReplacementFor_i,
(0x118f+1399-0x1706),ReplacementFor_n)ReplacementFor_forn(ReplacementFor_j,
(0x177a+153-0x1813),ReplacementFor_n)scanf("\x25\x6c\x6c\x64",&ReplacementFor_d[
ReplacementFor_i][ReplacementFor_j]);const ReplacementFor_ll ReplacementFor_INF=
1e18;ReplacementFor_forn(ReplacementFor_i,(0x1517+1813-0x1c2c),ReplacementFor_n)
ReplacementFor_forn(ReplacementFor_j,(0xb9+6061-0x1866),ReplacementFor_n)if(
ReplacementFor_d[ReplacementFor_i][ReplacementFor_j]==-(0x587+7798-0x23fc))
ReplacementFor_d[ReplacementFor_i][ReplacementFor_j]=ReplacementFor_INF;for(int 
ReplacementFor_k=(0x901+2563-0x1304);ReplacementFor_k<ReplacementFor_n;++
ReplacementFor_k)for(int ReplacementFor_i=(0x366+557-0x593);ReplacementFor_i<
ReplacementFor_n;++ReplacementFor_i)for(int ReplacementFor_j=(0x2312+595-0x2565)
;ReplacementFor_j<ReplacementFor_n;++ReplacementFor_j)if(ReplacementFor_d[
ReplacementFor_i][ReplacementFor_k]<ReplacementFor_INF&&ReplacementFor_d[
ReplacementFor_k][ReplacementFor_j]<ReplacementFor_INF)ReplacementFor_d[
ReplacementFor_i][ReplacementFor_j]=min(ReplacementFor_d[ReplacementFor_i][
ReplacementFor_j],ReplacementFor_d[ReplacementFor_i][ReplacementFor_k]+
ReplacementFor_d[ReplacementFor_k][ReplacementFor_j]);const ReplacementFor_ld 
ReplacementFor_INF2=1e18;ReplacementFor_vvld ReplacementFor_dist(
ReplacementFor_n,ReplacementFor_vld(ReplacementFor_n,(0x1a37+231-0x1b1c)*
ReplacementFor_INF2));ReplacementFor_forn(ReplacementFor_i,(0x12f6+4434-0x2448),
ReplacementFor_n)ReplacementFor_forn(ReplacementFor_j,(0x111a+5375-0x2619),
ReplacementFor_n){if(ReplacementFor_d[ReplacementFor_i][ReplacementFor_j]<=
ReplacementFor_st[ReplacementFor_i])ReplacementFor_dist[ReplacementFor_i][
ReplacementFor_j]=(ReplacementFor_ld)ReplacementFor_d[ReplacementFor_i][
ReplacementFor_j]/(ReplacementFor_ld)ReplacementFor_sp[ReplacementFor_i];}for(
int ReplacementFor_k=(0x1932+3468-0x26be);ReplacementFor_k<ReplacementFor_n;++
ReplacementFor_k)for(int ReplacementFor_i=(0x18df+2836-0x23f3);ReplacementFor_i<
ReplacementFor_n;++ReplacementFor_i)for(int ReplacementFor_j=(0x2d6+2726-0xd7c);
ReplacementFor_j<ReplacementFor_n;++ReplacementFor_j)if(ReplacementFor_dist[
ReplacementFor_i][ReplacementFor_k]<ReplacementFor_INF2&&ReplacementFor_dist[
ReplacementFor_k][ReplacementFor_j]<ReplacementFor_INF2)ReplacementFor_dist[
ReplacementFor_i][ReplacementFor_j]=min(ReplacementFor_dist[ReplacementFor_i][
ReplacementFor_j],ReplacementFor_dist[ReplacementFor_i][ReplacementFor_k]+
ReplacementFor_dist[ReplacementFor_k][ReplacementFor_j]);ReplacementFor_forn(
ReplacementFor_i,(0x293+4838-0x1579),q){int ReplacementFor_u,ReplacementFor_v;
scanf("\x25\x64\x20\x25\x64",&ReplacementFor_u,&ReplacementFor_v);
ReplacementFor_u--;ReplacementFor_v--;printf("\x20\x25\x2e\x31\x30\x6c\x66",(
double)ReplacementFor_dist[ReplacementFor_u][ReplacementFor_v]);}printf("\n");}}
