
#include <cstdio>
#include <algorithm>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <string>
#include <string.h>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <numeric>
#include <cctype>
#include <bitset>
#include <cassert>
#define ReplacementFor_fi first
#define ReplacementFor_se second
#define ReplacementFor_rep(ReplacementFor_i,ReplacementFor_n) for(int \
ReplacementFor_i = (0xa8c+1976-0x1244); ReplacementFor_i < (ReplacementFor_n); \
++ReplacementFor_i)
#define ReplacementFor_rrep(ReplacementFor_i,ReplacementFor_n) for(int \
ReplacementFor_i = (0x29a+1249-0x77a); ReplacementFor_i <= (ReplacementFor_n); \
++ReplacementFor_i)
#define ReplacementFor_drep(ReplacementFor_i,ReplacementFor_n) for(int \
ReplacementFor_i = (ReplacementFor_n)-(0x58f+7200-0x21ae); ReplacementFor_i >= \
(0x17e6+5-0x17eb); --ReplacementFor_i)
#define ReplacementFor_gep(ReplacementFor_i,ReplacementFor_g,ReplacementFor_j) \
for(int ReplacementFor_i = ReplacementFor_g.ReplacementFor_head[ReplacementFor_j\
]; ReplacementFor_i != -(0x5d3+7337-0x227b); ReplacementFor_i = ReplacementFor_g\
.ReplacementFor_e[ReplacementFor_i].ReplacementFor_next)
#define each(ReplacementFor_it,ReplacementFor_c) for(ReplacementFor___typeof((\
ReplacementFor_c).begin()) ReplacementFor_it=(ReplacementFor_c).begin();\
ReplacementFor_it!=(ReplacementFor_c).end();ReplacementFor_it++)
#define ReplacementFor_rng(a) a.begin(),a.end()
#define ReplacementFor_maxs(ReplacementFor_x,ReplacementFor_y) ReplacementFor_x \
= max(ReplacementFor_x,ReplacementFor_y)
#define ReplacementFor_mins(ReplacementFor_x,ReplacementFor_y) ReplacementFor_x \
= min(ReplacementFor_x,ReplacementFor_y)
#define ReplacementFor_pb push_back
#define ReplacementFor_sz(ReplacementFor_x) (int)(ReplacementFor_x).size()
#define ReplacementFor_pcnt ReplacementFor___builtin_popcount
#define ReplacementFor_uni(ReplacementFor_x) ReplacementFor_x.\
ReplacementFor_erase(unique(ReplacementFor_rng(ReplacementFor_x)),\
ReplacementFor_x.end())
#define ReplacementFor_snuke ReplacementFor_srand((unsigned)clock()+(unsigned)\
ReplacementFor_time(NULL));
#define ReplacementFor_df(ReplacementFor_x) int ReplacementFor_x = \
ReplacementFor_in()
#define ReplacementFor_dame { puts("\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45"); \
return;}
#define ReplacementFor_show(ReplacementFor_x) cout<<#ReplacementFor_x<<\
"\x20\x3d\x20"<<ReplacementFor_x<<endl;
#define ReplacementFor_PQ(ReplacementFor_T) priority_queue<ReplacementFor_T,\
vector<ReplacementFor_T>,greater<ReplacementFor_T> >
#define ReplacementFor_bn(ReplacementFor_x) (((0x63b+7694-0x2448)<<\
ReplacementFor_x)-(0x7f2+3260-0x14ad))
#define ReplacementFor_newline puts("")
#define ReplacementFor_v(ReplacementFor_T) vector<ReplacementFor_T>
#define ReplacementFor_vv(ReplacementFor_T) vector<vector<ReplacementFor_T>>
using namespace std;typedef long long ReplacementFor_ll;typedef unsigned 
ReplacementFor_uint;typedef unsigned long long ReplacementFor_ull;typedef pair<
int,int>ReplacementFor_P;typedef vector<int>ReplacementFor_vi;typedef vector<
ReplacementFor_vi>ReplacementFor_vvi;typedef vector<ReplacementFor_ll>
ReplacementFor_vl;typedef vector<ReplacementFor_P>ReplacementFor_vp;inline int 
ReplacementFor_in(){int ReplacementFor_x;scanf("\x25\x64",&ReplacementFor_x);
return ReplacementFor_x;}inline void ReplacementFor_priv(ReplacementFor_vi a){
ReplacementFor_rep(ReplacementFor_i,ReplacementFor_sz(a))printf(
"\x25\x64\x25\x63",a[ReplacementFor_i],ReplacementFor_i==ReplacementFor_sz(a)-
(0x208f+168-0x2136)?'\n':((char)(0x492+7774-0x22d0)));}template<typename 
ReplacementFor_T>istream&operator>>(istream&ReplacementFor_i,vector<
ReplacementFor_T>&ReplacementFor_v){ReplacementFor_rep(ReplacementFor_j,
ReplacementFor_sz(ReplacementFor_v))ReplacementFor_i>>ReplacementFor_v[
ReplacementFor_j];return ReplacementFor_i;}template<typename ReplacementFor_T>
string join(const vector<ReplacementFor_T>&ReplacementFor_v){stringstream s;
ReplacementFor_rep(ReplacementFor_i,ReplacementFor_sz(ReplacementFor_v))s<<
((char)(0x16d+9299-0x25a0))<<ReplacementFor_v[ReplacementFor_i];return s.str().
substr((0xa62+6437-0x2386));}template<typename ReplacementFor_T>ostream&operator
<<(ostream&ReplacementFor_o,const vector<ReplacementFor_T>&ReplacementFor_v){if(
ReplacementFor_sz(ReplacementFor_v))ReplacementFor_o<<join(ReplacementFor_v);
return ReplacementFor_o;}template<typename ReplacementFor_T1,typename 
ReplacementFor_T2>istream&operator>>(istream&ReplacementFor_i,pair<
ReplacementFor_T1,ReplacementFor_T2>&ReplacementFor_v){return ReplacementFor_i>>
ReplacementFor_v.ReplacementFor_fi>>ReplacementFor_v.ReplacementFor_se;}template
<typename ReplacementFor_T1,typename ReplacementFor_T2>ostream&operator<<(
ostream&ReplacementFor_o,const pair<ReplacementFor_T1,ReplacementFor_T2>&
ReplacementFor_v){return ReplacementFor_o<<ReplacementFor_v.ReplacementFor_fi<<
"\x2c"<<ReplacementFor_v.ReplacementFor_se;}const int ReplacementFor_MX=100005,
ReplacementFor_INF=1001001001;const ReplacementFor_ll ReplacementFor_LINF=1e18;
const double ReplacementFor_eps=1e-10;struct ReplacementFor_Solver{void solve(){
string s="\x52\x59\x42\x47\x56\x4f";ReplacementFor_vi a((0x4fc+3587-0x12f9));int
 ReplacementFor_n;cin>>ReplacementFor_n;cin>>a[(0x2356+231-0x243d)];cin>>a[
(0x1809+2651-0x225f)];cin>>a[(0x1e6b+2209-0x270b)];cin>>a[(0xbea+6835-0x269a)];
cin>>a[(0x8c2+4462-0x1a2e)];cin>>a[(0xd92+4253-0x1e2b)];ReplacementFor_rep(
ReplacementFor_i,(0x1b99+1003-0x1f81)){int ReplacementFor_x=a[
(0x212+7227-0x1e4a)+ReplacementFor_i];if(a[ReplacementFor_i]<ReplacementFor_x)
ReplacementFor_dame;if(!ReplacementFor_x)continue;if(a[ReplacementFor_i]==
ReplacementFor_x){ReplacementFor_rep(ReplacementFor_j,(0x153c+3462-0x22bf))if(
ReplacementFor_i!=ReplacementFor_j){if(a[ReplacementFor_j]||a[ReplacementFor_j+
(0x12b0+188-0x1369)])ReplacementFor_dame;}string ReplacementFor_ans;
ReplacementFor_rep(ReplacementFor_j,a[ReplacementFor_i]){ReplacementFor_ans+=s[
ReplacementFor_i];ReplacementFor_ans+=s[ReplacementFor_i+(0x150+7303-0x1dd4)];}
cout<<ReplacementFor_ans<<endl;return;}a[ReplacementFor_i]-=ReplacementFor_x;}
int ReplacementFor_mx=(0x2e7+7761-0x2138),ReplacementFor_sum=(0x8b5+4842-0x1b9f)
;ReplacementFor_rep(ReplacementFor_i,(0x239c+717-0x2666))ReplacementFor_maxs(
ReplacementFor_mx,a[ReplacementFor_i]),ReplacementFor_sum+=a[ReplacementFor_i];
ReplacementFor_rep(ReplacementFor_i,(0x2181+366-0x22ec))a[ReplacementFor_i]*=
(0x15f3+1562-0x1c0b);ReplacementFor_rep(ReplacementFor_i,(0xdfc+4897-0x211a))if(
a[ReplacementFor_i]==ReplacementFor_mx*(0x1d8+57-0x20f))a[ReplacementFor_i]++;if
(ReplacementFor_mx*(0x28f+8587-0x2418)>ReplacementFor_sum)ReplacementFor_dame;
string ReplacementFor_ans;int ReplacementFor_pre=-(0x83d+2500-0x1200);
ReplacementFor_rep(ReplacementFor_i,ReplacementFor_sum){ReplacementFor_P 
ReplacementFor_p((0x9c1+4171-0x1a0c),-(0x1efa+412-0x2095));ReplacementFor_rep(
ReplacementFor_j,(0x1900+2721-0x239e))if(ReplacementFor_pre!=ReplacementFor_j)
ReplacementFor_maxs(ReplacementFor_p,ReplacementFor_P(a[ReplacementFor_j],
ReplacementFor_j));int ReplacementFor_x=ReplacementFor_p.ReplacementFor_se;
assert(ReplacementFor_x!=-(0x1a31+3065-0x2629));a[ReplacementFor_x]-=
(0x1db1+2243-0x2672);ReplacementFor_pre=ReplacementFor_x;ReplacementFor_ans+=s[
ReplacementFor_x];}ReplacementFor_rep(ReplacementFor_i,(0x2b8+3171-0xf18)){
ReplacementFor_rep(ReplacementFor_j,ReplacementFor_sz(ReplacementFor_ans)){if(
ReplacementFor_ans[ReplacementFor_j]==s[ReplacementFor_i]){string 
ReplacementFor_x;ReplacementFor_rep(ReplacementFor_k,a[ReplacementFor_i+
(0x17a5+3482-0x253c)])ReplacementFor_x+=s[ReplacementFor_i],ReplacementFor_x+=s[
ReplacementFor_i+(0x4c8+6383-0x1db4)];ReplacementFor_ans.insert(
ReplacementFor_ans.begin()+ReplacementFor_j,ReplacementFor_rng(ReplacementFor_x)
);break;}}}assert(ReplacementFor_sz(ReplacementFor_ans)==ReplacementFor_n);
assert(ReplacementFor_ans[(0x720+920-0xab8)]!=ReplacementFor_ans.back());cout<<
ReplacementFor_ans<<endl;}};int main(){int ReplacementFor_ts;scanf("\x25\x64",&
ReplacementFor_ts);ReplacementFor_rrep(ReplacementFor_ti,ReplacementFor_ts){
ReplacementFor_Solver ReplacementFor_solver;printf(
"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",ReplacementFor_ti);
ReplacementFor_solver.solve();}return(0x162b+4053-0x2600);}
