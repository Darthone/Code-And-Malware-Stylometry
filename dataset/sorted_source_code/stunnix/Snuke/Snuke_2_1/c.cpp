
#include <cstdio>
#include <algorithm>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <string>
#include <string.h>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <numeric>
#include <cctype>
#include <bitset>
#include <cassert>
#define ReplacementFor_fi first
#define ReplacementFor_se second
#define ReplacementFor_rep(ReplacementFor_i,ReplacementFor_n) for(int \
ReplacementFor_i = (0x6e6+2369-0x1027); ReplacementFor_i < (ReplacementFor_n); \
++ReplacementFor_i)
#define ReplacementFor_rrep(ReplacementFor_i,ReplacementFor_n) for(int \
ReplacementFor_i = (0x9f9+6294-0x228e); ReplacementFor_i <= (ReplacementFor_n); \
++ReplacementFor_i)
#define ReplacementFor_drep(ReplacementFor_i,ReplacementFor_n) for(int \
ReplacementFor_i = (ReplacementFor_n)-(0xee7+5827-0x25a9); ReplacementFor_i >= \
(0x773+1004-0xb5f); --ReplacementFor_i)
#define ReplacementFor_gep(ReplacementFor_i,ReplacementFor_g,ReplacementFor_j) \
for(int ReplacementFor_i = ReplacementFor_g.ReplacementFor_head[ReplacementFor_j\
]; ReplacementFor_i != -(0x402+4098-0x1403); ReplacementFor_i = ReplacementFor_g\
.ReplacementFor_e[ReplacementFor_i].ReplacementFor_next)
#define each(ReplacementFor_it,ReplacementFor_c) for(ReplacementFor___typeof((\
ReplacementFor_c).begin()) ReplacementFor_it=(ReplacementFor_c).begin();\
ReplacementFor_it!=(ReplacementFor_c).end();ReplacementFor_it++)
#define ReplacementFor_rng(a) a.begin(),a.end()
#define ReplacementFor_maxs(ReplacementFor_x,ReplacementFor_y) ReplacementFor_x \
= max(ReplacementFor_x,ReplacementFor_y)
#define ReplacementFor_mins(ReplacementFor_x,ReplacementFor_y) ReplacementFor_x \
= min(ReplacementFor_x,ReplacementFor_y)
#define ReplacementFor_pb push_back
#define ReplacementFor_sz(ReplacementFor_x) (int)(ReplacementFor_x).size()
#define ReplacementFor_pcnt ReplacementFor___builtin_popcount
#define ReplacementFor_uni(ReplacementFor_x) ReplacementFor_x.\
ReplacementFor_erase(unique(ReplacementFor_rng(ReplacementFor_x)),\
ReplacementFor_x.end())
#define ReplacementFor_snuke ReplacementFor_srand((unsigned)clock()+(unsigned)\
ReplacementFor_time(NULL));
#define ReplacementFor_df(ReplacementFor_x) int ReplacementFor_x = \
ReplacementFor_in()
#define ReplacementFor_dame { puts("\x2d\x31"); return;}
#define ReplacementFor_show(ReplacementFor_x) cout<<#ReplacementFor_x<<\
"\x20\x3d\x20"<<ReplacementFor_x<<endl;
#define ReplacementFor_PQ(ReplacementFor_T) priority_queue<ReplacementFor_T,\
vector<ReplacementFor_T>,greater<ReplacementFor_T> >
#define ReplacementFor_bn(ReplacementFor_x) (((0x154d+230-0x1632)<<\
ReplacementFor_x)-(0xf1a+5840-0x25e9))
#define ReplacementFor_newline puts("")
#define ReplacementFor_v(ReplacementFor_T) vector<ReplacementFor_T>
#define ReplacementFor_vv(ReplacementFor_T) vector<vector<ReplacementFor_T>>
using namespace std;typedef long long ReplacementFor_ll;typedef unsigned 
ReplacementFor_uint;typedef unsigned long long ReplacementFor_ull;typedef pair<
int,int>ReplacementFor_P;typedef vector<int>ReplacementFor_vi;typedef vector<
ReplacementFor_vi>ReplacementFor_vvi;typedef vector<ReplacementFor_ll>
ReplacementFor_vl;typedef vector<ReplacementFor_vl>ReplacementFor_vvl;typedef 
vector<ReplacementFor_P>ReplacementFor_vp;inline int ReplacementFor_in(){int 
ReplacementFor_x;scanf("\x25\x64",&ReplacementFor_x);return ReplacementFor_x;}
inline void ReplacementFor_priv(ReplacementFor_vi a){ReplacementFor_rep(
ReplacementFor_i,ReplacementFor_sz(a))printf("\x25\x64\x25\x63",a[
ReplacementFor_i],ReplacementFor_i==ReplacementFor_sz(a)-(0x24f+8003-0x2191)?
'\n':((char)(0x778+1642-0xdc2)));}template<typename ReplacementFor_T>istream&
operator>>(istream&ReplacementFor_i,vector<ReplacementFor_T>&ReplacementFor_v){
ReplacementFor_rep(ReplacementFor_j,ReplacementFor_sz(ReplacementFor_v))
ReplacementFor_i>>ReplacementFor_v[ReplacementFor_j];return ReplacementFor_i;}
template<typename ReplacementFor_T>string join(const vector<ReplacementFor_T>&
ReplacementFor_v){stringstream s;ReplacementFor_rep(ReplacementFor_i,
ReplacementFor_sz(ReplacementFor_v))s<<((char)(0x614+2846-0x1112))<<
ReplacementFor_v[ReplacementFor_i];return s.str().substr((0x1231+1219-0x16f3));}
template<typename ReplacementFor_T>ostream&operator<<(ostream&ReplacementFor_o,
const vector<ReplacementFor_T>&ReplacementFor_v){if(ReplacementFor_sz(
ReplacementFor_v))ReplacementFor_o<<join(ReplacementFor_v);return 
ReplacementFor_o;}template<typename ReplacementFor_T1,typename ReplacementFor_T2
>istream&operator>>(istream&ReplacementFor_i,pair<ReplacementFor_T1,
ReplacementFor_T2>&ReplacementFor_v){return ReplacementFor_i>>ReplacementFor_v.
ReplacementFor_fi>>ReplacementFor_v.ReplacementFor_se;}template<typename 
ReplacementFor_T1,typename ReplacementFor_T2>ostream&operator<<(ostream&
ReplacementFor_o,const pair<ReplacementFor_T1,ReplacementFor_T2>&
ReplacementFor_v){return ReplacementFor_o<<ReplacementFor_v.ReplacementFor_fi<<
"\x2c"<<ReplacementFor_v.ReplacementFor_se;}const int ReplacementFor_MX=100005,
ReplacementFor_INF=1001001001;const ReplacementFor_ll ReplacementFor_LINF=1e18;
const double ReplacementFor_eps=1e-10;typedef vector<double>ReplacementFor_vd;
typedef vector<ReplacementFor_vd>ReplacementFor_vvd;struct ReplacementFor_Solver
{void solve(){int ReplacementFor_n,q;cin>>ReplacementFor_n>>q;ReplacementFor_vvl
 ReplacementFor_g(ReplacementFor_n,ReplacementFor_vl(ReplacementFor_n,
ReplacementFor_LINF));ReplacementFor_vl ReplacementFor_e(ReplacementFor_n),s(
ReplacementFor_n);ReplacementFor_rep(ReplacementFor_i,ReplacementFor_n)cin>>
ReplacementFor_e[ReplacementFor_i]>>s[ReplacementFor_i];ReplacementFor_rep(
ReplacementFor_i,ReplacementFor_n)ReplacementFor_rep(ReplacementFor_j,
ReplacementFor_n)cin>>ReplacementFor_g[ReplacementFor_i][ReplacementFor_j];
ReplacementFor_rep(ReplacementFor_i,ReplacementFor_n)ReplacementFor_rep(
ReplacementFor_j,ReplacementFor_n)if(ReplacementFor_g[ReplacementFor_i][
ReplacementFor_j]==-(0x5f3+4301-0x16bf))ReplacementFor_g[ReplacementFor_i][
ReplacementFor_j]=ReplacementFor_LINF;ReplacementFor_rep(ReplacementFor_k,
ReplacementFor_n)ReplacementFor_rep(ReplacementFor_i,ReplacementFor_n)
ReplacementFor_rep(ReplacementFor_j,ReplacementFor_n)ReplacementFor_mins(
ReplacementFor_g[ReplacementFor_i][ReplacementFor_j],ReplacementFor_g[
ReplacementFor_i][ReplacementFor_k]+ReplacementFor_g[ReplacementFor_k][
ReplacementFor_j]);ReplacementFor_vvd ReplacementFor_dp(ReplacementFor_n,
ReplacementFor_vd(ReplacementFor_n,1e18));ReplacementFor_rep(ReplacementFor_i,
ReplacementFor_n)ReplacementFor_rep(ReplacementFor_j,ReplacementFor_n){if(
ReplacementFor_e[ReplacementFor_i]<ReplacementFor_g[ReplacementFor_i][
ReplacementFor_j])continue;ReplacementFor_dp[ReplacementFor_i][ReplacementFor_j]
=1.0*ReplacementFor_g[ReplacementFor_i][ReplacementFor_j]/s[ReplacementFor_i];}
ReplacementFor_rep(ReplacementFor_k,ReplacementFor_n)ReplacementFor_rep(
ReplacementFor_i,ReplacementFor_n)ReplacementFor_rep(ReplacementFor_j,
ReplacementFor_n)ReplacementFor_mins(ReplacementFor_dp[ReplacementFor_i][
ReplacementFor_j],ReplacementFor_dp[ReplacementFor_i][ReplacementFor_k]+
ReplacementFor_dp[ReplacementFor_k][ReplacementFor_j]);ReplacementFor_rep(
ReplacementFor_qi,q){int a,ReplacementFor_b;scanf("\x25\x64\x25\x64",&a,&
ReplacementFor_b);--a;--ReplacementFor_b;printf("\x25\x2e\x31\x30\x66\x25\x63",
ReplacementFor_dp[a][ReplacementFor_b],ReplacementFor_qi==q-(0xe50+5706-0x2499)?
'\n':((char)(0x19a1+1431-0x1f18)));}}};int main(){int ReplacementFor_ts;scanf(
"\x25\x64",&ReplacementFor_ts);ReplacementFor_rrep(ReplacementFor_ti,
ReplacementFor_ts){ReplacementFor_Solver ReplacementFor_solver;printf(
"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",ReplacementFor_ti);
ReplacementFor_solver.solve();}return(0xc72+1404-0x11ee);}
