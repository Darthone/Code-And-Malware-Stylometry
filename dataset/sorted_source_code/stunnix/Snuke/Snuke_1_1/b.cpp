
#include <cstdio>
#include <algorithm>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <string>
#include <string.h>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <numeric>
#include <cctype>
#include <bitset>
#include <cassert>
#define ReplacementFor_fi first
#define ReplacementFor_se second
#define ReplacementFor_rep(ReplacementFor_i,ReplacementFor_n) for(int \
ReplacementFor_i = (0x21b8+602-0x2412); ReplacementFor_i < (ReplacementFor_n); \
++ReplacementFor_i)
#define ReplacementFor_rrep(ReplacementFor_i,ReplacementFor_n) for(int \
ReplacementFor_i = (0x100f+1613-0x165b); ReplacementFor_i <= (ReplacementFor_n);\
 ++ReplacementFor_i)
#define ReplacementFor_drep(ReplacementFor_i,ReplacementFor_n) for(int \
ReplacementFor_i = (ReplacementFor_n)-(0x339+4663-0x156f); ReplacementFor_i >= \
(0x1716+2367-0x2055); --ReplacementFor_i)
#define ReplacementFor_gep(ReplacementFor_i,ReplacementFor_g,ReplacementFor_j) \
for(int ReplacementFor_i = ReplacementFor_g.ReplacementFor_head[ReplacementFor_j\
]; ReplacementFor_i != -(0x704+3890-0x1635); ReplacementFor_i = ReplacementFor_g\
.ReplacementFor_e[ReplacementFor_i].ReplacementFor_next)
#define each(ReplacementFor_it,ReplacementFor_c) for(ReplacementFor___typeof((\
ReplacementFor_c).begin()) ReplacementFor_it=(ReplacementFor_c).begin();\
ReplacementFor_it!=(ReplacementFor_c).end();ReplacementFor_it++)
#define ReplacementFor_rng(a) a.begin(),a.end()
#define ReplacementFor_maxs(ReplacementFor_x,ReplacementFor_y) ReplacementFor_x \
= max(ReplacementFor_x,ReplacementFor_y)
#define ReplacementFor_mins(ReplacementFor_x,ReplacementFor_y) ReplacementFor_x \
= min(ReplacementFor_x,ReplacementFor_y)
#define ReplacementFor_pb push_back
#define ReplacementFor_sz(ReplacementFor_x) (int)(ReplacementFor_x).size()
#define ReplacementFor_pcnt ReplacementFor___builtin_popcount
#define ReplacementFor_uni(ReplacementFor_x) ReplacementFor_x.\
ReplacementFor_erase(unique(ReplacementFor_rng(ReplacementFor_x)),\
ReplacementFor_x.end())
#define ReplacementFor_snuke ReplacementFor_srand((unsigned)clock()+(unsigned)\
ReplacementFor_time(NULL));
#define ReplacementFor_df(ReplacementFor_x) int ReplacementFor_x = \
ReplacementFor_in()
#define ReplacementFor_dame { puts("\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45"); \
return;}
#define ReplacementFor_show(ReplacementFor_x) cout<<#ReplacementFor_x<<\
"\x20\x3d\x20"<<ReplacementFor_x<<endl;
#define ReplacementFor_PQ(ReplacementFor_T) priority_queue<ReplacementFor_T,\
vector<ReplacementFor_T>,greater<ReplacementFor_T> >
#define ReplacementFor_bn(ReplacementFor_x) (((0xca0+4673-0x1ee0)<<\
ReplacementFor_x)-(0x438+2857-0xf60))
#define ReplacementFor_newline puts("")
#define ReplacementFor_v(ReplacementFor_T) vector<ReplacementFor_T>
#define ReplacementFor_vv(ReplacementFor_T) vector<vector<ReplacementFor_T>>
using namespace std;typedef long long ReplacementFor_ll;typedef unsigned 
ReplacementFor_uint;typedef unsigned long long ReplacementFor_ull;typedef pair<
int,int>ReplacementFor_P;typedef vector<int>ReplacementFor_vi;typedef vector<
ReplacementFor_vi>ReplacementFor_vvi;typedef vector<ReplacementFor_ll>
ReplacementFor_vl;typedef vector<ReplacementFor_P>ReplacementFor_vp;inline int 
ReplacementFor_in(){int ReplacementFor_x;scanf("\x25\x64",&ReplacementFor_x);
return ReplacementFor_x;}inline void ReplacementFor_priv(ReplacementFor_vi a){
ReplacementFor_rep(ReplacementFor_i,ReplacementFor_sz(a))printf(
"\x25\x64\x25\x63",a[ReplacementFor_i],ReplacementFor_i==ReplacementFor_sz(a)-
(0x1ca6+1822-0x23c3)?'\n':((char)(0x1ffc+1186-0x247e)));}template<typename 
ReplacementFor_T>istream&operator>>(istream&ReplacementFor_i,vector<
ReplacementFor_T>&ReplacementFor_v){ReplacementFor_rep(ReplacementFor_j,
ReplacementFor_sz(ReplacementFor_v))ReplacementFor_i>>ReplacementFor_v[
ReplacementFor_j];return ReplacementFor_i;}template<typename ReplacementFor_T>
string join(const vector<ReplacementFor_T>&ReplacementFor_v){stringstream s;
ReplacementFor_rep(ReplacementFor_i,ReplacementFor_sz(ReplacementFor_v))s<<
((char)(0x1e1+2997-0xd76))<<ReplacementFor_v[ReplacementFor_i];return s.str().
substr((0xa02+3048-0x15e9));}template<typename ReplacementFor_T>ostream&operator
<<(ostream&ReplacementFor_o,const vector<ReplacementFor_T>&ReplacementFor_v){if(
ReplacementFor_sz(ReplacementFor_v))ReplacementFor_o<<join(ReplacementFor_v);
return ReplacementFor_o;}template<typename ReplacementFor_T1,typename 
ReplacementFor_T2>istream&operator>>(istream&ReplacementFor_i,pair<
ReplacementFor_T1,ReplacementFor_T2>&ReplacementFor_v){return ReplacementFor_i>>
ReplacementFor_v.ReplacementFor_fi>>ReplacementFor_v.ReplacementFor_se;}template
<typename ReplacementFor_T1,typename ReplacementFor_T2>ostream&operator<<(
ostream&ReplacementFor_o,const pair<ReplacementFor_T1,ReplacementFor_T2>&
ReplacementFor_v){return ReplacementFor_o<<ReplacementFor_v.ReplacementFor_fi<<
"\x2c"<<ReplacementFor_v.ReplacementFor_se;}const int ReplacementFor_MX=100005,
ReplacementFor_INF=1001001001;const ReplacementFor_ll ReplacementFor_LINF=1e18;
const double ReplacementFor_eps=1e-10;struct ReplacementFor_Solver{void solve(){
string s="\x52\x59\x42\x47\x56\x4f";ReplacementFor_vi a((0x958+6836-0x2406));int
 ReplacementFor_n;cin>>ReplacementFor_n;cin>>a[(0xbec+4568-0x1dc4)];cin>>a[
(0x27a+4487-0x13fc)];cin>>a[(0x17bb+550-0x19e0)];cin>>a[(0x1807+42-0x182e)];cin
>>a[(0x1cab+1935-0x2438)];cin>>a[(0xa2f+2402-0x138d)];ReplacementFor_rep(
ReplacementFor_i,(0x14d7+1435-0x1a6f)){int ReplacementFor_x=a[
(0x15b4+250-0x16ab)+ReplacementFor_i];if(a[ReplacementFor_i]<ReplacementFor_x)
ReplacementFor_dame;if(!ReplacementFor_x)continue;if(a[ReplacementFor_i]==
ReplacementFor_x){ReplacementFor_rep(ReplacementFor_j,(0x4b9+6245-0x1d1b))if(
ReplacementFor_i!=ReplacementFor_j){if(a[ReplacementFor_j]||a[ReplacementFor_j+
(0x1f5d+239-0x2049)])ReplacementFor_dame;}string ReplacementFor_ans;
ReplacementFor_rep(ReplacementFor_j,a[ReplacementFor_i]){ReplacementFor_ans+=s[
ReplacementFor_i];ReplacementFor_ans+=s[ReplacementFor_i+(0x120c+3532-0x1fd5)];}
cout<<ReplacementFor_ans<<endl;return;}a[ReplacementFor_i]-=ReplacementFor_x;}
int ReplacementFor_mx=(0x204f+1014-0x2445),ReplacementFor_sum=
(0x1555+1043-0x1968);ReplacementFor_rep(ReplacementFor_i,(0xac5+2401-0x1423))
ReplacementFor_maxs(ReplacementFor_mx,a[ReplacementFor_i]),ReplacementFor_sum+=a
[ReplacementFor_i];ReplacementFor_rep(ReplacementFor_i,(0x31+9835-0x2699))a[
ReplacementFor_i]*=(0xdb8+3859-0x1cc9);ReplacementFor_rep(ReplacementFor_i,
(0x1754+295-0x1878))if(a[ReplacementFor_i]==ReplacementFor_mx*
(0x1460+2214-0x1d04))a[ReplacementFor_i]++;if(ReplacementFor_mx*
(0x1cd+6580-0x1b7f)>ReplacementFor_sum)ReplacementFor_dame;string 
ReplacementFor_ans;int ReplacementFor_pre=-(0xfc7+3563-0x1db1);
ReplacementFor_rep(ReplacementFor_i,ReplacementFor_sum){ReplacementFor_P 
ReplacementFor_p((0xb34+5425-0x2065),-(0x5c+5347-0x153e));ReplacementFor_rep(
ReplacementFor_j,(0x877+5028-0x1c18))if(ReplacementFor_pre!=ReplacementFor_j)
ReplacementFor_maxs(ReplacementFor_p,ReplacementFor_P(a[ReplacementFor_j],
ReplacementFor_j));int ReplacementFor_x=ReplacementFor_p.ReplacementFor_se;
assert(ReplacementFor_x!=-(0x104+7649-0x1ee4));a[ReplacementFor_x]-=
(0xa4+2520-0xa7a);ReplacementFor_pre=ReplacementFor_x;ReplacementFor_ans+=s[
ReplacementFor_x];}ReplacementFor_rep(ReplacementFor_i,(0x96c+4256-0x1a09)){
ReplacementFor_rep(ReplacementFor_j,ReplacementFor_sz(ReplacementFor_ans)){if(
ReplacementFor_ans[ReplacementFor_j]==s[ReplacementFor_i]){string 
ReplacementFor_x;ReplacementFor_rep(ReplacementFor_k,a[ReplacementFor_i+
(0x18a9+42-0x18d0)])ReplacementFor_x+=s[ReplacementFor_i],ReplacementFor_x+=s[
ReplacementFor_i+(0x35a+4891-0x1672)];ReplacementFor_ans.insert(
ReplacementFor_ans.begin()+ReplacementFor_j,ReplacementFor_rng(ReplacementFor_x)
);break;}}}assert(ReplacementFor_sz(ReplacementFor_ans)==ReplacementFor_n);
assert(ReplacementFor_ans[(0x1196+698-0x1450)]!=ReplacementFor_ans.back());cout
<<ReplacementFor_ans<<endl;}};int main(){int ReplacementFor_ts;scanf("\x25\x64",
&ReplacementFor_ts);ReplacementFor_rrep(ReplacementFor_ti,ReplacementFor_ts){
ReplacementFor_Solver ReplacementFor_solver;printf(
"\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",ReplacementFor_ti);
ReplacementFor_solver.solve();}return(0x86+4946-0x13d8);}
