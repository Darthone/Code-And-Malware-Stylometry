
#include <bits/stdc++.h>
using namespace std;struct ReplacementFor_Problem{void solve(){int 
ReplacementFor_n;int ReplacementFor_r,ReplacementFor_o,ReplacementFor_y,
ReplacementFor_g,ReplacementFor_b,ReplacementFor_v;cin>>ReplacementFor_n>>
ReplacementFor_r>>ReplacementFor_o>>ReplacementFor_y>>ReplacementFor_g>>
ReplacementFor_b>>ReplacementFor_v;if(ReplacementFor_g==ReplacementFor_r&&
ReplacementFor_n==ReplacementFor_r+ReplacementFor_g){for(int ReplacementFor_i=
(0x9e8+5789-0x2085);ReplacementFor_i<ReplacementFor_r;ReplacementFor_i++)cout<<
"\x52\x47";cout<<endl;return;}if(ReplacementFor_v==ReplacementFor_y&&
ReplacementFor_n==ReplacementFor_v+ReplacementFor_y){for(int ReplacementFor_i=
(0x757+1775-0xe46);ReplacementFor_i<ReplacementFor_v;ReplacementFor_i++)cout<<
"\x56\x59";cout<<endl;return;}if(ReplacementFor_o==ReplacementFor_b&&
ReplacementFor_n==ReplacementFor_o+ReplacementFor_b){for(int ReplacementFor_i=
(0x1433+740-0x1717);ReplacementFor_i<ReplacementFor_o;ReplacementFor_i++)cout<<
"\x4f\x42";cout<<endl;return;}if((ReplacementFor_g&&ReplacementFor_g+
(0x52f+1391-0xa9d)>ReplacementFor_r)||(ReplacementFor_v&&ReplacementFor_v+
(0x2fb+5929-0x1a23)>ReplacementFor_y)||(ReplacementFor_o&&ReplacementFor_o+
(0x8b+2870-0xbc0)>ReplacementFor_b)){cout<<
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45"<<endl;return;}string first[]={"\x52",
"\x59","\x42"};if(ReplacementFor_g){ReplacementFor_r-=ReplacementFor_g;string s=
"\x52";for(int ReplacementFor_i=(0x101+7316-0x1d95);ReplacementFor_i<
ReplacementFor_g;ReplacementFor_i++)s+="\x47\x52";first[(0x1ac8+1403-0x2043)]=s;
}if(ReplacementFor_v){ReplacementFor_y-=ReplacementFor_v;string s="\x59";for(int
 ReplacementFor_i=(0xc8d+6674-0x269f);ReplacementFor_i<ReplacementFor_v;
ReplacementFor_i++)s+="\x56\x59";first[(0x1146+243-0x1238)]=s;}if(
ReplacementFor_o){ReplacementFor_b-=ReplacementFor_o;string s="\x42";for(int 
ReplacementFor_i=(0x6d9+2760-0x11a1);ReplacementFor_i<ReplacementFor_o;
ReplacementFor_i++)s+="\x4f\x42";first[(0x3e0+7194-0x1ff8)]=s;}int 
ReplacementFor_all=max(ReplacementFor_r,max(ReplacementFor_y,ReplacementFor_b));
if(ReplacementFor_r+ReplacementFor_y+ReplacementFor_b-ReplacementFor_all<
ReplacementFor_all){cout<<"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45"<<endl;
return;}char ReplacementFor_pr[]={((char)(0x1643+612-0x1855)),
((char)(0x1481+2758-0x1eee)),((char)(0xaaa+155-0xb03))};int ReplacementFor_cnt[]
={ReplacementFor_r,ReplacementFor_y,ReplacementFor_b};if(ReplacementFor_r==
ReplacementFor_all){}else if(ReplacementFor_y==ReplacementFor_all){swap(
ReplacementFor_pr[(0x1496+1855-0x1bd5)],ReplacementFor_pr[(0x10f8+4251-0x2192)])
;swap(ReplacementFor_cnt[(0x6f9+225-0x7da)],ReplacementFor_cnt[
(0x3bc+1236-0x88f)]);swap(first[(0x999+4807-0x1c60)],first[(0x4ba+1076-0x8ed)]);
}else if(ReplacementFor_b==ReplacementFor_all){swap(ReplacementFor_pr[
(0xea8+3980-0x1e34)],ReplacementFor_pr[(0x1775+2868-0x22a7)]);swap(
ReplacementFor_cnt[(0xbe9+6837-0x269e)],ReplacementFor_cnt[(0x938+3547-0x1711)])
;swap(first[(0x1575+3411-0x22c8)],first[(0xfd7+43-0x1000)]);}for(int 
ReplacementFor_i=(0x2d8+739-0x5bb);ReplacementFor_i<ReplacementFor_cnt[
(0xb1f+1294-0x102d)];ReplacementFor_i++){string ReplacementFor_ret="";if(
ReplacementFor_i==(0x959+5577-0x1f22))ReplacementFor_ret+=first[
(0x1864+3608-0x267c)];else ReplacementFor_ret+=ReplacementFor_pr[
(0x2a6+6115-0x1a89)];if(ReplacementFor_i<ReplacementFor_cnt[(0x17cd+3142-0x2412)
]){if(ReplacementFor_i==(0x75d+526-0x96b))ReplacementFor_ret+=first[
(0x13b5+2382-0x1d02)];else ReplacementFor_ret+=ReplacementFor_pr[
(0x1db5+1641-0x241d)];}if(ReplacementFor_cnt[(0x1400+2334-0x1d1e)]-
ReplacementFor_i-(0x345+2814-0xe42)<ReplacementFor_cnt[(0xc41+4723-0x1eb2)]){if(
ReplacementFor_i==ReplacementFor_cnt[(0x1602+3652-0x2446)]-(0xd3a+4171-0x1d84))
ReplacementFor_ret+=first[(0x776+1567-0xd93)];else ReplacementFor_ret+=
ReplacementFor_pr[(0x825+5465-0x1d7c)];}cout<<ReplacementFor_ret;}cout<<endl;}};
int main(){int ReplacementFor_t;cin>>ReplacementFor_t;for(int ReplacementFor_i=
(0x132a+1684-0x19bd);ReplacementFor_i<=ReplacementFor_t;ReplacementFor_i++){cout
<<"\x43\x61\x73\x65\x20\x23"<<ReplacementFor_i<<"\x3a\x20";
ReplacementFor_Problem ReplacementFor_x;ReplacementFor_x.solve();}}
