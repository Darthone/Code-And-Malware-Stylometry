
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <cassert>
using namespace std;
#define ReplacementFor_rep(ReplacementFor_i,a,ReplacementFor_n) for (int \
ReplacementFor_i=a;ReplacementFor_i<ReplacementFor_n;ReplacementFor_i++)
#define ReplacementFor_per(ReplacementFor_i,a,ReplacementFor_n) for (int \
ReplacementFor_i=ReplacementFor_n-(0x2b0+5231-0x171e);ReplacementFor_i>=a;\
ReplacementFor_i--)
#define ReplacementFor_pb push_back
#define ReplacementFor_mp make_pair
#define ReplacementFor_all(ReplacementFor_x) (ReplacementFor_x).begin(),(\
ReplacementFor_x).end()
#define ReplacementFor_fi first
#define ReplacementFor_se second
#define ReplacementFor_SZ(ReplacementFor_x) ((int)(ReplacementFor_x).size())
typedef vector<int>ReplacementFor_VI;typedef long long ReplacementFor_ll;typedef
 pair<int,int>ReplacementFor_PII;const ReplacementFor_ll ReplacementFor_mod=
1000000007;ReplacementFor_ll ReplacementFor_powmod(ReplacementFor_ll a,
ReplacementFor_ll ReplacementFor_b){ReplacementFor_ll ReplacementFor_res=
(0x1a26+3262-0x26e3);a%=ReplacementFor_mod;assert(ReplacementFor_b>=
(0xcc+681-0x375));for(;ReplacementFor_b;ReplacementFor_b>>=(0x6af+4693-0x1903)){
if(ReplacementFor_b&(0xe1b+2319-0x1729))ReplacementFor_res=ReplacementFor_res*a%
ReplacementFor_mod;a=a*a%ReplacementFor_mod;}return ReplacementFor_res;}int 
ReplacementFor__,ReplacementFor_n,ReplacementFor_o,ReplacementFor_g,
ReplacementFor_v,ReplacementFor_r,ReplacementFor_y,ReplacementFor_b,
ReplacementFor___;char s[(0x79d+5741-0x1e00)];int ReplacementFor_cnt[
(0x172+8486-0x228e)];ReplacementFor_VI ReplacementFor_construct(int a,int 
ReplacementFor_b,int ReplacementFor_c){ReplacementFor_VI ReplacementFor_v(a,
(0xa2c+2170-0x12a6));int ReplacementFor_sp=a;ReplacementFor_rep(ReplacementFor_i
,(0xa4c+583-0xc93),ReplacementFor_b){if(ReplacementFor_sp==(0x437+743-0x71e)){
ReplacementFor_rep(ReplacementFor_j,(0x61b+7083-0x21c6),ReplacementFor_SZ(
ReplacementFor_v))if(ReplacementFor_v[ReplacementFor_j]!=(0x1d9+9381-0x267d)&&
ReplacementFor_v[(ReplacementFor_j+(0x9a9+1200-0xe58))%ReplacementFor_v.size()]
!=(0x168d+452-0x1850)){ReplacementFor_v.insert(ReplacementFor_v.begin()+
ReplacementFor_j+(0x4cb+3084-0x10d6),(0xfef+2071-0x1805));break;}}else{
ReplacementFor_rep(ReplacementFor_j,(0xb6+7271-0x1d1d),ReplacementFor_SZ(
ReplacementFor_v))if(ReplacementFor_v[ReplacementFor_j]==(0x2221+1198-0x26cf)&&
ReplacementFor_v[(ReplacementFor_j+(0x990+5493-0x1f04))%ReplacementFor_v.size()]
==(0x9d4+5185-0x1e15)){ReplacementFor_v.insert(ReplacementFor_v.begin()+
ReplacementFor_j+(0x545+2613-0xf79),(0xedd+80-0xf2c));break;}ReplacementFor_sp--
;}}ReplacementFor_rep(ReplacementFor_i,(0xbca+6855-0x2691),ReplacementFor_c){if(
ReplacementFor_sp==(0x836+3684-0x169a)){ReplacementFor_rep(ReplacementFor_j,
(0x6e3+3375-0x1412),ReplacementFor_SZ(ReplacementFor_v))if(ReplacementFor_v[
ReplacementFor_j]!=(0x2c+2948-0xbae)&&ReplacementFor_v[(ReplacementFor_j+
(0x9fc+6622-0x23d9))%ReplacementFor_v.size()]!=(0xc66+6155-0x246f)){
ReplacementFor_v.insert(ReplacementFor_v.begin()+ReplacementFor_j+
(0x15bf+2795-0x20a9),(0x195+2530-0xb75));break;}}else{ReplacementFor_rep(
ReplacementFor_j,(0xe06+137-0xe8f),ReplacementFor_SZ(ReplacementFor_v))if(
ReplacementFor_v[ReplacementFor_j]==(0xe5+2432-0xa65)&&ReplacementFor_v[(
ReplacementFor_j+(0xea0+2112-0x16df))%ReplacementFor_v.size()]==
(0x1f5+8674-0x23d7)){ReplacementFor_v.insert(ReplacementFor_v.begin()+
ReplacementFor_j+(0x21c7+1307-0x26e1),(0xfd0+1965-0x177b));break;}
ReplacementFor_sp--;}}return ReplacementFor_v;}int ReplacementFor_gao(){if(
ReplacementFor_v>ReplacementFor_y||ReplacementFor_g>ReplacementFor_r||
ReplacementFor_o>ReplacementFor_b){return(0x638+6123-0x1e23);}if(
ReplacementFor_v==ReplacementFor_y&&ReplacementFor_y>(0x1f3c+1049-0x2355)){if(
ReplacementFor_o||ReplacementFor_g||ReplacementFor_r||ReplacementFor_b)return
(0x20a6+1314-0x25c8);ReplacementFor_rep(ReplacementFor_i,(0xbcd+6724-0x2611),
ReplacementFor_y)printf("\x59\x56");return(0x1c09+1783-0x22ff);}if(
ReplacementFor_g==ReplacementFor_r&&ReplacementFor_r>(0xf9f+661-0x1234)){if(
ReplacementFor_o||ReplacementFor_v||ReplacementFor_y||ReplacementFor_b)return
(0x1d23+733-0x2000);ReplacementFor_rep(ReplacementFor_i,(0x143d+4752-0x26cd),
ReplacementFor_g)printf("\x52\x47");return(0x571+102-0x5d6);}if(ReplacementFor_o
==ReplacementFor_b&&ReplacementFor_b>(0x991+5660-0x1fad)){if(ReplacementFor_g||
ReplacementFor_v||ReplacementFor_r||ReplacementFor_y)return(0x4e5+2811-0xfe0);
ReplacementFor_rep(ReplacementFor_i,(0xeb0+5-0xeb5),ReplacementFor_o)printf(
"\x42\x4f");return(0x1011+2621-0x1a4d);}ReplacementFor_b-=ReplacementFor_o;
ReplacementFor_r-=ReplacementFor_g;ReplacementFor_y-=ReplacementFor_v;int 
ReplacementFor_ss=ReplacementFor_r+ReplacementFor_y+ReplacementFor_b;if(
(0xaff+3886-0x1a2b)*ReplacementFor_r>ReplacementFor_ss||(0x450+6507-0x1db9)*
ReplacementFor_y>ReplacementFor_ss||(0x788+4465-0x18f7)*ReplacementFor_b>
ReplacementFor_ss)return(0x1c3+124-0x23f);ReplacementFor_cnt[(0xaec+3776-0x19ac)
]=ReplacementFor_r;ReplacementFor_cnt[(0x646+3495-0x13ec)]=ReplacementFor_y;
ReplacementFor_cnt[(0xf42+4716-0x21ac)]=ReplacementFor_b;s[(0x150f+4458-0x2679)]
=((char)(0x46c+8929-0x26fb));s[(0x1e22+1708-0x24cd)]=
((char)(0x1326+3972-0x2251));s[(0xc50+3027-0x1821)]=((char)(0x1632+3820-0x24dc))
;ReplacementFor_rep(ReplacementFor_i,(0x196a+2621-0x23a7),(0xee5+5330-0x23b4))
ReplacementFor_rep(ReplacementFor_j,ReplacementFor_i+(0x1099+4724-0x230c),
(0xdba+3903-0x1cf6))if(ReplacementFor_cnt[ReplacementFor_i]<ReplacementFor_cnt[
ReplacementFor_j])swap(ReplacementFor_cnt[ReplacementFor_i],ReplacementFor_cnt[
ReplacementFor_j]),swap(s[ReplacementFor_i],s[ReplacementFor_j]);vector<int>
ReplacementFor_vv=ReplacementFor_construct(ReplacementFor_cnt[(0x6aa+819-0x9dd)]
,ReplacementFor_cnt[(0x181c+283-0x1936)],ReplacementFor_cnt[(0xc90+3196-0x190a)]
);bool ReplacementFor_vr=(ReplacementFor_g==(0x453+4342-0x1549)),
ReplacementFor_vy=(ReplacementFor_v==(0x11b7+4157-0x21f4)),ReplacementFor_vb=(
ReplacementFor_o==(0x41+6981-0x1b86));ReplacementFor_rep(ReplacementFor_i,
(0x97f+3051-0x156a),ReplacementFor_SZ(ReplacementFor_vv)){if(s[ReplacementFor_vv
[ReplacementFor_i]]==((char)(0xac4+41-0xa9b))&&ReplacementFor_vr==
(0x6c9+938-0xa73)){ReplacementFor_rep(ReplacementFor_k,(0x183+2571-0xb8e),
ReplacementFor_g)printf("\x52\x47");ReplacementFor_vr=(0x485+4956-0x17e0);}if(s[
ReplacementFor_vv[ReplacementFor_i]]==((char)(0x7b0+4395-0x1882))&&
ReplacementFor_vy==(0x635+7516-0x2391)){ReplacementFor_rep(ReplacementFor_k,
(0x5a2+6902-0x2098),ReplacementFor_v)printf("\x59\x56");ReplacementFor_vy=
(0x164+6949-0x1c88);}if(s[ReplacementFor_vv[ReplacementFor_i]]==
((char)(0x75a+6267-0x1f93))&&ReplacementFor_vb==(0x4e0+1206-0x996)){
ReplacementFor_rep(ReplacementFor_k,(0xf5b+747-0x1246),ReplacementFor_o)printf(
"\x42\x4f");ReplacementFor_vb=(0x1897+1844-0x1fca);}printf("\x25\x63",s[
ReplacementFor_vv[ReplacementFor_i]]);}return(0xe95+1704-0x153c);}int main(){for
(scanf("\x25\x64",&ReplacementFor__);ReplacementFor__;ReplacementFor__--){scanf(
"\x25\x64",&ReplacementFor_n);scanf(
"\x25\x64\x25\x64\x25\x64\x25\x64\x25\x64\x25\x64",&ReplacementFor_r,&
ReplacementFor_o,&ReplacementFor_y,&ReplacementFor_g,&ReplacementFor_b,&
ReplacementFor_v);printf("\x43\x61\x73\x65\x20\x23\x25\x64\x3a\x20",++
ReplacementFor___);if(!ReplacementFor_gao())puts(
"\x49\x4d\x50\x4f\x53\x53\x49\x42\x4c\x45");else puts("");}}
