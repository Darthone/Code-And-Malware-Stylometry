#include \
<bits/stdc++.h>
using
namespace
O0
;
typedef
long
long
iOi
;
typedef
double
IOi
;
typedef
lOi
<
int
,
int
>
Ooi
;
#define \
ooi( \
... \
) \
ioi \
( \
Ioi \
, \
loi \
)
const
int
Oii
=
01755
;
int
Ii
,
IIi
,
lIi
,
Oli
,
oli
,
ili
,
Ili
;
int
O0i
;
char
o0i
[
01755
]
;
void
i0i
(
int
I0i
,
char
l0i
)
{
for
(
int
ii
=
O0i
;
ii
>
I0i
;
ii
--
)
o0i
[
ii
]
=
o0i
[
ii
-
01
]
;
o0i
[
I0i
]
=
l0i
;
O0i
++
;
}
bool
O1i
(
int
OIo
,
char
l0i
)
{
for
(
int
ii
=
0
;
ii
<
OIo
;
ii
++
)
{
bool
o1i
=
false
;
for
(
int
I1o
=
0
;
I1o
<
O0i
;
I1o
++
)
if
(
o0i
[
I1o
]
==
o0i
[
(
I1o
-
01
+
O0i
)
%
O0i
]
)
{
o1i
=
true
;
i0i
(
I1o
,
l0i
)
;
break
;
}
if
(
!
o1i
)
{
for
(
int
I1o
=
0
;
I1o
<
O0i
;
I1o
++
)
if
(
o0i
[
I1o
]
!=
l0i
&&
o0i
[
(
I1o
-
01
+
O0i
)
%
O0i
]
!=
l0i
)
{
o1i
=
true
;
i0i
(
I1o
,
l0i
)
;
break
;
}
if
(
!
o1i
)
return
false
;
}
}
return
true
;
}
void
i1i
(
int
I1i
,
char
l0i
,
char
l1i
)
{
for
(
int
ii
=
0
;
ii
<
O0i
;
ii
++
)
if
(
o0i
[
ii
]
==
l0i
)
{
while
(
I1i
--
)
{
i0i
(
ii
,
l1i
)
;
i0i
(
ii
,
l0i
)
;
}
return
;
}
}
bool
OOI
(
)
{
for
(
int
ii
=
0
;
ii
<
O0i
;
ii
++
)
if
(
o0i
[
ii
]
==
o0i
[
(
ii
-
01
+
O0i
)
%
O0i
]
)
return
false
;
return
true
;
}
bool
oOI
(
)
{
OIi
(
"\045d\045\144\045\144\045\144%d\045d\045\144"
,
&
Ii
,
&
IIi
,
&
lIi
,
&
Oli
,
&
oli
,
&
ili
,
&
Ili
)
;
O0i
=
0
;
int
Iio
=
IIi
-
oli
;
if
(
Iio
<
0
)
return
false
;
if
(
Iio
==
0
)
{
if
(
IIi
==
0
)
;
else
if
(
IIi
+
oli
<
Ii
)
return
false
;
else
{
for
(
int
ii
=
0
;
ii
<
IIi
;
ii
++
)
{
o0i
[
O0i
++
]
=
'\122'
;
o0i
[
O0i
++
]
=
'\107'
;
}
return
true
;
}
}
int
OIo
=
Oli
-
Ili
;
if
(
OIo
<
0
)
return
false
;
if
(
OIo
==
0
)
{
if
(
Oli
==
0
)
;
else
if
(
Oli
+
Ili
<
Ii
)
return
false
;
else
{
for
(
int
ii
=
0
;
ii
<
Oli
;
ii
++
)
{
o0i
[
O0i
++
]
=
'\131'
;
o0i
[
O0i
++
]
=
'\126'
;
}
return
true
;
}
}
int
iIo
=
ili
-
lIi
;
if
(
iIo
<
0
)
return
false
;
if
(
iIo
==
0
)
{
if
(
ili
==
0
)
;
else
if
(
ili
+
lIi
<
Ii
)
return
false
;
else
{
for
(
int
ii
=
0
;
ii
<
ili
;
ii
++
)
{
o0i
[
O0i
++
]
=
'\102'
;
o0i
[
O0i
++
]
=
'\117'
;
}
return
true
;
}
}
if
(
Iio
>=
OIo
&&
Iio
>=
iIo
)
{
O0i
=
0
;
for
(
int
ii
=
0
;
ii
<
Iio
;
ii
++
)
o0i
[
O0i
++
]
=
'\122'
;
if
(
!
O1i
(
OIo
,
'\131'
)
)
return
false
;
if
(
!
O1i
(
iIo
,
'\102'
)
)
return
false
;
}
else
if
(
OIo
>=
Iio
&&
OIo
>=
iIo
)
{
O0i
=
0
;
for
(
int
ii
=
0
;
ii
<
OIo
;
ii
++
)
o0i
[
O0i
++
]
=
'\131'
;
if
(
!
O1i
(
Iio
,
'\122'
)
)
return
false
;
if
(
!
O1i
(
iIo
,
'\102'
)
)
return
false
;
}
else
if
(
iIo
>=
Iio
&&
iIo
>=
OIo
)
{
O0i
=
0
;
for
(
int
ii
=
0
;
ii
<
iIo
;
ii
++
)
o0i
[
O0i
++
]
=
'\102'
;
if
(
!
O1i
(
Iio
,
'\122'
)
)
return
false
;
if
(
!
O1i
(
OIo
,
'\131'
)
)
return
false
;
}
else
iOI
(
false
)
;
if
(
!
OOI
(
)
)
return
false
;
i1i
(
oli
,
'\122'
,
'\107'
)
;
i1i
(
Ili
,
'\131'
,
'\126'
)
;
i1i
(
lIi
,
'\102'
,
'\117'
)
;
o0i
[
O0i
]
=
0
;
return
true
;
}
int
IOo
(
)
{
oii
(
"B\055l\141rg\145\056in"
,
"\162"
,
iii
)
;
oii
(
"\102\056\157\165t"
,
"\167"
,
Iii
)
;
int
lii
;
OIi
(
"%\144"
,
&
lii
)
;
for
(
int
oIi
=
01
;
oIi
<=
lii
;
oIi
++
)
{
bool
IOI
=
oOI
(
)
;
o0i
[
O0i
]
=
0
;
iIi
(
"\103\141s\145 #%d:\040\045\163\012"
,
oIi
,
IOI
?
o0i
:
"\111M\120\117\123S\111\102L\105"
)
;
}
}
