#include \
<bits/stdc++.h>
using
namespace
O
;
typedef
long
long
o
;
typedef
double
Oo
;
typedef
oo
<
int
,
int
>
io
;
#define \
Io( \
... \
) \
lo \
( \
Oi \
, \
oi \
)
const
int
ii
=
0151
;
const
int
Ii
=
int
(
.0000001E016
)
+
07
;
const
Oo
OI
=
.0000000000000001E016
/
0
;
int
oI
,
iI
;
int
II
[
ii
]
,
Ol
[
ii
]
;
int
ol
[
ii
]
[
ii
]
;
Oo
O0
[
ii
]
[
ii
]
;
int
o0
(
)
{
i0
(
"C-la\162\147e.\151\156"
,
"r"
,
I0
)
;
i0
(
"C\056o\165\164"
,
"w"
,
l0
)
;
int
O1
;
o1
(
"\045d"
,
&
O1
)
;
for
(
int
i1
=
01
;
i1
<=
O1
;
i1
++
)
{
o1
(
"%d\045d"
,
&
oI
,
&
iI
)
;
for
(
int
I1
=
01
;
I1
<=
oI
;
I1
++
)
o1
(
"\045d%d"
,
&
II
[
I1
]
,
&
Ol
[
I1
]
)
;
for
(
int
I1
=
01
;
I1
<=
oI
;
I1
++
)
for
(
int
l1
=
01
;
l1
<=
oI
;
l1
++
)
{
o1
(
"\045d"
,
&
ol
[
I1
]
[
l1
]
)
;
if
(
ol
[
I1
]
[
l1
]
==
-
01
)
ol
[
I1
]
[
l1
]
=
Ii
;
if
(
I1
==
l1
)
ol
[
I1
]
[
l1
]
=
0
;
}
for
(
int
OOo
=
01
;
OOo
<=
oI
;
OOo
++
)
for
(
int
I1
=
01
;
I1
<=
oI
;
I1
++
)
for
(
int
l1
=
01
;
l1
<=
oI
;
l1
++
)
ol
[
I1
]
[
l1
]
=
oOo
(
ol
[
I1
]
[
l1
]
,
ol
[
I1
]
[
OOo
]
+
ol
[
OOo
]
[
l1
]
)
;
for
(
int
I1
=
01
;
I1
<=
oI
;
I1
++
)
for
(
int
l1
=
01
;
l1
<=
oI
;
l1
++
)
O0
[
I1
]
[
l1
]
=
II
[
I1
]
>=
ol
[
I1
]
[
l1
]
?
(
Oo
)
ol
[
I1
]
[
l1
]
/
Ol
[
I1
]
:
OI
;
for
(
int
OOo
=
01
;
OOo
<=
oI
;
OOo
++
)
for
(
int
I1
=
01
;
I1
<=
oI
;
I1
++
)
for
(
int
l1
=
01
;
l1
<=
oI
;
l1
++
)
O0
[
I1
]
[
l1
]
=
oOo
(
O0
[
I1
]
[
l1
]
,
O0
[
I1
]
[
OOo
]
+
O0
[
OOo
]
[
l1
]
)
;
iOo
(
"C\141\163\145\040#\045d:"
,
i1
)
;
while
(
iI
--
)
{
int
IOo
,
lOo
;
o1
(
"%d%\144"
,
&
IOo
,
&
lOo
)
;
iOo
(
" \045.\0610\154\146"
,
O0
[
IOo
]
[
lOo
]
)
;
}
iOo
(
"\n"
)
;
}
}
