#include \
<bits/stdc++.h>
using
namespace
O
;
#define \
l1( \
oI \
, \
o \
) \
for \
( \
int \
oI \
= \
0 \
; \
oI \
< \
( \
o \
) \
; \
oI \
++ \
)
#define \
OOo( \
oOo \
) \
( \
( \
int \
) \
oOo \
. \
iOo \
( \
) \
)
#define \
IOo( \
o \
) \
( \
( \
int \
) \
1e \
## \
o \
)
using
lOo
=
long
long
;
using
Ooo
=
lo
<
int
,
int
>
;
using
ooo
=
lo
<
lOo
,
lOo
>
;
template
<
typename
...
>
static
inline
int
ioo
(
void
)
{
return
Ioo
(
)
;
}
template
<
typename
...
>
static
inline
void
loo
(
int
oOo
)
{
Oio
(
oOo
)
;
}
#define \
oio( \
oOo \
) \
( \
oOo \
) \
= \
ioo \
( \
)
#define \
iio( \
oOo \
) \
loo \
( \
oOo \
)
void
Iio
(
int
&
lio
)
{
int
O0
,
OIo
=
0
;
lio
=
0
;
for
(
;
;
)
{
oio
(
O0
)
;
if
(
O0
==
'\055'
)
{
OIo
=
01
;
break
;
}
if
(
'\060'
<=
O0
&&
O0
<=
'\071'
)
{
lio
=
O0
-
'\060'
;
break
;
}
}
for
(
;
;
)
{
oio
(
O0
)
;
if
(
O0
<
'\060'
||
O0
>
'\071'
)
break
;
lio
=
lio
*
012
+
O0
-
'\060'
;
}
if
(
OIo
)
lio
=
-
lio
;
}
void
Iio
(
lOo
&
lio
)
{
int
O0
,
OIo
=
0
;
lio
=
0
;
for
(
;
;
)
{
oio
(
O0
)
;
if
(
O0
==
'\055'
)
{
OIo
=
01
;
break
;
}
if
(
'\060'
<=
O0
&&
O0
<=
'\071'
)
{
lio
=
O0
-
'\060'
;
break
;
}
}
for
(
;
;
)
{
oio
(
O0
)
;
if
(
O0
<
'\060'
||
O0
>
'\071'
)
break
;
lio
=
lio
*
012
+
O0
-
'\060'
;
}
if
(
OIo
)
lio
=
-
lio
;
}
int
Iio
(
char
oOo
[
]
)
{
int
oI
,
oIo
=
0
;
for
(
;
;
)
{
oio
(
oI
)
;
if
(
oI
!=
'\040'
&&
oI
!=
'\012'
&&
oI
!=
'\015'
&&
oI
!=
'\011'
&&
oI
!=
iIo
)
break
;
}
oOo
[
oIo
++
]
=
oI
;
for
(
;
;
)
{
oio
(
oI
)
;
if
(
oI
==
'\040'
||
oI
==
'\012'
||
oI
==
'\015'
||
oI
==
'\011'
||
oI
==
iIo
)
break
;
oOo
[
oIo
++
]
=
oI
;
}
oOo
[
oIo
]
=
'\000'
;
return
oIo
;
}
int
Iio
(
IIo
&
oOo
)
{
int
oI
;
for
(
;
;
)
{
oio
(
oI
)
;
if
(
oI
!=
'\040'
&&
oI
!=
'\012'
&&
oI
!=
'\015'
&&
oI
!=
'\011'
&&
oI
!=
iIo
)
break
;
}
oOo
.
lIo
(
oI
)
;
for
(
;
;
)
{
oio
(
oI
)
;
if
(
oI
==
'\040'
||
oI
==
'\012'
||
oI
==
'\015'
||
oI
==
'\011'
||
oI
==
iIo
)
break
;
oOo
.
lIo
(
oI
)
;
}
;
return
OOo
(
oOo
)
;
}
template
<
class
Olo
,
class
olo
>
void
Iio
(
Olo
&
lio
,
olo
&
ilo
)
{
Iio
(
lio
)
;
Iio
(
ilo
)
;
}
template
<
class
Olo
,
class
olo
,
class
Ilo
>
void
Iio
(
Olo
&
lio
,
olo
&
ilo
,
Ilo
&
llo
)
{
Iio
(
lio
)
;
Iio
(
ilo
)
;
Iio
(
llo
)
;
}
template
<
class
Olo
,
class
olo
,
class
Ilo
,
class
O0o
>
void
Iio
(
Olo
&
lio
,
olo
&
ilo
,
Ilo
&
llo
,
O0o
&
o0o
)
{
Iio
(
lio
)
;
Iio
(
ilo
)
;
Iio
(
llo
)
;
Iio
(
o0o
)
;
}
void
i0o
(
int
lio
,
char
oOo
)
{
int
oIo
=
0
,
OIo
=
0
;
char
I0o
[
012
]
;
if
(
lio
<
0
)
OIo
=
01
,
lio
=
-
lio
;
while
(
lio
)
I0o
[
oIo
++
]
=
lio
%
012
,
lio
/=
012
;
if
(
!
oIo
)
I0o
[
oIo
++
]
=
0
;
if
(
OIo
)
iio
(
'\055'
)
;
while
(
oIo
--
)
iio
(
I0o
[
oIo
]
+
'\060'
)
;
iio
(
oOo
)
;
}
void
i0o
(
lOo
lio
,
char
oOo
)
{
int
oIo
=
0
,
OIo
=
0
;
char
I0o
[
024
]
;
if
(
lio
<
0
)
OIo
=
01
,
lio
=
-
lio
;
while
(
lio
)
I0o
[
oIo
++
]
=
lio
%
012
,
lio
/=
012
;
if
(
!
oIo
)
I0o
[
oIo
++
]
=
0
;
if
(
OIo
)
iio
(
'\055'
)
;
while
(
oIo
--
)
iio
(
I0o
[
oIo
]
+
'\060'
)
;
iio
(
oOo
)
;
}
void
i0o
(
const
char
oOo
[
]
)
{
int
oI
;
for
(
oI
=
0
;
oOo
[
oI
]
!=
'\000'
;
oI
++
)
iio
(
oOo
[
oI
]
)
;
}
void
i0o
(
const
IIo
&
lio
,
char
oOo
)
{
int
oI
;
for
(
oI
=
0
;
lio
[
oI
]
!=
'\000'
;
oI
++
)
iio
(
lio
[
oI
]
)
;
iio
(
oOo
)
;
}
void
i0o
(
const
char
lio
[
]
,
char
oOo
)
{
int
oI
;
for
(
oI
=
0
;
lio
[
oI
]
!=
'\000'
;
oI
++
)
iio
(
lio
[
oI
]
)
;
iio
(
oOo
)
;
}
template
<
class
Olo
>
void
l0o
(
Olo
lio
)
{
i0o
(
lio
,
'\012'
)
;
}
template
<
class
Olo
,
class
olo
>
void
l0o
(
Olo
lio
,
olo
ilo
)
{
i0o
(
lio
,
'\040'
)
;
i0o
(
ilo
,
'\012'
)
;
}
template
<
class
Olo
,
class
olo
,
class
Ilo
>
void
l0o
(
Olo
lio
,
olo
ilo
,
Ilo
llo
)
{
i0o
(
lio
,
'\040'
)
;
i0o
(
ilo
,
'\040'
)
;
i0o
(
llo
,
'\012'
)
;
}
template
<
class
Olo
>
void
O1o
(
Olo
lio
[
]
,
int
o
)
{
if
(
!
o
)
{
iio
(
'\012'
)
;
return
;
}
l1
(
oI
,
o
-
01
)
i0o
(
lio
[
oI
]
,
'\040'
)
;
i0o
(
lio
[
o
-
01
]
,
'\012'
)
;
}
template
<
class
Olo
>
void
O1o
(
Io
<
Olo
>
&
lio
)
{
O1o
(
lio
.
o1o
(
)
,
(
int
)
lio
.
iOo
(
)
)
;
}
template
<
class
Olo
>
void
i1o
(
Olo
&
ol
,
const
Olo
&
i0
)
{
if
(
ol
>
i0
)
ol
=
i0
;
}
template
<
class
Olo
>
void
I1o
(
Olo
&
ol
,
const
Olo
&
i0
)
{
if
(
ol
<
i0
)
ol
=
i0
;
}
template
<
class
Olo
>
Olo
l1o
(
Olo
ol
,
Olo
i0
)
{
return
i0
?
l1o
(
i0
,
ol
%
i0
)
:
ol
;
}
template
<
class
Olo
>
Olo
OOi
(
Olo
ol
,
Olo
i0
)
{
return
ol
/
l1o
(
ol
,
i0
)
*
i0
;
}
lOo
oOi
(
lOo
ol
,
lOo
o
,
lOo
iOi
)
{
lOo
IOi
=
01
;
lOo
lOi
=
ol
%
iOi
;
while
(
o
)
{
if
(
o
&
01
)
IOi
=
IOi
*
lOi
%
iOi
;
lOi
=
lOi
*
lOi
%
iOi
;
o
>>=
01
;
}
return
IOi
;
}
template
<
class
Olo
>
Olo
Ooi
(
Olo
ol
,
Olo
i0
,
Olo
&
lio
,
Olo
&
ilo
)
{
for
(
Olo
ooi
=
ilo
=
01
,
ioi
=
lio
=
0
;
ol
;
)
{
Olo
ii
=
i0
/
ol
;
Ioi
(
lio
-=
ii
*
ooi
,
ooi
)
;
Ioi
(
ilo
-=
ii
*
ioi
,
ioi
)
;
Ioi
(
i0
-=
ii
*
ol
,
ol
)
;
}
return
i0
;
}
template
<
class
Olo
>
Olo
loi
(
Olo
ol
,
Olo
OIo
)
{
Olo
lio
,
ilo
;
Ooi
(
ol
,
OIo
,
lio
,
ilo
)
;
return
(
OIo
+
lio
%
OIo
)
%
OIo
;
}
IIo
oi
(
int
OIi
,
int
ilo
,
int
i0
)
{
IIo
IOi
;
l1
(
oI
,
OIi
)
IOi
.
lIo
(
'\122'
)
;
{
IIo
oIi
;
l1
(
oI
,
OOo
(
IOi
)
)
{
oIi
.
lIo
(
IOi
[
oI
]
)
;
if
(
ilo
)
ilo
--
,
oIi
.
lIo
(
'\131'
)
;
}
while
(
ilo
--
)
oIi
.
lIo
(
'\131'
)
;
IOi
=
oIi
;
}
{
IIo
oIi
;
l1
(
oI
,
OOo
(
IOi
)
)
{
oIi
.
lIo
(
IOi
[
oI
]
)
;
if
(
IOi
[
oI
]
==
IOi
[
(
oI
+
01
)
%
OOo
(
IOi
)
]
)
{
if
(
i0
)
i0
--
,
oIi
.
lIo
(
'\102'
)
;
}
}
IOi
=
oIi
;
oIi
=
""
;
l1
(
oI
,
OOo
(
IOi
)
)
{
oIi
.
lIo
(
IOi
[
oI
]
)
;
if
(
IOi
[
oI
]
!=
'\102'
&&
IOi
[
(
oI
+
01
)
%
OOo
(
IOi
)
]
!=
'\102'
)
{
if
(
i0
)
i0
--
,
oIi
.
lIo
(
'\102'
)
;
}
}
while
(
i0
--
)
oIi
.
lIo
(
'\102'
)
;
IOi
=
oIi
;
}
l1
(
oI
,
OOo
(
IOi
)
)
{
if
(
IOi
[
oI
]
==
IOi
[
(
oI
+
01
)
%
OOo
(
IOi
)
]
)
return
""
;
}
return
IOi
;
}
IIo
oi
(
)
{
int
o
;
Iio
(
o
)
;
int
OIi
,
iIi
,
ilo
,
IIi
,
i0
,
lIi
;
Iio
(
OIi
,
iIi
,
ilo
)
;
Iio
(
IIi
,
i0
,
lIi
)
;
if
(
OIi
==
0
&&
iIi
!=
0
&&
ilo
==
0
&&
IIi
==
0
&&
i0
!=
0
&&
lIi
==
0
)
{
if
(
iIi
==
i0
)
{
IIo
IOi
;
l1
(
oI
,
iIi
)
{
IOi
.
lIo
(
'\117'
)
;
IOi
.
lIo
(
'\102'
)
;
}
return
IOi
;
}
else
{
return
""
;
}
}
if
(
OIi
!=
0
&&
iIi
==
0
&&
ilo
==
0
&&
IIi
!=
0
&&
i0
==
0
&&
lIi
==
0
)
{
if
(
IIi
==
OIi
)
{
IIo
IOi
;
l1
(
oI
,
IIi
)
{
IOi
.
lIo
(
'\107'
)
;
IOi
.
lIo
(
'\122'
)
;
}
return
IOi
;
}
else
{
return
""
;
}
}
if
(
OIi
==
0
&&
iIi
==
0
&&
ilo
!=
0
&&
IIi
==
0
&&
i0
==
0
&&
lIi
!=
0
)
{
if
(
lIi
==
ilo
)
{
IIo
IOi
;
l1
(
oI
,
lIi
)
{
IOi
.
lIo
(
'\126'
)
;
IOi
.
lIo
(
'\131'
)
;
}
return
IOi
;
}
else
{
return
""
;
}
}
if
(
IIi
&&
IIi
>=
OIi
)
return
""
;
if
(
lIi
&&
lIi
>=
ilo
)
return
""
;
if
(
iIi
&&
iIi
>=
i0
)
return
""
;
OIi
-=
IIi
;
ilo
-=
lIi
;
i0
-=
iIi
;
IIo
lii
=
oi
(
OIi
,
ilo
,
i0
)
;
if
(
OOo
(
lii
)
==
0
)
return
lii
;
IIo
Oli
=
"\122"
;
l1
(
oI
,
IIi
)
{
Oli
.
lIo
(
'\107'
)
;
Oli
.
lIo
(
'\122'
)
;
}
l1
(
oI
,
OOo
(
lii
)
)
{
if
(
lii
[
oI
]
==
'\122'
)
{
IIo
oli
=
lii
.
ili
(
0
,
oI
)
;
IIo
OIi
=
lii
.
ili
(
oI
+
01
)
;
lii
=
oli
+
Oli
+
OIi
;
break
;
}
}
IIo
Ili
=
"\131"
;
l1
(
oI
,
lIi
)
{
Ili
.
lIo
(
'\126'
)
;
Ili
.
lIo
(
'\131'
)
;
}
l1
(
oI
,
OOo
(
lii
)
)
{
if
(
lii
[
oI
]
==
'\131'
)
{
IIo
oli
=
lii
.
ili
(
0
,
oI
)
;
IIo
OIi
=
lii
.
ili
(
oI
+
01
)
;
lii
=
oli
+
Ili
+
OIi
;
break
;
}
}
IIo
O0i
=
"\102"
;
l1
(
oI
,
iIi
)
{
O0i
.
lIo
(
'\117'
)
;
O0i
.
lIo
(
'\102'
)
;
}
l1
(
oI
,
OOo
(
lii
)
)
{
if
(
lii
[
oI
]
==
'\102'
)
{
IIo
oli
=
lii
.
ili
(
0
,
oI
)
;
IIo
OIi
=
lii
.
ili
(
oI
+
01
)
;
lii
=
oli
+
O0i
+
OIi
;
break
;
}
}
return
lii
;
}
int
o1
(
)
{
int
Iii
;
Iio
(
Iii
)
;
l1
(
oI
,
Iii
)
{
IIo
lii
=
oi
(
)
;
if
(
lii
==
""
)
lii
=
"\111\115POSSI\102\114E"
;
I0
(
"Ca\163e\040\043%\144\072 "
,
oI
+
01
)
;
I0
(
"\045\163\012"
,
lii
.
o0i
(
)
)
;
}
return
0
;
}
