#include \
<cstdio>
#include \
<cstdlib>
#include \
<cstring>
#include \
<cmath>
#include \
<cassert>
#include \
<iostream>
#include \
<sstream>
#include \
<vector>
#include \
<queue>
#include \
<set>
#include \
<map>
#include \
<utility>
#include \
<numeric>
#include \
<algorithm>
#include \
<bitset>
#include \
<complex>
#include \
<array>
#include \
<list>
#include \
<stack>
#include \
<valarray>
using
namespace
O
;
typedef
unsigned
loi
;
typedef
long
long
Oii
;
typedef
unsigned
long
long
oii
;
const
int
lOi
=
07352410051
;
const
Oii
iii
=
067442121553436320051LL
;
template
<
typename
Iii
>
void
lii
(
Iii
oOo
,
Iii
iOo
)
{
for
(
Iii
OOo
=
oOo
;
OOo
!=
iOo
;
++
OOo
)
llo
<<
*
OOo
<<
" "
;
llo
<<
O0o
;
}
template
<
typename
Iii
>
void
OIi
(
Iii
&
oOo
,
Iii
iOo
)
{
if
(
oOo
>
iOo
)
oOo
=
iOo
;
}
template
<
typename
Iii
>
void
oIi
(
Iii
&
oOo
,
Iii
iOo
)
{
if
(
oOo
<
iOo
)
oOo
=
iOo
;
}
int
iIi
(
)
{
int
IIi
;
Iio
(
"%\144"
,
&
IIi
)
;
return
IIi
;
}
double
lIi
(
)
{
double
IIi
;
Iio
(
"\045\154\146"
,
&
IIi
)
;
return
IIi
;
}
Oii
Oli
(
)
{
Oii
IIi
;
Iio
(
"%\154l\144"
,
&
IIi
)
;
return
IIi
;
}
Oii
O0i
[
0200
]
[
0200
]
;
int
ioI
[
0200
]
,
ili
[
0200
]
;
double
IoI
[
0200
]
[
0200
]
;
void
Ili
(
)
{
int
o0i
=
iIi
(
)
;
int
loI
=
iIi
(
)
;
for
(
int
OOo
=
0
;
OOo
<
o0i
;
++
OOo
)
{
ioI
[
OOo
]
=
iIi
(
)
;
ili
[
OOo
]
=
iIi
(
)
;
}
for
(
int
OOo
=
0
;
OOo
<
o0i
;
++
OOo
)
{
for
(
int
IOi
=
0
;
IOi
<
o0i
;
++
IOi
)
{
O0i
[
OOo
]
[
IOi
]
=
Oli
(
)
;
if
(
O0i
[
OOo
]
[
IOi
]
==
-
01
)
{
O0i
[
OOo
]
[
IOi
]
=
(
OOo
==
IOi
?
0
:
iii
)
;
}
}
}
for
(
int
I0o
=
0
;
I0o
<
o0i
;
++
I0o
)
{
for
(
int
OOo
=
0
;
OOo
<
o0i
;
++
OOo
)
{
for
(
int
IOi
=
0
;
IOi
<
o0i
;
++
IOi
)
{
OIi
(
O0i
[
OOo
]
[
IOi
]
,
O0i
[
OOo
]
[
I0o
]
+
O0i
[
I0o
]
[
IOi
]
)
;
}
}
}
for
(
int
OOo
=
0
;
OOo
<
o0i
;
++
OOo
)
{
for
(
int
IOi
=
0
;
IOi
<
o0i
;
++
IOi
)
{
if
(
OOo
==
IOi
)
{
IoI
[
OOo
]
[
IOi
]
=
0
;
}
else
{
if
(
O0i
[
OOo
]
[
IOi
]
>
ioI
[
OOo
]
)
{
IoI
[
OOo
]
[
IOi
]
=
iii
;
}
else
{
IoI
[
OOo
]
[
IOi
]
=
O0i
[
OOo
]
[
IOi
]
/
double
(
ili
[
OOo
]
)
;
}
}
}
}
for
(
int
I0o
=
0
;
I0o
<
o0i
;
++
I0o
)
{
for
(
int
OOo
=
0
;
OOo
<
o0i
;
++
OOo
)
{
for
(
int
IOi
=
0
;
IOi
<
o0i
;
++
IOi
)
{
OIi
(
IoI
[
OOo
]
[
IOi
]
,
IoI
[
OOo
]
[
I0o
]
+
IoI
[
I0o
]
[
IOi
]
)
;
}
}
}
for
(
int
OOo
=
0
;
OOo
<
loI
;
++
OOo
)
{
int
Ioi
=
iIi
(
)
-
01
;
int
olo
=
iIi
(
)
-
01
;
OIo
(
"\040\045\056\071\146"
,
IoI
[
Ioi
]
[
olo
]
)
;
}
l1i
(
""
)
;
}
int
ioo
(
)
{
int
Iii
=
iIi
(
)
;
for
(
int
I0i
=
01
;
I0i
<=
Iii
;
++
I0i
)
{
OIo
(
"\103as\145\040#\045d\072"
,
I0i
)
;
Ili
(
)
;
}
return
0
;
}
