#include \
<cstdio>
#include \
<cstdlib>
#include \
<cstring>
#include \
<cmath>
#include \
<cassert>
#include \
<iostream>
#include \
<sstream>
#include \
<vector>
#include \
<queue>
#include \
<set>
#include \
<map>
#include \
<utility>
#include \
<numeric>
#include \
<algorithm>
#include \
<bitset>
#include \
<complex>
#include \
<array>
#include \
<list>
#include \
<stack>
#include \
<valarray>
using
namespace
O
;
typedef
unsigned
loi
;
typedef
long
long
Oii
;
typedef
unsigned
long
long
oii
;
const
int
lOi
=
07352410051
;
const
Oii
iii
=
067442121553436320051LL
;
template
<
typename
Iii
>
void
lii
(
Iii
oOo
,
Iii
iOo
)
{
for
(
Iii
OOo
=
oOo
;
OOo
!=
iOo
;
++
OOo
)
llo
<<
*
OOo
<<
"\040"
;
llo
<<
O0o
;
}
template
<
typename
Iii
>
void
OIi
(
Iii
&
oOo
,
Iii
iOo
)
{
if
(
oOo
>
iOo
)
oOo
=
iOo
;
}
template
<
typename
Iii
>
void
oIi
(
Iii
&
oOo
,
Iii
iOo
)
{
if
(
oOo
<
iOo
)
oOo
=
iOo
;
}
int
iIi
(
)
{
int
IIi
;
Iio
(
"\045\144"
,
&
IIi
)
;
return
IIi
;
}
double
lIi
(
)
{
double
IIi
;
Iio
(
"%\154f"
,
&
IIi
)
;
return
IIi
;
}
Oii
Oli
(
)
{
Oii
IIi
;
Iio
(
"\045\154\154d"
,
&
IIi
)
;
return
IIi
;
}
int
l0i
[
06405
]
;
void
Ili
(
)
{
iIi
(
)
;
int
O1i
[
03
]
,
o1i
[
03
]
;
for
(
int
OOo
=
0
;
OOo
<
03
;
++
OOo
)
{
O1i
[
OOo
]
=
iIi
(
)
;
o1i
[
(
OOo
+
02
)
%
03
]
=
iIi
(
)
;
}
int
i1i
=
0
,
I1i
=
0
;
for
(
int
OOo
=
0
;
OOo
<
03
;
++
OOo
)
{
if
(
o1i
[
OOo
]
>
0
&&
O1i
[
OOo
]
<=
o1i
[
OOo
]
)
{
i1i
+=
o1i
[
OOo
]
-
O1i
[
OOo
]
+
01
;
I1i
=
OOo
;
}
}
if
(
i1i
>
01
)
{
l1i
(
"\111\115PO\123\123IBLE"
)
;
return
;
}
else
if
(
i1i
==
01
)
{
bool
OOI
=
true
;
for
(
int
OOo
=
01
;
OOo
<=
02
;
++
OOo
)
{
OOI
&=
O1i
[
(
I1i
+
OOo
)
%
03
]
==
0
&&
o1i
[
(
I1i
+
OOo
)
%
03
]
==
0
;
}
if
(
OOI
)
{
for
(
int
OOo
=
0
;
OOo
<
O1i
[
I1i
]
;
++
OOo
)
{
OIo
(
"\045\143%\143"
,
"RY\102"
[
I1i
]
,
"GV\117"
[
I1i
]
)
;
}
l1i
(
""
)
;
}
else
{
l1i
(
"\111MP\117\123\123IBL\105"
)
;
}
return
;
}
for
(
int
OOo
=
0
;
OOo
<
03
;
++
OOo
)
{
O1i
[
OOo
]
-=
o1i
[
OOo
]
;
}
int
oOI
=
iOI
(
{
O1i
[
0
]
,
O1i
[
01
]
,
O1i
[
02
]
}
)
;
int
IOI
=
O1i
[
0
]
+
O1i
[
01
]
+
O1i
[
02
]
-
oOI
;
if
(
oOI
>
IOI
)
{
l1i
(
"\111\115\120\117\123S\111B\114\105"
)
;
return
;
}
int
lOI
=
0
;
for
(
int
OOo
=
0
;
OOo
<
03
;
++
OOo
)
{
if
(
O1i
[
OOo
]
==
oOI
)
{
lOI
=
OOo
;
break
;
}
}
OoI
(
l0i
,
l0i
+
06405
,
-
01
)
;
for
(
int
OOo
=
0
;
OOo
<
O1i
[
lOI
]
;
++
OOo
)
{
l0i
[
03
*
OOo
]
=
lOI
;
}
for
(
int
OOo
=
0
;
OOo
<
O1i
[
(
lOI
+
01
)
%
03
]
;
++
OOo
)
{
l0i
[
03
*
OOo
+
01
]
=
(
lOI
+
01
)
%
03
;
}
for
(
int
OOo
=
0
;
OOo
<
O1i
[
(
lOI
+
02
)
%
03
]
;
++
OOo
)
{
l0i
[
03
*
(
O1i
[
lOI
]
-
OOo
)
-
01
]
=
(
lOI
+
02
)
%
03
;
}
for
(
int
OOo
=
0
;
OOo
<
06405
;
++
OOo
)
{
if
(
l0i
[
OOo
]
==
-
01
)
{
continue
;
}
ooI
(
"RYB"
[
l0i
[
OOo
]
]
)
;
for
(
int
IOi
=
0
;
IOi
<
o1i
[
l0i
[
OOo
]
]
;
++
IOi
)
{
ooI
(
"GVO"
[
l0i
[
OOo
]
]
)
;
ooI
(
"RY\102"
[
l0i
[
OOo
]
]
)
;
}
o1i
[
l0i
[
OOo
]
]
=
0
;
}
l1i
(
""
)
;
}
int
ioo
(
)
{
int
Iii
=
iIi
(
)
;
for
(
int
I0i
=
01
;
I0i
<=
Iii
;
++
I0i
)
{
OIo
(
"\103a\163\145\040#\045\144\072\040"
,
I0i
)
;
Ili
(
)
;
}
return
0
;
}
