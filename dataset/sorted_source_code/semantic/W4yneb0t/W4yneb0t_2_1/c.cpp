#include \
<iostream>
#include \
<iomanip>
#include \
<cstdio>
#include \
<algorithm>
#include \
<set>
#include \
<map>
#include \
<queue>
#include \
<cassert>
#define \
O \
  \
o
#define \
Oo \
  \
oo
#define \
io( \
Io \
) \
( \
lo \
( \
( \
Io \
) \
. \
Oi \
( \
) \
) \
)
#define \
oi( \
ii \
, \
Ii \
) \
for \
( \
lo \
ii \
= \
0 \
; \
ii \
< \
( \
Ii \
) \
; \
++ \
ii \
)
#define \
OI( \
ii \
, \
Io \
) \
oi \
( \
ii \
, \
io \
( \
Io \
) \
)
#define \
oI( \
ii \
, \
iI \
) \
for \
( \
auto \
ii \
= \
( \
iI \
) \
. \
II \
( \
) \
; \
ii \
!= \
( \
iI \
) \
. \
Ol \
( \
) \
; \
++ \
ii \
)
#define \
ol( \
Io \
) \
( \
Io \
) \
. \
II \
( \
) \
, \
( \
Io \
) \
. \
Ol \
( \
)
using
namespace
O0
;
typedef
long
long
lo
;
typedef
o0
<
lo
>
i0
;
typedef
o0
<
i0
>
I0
;
const
lo
o0o
=
.00000000001E029
;
i0
i0o
;
o0
<
double
>
I0o
;
I0
O1
;
o0
<
o0
<
double
>
>
l0o
;
void
l0
(
)
{
lo
Ii
,
O1o
;
o1
>>
Ii
>>
O1o
;
O1
=
I0
(
Ii
,
i0
(
Ii
,
o0o
)
)
;
l0o
=
o0
<
o0
<
double
>
>
(
Ii
,
o0
<
double
>
(
Ii
,
o0o
)
)
;
i0o
.
o1o
(
Ii
)
;
I0o
.
o1o
(
Ii
)
;
oi
(
ii
,
Ii
)
o1
>>
i0o
[
ii
]
>>
I0o
[
ii
]
;
lo
i1o
;
oi
(
ii
,
Ii
)
O1
[
ii
]
[
ii
]
=
l0o
[
ii
]
[
ii
]
=
0
;
oi
(
ii
,
Ii
)
{
oi
(
I1o
,
Ii
)
{
o1
>>
i1o
;
if
(
i1o
>
-
01
)
O1
[
ii
]
[
I1o
]
=
i1o
;
}
}
oi
(
I1o
,
Ii
)
{
oi
(
ii
,
Ii
)
{
oi
(
i1
,
Ii
)
{
O1
[
ii
]
[
i1
]
=
l1o
(
O1
[
ii
]
[
i1
]
,
O1
[
ii
]
[
I1o
]
+
O1
[
I1o
]
[
i1
]
)
;
}
}
}
oi
(
ii
,
Ii
)
{
oi
(
I1o
,
Ii
)
{
if
(
O1
[
ii
]
[
I1o
]
<=
i0o
[
ii
]
)
l0o
[
ii
]
[
I1o
]
=
O1
[
ii
]
[
I1o
]
/
I0o
[
ii
]
;
}
}
oi
(
I1o
,
Ii
)
{
oi
(
ii
,
Ii
)
{
oi
(
i1
,
Ii
)
{
l0o
[
ii
]
[
i1
]
=
l1o
(
l0o
[
ii
]
[
i1
]
,
l0o
[
ii
]
[
I1o
]
+
l0o
[
I1o
]
[
i1
]
)
;
}
}
}
lo
OOi
,
oOi
;
oi
(
Ioo
,
O1o
)
{
o1
>>
OOi
>>
oOi
;
oOo
<<
l0o
[
OOi
-
01
]
[
oOi
-
01
]
<<
"\040"
;
}
oOo
<<
"\n"
;
}
int
IOo
(
)
{
lOo
::
Ooo
(
0
)
;
o1
.
ooo
(
0
)
;
oOo
<<
ioo
(
017
)
;
lo
I1
;
o1
>>
I1
;
oi
(
Ioo
,
I1
)
{
oOo
<<
"C\141s\145 #"
<<
(
Ioo
+
01
)
<<
"\072\040"
;
l0
(
)
;
}
return
0
;
}
