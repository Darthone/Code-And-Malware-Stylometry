#include \
<algorithm>
#include \
<cstdio>
#include \
<vector>
using
namespace
O
;
typedef
llo
O0o
;
int
i1
(
)
{
O0o
o0o
;
II
(
"\045ll\144"
,
&
o0o
)
;
for
(
O0o
i0o
=
01
;
i0o
<=
o0o
;
i0o
++
)
{
O0o
IOo
,
OIo
;
II
(
"%\154\154d\040%\154\154\144"
,
&
IOo
,
&
OIo
)
;
iOi
<
O0o
>
l1i
(
IOo
)
,
o1o
(
IOo
)
;
for
(
O0o
oI
=
0
;
oI
<
IOo
;
oI
++
)
{
II
(
"%\154\154d \045l\154d"
,
&
l1i
[
oI
]
,
&
o1o
[
oI
]
)
;
}
iOi
<
iOi
<
O0o
>>
I0o
(
IOo
,
iOi
<
O0o
>
(
IOo
)
)
;
for
(
O0o
oI
=
0
;
oI
<
IOo
;
oI
++
)
{
for
(
O0o
ol
=
0
;
ol
<
IOo
;
ol
++
)
{
II
(
"%\154\154\144"
,
&
I0o
[
oI
]
[
ol
]
)
;
if
(
I0o
[
oI
]
[
ol
]
==
-
01
)
{
if
(
oI
!=
ol
)
{
I0o
[
oI
]
[
ol
]
=
01000000.E010
;
}
else
{
I0o
[
oI
]
[
ol
]
=
0
;
}
}
}
}
for
(
O0o
ii
=
0
;
ii
<
IOo
;
ii
++
)
for
(
O0o
oI
=
0
;
oI
<
IOo
;
oI
++
)
for
(
O0o
ol
=
0
;
ol
<
IOo
;
ol
++
)
I0o
[
oI
]
[
ol
]
=
Ilo
(
I0o
[
oI
]
[
ol
]
,
I0o
[
oI
]
[
ii
]
+
I0o
[
ii
]
[
ol
]
)
;
iOi
<
iOi
<
double
>>
o0o
(
IOo
,
iOi
<
double
>
(
IOo
)
)
;
for
(
O0o
oI
=
0
;
oI
<
IOo
;
oI
++
)
{
for
(
O0o
ol
=
0
;
ol
<
IOo
;
ol
++
)
{
o0o
[
oI
]
[
ol
]
=
l1i
[
oI
]
>=
I0o
[
oI
]
[
ol
]
?
static_cast
<
double
>
(
I0o
[
oI
]
[
ol
]
)
/
o1o
[
oI
]
:
01000000000000.E04
;
}
}
for
(
O0o
ii
=
0
;
ii
<
IOo
;
ii
++
)
for
(
O0o
oI
=
0
;
oI
<
IOo
;
oI
++
)
for
(
O0o
ol
=
0
;
ol
<
IOo
;
ol
++
)
o0o
[
oI
]
[
ol
]
=
Ilo
(
o0o
[
oI
]
[
ol
]
,
o0o
[
oI
]
[
ii
]
+
o0o
[
ii
]
[
ol
]
)
;
O0
(
"\103\141\163e\040\043\045\154l\144:"
,
i0o
)
;
for
(
O0o
oI
=
0
;
oI
<
OIo
;
oI
++
)
{
O0o
OOI
,
lOi
;
II
(
"\045l\154d\040%l\154d"
,
&
OOI
,
&
lOi
)
;
OOI
--
;
lOi
--
;
O0
(
" \045.09\146"
,
o0o
[
OOI
]
[
lOi
]
)
;
}
O0
(
"\n"
)
;
}
}
