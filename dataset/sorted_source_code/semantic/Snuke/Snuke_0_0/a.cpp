#include \
<cstdio>
#include \
<algorithm>
#include \
<stack>
#include \
<queue>
#include \
<deque>
#include \
<vector>
#include \
<string>
#include \
<string.h>
#include \
<cstdlib>
#include \
<ctime>
#include \
<cmath>
#include \
<map>
#include \
<set>
#include \
<iostream>
#include \
<sstream>
#include \
<numeric>
#include \
<cctype>
#include \
<bitset>
#include \
<cassert>
#define \
o1i \
  \
lIo
#define \
i1i \
  \
Olo
#define \
I1i( \
Oi \
, \
oi \
) \
for \
( \
int \
Oi \
= \
0 \
; \
Oi \
< \
( \
oi \
) \
; \
++ \
Oi \
)
#define \
l1i( \
Oi \
, \
oi \
) \
for \
( \
int \
Oi \
= \
01 \
; \
Oi \
<= \
( \
oi \
) \
; \
++ \
Oi \
)
#define \
OOI( \
Oi \
, \
oi \
) \
for \
( \
int \
Oi \
= \
( \
oi \
) \
- \
01 \
; \
Oi \
>= \
0 \
; \
-- \
Oi \
)
#define \
oOI( \
Oi \
, \
iOI \
, \
Iii \
) \
for \
( \
int \
Oi \
= \
iOI \
. \
iOo \
[ \
Iii \
] \
; \
Oi \
!= \
- \
01 \
; \
Oi \
= \
iOI \
. \
OIo \
[ \
Oi \
] \
. \
IOI \
)
#define \
lOI( \
iI \
, \
II \
) \
for \
( \
__typeof \
( \
( \
II \
) \
. \
io \
( \
) \
) \
iI \
= \
( \
II \
) \
. \
io \
( \
) \
; \
iI \
!= \
( \
II \
) \
. \
Io \
( \
) \
; \
iI \
++ \
)
#define \
OoI( \
Ii \
) \
Ii \
. \
io \
( \
) \
, \
Ii \
. \
Io \
( \
)
#define \
ooI( \
o \
, \
ioI \
) \
o \
= \
IoI \
( \
o \
, \
ioI \
)
#define \
loI( \
o \
, \
ioI \
) \
o \
= \
Oli \
( \
o \
, \
ioI \
)
#define \
OiI \
  \
o0
#define \
oiI( \
o \
) \
( \
int \
) \
( \
o \
) \
. \
Oo \
( \
)
#define \
iiI \
  \
IiI
#define \
liI( \
o \
) \
o \
. \
OII \
( \
oII \
( \
OoI \
( \
o \
) \
) \
, \
o \
. \
Io \
( \
) \
)
#define \
iII \
  \
III \
( \
( \
unsigned \
) \
lII \
( \
) \
+ \
( \
unsigned \
) \
OlI \
( \
olI \
) \
) \
;
#define \
ilI( \
o \
) \
int \
o \
= \
IlI \
( \
)
#define \
O0I \
  \
{ \
o0I \
( \
"-\061" \
) \
; \
return \
; \
}
#define \
i0I( \
o \
) \
I1o \
<< \
# \
o \
<< \
" = " \
<< \
o \
<< \
lOo \
;
#define \
I0I( \
l1 \
) \
l0I \
< \
l1 \
, \
o1 \
< \
l1 \
> \
, \
O1I \
< \
l1 \
> \
>
#define \
o1I( \
o \
) \
( \
( \
01 \
<< \
o \
) \
- \
01 \
)
#define \
i1I \
  \
o0I \
( \
"" \
)
#define \
I1I( \
l1 \
) \
o1 \
< \
l1 \
>
#define \
l1I( \
l1 \
) \
o1 \
< \
o1 \
< \
l1 \
>>
using
namespace
i0
;
typedef
long
long
OOl
;
typedef
unsigned
oOl
;
typedef
unsigned
long
long
iOl
;
typedef
l0
<
int
,
int
>
IOl
;
typedef
o1
<
int
>
lOl
;
typedef
o1
<
lOl
>
Ool
;
typedef
o1
<
OOl
>
ool
;
typedef
o1
<
IOl
>
iol
;
inline
int
IlI
(
)
{
int
o
;
I0o
(
"\045\144"
,
&
o
)
;
return
o
;
}
inline
void
Iol
(
lOl
Ii
)
{
I1i
(
Oi
,
oiI
(
Ii
)
)
l1o
(
"\045\144\045\143"
,
Ii
[
Oi
]
,
Oi
==
oiI
(
Ii
)
-
01
?
'\012'
:
'\040'
)
;
}
template
<
typename
l1
>
lol
&
operator
>>
(
lol
&
Oi
,
o1
<
l1
>
&
I1I
)
{
I1i
(
Iii
,
oiI
(
I1I
)
)
Oi
>>
I1I
[
Iii
]
;
return
Oi
;
}
template
<
typename
l1
>
Oil
oil
(
const
o1
<
l1
>
&
I1I
)
{
iil
oOo
;
I1i
(
Oi
,
oiI
(
I1I
)
)
oOo
<<
'\040'
<<
I1I
[
Oi
]
;
return
oOo
.
Iil
(
)
.
lil
(
01
)
;
}
template
<
typename
l1
>
Iio
&
operator
<<
(
Iio
&
OIl
,
const
o1
<
l1
>
&
I1I
)
{
if
(
oiI
(
I1I
)
)
OIl
<<
oil
(
I1I
)
;
return
OIl
;
}
template
<
typename
oIl
,
typename
iIl
>
lol
&
operator
>>
(
lol
&
Oi
,
l0
<
oIl
,
iIl
>
&
I1I
)
{
return
Oi
>>
I1I
.
o1i
>>
I1I
.
i1i
;
}
template
<
typename
oIl
,
typename
iIl
>
Iio
&
operator
<<
(
Iio
&
OIl
,
const
l0
<
oIl
,
iIl
>
&
I1I
)
{
return
OIl
<<
I1I
.
o1i
<<
"\054"
<<
I1I
.
i1i
;
}
const
int
IIl
=
0303245
,
oIi
=
07352410051
;
const
OOl
lIl
=
.0000000000000001E034
;
const
double
Oll
=
01000000.E-016
;
struct
oll
{
void
oli
(
)
{
int
oii
,
oi
;
I0o
(
"%\144%d"
,
&
oii
,
&
oi
)
;
double
lll
=
0
;
I1i
(
Oi
,
oi
)
{
int
o
,
oOo
;
I0o
(
"%\144%d"
,
&
o
,
&
oOo
)
;
double
O0l
=
double
(
oii
-
o
)
/
oOo
;
ooI
(
lll
,
O0l
)
;
}
double
o0l
=
oii
/
lll
;
l1o
(
"%\05610\146\n"
,
o0l
)
;
}
}
;
int
o0i
(
)
{
int
i0l
;
I0o
(
"%\144"
,
&
i0l
)
;
l1i
(
I0l
,
i0l
)
{
oll
l0l
;
l1o
(
"\103a\163e #%\144\072\040"
,
I0l
)
;
l0l
.
oli
(
)
;
}
return
0
;
}
