#include \
<cstdio>
#include \
<cstring>
#include \
<cmath>
#include \
<algorithm>
#include \
<vector>
#include \
<string>
#include \
<map>
#include \
<set>
#include \
<cassert>
using
namespace
O
;
#define \
o( \
Oo \
, \
oo \
, \
io \
) \
for \
( \
int \
Oo \
= \
oo \
; \
Oo \
< \
io \
; \
Oo \
++ \
)
#define \
Io( \
Oo \
, \
oo \
, \
io \
) \
for \
( \
int \
Oo \
= \
io \
- \
01 \
; \
Oo \
>= \
oo \
; \
Oo \
-- \
)
#define \
lo \
  \
Oi
#define \
oi \
  \
ii
#define \
Ii( \
OI \
) \
( \
OI \
) \
. \
oI \
( \
) \
, \
( \
OI \
) \
. \
iI \
( \
)
#define \
II \
  \
Ol
#define \
ol \
  \
O0
#define \
o0( \
OI \
) \
( \
( \
int \
) \
( \
OI \
) \
. \
i0 \
( \
) \
)
typedef
I0
<
int
>
l0
;
typedef
long
long
O1
;
typedef
o1
<
int
,
int
>
i1
;
const
O1
I1
=
07346545007
;
O1
l1
(
O1
oo
,
O1
OOo
)
{
O1
oOo
=
01
;
oo
%=
I1
;
iOo
(
OOo
>=
0
)
;
for
(
;
OOo
;
OOo
>>=
01
)
{
if
(
OOo
&
01
)
oOo
=
oOo
*
oo
%
I1
;
oo
=
oo
*
oo
%
I1
;
}
return
oOo
;
}
int
IOo
,
io
,
Iio
,
lio
,
ooo
,
OIo
,
oIo
,
OOo
,
ioo
;
char
iIo
[
012
]
;
int
IIo
[
012
]
;
l0
lIo
(
int
oo
,
int
OOo
,
int
Olo
)
{
l0
ooo
(
oo
,
0
)
;
int
olo
=
oo
;
o
(
Oo
,
0
,
OOo
)
{
if
(
olo
==
0
)
{
o
(
ilo
,
0
,
o0
(
ooo
)
)
if
(
ooo
[
ilo
]
!=
01
&&
ooo
[
(
ilo
+
01
)
%
ooo
.
i0
(
)
]
!=
01
)
{
ooo
.
Ilo
(
ooo
.
oI
(
)
+
ilo
+
01
,
01
)
;
break
;
}
}
else
{
o
(
ilo
,
0
,
o0
(
ooo
)
)
if
(
ooo
[
ilo
]
==
0
&&
ooo
[
(
ilo
+
01
)
%
ooo
.
i0
(
)
]
==
0
)
{
ooo
.
Ilo
(
ooo
.
oI
(
)
+
ilo
+
01
,
01
)
;
break
;
}
olo
--
;
}
}
o
(
Oo
,
0
,
Olo
)
{
if
(
olo
==
0
)
{
o
(
ilo
,
0
,
o0
(
ooo
)
)
if
(
ooo
[
ilo
]
!=
02
&&
ooo
[
(
ilo
+
01
)
%
ooo
.
i0
(
)
]
!=
02
)
{
ooo
.
Ilo
(
ooo
.
oI
(
)
+
ilo
+
01
,
02
)
;
break
;
}
}
else
{
o
(
ilo
,
0
,
o0
(
ooo
)
)
if
(
ooo
[
ilo
]
==
0
&&
ooo
[
(
ilo
+
01
)
%
ooo
.
i0
(
)
]
==
0
)
{
ooo
.
Ilo
(
ooo
.
oI
(
)
+
ilo
+
01
,
02
)
;
break
;
}
olo
--
;
}
}
return
ooo
;
}
i1o
I1o
;
int
llo
(
)
{
if
(
ooo
>
oIo
||
lio
>
OIo
||
Iio
>
OOo
)
{
return
0
;
}
I1o
=
""
;
if
(
ooo
==
oIo
&&
oIo
>
0
)
{
if
(
Iio
||
lio
||
OIo
||
OOo
)
return
0
;
o
(
Oo
,
0
,
oIo
)
I1o
+=
"\131V"
;
return
01
;
}
if
(
lio
==
OIo
&&
OIo
>
0
)
{
if
(
Iio
||
ooo
||
oIo
||
OOo
)
return
0
;
o
(
Oo
,
0
,
lio
)
I1o
+=
"\122\107"
;
return
01
;
}
if
(
Iio
==
OOo
&&
OOo
>
0
)
{
if
(
lio
||
ooo
||
OIo
||
oIo
)
return
0
;
o
(
Oo
,
0
,
Iio
)
I1o
+=
"BO"
;
return
01
;
}
OOo
-=
Iio
;
OIo
-=
lio
;
oIo
-=
ooo
;
int
O0o
=
OIo
+
oIo
+
OOo
;
if
(
02
*
OIo
>
O0o
||
02
*
oIo
>
O0o
||
02
*
OOo
>
O0o
)
return
0
;
IIo
[
0
]
=
OIo
;
IIo
[
01
]
=
oIo
;
IIo
[
02
]
=
OOo
;
iIo
[
0
]
=
'\122'
;
iIo
[
01
]
=
'\131'
;
iIo
[
02
]
=
'\102'
;
o
(
Oo
,
0
,
03
)
o
(
ilo
,
Oo
+
01
,
03
)
if
(
IIo
[
Oo
]
<
IIo
[
ilo
]
)
o0o
(
IIo
[
Oo
]
,
IIo
[
ilo
]
)
,
o0o
(
iIo
[
Oo
]
,
iIo
[
ilo
]
)
;
I0
<
int
>
i0o
=
lIo
(
IIo
[
0
]
,
IIo
[
01
]
,
IIo
[
02
]
)
;
bool
I0o
=
(
lio
==
0
)
,
l0o
=
(
ooo
==
0
)
,
O1o
=
(
Iio
==
0
)
;
o
(
Oo
,
0
,
o0
(
i0o
)
)
{
if
(
iIo
[
i0o
[
Oo
]
]
==
'\122'
&&
I0o
==
0
)
{
o
(
Ooo
,
0
,
lio
)
I1o
+=
"R\107"
;
I0o
=
01
;
}
if
(
iIo
[
i0o
[
Oo
]
]
==
'\131'
&&
l0o
==
0
)
{
o
(
Ooo
,
0
,
ooo
)
I1o
+=
"\131V"
;
l0o
=
01
;
}
if
(
iIo
[
i0o
[
Oo
]
]
==
'\102'
&&
O1o
==
0
)
{
o
(
Ooo
,
0
,
Iio
)
I1o
+=
"\102O"
;
O1o
=
01
;
}
I1o
+=
iIo
[
i0o
[
Oo
]
]
;
}
return
01
;
}
void
l1o
(
int
OOi
)
{
if
(
OOi
==
'\122'
)
IIo
[
0
]
++
;
if
(
OOi
==
'\117'
)
IIo
[
0
]
++
,
IIo
[
01
]
++
;
if
(
OOi
==
'\131'
)
IIo
[
01
]
++
;
if
(
OOi
==
'\107'
)
IIo
[
01
]
++
,
IIo
[
02
]
++
;
if
(
OOi
==
'\102'
)
IIo
[
02
]
++
;
if
(
OOi
==
'\126'
)
IIo
[
02
]
++
,
IIo
[
0
]
++
;
}
int
Ioo
(
)
{
for
(
loo
(
"\045\144"
,
&
IOo
)
;
IOo
;
IOo
--
)
{
loo
(
"%d"
,
&
io
)
;
loo
(
"%\144\045\144%d%d%\144\045\144"
,
&
OIo
,
&
Iio
,
&
oIo
,
&
lio
,
&
OOo
,
&
ooo
)
;
int
oOi
=
OIo
,
iOi
=
Iio
,
IOi
=
oIo
,
lOi
=
lio
,
Ooi
=
OOo
,
i0o
=
ooo
;
iio
(
"C\141s\145 \043%d:\040"
,
++
ioo
)
;
if
(
!
llo
(
)
)
o1o
(
"\111\115P\117SSIBLE"
)
;
else
{
iio
(
"%s\012"
,
I1o
.
ooi
(
)
)
;
iOo
(
o0
(
I1o
)
==
io
)
;
o
(
Oo
,
0
,
o0
(
I1o
)
)
{
if
(
I1o
[
Oo
]
==
'\122'
)
--
oOi
;
if
(
I1o
[
Oo
]
==
'\117'
)
--
iOi
;
if
(
I1o
[
Oo
]
==
'\131'
)
--
IOi
;
if
(
I1o
[
Oo
]
==
'\107'
)
--
lOi
;
if
(
I1o
[
Oo
]
==
'\102'
)
--
Ooi
;
if
(
I1o
[
Oo
]
==
'\126'
)
--
i0o
;
}
iOo
(
oOi
==
0
&&
iOi
==
0
&&
IOi
==
0
&&
lOi
==
0
&&
Ooi
==
0
&&
i0o
==
0
)
;
o
(
Oo
,
0
,
o0
(
I1o
)
)
{
char
OOi
=
I1o
[
Oo
]
,
ooo
=
I1o
[
(
Oo
+
01
)
%
io
]
;
IIo
[
0
]
=
IIo
[
01
]
=
IIo
[
02
]
=
0
;
l1o
(
OOi
)
;
l1o
(
ooo
)
;
iOo
(
IIo
[
0
]
<=
01
&&
IIo
[
01
]
<=
01
&&
IIo
[
02
]
<=
01
)
;
}
}
}
}
