#include \
<bits/stdc++.h>
#include \
<unistd.h>
#define \
lIo( \
Olo \
) \
( \
( \
int \
) \
( \
Olo \
) \
. \
olo \
( \
) \
)
#define \
ilo( \
Olo \
) \
Ilo \
( \
Olo \
) \
, \
llo \
( \
Olo \
)
#define \
O0o( \
Ii \
, \
o0o \
) \
for \
( \
int \
Ii \
= \
0 \
; \
Ii \
< \
int \
( \
o0o \
) \
; \
Ii \
++ \
)
#define \
i0o( \
Ii \
, \
I0o \
, \
l0o \
) \
for \
( \
int \
Ii \
= \
( \
I0o \
) \
; \
Ii \
<= \
int \
( \
l0o \
) \
; \
Ii \
++ \
)
#define \
O1o( \
o1o \
, \
i1o \
) \
for \
( \
auto \
o1o \
= \
( \
i1o \
) \
. \
Ilo \
( \
) \
; \
o1o \
!= \
( \
i1o \
) \
. \
llo \
( \
) \
; \
o1o \
++ \
)
#define \
I1o \
  \
l1o
#define \
OOi \
  \
oOi
using
namespace
O
;
typedef
long
long
iOi
;
typedef
l1
<
int
,
int
>
IOi
;
typedef
lOi
<
int
>
Ooi
;
#ifdef \
ooi
template
<
typename
O0
>
void
ioi
(
const
char
*
ioo
,
O0
&&
Ioi
)
{
loi
<<
ioo
<<
"="
<<
Ioi
<<
Oii
;
}
template
<
typename
O0
,
typename
...
oii
>
void
ioi
(
const
char
*
ioo
,
O0
&&
Ioi
,
oii
&&
...
iii
)
{
int
i1o
=
0
;
while
(
*
ioo
!=
'\054'
||
i1o
!=
0
)
{
if
(
*
ioo
==
'\050'
||
*
ioo
==
'\133'
||
*
ioo
==
'\173'
)
i1o
++
;
if
(
*
ioo
==
'\051'
||
*
ioo
==
'\135'
||
*
ioo
==
'\175'
)
i1o
--
;
loi
<<
*
ioo
++
;
}
loi
<<
"="
<<
Ioi
<<
"\054\040"
;
ioi
(
ioo
+
01
,
iii
...
)
;
}
#define \
Iii( \
... \
) \
do \
{ \
lii \
( \
OIi \
, \
"%\163\072%\144 -\040" \
, \
__PRETTY_FUNCTION__ \
, \
oIi \
) \
; \
ioi \
( \
# \
iIi \
, \
iIi \
) \
; \
} \
while \
( \
0 \
)
template
<
typename
IIi
>
lIi
&
Oli
(
lIi
&
ioo
,
IIi
l0o
,
IIi
IIo
)
{
ioo
<<
"\133"
;
for
(
auto
o1o
=
l0o
;
o1o
!=
IIo
;
o1o
++
)
ioo
<<
(
o1o
==
l0o
?
""
:
" "
)
<<
*
o1o
;
ioo
<<
"]"
;
return
ioo
;
}
template
<
typename
oli
,
typename
ili
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
l1
<
oli
,
ili
>
&
Ili
)
{
return
ioo
<<
"("
<<
Ili
.
oOo
<<
","
<<
Ili
.
iOo
<<
"\051"
;
}
template
<
typename
O0
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
lOi
<
O0
>
&
i1o
)
{
return
Oli
(
ioo
,
ilo
(
i1o
)
)
;
}
template
<
typename
O0
,
O0i
oi
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
o0i
<
O0
,
oi
>
&
i1o
)
{
return
Oli
(
ioo
,
ilo
(
i1o
)
)
;
}
template
<
typename
O0
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
i0i
<
O0
>
&
i1o
)
{
return
Oli
(
ioo
,
ilo
(
i1o
)
)
;
}
template
<
typename
oli
,
typename
ili
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
I0i
<
oli
,
ili
>
&
i1o
)
{
return
Oli
(
ioo
,
ilo
(
i1o
)
)
;
}
#else
#define \
Iii( \
... \
)
#endif
template
<
typename
O0
>
void
l0i
(
O0
&
Olo
)
{
O1i
>>
Olo
;
}
void
l0i
(
int
&
Olo
)
{
o1i
(
"%\144"
,
&
Olo
)
;
}
void
l0i
(
long
long
&
Olo
)
{
o1i
(
"\045"
i1i
,
&
Olo
)
;
}
void
l0i
(
double
&
Olo
)
{
o1i
(
"\045\154\146"
,
&
Olo
)
;
}
void
l0i
(
char
&
Olo
)
{
o1i
(
" \045c"
,
&
Olo
)
;
}
void
l0i
(
char
*
Olo
)
{
o1i
(
"%s"
,
Olo
)
;
}
void
I1i
(
)
{
}
template
<
typename
O0
,
typename
...
l1i
>
void
I1i
(
O0
&
Ioi
,
l1i
&
...
iii
)
{
l0i
(
Ioi
)
;
I1i
(
iii
...
)
;
}
template
<
typename
O0
>
void
OOI
(
const
O0
&
Olo
)
{
oOI
<<
Olo
;
}
void
OOI
(
const
int
&
Olo
)
{
iOI
(
"%\144"
,
Olo
)
;
}
void
OOI
(
const
long
long
&
Olo
)
{
iOI
(
"\045"
i1i
,
Olo
)
;
}
template
<
typename
O0
>
void
OOI
(
const
lOi
<
O0
>
&
Olo
)
{
for
(
auto
Ii
=
Olo
.
IOI
(
)
;
Ii
!=
Olo
.
lOI
(
)
;
Ii
++
)
{
if
(
Ii
!=
Olo
.
IOI
(
)
)
OoI
(
'\040'
)
;
OOI
(
*
Ii
)
;
}
}
void
ooI
(
)
{
}
template
<
typename
O0
,
typename
...
l1i
>
void
ooI
(
const
O0
&
Ioi
,
const
l1i
&
...
iii
)
{
OOI
(
Ioi
)
;
OoI
(
sizeof
...
(
iii
)
?
'\040'
:
'\012'
)
;
ooI
(
iii
...
)
;
}
#ifdef \
ooi
#define \
ioI( \
... \
)
#else
#define \
ioI( \
IoI \
) \
do \
{ \
loI \
( \
IoI \
".\151\156" \
, \
"\162" \
, \
OiI \
) \
; \
loI \
( \
IoI \
"\056\157\165t" \
, \
"\167" \
, \
oiI \
) \
; \
} \
while \
( \
0 \
)
#endif
const
int
oi
=
01762
;
int
o0o
;
double
iiI
,
Olo
[
oi
]
,
ioo
[
oi
]
;
void
IiI
(
)
{
I1i
(
iiI
,
o0o
)
;
O0o
(
Ii
,
o0o
)
I1i
(
Olo
[
Ii
]
,
ioo
[
Ii
]
)
;
}
int
liI
[
oi
]
;
bool
OII
(
int
I0o
,
int
l0o
)
{
return
Olo
[
I0o
]
>
Olo
[
l0o
]
;
}
void
oII
(
)
{
O0o
(
Ii
,
o0o
)
liI
[
Ii
]
=
Ii
;
IOo
(
liI
,
liI
+
o0o
,
OII
)
;
double
iII
=
0
;
O0o
(
III
,
o0o
)
{
int
Ii
=
liI
[
III
]
;
double
lII
=
(
iiI
-
Olo
[
Ii
]
)
/
ioo
[
Ii
]
;
iII
=
iI
(
iII
,
lII
)
;
}
double
ii
=
iiI
/
iII
;
iOI
(
"%.\0614\146\012"
,
ii
)
;
}
int
II
(
int
OlI
,
char
*
olI
[
]
)
{
int
ilI
;
I1i
(
ilI
)
;
i0o
(
Ii
,
01
,
ilI
)
{
IiI
(
)
;
if
(
OlI
==
02
&&
IlI
(
olI
[
01
]
)
!=
Ii
)
continue
;
iOI
(
"C\141s\145 #%d\072\040"
,
Ii
)
;
oII
(
)
;
}
return
0
;
}
