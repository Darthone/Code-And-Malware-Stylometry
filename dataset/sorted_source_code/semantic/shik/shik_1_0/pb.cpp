#include \
<bits/stdc++.h>
#include \
<unistd.h>
#define \
lIo( \
Olo \
) \
( \
( \
int \
) \
( \
Olo \
) \
. \
olo \
( \
) \
)
#define \
ilo( \
Olo \
) \
Ilo \
( \
Olo \
) \
, \
llo \
( \
Olo \
)
#define \
O0o( \
Ii \
, \
o0o \
) \
for \
( \
int \
Ii \
= \
0 \
; \
Ii \
< \
int \
( \
o0o \
) \
; \
Ii \
++ \
)
#define \
i0o( \
Ii \
, \
I0o \
, \
l0o \
) \
for \
( \
int \
Ii \
= \
( \
I0o \
) \
; \
Ii \
<= \
int \
( \
l0o \
) \
; \
Ii \
++ \
)
#define \
O1o( \
o1o \
, \
i1o \
) \
for \
( \
auto \
o1o \
= \
( \
i1o \
) \
. \
Ilo \
( \
) \
; \
o1o \
!= \
( \
i1o \
) \
. \
llo \
( \
) \
; \
o1o \
++ \
)
#define \
I1o \
  \
l1o
#define \
OOi \
  \
oOi
using
namespace
O
;
typedef
long
long
iOi
;
typedef
l1
<
int
,
int
>
IOi
;
typedef
lOi
<
int
>
Ooi
;
#ifdef \
ooi
template
<
typename
O0
>
void
ioi
(
const
char
*
ioo
,
O0
&&
Ioi
)
{
loi
<<
ioo
<<
"\075"
<<
Ioi
<<
Oii
;
}
template
<
typename
O0
,
typename
...
oii
>
void
ioi
(
const
char
*
ioo
,
O0
&&
Ioi
,
oii
&&
...
iii
)
{
int
i1o
=
0
;
while
(
*
ioo
!=
'\054'
||
i1o
!=
0
)
{
if
(
*
ioo
==
'\050'
||
*
ioo
==
'\133'
||
*
ioo
==
'\173'
)
i1o
++
;
if
(
*
ioo
==
'\051'
||
*
ioo
==
'\135'
||
*
ioo
==
'\175'
)
i1o
--
;
loi
<<
*
ioo
++
;
}
loi
<<
"\075"
<<
Ioi
<<
",\040"
;
ioi
(
ioo
+
01
,
iii
...
)
;
}
#define \
Iii( \
... \
) \
do \
{ \
lii \
( \
OIi \
, \
"\045\163\072\045d \055\040" \
, \
__PRETTY_FUNCTION__ \
, \
oIi \
) \
; \
ioi \
( \
# \
iIi \
, \
iIi \
) \
; \
} \
while \
( \
0 \
)
template
<
typename
IIi
>
lIi
&
Oli
(
lIi
&
ioo
,
IIi
l0o
,
IIi
IIo
)
{
ioo
<<
"["
;
for
(
auto
o1o
=
l0o
;
o1o
!=
IIo
;
o1o
++
)
ioo
<<
(
o1o
==
l0o
?
""
:
" "
)
<<
*
o1o
;
ioo
<<
"\135"
;
return
ioo
;
}
template
<
typename
oli
,
typename
ili
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
l1
<
oli
,
ili
>
&
Ili
)
{
return
ioo
<<
"\050"
<<
Ili
.
oOo
<<
"\054"
<<
Ili
.
iOo
<<
"\051"
;
}
template
<
typename
O0
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
lOi
<
O0
>
&
i1o
)
{
return
Oli
(
ioo
,
ilo
(
i1o
)
)
;
}
template
<
typename
O0
,
O0i
oi
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
o0i
<
O0
,
oi
>
&
i1o
)
{
return
Oli
(
ioo
,
ilo
(
i1o
)
)
;
}
template
<
typename
O0
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
i0i
<
O0
>
&
i1o
)
{
return
Oli
(
ioo
,
ilo
(
i1o
)
)
;
}
template
<
typename
oli
,
typename
ili
>
lIi
&
operator
<<
(
lIi
&
ioo
,
const
I0i
<
oli
,
ili
>
&
i1o
)
{
return
Oli
(
ioo
,
ilo
(
i1o
)
)
;
}
#else
#define \
Iii( \
... \
)
#endif
template
<
typename
O0
>
void
l0i
(
O0
&
Olo
)
{
O1i
>>
Olo
;
}
void
l0i
(
int
&
Olo
)
{
o1i
(
"\045d"
,
&
Olo
)
;
}
void
l0i
(
long
long
&
Olo
)
{
o1i
(
"%"
i1i
,
&
Olo
)
;
}
void
l0i
(
double
&
Olo
)
{
o1i
(
"\045lf"
,
&
Olo
)
;
}
void
l0i
(
char
&
Olo
)
{
o1i
(
"\040\045c"
,
&
Olo
)
;
}
void
l0i
(
char
*
Olo
)
{
o1i
(
"%s"
,
Olo
)
;
}
void
I1i
(
)
{
}
template
<
typename
O0
,
typename
...
l1i
>
void
I1i
(
O0
&
Ioi
,
l1i
&
...
iii
)
{
l0i
(
Ioi
)
;
I1i
(
iii
...
)
;
}
template
<
typename
O0
>
void
OOI
(
const
O0
&
Olo
)
{
oOI
<<
Olo
;
}
void
OOI
(
const
int
&
Olo
)
{
iOI
(
"%d"
,
Olo
)
;
}
void
OOI
(
const
long
long
&
Olo
)
{
iOI
(
"\045"
i1i
,
Olo
)
;
}
template
<
typename
O0
>
void
OOI
(
const
lOi
<
O0
>
&
Olo
)
{
for
(
auto
Ii
=
Olo
.
IOI
(
)
;
Ii
!=
Olo
.
lOI
(
)
;
Ii
++
)
{
if
(
Ii
!=
Olo
.
IOI
(
)
)
OoI
(
'\040'
)
;
OOI
(
*
Ii
)
;
}
}
void
ooI
(
)
{
}
template
<
typename
O0
,
typename
...
l1i
>
void
ooI
(
const
O0
&
Ioi
,
const
l1i
&
...
iii
)
{
OOI
(
Ioi
)
;
OoI
(
sizeof
...
(
iii
)
?
'\040'
:
'\012'
)
;
ooI
(
iii
...
)
;
}
#ifdef \
ooi
#define \
ioI( \
... \
)
#else
#define \
ioI( \
IoI \
) \
do \
{ \
loI \
( \
IoI \
"\056\151n" \
, \
"\162" \
, \
OiI \
) \
; \
loI \
( \
IoI \
".\157u\164" \
, \
"\167" \
, \
oiI \
) \
; \
} \
while \
( \
0 \
)
#endif
char
O0I
[
]
=
"ROY\107BV"
;
o0
o0I
(
o0i
<
int
,
03
>
I0o
)
{
int
o0o
=
I0o
[
0
]
+
I0o
[
01
]
+
I0o
[
02
]
;
i0I
(
o0o
>
0
)
;
o0
ioo
;
int
I0I
=
-
01
;
O0o
(
Ii
,
o0o
)
{
int
l0I
=
-
01
;
O0o
(
ooo
,
03
)
if
(
ooo
!=
I0I
&&
I0o
[
ooo
]
&&
(
l0I
==
-
01
||
(
Ii
>
0
&&
I0o
[
ooo
]
>
I0o
[
l0I
]
)
)
)
l0I
=
ooo
;
if
(
l0I
==
-
01
)
return
""
;
ioo
+=
O0I
[
l0I
*
02
]
;
I0o
[
l0I
]
--
;
I0I
=
l0I
;
}
i0I
(
lIo
(
ioo
)
==
o0o
)
;
if
(
ioo
[
0
]
==
ioo
[
o0o
-
01
]
)
return
""
;
return
ioo
;
}
int
o0o
,
i1o
[
06
]
;
void
IiI
(
)
{
I1i
(
o0o
)
;
O0o
(
Ii
,
06
)
I1i
(
i1o
[
Ii
]
)
;
}
o0
O1I
(
o0
ioo
,
int
Oio
)
{
o0
lII
;
O0o
(
Ii
,
Oio
)
lII
+=
ioo
;
return
lII
;
}
o0
o1I
(
)
{
if
(
i1o
[
01
]
+
i1o
[
04
]
==
o0o
&&
i1o
[
01
]
==
i1o
[
04
]
)
return
O1I
(
"O\102"
,
o0o
/
02
)
;
if
(
i1o
[
03
]
+
i1o
[
0
]
==
o0o
&&
i1o
[
03
]
==
i1o
[
0
]
)
return
O1I
(
"\107\122"
,
o0o
/
02
)
;
if
(
i1o
[
05
]
+
i1o
[
02
]
==
o0o
&&
i1o
[
05
]
==
i1o
[
02
]
)
return
O1I
(
"V\131"
,
o0o
/
02
)
;
if
(
i1o
[
01
]
&&
i1o
[
01
]
>=
i1o
[
04
]
)
return
""
;
if
(
i1o
[
03
]
&&
i1o
[
03
]
>=
i1o
[
0
]
)
return
""
;
if
(
i1o
[
05
]
&&
i1o
[
05
]
>=
i1o
[
02
]
)
return
""
;
i1o
[
04
]
-=
i1o
[
01
]
;
i1o
[
0
]
-=
i1o
[
03
]
;
i1o
[
02
]
-=
i1o
[
05
]
;
o0
ioo
=
o0I
(
{
{
i1o
[
0
]
,
i1o
[
02
]
,
i1o
[
04
]
}
}
)
;
if
(
ioo
.
i1I
(
)
)
return
ioo
;
o0
ii
;
for
(
char
Ii
:
ioo
)
{
ii
.
oOi
(
Ii
)
;
if
(
Ii
==
'\102'
&&
i1o
[
01
]
)
{
ii
+=
O1I
(
"O\102"
,
i1o
[
01
]
)
;
i1o
[
01
]
=
0
;
}
if
(
Ii
==
'\122'
&&
i1o
[
03
]
)
{
ii
+=
O1I
(
"\107\122"
,
i1o
[
03
]
)
;
i1o
[
03
]
=
0
;
}
if
(
Ii
==
'\131'
&&
i1o
[
05
]
)
{
ii
+=
O1I
(
"V\131"
,
i1o
[
05
]
)
;
i1o
[
05
]
=
0
;
}
}
return
ii
;
}
void
oII
(
)
{
int
I1I
[
06
]
;
l1I
(
I1I
,
i1o
,
sizeof
(
i1o
)
)
;
o0o
=
0
;
O0o
(
Ii
,
06
)
o0o
+=
i1o
[
Ii
]
;
auto
ii
=
o1I
(
)
;
if
(
ii
.
i1I
(
)
)
ii
=
"IMP\117\123\123IB\114\105"
;
else
{
i0I
(
lIo
(
ii
)
==
o0o
)
;
O0o
(
Ii
,
o0o
)
i0I
(
ii
[
Ii
]
!=
ii
[
(
Ii
+
01
)
%
o0o
]
)
;
O0o
(
Ii
,
o0o
)
{
auto
OOl
=
oOl
(
O0I
,
ii
[
Ii
]
)
;
i0I
(
OOl
)
;
int
iOl
=
OOl
-
O0I
;
I1I
[
iOl
]
--
;
}
O0o
(
Ii
,
06
)
i0I
(
I1I
[
Ii
]
==
0
)
;
}
ooI
(
ii
)
;
}
int
II
(
int
OlI
,
char
*
olI
[
]
)
{
int
ilI
;
I1i
(
ilI
)
;
i0o
(
Ii
,
01
,
ilI
)
{
IiI
(
)
;
if
(
OlI
==
02
&&
IlI
(
olI
[
01
]
)
!=
Ii
)
continue
;
iOI
(
"Cas\145 \043\045d\072\040"
,
Ii
)
;
oII
(
)
;
}
return
0
;
}
