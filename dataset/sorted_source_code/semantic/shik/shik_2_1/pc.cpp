#include \
<bits/stdc++.h>
#include \
<unistd.h>
#define \
O( \
o \
) \
( \
( \
int \
) \
( \
o \
) \
. \
Oo \
( \
) \
)
#define \
oo( \
o \
) \
io \
( \
o \
) \
, \
Io \
( \
o \
)
#define \
lo( \
Oi \
, \
oi \
) \
for \
( \
int \
Oi \
= \
0 \
; \
Oi \
< \
int \
( \
oi \
) \
; \
Oi \
++ \
)
#define \
ii( \
Oi \
, \
Ii \
, \
OI \
) \
for \
( \
int \
Oi \
= \
( \
Ii \
) \
; \
Oi \
<= \
int \
( \
OI \
) \
; \
Oi \
++ \
)
#define \
oI( \
iI \
, \
II \
) \
for \
( \
auto \
iI \
= \
( \
II \
) \
. \
io \
( \
) \
; \
iI \
!= \
( \
II \
) \
. \
Io \
( \
) \
; \
iI \
++ \
)
#define \
Ol \
  \
ol
#define \
O0 \
  \
o0
using
namespace
i0
;
typedef
long
long
I0
;
typedef
l0
<
int
,
int
>
O1
;
typedef
o1
<
int
>
i1
;
#ifdef \
I1
template
<
typename
l1
>
void
OOo
(
const
char
*
oOo
,
l1
&&
iOo
)
{
IOo
<<
oOo
<<
"\075"
<<
iOo
<<
lOo
;
}
template
<
typename
l1
,
typename
...
Ooo
>
void
OOo
(
const
char
*
oOo
,
l1
&&
iOo
,
Ooo
&&
...
ooo
)
{
int
II
=
0
;
while
(
*
oOo
!=
'\054'
||
II
!=
0
)
{
if
(
*
oOo
==
'\050'
||
*
oOo
==
'\133'
||
*
oOo
==
'\173'
)
II
++
;
if
(
*
oOo
==
'\051'
||
*
oOo
==
'\135'
||
*
oOo
==
'\175'
)
II
--
;
IOo
<<
*
oOo
++
;
}
IOo
<<
"\075"
<<
iOo
<<
",\040"
;
OOo
(
oOo
+
01
,
ooo
...
)
;
}
#define \
ioo( \
... \
) \
do \
{ \
Ioo \
( \
loo \
, \
"\045\163:\045\144 \055\040" \
, \
__PRETTY_FUNCTION__ \
, \
Oio \
) \
; \
OOo \
( \
# \
oio \
, \
oio \
) \
; \
} \
while \
( \
0 \
)
template
<
typename
iio
>
Iio
&
lio
(
Iio
&
oOo
,
iio
OI
,
iio
OIo
)
{
oOo
<<
"["
;
for
(
auto
iI
=
OI
;
iI
!=
OIo
;
iI
++
)
oOo
<<
(
iI
==
OI
?
""
:
" "
)
<<
*
iI
;
oOo
<<
"\135"
;
return
oOo
;
}
template
<
typename
oIo
,
typename
iIo
>
Iio
&
operator
<<
(
Iio
&
oOo
,
const
l0
<
oIo
,
iIo
>
&
IIo
)
{
return
oOo
<<
"("
<<
IIo
.
lIo
<<
"\054"
<<
IIo
.
Olo
<<
"\051"
;
}
template
<
typename
l1
>
Iio
&
operator
<<
(
Iio
&
oOo
,
const
o1
<
l1
>
&
II
)
{
return
lio
(
oOo
,
oo
(
II
)
)
;
}
template
<
typename
l1
,
olo
ilo
>
Iio
&
operator
<<
(
Iio
&
oOo
,
const
Ilo
<
l1
,
ilo
>
&
II
)
{
return
lio
(
oOo
,
oo
(
II
)
)
;
}
template
<
typename
l1
>
Iio
&
operator
<<
(
Iio
&
oOo
,
const
llo
<
l1
>
&
II
)
{
return
lio
(
oOo
,
oo
(
II
)
)
;
}
template
<
typename
oIo
,
typename
iIo
>
Iio
&
operator
<<
(
Iio
&
oOo
,
const
O0o
<
oIo
,
iIo
>
&
II
)
{
return
lio
(
oOo
,
oo
(
II
)
)
;
}
#else
#define \
ioo( \
... \
)
#endif
template
<
typename
l1
>
void
o0o
(
l1
&
o
)
{
i0o
>>
o
;
}
void
o0o
(
int
&
o
)
{
I0o
(
"\045d"
,
&
o
)
;
}
void
o0o
(
long
long
&
o
)
{
I0o
(
"%"
l0o
,
&
o
)
;
}
void
o0o
(
double
&
o
)
{
I0o
(
"%\154f"
,
&
o
)
;
}
void
o0o
(
char
&
o
)
{
I0o
(
" %c"
,
&
o
)
;
}
void
o0o
(
char
*
o
)
{
I0o
(
"\045\163"
,
o
)
;
}
void
O1o
(
)
{
}
template
<
typename
l1
,
typename
...
o1o
>
void
O1o
(
l1
&
iOo
,
o1o
&
...
ooo
)
{
o0o
(
iOo
)
;
O1o
(
ooo
...
)
;
}
template
<
typename
l1
>
void
i1o
(
const
l1
&
o
)
{
I1o
<<
o
;
}
void
i1o
(
const
int
&
o
)
{
l1o
(
"\045\144"
,
o
)
;
}
void
i1o
(
const
long
long
&
o
)
{
l1o
(
"\045"
l0o
,
o
)
;
}
template
<
typename
l1
>
void
i1o
(
const
o1
<
l1
>
&
o
)
{
for
(
auto
Oi
=
o
.
OOi
(
)
;
Oi
!=
o
.
oOi
(
)
;
Oi
++
)
{
if
(
Oi
!=
o
.
OOi
(
)
)
iOi
(
'\040'
)
;
i1o
(
*
Oi
)
;
}
}
void
IOi
(
)
{
}
template
<
typename
l1
,
typename
...
o1o
>
void
IOi
(
const
l1
&
iOo
,
const
o1o
&
...
ooo
)
{
i1o
(
iOo
)
;
iOi
(
sizeof
...
(
ooo
)
?
'\040'
:
'\012'
)
;
IOi
(
ooo
...
)
;
}
#ifdef \
I1
#define \
lOi( \
... \
)
#else
#define \
lOi( \
Ooi \
) \
do \
{ \
ooi \
( \
Ooi \
"\056\151\156" \
, \
"r" \
, \
ioi \
) \
; \
ooi \
( \
Ooi \
".\157ut" \
, \
"w" \
, \
Ioi \
) \
; \
} \
while \
( \
0 \
)
#endif
void
loi
(
I0
&
Ii
,
I0
OI
,
I0
II
)
{
if
(
OI
==
-
01
||
II
==
-
01
)
return
;
if
(
Ii
==
-
01
||
OI
+
II
<
Ii
)
Ii
=
OI
+
II
;
}
const
int
ilo
=
0156
;
int
oi
,
Oii
;
I0
OIo
[
ilo
]
,
oii
[
ilo
]
[
ilo
]
;
double
oOo
[
ilo
]
;
void
iii
(
)
{
O1o
(
oi
,
Oii
)
;
ii
(
Oi
,
01
,
oi
)
O1o
(
OIo
[
Oi
]
,
oOo
[
Oi
]
)
;
ii
(
Oi
,
01
,
oi
)
ii
(
Iii
,
01
,
oi
)
O1o
(
oii
[
Oi
]
[
Iii
]
)
;
}
double
lii
[
ilo
]
;
bool
OIi
[
ilo
]
;
const
double
oIi
=
01.E0100
;
void
iIi
(
int
IIi
)
{
ii
(
Oi
,
01
,
oi
)
lii
[
Oi
]
=
oIi
;
ii
(
Oi
,
01
,
oi
)
OIi
[
Oi
]
=
0
;
lii
[
IIi
]
=
0
;
while
(
01
)
{
int
lIi
=
-
01
;
ii
(
Oi
,
01
,
oi
)
if
(
!
OIi
[
Oi
]
&&
(
lIi
==
-
01
||
lii
[
Oi
]
<
lii
[
lIi
]
)
)
lIi
=
Oi
;
if
(
lIi
==
-
01
)
break
;
OIi
[
lIi
]
=
01
;
ii
(
Oi
,
01
,
oi
)
if
(
!
OIi
[
Oi
]
&&
oii
[
lIi
]
[
Oi
]
!=
-
01
&&
oii
[
lIi
]
[
Oi
]
<=
OIo
[
lIi
]
)
lii
[
Oi
]
=
Oli
(
lii
[
Oi
]
,
lii
[
lIi
]
+
oii
[
lIi
]
[
Oi
]
/
oOo
[
lIi
]
)
;
}
}
void
oli
(
)
{
ii
(
ili
,
01
,
oi
)
ii
(
Oi
,
01
,
oi
)
ii
(
Iii
,
01
,
oi
)
loi
(
oii
[
Oi
]
[
Iii
]
,
oii
[
Oi
]
[
ili
]
,
oii
[
ili
]
[
Iii
]
)
;
o1
<
double
>
Ili
;
lo
(
Oi
,
Oii
)
{
int
Ii
,
OI
;
O1o
(
Ii
,
OI
)
;
iIi
(
Ii
)
;
O0i
(
lii
[
OI
]
!=
oIi
)
;
Ili
.
O0
(
lii
[
OI
]
)
;
}
lo
(
Oi
,
Oii
)
l1o
(
"\045\05614f\045\143"
,
Ili
[
Oi
]
,
Oi
+
01
==
Oii
?
'\012'
:
'\040'
)
;
}
int
o0i
(
int
i0i
,
char
*
I0i
[
]
)
{
int
l0i
;
O1o
(
l0i
)
;
ii
(
Oi
,
01
,
l0i
)
{
iii
(
)
;
if
(
i0i
==
02
&&
O1i
(
I0i
[
01
]
)
!=
Oi
)
continue
;
l1o
(
"\103\141\163\145\040\043\045d:\040"
,
Oi
)
;
oli
(
)
;
}
return
0
;
}
