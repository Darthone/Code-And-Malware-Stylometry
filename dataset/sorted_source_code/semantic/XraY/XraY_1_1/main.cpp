#ifdef \
O
#define \
o \
 
#endif
#include \
<bits/stdc++.h>
using
namespace
Oo
;
oo
io
(
Io
{
}
(
)
)
;
int
lo
(
int
Oi
)
{
return
io
(
)
%
Oi
;
}
typedef
long
double
oi
;
typedef
long
long
ii
;
#ifdef \
O
#define \
Ii( \
... \
) \
OI \
( \
oI \
, \
iI \
) \
, \
II \
( \
oI \
)
#else
#define \
Ii( \
... \
) \
;
#endif
#define \
Ol \
  \
ol
#define \
O0 \
  \
o0
#define \
i0( \
Oi \
) \
( \
( \
int \
) \
( \
Oi \
) \
. \
I0 \
( \
) \
)
#define \
l0 \
  \
"text"
const
int
O1
=
(
int
)
010100000000000.E-04
;
const
oi
o1
=
010.E-010
;
const
oi
i1
=
I1
(
(
oi
)
-
.00001E05
)
;
const
int
l1
=
(
int
)
0100000000000000.E-05
+
07
;
void
OOo
(
int
&
Oi
,
int
oOo
)
{
if
(
(
Oi
+=
oOo
)
>=
l1
)
{
Oi
-=
l1
;
}
}
int
iOo
(
int
Oi
,
int
oOo
)
{
return
(
long
long
)
Oi
*
oOo
%
l1
;
}
int
IOo
(
int
Oi
,
int
lOo
)
{
int
Ooo
=
01
;
for
(
;
lOo
;
lOo
>>=
01
)
{
if
(
lOo
&
01
)
{
Ooo
=
iOo
(
Ooo
,
Oi
)
;
}
Oi
=
iOo
(
Oi
,
Oi
)
;
}
return
Ooo
;
}
void
ooo
(
)
{
}
int
ioo
;
int
Ioo
[
06
]
;
int
loo
(
)
{
if
(
Oio
(
"\045\144"
,
&
ioo
)
<
01
)
{
return
0
;
}
for
(
int
oio
=
0
;
oio
<
06
;
++
oio
)
{
iio
(
Oio
(
"%d"
,
Ioo
+
oio
)
==
01
)
;
}
return
01
;
}
char
Iio
[
]
=
"R\117\131\107B\126"
;
void
lio
(
)
{
int
OIo
[
03
]
=
{
Ioo
[
0
]
-
Ioo
[
03
]
,
Ioo
[
02
]
-
Ioo
[
05
]
,
Ioo
[
04
]
-
Ioo
[
01
]
}
;
for
(
int
oio
=
0
;
oio
<
03
;
++
oio
)
{
if
(
OIo
[
oio
]
<
0
)
{
oIo
(
"I\115\120\117S\123I\102\114E\n"
)
;
return
;
}
}
int
iIo
=
OIo
[
0
]
+
OIo
[
01
]
+
OIo
[
02
]
;
for
(
int
oio
=
0
;
oio
<
03
;
++
oio
)
{
Ii
(
"%\144\040\045d\n"
,
OIo
[
oio
]
,
Ioo
[
oio
*
02
]
)
;
if
(
OIo
[
oio
]
==
0
&&
Ioo
[
oio
*
02
]
>
0
)
{
if
(
Ioo
[
(
oio
*
02
+
02
)
%
06
]
||
Ioo
[
(
oio
*
02
+
04
)
%
06
]
)
{
oIo
(
"I\115PO\123\123IBLE\n"
)
;
return
;
}
IIo
lIo
=
""
;
for
(
int
Olo
=
0
;
Olo
<
Ioo
[
oio
*
02
]
;
++
Olo
)
{
lIo
+=
Iio
[
oio
*
02
]
;
lIo
+=
Iio
[
(
oio
*
02
+
03
)
%
06
]
;
}
oIo
(
"\045\163\012"
,
lIo
.
olo
(
)
)
;
return
;
}
}
int
ilo
=
Ilo
(
OIo
,
OIo
+
03
)
-
OIo
;
if
(
OIo
[
ilo
]
*
02
>
iIo
)
{
oIo
(
"\111M\120\117SSIB\114\105\012"
)
;
return
;
}
IIo
lIo
=
""
;
int
llo
=
-
01
;
for
(
;
iIo
>
0
;
--
iIo
)
{
int
O0o
=
-
01
;
for
(
int
oio
=
0
;
oio
<
03
;
++
oio
)
{
if
(
oio
==
llo
)
{
continue
;
}
if
(
O0o
==
-
01
||
OIo
[
O0o
]
<
OIo
[
oio
]
)
{
O0o
=
oio
;
continue
;
}
if
(
OIo
[
O0o
]
==
OIo
[
oio
]
&&
oio
==
ilo
)
{
O0o
=
oio
;
}
}
iio
(
OIo
[
O0o
]
>
0
)
;
OIo
[
O0o
]
-=
01
;
lIo
+=
Iio
[
O0o
*
02
]
;
auto
&
o0o
=
Ioo
[
(
O0o
*
02
+
03
)
%
06
]
;
while
(
o0o
)
{
--
o0o
;
lIo
+=
Iio
[
(
O0o
*
02
+
03
)
%
06
]
;
lIo
+=
Iio
[
O0o
*
02
]
;
}
llo
=
O0o
;
}
iio
(
!
OIo
[
0
]
&&
!
OIo
[
01
]
&&
!
OIo
[
02
]
)
;
for
(
int
oio
=
01
;
oio
<
06
;
oio
+=
02
)
{
iio
(
!
Ioo
[
oio
]
)
;
}
oIo
(
"%s\012"
,
lIo
.
olo
(
)
)
;
iio
(
lIo
[
0
]
!=
lIo
.
i0o
(
)
)
;
}
int
I0o
(
)
{
ooo
(
)
;
#ifdef \
l0o
O1o
(
l0
"\056o\165t"
,
"\167"
,
o1o
)
;
iio
(
O1o
(
l0
".in"
,
"r"
,
i1o
)
)
;
#endif
int
I1o
;
Oio
(
"\045d"
,
&
I1o
)
;
I1o
=
0
;
while
(
01
)
{
if
(
!
loo
(
)
)
{
break
;
}
oIo
(
"\103\141\163e\040\043\045d:\040"
,
++
I1o
)
;
lio
(
)
;
#ifdef \
O
Ii
(
"Time\040%\056\062\146\012"
,
(
double
)
l1o
(
)
/
OOi
)
;
#endif
}
return
0
;
}
