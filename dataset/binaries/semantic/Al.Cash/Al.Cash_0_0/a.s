xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60e1bf
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x401870
mov eax, 0
test rax, rax
je 0x401870
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x4018b8
mov eax, 0
test rax, rax
je 0x4018b8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x20c9c1], 0
jne 0x4018da
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x20c9ae], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x4018f0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x4018eb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
mov rax, qword [rip + 0x72b7]
test rax, rax
setne al
movzx eax, al
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.imp.pthread_equal
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
call sym.__gthread_active_p
test eax, eax
setne al
test al, al
je 0x401969
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.imp.pthread_mutex_lock
jmp 0x40196e
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
call sym.__gthread_active_p
test eax, eax
setne al
test al, al
je 0x401998
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.imp.pthread_mutex_unlock
jmp 0x40199d
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lock xadd dword [rax], edx
mov eax, edx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov rax, qword [rbp - 0x18]
mov eax, dword [rax]
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov edx, dword [rax]
mov eax, dword [rbp - 0x1c]
add edx, eax
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
mov eax, dword [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
call sym.__gthread_active_p
test eax, eax
setne al
test al, al
je 0x401a13
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, edx
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add
jmp 0x401a24
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, edx
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add_single
leave
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov eax, dword [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
cmp dword [rbp - 4], 1
jbe 0x401a58
cmp dword [rbp - 4], 0x24
jbe 0x401a71
mov ecx, str.Detail::Base_setBase_uint_
mov edx, 0x5f
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_0_0_source.cpp
mov edi, str.2____value____value____36
call sym.imp.__assert_fail
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
cmp dword [rbp - 4], 0x7f
jbe 0x401aa0
mov ecx, str.Detail::Precision_setPrecision_uint_
mov edx, 0x60
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_0_0_source.cpp
mov edi, str.value___MAX_LENGTH
call sym.imp.__assert_fail
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edi, obj.inputMutex
call sym.std::mutex::lock
mov edx, dword [rip + 0x20c80b]
mov eax, dword [rip + 0x20c809]
cmp edx, eax
jl 0x401b0a
mov edi, obj.inputMutex
call sym.std::mutex::unlock
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x401c07
jmp 0x401c02
mov eax, dword [rip + 0x20c7d8]
lea edx, [rax + 1]
mov dword [rip + 0x20c7cf], edx
mov dword [rbp - 0x24], eax
mov eax, dword [rbp - 0x24]
add eax, 1
mov dword [rbp - 0x20], eax
lea rax, [rbp - 0x20]
mov edx, 0x408a8f
mov rsi, rax
mov edi, 0x408a98
call sym.writeln_charconst____6__int_charconst____9__
mov edi, 0x22e8
call sym.operatornew
mov rbx, rax
mov rdi, rbx
call sym.TestCase::TestCase
lea rax, [rbp - 0x20]
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::unique_ptr
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::input
mov edi, obj.inputMutex
call sym.std::mutex::unlock
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solve
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rbx, [rax + 0x22c0]
mov eax, dword [rbp - 0x24]
cdqe
mov rsi, rax
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
jmp 0x401acd
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov dword [rbp - 0x14], edi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov eax, dword [rbp - 0x14]
add eax, 1
mov dword [rbp - 0xc], eax
mov edi, obj.output
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0xc]
mov r9d, 0x408a9e
mov r8, rdx
mov ecx, 0x408aa0
mov rdx, rax
mov esi, str.Case__
call sym.OutputDevice::write_charconst____7__int_charconst____3__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edi, obj.output
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401c8e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x54], 0
cmp dword [rbp - 0x54], 0x63
jg 0x401de7
mov edi, 0x22e8
call sym.operatornew
mov rbx, rax
mov rdi, rbx
call sym.TestCase::TestCase
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::unique_ptr
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rcx, rax
mov eax, dword [rbp - 0x54]
mov edx, eax
mov esi, 0
mov rdi, rcx
call sym.TestCase::generate
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solve
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rdx, [rax + 0x22c0]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solveSlow
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rdx, [rax + 0x22c0]
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
test al, al
je 0x401dc6
mov eax, dword [rbp - 0x54]
add eax, 1
mov dword [rbp - 0x58], eax
lea rax, [rbp - 0x58]
mov rsi, rax
mov edi, str.Error_on_test__
call sym.writeln_charconst____16__int_
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
add rax, 0x22c0
mov rsi, rax
mov edi, str.Expected:_n
call sym.writeln_charconst____11__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
lea rax, [rbp - 0x40]
mov rsi, rax
mov edi, str.Received:_n
call sym.writeln_charconst____11__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
add dword [rbp - 0x54], 1
jmp 0x401cb1
call sym.imp.clock
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rip + 0x6e2b]
divsd xmm0, xmm1
movsd qword [rbp - 0x50], xmm0
lea rax, [rbp - 0x50]
mov rsi, rax
mov edi, str._n_nTest_time:
call sym.writeln_charconst____14__double_
mov edi, 0
call sym.imp.exit
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401e4b
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x24], 0
cmp dword [rbp - 0x24], 0x63
jg 0x401f1b
mov edi, 0x22e8
call sym.operatornew
mov rbx, rax
mov rdi, rbx
call sym.TestCase::TestCase
lea rax, [rbp - 0x20]
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::unique_ptr
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rcx, rax
mov eax, dword [rbp - 0x24]
mov edx, eax
mov esi, 1
mov rdi, rcx
call sym.TestCase::generate
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solve
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rdx, [rax + 0x22c0]
mov eax, dword [rbp - 0x24]
mov rsi, rdx
mov edi, eax
call sym.writeAnswer
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
add dword [rbp - 0x24], 1
jmp 0x401e83
call sym.imp.clock
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rip + 0x6cf7]
divsd xmm0, xmm1
movsd qword [rbp - 0x20], xmm0
lea rax, [rbp - 0x20]
mov rsi, rax
mov edi, str._n_nTest_time:
call sym.writeln_charconst____14__double_
mov edi, 0
call sym.imp.exit
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edi, 0x1030
call sym.operatornew
mov rbx, rax
mov esi, str.A_small_attempt0.in
mov rdi, rbx
call 0x40284e
mov rsi, rbx
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::reset
mov edi, 0x10e8
call sym.operatornew
mov rbx, rax
mov esi, str.output.txt
mov rdi, rbx
call 0x403158
mov rsi, rbx
mov edi, obj.output
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::reset
mov edi, 0x10e8
call sym.operatornew
mov rbx, rax
mov rax, qword [rip + 0x20c27f]
mov edx, 0
mov rsi, rax
mov rdi, rbx
call sym.OutputFile::OutputFile
mov rsi, rbx
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::reset
mov edi, 4
call sym.setPrecision
mov ebx, eax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov esi, ebx
mov rdi, rax
call 0x402fe8
mov dword [rip + 0x20c2a0], 0
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::operator__
mov esi, obj.testCount
mov rdi, rax
call sym.InputDevice::read_int_
mov eax, dword [rip + 0x20c287]
cdqe
mov rsi, rax
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::resize
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::vector
mov dword [rbp - 0x68], 0
call sym.std::thread::hardware_concurrency
mov edx, eax
mov eax, dword [rbp - 0x68]
cmp edx, eax
seta al
test al, al
je 0x4020b1
lea rax, [rbp - 0x30]
mov esi, sym.work
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::emplace_back_void______
add dword [rbp - 0x68], 1
jmp 0x402087
lea rax, [rbp - 0x30]
mov qword [rbp - 0x40], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::begin
mov qword [rbp - 0x60], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::end
mov qword [rbp - 0x50], rax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::thread__std::vector_std::thread_std::allocator_std::thread___
test al, al
je 0x40211a
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::operator_
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::thread::join
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::operator__
jmp 0x4020d9
mov dword [rbp - 0x64], 0
mov eax, dword [rip + 0x20c1c5]
cmp dword [rbp - 0x64], eax
jge 0x402154
mov eax, dword [rbp - 0x64]
cdqe
mov rsi, rax
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rdx, rax
mov eax, dword [rbp - 0x64]
mov rsi, rdx
mov edi, eax
call sym.writeAnswer
add dword [rbp - 0x64], 1
jmp 0x402121
call sym.imp.clock
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rip + 0x6abe]
divsd xmm0, xmm1
movsd qword [rbp - 0x50], xmm0
lea rax, [rbp - 0x50]
mov rsi, rax
mov edi, str._n_nTotal_time:
call sym.writeln_charconst____15__double_
mov ebx, 0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_vector
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x402209
jmp 0x402204
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x60
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x4022ab
cmp dword [rbp - 8], 0xffff
jne 0x4022ab
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
mov edx, obj.__dso_handle
mov esi, obj.input
mov edi, sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::_unique_ptr
call sym.imp.__cxa_atexit
mov edx, obj.__dso_handle
mov esi, obj.output
mov edi, sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::_unique_ptr
call sym.imp.__cxa_atexit
mov edx, obj.__dso_handle
mov esi, obj.logs
mov edi, sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::_unique_ptr
call sym.imp.__cxa_atexit
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::vector
mov edx, obj.__dso_handle
mov esi, obj.answer_abi:cxx11_
mov edi, sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x18], 0
jne 0x4022e5
mov eax, 0
jmp 0x4022fc
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.imp.memcmp
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax + 8]
cmp rdx, rax
je 0x402373
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
movzx eax, byte [rax]
cmp al, 0x2a
je 0x40237a
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rsi, rdx
mov rdi, rax
call sym.imp.strcmp
test eax, eax
jne 0x40237a
mov eax, 1
jmp 0x40237f
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd xmm1, qword [rbp - 8]
movsd xmm0, qword [rip + 0x6879]
andpd xmm0, xmm1
ucomisd xmm0, qword [rip + 0x687d]
setbe al
xor eax, 1
pop rbp
ret
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd xmm0, qword [rbp - 8]
ucomisd xmm0, qword [rbp - 8]
setp al
pop rbp
ret
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd xmm0, qword [rbp - 8]
movmskpd eax, xmm0
and eax, 1
test eax, eax
setne al
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gthread_equal
test eax, eax
setne al
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::id::id
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::thread::swap
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::joinable
test al, al
je 0x402473
call sym.std::terminate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::thread::id_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::thread::id::id
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, qword [rax]
call sym.std::operator__
xor eax, 1
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4024ed
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::___shared_count
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_base____gnu_cxx::_Lock_policy_2_::___shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x408d68
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::_shared_ptr
mov eax, 0
test eax, eax
je 0x402569
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_Impl_base::__Impl_base
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gthread_mutex_lock
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0
je 0x4025bd
mov eax, dword [rbp - 4]
mov edi, eax
call sym.std::__throw_system_error
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gthread_mutex_unlock
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov edx, 0x408d50
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
mov edi, 0xa
call sym.setBase
mov edx, eax
mov rax, qword [rbp - 8]
mov dword [rax + 0x18], edx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
setae al
movzx eax, al
test rax, rax
je 0x402667
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 8]
mov qword [rdx + 8], rcx
movzx eax, byte [rax]
leave
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 9
cmp al, 4
jbe 0x40269a
cmp byte [rbp - 4], 0x20
jne 0x4026a1
mov eax, 1
jmp 0x4026a6
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 0x30
cmp al, 9
setbe al
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 0x41
cmp al, 0x19
setbe al
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 0x61
cmp al, 0x19
setbe al
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov esi, sym.InputDevice::isSpace
mov rdi, rax
call sym.InputDevice::skipCharacters_bool____char__
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x2a]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x18]
mov byte [rax + 0x2a], 0
mov rax, qword [rbp - 0x18]
movzx eax, byte [rax + 0x28]
xor eax, 1
movzx eax, al
test rax, rax
je 0x40277e
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x20]
mov rdx, qword [rbp - 0x18]
lea rdi, [rdx + 0x2a]
mov rcx, rax
mov edx, 0x1000
mov esi, 1
call sym.imp.fread
lea rdx, [rbx + rax]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
jmp 0x4027dd
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x20]
mov rdx, qword [rbp - 0x18]
lea rcx, [rdx + 0x2a]
mov rdx, rax
mov esi, 0x1000
mov rdi, rcx
call sym.imp.fgets
test rax, rax
setne al
test al, al
je 0x4027dd
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x10]
movzx eax, byte [rax]
test al, al
je 0x4027dd
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x10]
lea rdx, [rax + 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
jmp 0x4027b8
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov eax, ecx
mov byte [rbp - 0x14], dl
mov byte [rbp - 0x18], al
mov rax, qword [rbp - 8]
lea rdx, [rax + 0x2a]
mov rax, qword [rbp - 8]
lea rcx, [rax + 0x2a]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::InputDevice
mov edx, 0x408d38
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 0x20], rdx
mov rax, qword [rbp - 8]
movzx edx, byte [rbp - 0x14]
mov byte [rax + 0x28], dl
mov rax, qword [rbp - 8]
movzx edx, byte [rbp - 0x18]
mov byte [rax + 0x29], dl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, str.r_w__________________
mov rdi, rax
call sym.imp.fopen
mov rsi, rax
mov rax, qword [rbp - 8]
mov ecx, 1
mov edx, 0
mov rdi, rax
call sym.InputFile::InputFile
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x408d38
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
movzx eax, byte [rax + 0x29]
test al, al
je 0x4028c0
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x20]
mov rdi, rax
call sym.imp.fclose
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edx, 0x408d10
mov rax, qword [rbp - 0x28]
mov qword [rax], rdx
mov rax, qword [rbp - 0x28]
lea rdx, [rax + 8]
mov rax, qword [rbp - 0x28]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x28]
add rax, 8
lea rdx, [rax + 0x1080]
mov rax, qword [rbp - 0x28]
mov qword [rax + 0x1090], rdx
mov rax, qword [rbp - 0x28]
mov byte [rax + 0x1098], 0
mov edi, 0
call sym.setWidth
mov edx, eax
mov rax, qword [rbp - 0x28]
mov dword [rax + 0x109c], edx
mov edi, 0x20
call sym.setFill
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax + 0x10a0], dl
mov edi, 0xa
call sym.setBase
mov edx, eax
mov rax, qword [rbp - 0x28]
mov dword [rax + 0x10a4], edx
mov edi, 9
call sym.setPrecision
mov edx, eax
mov rax, qword [rbp - 0x28]
mov dword [rax + 0x10a8], edx
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::allocator
mov edi, 0x408a8b
call sym.setDelimiter
mov rsi, rax
mov rax, qword [rbp - 0x28]
lea rcx, [rax + 0x10b8]
lea rax, [rbp - 0x19]
mov rdx, rax
mov rdi, rcx
call 0x4016b0
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.OutputDevice::computeBasePower
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4029f8
jmp 0x4029f3
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x1088]
mov rdx, qword [rbp - 8]
add rdx, 8
add rdx, 0x1000
cmp rax, rdx
setae al
movzx eax, al
test rax, rax
je 0x402a87
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov esi, 0x1000
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x1088]
mov rcx, qword [rbp - 8]
add rcx, 8
add rcx, 0x1000
mov rsi, rax
mov rdi, rcx
call sym.std::copy_char__char__
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x1088], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10b0], 1
mov dword [rbp - 4], 0
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a8]
cmp eax, dword [rbp - 4]
jbe 0x402ae3
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x10b0]
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
mov eax, eax
imul rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10b0], rdx
add dword [rbp - 4], 1
jmp 0x402aa8
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
movzx eax, byte [rax + 0x1098]
test al, al
je 0x402b13
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::writeDelimiter
jmp 0x402b18
mov eax, 0
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov byte [rax + 0x1098], 1
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1090]
mov rdx, rax
mov rax, qword [rbp - 0x20]
sub rdx, rax
mov rax, rdx
mov dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
cmp eax, dword [rbp - 8]
seta al
movzx eax, al
test rax, rax
je 0x402b79
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
sub eax, dword [rbp - 8]
mov edx, eax
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::writeFill
add dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x1088]
mov rax, qword [rbp - 0x18]
mov rcx, qword [rax + 0x1090]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_char__char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov edx, dword [rbp - 8]
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov eax, dword [rbp - 0x1c]
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov edx, dword [rbp - 0x1c]
sub rdx, -0x80
add rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1090]
cmp rdx, rax
setb al
movzx eax, al
test rax, rax
je 0x402c6d
cmp dword [rbp - 0x1c], 1
jne 0x402c37
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 0x18]
mov qword [rdx + 0x1088], rcx
mov rdx, qword [rbp - 0x18]
movzx edx, byte [rdx + 0x10a0]
mov byte [rax], dl
jmp 0x402cf8
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x10a0]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov ecx, dword [rbp - 0x1c]
mov esi, ecx
mov rdi, rax
call sym.std::fill_n_char__unsignedint_char_
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
jmp 0x402cf8
mov rax, qword [rbp - 0x18]
add rax, 8
add rax, 0x1000
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
sub rdx, rax
mov rax, rdx
mov dword [rbp - 8], eax
mov eax, dword [rbp - 8]
cmp eax, dword [rbp - 0x1c]
jbe 0x402ca0
mov eax, dword [rbp - 0x1c]
mov dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x10a0]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov ecx, dword [rbp - 8]
mov esi, ecx
mov rdi, rax
call sym.std::fill_n_char__unsignedint_char_
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov eax, dword [rbp - 8]
sub dword [rbp - 0x1c], eax
cmp dword [rbp - 0x1c], 0
sete al
test al, al
jne 0x402cf7
mov dword [rbp - 8], 0x1000
jmp 0x402c92
nop
mov eax, dword [rbp - 4]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x408d10
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 0x10b8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov eax, 0
test eax, eax
je 0x402d3d
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::_OutputDevice
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov eax, esi
mov byte [rbp - 0xc], al
mov rax, qword [rbp - 8]
mov byte [rax + 0x1098], 0
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x1088]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 8]
mov qword [rdx + 0x1088], rcx
movzx edx, byte [rbp - 0xc]
mov byte [rax], dl
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov eax, ecx
mov byte [rbp - 0x2c], al
mov rax, qword [rbp - 0x18]
mov byte [rax + 0x1098], 0
mov rax, qword [rbp - 0x28]
mov dword [rbp - 0xc], eax
cmp byte [rbp - 0x2c], 0
je 0x402e17
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
cmp eax, dword [rbp - 0xc]
jbe 0x402e17
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
sub eax, dword [rbp - 0xc]
mov edx, eax
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::writeFill
mov edx, eax
jmp 0x402e1c
mov edx, 0
mov eax, dword [rbp - 0xc]
add eax, edx
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov edx, dword [rbp - 0xc]
sub rdx, -0x80
add rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1090]
cmp rdx, rax
setb al
movzx eax, al
test rax, rax
je 0x402eaf
cmp dword [rbp - 0xc], 1
jne 0x402e80
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 0x18]
mov qword [rdx + 0x1088], rcx
mov rdx, qword [rbp - 0x20]
movzx edx, byte [rdx]
mov byte [rax], dl
jmp 0x402f3a
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x1088]
mov ecx, dword [rbp - 0xc]
mov rax, qword [rbp - 0x20]
mov esi, ecx
mov rdi, rax
call sym.std::copy_n_charconst__unsignedint_char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
jmp 0x402f3a
mov rax, qword [rbp - 0x18]
add rax, 8
add rax, 0x1000
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
sub rdx, rax
mov rax, rdx
mov dword [rbp - 8], eax
mov eax, dword [rbp - 8]
cmp eax, dword [rbp - 0xc]
jbe 0x402ee2
mov eax, dword [rbp - 0xc]
mov dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x1088]
mov ecx, dword [rbp - 8]
mov rax, qword [rbp - 0x20]
mov esi, ecx
mov rdi, rax
call sym.std::copy_n_charconst__unsignedint_char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov eax, dword [rbp - 8]
sub dword [rbp - 0xc], eax
cmp dword [rbp - 0xc], 0
sete al
test al, al
jne 0x402f39
mov eax, dword [rbp - 8]
add qword [rbp - 0x20], rax
mov dword [rbp - 8], 0x1000
jmp 0x402ed4
nop
mov eax, dword [rbp - 4]
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
add rax, 0x10b8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x10b8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rsi, rax
mov rax, qword [rbp - 0x18]
mov ecx, 0
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::writeString
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdx, qword [rdx + 0x1088]
mov rcx, rdx
mov rdx, qword [rbp - 8]
add rdx, 8
sub rcx, rdx
mov rdx, rcx
mov ecx, edx
mov rdx, qword [rbp - 8]
mov esi, ecx
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 0x1088], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0x10], esi
mov edx, dword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov dword [rax + 0x10a8], edx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::computeBasePower
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov eax, esi
mov byte [rbp - 0xc], al
movsx edx, byte [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::writeChar
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.imp.strlen
mov rdx, rax
mov rsi, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov ecx, 1
mov rdi, rax
call sym.OutputDevice::writeString
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rsi, rax
mov rax, qword [rbp - 0x18]
mov ecx, 1
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::writeString
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 0x10d8]
mov eax, dword [rbp - 0xc]
mov rcx, qword [rbp - 8]
lea rdi, [rcx + 8]
mov rcx, rdx
mov rdx, rax
mov esi, 1
call sym.imp.fwrite
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10d8]
mov rdi, rax
call sym.imp.fflush
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov eax, edx
mov byte [rbp - 0x14], al
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::OutputDevice
mov edx, 0x408ce8
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 0x10d8], rdx
mov rax, qword [rbp - 8]
movzx edx, byte [rbp - 0x14]
mov byte [rax + 0x10e0], dl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, 0x408a8d
mov rdi, rax
call sym.imp.fopen
mov rcx, rax
mov rax, qword [rbp - 8]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call sym.OutputFile::OutputFile
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x408ce8
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::flush
mov rax, qword [rbp - 8]
movzx eax, byte [rax + 0x10e0]
test al, al
je 0x4031da
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10d8]
mov rdi, rax
call sym.imp.fclose
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::_OutputDevice
mov eax, 0
test eax, eax
je 0x4031fb
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputFile::_OutputFile
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lea rcx, [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10d8]
mov rsi, rcx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::OutputDevice
mov edx, 0x408cc0
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 0x10d8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x408cc0
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::flush
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::_OutputDevice
mov eax, 0
test eax, eax
je 0x4032d7
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputString::_OutputString
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 4]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.read_int__int__
mov dword [rbp - 8], 0
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 4]
mov dword [rbp - 4], eax
mov eax, dword [rbp - 8]
cmp eax, dword [rbp - 4]
jge 0x403383
mov eax, dword [rbp - 8]
cdqe
add rax, 0x458
lea rdx, [rax*4]
mov rax, qword [rbp - 0x18]
add rax, rdx
lea rdx, [rax + 4]
mov eax, dword [rbp - 8]
cdqe
lea rcx, [rax*4]
mov rax, qword [rbp - 0x18]
add rax, rcx
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.read_int__int__
add dword [rbp - 8], 1
jmp 0x403334
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x50
mov qword [rbp - 0x48], rdi
mov eax, esi
mov dword [rbp - 0x50], edx
mov byte [rbp - 0x4c], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul_::linear_congruential_engine_int_void_
lea rax, [rbp - 0x40]
mov edx, 9
mov esi, 0
mov rdi, rax
call sym.std::uniform_int_distribution_int_::uniform_int_distribution
lea rax, [rbp - 0x20]
lea rdx, [rbp - 0x30]
lea rcx, [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::bind_std::uniform_int_distribution_int__std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4033fe
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x22e0
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
pxor xmm0, xmm0
movsd qword [rbp - 0x18], xmm0
mov dword [rbp - 0x20], 0
mov rax, qword [rbp - 0x28]
mov eax, dword [rax + 4]
mov dword [rbp - 0x1c], eax
mov eax, dword [rbp - 0x20]
cmp eax, dword [rbp - 0x1c]
jge 0x4034c6
mov rax, qword [rbp - 0x28]
mov ecx, dword [rax]
mov rax, qword [rbp - 0x28]
mov edx, dword [rbp - 0x20]
movsxd rdx, edx
mov eax, dword [rax + rdx*4 + 8]
sub ecx, eax
mov eax, ecx
pxor xmm0, xmm0
cvtsi2sd xmm0, eax
mov rax, qword [rbp - 0x28]
mov edx, dword [rbp - 0x20]
movsxd rdx, edx
add rdx, 0x458
mov eax, dword [rax + rdx*4 + 4]
pxor xmm1, xmm1
cvtsi2sd xmm1, eax
divsd xmm0, xmm1
movsd qword [rbp - 0x10], xmm0
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.smax_double_
add dword [rbp - 0x20], 1
jmp 0x40345f
mov rax, qword [rbp - 0x28]
mov eax, dword [rax]
pxor xmm0, xmm0
cvtsi2sd xmm0, eax
movsd xmm1, qword [rbp - 0x18]
divsd xmm0, xmm1
movsd qword [rbp - 0x10], xmm0
lea rdx, [rbp - 0x10]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.TestCase::write_double_
mov rax, qword [rbp - 0x28]
add rax, 0x22e0
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x403524
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
add rax, 0x22c0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
mov edi, 0x10e0
call sym.operatornew
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x22c0
mov rsi, rax
mov rdi, rbx
call sym.OutputString::OutputString
mov rax, qword [rbp - 0x18]
add rax, 0x22e0
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::unique_ptr
jmp 0x4035b0
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rbx, r12
jmp 0x403593
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x22c0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x10
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_std::thread::id__
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::thread::id__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rdx]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::thread::id__
mov rdx, rax
mov rax, qword [rbp - 0x20]
mov rdx, qword [rdx]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x403640
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
test rax, rax
je 0x403669
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdi, rax
call sym.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_::_M_release
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 1], al
movsx edx, byte [rbp - 1]
mov rax, qword [rbp - 0x20]
mov edi, edx
call rax
test al, al
je 0x40369d
jmp 0x40367c
movzx eax, byte [rbp - 1]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_char__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false_char__char__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_char__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov eax, dword [rbp - 0xc]
mov esi, eax
mov rdi, rcx
call sym.std::__fill_n_a_unsignedint_char_
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov dword [rbp - 0x2c], esi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x28]
mov rdi, rax
call sym.std::__iterator_category_charconst__
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x38]
mov ecx, dword [rbp - 0x2c]
sub rsp, 8
push rbx
mov esi, ecx
mov rdi, rax
call sym.std::__copy_n_charconst__unsignedint_char__
add rsp, 0x10
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x403785
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_InputFile__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_InputFile__std::default_delete_InputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_InputFile__std::default_delete_InputFile__
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call 0x4037cd
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x40382f
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_InputFile_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_OutputFile__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_OutputFile__std::default_delete_OutputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_OutputFile_std::default_delete_OutputFile____
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call method.std::get_0ul_OutputFile__std.default_delete_OutputFile__
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x4038e5
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_OutputFile_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int__
mov r12, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::operator__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.InputDevice::read_int__int____
test al, al
jne 0x40396c
mov ecx, str.void_read_Ts___...___with_Ts____int___int___
mov edx, 0x240
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_0_0_source.cpp
mov edi, str.input__read_forward_Ts__args_..._
call sym.imp.__assert_fail
nop
add rsp, 0x10
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov dword [rbp - 0x10], edx
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0x10]
mov ecx, dword [rbp - 0xc]
mov esi, ecx
mov rdi, rax
call sym.std::uniform_int_distribution_int_::param_type::param_type
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov eax, dword [rax]
movsxd rdx, eax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul_::seed
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::uniform_int_distribution_int__
mov rdi, rax
call sym.std::_Maybe_wrap_member_pointer_std::uniform_int_distribution_int__::__do_wrap
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::_Bind_std::uniform_int_distribution_int__std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul___::_Bind_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rax, qword [rbp - 0x18]
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Maybe_get_result_type_std::uniform_int_distribution_int__void_::_Maybe_get_result_type
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Weak_result_type_impl_std::uniform_int_distribution_int__::_Weak_result_type_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rdx, qword [rdx]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::get
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 0x10]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
jbe 0x403b0a
mov rax, qword [rbp - 0x10]
movsd xmm0, qword [rax]
mov rax, qword [rbp - 8]
movsd qword [rax], xmm0
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_double_
mov rbx, qword [rax]
mov rax, qword [rbp - 0x18]
add rax, 0x22e0
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::operator__
mov qword [rbp - 0x28], rbx
movsd xmm0, qword [rbp - 0x28]
mov rdi, rax
call sym.OutputDevice::write_double_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_OutputDevice__true_::_Head_base_std::default_delete_OutputDevice__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_OutputDevice___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_OutputDevice__::_Tuple_impl_std::default_delete_OutputDevice__
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_OutputDevice___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_OutputDevice__false_::_Head_base_OutputDevice___
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_OutputDevice___
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_OutputDevice__std::default_delete_OutputDevice__::_Tuple_impl_OutputDevice__std::default_delete_OutputDevice____void_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 9]
lea rcx, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::tuple_OutputDevice__std::default_delete_OutputDevice__::tuple_OutputDevice___std::default_delete_OutputDevice__void_
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x403ced
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_OutputDevice__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_OutputDevice__std::default_delete_OutputDevice__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::__get_helper_0ul_OutputDevice__std.default_delete_OutputDevice__
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::get_0ul_OutputDevice__std::default_delete_OutputDevice__
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x403d93
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_OutputDevice_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov byte [rbp - 0x29], 0xa
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_charconst____9__
mov r13, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_int_
mov r12, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_charconst____6__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x29]
mov r8, rax
mov rcx, r13
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____6__int_charconst____9__char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x403e8d
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_TestCase__true_::_Head_base_std::default_delete_TestCase__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_TestCase___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_TestCase__::_Tuple_impl_std::default_delete_TestCase__
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_TestCase___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_TestCase__false_::_Head_base_TestCase___
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_TestCase___
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_TestCase__std::default_delete_TestCase__::_Tuple_impl_TestCase___std::default_delete_TestCase__void_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 9]
lea rcx, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::tuple_TestCase__std::default_delete_TestCase__::tuple_TestCase___std::default_delete_TestCase__void_
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40401d
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_TestCase__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_TestCase__std::default_delete_TestCase__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_TestCase_std::default_delete_TestCase____
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::get_0ul_TestCase__std::default_delete_TestCase__
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x4040c3
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_TestCase_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::get
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 5
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::get
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov qword [rbp - 0x50], rcx
mov qword [rbp - 0x58], r8
mov qword [rbp - 0x60], r9
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_charconst____7__
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x24], eax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::forward_charconst____2__
mov r13, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov r12, rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::forward_charconst____3__
mov rbx, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_int_
mov rsi, rax
mov rax, qword [rbp - 0x38]
mov r8, r13
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::write_int_charconst____3__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edx, eax
mov eax, dword [rbp - 0x24]
add eax, edx
add rsp, 0x48
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___char_
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____16__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____16__int_char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4042cb
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____11__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____11__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40437a
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_double_
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____14__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____14__double_char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40441b
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call 0x4037cd
mov rdx, rax
lea rax, [rbp - 0x20]
mov rsi, rax
mov rdi, rdx
call sym.std::swap_InputFile__
mov rax, qword [rbp - 0x20]
test rax, rax
je 0x404477
mov rbx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_InputFile_::operator__
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::get_0ul_OutputFile__std.default_delete_OutputFile__
mov rdx, rax
lea rax, [rbp - 0x20]
mov rsi, rax
mov rdi, rdx
call sym.std::swap_OutputFile__
mov rax, qword [rbp - 0x20]
test rax, rax
je 0x4044d3
mov rbx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_OutputFile_::operator__
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::get
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.InputDevice::skipCharacters
movsx edx, al
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readSignedInt_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40457b
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rdx, rax
mov rax, qword [rbp - 0x10]
sub rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_default_append
jmp 0x4045b3
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x10]
seta al
test al, al
je 0x4045b3
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 5
add rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_erase_at_end
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::thread__std::thread_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x404685
mov rax, qword [rbp - 0x10]
mov rdi, rax
call 0x404616
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::construct_std::thread_void_______
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x4046a3
mov rax, qword [rbp - 0x10]
mov rdi, rax
call 0x404616
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_M_emplace_back_aux_void______
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4046ec
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404738
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_double_
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____15__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____15__double_char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40483f
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov esi, 0xffffffff
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add_dispatch
cmp eax, 1
sete al
test al, al
je 0x4048c0
mov rax, qword [rbp - 8]
mov rax, qword [rax]
add rax, 0x10
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
add rax, 0xc
mov esi, 0xffffffff
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add_dispatch
cmp eax, 1
sete al
test al, al
je 0x4048c0
mov rax, qword [rbp - 8]
mov rax, qword [rax]
add rax, 0x18
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_char__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_char__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_char__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_char__char__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_char__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov qword [rbp - 0x18], rdx
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lea rcx, [rdx + rax]
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__fill_a_char_
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov qword [rbp - 0x18], rdx
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lea rcx, [rdx + rax]
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_charconst__char__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_InputFile__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_InputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_InputFile__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_InputFile__std::default_delete_InputFile__
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rbx, qword [rbp - 0x20]
test rbx, rbx
je 0x404a6a
mov rdi, rbx
call sym.InputFile::_InputFile
mov rdi, rbx
call sym.operatordelete
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_OutputFile__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_OutputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_OutputFile__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_OutputFile__std::default_delete_OutputFile__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x404b16
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
add rax, 0x10
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rdi, rdx
call rax
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x404b79
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x404b79
mov eax, 1
jmp 0x404b7e
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov dword [rbp - 0x10], edx
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0xc]
mov dword [rax], edx
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0x10]
mov dword [rax + 4], edx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov edi, 0
call sym.std::__detail::__mod_unsignedlong_2147483647ul_1ul_0ul_
test rax, rax
jne 0x404bdb
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__detail::__mod_unsignedlong_2147483647ul_1ul_0ul_
test rax, rax
jne 0x404bdb
mov eax, 1
jmp 0x404be0
mov eax, 0
test al, al
je 0x404bf1
mov rax, qword [rbp - 8]
mov qword [rax], 1
jmp 0x404c07
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__detail::__mod_unsignedlong_2147483647ul_1ul_0ul_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__false_::_Head_base_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__::_Tuple_impl_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Weak_result_type_std::uniform_int_distribution_int__::_Weak_result_type
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::uniform_int_distribution_int___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rdx, qword [rdx]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__::tuple_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__void_
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_OutputDevice__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_OutputDevice__std::default_delete_OutputDevice__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_OutputDevice__std::default_delete_OutputDevice__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::get_0ul_OutputDevice__std.default_delete_OutputDevice__
mov rax, qword [rax]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
movsd qword [rbp - 0x10], xmm0
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 0x1090]
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov qword [rbp - 0x18], rdx
movsd xmm0, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::writeFloatingPoint_double_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::writeT
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_OutputDevice__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_OutputDevice__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_OutputDevice__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_OutputDevice__std::default_delete_OutputDevice__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x404e44
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
add rax, 0x10
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rdi, rdx
call rax
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____6__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_char_
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_charconst____9__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int_
mov rsi, rax
mov rax, qword [rbp - 0x28]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::write_int_charconst____9__char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x40
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_TestCase__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_TestCase__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_TestCase__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_TestCase__std::default_delete_TestCase__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x22e0
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::_unique_ptr
mov rax, qword [rbp - 8]
add rax, 0x22c0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rbx, qword [rbp - 0x20]
test rbx, rbx
je 0x405042
mov rdi, rbx
call sym.TestCase::_TestCase
mov rdi, rbx
call sym.operatordelete
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_TestCase__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_TestCase__std::default_delete_TestCase__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_TestCase__std::default_delete_TestCase__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::get_0ul_TestCase__std.default_delete_TestCase__
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_OutputFile__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_OutputFile__std::default_delete_OutputFile__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::__get_helper_0ul_OutputFile__std.default_delete_OutputFile__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_0ul_OutputFile__std::default_delete_OutputFile__
mov rax, qword [rax]
leave
ret
nop
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::write_int_
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_charconst____2__
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_charconst____3__
mov rsi, rax
mov rax, qword [rbp - 0x28]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::write_charconst____3__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x40
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
jne 0x405241
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::data
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::data
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::char_traits_char_::compare
test eax, eax
jne 0x405241
mov eax, 1
jmp 0x405246
mov eax, 0
add rsp, 0x10
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____16__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int_
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_int_char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____11__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____14__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_double_
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_double_char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_InputFile___
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_InputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_InputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x405439
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_OutputFile___
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_OutputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_OutputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4054bc
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_InputFile__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_InputFile__std::default_delete_InputFile__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::__get_helper_0ul_InputFile_std.default_delete_InputFile____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_0ul_InputFile__std::default_delete_InputFile__
mov rax, qword [rax]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
cmp byte [rbp - 0x24], 0x2d
sete al
mov byte [rbp - 0xd], al
cmp byte [rbp - 0xd], 0
je 0x40557b
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
movsx edx, byte [rbp - 0x24]
lea rcx, [rbp - 0xc]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readUnsignedInt_unsignedint_
test eax, eax
sete al
test al, al
je 0x4055a2
mov eax, 0
jmp 0x4055c1
cmp byte [rbp - 0xd], 0
je 0x4055b1
mov eax, dword [rbp - 0xc]
neg eax
mov edx, eax
jmp 0x4055b6
mov eax, dword [rbp - 0xc]
mov edx, eax
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
mov eax, 1
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4055d5
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
cmp qword [rbp - 0x40], 0
je 0x4057fc
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
sub rdx, rax
mov rax, rdx
sar rax, 5
cmp rax, qword [rbp - 0x40]
jb 0x405673
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
mov rcx, qword [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
jmp 0x4057fc
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_default_append
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_check_len
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x30]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x28]
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x4057fc
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::thread_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::thread__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call 0x404616
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::construct_std::thread_void_______
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call 0x404616
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::construct_std::thread_void_______
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::thread__std::thread__std::allocator_std::thread__
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::thread__std::thread_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x405b27
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x405ad6
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::destroy_std::thread_
jmp 0x405af8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::thread__std::thread_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____15__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_double_
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_double_char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
cmp qword [rbp - 8], 0
je 0x405bfc
mov rax, qword [rbp - 8]
mov rax, qword [rax]
add rax, 8
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_char_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
movzx eax, byte [rax]
mov byte [rbp - 9], al
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x405c8e
movzx eax, byte [rbp - 9]
movzx ecx, al
mov rdx, qword [rbp - 8]
mov rax, qword [rbp - 0x18]
mov esi, ecx
mov rdi, rax
call sym.imp.memset
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_charconst__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_charconst__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false_charconst__char__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__detail::_Mod_unsignedlong_2147483647ul_1ul_0ul_true_true_::__calc
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x50
mov qword [rbp - 0x38], rdi
movsd qword [rbp - 0x40], xmm0
mov qword [rbp - 0x48], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
movsd xmm0, qword [rbp - 0x50]
call sym.std::signbit
mov byte [rbp - 0x29], al
cmp byte [rbp - 0x29], 0
je 0x405d4d
movsd xmm1, qword [rbp - 0x40]
movsd xmm0, qword [rip + 0x2eec]
xorpd xmm0, xmm1
movsd qword [rbp - 0x40], xmm0
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
movsd xmm0, qword [rbp - 0x50]
call sym.std::isnan
test al, al
je 0x405d93
mov dword [rbp - 0x28], 0
cmp dword [rbp - 0x28], 2
jg 0x405f83
sub qword [rbp - 0x48], 1
mov eax, dword [rbp - 0x28]
cdqe
add rax, 0x408b68
movzx edx, byte [rax]
mov rax, qword [rbp - 0x48]
mov byte [rax], dl
add dword [rbp - 0x28], 1
jmp 0x405d6a
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
movsd xmm0, qword [rbp - 0x50]
call sym.std::isinf
test al, al
je 0x405dd9
mov dword [rbp - 0x24], 0
cmp dword [rbp - 0x24], 2
jg 0x405f83
sub qword [rbp - 0x48], 1
mov eax, dword [rbp - 0x24]
cdqe
add rax, 0x408b6c
movzx edx, byte [rax]
mov rax, qword [rbp - 0x48]
mov byte [rax], dl
add dword [rbp - 0x24], 1
jmp 0x405db0
movsd xmm0, qword [rbp - 0x40]
ucomisd xmm0, qword [rip + 0x2e5a]
jae 0x405df8
movsd xmm0, qword [rbp - 0x40]
cvttsd2si rax, xmm0
mov qword [rbp - 0x20], rax
jmp 0x405e20
movsd xmm0, qword [rbp - 0x40]
movsd xmm1, qword [rip + 0x2e3b]
subsd xmm0, xmm1
cvttsd2si rax, xmm0
mov qword [rbp - 0x20], rax
movabs rax, 0x8000000000000000
xor qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
test rax, rax
js 0x405e3c
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
jmp 0x405e55
mov rdx, rax
shr rdx, 1
and eax, 1
or rdx, rax
pxor xmm0, xmm0
cvtsi2sd xmm0, rdx
addsd xmm0, xmm0
movsd xmm1, qword [rbp - 0x40]
subsd xmm1, xmm0
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10b0]
test rax, rax
js 0x405e79
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
jmp 0x405e92
mov rdx, rax
shr rdx, 1
and eax, 1
or rdx, rax
pxor xmm0, xmm0
cvtsi2sd xmm0, rdx
addsd xmm0, xmm0
mulsd xmm0, xmm1
movsd xmm1, qword [rip + 0x2daa]
addsd xmm0, xmm1
ucomisd xmm0, qword [rip + 0x2d96]
jae 0x405eb7
cvttsd2si rax, xmm0
mov qword [rbp - 0x18], rax
jmp 0x405eda
movsd xmm1, qword [rip + 0x2d81]
subsd xmm0, xmm1
cvttsd2si rax, xmm0
mov qword [rbp - 0x18], rax
movabs rax, 0x8000000000000000
xor qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10b0]
cmp rax, qword [rbp - 0x18]
ja 0x405f00
add qword [rbp - 0x20], 1
mov qword [rbp - 0x18], 0
mov rax, qword [rbp - 0x38]
mov eax, dword [rax + 0x10a8]
mov eax, eax
neg rax
mov rdx, rax
mov rax, qword [rbp - 0x48]
add rax, rdx
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x38]
mov eax, dword [rax + 0x10a8]
test eax, eax
je 0x405f68
mov byte [rbp - 0x2a], 0x30
mov rdx, qword [rbp - 0x48]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedlonglong_
mov rcx, rax
lea rdx, [rbp - 0x2a]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_char__char_
sub qword [rbp - 0x10], 1
mov rax, qword [rbp - 0x10]
mov byte [rax], 0x2e
mov rdx, qword [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedlonglong_
mov qword [rbp - 0x48], rax
cmp byte [rbp - 0x29], 0
je 0x405f95
sub qword [rbp - 0x48], 1
mov rax, qword [rbp - 0x48]
mov byte [rax], 0x2d
mov rax, qword [rbp - 0x48]
mov rsi, qword [rbp - 8]
xor rsi, qword fs:[0x28]
je 0x405fad
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x40603c
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::write_int_
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_charconst____9__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_charconst____9__char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 0x1090]
mov ecx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, ecx
mov rdi, rax
call sym.OutputDevice::writeSignedInt_int_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::writeT
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____3__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_charconst____2__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::write_int_
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x403074
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_double_
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rdx
movsd xmm0, qword [rbp - 0x30]
mov rdi, rax
call sym.OutputDevice::write_double_
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp eax, 0xa
seta al
movzx eax, al
test rax, rax
je 0x4062cf
movsx edx, byte [rbp - 0x24]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readUnsignedIntGeneral_unsignedint_
jmp 0x406340
mov dword [rbp - 8], 0
mov dword [rbp - 4], 0
movzx eax, byte [rbp - 0x24]
sub eax, 0x30
movzx edx, al
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp edx, eax
jae 0x406320
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
imul eax, dword [rbp - 8]
mov edx, eax
movsx eax, byte [rbp - 0x24]
add eax, edx
sub eax, 0x30
mov dword [rbp - 8], eax
add dword [rbp - 4], 1
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
jmp 0x4062dd
mov rax, qword [rbp - 0x20]
mov edx, dword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax - 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x4063d9
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x20]
ja 0x406439
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
cmp rax, qword [rbp - 0x20]
jae 0x406447
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
jmp 0x40644b
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x40645f
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x406492
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::allocate
jmp 0x406497
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::thread_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x4065a4
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::thread__
nop
leave
ret
nop
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov rdi, rax
call 0x404616
mov r13, rax
mov r12, qword [rbp - 0x30]
mov rsi, r12
mov edi, 8
call 0x4022fe
mov rbx, rax
test rbx, rbx
je 0x406635
mov rsi, r13
mov rdi, rbx
call sym.std::thread::thread_void______
jmp 0x406635
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x402310
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x4066a1
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
cmp rax, qword [rbp - 0x20]
ja 0x406701
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x40670f
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::max_size
jmp 0x406713
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x406727
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40675a
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::allocate
jmp 0x40675f
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::thread__std::move_iterator_std::thread___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::thread__std::move_iterator_std::thread___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::thread___std::thread__std::thread_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::destroy_std::thread_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x408d90
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov eax, 0
test eax, eax
je 0x40682f
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_.__Sp_counted_base
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x40689c
mov rdx, qword [rbp - 8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rdx, qword [rbp - 8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_charconst__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_char__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_charconst__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_charconst__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_charconst__char__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
mov rcx, qword [rbp - 8]
movabs rdx, 0x200000005
mov rax, rcx
mul rdx
mov rax, rcx
sub rax, rdx
shr rax, 1
add rax, rdx
shr rax, 0x1e
mov rdx, rax
mov rax, rdx
shl rax, 0x1f
sub rax, rdx
sub rcx, rax
mov rax, rcx
mov qword [rbp - 8], rax
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
cmp qword [rbp - 0x20], 0
sete al
movzx eax, al
test rax, rax
je 0x406998
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
mov byte [rax], 0x30
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
cmp eax, 0xa
sete al
movzx eax, al
test rax, rax
je 0x406a16
cmp qword [rbp - 0x20], 0
je 0x406a7d
sub qword [rbp - 0x28], 1
mov rcx, qword [rbp - 0x20]
movabs rdx, 0xcccccccccccccccd
mov rax, rcx
mul rdx
shr rdx, 3
mov rax, rdx
shl rax, 2
add rax, rdx
add rax, rax
sub rcx, rax
mov rdx, rcx
mov eax, edx
add eax, 0x30
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov rax, qword [rbp - 0x20]
movabs rdx, 0xcccccccccccccccd
mul rdx
mov rax, rdx
shr rax, 3
mov qword [rbp - 0x20], rax
jmp 0x4069b0
cmp qword [rbp - 0x20], 0
je 0x406a7d
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
mov ecx, eax
mov rax, qword [rbp - 0x20]
mov edx, 0
div rcx
mov qword [rbp - 8], rdx
sub qword [rbp - 0x28], 1
cmp qword [rbp - 8], 9
ja 0x406a50
mov rax, qword [rbp - 8]
add eax, 0x30
mov edx, eax
jmp 0x406a59
mov rax, qword [rbp - 8]
add eax, 0x37
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
mov esi, eax
mov rax, qword [rbp - 0x20]
mov edx, 0
div rsi
mov qword [rbp - 0x20], rax
jmp 0x406a16
mov rax, qword [rbp - 0x28]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_char__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__fill_a_char_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_charconst____9__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov qword [rbp - 0x28], rdx
mov eax, dword [rbp - 0x1c]
mov dword [rbp - 4], eax
cmp dword [rbp - 0x1c], 0
jns 0x406bd2
mov eax, dword [rbp - 4]
neg eax
mov ecx, eax
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov esi, ecx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedint_
mov qword [rbp - 0x28], rax
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
mov byte [rax], 0x2d
mov rax, qword [rbp - 0x28]
jmp 0x406be7
mov rdx, qword [rbp - 0x28]
mov ecx, dword [rbp - 4]
mov rax, qword [rbp - 0x18]
mov esi, ecx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedint_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x403074
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____2__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov dword [rbp - 8], 0
mov dword [rbp - 4], 0
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isDigit
test al, al
je 0x406c84
movzx eax, byte [rbp - 0x24]
sub eax, 0x30
mov byte [rbp - 0x24], al
jmp 0x406cc4
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isUpper
test al, al
je 0x406c9f
movzx eax, byte [rbp - 0x24]
sub eax, 0x37
mov byte [rbp - 0x24], al
jmp 0x406cc4
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isLower
test al, al
je 0x406cba
movzx eax, byte [rbp - 0x24]
sub eax, 0x57
mov byte [rbp - 0x24], al
jmp 0x406cc4
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
mov byte [rbp - 0x24], al
movsx edx, byte [rbp - 0x24]
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp edx, eax
jae 0x406d01
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
imul eax, dword [rbp - 8]
mov edx, eax
movsx eax, byte [rbp - 0x24]
add eax, edx
mov dword [rbp - 8], eax
add dword [rbp - 4], 1
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
jmp 0x406c69
nop
mov rax, qword [rbp - 0x20]
mov edx, dword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax - 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_false_::__uninit_default_n_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x406d95
mov rax, qword [rbp - 0x10]
jmp 0x406d99
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x406e0b
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x406eee
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::thread_
mov rdi, rax
call sym.std::_Destroy_std::thread_
add qword [rbp - 8], 8
jmp 0x406ec9
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::___shared_count
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_std::_Bind_simple_void_____________gnu_cxx::_Lock_policy_2_::___shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::thread::id::id
mov rax, qword [rbp - 0x60]
mov rdi, rax
call 0x404616
mov rdx, rax
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::__bind_simple_void______
lea rax, [rbp - 0x30]
lea rdx, [rbp - 0x50]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call sym.std::thread::_M_make_routine_std::_Bind_simple_void_________
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________void_
lea rcx, [rbp - 0x40]
mov rax, qword [rbp - 0x58]
mov edx, sym.imp.pthread_create
mov rsi, rcx
mov rdi, rax
call sym.std::thread::_M_start_thread
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::_shared_ptr
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________::_shared_ptr
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40700f
jmp 0x40700a
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::_shared_ptr
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________::_shared_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x58
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::max_size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::thread__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4070a8
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::thread___std::thread__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::thread::_thread
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_charconst__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_char_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov qword [rbp - 0x28], rdx
cmp dword [rbp - 0x1c], 0
sete al
movzx eax, al
test rax, rax
je 0x4071ae
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
mov byte [rax], 0x30
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
cmp eax, 0xa
sete al
movzx eax, al
test rax, rax
je 0x407212
cmp dword [rbp - 0x1c], 0
je 0x40726b
sub qword [rbp - 0x28], 1
mov ecx, dword [rbp - 0x1c]
mov edx, 0xcccccccd
mov eax, ecx
mul edx
shr edx, 3
mov eax, edx
shl eax, 2
add eax, edx
add eax, eax
sub ecx, eax
mov edx, ecx
mov eax, edx
add eax, 0x30
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov eax, dword [rbp - 0x1c]
mov edx, 0xcccccccd
mul edx
mov eax, edx
shr eax, 3
mov dword [rbp - 0x1c], eax
jmp 0x4071c6
cmp dword [rbp - 0x1c], 0
je 0x40726b
mov rax, qword [rbp - 0x18]
mov ecx, dword [rax + 0x10a4]
mov eax, dword [rbp - 0x1c]
mov edx, 0
div ecx
mov dword [rbp - 4], edx
sub qword [rbp - 0x28], 1
cmp dword [rbp - 4], 9
ja 0x407244
mov eax, dword [rbp - 4]
add eax, 0x30
mov edx, eax
jmp 0x40724c
mov eax, dword [rbp - 4]
add eax, 0x37
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov rax, qword [rbp - 0x18]
mov esi, dword [rax + 0x10a4]
mov eax, dword [rbp - 0x1c]
mov edx, 0
div esi
mov dword [rbp - 0x1c], eax
jmp 0x407212
mov rax, qword [rbp - 0x28]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
cmp qword [rbp - 0x20], 0
je 0x4072b0
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdi, rax
call sym.std::_Construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
sub qword [rbp - 0x20], 1
add qword [rbp - 8], 0x20
jmp 0x407289
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40730e
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 5
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x4073a0
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
add qword [rbp - 8], 0x20
jmp 0x40737b
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_thread
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_void______false_::_M_head
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_M_head
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_void______false_::_Head_base_void______
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_Tuple_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_void______::tuple
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call 0x404616
mov qword [rbp - 0x10], rax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::_Maybe_wrap_member_pointer_void______::__do_wrap
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Bind_simple_void________::_Bind_simple_void______
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x407547
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::make_shared_std::thread::_Impl_std::_Bind_simple_void__________std::_Bind_simple_void_________
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4075b1
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void____________
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_base____gnu_cxx::_Lock_policy_2_::__shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________void_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::max_size
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40764c
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::thread___std::thread__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x20
call 0x4022fe
test rax, rax
je 0x4076e1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x7ffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
test al, al
je 0x407765
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
add qword [rbp - 0x18], 0x20
jmp 0x407715
mov rax, qword [rbp - 0x18]
jmp 0x40779e
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_void______false_::_Head_base_void______
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_Tuple_impl_void______
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_void______::tuple_void______void_
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call method.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________.allocator
mov rax, qword [rbp - 0x28]
lea rcx, [rbp - 0x19]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocate_shared_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x18]
xor rdx, qword fs:[0x28]
je 0x4078f4
jmp 0x4078ef
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::__shared_count
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::_M_swap
mov rax, qword [rbp - 0x10]
mov qword [rax], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x407bb3
test al, al
je 0x4079eb
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::thread__::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::thread_
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::thread_std::thread__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::thread__::operator__
add qword [rbp - 0x18], 8
jmp 0x40799b
mov rax, qword [rbp - 0x18]
jmp 0x407a24
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::thread__
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x407c64
xor eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x20]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x20
call 0x4022fe
test rax, rax
je 0x407ad4
mov rsi, rbx
mov rdi, rax
call 0x401580
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________::shared_ptr_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
add rsp, 0x10
mov rax, qword [rbp - 0x28]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x407b7a
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rax, qword [rax]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::thread__
xor eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::thread_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 8
call 0x4022fe
test rax, rax
je 0x407c5c
mov rsi, rbx
mov rdi, rax
call sym.std::thread::thread
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_std::_Bind_simple_void_____________gnu_cxx::_Lock_policy_2_::__shared_ptr_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
add rsp, 0x10
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::thread__::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::thread__::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rax], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 0x28]
lea rdi, [rax + 8]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rcx, rdx
mov rdx, rax
mov esi, 0
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::__shared_count_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
add rsp, 0x10
mov rax, qword [rbp - 0x28]
add rax, 8
mov esi, obj.typeinfoforstd::_Sp_make_shared_tag
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::_M_get_deleter
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x28]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x28]
add rcx, 8
mov rsi, rax
mov rdi, rcx
mov eax, 0
call sym.std::__enable_shared_from_this_helper____gnu_cxx::_Lock_policy_2_
nop
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r14
push r13
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov qword [rbp - 0x70], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov qword [rax], 0
mov rdx, qword [rbp - 0x68]
lea rax, [rbp - 0x4a]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::allocator_std::thread::_Impl_std::_Bind_simple_void__________
lea rax, [rbp - 0x40]
lea rdx, [rbp - 0x4a]
mov rsi, rdx
mov rdi, rax
call sym.std::__allocate_guarded_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::get
mov qword [rbp - 0x48], rax
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::move_std::allocator_std::thread::_Impl_std::_Bind_simple_void__________const__
mov rdx, rax
lea rax, [rbp - 0x49]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::allocator
lea r13, [rbp - 0x49]
mov rax, qword [rbp - 0x70]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov r14, rax
mov r12, qword [rbp - 0x48]
mov rsi, r12
mov edi, 0x30
call 0x4022fe
mov rbx, rax
test rbx, rbx
je 0x407ed5
mov rdx, r14
mov rsi, r13
mov rdi, rbx
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Sp_counted_ptr_inplace_std::_Bind_simple_void_________
lea rax, [rbp - 0x49]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, qword [rbp - 0x58]
mov rdx, qword [rbp - 0x48]
mov qword [rax], rdx
lea rax, [rbp - 0x40]
mov esi, 0
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::operator_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::___allocated_ptr
lea rax, [rbp - 0x4a]
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_allocator
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x407f76
jmp 0x407f71
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x402310
mov rbx, r13
lea rax, [rbp - 0x49]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
jmp 0x407f49
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::___allocated_ptr
jmp 0x407f5a
mov rbx, rax
lea rax, [rbp - 0x4a]
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x50
pop rbx
pop r12
pop r13
pop r14
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
test rax, rax
je 0x407fc6
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
add rax, 0x20
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdx, qword [rdx]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rdx
call rax
jmp 0x407fcb
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x48
mov qword [rbp - 0xb8], rdi
mov qword [rbp - 0xa8], rsi
mov qword [rbp - 0xa0], rdx
mov qword [rbp - 0x98], rcx
mov qword [rbp - 0x90], r8
mov qword [rbp - 0x88], r9
test al, al
je 0x408023
movaps xmmword [rbp - 0x80], xmm0
movaps xmmword [rbp - 0x70], xmm1
movaps xmmword [rbp - 0x60], xmm2
movaps xmmword [rbp - 0x50], xmm3
movaps xmmword [rbp - 0x40], xmm4
movaps xmmword [rbp - 0x30], xmm5
movaps xmmword [rbp - 0x20], xmm6
movaps xmmword [rbp - 0x10], xmm7
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, 1
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::allocate
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::__allocated_ptr
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
test rax, rax
je 0x4080d6
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::_S_raw_ptr
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_ebo_helper_0_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________true_::__Sp_ebo_helper
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_::_Sp_counted_base
mov edx, 0x408c60
mov rax, qword [rbp - 0x28]
mov qword [rax], rdx
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x19]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::allocator
mov rax, qword [rbp - 0x28]
lea rdx, [rax + 0x10]
lea rax, [rbp - 0x19]
mov rsi, rax
mov rdi, rdx
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::_Impl
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_M_ptr
mov rcx, rax
mov rax, qword [rbp - 0x30]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________::construct_std::thread::_Impl_std::_Bind_simple_void__________std::_Bind_simple_void_________
jmp 0x40822c
mov rbx, rax
mov rax, qword [rbp - 0x28]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::__Impl
mov rax, qword [rbp - 0x28]
mov rdi, rax
call method.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_.__Sp_counted_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x408240
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::allocate
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov qword [rax + 8], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Mutex_base____gnu_cxx::_Lock_policy_2_::_Mutex_base
mov edx, 0x408d90
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov dword [rax + 8], 1
mov rax, qword [rbp - 8]
mov dword [rax + 0xc], 1
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::aligned_storage_32ul_8ul_::aligned_storage
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Sp_ebo_helper_0_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________true_::_Sp_ebo_helper
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::__aligned_buffer_std::thread::_Impl_std::_Bind_simple_void__________::__aligned_buffer
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x10
mov rdi, rax
call sym.__gnu_cxx::__aligned_buffer_std::thread::_Impl_std::_Bind_simple_void__________::_M_ptr
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::construct_std::thread::_Impl_std::_Bind_simple_void__________std::_Bind_simple_void_________
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40844e
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 4
mov rdi, rax
call sym.operatornew
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::__aligned_buffer_std::thread::_Impl_std::_Bind_simple_void__________::_M_addr
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 0x20
call 0x4022fe
test rax, rax
je 0x408513
mov rsi, rbx
mov rdi, rax
call sym.std::thread::_Impl_std::_Bind_simple_void_________::_Impl
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x555555555555555
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::__shared_count
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_base____gnu_cxx::_Lock_policy_2_::__shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x408d68
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_Impl_base::_Impl_base
mov edx, 0x408c98
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 8]
add rax, 0x18
mov rsi, rdx
mov rdi, rax
call sym.std::_Bind_simple_void________::_Bind_simple
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x408c98
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_Impl_base::__Impl_base
mov eax, 0
test eax, eax
je 0x408637
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::thread::_Impl_std::_Bind_simple_void_________.__Impl
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x408c60
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::__Impl
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_.__Sp_counted_base
mov eax, 0
test eax, eax
je 0x4086a9
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::__Sp_counted_ptr_inplace
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_M_ptr
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::_M_alloc
mov rsi, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________::destroy_std::thread::_Impl_std::_Bind_simple_void__________
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::_M_alloc
mov rdx, rax
lea rax, [rbp - 0x21]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::allocator_std::thread::_Impl_std::_Bind_simple_void__________
mov rdx, qword [rbp - 0x38]
lea rcx, [rbp - 0x21]
lea rax, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::__allocated_ptr
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::__Sp_counted_ptr_inplace
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::___allocated_ptr
lea rax, [rbp - 0x21]
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_allocator
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40879f
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, obj.typeinfoforstd::_Sp_make_shared_tag
mov rdi, rax
call sym.std::type_info::operator__
test al, al
je 0x4087d5
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_M_ptr
jmp 0x4087da
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x18
mov rdi, rax
call sym.std::_Bind_simple_void________::operator__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_ebo_helper_0_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________true_::_S_get
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::destroy_std::thread::_Impl_std::_Bind_simple_void__________
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rdx
mov rdi, rax
call sym.std::_Bind_simple_void________::_M_invoke__
add rsp, 0x10
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4088c4
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rdi, rdx
call rax
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_void______
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_0ul_void______
mov rdi, rax
call sym.std::forward_void______
mov rax, qword [rax]
call rax
leave
ret
nop word cs:[rax + rax]
nop
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x205466]
push rbp
lea rbp, [rip + 0x20546e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x4089b6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x4089a0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
cmp eax, dword [rax]
add byte [rax], al
nop
popfq
fiadd dword [rdx + 0x442d1837]
sbb byte [rip + 0x21fb5444], ch
or dword [rax], eax
add byte [rax], dl
add byte [rax], al
add byte [rax], 0
add byte [rbx + 0x6f], dh
jae 0x408a99
jb 0x408aa0
pop rdi
movsxd rbp, dword [rdi + 0x64]
jae 0x408a9b
insd dword [rdi], dx
outsb dx, byte [rsi]
je 0x408aa4
movsxd rbp, dword [rdi]
insb byte [rdi], dx
jae 0x408aac
insb byte [rdi], dx
jae 0x408ab4
pop rdi
xor byte [rdi + 0x30], bl
jae 0x408ac2
jne 0x408ac7
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdx], dh
xor ah, byte [rax]
cmp al, 0x3d
and byte [rsi + 0x61], dh
insb byte [rdi], dx
jne 0x408acb
and byte [rsi], ah
and byte es:[rsi + 0x61], dh
insb byte [rdi], dx
jne 0x408ad4
and byte [rdi + 0x363320], bh
jbe 0x408ad9
insb byte [rdi], dx
jne 0x408ae0
and byte [rax], bh
pop r8
pop rdi
push r12
add byte [rdx], sil
jb 0x408a8b
and byte [rax], al
ja 0x408a8f
and byte [rbx + 0x74], dh
jb 0x408b09
add byte fs:[rbx + 0x61], al
jae 0x408b01
and byte [rax], al
or al, byte [rax]
cmp ah, byte [rax]
add byte [rbx + 0x61], al
jae 0x408b0c
and byte [rbx], ah
add byte [rbp + 0x72], al
jb 0x408b1f
outsd dx, dword [rsi]
jb str._n_nTest_time:
outsd dx, dword [rsi]
outsb dx, byte [rsi]
and byte [rbp + 0x73], dh
je 0x408ad8
and eax, dword [rax]
js 0x408b2d
movsxd rsi, dword gs:[rbp + 0x64]
cmp cl, byte [rdx]
add byte [rdx + 0x65], dl
push rdx
movsxd rsp, dword gs:[rbp + 0x69]
jbe 0x408b31
cmp cl, byte fs:[rdx]
add byte [rdx], cl
or cl, byte [rdx]
push rsp
jae 0x408b4a
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rcx + 0x2d], al
sub eax, 0x6c616d73
insb byte [rdi], dx
sub eax, 0x65747461
insd dword [rdi], dx
jo 0x408b61
xor byte [rsi], ch
imul ebp, dword [rsi], 0x7074756f
outsd dx, dword [rsi]
jne 0x408b69
jo 0x408b6c
je 0x408b27
je 0x408b73
je str._n_nTotal_time:
or cl, byte [rdx]
push rsp
outsd dx, dword [rsi]
je 0x408b64
insb byte [rdi], dx
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x6e], ch
imul ebp, dword [rsi + 0x70], 0x3e2d7475
jb 0x408b7e
sub byte fs:[rsi + 0x6f], ah
jb 0x408b97
jb 0x408b87
cmp al, 0x54
jae 0x408b65
sub byte [rcx + 0x72], ah
jae 0x408b56
sub dword cs:[rax], eax
jbe 0x408b99
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x408baf
je 0x408ba4
jo 0x408bb8
outsb dx, byte gs:[rsi]
add byte fs:[rsi + 0x65], dh
jbe 0x408bb3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x408bc7
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x408bdf
add byte [rsi + 0x61], cl
add byte [rsi + 0x6e], r12b
add byte [r13 + 0x74], al
je 0x408bd5
imul ebp, dword [rdx + rdi + 0x3a], 0x65736142
and byte [rbx + 0x65], dh
je 0x408bc3
jae 0x408be9
sub byte [rbp + 0x69], dh
outsb dx, byte [rsi]
je 0x408bb3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x408c05
imul ebp, dword [rdx + rdi + 0x3a], 0x63657250
imul esi, dword [rbx + 0x69], 0x73206e6f
je 0x408c06
jb 0x408c1d
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x6e697528
je 0x408bed
add byte [rax], al
add byte [rax], al
jo 0x408be1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x6f], dh
jbe 0x408c51
imul esp, dword [rax + 0x72], 0x28646165
push rsp
jae 0x408c13
and byte es:[rsi], ch
sub dword cs:[rax], esp
pop rbx
ja 0x408c60
je 0x408c61
and byte [rbx + rsi*2 + 0x20], dl
cmp eax, 0x6e697b20
je 0x408c2a
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x5d7d26
add byte [rax], al
add bh, bh
jg 0x408c19
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
out dx, eax
jg 0x408c29
add byte [rax], al
add byte [rax + 0x412e84], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x408c8b
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x408c8f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x408d
add byte [rax], al
add byte [rax - 0x7a], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + rax*4 + 0x40], ch
add byte [rax], al
rol byte [rsi + 0x40], cl
add byte [rax], al
adc al, byte [rdi + 0x40]
add byte [rax], al
movabs byte [0x4087], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x408c20
add byte [rax], al
add byte [rax], al
add dh, bh
test dword [rax], eax
add byte [rax], al
add byte [rax], al
cmp al, byte [rsi + 0x40]
add byte [rax], al
fadd qword [rdi + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rsi + 0x40], 1
add byte [rax], al
and al, 0x32
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x4032], dl
add byte [rax], al
add dl, bl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
mov es, word [rax]
add byte [rax], al
add byte [rax], al
mov esi, 0x4030
add byte [rax], al
add byte [rcx + rsi + 0x40], dl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rdi + 0x40], cl
add byte [rax], al
rcl byte [rdi], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x408f
add byte [rax], al
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rdi], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x408f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
add byte [rax], al
add dl, dl
pop rbx
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
sub dl, ah
add byte [rax], al
add byte [rax], al
add al, ah
lea eax, [rax]
add byte [rax], al
add byte [rax], al
mov eax, 0x408f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x408e15
xor ebx, dword [rdi + 0x53]
jo 0x408e47
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x408e53
pop rdi
jo 0x408e66
jb 0x408e53
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x408e36
je 0x408e6a
jb 0x408e69
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x408e41
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x408e88
push rax
jbe 0x408e99
jbe 0x408e6b
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408e98
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x408eb5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
shl cl, 1
add byte [rax], al
add byte [rax], al
add byte [rax - 0x72], ah
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x408e94
cmp dword [rdi + 0x53], ebx
jo 0x408ec7
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x408ed7
add byte [eax], ch
sub dl, ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x408e], ah
add byte [rax], al
add byte [rax + 0x408f], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x408eda
je 0x408f0e
jb 0x408f0d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x408ee5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x408f2c
push rax
jbe 0x408f3d
jbe 0x408f0f
add byte [r8], r8b
add byte [rax], ch
sub dl, ah
add byte [rax], al
add byte [rax], al
add al, ch
mov es, word [rax]
add byte [rax], al
add byte [rax], al
and byte [rdi + 0x40], cl
add byte [rax], al
xor dword [rdx], esi
jne 0x408f61
jo 0x408f64
je 0x408f44
je 0x408f65
imul ebp, dword [rsi + 0x67], 0xe2280000
sub dl, ah
add byte [rax], al
add byte [rax], al
add byte [rax], dl
pop qword [rax]
add byte [rax], al
add byte [rax], al
and byte [rdi + 0x40], cl
add byte [rax], al
xor dword [rax], esi
jne 0x408f89
jo 0x408f8c
je 0x408f5f
imul ebp, dword [rbp], 0xd0000000
shl cl, 1
add byte [rax], al
add byte [rax], al
add byte [rax], dh
pop qword [rax]
add byte [rax], al
add byte [rax], al
xor dword [rdx], esi
jne 0x408fa9
jo 0x408fac
je 0x408f7d
jbe 0x408fa5
movsxd rsp, dword [rbp]
add byte [rax], ch
sub dl, ah
add byte [rax], al
add byte [rax], al
add byte [rax - 0x71], bl
add byte [rax], al
add byte [rax], al
add byte [rax - 0x71], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
cmp dword [rcx + 0x6e], ecx
jo 0x408fd2
je 0x408fa5
imul ebp, dword [rbp], 0
add al, dl
shl cl, 1
add byte [rax], al
add byte [rax], al
add byte [rax - 0x71], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x408ff3
je 0x408fc4
jbe 0x408fec
movsxd rsp, dword [rbp]
add byte [rax], al
shl cl, 1
add byte [rax], al
add byte [rax], al
add byte [rax + 0x408f], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x408fda
je 0x40900e
jb 0x40900d
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40901d
pop rdi
jae 0x40901b
add byte [r8], r13b
sub dl, ah
add byte [rax], al
add byte [rax], al
add al, ah
pop qword [rax]
add byte [rax], al
add byte [rax], al
sbb byte [rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
je 0x409014
pop rdi
push rbx
jo 0x409047
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x409053
pop rdi
jae 0x409059
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40905d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40907a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
add byte [rax], al
add al, dl
shl cl, 1
add byte [rax], al
add byte [rax], al
add byte [rax - 0x70], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x409074
xor dword [rdi + 0x4d], ebx
jne 0x4090bc
js 0x4090aa
jae 0x4090b4
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4090b8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4090d5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
add byte [rax], al
retf
add dword [rax], eax
add byte [rax - 0x7c], ah
push qword [rax - 0x5ffffff2]
xchg edi, edi
inc dword [rax - 0x69fffff2]
mov bh, bh
cmp byte [rdi], cl
add byte [rax], al
lodsb al, byte [rsi]
mov bh, bh
lcall [rax + 0xf]
add byte [rax], al
ror dword [rax + 0xf78ffff], 1
add byte [rax], al
add byte [rcx + 0xf98ffff], cl
add byte [rax], al
mov edi, edi
mov eax, 0x4900000f
mov edi, edi
fmul dword [rdi]
add byte [rax], al
jae 0x409047
clc
sldt word [rax]
mov dh, 0x89
lcall [rax]
adc al, byte [rax]
add dl, al
mov edi, edi
cmp byte [rdx], dl
add byte [rax], al
ror dword [rcx + 0x1258ffff], 1
add byte [rax], al
mov bh, bh
js 0x4090f4
add byte [rax], al
xor eax, 0x98ffff8a
adc al, byte [rax]
add byte [rbx - 0x76], al
lcall [rax]
sbb byte [rax], al
add byte [rax + 0x40ffff8b], ah
sbb byte [rax], al
add byte [rax], ah
jmp qword [rax + 0x18]
add byte [rax], al
dec dword [rax + 0x15000018]
push qword [rax - 0x5dffffe8]
xchg eax, ecx
jmp rax
add byte [r8], r8b
xchg eax, edx
push rax
add byte [r8], al
push rbx
xchg eax, edx
fmul dword [rsi]
add byte [rax], al
mov ss, word [rdx + 0xef8ffff]
add byte [rax], al
movabs al, byte [0xb000000f18ffff92]
xchg eax, edx
lcall [rax]
adc byte [rax], al
add byte [rcx], dl
xchg eax, ebx
cmp byte [rax], dl
add byte [rax], al
cmp edx, dword [rbx + 0x1058ffff]
add byte [rax], al
push rbx
xchg eax, ebx
js 0x40916a
add byte [rax], al
jo 0x4090f1
lcall [rax - 0x79fffff0]
xchg eax, ebx
mov eax, 0xb0000010
xchg eax, ebx
fcom dword [rax]
add byte [rax], al
loop 0x409109
clc
adc byte [rax], al
add byte [rsi], al
xchg eax, esp
lcall [rax]
adc dword [rax], eax
add byte [rsp + rdx*4], ch
cmp byte [rcx], dl
add byte [rax], al
adc byte [rdi + rdi*8 + 0x1158ff], 0
movabs al, byte [0xbc00001178ffff94]
xchg eax, esp
lcall [rax - 0x3ffffef]
xchg eax, esp
mov eax, 0x22000011
xchg eax, ebp
fcom dword [rcx]
add byte [rax], al
push rax
xchg eax, ebp
clc
adc dword [rax], eax
add byte [rbp + rdx*4 - 1], ch
mov eax, 0xba000012
xchg eax, ebp
fcom dword [rdx]
add byte [rax], al
adc byte [rsi + 0x12f8ffff], dl
add byte [rax], al
cmp byte [rsi + 0x1318ffff], dl
add byte [rax], al
xchg rax, r14
cmp byte [rbx], dl
add byte [rax], al
xchg ax, si
lcall [rax + 0x13]
add byte [rax], al
jle 0x409184
js 0x409205
add byte [rax], al
sahf
xchg eax, esi
lcall [rax + 0x76000013]
xchg eax, edi
inc eax
adc eax, dword [rax]
add dh, bl
xchg eax, edi
jmp rax
adc eax, dword [rax]
add byte [rax + rbx*4], bl
jmp qword [rax]
adc al, 0
add byte [rax + rbx*4 - 1], dl
dec dword [rax + 0x14]
add byte [rax], al
nop
cdq
push qword [rax + 0x14]
add byte [rax], al
sbb bl, byte [rdx + 0x1490ffff]
add byte [rax], al
jbe 0x4091c8
push qword [rax + 0x52000014]
wait
call rax
adc al, 0
add byte [rsi - 0xf000064], cl
adc al, 0
add al, dl
pushfq
call qword [rax]
adc eax, 0x9cf60000
push qword [rax]
adc eax, 0x9d460000
call qword [rax + 0x15]
add byte [rax], al
rcr byte [rsi + 0x1570ffff], 1
add byte [rax], al
and bl, byte [rdi + 0x1598ffff]
add byte [rax], al
js 0x40920d
mov eax, 0xa8000015
lahf
fcom dword [rip - 0x60320000]
clc
adc eax, 0xa0040000
lcall [rax]
add byte [rax], al
movabs al, byte [0xa09a00001640ffff]
jmp qword [rax + 0x16]
add byte [rax], al
call 0xffffffff81409241
add byte [rax], al
and al, 0xa1
jmp qword [rax - 0x71ffffea]
movabs eax, dword [0xa1b4000016c8ffff]
call 0xffffffffe84092d3
movabs eax, dword [0xa22200001708ffff]
ljmp [rax]
add byte [rax], al
push -0x5e
call qword [rax + 0x17]
add byte [rax], al
nop
movabs byte [0xa31600001770ffff], al
call qword [rax - 0x6fffffe9]
movabs dword [0xa3ba000017b0ffff], eax
call rax
add byte [rax], al
mov dh, 0xa4
push rax
add byte [rax], al
movsq qword [rdi], qword ptr [rsi]
fcomp dword [rax]
add byte [rax], al
push rdi
movsd dword [rdi], dword ptr [rsi]
clc
sbb byte [rax], al
add dl, dl
movsd dword [rdi], dword ptr [rsi]
lcall [rax]
sbb dword [rax], eax
add ah, bh
movsd dword [rdi], dword ptr [rsi]
cmp byte [rcx], bl
add byte [rax], al
xor esp, dword [rsi + 0x1958ffff]
add byte [rax], al
jg 0x4092cc
inc dword [rax - 0x4bffffe7]
cmpsb byte [rsi], byte ptr [rdi]
jmp qword [rax + 0x1b000019]
cmpsd dword [rsi], dword ptr [rdi]
dec eax
sbb dword [rax], eax
add byte [rcx], ch
cmpsd dword [rsi], dword ptr [rdi]
call 0x4340935e
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rax]
sbb al, byte [rax]
add byte [rbp - 0x59], bl
ljmp [rax]
sbb al, byte [rax]
add byte [rax - 0x59], bh
dec dword [rax + 0x1a]
add byte [rax], al
shl byte [rdi + 0x1a70ffff], cl
add byte [rax], al
loopne 0x40930d
call qword [rax - 0x5ffffe6]
cmpsd dword [rsi], dword ptr [rdi]
push qword [rax + 0x1400001a]
test al, 0xff
call rax
sbb al, byte [rax]
add byte [rsi], ch
test al, 0xff
push rax
sbb al, byte [rax]
add byte [rax + 0x18ffffa8], cl
sbb eax, dword [rax]
add byte [rsi + 0x38ffffa8], dl
sbb eax, dword [rax]
add byte [rsi], al
test eax, 0x1b60ffff
add byte [rax], al
xor byte [rcx + 0x1b80ffff], ch
add byte [rax], al
pop rbx
test eax, 0x1ba0ffff
add byte [rax], al
imul ebp, dword [rcx + 0x1bc0ffff], 0xa9770000
jmp rax
sbb eax, dword [rax]
add bh, cl
test eax, 0x1c08ffff
add byte [rax], al
fisubr word [rcx + 0x1c28ffff]
add byte [rax], al
test eax, 0x1c48ffff
add byte [rax], al
stosb byte [rdi], al
ljmp [rax + 0x1c]
add byte [rax], al
and ch, byte [rdx + 0x1c88ffff]
add byte [rax], al
stosb byte [rdi], al
ljmp [rax + 0x6800001c]
stosb byte [rdi], al
dec eax
sbb al, 0
add byte [rax - 0x17000056], ah
sbb al, 0
add byte [rsi + 0x8ffffaa], ch
sbb eax, 0xaaf80000
push qword [rax]
sbb eax, 0xab060000
call qword [rax + 0x1d]
add byte [rax], al
adc al, 0xab
push qword [rax + 0x1d]
add byte [rax], al
xor al, 0xab
call qword [rax + 0x6600001d]
stosd dword [rdi], eax
push qword [rax - 0x6fffffe3]
stosd dword [rdi], eax
call rax
sbb eax, 0xabe40000
push rax
sbb eax, 0xac320000
lcall [rax]
add byte [rax], al
jg 0x4093f2
cmp byte [rsi], bl
add byte [rax], al
lea ebp, [rdi + rdi*8 + 0x1e58ff]
add byte [rdi + 0x78ffffac], ah
add byte [rax], al
shr dword [rdi + rdi*8 + 0x1e98ff], 0
fsubr qword [rdi + rdi*8 + 0x1eb8ff]
add byte [rsi], dh
lodsd eax, dword [rsi]
jmp rax
add byte [rax], al
push rcx
lodsd eax, dword [rsi]
dec dword [rax]
add byte [rax], al
pop rdi
lodsd eax, dword [rsi]
ljmp [rax]
add byte [rax], al
insd dword [rdi], dx
lodsd eax, dword [rsi]
dec dword [rax + 0x1f]
add byte [rax], al
jnp 0x40943b
ljmp [rax + 0x1f]
add byte [rax], al
sub byte [rsi + 0x1f90ffff], ch
add byte [rax], al
scasb al, byte [rdi]
push qword [rax + 0x4400001f]
scasb al, byte [rdi]
call rax
add byte [rax], al
scasb al, byte [rdi]
push rax
add byte [rax], al
xchg eax, esi
scasb al, byte [rdi]
call qword [rax]
and byte [rax], al
add al, al
scasb al, byte [rdi]
push qword [rax]
and byte [rax], al
add byte [rdi + rbp*4], dl
call qword [rax + 0x20]
add byte [rax], al
scasd eax, dword [rdi]
js 0x4094f2
add byte [rax], al
scasd eax, dword [rdi]
scasd eax, dword [rdi]
lcall [rax - 0x42ffffe0]
scasd eax, dword [rdi]
mov eax, 0xd7000020
scasd eax, dword [rdi]
fsub dword [rax]
add byte [rax], al
int1
scasd eax, dword [rdi]
clc
and byte [rax], al
add byte [rax + rsi*4], cl
lcall [rax]
and dword [rax], eax
add byte [rsi - 0x50], ah
inc dword [rax + 0x21]
add byte [rax], al
xor byte [rax + 0x2160ffff], 0
add byte [rax - 0x7f000050], ah
and dword [rax], eax
add byte [rdx - 0x5f000050], bh
and dword [rax], eax
add al, cl
mov al, 0xff
inc eax
and dword [rax], eax
add dh, dl
mov al, 0xff
jmp rax
and dword [rax], eax
add ah, ah
mov al, 0xff
inc dword [rax]
and al, byte [rax]
add dl, dh
mov al, 0xff
jmp qword [rax]
and al, byte [rax]
add byte [rbx + 0x48ffffb1], bl
and al, byte [rax]
add bl, al
mov cl, 0xff
ljmp [rax + 0x22]
add byte [rax], al
sal dword [rcx + 0x2288ffff], 1
add byte [rax], al
mov dl, 0xff
push qword [rax + 0x72000022]
mov dl, 0xff
call rax
and al, byte [rax]
add byte [rax - 0xf00004e], al
and al, byte [rax]
add byte [rbx], dl
mov bl, 0xff
lcall [rax]
and eax, dword [rax]
add byte [rcx], ah
mov bl, 0xff
cmp byte [rbx], ah
add byte [rax], al
mov ah, 0xb3
jmp qword [rax + 0x23]
add byte [rax], al
adc byte [rdi + rdi*8 + 0x2388ff], dh
add byte [rsp + rsi*4 - 1], ch
push qword [rax - 0x79ffffdd]
mov ah, 0xff
call rax
and eax, dword [rax]
add byte [rdx - 0xf00004c], bh
and eax, dword [rax]
add byte [rsi - 0x4b], al
call qword [rax]
and al, 0
add byte [rdx - 0x4b], ah
cmp byte [rax + rax], ah
add byte [rsi + 0x60ffffb5], ah
and al, 0
add byte [rbp + rsi*4 + 0x2480ffff], dh
add byte [rax], al
mov dh, 0xff
jmp qword [rax + 0x7e000024]
mov dh, 0xff
inc eax
and al, 0
add dl, cl
mov dh, 0xff
jmp rax
and al, 0
add byte [rsi], al
mov bh, 0xff
inc dword [rax]
and eax, 0xb7260000
jmp qword [rax]
and eax, 0xb7370000
inc dword [rax + 0x25]
add byte [rax], al
mov r15b, 0xff
jmp qword [rax + 0x25]
add byte [rax], al
fdiv dword [rdi + 0x2588ffff]
add byte [rax], al
push rbx
mov eax, 0x25a8ffff
add byte [rax], al
insd dword [rdi], dx
mov eax, 0x25c8ffff
add byte [rax], al
mov eax, 0x25f0ffff
add byte [rax], al
fistp qword [rax + 0x2610ffff]
add byte [rax], al
sbb al, 0xb9
push qword [rax]
add byte es:[rax], al
mov ecx, 0x2650ffff
add byte [rax], al
pop rcx
mov ecx, 0x2670ffff
add byte [rax], al
mov ecx, 0x2690ffff
add byte [rax], al
cmp dword [rcx + 0x26b0ffff], 0xb99b0000
call rax
add byte es:[rax], al
mov dh, 0xb9
push rax
add byte es:[rax], al
sar byte [rcx + 0x2710ffff], 1
add byte [rax], al
add bh, byte [rdx + 0x2730ffff]
add byte [rax], al
adc byte [rdx + 0x2750ffff], bh
add byte [rax], al
sub bh, byte [rdx + 0x2770ffff]
add byte [rax], al
mov edx, 0x2790ffff
add byte [rax], al
pop rsi
mov edx, 0x27b0ffff
add byte [rax], al
js 0x409648
call rax
add byte [rax], al
stosb byte [rdi], al
mov edx, 0x27f0ffff
add byte [rax], al
adc byte [rbx + 0x2810ffff], bh
add byte [rax], al
xor al, 0xbb
push qword [rax]
sub byte [rax], al
add byte [rdx + 0x50ffffbb], bl
sub byte [rax], al
add byte [rax + 0x70ffffbb], ch
sub byte [rax], al
add dl, bl
mov ebx, 0x2890ffff
add byte [rax], al
or al, 0xbc
push qword [rax + 0x6a000028]
mov esp, 0x28d0ffff
add byte [rax], al
js 0x409692
push rax
sub byte [rax], al
add byte [rdx + 0x10ffffbc], dl
sub dword [rax], eax
add byte [rsp + rdi*4 + 0x2930ffff], ch
add byte [rax], al
mov esp, 0x2950ffff
add byte [rax], al
in al, 0xbc
push qword [rax + 0x29]
add byte [rax], al
xor byte [rbp + 0x2990ffff], bh
add byte [rax], al
mov ebp, 0x29b0ffff
add byte [rax], al
pop rax
mov ebp, 0x29d0ffff
add byte [rax], al
jb 0x4096d3
push rax
sub dword [rax], eax
add byte [rbp + rdi*4 + 0x2a10ffff], cl
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
mov ebp, 0x2a30ffff
add byte [rax], al
fdivr dword [rbp + 0x2a50ffff]
add byte [rax], al
hlt
mov ebp, 0x2a70ffff
add byte [rax], al
adc byte [rsi + 0x2a90ffff], bh
add byte [rax], al
mov esi, 0x2ab8ffff
add byte [rax], al
outsb dx, byte [rsi]
mov esi, 0x2ad8ffff
add byte [rax], al
std
mov esi, 0x2b00ffff
add byte [rax], al
or edi, dword [rdi + 0x2b20ffff]
add byte [rax], al
and eax, 0x40ffffbf
sub eax, dword [rax]
add byte [rdi], bh
mov edi, 0x2b60ffff
add byte [rax], al
pop rdx
mov edi, 0x2b80ffff
add byte [rax], al
je 0x40973d
jmp qword [rax - 0x57ffffd5]
mov edi, 0x2bc0ffff
add byte [rax], al
fidivr dword [rdi + 0x2be0ffff]
add byte [rax], al
call 0x1409758
sub al, 0
add byte [rdx], al
sar bh, 0xff
and byte [rax + rax], ch
add byte [rax + rax*8], bl
inc dword [rax + 0x2c]
add byte [rax], al
sar bh, 0xff
sub al, 0
add byte [rbx - 0x40], dl
inc dword [rax + 0x6100002c]
sar bh, 0xff
movabs al, byte [0xc0ffffc07b00002c]
sub al, 0
add byte [rbp - 0x1f000040], dl
sub al, 0
add byte [rax + 0xffffc0], dh
sub eax, 0xc0ce0000
jmp qword [rax]
sub eax, 0xc15b0000
dec dword [rax + 0x2d]
add byte [rax], al
loopne 0x4097af
push qword [rax + 0x2d]
add byte [rax], al
pop rax
ret 0xffff
cwde
sub eax, 0xc2d00000
inc eax
sub eax, 0xc3480000
call 0x5640983a
ret
dec dword [rax]
add byte cs:[rax], al
retf
ret
ljmp [rax]
add byte cs:[rax], al
fld st(3)
dec dword [rax + 0x2e]
add byte [rax], al
ljmp [rax + 0x2e]
add byte [rax], al
pop rsp
dec dword [rax + 0x7600002e]
ljmp [rax - 0x6fffffd2]
dec eax
add byte cs:[rax], al
stosb byte [rdi], al
call 0xffffffffc840987b
dec dword [rax]
add byte [rax], al
push 0x28ffffc5
add byte [rax], al
mov es, ebp
dec dword [rax + 0x2f]
add byte [rax], al
xchg eax, esp
push qword [rax + 0x2f]
add byte [rax], al
fcmovb st(0), st(7)
lcall [rax - 0x9ffffd1]
mov eax, 0x1200002f
enter -1, -0x28
add byte [rax], al
enter -1, 0
xor byte [rax], al
add byte [rax - 0x38], dh
jmp qword [rax]
xor byte [rax], al
add byte [rdx + 0x40ffffc8], bl
xor byte [rax], al
add ah, dl
enter -1, 0x60
xor byte [rax], al
add byte [rsi - 0x77000036], bh
xor byte [rax], al
add ah, bl
retf -1
test al, 0x30
add byte [rax], al
retf -1
enter 0x30, 0
retf
push rax
xor byte [rax], al
add byte [rdi + 0x10ffffcb], cl
xor dword [rax], eax
add byte [rbp + 0x30ffffcb], bl
xor dword [rax], eax
add dh, cl
retf
call qword [rax + 0x31]
add byte [rax], al
and esp, ecx
push qword [rax + 0x31]
add byte [rax], al
insd dword [rdi], dx
int3
lcall [rax - 0x77ffffcf]
int3
mov eax, 0x40000031
iretd
fdiv dword [rcx]
add byte [rax], al
jle 0x4098cd
clc
xor dword [rax], eax
add byte [rdx + 0x18ffffcf], bl
xor al, byte [rax]
add al, dl
iretd
cmp byte [rdx], dh
add byte [rax], al
sar dil, 1
jmp qword [rax + 0x32]
add byte [rax], al
xchg al, dl
inc dword [rax - 0x1ffffce]
sar bh, 1
ljmp [rax + 0x5a000032]
sar edi, 1
dec eax
xor al, byte [rax]
add byte [rax - 0x1700002f], bh
xor al, byte [rax]
add byte [rdx + rdx*8], bl
dec dword [rax]
xor eax, dword [rax]
add dl, dl
sar bh, cl
ljmp [rax]
xor eax, dword [rax]
add al, ah
sar bh, cl
dec dword [rax + 0x33]
add byte [rax], al
or dl, bl
ljmp [rax + 0x33]
add byte [rax], al
not bl
call qword [rax + 0x29000033]
push qword [rax + 0x7d000033]
fdiv dword [rbx]
add byte [rax], al
test al, 0xd4
clc
xor eax, dword [rax]
add dh, ah
lcall [rax]
xor al, 0
add byte [rdx], al
cmp byte [rax + rax], dh
add byte [rdi], dh
lcall [rax + 0x34]
add byte [rax], al
pop rsi
js 0x4099ce
add byte [rax], al
rcl ch, cl
ljmp [rax - 0x41ffffcc]
call rax
xor al, 0
add dl, dh
push rax
xor al, 0
add byte [rax], bl
xlatb
call qword [rax]
xor eax, 0xd76c0000
cmp byte [rip - 0x286e0000], dh
lcall [rax + 0x35]
add byte [rax], al
ret 0xffd7
js 0x409a07
add byte [rax], al
call 0xffffffff994099b0
xor eax, 0xd8390000
mov eax, 0x53000035
fdivr st(7)
fdiv dword [rip - 0x27550000]
inc dword [rax]
add byte ss:[rax], al
cld
fdivr st(7)
jmp qword [rax]
add byte ss:[rax], al
adc ebx, edx
inc dword [rax + 0x36]
add byte [rax], al
ljmp [rax + 0x36]
add byte [rax], al
jl 0x4099e8
dec dword [rax - 0x78ffffca]
ljmp [rax - 0x49ffffca]
dec eax
add byte ss:[rax], al
adc al, 0xdb
call 0x7a409a63
dec dword [rax]
add byte [rax], al
ljmp [rax]
add byte [rax], al
mov ah, 0xdc
dec dword [rax + 0x37]
add byte [rax], al
fdiv st(7), st(0)
ljmp [rax + 0x37]
add byte [rax], al
add ch, bl
dec dword [rax + 0x2b000037]
ljmp [rax + 0x55000037]
dec eax
add byte [rax], al
popfq
call 0xffffffffce409aa4
dec dword [rax]
cmp byte [rax], al
add ah, dh
ljmp [rax]
cmp byte [rax], al
add byte [rax], dl
fdivp st(7)
dec dword [rax + 0x38]
add byte [rax], al
sbb ebx, esi
ljmp [rax + 0x38]
add byte [rax], al
fdivp st(7)
dec dword [rax - 0x7dffffc8]
fdivp st(7)
ljmp [rax - 0x5dffffc8]
fdivp st(7)
dec eax
cmp byte [rax], al
add byte [rsi - 0x17000022], bh
cmp byte [rax], al
add byte [rsi + 0x10ffffdf], ah
cmp dword [rax], eax
add al, cl
push qword [rax]
cmp dword [rax], eax
add dl, dh
call qword [rax + 0x39]
add byte [rax], al
cmp ah, al
push qword [rax + 0x39]
add byte [rax], al
insb byte [rdi], dx
loopne 0x409ace
call qword [rax - 0x74ffffc7]
loopne 0x409ad6
push qword [rax - 0x66ffffc7]
loopne 0x409ade
call rax
cmp dword [rax], eax
add byte [rbx - 0xf000020], dh
cmp dword [rax], eax
add ah, ah
loopne 0x409aee
call qword [rax]
cmp al, byte [rax]
add al, dh
loopne 0x409af6
push qword [rax]
cmp al, byte [rax]
add byte [rcx], dl
call qword [rax + 0x3a]
add byte [rax], al
add edx, esp
push qword [rax + 0x3a]
add byte [rax], al
loop 0x409b0e
call qword [rax + 0x6000003a]
loop 0x409b16
push qword [rax + 0x6e00003a]
loop 0x409b1e
call rax
cmp al, byte [rax]
add byte [rax - 0xf00001e], dh
cmp al, byte [rax]
add dl, cl
loop 0x409b2e
call qword [rax]
cmp eax, dword [rax]
add bl, bh
loop 0x409b36
push qword [rax]
cmp eax, dword [rax]
add byte [rbx], dh
call qword [rax + 0x3b]
add byte [rax], al
jrcxz 0x409b46
push qword [rax + 0x3b]
add byte [rax], al
movsxd rsp, ebx
call qword [rax + 0x7100003b]
jrcxz 0x409b56
push qword [rax - 0x73ffffc5]
jrcxz 0x409b5e
call rax
cmp eax, dword [rax]
add byte [rdx - 0xf00001d], bl
cmp eax, dword [rax]
add byte [rbx + 0x3c10ffff], dh
add byte [rax], al
ret 0xffe3
push qword [rax]
cmp al, 0
add ah, ch
jrcxz 0x409b7e
call qword [rax + 0x3c]
add byte [rax], al
in al, 0xff
push qword [rax + 0x3c]
add byte [rax], al
in al, 0xff
call qword [rax + 0x7200003c]
in al, 0xff
push qword [rax - 0x26ffffc4]
in al, 0xff
call rax
cmp al, 0
add al, ch
in al, 0xff
push rax
cmp al, 0
add byte [rbx - 0x1b], al
call qword [rax]
cmp eax, 0xe5520000
push qword [rax]
cmp eax, 0xe5830000
call qword [rax + 0x3d]
add byte [rax], al
sahf
in eax, 0xff
push qword [rax + 0x3d]
add byte [rax], al
lodsb al, byte [rsi]
in eax, 0xff
call qword [rax - 0x11ffffc3]
in eax, 0xff
push qword [rax + 0x800003d]
out 0xff, al
call rax
cmp eax, 0xe6390000
push rax
cmp eax, 0xe6470000
call qword [rax]
add byte ds:[rax], al
je 0x409bdc
push qword [rax]
add byte ds:[rax], al
mov dh, ah
call qword [rax + 0x3e]
add byte [rax], al
xor eax, 0x78ffffe7
add byte ds:[rax], al
push rax
out 0xff, eax
lcall [rax + 0x5e00003e]
out 0xff, eax
mov eax, 0x9000003e
out 0xff, eax
fdivr dword [rsi]
add byte [rax], al
ret 0xffe7
clc
add byte ds:[rax], al
out 0xff, eax
lcall [rax]
add byte [rax], al
mov eax, gs
inc dword [rax + 0x3f]
add byte [rax], al
movabs byte [0xfa00003f60ffffe8], al
call 0x3fc19c49
add byte [rax], al
jmp 0x3fe19c51
add byte [rax], al
mov ebx, 0xc8ffffe9
add byte [rax], al
in al, 0xe9
call 0x4409ca4
dec dword [rax]
add byte [rax], al
adc eax, 0x28ffffea
add byte [rax], al
and ebp, edx
dec dword [rax + 0x40]
add byte [rax], al
insb byte [rdi], dx
ljmp [rax + 0x40]
add byte [rax], al
mov dl, ch
dec dword [rax - 0x5cffffc0]
ljmp [rax + 0x10000040]
jmp 0x409c96
call rax
add byte [rax], al
jmp 0x409c9e
push rax
add byte [rax], al
insb byte [rdi], dx
jmp 0x409ca6
call qword [rax]
add byte [r8], al
mov ebx, gs
push qword [rax]
add byte [r8], al
popfq
jmp 0x409cb6
call qword [rax + 0x41]
add byte [rax], al
stosd dword [rdi], eax
jmp 0x409cbe
push qword [rax + 0x41]
add byte [rax], al
hlt
jmp 0x409cc6
call qword [rax + 0x2e000041]
in al, dx
push qword [rax + 0x3a000041]
in al, dx
call rax
add byte [r8], al
in al, dx
push rax
add byte [r8], al
in al, dx
call qword [rax]
add byte [rax], al
in al, dx
push qword [rax]
add byte [rax], al
fsubr st(4)
call qword [rax + 0x42]
add byte [rax], al
jle 0x409ceb
js 0x409d44
add byte [rax], al
in eax, dx
lcall [rax - 0x61ffffbe]
in eax, dx
mov eax, 0x14000042
out dx, eax
call 0x5d409d5f
out dx, eax
dec dword [rax]
add byte [r8], al
mov dh, 0xef
ljmp [rax]
add byte [r8], al
out dx, eax
dec dword [rax + 0x43]
add byte [rax], al
int1
out dx, eax
ljmp [rax + 0x43]
add byte [rax], al
dec dword [rax + 0x6a000043]
push qword [rax - 0x6fffffbd]
call rax
add byte [r8], al
mov dh, 0xf0
push rax
add byte [r8], al
sal al, cl
call qword [rax]
add byte [rax], r8b
out dx, al
push qword [rax]
add byte [rax], r8b
fdiv st(1)
lcall [rax + 0x44]
add byte [rax], al
div cl
js 0x409dbe
add byte [rax], al
add dh, dl
lcall [rax + 0xd000044]
mov eax, 0x38000044
fadd dword [rax + rax]
clc
add byte [rax], r8b
nop
lcall [rax]
add byte [r8], r8b
movabs byte [0xb200004538fffff2], al
lcall [rax + 0x45]
add byte [rax], al
mov esi, 0x78fffff2
add byte [r8], r8b
cld
lcall [rax + 0x8000045]
mov eax, 0x24000045
fadd dword [rbp]
add byte [rsi - 0xd], dl
clc
add byte [r8], r8b
je 0x409dd1
lcall [rax]
add byte [rax], r8b
scasb al, byte [rdi]
cmp byte [rsi], al
add dl, bh
lcall [rax + 0x46]
add byte [rax], al
hlt
js 0x409e40
add byte [rax], al
hlt
lcall [rax + 0x5e000046]
hlt
mov eax, 0xac000046
hlt
jmp rax
add byte [rax], r8b
sal ah, 0xff
inc dword [rax]
add byte [r8], r8b
hlt
jmp qword [rax]
add byte [r8], r8b
clc
hlt
inc dword [rax + 0x47]
add byte [rax], al
adc al, 0xf5
jmp qword [rax + 0x47]
add byte [rax], al
cmc
inc dword [rax - 0x71ffffb9]
cmc
jmp qword [rax - 0x35ffffb9]
cmc
inc eax
add byte [r8], r8b
cmc
inc dword [rax]
add byte [rax], al
cmp al, 0xf6
jmp qword [rax]
add byte [rax], al
idiv bh
inc dword [rax + 0x48]
add byte [rax], al
movabs byte [0x3200004868fffff6], al
idiv edi
dec dword [rax + 0x6c000048]
idiv edi
ljmp [rax - 0x73ffffb8]
idiv edi
dec eax
add byte [rax], al
sal bh, 1
push rax
add byte [rax], al
idiv edi
call qword [rax]
add byte [r8], al
adc al, bh
push qword [rax]
add byte [r8], al
push rsi
clc
call qword [rax + 0x49]
add byte [rax], al
clc
push qword [rax + 0x49]
add byte [rax], al
mov bh, al
call qword [rax - 0x5bffffb7]
clc
push qword [rax - 0x41ffffb7]
clc
call rax
add byte [r8], al
clc
call qword [rax]
add byte [rax], al
stc
lcall [rax + 0x4a]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x409ef7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb byte [rcx - 1], bh
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x409f27
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test al, 0x75
push qword [rax]
add eax, dword [rax]
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rbx - 0x7d], dh
cmp eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jbe 0x409f6f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rsi + 0x12ffff83], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
add byte [rbx + 0xfffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rsi + 0x79], dl
call qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rcx + rdi*2 - 1], cl
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
push rcx
jns 0x409ff2
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 1
add byte [rax], al
jns 0x40a012
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
outsd dx, dword [rsi]
jns 0x40a032
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rcx + 0x79], ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword fs:[rax], eax
add byte [rbx + 0x79], dh
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x40a08f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], al
add byte [rax], al
nop
jmp qword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add cl, dl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], eax
add bl, bl
lcall [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 1
add byte [rax], al
rol dword [rdx + 0x1cffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 2
add byte [rax], al
rol byte [rdx + 0x16ffff], 1
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 2
add byte [rax], al
mov byte [rdx + 0x2affff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add al, dl
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insd dword [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add dl, ah
jmp qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
out 0x82, al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add ah, ch
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, byte [rax]
add byte [rax], ah
cmp edi, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 2
add byte [rax], al
and byte [rbx + 0x1bffff], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 3
add byte [rax], al
sbb al, 0x83
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x40a22f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
cmp al, 0x83
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8d, dword [rax]
add byte [rdx - 0x7d], al
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
add eax, dword fs:[rax]
add byte [rax - 0x7d], dl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], al
add byte [rax], al
xchg eax, esi
ja 0x40a292
dec dword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add byte [rdx + 0xfffff77], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rcx + 0x77], dh
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40a2ef
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 3
add byte [rax], al
xchg byte [rdi - 1], dh
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 4
add byte [rax], al
xchg eax, ebp
ja 0x40a312
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 4
add byte [rax], al
lodsb al, byte [rsi]
dec dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0
add dl, bl
call qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0
add byte [rax], dl
cmp edi, -1
sub byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], al
add byte [rax], bl
cmp edi, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, 0
add byte [rdi], cl
cmp edi, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rsi], al
cmp edi, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 4
add byte [rax], al
inc byte [rdx + 0x1fffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 5
add byte [rax], al
inc byte [rdx + 0xd7ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
int 0xc
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 5
add byte [rax], al
scasb al, byte [rdi]
cmp edi, -1
push 0
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add rax, -0x7c0a0000
cmp eax, 0
adc byte [rsi + 0x60d4302], al
js 0x40a477
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x40a491
add esp, dword [rax + 0x17]
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
hlt
cmp edi, -1
add byte [rax], al
add byte [rsp], al
fiadd dword [rax]
adc byte [rsi + 0x60d4302], al
jb 0x40a4bb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rsp + rax*4], al
cmp eax, dword [rcx]
add byte [rax], al
add al, 0xe8
fiadd dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
xor dword [rcx], eax
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rip - 0x7ae80000]
dec dword [rdx]
adc byte [rsi + 0x60d4302], al
add al, byte [rbp + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
cld
add eax, 0x85820000
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 6
add byte [rax], al
mov esi, 0xdcffff85
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, bh
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 6
add byte [rax], al
jp 0x40a4d0
cmp eax, dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add esi, dword [rsi]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
xchg eax, esi
xchg edi, edi
inc dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x40a587
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40a58c
add byte [rax], al
mov eax, 0x26ffff87
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
mov esi, 0x4fffff87
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xee000006
xchg edi, edi
dec dword [rcx + 1]
adc byte [rsi + 0x60d4302], al
add eax, dword [rcx + rax + 0x8070c]
and al, 0
add byte [rax], al
fadd qword [rsi]
add byte [rax], al
pop rax
mov edi, edi
call qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 7
add byte [rax], al
mov edi, edi
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 7
add byte [rax], al
mov eax, 0x2fffff89
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
enter -0x77, -1
and eax, 0
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
mov edi, edi
push qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jno 0x40a68f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdi], al
add byte [rax], al
in al, 0x89
dec dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
mov bh, bh
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
add byte [rax], al
xor cl, byte [rdx + 0x4dffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
add byte [rax], al
mov bh, bh
cmp eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jbe 0x40a717
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rdx + rcx*4 - 1], bh
ljmp [rcx]
add byte [rax], al
add al, 0xf7
fiadd dword [rax]
adc byte [rsi + 0x60d4302], al
add ah, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 8
add byte [rax], al
mov esi, 0x26ffff8a
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or byte [rax], al
add ah, al
mov bh, bh
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40a786
add byte [rax], al
fmul dword [rdx + 0x3affff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jne 0x40a79f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 3
add byte [rax], al
mov bh, bh
inc dword [rdi]
add byte [rax], al
add al, 0xfb
fiadd dword [rax]
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x12000008
mov edi, edi
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rax]
add byte [rax], al
sbb byte [rbx + 0x86ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
cld
or byte [rax], al
add byte [rsi - 0x75], bh
jp 0x40a80e
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 9
add byte [rax], al
fmul dword [rbx + 0x29ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 9
add byte [rax], al
loop 0x40a7d5
cld
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dh, bh
or al, 7
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
hlt
add eax, dword [rax]
add byte [rsi - 0x6c000074], bh
add byte [rax], al
add byte [rdi + rdi*8], al
fiadd dword [rax]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
and al, 0
add byte [rax], al
sbb al, 4
add byte [rax], al
and esi, dword [rdx - 1]
lcall [rbp + 1]
add byte [rax], al
add al, 0x10
fild dword [rax]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x51
add dword [rdi + rax], ecx
or byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
or dword [rax], eax
add byte [rax + 0x73], bl
inc dword [rax]
adc byte [rsi + 0x60d4302], al
add bh, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add al, 0
add byte [rax - 0x2d00008d], bh
add dword [rax], eax
add byte [rcx + rbp], al
fild dword [rax]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rax + rax], 0
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rax + rax], es
add byte [rdx + 0x75], ah
jmp qword [rbx]
add dword [rax], eax
add byte [rsi + rax*2], al
fild dword [rax]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rax + rax], 0
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 4
add byte [rax], al
pop rbp
jbe 0x40a92a
dec dword [rbp + 0x4000002]
pop rbp
fild dword [rax]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], -0x7f
add cl, byte [rdi + rax]
or byte [rax + rax], bl
add byte [rax], al
or r8b, byte [rax]
add byte [rcx - 0x74], ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, byte fs:[rax]
add byte [rdi - 0x74], dl
jnp 0x40a976
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rdx], cl
add byte [rax], al
mov dl, 0x8c
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or al, byte [rax]
add byte [rsp + rcx*4 + 0x37ffff], bh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jb 0x40a9cf
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, byte [rax]
add bl, dl
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
or al, byte [rax]
add bh, dh
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40aa17
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 0xb
add byte [rax], al
or al, 0x8d
jmp qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xb
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or eax, dword [rax]
add byte [rcx], bh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40aa89
add byte [rax], al
xor ecx, dword [rbp + 0x1affff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or eax, dword [rax]
add byte [rip + 0x1affff8d], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 0xb
add byte [rax], al
sub byte [rbp + 0x5affff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rbx]
add byte [rax], al
pop rdx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or eax, dword [rax]
add byte [rax - 0x73], cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xc
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xc
add byte [rax], al
cmp al, 0x8d
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
or al, 0
add byte [rsi], dh
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], cl
add byte [rax - 0x73], ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or al, 0
add byte [rsi - 0x73], dl
push qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x64
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
or al, 0
add byte [rsi + 0x29ffff8d], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
or al, 0
add byte [rax + 0x2bffff8d], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0xd
add byte [rax], al
mov bl, 0x8d
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xd
add byte [rax], al
movabs eax, dword [0xeffff8d]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or rax, 0xffffffff8d8f0000
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40ac8b
add byte [rax], al
mov edi, 0xeffff8d
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or eax, 0x8dae0000
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xd
add byte [rax], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, 0x8d960000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or eax, 0x8d920000
ljmp [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xe
add byte [rax], al
sahf
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xe
add byte [rax], al
cwde
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x40ad5f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add byte [rax], al
mov al, 0x8d
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x40ad8c
add byte [rax], al
sahf
dec dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
ror byte [rbp + 0xeffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xae00000e
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rsi]
add byte [rax], al
pushfq
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
pushfq
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xf
add byte [rax], al
scasb al, byte [rdi]
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xf
add byte [rax], al
mov eax, 0x53ffff8d
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
pop rsp
sldt word [rax]
in al, dx
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], cl
add byte [rax], al
adc cl, byte [rsi + 0x4dffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sldt word [rax]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
sub eax, 0x1affff8e
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xf
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x10
add byte [rax], al
and dword [rsi + 0x1affff], ecx
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 0x10
add byte [rax], al
sbb al, 0x8e
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 0xa
add byte [rax], al
lcall [rbx]
add byte [rax], al
add byte [rsi + rcx*4], al
fild dword [rax]
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40af8e
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
adc byte [rax], al
add byte [rdi], ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x10
add byte [rax], al
sbb eax, 0xeffff8e
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc byte [rax], al
add byte [rbx], cl
ljmp [rbp]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c9f02
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc byte [rax], al
add byte [rax + 0xeffff8e], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x11
add byte [rax], al
jle 0x40afb8
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x11
add byte [rax], al
insb byte [rdi], dx
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc dword [rax], eax
add byte [rsi + rcx*4 - 1], ch
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40b097
add byte [rax], al
jle 0x40b018
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc dword [rax], eax
add byte [rax + 0x53ffff8e], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov esp, 0xbc000011
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x11
add byte [rax], al
loop 0x40b080
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x12
add byte [rax], al
jg 0x4fb115
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x12
add byte [rax], al
std
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc r8b, byte [rax]
add bh, dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, byte fs:[rax]
add cl, dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdx], dl
add byte [rax], al
in al, dx
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc al, byte [rax]
add byte [rsi], bl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc al, byte [rax]
add byte [rax], bl
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc al, byte [rax]
add byte [rax], bl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x13
add byte [rax], al
adc cl, byte [rdi + 0xeffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x13
add byte [rax], al
add byte [rdi + 0xeffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc r8, qword [rax]
add dh, ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc eax, dword [rax]
add ah, bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rbx], ss
add byte [rax], al
retf -0x72
ljmp [rcx]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c9b02
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x13
add byte [rax], al
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc eax, dword [rax]
add byte [rbx - 0x71], dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
adc eax, dword [rax]
add byte [rcx - 0x71], al
call qword [rbx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x14
add byte [rax], al
lodsb al, byte [rsi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x14
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
adc al, 0
add byte [rax - 0x6c000071], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], dl
add bl, dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
adc al, 0
add cl, ah
call qword [rbx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
adc al, 0
add byte [rax + rdx*4 - 1], cl
lcall [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
adc al, 0
add byte [rax + 0x5bffff90], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x15
add byte [rax], al
mov ah, 0x90
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x15
add byte [rax], al
scasb al, byte [rdi]
nop
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc eax, 0x90c20000
dec dword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0x8070c]
add byte [rax + rax], ah
add byte [rax], al
adc al, 0x10
add byte [rax], al
xchg eax, ecx
lcall [rbx]
add byte [rax], al
add byte [rdx + rdx*4], al
fild dword [rax]
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0x10
add byte [rax], al
and dl, byte [rcx + 0x44ffff]
add byte [rax], al
add al, 0x96
fild dword [rax]
adc byte [rsi + 0x60d4302], al
jg 0x40b4d3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc eax, 0x913e0000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc eax, 0x912c0000
inc dword [rdx]
adc byte [rsi + 0x60d4302], al
add bh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0x16
add byte [rax], al
mov ss, word [rcx + 0x48ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x16
add byte [rax], al
mov dh, 0x91
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
loop 0x40b4eb
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
xchg eax, ecx
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rsi], ss
add byte [rax], al
xchg eax, ecx
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
out dx, eax
xchg eax, ecx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add byte [rax], al
fst qword [rcx + 0x93ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
xchg rax, rdx
jnp 0x40b606
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 0x17
add byte [rax], al
movabs dword [0x1affff92], eax
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0x17
add byte [rax], al
popfq
xchg eax, edx
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
int 0x92
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40b69d
add byte [rax], al
xchg eax, edx
cmp eax, 0
adc byte [rsi + 0x60d4302], al
js 0x40b6a7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
in al, 0x92
dec dword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xce000017
xchg eax, edx
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rdi]
add byte [rax], al
loope 0x40b67c
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
iretd
xchg eax, edx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x18
add byte [rax], al
leave
xchg eax, edx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x18
add byte [rax], al
ret
xchg eax, edx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb byte [rax], al
add byte [rsi + 0x1affff92], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40b79e
add byte [rax], al
mov eax, 0x32ffff92
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x68
or al, 7
or byte [rax + rax], bl
add byte [rax], al
pushfq
sbb byte [rax], al
add dl, cl
xchg eax, edx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xb8000018
xchg eax, edx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rax]
add byte [rax], al
mov dl, 0x92
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sbb byte [rax], al
add byte [rdx + rdx*4 + 0x1affff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x19
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
xchg eax, edx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x19
add byte [rax], al
movabs al, byte [0x31ffff92]
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb dword [rax], eax
add byte [rdx + 0x66ffff92], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x40b89f
add byte [rax], al
clc
xchg eax, edx
jmp qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sbb dword [rax], eax
add ah, bh
xchg eax, edx
jmp qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x42000019
xchg eax, ebx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rcx]
add byte [rax], al
xor byte [rbx + 0x31ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sbb dword [rax], eax
add byte [rdx - 0x6d], al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x1a
add byte [rax], al
push rsp
xchg eax, ebx
lcall [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0x1a
add byte [rax], al
xchg eax, edx
xchg eax, ebx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb al, byte [rax]
add byte [rax + 0x1affff93], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40b9a0
add byte [rax], al
jp 0x40b91d
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sbb al, byte [rax]
add byte [rbx + rdx*4 - 1], dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x6e00001a
xchg eax, ebx
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rdx]
add byte [rax], al
insb byte [rdi], dx
xchg eax, ebx
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
sbb al, byte [rax]
add byte [rax + 0xeffff93], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x1b
add byte [rax], al
xchg byte [rbx + 0x1affff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x1b
add byte [rax], al
adc byte [rbx + 0x1affff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb eax, dword [rax]
add byte [rdx - 0x6d], bh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40baa1
add byte [rax], al
je 0x40ba1d
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sbb eax, dword [rax]
add byte [rsi - 0x6d], ch
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x8000001b
xchg eax, ebx
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rbx]
add byte [rax], al
jl 0x40ba7d
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
js 0x40ba9d
call qword [rax]
add byte [rax], al
add al, 0x9a
fild dword [rax]
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 0x1c
add byte [rax], al
movabs al, byte [0xeffff93]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0
add byte [rsi - 0x7000006d], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x7d
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb al, 0
add ch, dh
xchg eax, ebx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], ds
add bl, ah
xchg eax, ebx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb al, 0
add ch, bl
xchg eax, ebx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb al, 0
add bh, dl
xchg eax, ebx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb al, 0
add dl, dl
xchg eax, ebx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1d
add byte [rax], al
int3
xchg eax, ebx
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1d
add byte [rax], al
loopne 0x40bbcd
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x68
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sbb rax, -0x6c0e0000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb eax, 0x93e00000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rip - 0x6c260000], ds
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb eax, 0x93d40000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb eax, 0x93ce0000
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb eax, 0x93cb0000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1e
add byte [rax], al
mov ecx, 0x1affff93
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1e
add byte [rax], al
mov bl, 0x93
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
xchg eax, ebx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
test al, 0x93
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rsi], ds
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
xchg eax, ebx
dec dword [rbp]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x7f
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 0x1e
add byte [rax], al
or edx, dword [rdi + rdi*8 + 0x84ff]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x78
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fcomp qword [rsi]
add byte [rax], al
push 0x78ffff94
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0x1f
add byte [rax], al
mov eax, 0x78ffff94
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0x1f
add byte [rax], al
or byte [rbp + 0x78ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add byte [rax], al
pop rax
xchg eax, ebp
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40be9d
add byte [rax], al
xchg eax, ebp
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
add byte [rax], al
wait
xchg eax, ebp
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x1f
add byte [rax], al
mov dword [rbp + 0x75ffff], edx
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
ficom word [rbp + 0xeffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
int3
xchg eax, ebp
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x20
add byte [rax], al
xchg eax, ebp
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x20
add byte [rax], al
rcl byte [rbp + 0x1affff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
and byte [rax], al
add byte [rdx + 0x1dffff95], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40bf9e
add byte [rax], al
mov eax, 0x9fffff95
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
and byte [rax], al
add byte [rax], bh
xchg eax, esi
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb r8, qword [rax]
add byte [rsi], bh
xchg eax, esi
inc dword [rsi]
add al, byte [rax]
add byte [rax], al
fild dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
cld
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
je 0x40c001
add byte [rax], al
sbb al, 0x98
inc dword [rbp]
add byte [rax], al
add al, 0xc8
fild dword [rax]
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x21
add byte [rax], al
cmp bl, byte [rax + 0x1bffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x21
add byte [rax], al
cwde
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fcomp qword [rbx]
add byte [rax], al
xor bl, byte [rax + 0x50ffff]
add byte [rax], al
add al, 0xcc
fild dword [rax]
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
and dword [rax], eax
add byte [rdx - 0x68], bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], fs
add byte [rax], al
cdqe
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
and dword [rax], eax
add byte [rdx - 0x68], dl
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40c0d7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0
add byte [rax + rbx*4 - 1], ch
add dword [rax], eax
add byte [rax + rdx*8], al
fild dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
loopne 0x40c0f4
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
and dword [rax], eax
add byte [rsi], ch
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x22
add byte [rax], al
sub al, 0x9a
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0x22
add byte [rax], al
sbb bl, byte [rdx + 0x78ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
and al, byte [rax]
add byte [rdx - 0x66], ch
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40c1a8
add byte [rax], al
ja 0x40c124
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
and al, byte [rax]
add byte [rbp - 0x66], ah
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x76000022
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
fsub qword [rdx]
add byte [rax], al
test eax, 0x4cffff9a
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x23
add byte [rax], al
int 0x9a
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x23
add byte [rax], al
enter -0x66, -1
mov bh, 2
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add esi, dword [rdx + 0x8070c02]
add byte [rax + rax], bl
add byte [rax], al
and r8d, dword [rax]
add byte [rax - 0x63], ah
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40c26f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and eax, dword fs:[rax]
add byte [rsi - 0x63], bh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], ah
add byte [rax], al
jp 0x40c22f
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40c2af
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
and eax, dword [rax]
add byte [rax + 0x76ffff9d], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and eax, dword [rax]
add dh, bl
popfq
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x40c2f7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
and eax, dword [rax]
add dh, bh
popfq
js 0x40c2fe
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x24
add byte [rax], al
sahf
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0x24
add byte [rax], al
mov bl, byte [rsi + 0x5effff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
and al, 0
add al, cl
sahf
jmp qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x40c3a2
add byte [rax], al
or al, 0x9f
push qword [rsi]
adc byte [rsi + 0x60d4302], al
add dh, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
and al, 0
add byte [rdx + 0xeffff9f], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x24
add byte [rax], al
nop
lahf
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 0
add byte [rdx - 0x13000061], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x40c403
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
and al, 0
add byte [rsi - 0x60], bl
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0x25
add byte [rax], al
jno 0x40c3ca
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and eax, 0xa09d0000
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and eax, 0xa0a80000
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40c48f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rip - 0x5f3a0000], ah
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
and eax, 0xa0c20000
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40c4cf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and eax, 0xa0d70000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
jl 0x40c50e
add byte [rax], al
fisub word [rax + 0x73ffff]
add byte [rax], al
add al, 0xf8
fild dword [rax]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6502
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0x26
add byte [rax], al
and ah, byte [rcx + 0xecffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x40c543
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x26
add byte [rax], al
out 0xa1, al
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte es:[rax], al
cli
movabs eax, dword [0x410000000026ffff]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
jl 0x40c5ac
add byte [rax], al
add byte [rdx + 0x54ffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte es:[rax], al
sub al, 0xa2
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte es:[rax], al
xor ah, byte [rdx + 0x2fffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x26
add byte [rax], al
movabs byte [0x410000000026ffff], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x27
add byte [rax], al
movabs byte [0x410000000051ffff], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 0x27
add byte [rax], al
jns 0x40c5d4
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
jae 0x40c5f4
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
movabs dword [0x51ffffa2], eax
adc byte [rsi + 0x60d4302], al
add cl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rdi], fs
add byte [rax], al
movabs byte [0x410000000117ffff], al
adc byte [rsi + 0x60d4302], al
add edx, dword [rdx]
add dword [rdi + rax], ecx
or byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
retf
movabs dword [0x41000000004dffff], eax
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
movabs dword [0x41000000001bffff], eax
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
in al, dx
movabs dword [0x41000000000bffff], eax
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x28
add byte [rax], al
xlatb
movabs dword [0x41000000002effff], eax
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
xor al, 0x28
add byte [rax], al
out 0xa3, al
lcall [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
sub byte [rax], al
add byte [rsp], ah
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x40c7a6
add byte [rax], al
push -0x5c
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
sub byte [rax], al
add byte [rsi - 0x2100005c], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bl, cl
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 0x28
add byte [rax], al
movsd dword [rdi], dword ptr fs:[rsi]
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub byte [rax], al
add byte [rsi - 0x5b], ch
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
sub byte [rax], al
add byte [rax - 0x5b], dh
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x29
add byte [rax], al
jnp 0x40c7c7
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x29
add byte [rax], al
test dword [rbp + 0x48ffff], esp
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
sub dword [rax], eax
add byte [rbp + 0x31ffffa5], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40c8a7
add byte [rax], al
mov esi, 0x26ffffa5
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
sub dword [rax], eax
add ah, al
movsd dword [rdi], dword ptr [rsi]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x29
add byte [rax], al
shl byte [rbp + 0xbffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub dword [rax], eax
add byte [rbx + 0x2effffa5], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
hlt
sub dword [rax], eax
add byte [rcx + 0x38ffffa5], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jae 0x40c91f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x2a
add byte [rax], al
shl byte [rbp + 0x1fffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x2a
add byte [rax], al
shl byte [rbp + 0x1bffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
and al, 0
add dh, cl
movsd dword [rdi], dword ptr [rsi]
call 0x440c969
add al, 0xdc
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fimul word [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40c9b0
add byte [rax], al
mov fs, word [rsi + 0x22ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sub al, byte [rax]
add byte [rax + 0x2affffa6], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x9a00002a
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fsubr qword [rdx]
add byte [rax], al
ret 0xffa6
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sub al, byte [rax]
add ah, dl
cmpsb byte [rsi], byte ptr [rdi]
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x2b
add byte [rax], al
shl dword [rsi + 0xeffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x2b
add byte [rax], al
shl dword [rsi + 0x1affff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sub eax, dword [rax]
add byte [rbx + 0x31ffffa6], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40cab1
add byte [rax], al
int3
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sub eax, dword [rax]
add byte [rax + 0x23ffffa6], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xbc00002b
cmpsb byte [rsi], byte ptr [rdi]
in eax, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ch, al
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fsubr qword [rbx]
add byte [rax], al
mov dword [rdi + 0x45ffff], esp
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
sub eax, dword [rax]
add byte [rsi + 0x1affffa7], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x2c
add byte [rax], al
test al, 0xa7
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x2c
add byte [rax], al
xchg eax, esi
cmpsd dword [rsi], dword ptr [rdi]
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x40cb67
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sub al, 0
add byte [rax + 0x1affffa7], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40cbb2
add byte [rax], al
mov dl, 0xa7
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sub al, 0
add bl, al
cmpsd dword [rsi], dword ptr [rdi]
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x40cbc7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xdc00002c
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fsubr qword [rax + rax]
add al, cl
cmpsd dword [rsi], dword ptr [rdi]
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sub al, 0
add bl, cl
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x2d
add byte [rax], al
mov ecx, 0x1bffffa7
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x2d
add byte [rax], al
mov ah, 0xa7
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sub eax, 0xa7a20000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40ccb3
add byte [rax], al
pushfq
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sub eax, 0xa78a0000
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x9400002d
cmpsd dword [rsi], dword ptr [rdi]
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40cce7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fsubr qword [rip - 0x58520000]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sub eax, 0xa7b40000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x2e
add byte [rax], al
mov edx, 0x67ffffa7
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0x2e
add byte [rax], al
add dword [rax + 0xeffff], ebp
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte cs:[rax], al
cmpsd dword [rsi], dword ptr [rdi]
lcall [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x40cdb4
add byte [rax], al
sub ebp, dword [rax + 0xeffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte cs:[rax], al
sbb ch, byte [rax + 0x31ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x2b00002e
test al, 0xff
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fsubr qword [rsi]
add byte [rax], al
test al, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte cs:[rax], al
adc al, 0xa8
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x40ce27
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x2f
add byte [rax], al
test al, 0xff
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x2f
add byte [rax], al
xor byte [rax + 0x31ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
test al, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40ceb5
add byte [rax], al
test al, 0xff
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
cmp al, 0xa8
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
sub al, byte [rax]
add byte [rax], dh
test al, 0xff
ljmp [rbp + 0x4000000]
sbb ah, bl
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
in al, 0x2f
add byte [rax], al
mov ch, 0xa8
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x30
add byte [rax], al
mov al, 0xa8
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x30
add byte [rax], al
sahf
test al, 0xff
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor byte [rax], r8b
add byte [rax + 0x31ffffa8], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor byte fs:[rax], al
add dl, al
test al, 0xff
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0x2b
add byte [rax], al
shr dword [rax + 0x98ffff], cl
add byte [rax], al
add al, 0x34
fadd qword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov cs, word [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
xor byte [rax], al
add byte [rcx + rbp*4 - 1], al
call qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
xor byte [rax], al
add byte [rdx], bh
test eax, 0x57ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
xor byte [rax], al
add byte [rdx - 0x57], dh
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sub eax, dword [rax]
add byte [rsi - 0x57], ah
ljmp [rbp + 0x4000000]
fadd qword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
xor al, 0x31
add byte [rax], al
jmp 0x40cfeb
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
xor dword [rax], eax
add ah, dh
test eax, 0x20ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40d0af
add byte [rax], al
hlt
test eax, 0x11ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
xor dword [rax], eax
add ch, ah
test eax, 0xeffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x31
add byte [rax], al
shr dword [rcx + 0x49ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
xor dword [rax], eax
add ah, bh
test eax, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
xor dword [rax], eax
add al, bh
test eax, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0x32
add byte [rax], al
test eax, 0x6dffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x32
add byte [rax], al
cmp byte [rdx + 0x33ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
xor al, byte [rax]
add byte [rbx - 0x56], cl
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40d1b8
add byte [rax], al
push rsp
stosb byte [rdi], al
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
xor al, byte [rax]
add byte [rdx + rbp*4 - 1], dl
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x45000032
stosb byte [rdi], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fdiv qword [rdx]
add byte [rax], al
xor ebp, dword [rdx + 0x49ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
cld
xor al, byte [rax]
add byte [rdx + rbp*4 - 1], bl
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sbb al, 0x33
add byte [rax], al
jbe 0x40d1d4
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x33
add byte [rax], al
stosb byte [rdi], al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
xor eax, dword [rax]
add byte [rsi - 0x56], cl
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7d
or al, 7
or byte [rax + rax], bl
add byte [rax], al
jl 0x40d2b9
add byte [rax], al
jne 0x40d234
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
pushfq
xor eax, dword [rax]
add byte [rsi + 0x11ffffaa], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0x80000033
stosb byte [rdi], al
jmp qword [rbp]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
wait
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x33
add byte [rax], al
stosb byte [rdi], al
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x34
add byte [rax], al
out dx, eax
stosb byte [rdi], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
mov esp, 0xde00002e
stosb byte [rdi], al
push qword [rbp + 1]
add byte [rax], al
add al, 0x60
fadd qword [rax]
adc byte [rsi + 0x60d4302], al
mov es, word [r11]
lea eax, [rsp + rcx*4]
add eax, 0x65030683
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
xor al, 0
add byte [rsp + rbp*4], ah
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x40d3b2
add byte [rax], al
lodsb al, byte [rsi]
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
xor al, 0
add byte [rsi + 0x1fffffac], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x34
add byte [rax], al
xchg byte [rdi + rdi*8 + 0x1bff], ch
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0
add byte [rcx + 0x3dffffac], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
js 0x40d3ff
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rdi], gs
add byte [rax], al
sahf
lodsb al, byte [rsi]
cmp eax, dword [rax]
add byte [rax], al
add al, 0x79
fadd qword [rax]
adc byte [rsi + 0x60d4302], al
jbe 0x40d423
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x35
add byte [rax], al
mov dl, 0xac
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x35
add byte [rax], al
mov eax, 0x26ffffac
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
xor eax, 0xacbe0000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40d4bb
add byte [rax], al
mov edx, 0x1bffffac
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0x30
add byte [rax], al
mov dh, 0xac
jmp 0x440d4b1
jge 0x40d48f
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fisttp word [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor eax, 0xad780000
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x35
add byte [rax], al
jbe 0x40d49f
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x36
add byte [rax], al
lodsd eax, dword [rsi]
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x36
add byte [rax], al
lodsq rax, qword [rsi]
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte ss:[rax], al
pop rax
lodsd eax, dword [rsi]
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte ss:[rax], al
lodsd eax, dword [rsi]
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
test byte [rsi], dh
add byte [rax], al
jo 0x40d53f
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte ss:[rax], al
lodsd eax, dword [rsi]
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte ss:[rax], al
push rdx
lodsd eax, dword [rsi]
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x36
add byte [rax], al
lodsd eax, dword ds:[rsi]
cmp eax, 0
adc byte [rsi + 0x60d4302], al
js 0x40d60f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x37
add byte [rax], al
pop rsp
lodsd eax, dword [rsi]
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x37
add byte [rax], al
lodsq rax, qword [rsi]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insd dword [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
push rsi
lodsd eax, dword [rsi]
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], dh
add byte [rax], al
push rsp
lodsd eax, dword [rsi]
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40d6af
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
outsb dx, byte [rsi]
lodsd eax, dword [rsi]
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x37
add byte [rax], al
sahf
lodsd eax, dword [rsi]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x38
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
lodsd eax, dword [rsi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 0x38
add byte [rax], al
sahf
lodsd eax, dword [rsi]
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp byte [rax], r8b
add ah, al
lodsd eax, dword [rsi]
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
cmp byte [rax], al
add byte [rax + 0xeffffad], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp byte [rax], al
add byte [rsi + 0x2affffad], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
cmp byte [rax], al
add byte [rax + 0x1bffffad], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
cmp byte [rax], al
add byte [rbp + rbp*4 + 0x2bffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
cmp byte [rax], al
add byte [rax + 0x4dffffad], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0x39
add byte [rax], al
out 0xad, al
cmp eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jbe 0x40d837
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x39
add byte [rax], al
add ch, byte [rsi + 0x26ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp qword [rax], r8
add byte [rdx - 0x630000b7], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
cmp dword [rax], eax
add al, ch
lodsd eax, dword [rsi]
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp dword [rax], eax
add byte [rsi + rbp*4], dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0
add byte [rdx], bl
scasb al, byte [rdi]
add byte [rax], al
add byte [rsp + rcx*4], al
fadd qword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x75
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp dword [rax], eax
add byte [rdx], dh
scasb al, byte [rdi]
dec dword [rdi]
adc byte [rsi + 0x60d4302], al
add cl, byte [rdx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
hlt
cmp dword [rax], eax
add byte [rdx + 0x3affffae], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jne 0x40d91f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x3a
add byte [rax], al
mov esp, 0x1fffffae
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
xor al, 0
add byte [rsi + rbp*4 + 0x44ffff], bh
add byte [rax], al
add al, 0x90
fadd qword [rax]
adc byte [rsi + 0x60d4302], al
jg 0x40d963
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
cmp al, byte [rax]
add al, bl
scasb al, byte [rdi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40d9c0
add byte [rax], al
shr byte [rsi + 0x26ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
cmp al, byte [rax]
add al, bl
scasb al, byte [rdi]
inc dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xfe00003a
scasb al, byte [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fdivr qword [rdx]
add byte [rax], al
in al, dx
scasb al, byte [rdi]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
cmp al, byte [rax]
add dl, dh
scasb al, byte [rdi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x3b
add byte [rax], al
in al, dx
scasb al, byte [rdi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x3b
add byte [rax], al
out 0xae, al
jmp qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
cmp eax, dword [rax]
add byte [rsi + 0x48], al
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rbx + rdi], bh
add al, bl
scasb al, byte [rdi]
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x40dac2
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
scasd eax, dword [rdi]
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or esp, esi
add dword [rip - 0x55fffd6b], eax
add al, byte [rip - 0x10000]
add dword [rax], eax
inc dword [rcx]
add bh, bh
inc dword [rcx]
or eax, 0x6a0526
add eax, 0x185005a
add eax, 0xffff0000
add dword [rip + 0x731f], edx
cwde
add dword [rip - 0x44fffd61], eax
add dword [rbx], esp
mov ch, 2
add byte [rax + 0x1f02], dh
inc dword [rcx]
sbb dword [rax], esi
add eax, 0x53b0000
xchg eax, ecx
add eax, dword [rax]
imul ebx, dword [rcx], -0x48
add eax, dword [rax]
rol dword [rcx], 0x75
cmpsd dword [rsi], dword ptr [rdi]
add eax, dword [rax]
add edx, dword [rax]
add bh, bh
inc dword [rcx]
adc esi, dword [rax]
add eax, 0x53b0000
add dword [rax], eax
imul edi, dword [rcx], -0x77
add al, byte [rax]
in al, 1
add byte [rax], al
inc dword [rcx]
sub eax, 0x51f
add eax, 0x460004a3
add eax, 0x5560000
mov ecx, 0x56d0004
add byte [rax], al
xchg dword [rcx], eax
add eax, 0xd50004cf
add dword [rdx], ebx
add byte [rax], al
movabs eax, dword [0x4b40004e501de02]
add byte [r8], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add byte [rax], al
add bh, bh
add esp, dword [rip + 0x54601a01]
add byte [rax], al
in eax, 1
sub esp, dword [rbp + 0x2b80103]
cmp al, byte [rax]
add dl, cl
add esp, dword [rcx]
jmp 0x40dbbc
add cl, bh
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x1c221a01]
add byte [rax], al
add dword [rdi], esi
xlatb
add al, byte [rcx]
out 1, al
cmp al, byte [rax]
add byte [rbx + 0x3d04503], cl
add dh, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
or byte [rdi + 5], al
add byte [rdx + 5], r12b
add byte [rax], al
inc dword [rcx]
cmovne ebx, dword [rax + rax]
add byte [rdi + 0x1b60501], al
add bh, dl
add dword [rip - 0x1000000], eax
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x1890173]
or dl, byte [rbx + 0x1a10001]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or dword [rbp + rax + 0x72], ecx
add byte [rdi + 0x501], al
add byte [rax], al
add bh, bh
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x1890173]
or dl, byte [rbx + 0x1a10001]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
adc eax, 0x2c9055a
add byte [rsi + 5], ah
mov eax, 0x1c20002
add eax, 0xde000299
add al, byte [rip - 0x10000]
add dword [rax], eax
inc dword [rcx]
or ebx, dword [rbp + 0x1a40501]
add cl, cl
add dword [rip - 0x10000], eax
add dword [rax], eax
inc dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40ddf2
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4022], ch
add byte [rax], al
add al, al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40de26
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x14
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add ah, dl
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fcomp st(5)
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
frstor dword [rax]
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 8], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rip]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40df63
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 4], dh
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400f], bl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
frstor dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x14, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
push rsi
adc eax, 0x40
add byte [rax], al
adc ax, 0x40
add byte [rax], al
add byte [rax], al
jbe 0x40e077
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4015], al
add byte [rax], al
add byte [rsi + 0x4015], dl
add byte [rax], al
add byte [rsi + 0x4015], ah
add byte [rax], al
add byte [rsi + 0x4015], dh
add byte [rax], al
add dh, al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
out 0x15, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4016], al
add byte [rax], al
add byte [rsi + 0x4016], dl
add byte [rax], al
add byte [rsi + 0x4016], ah
add byte [rax], al
add byte [rsi + 0x4016], dh
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4017], al
add byte [rax], al
add byte [rsi + 0x4017], dl
add byte [rax], al
add byte [rsi + 0x4017], ah
add byte [rax], al
add byte [rsi + 0x4017], dh
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40e230
je 0x40e239
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40e247
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40e244
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002e000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 8], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rax + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x400f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, bh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
test al, 0x14
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
rcl byte [rax + rax*2], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40180000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], dl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
lldt sp
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
loopne 0x40e303
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax - 0x70], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add al, bl
sahf
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add ah, ah
fiadd dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
fcomp st(5)
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x60dde800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add al, dh
frstor dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, bh
frstor dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb byte [rax], al
clc
fbld tbyte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb dword [rax], eax
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x60e1], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, al
loope 0x40e4e3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add al, dh
frstor dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x18], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4018], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x60e2], cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x60dde800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, ah
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
fcomp st(5)
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], dh
add byte [rax], dl
add byte [rax], al
mov al, byte [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rsi], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add al, cl
mov eax, dword [rax]
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x2000001
add byte [rsi], cl
add byte [rcx + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rcx + rax], ch
add byte [rax], al
add al, byte [rax]
add byte [rcx + 0x19], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x19], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2000001], al
add byte [rsi], cl
add byte [rdi + 0x4019], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2000001], ch
add byte [rsi], cl
add byte [rcx + 0x4019], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add bl, ah
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], cl
add byte [rax], al
add dword [rax], eax
sbb eax, dword [rax]
or bl, ah
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rcx], al
mov al, byte [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rdx], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add cl, byte [rdx + 0x40]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x1000002
add byte [rax], dl
add byte [rdx + rcx*4], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte fs:[rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax], cl
mov al, byte [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40e6ec
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
or dword [rdx + 0x40], ecx
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rdx], eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
or cl, byte [rdx + 0x40]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdx + rcx*4], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x1000100001000002], eax
mov al, byte [rax]
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax], bl
mov al, byte [rax]
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 2
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
and byte [rdx + 0x40], cl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdx], 0
add byte [rcx], al
add byte [rax], dl
add byte [rdx + rcx*4], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax - 0x75], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x408b], ah
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rdx], ah
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add al, ah
mov eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub eax, 0
add byte [rax], al
add byte [rax + 3], dl
add byte [rax], al
add al, byte [rax]
add byte [rdx], dl
and al, byte [rax]
add byte [rax], al
add byte [rax], al
pushfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2000003], al
add byte [rsi], cl
add byte [rsi + 0x4022], ch
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax + 0x10000], bl
adc al, byte [rax]
loopne 0x40e804
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1000003], ch
add byte [rsi], dl
add al, dh
frstor dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 3], dh
add byte [rcx], dl
add byte [rax - 0x70], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add eax, dword [rax]
add byte [rcx], al
add byte [rdi], dl
add al, bh
frstor dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rbx], cl
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x414982
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
add eax, dword [rax]
add byte [rax], al
add byte [rax + rax], dl
fcomp st(5)
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
add eax, dword [rax]
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
loopne 0x40e933
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], cl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 4], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4082], ch
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add eax, 0x220000
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000005], bh
add byte [rsi], cl
add dh, dl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x40e947
add byte [rax], al
and al, byte [rax]
add bh, ch
add byte ss:[rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rbx + 0x22000005], dl
add byte [rsi], cl
add byte [rdx], ch
add byte es:[rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasd eax, dword [rdi]
add eax, 0x220000
add cl, dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
add eax, 0x220000
add dh, bh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
je 0x40e9eb
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
and al, byte [rax]
add ch, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x2d], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000007], cl
add byte [rsi], cl
add byte [rbx + 0x4023], ch
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
and al, byte [rax]
add bh, ah
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4035], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000008], dh
add byte [rsi], cl
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x40ea6a
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
imul eax, dword [rax], 0
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add bh, dh
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000009], bh
add byte [rsi], cl
add byte [rbp*2 + 0x40], ah
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x24], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000009], dh
add byte [rsi], cl
add byte [rbx + rbp*2 + 0x40], al
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4073], dh
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000a], ch
add byte [rsi], cl
add al, cl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0xa, 0
and al, byte [rax]
add byte [rsi + 0x65], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax - 0x7a], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cs, word [rbx]
add byte [rax], al
and al, byte [rax]
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000b], dh
add byte [rsi], cl
add byte [rax], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x407a], dl
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb cl, byte [rax + rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdi + 0x40], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000c], dh
add byte [rsi], cl
add byte [rbx + rdi + 0x40], ah
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], dl
jnp 0x40ec43
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x210000
adc byte [rax], al
pop qword [rax]
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40ec37
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x3a], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200000d], bh
add byte [rsi], cl
add byte [rsi + rbp*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
or eax, 0x220000
add byte [rsi + 0x76], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
or eax, 0x220000
add byte [rdx + 0x50], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], bl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x73], ch
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200000e], bh
add byte [rsi], cl
add byte [rax + 0x38], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
sldt word [rax]
and al, byte [rax]
add byte [rbx + 0x407b], dh
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], dh
add byte [rax], al
and al, byte [rax]
add dl, al
jne 0x40ed1b
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000f], dl
add byte [rsi], cl
add byte [rsi + 0x402d], dh
add byte [rax], al
add byte [rcx + 1], cl
add byte [rax], al
add byte [rax + 0x2200000f], bh
add byte [rsi], cl
add dh, al
mov byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000010], dl
add byte [rsi], cl
add byte [rax + 0x404a], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x10], bl
add byte [rax], al
and al, byte [rax]
add dh, ch
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000010], bl
add byte [rsi], cl
add byte [rsi], ch
add dword [rax], 0
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add al, bl
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add cl, dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000011], dh
add byte [rsi], cl
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
mov al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2d], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x40edbb
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000011], ch
add byte [rsi], cl
add byte [rax + rdi + 0x40], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x12
add byte [rax], al
and al, byte [rax]
add byte [rsi + rcx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
add dword [rax], 0
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x22000012
add byte [rsi], cl
add byte [rbx + 0x4f], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dl
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x13], al
add byte [rax], al
and al, byte [rax]
add byte [rsp + rsi*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x13], ch
add byte [rax], al
and al, byte [rax]
add bl, dh
jne 0x40ee9b
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000013], ah
add byte [rsi], cl
add byte [rsp + 0x40], bl
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x10000013], bh
add byte [rdx], bl
add byte [rax + 0x60e1], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x405f], dh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x14], bl
add byte [rax], al
and al, byte [rax]
add byte [rbx + rax*4 + 0x40], dl
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fst qword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x39], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000015], al
add byte [rsi], cl
add bh, ah
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
adc eax, 0x220000
add byte [rbp + 0x404f], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rsi], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
je 0x40efa3
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x58], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
add byte [rax], al
and al, byte [rax]
add byte [rax], bh
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rdi + rdx], ah
add byte [rax], al
and al, byte [rax]
add ah, bl
jp 0x40efeb
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x17], bl
add byte [rax], al
and al, byte [rax]
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000017], bh
add byte [rsi], cl
add al, ah
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
add byte [rax], al
and al, byte [rax]
add byte [rdi + rdi*2 + 0x40], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rsi + 0x40], dl
add byte [rax], al
imul eax, dword [rax], 0
add byte [rax], al
cmp ebx, dword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4036], ah
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x18], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
add dword [rax], 0
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x21000018], ch
add byte [rax], dl
add byte [rax], ch
lea eax, [rax]
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x22000018
add byte [rsi], cl
add al, bh
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rdi + 2], dh
add byte [rax], al
add bl, ch
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rdi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x4023], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx], dh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
jle 0x40f10b
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x1a
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4054], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1a], al
add byte [rax], al
and al, byte [rax]
add dh, bl
jb 0x40f13b
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0xea000e002200001a], al
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax - 0x72], bh
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
test al, 0xe1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbx], bh
add byte [rax], al
and al, byte [rax]
add ch, bh
jl 0x40f183
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1b], ch
add byte [rax], al
and al, byte [rax]
add ah, ah
add dword [rax], 0
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
jnp 0x40f1cb
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx], dh
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4047], dh
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rcx + 0x1c], dl
add byte [rax], al
adc dword [rax], eax
adc byte [rax], al
loopne 0x40f143
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4039], ah
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200001c], ch
add byte [rsi], cl
add byte [rax + rdx*2 + 0x40], cl
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rip + 0x220000], bl
add dh, cl
ja 0x40f243
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
sbb eax, 0x220000
add byte [rax + 0x4e], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1200001d], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
sbb eax, 0x220000
add cl, bl
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x403a], dl
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
add byte [rax], al
and al, byte [rax]
add dh, al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x1e
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
and eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0x1f
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
loopne 0x40f251
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
add byte [rax], al
and al, byte [rax]
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1f], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4074], dl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200001f], cl
add byte [rsi], cl
add ch, cl
jg 0x40f34b
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x40f339
add byte [rax], al
and al, byte [rax]
add dl, dl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rax], dh
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
xor eax, 0x40
add byte [rax], al
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x20], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbx + 0x22000020], cl
add byte [rsi], cl
add byte [rdx + 0x58], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rdi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dl
add dword [rax], 0
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x21], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], ah
push rcx
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx + 0x21000021], bl
add byte [rax], dl
add byte [rax], dh
pop qword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000], ch
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ah, byte [rdx]
add byte [rax], al
and al, byte [rax]
add ah, bl
and eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4050], ah
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdi + 0x22000022], al
add byte [rsi], cl
add byte [rax - 0x78], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ch
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x406e], cl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x23], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rbx], esp
add byte [rax], al
and al, byte [rax]
add ah, cl
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
and eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
add byte gs:[rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x24
add byte [rax], al
and al, byte [rax]
add byte [rsp + rcx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x24, al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
xor al, 0x40
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
imul eax, dword [rax], 0
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x220000
add dl, bl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x25], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + rax*2], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rbx + 0x22000025], dh
add byte [rsi], cl
add byte [rbx + rdi + 0x40], ah
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
and eax, 0x220000
add byte [rcx + 0x54], cl
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb esp, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x7b], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x26], cl
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
add byte es:[rax], al
and al, byte [rax]
add byte [rax + 0x4a], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte es:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fsub qword [rsi]
add byte [rax], al
and al, byte [rax]
add ch, bl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rdi], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0x27
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4043], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x27], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + rax*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov fs, word [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x53], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x39], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000028], bl
add byte [rsi], cl
add bl, cl
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x28], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x404a], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x11000028], dh
add byte [rbx], bl
add byte [rax + 0x60e2], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbp + 0x220000], bh
add byte [rsi], bh
test dword [rax], eax
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or ch, byte [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx + rbp], dl
add byte [rdx], dl
add byte [rsi], cl
add byte [rbp + 0x401f], al
add byte [rax], al
add byte [rbp + 2], cl
add byte [rax], al
add byte [rcx + 0x29], bl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
in al, dx
loop 0x40f75b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rbp, dword [rcx]
add byte [rax], al
and al, byte [rax]
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add al, dl
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, bh
jbe 0x40f76b
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rdx + 0x2a], bl
add byte [rax], al
and al, byte [rax]
add byte [rcx*2 + 0x40], bl
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rax*4 + 0x40], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 0x2a
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x78], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2b], al
add byte [rax], al
and al, byte [rax]
add ah, dl
add byte ds:[rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200002b], cl
add byte [rsi], cl
add byte [rip + 0x405c], cl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200002b], dh
add byte [rsi], cl
add byte [rdi], dl
cmp eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax + rax], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
sub al, 0
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x408e], ah
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2c], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4046], ah
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbp + rbp], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x406a], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub ax, 0
and al, byte [rax]
add byte [rcx + 0x4068], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200002d], ah
add byte [rsi], cl
add byte [rdx + 0x50], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
sub eax, 0x220000
add byte [rsi + rbp*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
sub eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rsi], ebp
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4051], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp + 0x220000], al
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2100002e], bh
add byte [rax], dl
add byte [rax + 0x408d], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
add byte cs:[rax], al
and al, byte [rax]
add byte [rax + 0x403e], bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx], cl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2f], bh
add byte [rax], al
and al, byte [rax]
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0x30
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rax + rsi], dh
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x60e1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000030], al
add byte [rsi], cl
add byte [rcx*2 + 0x40], bl
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, al
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add bl, al
push 0x40
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4033], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor esi, dword [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
js 0x40fa23
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rsi], ah
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
add byte es:[rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x31], bh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
lea eax, [rax]
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ecx
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x407c], dh
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0x32
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4038], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add al, bh
mov es, word [rax]
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4077], ah
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000032], bl
add byte [rsi], cl
add cl, ah
jae 0x40facb
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000032], dh
add byte [rsi], cl
add byte [rdx + 0x38], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
je 0x40fafb
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x12000033
add byte [rax], al
add byte [rax + 0x15], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x33], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x404a], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000033], bh
add byte [rsi], cl
add byte [rdi], dl
cmp eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x22000034
add byte [rsi], cl
add bl, ch
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000034], al
add byte [rsi], cl
add byte [rsi - 0x80], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bl
add byte gs:[rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000], dh
add byte [rax + 0x71], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000035], bl
add byte [rsi], cl
add byte [rsi + 0x3a], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
xor eax, 0x220000
add byte [rbx], bl
jl 0x40fbd3
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4032], dl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ss:[rax], al
and al, byte [rax]
add byte [rsi + 0x407c], dh
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ecx
add byte ss:[rax], al
and al, byte [rax]
add byte [rsp + rsi*2 + 0x40], bh
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x21000036], dh
add byte [rax], dl
add byte [rax + 0x408c], dh
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte ss:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], ah
jae 0x40fc63
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x37], ch
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
mov eax, 0x408f
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000037], ah
add byte [rsi], cl
add byte [rdx], cl
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000037], bh
add byte [rsi], cl
add byte [rsi + 0x4045], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
cmp byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
ja 0x40fcdb
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
cmp byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4030], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [r8], r8b
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x31], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x38], ah
add byte [rax], al
and al, byte [rax]
add byte [rbx], dl
jnp 0x40fd23
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sar dword [rax], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x22000039
add byte [rsi], cl
add byte [rbp + 0x4047], dh
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rdx], bh
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rdx*2 + 0x40], cl
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0x20000e0022000039], al
jae 0x40fd83
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x49], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rsi + 0x3a], dl
add byte [rax], al
and al, byte [rax]
add dh, cl
ja 0x40fdb3
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200003a], al
add byte [rsi], cl
add byte [rax + 0x4053], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200003a], bh
add byte [rsi], cl
add dl, dh
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
xchg dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x3b], bl
add byte [rax], al
adc al, byte [rax]
add byte [rdx], dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x3b], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rbx], 0
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x74], dl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rcx*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x3c], cl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3c], ch
add byte [rax], al
and al, byte [rax]
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rsi*2 + 0x40], al
add byte [rax], al
in eax, dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
cmp eax, 0x220000
add byte [rax], al
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x220000
add byte [rdx - 0x7c], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
cmp eax, 0x120000
add byte [rcx + 0x1a], al
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdi], al
add byte ds:[rax], al
and al, byte [rax]
add byte [rdx + rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte ds:[rax], al
and al, byte [rax]
add dl, bh
mov byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add byte ds:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
adc dword [rax], eax
sbb eax, dword [rax]
movabs al, byte [0x8000000000060e2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200003e], ah
add byte [rsi], cl
add ah, bh
js 0x40ff7b
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
add byte ds:[rax], al
and al, byte [rax]
add byte [rax], ah
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add byte ds:[rax], al
and al, byte [rax]
add dl, al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmp eax, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbx*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x3f], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x403a], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200003f], dl
add byte [rsi], cl
add byte [rbx + rdi + 0x40], ah
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fnstcw word [rdi]
add byte [rax], al
and al, byte [rax]
add ah, cl
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax*2], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x410032
add byte [rax], al
and dword [rax], eax
sbb eax, dword [rax]
shl cl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x407a], dl
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cli
add byte [rax], al
and al, byte [rax]
add byte [rcx + rsi + 0x40], dl
add byte [rax], al
imul eax, dword [rax], 0
add byte [rax], al
add byte [r8], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [r8], al
and al, byte [rax]
add ah, bh
xchg dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x120000b8], bl
add byte [rdi], cl
add ah, dl
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
add byte [r8], al
and al, byte [rax]
add bl, bh
jo 0x4100cb
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add byte [r8], al
and al, byte [rax]
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [r8], al
and al, byte [rax]
add dh, bh
test dword [rax], eax
add byte [rax], al
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add dh, ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax*2], bh
add byte [rax], al
and al, byte [rax]
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4040], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [r8], al
and al, byte [rax]
add byte [rsi + 0x61], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000043], al
add byte [rsi], cl
add dh, ch
jge 0x410173
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000043], dh
add byte [rsi], cl
add byte [rip + 0x4040], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add byte [r8], al
and al, byte [rax]
add byte [rdx + 0x63], bh
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x44], dl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x4101ce
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4039], ah
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
add byte [rax], r8b
and al, byte [rax]
add byte [rsi + rax*4 + 0x40], ch
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [r8], r8b
and al, byte [rax]
add ah, bl
and eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x45], dl
add byte [rax], al
and al, byte [rax]
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rax*2 + 0x220000], bh
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
and al, byte [rax]
add byte [rax], dh
test dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x46], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
add dword [rax], 0
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x11000046], cl
add byte [rbx], bl
add byte [rax + 0x60e2], ch
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000046], dl
add byte [rsi], cl
add byte [rax + 0x31], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax*2 + 0x220000], ch
add byte [rbx], ah
jno 0x4102ab
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
add byte [rax], r8b
and al, byte [rax]
add byte [rdx], al
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [r8], r8b
and al, byte [rax]
add byte [rdx], dh
js 0x4102db
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x47], al
add byte [rax], al
and al, byte [rax]
add al, dh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000047], dl
add byte [rsi], cl
add byte [rcx + 0x4043], dl
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rsi + 0x22000047], ch
add byte [rsi], cl
add byte [rsi], al
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
jo 0x4102ea
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
and al, byte [rax]
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], ecx
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rax*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x48], ch
add byte [rax], al
and al, byte [rax]
add byte [rsp + rax*4 + 0x40], dh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0x48
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x404f], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [r8], al
and al, byte [rax]
add byte [rdx + 0x65], dh
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rcx + 0x49], bl
add byte [rax], al
and al, byte [rax]
add dh, ch
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000049], bl
add byte [rsi], cl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
add byte [r8], al
and al, byte [rax]
add byte [rdx + 0x407c], ch
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2100004a], bh
add byte [rax], dl
add byte [rax - 0x71], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx*2], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x6d], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200004a], ah
add byte [rsi], cl
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [r8], al
and al, byte [rax]
add ah, al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
and al, byte [rax]
add byte [rcx + 0x405c], dl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [r8], al
and al, byte [rax]
add byte [rcx + 0x4076], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200004b], cl
add byte [rsi], cl
add byte [rsi], bh
test dword [rax], eax
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fmul dword [rbx]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], r8b
and al, byte [rax]
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x4c], ah
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x406e], cl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
add byte [rax], r8b
and al, byte [rax]
add bl, ch
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4d], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x48], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, dword [rbp]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rsi*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1200004d], dh
add byte [rsi], cl
add byte [rdx + 0x1e], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200004d], bh
add byte [rsi], cl
add byte [rcx + rbp*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add ch, ch
add byte [r8], r8b
and al, byte [rax]
add byte [rax + rbx*2], al
add byte [rax], al
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
and al, byte [rax]
add byte [rax + 0x7d], cl
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add bh, bl
add byte [rax], r8b
and al, byte [rax]
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x4105b1
add byte [rax], al
and al, byte [rax]
add byte [rcx], cl
jno 0x4105ab
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200004f], dh
add byte [rsi], cl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x4105e1
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4037], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000050], dh
add byte [rsi], cl
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
push rax
add byte [rax], al
and al, byte [rax]
add byte [rdx + rcx*2 + 0x40], dh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, 0x22000050
add byte [rsi], cl
add bh, al
xor eax, 0x40
add byte [rax], al
jnp 0x4105ea
add byte [rax], al
add byte [rax], al
add byte [rax], al
fcom qword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rcx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
push rcx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x402a], cl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x51], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
xchg dword [rax], eax
add byte [rax], al
add byte [rax], al
pop qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
push rcx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4c], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
push rdx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4058], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
push rdx
add byte [rax], al
and al, byte [rax]
add dl, al
jne 0x4106b3
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000052], bh
add byte [rsi], cl
add byte [rsi], dl
jo 0x4106cb
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
push rdx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x404d], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
push rbx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x3a], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x53], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x407c], dh
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0x53
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4c], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
push rsp
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x32], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000054], cl
add byte [rsi], cl
add byte [rbp + rdi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
and al, byte [rax]
add dh, ch
add byte es:[rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
push rsp
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add edx, dword [rbp]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rcx*4], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x55], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4080], bl
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
push rbp
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
js 0x410720
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rax*4 + 0x40], bl
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x404a], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
push rsi
add byte [rax], al
and al, byte [rax]
add cl, al
cmp eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
push rdi
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbx*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x57], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi], bl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000057], bl
add byte [rsi], cl
add byte [rsi], ah
add byte [rax], 0
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
jle 0x41087b
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x22000058
add byte [rsi], cl
add byte [rax], bl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add dl, dl
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x404e], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x52], dl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ds, word [rcx]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4074], dl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000059], ch
add byte [rsi], cl
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop r10
add byte [rax], al
and al, byte [rax]
add byte [rsp + rcx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x75], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbx*2], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x403e], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbx*2], ah
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200005b], bh
add byte [rsi], cl
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
or ebx, dword [rax + rax]
adc al, byte [rax]
add byte [rax], dl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x5c], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200005c], dl
add byte [rsi], cl
add byte [rsi + 0x4074], dl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200005c], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
pop rsp
add byte [rax], al
and al, byte [rax]
add byte [rbx + rsi*2 + 0x40], ah
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x5d], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x7f], bl
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rax + rax*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
divps xmm0, xmmword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bh
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ebx, dword [rsi], 0
and dword [rax], eax
adc byte [rax], al
pop rax
lea eax, [rax]
add byte [rax], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rsi], ebx
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4070], ch
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
pop rsi
add byte [rax], al
and al, byte [rax]
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jl 0x4109e8
add byte [rax], al
adc al, byte [rax]
add byte [rax], dl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x410ad1
add byte [rax], al
and al, byte [rax]
add dl, ch
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x38], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x60], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
push rbp
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx + 0x22000060], ch
add byte [rsi], cl
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
and al, byte [rax]
add dl, bh
mov byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4058], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x410b63
add byte [rax], al
and al, byte [rax]
add dh, ah
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor esp, dword [rdx]
add byte [rdx], ah
add byte [rsi], cl
add ah, al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rsp + rcx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fldenv [rdx]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x41], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rbp + 0x22000063], dl
add byte [rsi], cl
add byte [rax], al
js 0x410bf3
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000063], bh
add byte [rsi], cl
add byte [rcx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte fs:[rax], al
and al, byte [rax]
add byte [rdx + 0x79], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte fs:[rax], al
and al, byte [rax]
add al, cl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
add byte fs:[rax], al
and al, byte [rax]
add byte [rsi], ch
add byte [eax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [0x220000], ah
add byte [rdi + rdi + 0x40], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x65], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4085], dh
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add byte gs:[rax], al
and al, byte [rax]
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
add byte gs:[rax], al
and al, byte [rax]
add byte [rsi + 0x28], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add ch, ch
add byte gs:[rax], al
and dword [rax], eax
adc byte [rax], al
mov byte [rdi + 0x40], cl
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rsi], esp
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x36], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x66], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4038], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x410d30
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x50], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
add byte gs:[rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add byte [rax], al
and al, byte [rax]
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x67], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x80], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add byte [eax], al
and al, byte [rax]
add byte [rdx], dh
push 0x40
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
push 0x220000
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x68], ah
add byte [rax], al
and al, byte [rax]
add byte [rax], al
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x22000068
add byte [rsi], cl
add dh, ah
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
imul eax, dword [rax], 0x10002100
add byte [rax - 0x72], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
imul eax, dword [rax], 0xe002200
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rcx + rbp*2 + 0x220000], cl
add byte [rbx + 0x406d], bl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
imul eax, dword [rax], 0xe002200
add dl, ah
je 0x410e1b
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4045], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x6a], ah
add byte [rax], al
and al, byte [rax]
add bh, ch
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200006a], bl
add byte [rsi], cl
add byte [rip + 0x407c], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
push 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
push 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rsi*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x6b], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x7d], cl
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add cl, bl
imul eax, dword [rax], 0
and al, byte [rax]
add byte [rax + 0x4e], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbp*2], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
xor eax, 0x40
add byte [rax], al
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x6c], cl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
ror byte [rsi + 0x40], 1
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
and al, byte [rax]
add dh, cl
ja 0x410f0b
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200006c], cl
add byte [rsi], cl
add byte [rbx], bh
push rsp
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
insb byte [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
insd dword [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x61], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200006d], cl
add byte [rsi], cl
add byte [rsi - 0x7e], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
outsb dx, byte [rsi]
add byte [rax], al
and al, byte [rax]
add bh, bh
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
outsb dx, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rbp - 0x7e], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
outsb dx, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rax], al
js 0x410fb3
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
outsb dx, byte [rsi]
add byte [rax], al
and al, byte [rax]
add ah, dl
add byte ds:[rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x6f], al
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x404f], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200006f], ah
add byte [rsi], cl
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
jo 0x410fcb
add byte [rdx], ah
add byte [rsi], cl
add byte [rax - 0x7e], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000070], bl
add byte [rsi], cl
add byte [rsi + 0x79], bh
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add ch, bh
jo 0x410ffb
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
jno 0x411013
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x67], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x60], al
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
test al, 0x14
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x71], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
add dword [rax], 0
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x71], dh
add byte [rax], al
and al, byte [rax]
add al, dh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
jno 0x411073
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4084], cl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000072], bl
add byte [rsi], cl
add byte [rdx + 0x4a], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x72], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
js 0x4110eb
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000072], dl
add byte [rsi], cl
add byte [rax + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x72, al
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
mov eax, 0x60e1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
jb 0x4110eb
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbp + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi*2], al
add byte [rax], al
and al, byte [rax]
add ah, bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
jae 0x41111b
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4060], dh
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000073], ch
add byte [rsi], cl
add byte [rsi - 0x7f], bl
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
je 0x41114b
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], al
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
jo 0x41115a
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x411163
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
add byte [eax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000074], al
add byte [rsi], cl
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
je 0x411193
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
fadd qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 0x74
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4c], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
jne 0x4111c3
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x403c], ah
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x4111db
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000075], ch
add byte [rsi], cl
add byte [rbx + 0x4037], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
jbe 0x41120b
add byte [rdx], ah
add byte [rsi], cl
add al, al
ja 0x411253
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x76], al
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
mov eax, 0x408d
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x20000076], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
jbe 0x411253
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
jbe 0x41126b
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdi + 0x40], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
ja 0x411283
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
ja 0x41129b
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
test byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000077], ah
add byte [rsi], cl
add byte [rbx + rax*4 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
ja 0x4112cb
add byte [rcx], ah
add byte [rax], dl
add byte [rax], ah
pop qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fidiv word [rdi]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x64], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
js 0x4112fb
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], bh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000078], cl
add byte [rsi], cl
add byte [rsi + 0x407c], bl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
js 0x41132b
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4074], dl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
js 0x411343
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x28], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rsi], cl
jns 0x41135b
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdi*2], dl
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
add byte gs:[rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
jns 0x41138b
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4037], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dl
jns 0x4113a3
add byte [rcx], ah
add byte [rax], dl
add byte [rax], bl
nop
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdi*2], al
add byte [rax], al
and al, byte [rax]
add ah, bh
jnp 0x411403
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
jp 0x4113d3
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200007a], cl
add byte [rsi], cl
add byte [rax + 0x4067], cl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add al, bl
jp 0x411403
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4049], dl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
jnp 0x41141b
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x50], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
push rsp
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x4114c5
add byte [rax], al
and al, byte [rax]
add al, bh
jp 0x411493
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200007b], dh
add byte [rsi], cl
add byte [rdx + rcx*2 + 0x40], dh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb edi, dword [rax + rax]
and al, byte [rax]
add byte [rax + 0x405f], dh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x7c], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rbx + 0x2200007c], bl
add byte [rsi], cl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add bh, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200007c], dh
add byte [rsi], cl
add byte [rip + 0x4049], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
jl 0x4114db
add byte [rcx], dl
add byte [rbx], bl
add al, dh
loop 0x411543
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi*2 + 0x220000], al
add byte [rdx], dl
jns 0x41153b
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rbp], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rax*2], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add ch, al
jge 0x411523
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
jge 0x41153b
add byte [rdx], ah
add byte [rsi], cl
add cl, dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x7e], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + rsi*2], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rsi], 0xe002200
add ah, dl
add byte ds:[rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
jle 0x411583
add byte [rdx], ah
add byte [rsi], cl
add dl, dh
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
jg 0x41159b
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x41], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200007f], dl
add byte [rsi], cl
add byte [rbx + 0x4075], dh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
jg 0x4115cb
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4037], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x80], ah
add byte [rax], al
and al, byte [rax]
add dh, dh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x41157a
add byte [rax], al
and al, byte [rax]
add byte [rdi + rdi + 0x40], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x11000080], bh
add byte [rbx], bl
add al, al
loop 0x41167b
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], 0
and al, byte [rax]
add byte [rax + 0x32], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add dword [rax], 0xe002200
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rax - 0x7f], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x404b], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
add dword [rax], 0xe002200
add dh, bh
push rbp
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x7f], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add byte [rax], al
and al, byte [rax]
add ch, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax*4], bh
add byte [rax], al
and dword [rax], eax
sbb eax, dword [rax]
sbb dl, ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x41166d
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000083], bl
add byte [rsi], cl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
add dword [rax], 0
and al, byte [rax]
add byte [rdx + 0x403a], dl
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0x84
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x406e], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x7c], bl
add byte [rax], al
and al, byte [rax]
add dh, bh
test dword [rax], eax
add byte [rax], al
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, dword [rax + rax + 0xe002200]
add bl, al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
test byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4f], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
test byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbp + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
test byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x5b], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
test dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add bl, ch
cmp eax, 0x40
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x7b], bh
add byte [rax], al
and al, byte [rax]
add dl, bl
add byte [rax], 0
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rsi + rax*4], cl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
add byte [rbp + 0x40], cl
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x24], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rsi + 0x220000], al
add byte [rax - 0x7d], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000086], al
add byte [rsi], cl
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000086], bh
add byte [rsi], cl
add byte [rsp + rdi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rax], eax
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x70], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
xchg dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rsi*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x79], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x7f], bl
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
xchg dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x78], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rbx - 0x78], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x6c], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x78], dh
add byte [rax], al
and al, byte [rax]
add ch, ch
add byte fs:[rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
mov byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0x89
add byte [rax], al
and al, byte [rax]
add byte [rdx + rdi*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx*4], dh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
jle 0x411973
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x8a
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
push rax
mov es, word [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rdx + 0x220000], cl
add byte [rsp + rdi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x4118fc
add byte [rax], al
and al, byte [rax]
add ah, dl
add byte ds:[rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200008a], dh
add byte [rsi], cl
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
mov al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add ch, al
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, dword [eax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
add dword [rax], 0
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x2200008b
add byte [rsi], cl
add byte [rax + rdi + 0x40], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x2200008c
add byte [rsi], cl
add byte [rdx], dl
jns 0x411a33
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x2200008c
add byte [rsi], cl
add byte [rdx + rdi*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
mov word [rax], es
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x6d], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
lea eax, [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x60e2], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx*4 + 0x220000], ah
add byte [rsi - 0x7e], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1200008d], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
lea eax, [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x38], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x72], cl
add byte [rax], al
and al, byte [rax]
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x72], dh
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
test al, 0xe1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200008e], al
add byte [rsi], cl
add byte [rsp + rsi*2], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200008e], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
mov es, word [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], dh
cmp eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
pop qword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x411ab1
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
js 0x411b6b
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200008f], ah
add byte [rsi], cl
add byte [rbp + rdi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisttp word [rdi + 0x220000]
add byte [rsi + 0x3b], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add eax, dword [rax]
add byte [rax], dl
add byte [rbx], bl
add byte [rax], dl
jrcxz 0x411bd3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx*4], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x411b2a
add byte [rax], al
and al, byte [rax]
add ah, bh
xchg dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add ah, cl
nop
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
movabs al, byte [0x180000000000408f]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
nop
add byte [rax], al
and al, byte [rax]
add byte [rbx], bl
jl 0x411c13
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc edx, dword [rcx + 0x220000]
add byte [rax], dl
and eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ecx
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4047], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx*4], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], cl
je 0x411c5b
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000091], ch
add byte [rsi], cl
add al, al
and eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x22000091
add byte [rsi], cl
add byte [rcx + 0x4043], dl
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add bl, bl
xchg eax, ecx
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
xchg eax, ecx
add byte [rax], al
and al, byte [rax]
add ah, bl
jo 0x411cbb
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
xchg eax, edx
add byte [rax], al
and al, byte [rax]
add byte [rax], al
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000092], dl
add byte [rsi], cl
add byte [rax], al
add dword [rax], 0
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
xchg eax, edx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x47], dh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000093], dl
add byte [rsi], cl
add byte [rsi], ch
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
xchg eax, ebx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x403d], ah
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000093], al
add byte [rsi], cl
add bh, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
xchg eax, ebx
add byte [rax], al
and al, byte [rax]
add bl, al
push rax
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
xchg eax, esp
add byte [rax], al
and al, byte [rax]
add dh, al
add dword [rax], 0
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x6c], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4087], ah
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
xchg eax, ebp
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x7f], bl
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000095], dl
add byte [rsi], cl
add byte [rdx + 0x407c], ch
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
xchg eax, ebp
add byte [rax], al
and al, byte [rax]
add ch, bh
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
xchg eax, esi
add byte [rax], al
and al, byte [rax]
add byte [rcx + rcx*2 + 0x40], cl
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x220000], 0xe
add byte [rsi], bh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ss:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdx*4 + 0x220000], bl
add byte [rdi + 0x4076], dh
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add bh, ch
xchg eax, esi
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rdi + 0x220000], edx
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rdx + 0x22000097], cl
add byte [rsi], cl
add byte [0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000097], ah
add byte [rsi], cl
add byte [rax + 0x3b], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
xchg eax, edi
add byte [rax], al
and al, byte [rax]
add byte [rdi + rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax + 0x220000], ebx
add byte [rdx + 0x3a], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbx*4], cl
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x68], ah
add byte [rax], al
and al, byte [rax]
add byte [rbx + rbx*2 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000098], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
cwde
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4080], bl
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x67], bl
add byte [rax], al
and al, byte [rax]
add dl, dl
pop rax
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx*4 + 0x220000], bl
add byte [rcx + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rcx + 0x12000099], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
cdq
add byte [rax], al
and al, byte [rax]
add ah, dl
mov byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4026], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x66], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x65], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x66], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x52], dl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr dword [rdx + 0x220000], 0xe
add byte [rsi], bh
push rcx
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rbx - 0x65], ah
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x407a], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
wait
add byte [rax], al
and al, byte [rax]
add bl, al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
mov eax, 0x60e1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
wait
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
call 0x4180d7
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x403c], ah
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add byte [rax], al
and al, byte [rax]
add al, dl
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200009c], al
add byte [rsi], cl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ficomp dword [rax + rax + 0xe002200]
add byte [rdx + 0x38], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200009d], bh
add byte [rsi], cl
add byte [rax], al
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x63], dl
add byte [rax], al
and al, byte [rax]
add cl, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200009d], bl
add byte [rsi], cl
add dh, cl
test byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rax], cl
sahf
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
mov byte [rax + rax*2], cl
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
sahf
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
sahf
add byte [rax], al
and al, byte [rax]
add byte [rbx + rax*4 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200009e], al
add byte [rsi], cl
add byte [rcx], dh
cmp eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x58], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
lahf
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4088], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x3a], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200009f], cl
add byte [rsi], cl
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200009f], bh
add byte [rsi], cl
add byte [rdx + 0x24], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
lahf
add byte [rax], al
and al, byte [rax]
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
movabs al, byte [0x8960000e00120000]
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0x832e000e00220000]
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rdx + 0x220000a0], al
add byte [rsi], cl
add byte [rsi + 0x404d], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
movabs al, byte [0x6858000e00220000]
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and ah, byte [rcx + 0x220000]
add ah, bl
jp 0x412243
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x5f], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
movabs eax, dword [0x7af8000e00220000]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000a1], ah
add byte [rsi], cl
add al, bl
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0x220000a1
add byte [rsi], cl
add ah, bh
jae 0x4122a3
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
movabs eax, dword [0x4faf000e00220000]
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x5e], dl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
push 0x408f
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x5e], ah
add byte [rax], al
and al, byte [rax]
add dh, bh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul esp, dword [rdx + 0x220000], 0xe
add byte [rcx + 0x4037], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000a2], dh
add byte [rsi], cl
add byte [rsi + 0x58], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
movabs byte [0x4c7c000e00220000], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
movabs dword [0x590a000e00220000], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000a3], ah
add byte [rsi], cl
add bl, cl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
and al, byte [rax]
add ch, bl
cmp eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x5c], ch
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4064], bl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add cl, ah
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x7e], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x5b], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000a5], dh
add byte [rsi], cl
add byte [rsi], cl
jbe 0x4123db
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsp + rsi*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0x78000e00220000a6]
add dword [rax], 0
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x7f], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x59], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rdi + 0x220000], ah
add byte [rbp + rax*4 + 0x40], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0xa8000e00220000a7]
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
test al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x66], al
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x58], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax + 0x220000], ch
add byte [rsi + 0x4084], cl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
test al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x50], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
test eax, 0x220000
add byte [rdx + 0x36], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x57], ah
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add dl, al
test eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000003], cl
add byte [rsi], cl
add byte [rsi], ah
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x4124bb
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4085], dh
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rdx + 0x220000], ebp
add al, bh
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x56], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x76], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x56], dh
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4f], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000aa], bh
add byte [rsi], cl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
stosd dword [rdi], eax
add byte [rax], al
and al, byte [rax]
add byte [rax], al
jo 0x4125a9
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
stosd dword [rdi], eax
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x404d], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x55], dh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
call 0x416653
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000ab], cl
add byte [rsi], cl
add byte [rdi + 0x4076], dh
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add ah, bl
stosd dword [rdi], eax
add byte [rax], al
and al, byte [rax]
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x220000ac
add byte [rsi], cl
add al, dl
jb 0x41264b
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x54], bh
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x7a], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
lodsb al, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x76], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
lodsd eax, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rcx + rcx*4], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp*4 + 0x220000], al
add byte [rdi + 0x4026], bh
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000ad], bl
add byte [rsi], cl
add byte [rdx], bh
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
lodsd eax, dword [rsi]
add byte [rax], al
and al, byte [rax]
add bh, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
scasb al, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4051], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x210000ae], al
add byte [rax], dl
add al, bl
mov word [rax], es
add byte [rax], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
scasb al, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax], al
js 0x412723
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000ae], bh
add byte [rsi], cl
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
scasb al, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rbx + rdi + 0x40], ah
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasd eax, dword [rdi]
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
js 0x4126b9
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x51], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
jge 0x412783
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000af], ch
add byte [rsi], cl
add byte [rbx + rcx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
scasd eax, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x402f], dl
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax + 0x220000], esi
add byte [rsi], bl
test byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rax + rsi*4 + 0x120000], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sal byte [rax + 0x220000], 0xe
add byte [rax + 0x7d], cl
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rdx - 0x4f], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x53], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x220000b1
add byte [rsi], cl
add byte [rdx + 0x70], ah
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rbx + 0x401a], dh
add byte [rax], al
add byte [rbp + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rdx + 0x220000], dh
add ch, bl
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x4e], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4072], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rsi*4 + 0x220000], ah
add byte [rsi + 0x4047], dl
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
mov dl, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rdi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi*4], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi*4], bh
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000b3], dl
add byte [rsi], cl
add byte [rbx + rdi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
mov bl, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
div byte [rbx + 0x220000]
add byte [rsi + rsi + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
mov ah, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x4c], bh
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
mov ah, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000b5], dl
add byte [rsi], cl
add ah, ah
jbe 0x41297b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x4128ff
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rbp + 0x401a], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x120000b5], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x120000b5], bh
add byte [rsi], cl
add byte [rax + 0x401c], dl
add byte [rax], al
add dl, dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add dl, cl
mov ch, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rsi*4], bl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x406e], bh
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x4a], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x403d], ah
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000b6], ah
add byte [rsi], cl
add byte [rax], bl
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
mov dh, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x63], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
mov bh, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx - 0x7e], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
mov bh, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, bh
js 0x412a83
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
mov bh, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
mov eax, 0x220000
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x120000b8], dl
add byte [rsi], cl
add al, dl
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x26000e00220000b8], eax
add byte [rax], 0
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
mov ecx, 0x220000
add byte [rsi], bh
push rcx
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add bl, cl
mov ecx, 0x220000
add al, ah
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
mov ecx, 0x220000
add byte [rsi + 0x407c], bl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
mov edx, 0x220000
add byte [rax + 0x404e], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rdx + 0x220000], bh
add byte [rsp + rdi*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
mov edx, 0x220000
add byte [rcx + rsi*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdi*4], dh
add byte [rax], al
and al, byte [rax]
add byte [rax], bh
jo 0x412b8b
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x45], ch
add byte [rax], al
and al, byte [rax]
add bl, al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x220000bb], ch
add byte [rsi], cl
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
mov ebx, 0x220000
add byte [rdx + 0x41], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rbx + 0x220000bc], al
add byte [rsi], cl
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
mov esp, 0x220000
add byte [rcx + 0x72], dh
add byte [rax], al
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs rbp, 0x55d8000e00220000
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000bd], bl
add byte [rsi], cl
add byte [rax + 0x407b], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
mov ebp, 0x220000
add byte [rdx], cl
je 0x412c4b
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000be], cl
add byte [rsi], cl
add byte [rax], al
add dword [rax], 0
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x42], cl
add byte [rax], al
and al, byte [rax]
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x220000be], bl
add byte [rsi], cl
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
mov esi, 0x220000
add bl, dl
jae 0x412cab
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
mov edi, 0x220000
add byte [0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x41], al
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x220000bf], ah
add byte [rsi], cl
add byte [rax + 0x404b], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x220000
add byte [rdx + 0x5b], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, eax
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000c0], bl
add byte [rsi], cl
add ch, bh
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
rol byte [rax], 0
and al, byte [rax]
add byte [rbx + rax*4 + 0x40], dl
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol dword [eax], 0
and al, byte [rax]
add byte [rsi + 0x3a], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000c1], ah
add byte [rsi], cl
add ah, ah
add dword [rax], 0
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
ret 0
and al, byte [rax]
add byte [rcx - 0x80], ah
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rbx + 0x220000c2], bh
add byte [rsi], cl
add byte [rbx], bl
imul eax, dword [rax], 0
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
ret 0
and al, byte [rax]
add byte [rax], al
js 0x412dcb
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000c3], bl
add byte [rsi], cl
add bh, bh
jge 0x412de3
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x120000c3], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000c3], bl
add byte [rsi], cl
add byte [rax + 0x4044], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x412da5
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add dword [rax], 0
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x3c], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000c4], bl
add byte [rsi], cl
add byte [rax + 0x75], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x406e], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
and al, byte [rax]
add byte [rsp + rax*2], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x200000c5
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x3b], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x407c], dh
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4025], dl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
jae 0x412eeb
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x3a], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
rcl byte [rdi], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000c6], cl
add byte [rsi], cl
add byte [rax], dl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x200000c6], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x220000c6], dh
add byte [rsi], cl
add byte [rdx], cl
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add dh, cl
mov byte [rax], 0
and al, byte [rax]
add al, ah
pop rax
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
mov byte [rax], 0
and al, byte [rax]
add byte [rbx + 0x78], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rdi - 0x39], dl
add byte [rax], al
and al, byte [rax]
add bl, ch
cmp eax, 0x40
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x39], bh
add byte [rax], al
and al, byte [rax]
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 0xc7
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
mov dword [rax], 0xe002200
add byte [rax + 0x7d], cl
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rbx - 0x38], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
enter 0, 0x12
add byte [rsi], cl
add byte [rsi + 0x1a], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
enter 0, 0x22
add byte [rsi], cl
add byte [rbx + rsi*2 + 0x40], ah
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb ecx, ecx
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
loopne 0x412f87
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, cs
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4026], ch
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x120000c9], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000c9], bh
add byte [rsi], cl
add byte [rax + 0x2f], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fxch st(0), st(1)
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
retf 0
and al, byte [rax]
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x41304c
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4032], dl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
retf 0
and al, byte [rax]
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0xca
add byte [rax], al
and al, byte [rax]
add bh, cl
cmp eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
retf 0
and al, byte [rax]
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx*8], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4065], ah
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx*8], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], ch
jp 0x413143
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
retf
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x7b], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
retf
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4c], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x34], cl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
adc byte [rdi + 0x40], cl
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rdi - 0x34], bl
add byte [rax], al
and al, byte [rax]
add cl, dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx*8 + 0x220000], bh
add byte [rdx + 0x63], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx*8 + 0x220000], ah
add ah, ch
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x33], bh
add byte [rax], al
and al, byte [rax]
add byte [rsp + rsi*2 + 0x40], bh
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x120000cd], ah
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
int 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x40], cl
add byte [rax], al
mov dh, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
jle 0x413233
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x413278
je 0x41327c
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x41322e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4132ac
jb 0x4132b2
pop rdi
jne 0x4132bb
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x4132b5
je 0x4132b1
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4132d1
jb 0x4132d7
pop rdi
jne 0x4132e0
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x4132e3
jns 0x4132d3
outsb dx, byte gs:[rsi]
je 0x4132ea
jns 0x41327a
jb 0x4132de
insd dword [rdi], dx
pop rdi
jne 0x4132f0
insd dword [rdi], dx
jns 0x413286
pop rdi
pop rdi
jb 0x4132ec
insd dword [rdi], dx
pop rdi
jne 0x4132fe
insd dword [rdi], dx
jns 0x4132f3
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4132fe
jns 0x4132fe
outsb dx, byte gs:[rsi]
je 0x413315
jns 0x4132a5
jae 0x413316
jne 0x41331b
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x413301
xor dword [rcx], edi
jo 0x413322
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x41333a
jb 0x41333d
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
xor qword [rax], r15
pop rdi
pop rdi
je 0x41333d
jb 0x41333c
pop rdi
movsxd rsi, dword [rcx + rbp*2 + 0x76]
pop rdi
jo 0x413359
add byte [rdi + 0x5a], bl
pop rdx
xor qword [rax], r15
pop rdi
pop rdi
je 0x413357
jb 0x413356
pop rdi
movsxd rsi, dword [rcx + rbp*2 + 0x76]
pop rdi
jo 0x413373
xor r14b, byte [r8]
pop rdi
pop rdi
je 0x41336d
jb 0x41336c
pop rdi
movsxd rsi, dword [rcx + rbp*2 + 0x76]
pop rdi
jo 0x413387
jb 0x413315
pop rdi
pop rdx
xor qword [rip + 0x74675f5f], r14
push 0x64616572
pop rdi
jno 0x41339c
insb byte [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor r14b, byte [rax]
pop rdi
pop rdi
je 0x41339e
jb 0x41339d
pop rdi
insd dword [rdi], dx
jne 0x4133b2
js 0x4133a0
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x50]
xor dword [rip + 0x72687470], esi
pop rdi
insd dword [rdi], dx
jne 0x4133c7
js 0x4133b5
je 0x413358
pop rdi
pop rdx
xor r14b, byte [rdx]
pop rdi
pop rdi
je 0x4133ca
jb 0x4133c9
pop rdi
insd dword [rdi], dx
jne 0x4133de
js 0x4133cc
jne 0x4133dd
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x50]
xor dword [rip + 0x72687470], esi
pop rdi
insd dword [rdi], dx
jne 0x4133f5
js 0x4133e3
je 0x413386
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4133ef
movsxd rdi, dword [rax + 0x78]
xor qword [rax], r15
pop rdi
pop rdi
js 0x4133fe
push 0x65676e61
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rsi
imul ebp, dword [rcx], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x413417
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rip + 0x78655f5f]
movsxd rbp, dword [rax + 0x61]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
pop rdi
jae 0x41343c
outsb dx, byte [rsi]
insb byte [edi], dx
push r8
imul ebp, dword [rcx], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x413445
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rdi]
pop rdi
pop rdi
js 0x413454
push 0x65676e61
pop rdi
outsb dx, byte [rsi]
pop rdi
pop rdi
imul esi, dword fs:[rbx + 0x70], 0x68637461
push r8
imul ebp, dword [rcx], 0x74535a5f
cmp byte [rdi + 0x5f], r11b
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x41346c
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41348b
jb 0x413496
add byte [rdi + 0x5a], bl
push rbx
je 0x413481
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4134a6
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x4134c1
je 0x4134b6
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4134cd
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x4134b5
xor dword [rax], esi
jb 0x4134d0
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4134c7
xor dword [rcx], esi
je 0x4134f1
jns 0x4134e0
je 0x4134f2
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4134da
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x413509
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
xor r9, qword [rcx + 0x4e]
add byte [rdi + 0x5a], r11b
pop rdi
add byte [rdi + 0x5a], r11b
xor r14b, byte [rax + 0x69]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
push rbp
push r10
pop rdi
push rbx
pop r10
add byte [r15 + 0x5a], r11b
xor qword [rax], r14
pop r8
pop rdi
push r12
add byte [rdi + 0x5a], bl
pop rdx
jae 0x413541
je 0x413520
jae 0x413546
push 0x45
xor dword [rcx], edi
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor dword [rdx], esi
jae 0x413565
je 0x413552
jb 0x413569
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x3931456a
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x72
push rdx
imul edx, dword [rbx + 0x30], 0x7645455f
jo 0x413586
push rsp
pop rdi
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x4135cc
je 0x4135c4
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x4135d2
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x4135e8
jb 0x4135eb
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x413600
pop rdi
pop r15
pop rdi
pop rdx
cmp byte [rbx + 0x65], dh
je 0x4135ed
imul esp, dword [rsp + rsi*2 + 0x68], 0x5f5f006a
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x41363e
jns 0x41363e
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x41364f
jns 0x41364f
jae 0x413666
jb 0x413669
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x413644
je 0x41365e
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x413695
je 0x413668
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41369b
je 0x413690
insb byte [rdi], dx
je 0x41369c
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x413675
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41369c
pop rax
push rsp
pop rdi
push r11
je 0x41368f
je 0x4136d1
jo 0x4136ca
jo 0x4136b8
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4136dd
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4136ac
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x4136fe
jb 0x4136d5
push rbx
push r11
je 0x4136c4
xor ebx, dword [rdi + 0x53]
jo 0x4136f6
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x413702
pop rdi
jo 0x413715
jb 0x413702
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4136e5
je 0x413719
jb 0x413718
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4136f0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x413737
push rax
jbe 0x413748
jbe 0x41371a
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413747
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x413764
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x52]
push rbx
pop rdi
push rax
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x413742
xor byte [rdi + 0x48], bl
pop rdi
jae 0x413781
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41376b
jae 0x413790
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x413774
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4137b3
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x4137cd
jo 0x4137d0
je 0x4137a1
jbe 0x4137c9
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4137af
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
movsxd rbp, dword [rdx + 0x63]
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x413811
je 0x4137e2
jbe 0x41380a
movsxd rsp, dword [rbp + 0x38]
outsb dx, byte [rsi]
js 0x41381c
push 0x76457261
add byte [rdi + 0x5a], bl
push rbx
je 0x4137e6
xor dword [rdi + 0x54], ebx
jne 0x41382a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x413841
jo 0x413844
je 0x413817
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41384a
je 0x41383f
insb byte [rdi], dx
je 0x41384b
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x413878
jo 0x41387b
je 0x41384e
imul ebp, dword [rbp + 0x44], 0x764530
pop rdi
pop rdx
push rbx
je 0x413847
xor byte [rdi + 0x48], bl
pop rdi
jae 0x413886
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x4138a0
xor byte [rbp + 0x45], al
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x413873
xor dword [rdi + 0x54], ebx
jne 0x4138b7
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41389e
jae 0x4138c3
push rbx
je 0x413892
xor al, 0x64
jne 0x4138d4
je 0x4138c9
insb byte [rdi], dx
je 0x4138d5
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x4138ca
push r12
pop rdi
jo 0x4138db
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4138c8
je 0x4138e2
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x413919
je 0x4138ec
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41391f
je 0x413914
insb byte [rdi], dx
je 0x413920
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x4138f8
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41391f
pop rax
push rsp
pop rdi
push r11
je 0x413912
je 0x413954
jo 0x41394d
jo 0x41393b
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x413960
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x413973
jo 0x413976
je 0x413947
jbe 0x41396f
movsxd rsp, dword [rbp + 0x44]
xor byte [rbp + 0x76], al
add byte [rdi + 0x5a], bl
push rbx
je 0x413947
imul esi, dword [rbx + 0x6e], 0x646e61
pop rdi
pop rdx
push rbx
je 0x413952
imul ebp, dword [rsi + 0x64], 0x32745349
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x413992
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x4139a6
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x49], 0x36327453
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x4139c9
outsb dx, byte gs:[rsi]
je 0x4139c1
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
push rbx
je 0x4139b4
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6c65685f
jo 0x4139f4
jb 0x4139da
pop rax
jae 0x413a06
push rbx
je 0x4139cc
pop rdi
pop rdi
outsd dx, dword [rsi]
jb 0x4139fb
push r11
je 0x4139d2
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push rbx
je 0x4139e7
movsxd rsp, dword gs:[rcx + 0x79]
push r12
pop rdi
xor al, 0x74
jns 0x413a2f
push r11
je 0x4139fc
imul esi, dword [rbx + 0x5f], 0x6d756e65
push r11
pop r15
xor eax, 0x756c6176
push r11
cmp byte [rdi + 0x49], bl
jo 0x413a35
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x413a59
push r11
cmp byte [rdi + 0x44], bl
jo 0x413a41
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x413a2f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x413a64
push r10
push rbx
je 0x413a3b
je 0x413a6f
jb 0x413a6e
xor ch, byte fs:[rcx + 0x64]
push rbx
je 0x413a46
jb 0x413a7d
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x413a81
pop rdi
jb 0x413a84
jb 0x413a88
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x413a9e
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x413a6c
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x413a90
cmp byte [rbp + 0x73], dl
je 0x413a90
jae 0x413ab5
push rbx
je 0x413a84
xor al, 0x64
jne 0x413ac6
je 0x413abb
insb byte [rdi], dx
je 0x413ac7
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x50], eax
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x413aec
jo 0x413aef
je 0x413ac0
jbe 0x413ae8
movsxd rsp, dword [rbp + 0x35]
ja 0x413af6
imul esi, dword [rbp + 0x49], 0x5f394152
movsxd rsp, dword [r11 + 0x49]
push rbx
je 0x413ad0
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x413ad8
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x413b20
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x413b0c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413b45
je 0x413b5a
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x413b2b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x413b6a
movsxd rbx, dword [rdi + 0x73]
je 0x413b78
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413b73
je 0x413b88
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
push rax
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x413b74
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x413bc5
je 0x413bba
outsb dx, byte [rsi]
push r8
push rbx
je 0x413b99
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x413bd8
movsxd rbx, dword [rdi + 0x73]
je 0x413be6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413be1
je 0x413bf6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insd dword [rdi], dx
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x413bd9
je 0x413c0d
jb 0x413c0c
xor al, 0x73
ja 0x413c0e
jo 0x413bf4
push rdx
push rbx
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x413c2f
jo 0x413c32
je 0x413c03
jbe 0x413c2b
movsxd rsp, dword [rbp + 0x31]
xor al, 0x77
jb 0x413c32
je 0x413c30
push rbx
imul esp, dword [rdi + 0x6e], 0x6e496465
je 0x413c1e
imul eax, dword [rbp + 0x45], 0x5f546350
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413c49
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x413c52
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413c46
push rbx
je 0x413c36
je 0x413c6a
jb 0x413c69
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x413c56
je 0x413c8a
jb 0x413c89
xor al, byte fs:[r13 + 0x4f]
push rbx
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x413ca9
jo 0x413cac
je 0x413c7d
jbe 0x413ca5
movsxd rsp, dword [rbp + 0x35]
ja 0x413cb3
imul esi, dword [rbp + 0x49], 0x31314152
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x413c88
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x413cc7
movsxd rbx, dword [rdi + 0x73]
je 0x413cd5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413cd0
je 0x413ce5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rax, dword [rbp + 0x45]
push rbx
je 0x413cc3
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x413ccb
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x413d13
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x413d07
je 0x413d3b
jb 0x413d3a
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x413d14
pop rdi
push rbx
jo 0x413d47
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x413d53
pop rdi
jae 0x413d59
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413d5d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x413d7a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x413d50
xor ebx, dword [rdi + 0x53]
jo 0x413d82
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x413d8e
pop rdi
jo 0x413da1
jb 0x413d8e
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x413d71
je 0x413da5
jb 0x413da4
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x413d7c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x413dc3
push rax
jbe 0x413dd4
jbe 0x413da6
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413dd3
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x413df0
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x413dca
jbe 0x413dfb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x413dd4
je 0x413e08
jb 0x413e07
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x413ded
je 0x413e21
jb 0x413e20
xor dword fs:[r13 + 0x4f], eax
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x413dfa
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x413e44
jb 0x413e47
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x413e10
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x413e4f
movsxd rbx, dword [rdi + 0x73]
je 0x413e5d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413e58
je 0x413e6d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x413e65
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x413e57
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x413e96
movsxd rbx, dword [rdi + 0x73]
je 0x413ea4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413e9f
je 0x413eb4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x413ec3
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x413ea7
je 0x413ee9
jo 0x413ee2
push r8
cmp byte [rbp + 0x73], dl
je 0x413ec3
jae 0x413ee8
push rbx
je 0x413eb7
xor al, 0x64
jne 0x413ef9
je 0x413eee
insb byte [rdi], dx
je 0x413efa
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x413ee8
xor dword [rdi + 0x54], ebx
jne 0x413f2c
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x413efd
xor al, 0x64
jne 0x413f3f
je 0x413f34
insb byte [rdi], dx
je 0x413f40
xor qword [r10], rsi
jne 0x413f55
jo 0x413f58
je 0x413f29
jbe 0x413f51
movsxd rsp, dword [rbp + 0x45]
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x413f2f
xor eax, 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
pop rdi
jae 0x413f72
jb 0x413f72
push rbx
je 0x413f49
je 0x413f7d
jb 0x413f7c
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x413f54
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x413f9b
push rax
jbe 0x413fac
jbe 0x413f7e
push r11
push r11
pop rdi
push r11
pop rdi
push r11
je 0x413f7d
xor byte [rbx + 0x68], dh
jb 0x413fb7
pop rdi
jo 0x413fca
jb 0x413fa1
push rsp
pop rdi
push r10
push r12
xor byte [rdi + 0x44], bl
jo 0x413fb2
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
cmp qword [r9 + 0x6e], rcx
jo 0x413fe5
je 0x413fb8
imul ebp, dword [rbp], 0x534e5a5f
je 0x413fae
xor bl, byte [rdi + 0x4d]
jns 0x413fe4
pop rdi
je 0x413fe7
jb 0x413fef
jae 0x414001
insb byte [rdi], dx
je 0x413fee
je 0x41400a
jo 0x413ff8
push r11
je 0x413fc9
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x414003
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x414017
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x76], 0x45324345
jbe 0x413fba
pop rdi
pop rdx
push rbx
push r11
je 0x413ff9
je 0x41402d
jb 0x41402c
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x414006
xor ebp, dword [rbp + 0x6f]
jbe 0x41403f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41401e
je 0x414052
jb 0x414051
xor al, byte fs:[r13 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41402c
xor bl, byte [rdi + 0x5f]
je 0x414061
push 0x65706c65
jb 0x414052
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x414057
jae 0x41407c
push r11
je 0x41404c
xor al, 0x64
jne 0x41408e
je 0x414083
insb byte [rdi], dx
je 0x41408f
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41406c
xor dword [rdi + 0x54], ebx
jne 0x4140b0
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x4140a7
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41408f
xor bl, byte [rdi + 0x44]
jae 0x4140d8
jb 0x4140d5
jns 0x4140c7
jne 0x4140e3
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x4140ec
jb 0x4140e9
jns 0x4140c5
push rax
push rbx
je 0x4140b8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4140f7
movsxd rbx, dword [rdi + 0x73]
je 0x414105
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x414100
je 0x414115
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x414109
pop rdi
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4140f1
xor dword [rdi + 0x54], ebx
jne 0x414135
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x41414c
jo 0x41414f
je 0x414122
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x414155
je 0x41414a
insb byte [rdi], dx
je 0x414156
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x414179
push r8
push rbx
je 0x414147
je 0x41417b
jb 0x41417a
push rdx
push r11
je 0x41414f
xor ebp, dword [rbp + 0x6f]
jbe 0x414188
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41416b
xor byte [rbx + 0x68], dh
jb 0x4141a5
pop rdi
jo 0x4141b8
jb 0x41418f
push rbx
je 0x414180
je 0x4141b4
jb 0x4141b3
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4141c3
pop rdi
jae 0x4141c1
xor dword [r9 + 0x4e], ecx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x4141d7
push r11
je 0x4141a0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4141e7
push rax
jbe 0x4141f8
jbe 0x4141ca
jbe 0x4141cf
push r11
pop rdi
push r12
pop rdi
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x41420f
jo 0x414212
je 0x4141e3
jbe 0x41420b
movsxd rsp, dword [rbp + 0x31]
xor dword [rdi + 0x72], esi
imul esi, dword [rbp + 0x53], 0x6e697274
push r8
movsxd rbp, dword [r13 + 0x62]
add byte [rdi + 0x5a], bl
push rbx
je 0x4141ef
xor al, 0x5f
push rbx
jo 0x414222
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x414217
imul r14, qword [rax], 0x49615345
push rbx
je 0x41420f
je 0x414243
jb 0x414242
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41421a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x414261
push rax
jbe 0x414272
jbe 0x414244
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
je 0x414255
push rdx
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41424c
xor dword [rdi + 0x54], ebx
jne 0x414290
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x414261
xor al, 0x64
jne 0x4142a3
je 0x414298
insb byte [rdi], dx
je 0x4142a4
xor qword [r8], rsi
jne 0x4142b9
jo 0x4142bc
je 0x41428f
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push rbx
je 0x41429e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4142dd
movsxd rbx, dword [rdi + 0x73]
je 0x4142eb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4142e6
je 0x4142fb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4142d4
pop rdi
push rbx
jo 0x414307
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x414313
pop rdi
jae 0x414319
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41431d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41433a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41430e
xor bl, byte [rdi + 0x5f]
je 0x414343
push 0x65706c65
jb 0x414334
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x414323
xor al, 0x64
jne 0x414365
je 0x41435a
insb byte [rdi], dx
je 0x414366
cmp qword [r9 + 0x6e], rcx
jo 0x41437c
je 0x41434f
imul ebp, dword [rbp + 0x45], 0x52454549
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x414349
xor dword [rdi + 0x54], ebx
jne 0x41438d
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x414384
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x4143b1
jo 0x4143b4
je 0x414385
jbe 0x4143ad
movsxd rsp, dword [rbp + 0x31]
xor byte [rsi + 0x6c], ah
jne 0x4143bf
push 0x6279614d
jbe 0x414355
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4143d1
jo 0x4143d4
je 0x4143a5
jbe 0x4143cd
movsxd rsp, dword [rbp + 0x39]
ja 0x4143db
imul esi, dword [rbp + 0x43], 0x45726168
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4143af
outsw dx, word [rsi]
jb 0x4143f3
jb 0x4143e3
push r10
jbe 0x4143fa
push r12
pop rdi
push rdx
push rbx
je 0x4143bf
jb 0x4143f6
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4143fa
pop rdi
jb 0x4143fd
jb 0x414401
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x414418
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4143e3
je 0x4143fd
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x414433
jo 0x414436
je 0x414409
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41443c
je 0x414431
insb byte [rdi], dx
je 0x41443d
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x414415
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41443c
pop rax
push rsp
pop rdi
push r11
je 0x41442f
je 0x414471
jo 0x41446a
jo 0x414458
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41447d
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41444b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41448c
push rbx
je 0x414463
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4144a2
movsxd rbx, dword [rdi + 0x73]
je 0x4144b0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4144ab
je 0x4144c0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4144a0
xor al, 0x5f
push rbx
jo 0x4144d3
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x4144c8
imul r14, qword [rax], 0x49615345
push rbx
je 0x4144c0
je 0x4144f4
jb 0x4144f3
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4144cb
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x414512
push rax
jbe 0x414523
jbe 0x4144f5
xor dword [rbp + 0x45], eax
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4144f5
xor dword [rdi + 0x54], ebx
jne 0x414539
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41450a
xor al, 0x64
jne 0x41454c
je 0x414541
insb byte [rdi], dx
je 0x41454d
cmp byte [r13 + 0x73], dl
je 0x414532
jae 0x414557
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push rbx
je 0x414544
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x414583
movsxd rbx, dword [rdi + 0x73]
je 0x414591
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41458c
je 0x4145a1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41457a
xor dword [rdi + 0x54], ebx
jne 0x4145be
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x4145d5
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4145a1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4145da
je 0x4145ef
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4145be
je 0x4145f2
jb 0x4145f1
cmp byte fs:[r13 + 0x61], r13b
js 0x4145f4
jae 0x414600
jp 0x4145fe
push r10
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x4145dd
je 0x414611
jb 0x414610
cmp byte fs:[rdx + 0x6f], ch
imul ebp, dword [rsi + 0x61], 0x45656c62
jbe 0x4145b9
pop rdi
je 0x414620
add byte [rdi + 0x5a], bl
push r11
je 0x4145f8
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41461c
xor dword [rax], esi
jne 0x41464c
jo 0x41464f
je 0x414622
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x414655
je 0x41464a
insb byte [rdi], dx
je 0x414656
push r11
xor byte [rdi + 0x45], bl
jo 0x41466d
jbe 0x4145fc
pop rdi
pop rdx
push rbx
je 0x414633
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x414674
push rbx
je 0x41464b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41468a
movsxd rbx, dword [rdi + 0x73]
je 0x414698
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x414693
je 0x4146a8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x41465f
pop rdi
pop rdx
push rbx
je 0x414697
xor ebx, dword [rdi + 0x53]
jo 0x4146c9
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4146d5
pop rdi
jo 0x4146e8
jb 0x4146d5
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4146b8
je 0x4146ec
jb 0x4146eb
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4146c3
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41470a
push rax
jbe 0x41471b
jbe 0x4146ed
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41471a
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x414737
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor dword [r13 + 0x53], eax
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x414715
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41474f
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x414763
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x43], 0x69694531
add byte [rdi + 0x5a], bl
push rbx
je 0x41473e
imul ebp, dword [rsi + 0x64], 0x32745349
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41477e
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x414792
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x4a], 0x36327453
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x4147b5
outsb dx, byte gs:[rsi]
je 0x4147ad
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
push rbx
je 0x4147a0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6c65685f
jo 0x4147e0
jb 0x4147c6
pop rax
jae 0x4147f2
push rbx
je 0x4147b8
pop rdi
pop rdi
outsd dx, dword [rsi]
jb 0x4147e7
push rbx
je 0x4147be
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push rbx
je 0x4147d3
movsxd rsp, dword gs:[rcx + 0x79]
push r12
pop rdi
xor al, 0x74
jns 0x41481b
push r11
je 0x4147e8
imul esi, dword [rbx + 0x5f], 0x6d756e65
push r11
pop r15
xor eax, 0x756c6176
push r11
cmp byte [rdi + 0x4a], bl
jo 0x414821
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x414845
push r11
cmp byte [rdi + 0x44], bl
jo 0x41482d
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414818
xor bl, byte [rdi + 0x5f]
je 0x41484d
push 0x65706c65
jb 0x41483e
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41482d
xor al, 0x64
jne 0x41486f
je 0x414864
insb byte [rdi], dx
je 0x414870
cmp byte [r13 + 0x73], dl
je 0x414855
jae 0x41487a
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x414852
xor dword [rdi + 0x54], ebx
jne 0x414896
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x41488d
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x414879
je 0x4148bb
jo 0x4148b4
push rax
xor dword [rdx], esi
jne 0x4148c5
jo 0x4148c8
je 0x414899
jbe 0x4148c1
movsxd rsp, dword [rbp + 0x53]
je 0x41488e
xor al, 0x64
jne 0x4148d0
je 0x4148c5
insb byte [rdi], dx
je 0x4148d1
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4148c6
je 0x4148f4
jb 0x4148fe
imul ebp, dword [rsi + 0x61], 0x40766574
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4148dc
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41491b
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x414935
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414908
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x414949
push r11
je 0x41491e
je 0x414952
jb 0x414951
push rbx
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x414979
je 0x41494a
jbe 0x414972
movsxd rsp, dword [rbp + 0x31]
xor esi, dword [rdx + 0x65]
push rbx
imul esp, dword [rdi + 0x6e], 0x6e496465
je 0x414964
imul eax, dword [rbp + 0x45], 0x5f545262
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
push rbx
je 0x414964
je 0x414998
jb 0x414997
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41496f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4149b6
push rax
jbe 0x4149c7
jbe 0x414999
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x414993
xor bl, byte [rdi + 0x5f]
je 0x4149c8
push 0x65706c65
jb 0x4149b9
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x4149a8
xor al, 0x64
jne 0x4149ea
je 0x4149df
insb byte [rdi], dx
je 0x4149eb
xor qword [r10], rsi
jne 0x414a00
jo 0x414a03
je 0x4149d4
jbe 0x4149fc
movsxd rsp, dword [rbp + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x4149d2
xor dword [rdi + 0x54], ebx
jne 0x414a16
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x414a0d
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4149fa
je 0x414a2e
jb 0x414a2d
xor ch, byte fs:[rcx + 0x64]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x414a0a
xor al, 0x5f
pop rdi
jae 0x414a46
jb 0x414a46
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x414a32
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x414a51
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x414a6e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rdi + rbx*2], esi
pop r15
je 0x414a6f
insb byte [rdi], dx
je 0x414a7b
jb 0x414a5d
push rdx
push r11
je 0x414a56
je 0x414a98
jo 0x414a86
pop rdi
imul ebp, dword [rsi + 0x66], 0x5a5f006f
xor qword [rax], r14
jne 0x414aa3
jo 0x414aa6
je 0x414a79
imul ebp, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
push rbx
je 0x414a74
movsxd rbp, dword [rdi + 0x70]
jns 0x414a8e
push rax
movsxd rdx, dword [rbx + 0x30]
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x414ac0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x414ac9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414abd
push rbx
je 0x414aae
je 0x414ae2
jb 0x414ae1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x414ab9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x414b00
push rax
jbe 0x414b11
jbe 0x414ae3
xor al, byte [r13 + 0x52]
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rsp
push rsi
cmp dword [rcx + 0x6e], ecx
jo 0x414b29
je 0x414afc
imul ebp, dword [rbp], 0x314e5a5f
xor cl, byte [rdi + 0x75]
je 0x414b33
jne 0x414b39
jbe 0x414b32
movsxd rsp, dword [rbp + 0x31]
cmp byte [rdi + 0x72], dh
imul esi, dword [rbp + 0x46], 0x74616f6c
imul ebp, dword [rsi + 0x67], 0x6e696f50
je 0x414b29
push r8
movsxd rdx, dword [rdi + rbx*2 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x414b22
xor byte [rdi + 0x48], bl
pop rdi
jae 0x414b61
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x414b35
xor al, 0x64
jne 0x414b77
je 0x414b6c
insb byte [rdi], dx
je 0x414b78
cmp byte [r13 + 0x73], dl
je 0x414b5d
jae 0x414b82
xor dword [rbp + 0x45], eax
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414b69
imul esi, dword [rbx + 0x69], 0x64666e
pop rdi
pop rdx
push r11
je 0x414b73
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x414b97
cmp byte [rbp + 0x73], dl
je 0x414b97
jae 0x414bbc
push rbx
je 0x414b8b
xor al, 0x64
jne 0x414bcd
je 0x414bc2
insb byte [rdi], dx
je 0x414bce
push r11
xor byte [rdi + 0x45], bl
jo 0x414be5
jbe 0x414b74
pop rdi
pop rdx
push rbx
je 0x414bab
xor al, 0x5f
pop rdi
jae 0x414be7
jb 0x414be7
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x414bd3
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x414bf2
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x414c0f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4e]
push rbx
je 0x414be5
je 0x414c19
jb 0x414c18
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x414bf0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x414c37
push rax
jbe 0x414c48
jbe 0x414c1a
push r11
push r11
pop rdi
push r11
pop r15
push r11
je 0x414c1a
cmp dword [rdi + 0x53], ebx
jo 0x414c4d
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x414c5d
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x414c57
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x414c43
xor byte [rdi + 0x48], bl
pop rdi
jae 0x414c82
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x414c9d
je 0x414c70
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x414caa
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x414cb3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414ca7
push rbx
je 0x414c99
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x414cd8
movsxd rbx, dword [rdi + 0x73]
je 0x414ce6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x414ce1
je 0x414cf6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x414ca2
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x414d1e
jo 0x414d21
je 0x414cf2
jbe 0x414d1a
movsxd rsp, dword [rbp + 0x35]
ja 0x414d28
imul esi, dword [rbp + 0x49], 0x534e4b52
je 0x414cf7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x414d36
movsxd rbx, dword [rdi + 0x73]
je 0x414d44
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x414d3f
je 0x414d54
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x4b]
movsxd rcx, dword [rcx + 0x45]
push rbx
je 0x414d37
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x414d3f
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x414d87
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x414da6
jno 0x414d8c
push rax
push rbx
je 0x414d7d
je 0x414db1
jb 0x414db0
push rdx
push r11
je 0x414d85
xor ebp, dword [rbp + 0x6f]
jbe 0x414dbe
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414da1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414dda
je 0x414def
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x414dbf
je 0x414df3
jb 0x414df2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x414dca
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x414e11
push rax
jbe 0x414e22
jbe 0x414df4
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x414e2e
jb 0x414e31
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push rbx
pop rdi
jbe 0x414e1d
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x414e23
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x414e0f
xor byte [rdi + 0x48], bl
pop rdi
jae 0x414e4e
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x414e68
jo 0x414e6b
je 0x414e3c
jbe 0x414e64
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414e46
xor ebp, dword [rbp + 0x6f]
jbe 0x414e7f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x414e5e
je 0x414e92
jb 0x414e91
jo 0x414ea1
jbe 0x414e34
pop rdi
pop rdx
ja 0x414eab
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [rip + 0x64634b5f], esi
jbe 0x414e90
jo 0x414e9d
push rsp
pop rdi
add byte [rdi + 0x49], bl
pop r15
jae 0x414ecb
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x414e98
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x414ee9
outsb dx, byte gs:[rsi]
je 0x414ee1
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x69]
jbe 0x414ee8
push r10
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414ee0
je 0x414efa
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x414f00
jae 0x414f25
push rbx
je 0x414ef4
xor al, 0x64
jne 0x414f36
je 0x414f2b
insb byte [rdi], dx
je 0x414f37
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x414f10
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x414f37
pop rax
push rsp
pop rdi
push r11
je 0x414f2a
je 0x414f6c
jo 0x414f65
jo 0x414f53
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x414f78
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x414f47
xor dword [rdi + 0x54], ebx
jne 0x414f8b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x414fa2
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414f72
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x414fb3
push rbx
je 0x414f8a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x414fc9
movsxd rbx, dword [rdi + 0x73]
je 0x414fd7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x414fd2
je 0x414fe7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x414f9e
pop rdi
pop rdx
push rbx
je 0x414fd4
pop rdi
pop rdi
je 0x415010
jb 0x415019
ja 0x41500b
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x415000
outsw dx, word [rsi]
jb 0x415044
jb 0x415034
push r11
je 0x415006
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x415057
outsb dx, byte gs:[rsi]
je 0x41504f
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
push r12
pop rdi
push rdx
push rbx
je 0x415045
jb 0x41507c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x415080
pop rdi
jb 0x415083
jb 0x415087
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x41509e
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x415068
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4150a7
insd dword [rdi], dx
xor byte [rbp + 0x53], al
je 0x41507c
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x4150cd
outsb dx, byte gs:[rsi]
je 0x4150c5
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4150cb
jae 0x415110
jo 0x4150e5
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x415117
je 0x4150ea
imul ebp, dword [rbp + 0x45], 0x5f545276
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4150e7
xor byte [rbx + 0x68], dh
jb 0x415121
pop rdi
jo 0x415134
jb 0x41510b
push rbx
je 0x4150fc
je 0x415130
jb 0x41512f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x415107
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41514e
push rax
jbe 0x41515f
jbe 0x415131
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41512c
xor byte [rbx + 0x68], dh
jb 0x415166
pop rdi
jo 0x415179
jb 0x415150
push rbx
je 0x415141
je 0x415175
jb 0x415174
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x415184
pop rdi
jae 0x415182
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x41515c
pop rdi
push rbx
jo 0x41518f
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41519b
pop rdi
jae 0x4151a1
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4151a5
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4151c2
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x4151a8
jae 0x4151cd
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4151a8
je 0x4151ea
jo 0x4151e3
push r8
jbe 0x4151f4
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4151c1
xor bl, byte [rdi + 0x5f]
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
jae 0x415202
jb 0x415202
pop rdi
jb 0x415211
insd dword [rdi], dx
pop rdi
je 0x41520e
imul esi, dword [rbx + 0x5f], 0x706c6568
jb 0x4151f9
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x415218
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x415235
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
jbe 0x415222
push r11
je 0x415205
xor al, 0x5f
pop rdi
jae 0x415241
jb 0x415241
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41522d
pop rax
push rsp
pop rdi
jp 0x4151eb
pop rdi
pop rdx
push rbx
je 0x415222
pop rdi
push rbx
jo 0x415255
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x415261
pop rdi
jae 0x415267
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41526b
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x415288
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x41529e
jb 0x41529b
jns 0x415273
jbe 0x415230
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41527c
jae 0x4152a1
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4152aa
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4152c3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41529c
je 0x4152d0
jb 0x4152cf
push rbx
je 0x4152a5
jbe 0x4152d6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4152c2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x415303
push r11
je 0x4152d8
je 0x41530c
jb 0x41530b
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x4152c3
pop rdi
pop rdx
push rbx
je 0x4152fa
xor byte [rdi + 0x48], bl
pop rdi
jae 0x415339
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41530d
xor al, 0x64
jne 0x41534f
je 0x415344
insb byte [rdi], dx
je 0x415350
cmp byte [r13 + 0x73], dl
je 0x415335
jae 0x41535a
xor dword [rbp + 0x45], eax
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x415370
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x415379
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41536d
push rbx
je 0x41535e
je 0x415392
jb 0x415391
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x415369
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4153b0
push rax
jbe 0x4153c1
jbe 0x415393
xor dword [r13 + 0x52], eax
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x415393
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4153b7
xor dword [rax], esi
jne 0x4153e7
jo 0x4153ea
je 0x4153bd
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4153f0
je 0x4153e5
insb byte [rdi], dx
je 0x4153f1
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x4153dc
jbe 0x415399
pop rdi
pop rdx
push rsp
push rbx
xor dword [rdx], esi
jne 0x415416
jo 0x415419
je 0x4153ea
jbe 0x415412
movsxd rsp, dword [rbp]
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41542a
je 0x4153fb
jbe 0x415423
movsxd rsp, dword [rbp + 0x34]
jb 0x415424
push r10
imul edx, dword [rbx + 0x31], 0x4545495f
push rbx
je 0x415408
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x415452
jb 0x415412
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x41546d
jb 0x41544f
je 0x41542f
xor al, 0x69
jae 0x415461
movsxd rbp, dword [rdi + 0x6e]
jbe 0x41546c
jb 0x41547d
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x415478
insb byte [rdi], dx
jne 0x41547f
xor al, 0x74
jns 0x415491
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x41547d
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x4154b0
je 0x415481
jbe 0x4154a9
movsxd rsp, dword [rbp + 0x43]
xor al, byte [rbp + 0x50]
movsxd rdx, dword [r11 + 0x31]
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x415484
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4154a8
cmp byte [rbp + 0x73], dl
je 0x4154a8
jae 0x4154cd
push rbx
je 0x41549c
xor al, 0x64
jne 0x4154de
je 0x4154d3
insb byte [rdi], dx
je 0x4154df
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x4154ca
jbe 0x415487
pop rdi
pop rdx
push rbx
je 0x4154bf
xor ebx, dword [rdi + 0x53]
jo 0x4154f1
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4154fd
pop rdi
jo 0x415510
jb 0x4154fd
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4154e0
je 0x415514
jb 0x415513
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4154eb
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x415532
push rax
jbe 0x415543
jbe 0x415515
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x415542
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41555f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
cmp byte [rdi + 0x4d], bl
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rax, dword [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x415546
je 0x41557a
jb 0x415579
xor cl, byte fs:[r9 + 0x52]
jbe 0x415593
push r12
pop rdi
jo 0x415577
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x415563
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41559c
je 0x4155b1
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x415580
je 0x4155b4
jb 0x4155b3
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor dword [rdi + 0x50], ebx
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4155be
xor dword [rdi + 0x54], ebx
jne 0x415602
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41561a
je 0x4155ed
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x415620
je 0x415615
insb byte [rdi], dx
je 0x415621
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push r11
je 0x415610
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41564f
movsxd rbx, dword [rdi + 0x73]
je 0x41565d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x415658
je 0x41566d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x74735f63
jb 0x415654
jbe 0x415651
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41568a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x415693
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x415687
push rbx
je 0x415677
je 0x4156ab
jb 0x4156aa
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4156c2
jb 0x4156c5
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x49], ebx
push rdx
jbe 0x4156d1
jbe 0x4156b1
push rsp
pop rdi
jo 0x4156b5
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4156a5
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x4156ef
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x4156fe
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41571c
outsb dx, byte gs:[rsi]
je 0x415714
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x49], ecx
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x415732
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x415732
jae 0x415757
xor eax, 0x766c6f73
jbe 0x4156fb
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x415777
jo 0x41577a
je 0x41574b
jbe 0x415773
movsxd rsp, dword [rbp + 0x35]
ja 0x415781
imul esi, dword [rbp + 0x49], 0x5f394152
movsxd rsp, dword [r11 + 0x4a]
push rbx
je 0x41575b
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x415763
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x4157ab
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4157dc
jo 0x4157df
je 0x4157bf
je 0x4157e0
imul ebp, dword [rsi + 0x67], 0x76453044
add byte [rdi + 0x5a], bl
push rbx
je 0x4157b2
jbe 0x4157e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4157bc
je 0x4157f0
jb 0x4157ef
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x415806
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r10
jbe 0x41581e
jbe 0x4157f2
jo 0x4157ff
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4157ea
xor dword [rdi + 0x54], ebx
jne 0x41582e
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x4157ff
xor al, 0x64
jne 0x415841
je 0x415836
insb byte [rdi], dx
je 0x415842
xor qword [r10], rsi
jne 0x415857
jo 0x41585a
je 0x41582b
jbe 0x415853
movsxd rsp, dword [rbp + 0x45]
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x415834
jae 0x415879
jo 0x41584e
push rax
xor dword [rax], esi
jne 0x41587f
jo 0x415882
je 0x415855
imul ebp, dword [rbp + 0x45], 0x5f545276
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x415852
xor byte [rbx + 0x68], dh
jb 0x41588c
pop rdi
jo 0x41589f
jb 0x415876
push rbx
je 0x415867
je 0x41589b
jb 0x41589a
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4158aa
pop rdi
jae 0x4158a8
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x415881
xor dword [rdi + 0x54], ebx
jne 0x4158c5
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x4158ac
jae 0x4158d1
push rbx
je 0x4158a0
xor al, 0x64
jne 0x4158e2
je 0x4158d7
insb byte [rdi], dx
je 0x4158e3
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x4158d8
push r12
pop rdi
jo 0x4158e9
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x4158d6
xor al, 0x64
jne 0x415918
je 0x41590d
insb byte [rdi], dx
je 0x415919
cmp qword [r9 + 0x6e], rcx
jo 0x41592f
je 0x415902
imul ebp, dword [rbp + 0x45], 0x50456c63
push rbx
xor byte [rdi], bl
jae 0x41593e
jb 0x415938
outsb dx, byte gs:[rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x415912
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x415948
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x415952
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x50], al
movsxd rdx, dword [rbx + 0x30]
pop rdi
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
insd dword [rdi], dx
insd dword [rdi], dx
movsxd rbp, dword [rbp + 0x70]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x415958
outsw dx, word [rsi]
jb 0x41599c
jb 0x41598c
push r10
xor dword [r15 + rbx*2], esi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41596a
jb 0x4159a1
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4159a5
pop rdi
jb 0x4159a8
jb 0x4159ac
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x4159c3
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41598d
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4159b1
cmp byte [rbp + 0x73], dl
je 0x4159b1
jae 0x4159d6
push rbx
je 0x4159a5
xor al, 0x64
jne 0x4159e7
je 0x4159dc
insb byte [rdi], dx
je 0x4159e8
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x415a0a
jo 0x415a0d
je 0x4159de
jbe 0x415a06
movsxd rsp, dword [rbp + 0x35]
ja 0x415a14
imul esi, dword [rbp + 0x49], 0x34314152
pop rdi
movsxd rsp, dword [r9 + r9*2 + 0x63]
push rbx
je 0x4159f0
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x4159f8
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x415a40
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x415a2d
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x415a67
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x415a7b
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x43], 0x69694532
add byte [rdi + 0x5a], bl
push rbx
je 0x415a59
outsw dx, word [rsi]
jb 0x415a9d
jb 0x415a8d
push r11
je 0x415a5f
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x415a99
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x415aad
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x525f544f
push rbx
je 0x415a83
jb 0x415aba
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x415abe
pop rdi
jb 0x415ac1
jb 0x415ac5
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x415adc
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x415aa6
xor dword [rdi + 0x54], ebx
jne 0x415aea
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x415abb
xor al, 0x64
jne 0x415afd
je 0x415af2
insb byte [rdi], dx
je 0x415afe
xor qword [r8], rsi
jne 0x415b13
jo 0x415b16
je 0x415ae9
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
insb byte [rdi], dx
outsd dx, dword [rsi]
jae 0x415abc
pop rdi
pop rdx
push rbx
je 0x415af3
xor bl, byte [rdi + 0x5f]
jae 0x415b2f
jb 0x415b2f
pop rdi
jo 0x415b42
jb 0x415b19
push rbx
je 0x415b0a
je 0x415b3e
jb 0x415b3d
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x415b4d
pop rdi
jae 0x415b4b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x415b4f
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x415b6c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x415b73
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x415b8c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x415b65
je 0x415b99
jb 0x415b98
push rbx
je 0x415b6e
jbe 0x415b9f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
insd dword [rdi], dx
imul ebp, dword [rsi], 0x74736574
outsd dx, dword [rsi]
jne 0x415bcf
je 0x415b63
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x415bdf
jo 0x415be2
je 0x415bb3
jbe 0x415bdb
movsxd rsp, dword [rbp + 0x35]
ja 0x415be9
imul esi, dword [rbp + 0x49], 0x5f364152
movsxd rbp, dword [r9 + 0x4a]
push rdx
cmp dword [r15 + 0x53], ebx
xor dword [rdi + 0x63], ebx
push rbx
je 0x415bcb
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x415bd3
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
cmp byte [rdi + 0x4f], bl
push rsp
xor byte [rdi + 0x44], bl
jo 0x415c1b
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x415c08
xor byte [rdi + 0x5f], bl
jne 0x415c49
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x415c64
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x415c65
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x415c79
push r11
je 0x415c35
xor ebp, dword [rbp + 0x6f]
jbe 0x415c6e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x415c4f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x415c8e
movsxd rbx, dword [rdi + 0x73]
je 0x415c9c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x415c97
je 0x415cac
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x415c92
je 0x415cac
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x415ce2
jo 0x415ce5
je 0x415cb6
jbe 0x415cde
movsxd rsp, dword [rbp + 0x53]
je 0x415cab
xor al, 0x64
jne 0x415ced
je 0x415ce2
insb byte [rdi], dx
je 0x415cee
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x415cc7
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x415cee
pop rax
push rsp
pop rdi
push r11
je 0x415ce1
je 0x415d23
jo 0x415d1c
jo 0x415d0a
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x415d2f
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x415d03
je 0x415d37
jb 0x415d36
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x415d46
pop rdi
jae 0x415d44
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x415d1b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x415d54
je 0x415d69
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x415d39
je 0x415d6d
jb 0x415d6c
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x415d44
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x415d8b
push rax
jbe 0x415d9c
jbe 0x415d6e
jae 0x415da7
jb 0x415da4
jns 0x415d80
push rbx
pop rdi
jbe 0x415d90
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x415d7c
xor dword [rdi + 0x54], ebx
jne 0x415dc0
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x415d91
xor al, 0x64
jne 0x415dd3
je 0x415dc8
insb byte [rdi], dx
je 0x415dd4
cmp byte [r13 + 0x73], dl
je 0x415db9
jae 0x415dde
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x415dbe
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x415df4
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x415dfe
pop rdi
xor byte [rbp + 0x50], al
movsxd rdx, dword [rbx + 0x30]
pop rdi
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x415de9
xor bl, byte [rdi + 0x5f]
je 0x415e1e
push 0x65706c65
jb 0x415e0f
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x415e44
jo 0x415e47
je 0x415e18
jbe 0x415e40
movsxd rsp, dword [rbp + 0x49]
push rbx
je 0x415e0e
xor al, 0x64
jne 0x415e50
je 0x415e45
insb byte [rdi], dx
je 0x415e51
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x415e2c
xor dword [rdi + 0x54], ebx
jne 0x415e70
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x415e67
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x415e64
jae 0x415e89
xor eax, 0x74697277
imul r8d, dword fs:[r8 + rsi*2 + 0x4f], 0x5f005f54
pop rdx
push rsp
push rbx
push rbx
je 0x415e75
je 0x415ea9
jb 0x415ea8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x415e80
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x415ec7
push rax
jbe 0x415ed8
jbe 0x415eaa
add byte [r15 + 0x5a], r11b
push rbx
je 0x415ea5
jbe 0x415ed6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x415eaf
je 0x415ee3
jb 0x415ee2
push rbx
push r11
xor byte [rdi + 0x45], bl
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x415e90
pop rdi
pop rdx
push rbx
je 0x415ec7
xor dword [rdi + 0x54], ebx
jne 0x415f0b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x415f22
jo 0x415f25
je 0x415ef6
jbe 0x415f1e
movsxd rsp, dword [rbp + 0x53]
je 0x415eeb
xor al, 0x64
jne 0x415f2d
je 0x415f22
insb byte [rdi], dx
je 0x415f2e
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x415f5b
jo 0x415f5e
je 0x415f2f
jbe 0x415f57
movsxd rsp, dword [rbp + 0x35]
ja 0x415f65
imul esi, dword [rbp + 0x49], 0x5f364152
movsxd rbp, dword [r9 + 0x49]
push rdx
cmp dword [r15 + 0x53], ebx
xor dword [rdi + 0x63], ebx
push rbx
je 0x415f47
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x415f4f
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
cmp byte [rdi + 0x4f], bl
push rsp
xor byte [rdi + 0x44], bl
jo 0x415f97
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x415f85
imul bp, word [rsp + rbp*2 + 0x49], 0x6350
movsxd rax, dword [rbp + 0x76]
push rsp
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x415f9c
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [r13 + 0x4e]
push rbx
je 0x415fb2
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x416017
jo 0x416005
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x415fdc
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41601b
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x416005
jae 0x41602a
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x416018
je 0x41604c
jb 0x41604b
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x416025
xor byte [rdi + 0x5f], bl
je 0x416060
jb 0x416069
ja 0x41605b
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41606a
pop rdi
jb 0x416078
outsd dx, dword [rsi]
jb 0x416059
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x416051
je 0x41606b
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x4160a1
jo 0x4160a4
je 0x416077
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4160aa
je 0x41609f
insb byte [rdi], dx
je 0x4160ab
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x416084
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4160ab
pop rax
push rsp
pop rdi
push r11
je 0x41609e
je 0x4160e0
jo 0x4160d9
jo 0x4160c7
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4160ec
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4160bb
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4160fa
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x416114
jo 0x416117
je 0x4160e8
jbe 0x416110
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rsp
push rsi
push rbx
je 0x4160f5
pop rdi
push rbx
jo 0x416128
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x416134
pop rdi
jae 0x41613a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41613e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41615b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x416131
outsw dx, word [rsi]
jb 0x416175
jb 0x416165
push r10
push rax
cmp byte [rbp + 0x73], dl
je 0x41614d
jae 0x416172
push r12
pop rdi
push rdx
push rbx
je 0x416147
jb 0x41617e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x416182
pop rdi
jb 0x416185
jb 0x416189
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x4161a0
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41616a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4161a3
je 0x4161b8
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x416187
je 0x4161bb
jb 0x4161ba
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4161d3
jb 0x4161d6
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor byte [rdi + 0x49], bl
push rdx
jbe 0x4161e2
jbe 0x4161c4
push rbx
xor dword [rdi + 0x50], ebx
push rsp
pop rdi
jo 0x4161ca
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4161fb
jo 0x4161fe
je 0x4161cf
jbe 0x4161f7
movsxd rsp, dword [rbp + 0x35]
ja 0x416205
imul esi, dword [rbp + 0x49], 0x5f334152
movsxd rdx, dword [r10 + 0x4b]
push rbx
je 0x4161da
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x416219
movsxd rbx, dword [rdi + 0x73]
je 0x416227
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x416222
je 0x416237
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x41621b
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x416223
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41626b
push rsp
xor dword [rdi], ebx
insd dword [rdi], dx
insd dword [rdi], dx
jae 0x41628a
je 0x416267
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x41626c
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x416290
xor dword [rdx], esi
jne 0x4162c0
jo 0x4162c3
je 0x416294
jbe 0x4162bc
movsxd rsp, dword [rbp + 0x53]
je 0x416289
xor al, 0x64
jne 0x4162cb
je 0x4162c0
insb byte [rdi], dx
je 0x4162cc
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x4162b7
jbe 0x416274
pop rdi
pop rdi
jae 0x4162e8
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x4162b9
je 0x4162d3
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x416309
jo 0x41630c
je 0x4162dd
jbe 0x416305
movsxd rsp, dword [rbp + 0x53]
je 0x4162d2
xor al, 0x64
jne 0x416314
je 0x416309
insb byte [rdi], dx
je 0x416315
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x4162ee
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x416315
pop rax
push rsp
pop rdi
push r11
je 0x416308
je 0x41634a
jo 0x416343
jo 0x416331
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x416356
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x416324
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x41635a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x416364
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x50], al
movsxd rdx, dword [r8 + 0x63]
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x416366
jae 0x41638b
cmp byte [rdi + 0x65], ah
outsb dx, byte [rsi]
jb 0x41638e
je 0x416394
imul eax, dword [rax], 0x534e5a5f
je 0x41636a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4163b1
push rax
jbe 0x4163c2
jbe 0x416394
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x4a], ebx
push r12
pop rdi
jo 0x4163af
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x4163e2
je 0x4163b3
jbe 0x4163db
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x4c], 0x7265776f
movsxd r8, dword [r8]
pop rdi
pop rdx
push rsp
push rsi
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x4163fe
je 0x4163cf
jbe 0x4163f7
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x4163c8
xor byte [rbx + 0x68], dh
jb 0x416402
pop rdi
jo 0x416415
jb 0x4163ec
push rbx
je 0x4163dd
je 0x416411
jb 0x416410
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4163e8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41642f
push rax
jbe 0x416440
jbe 0x416412
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x416416
cmp dword [rdi + 0x53], ebx
jo 0x416449
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x416459
push rdx
push r12
pop rdi
jo 0x41644f
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41643b
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41645f
xor dword [rax], esi
jne 0x41648f
jo 0x416492
je 0x416465
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x416498
je 0x41648d
insb byte [rdi], dx
je 0x416499
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r8], rsi
jne 0x4164bc
jo 0x4164bf
je 0x416492
imul ebp, dword [rbp], 0x74535a5f
cmp byte [rdi + 0x44], bl
jae 0x4164ce
jb 0x4164cb
jns 0x4164a7
push rbx
je 0x416499
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4164d8
movsxd rbx, dword [rdi + 0x73]
je 0x4164e6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4164e1
je 0x4164f6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x4164e5
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4164d5
pop rdi
jae 0x416516
jb 0x416513
jns 0x4164ef
push rbx
je 0x4164df
je 0x416513
jb 0x416512
jbe 0x416502
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4164ec
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41652b
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x416545
jo 0x416548
je 0x41651b
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x416521
xor ebx, dword [rdi + 0x5f]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416569
push r10
jbe 0x416579
push rbx
je 0x41653c
cmp dword [rdi + 0x42], ebx
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416583
pop rdi
push 0x65706c65
jb 0x416569
push rsp
pop rdi
jo 0x41657a
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x4165a8
jo 0x416596
push r11
xor ebx, dword [rdi + 0x44]
jo 0x416588
push rbx
xor al, 0x5f
add byte [rax + 0x74], dh
push 0x64616572
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x4165b0
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x41658f
xor bl, byte [rdi + 0x5f]
je 0x4165c4
push 0x65706c65
jb 0x4165b5
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x4165a4
xor al, 0x64
jne 0x4165e6
je 0x4165db
insb byte [rdi], dx
je 0x4165e7
xor qword [r8], rsi
jne 0x4165fc
jo 0x4165ff
je 0x4165d2
imul ebp, dword [rbp + 0x45], 0x52454549
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x4165cc
xor dword [rdi + 0x54], ebx
jne 0x416610
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x416607
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4165ee
xor bl, byte [rdi + 0x5f]
je 0x416623
push 0x65706c65
jb 0x416614
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x416649
jo 0x41664c
je 0x41661d
jbe 0x416645
movsxd rsp, dword [rbp + 0x4a]
push rbx
je 0x416613
xor al, 0x64
jne 0x416655
je 0x41664a
insb byte [rdi], dx
je 0x416656
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x416631
xor dword [rdi + 0x54], ebx
jne 0x416675
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41666c
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x416653
xor bl, byte [rdi + 0x5f]
je 0x416688
push 0x65706c65
jb 0x416679
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x4166ae
jo 0x4166b1
je 0x416684
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x4166b8
je 0x4166ad
insb byte [rdi], dx
je 0x4166b9
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x416696
xor dword [rdi + 0x54], ebx
jne 0x4166da
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x4166d1
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
push r11
je 0x4166bd
xor ebx, dword [rdi + 0x53]
jo 0x4166ef
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4166fb
pop rdi
jo 0x41670e
jb 0x4166fb
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4166de
je 0x416712
jb 0x416711
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4166e9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416730
push rax
jbe 0x416741
jbe 0x416713
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416740
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41675d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x416733
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x416774
push r11
je 0x416749
je 0x41677d
jb 0x41677c
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x416734
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41679d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4167a6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41679a
push rbx
je 0x41678c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4167cb
movsxd rbx, dword [rdi + 0x73]
je 0x4167d9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4167d4
je 0x4167e9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4167d1
xor bl, byte [rdi + 0x4d]
jns 0x416807
pop rdi
je 0x41680a
jb 0x416812
jae 0x416824
insb byte [rdi], dx
je 0x416811
je 0x41682d
jo 0x41681b
push r11
je 0x4167ec
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x416826
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41683a
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x76], 0x45314345
jbe 0x4167dd
pop rdi
pop rdx
push rbx
je 0x416813
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41685d
jb 0x416860
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x416827
je 0x41685b
jb 0x41685a
push r11
xor byte [rdi + 0x45], bl
jbe 0x41684f
push rsp
pop rdi
jo 0x416853
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x416884
jo 0x416887
je 0x416867
je 0x416888
imul ebp, dword [rsi + 0x67], 0x76453244
add byte [rdi + 0x5a], bl
push rbx
je 0x416855
xor byte [rbx + 0x68], dh
jb 0x41688f
pop rdi
jo 0x4168a2
jb 0x416879
push rbx
je 0x41686a
je 0x41689e
jb 0x41689d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x416875
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4168bc
push rax
jbe 0x4168cd
jbe 0x41689f
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x4168a3
cmp dword [rdi + 0x53], ebx
jo 0x4168d6
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x4168e6
push rdx
push r12
pop rdi
jo 0x4168dc
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4168c8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41690f
push rax
jbe 0x416920
jbe 0x4168f2
xor al, byte [r13 + 0x4f]
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x416933
jo 0x416936
je 0x416916
je 0x416937
imul ebp, dword [rsi + 0x67], 0x4e5a5f00
push rbx
je 0x416906
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x416945
movsxd rbx, dword [rdi + 0x73]
je 0x416953
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41694e
je 0x416963
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41694d
xor ebp, dword [rbp + 0x6f]
jbe 0x416986
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x416967
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4169a6
movsxd rbx, dword [rdi + 0x73]
je 0x4169b4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4169af
je 0x4169c4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x53]
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push r11
je 0x4169a0
pop rdi
push rbx
jo 0x4169d3
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4169df
pop rdi
jae 0x4169e5
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4169e9
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x416a06
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x416a1c
jo 0x416a1f
je 0x4169f2
imul ebp, dword [rbp + 0x43], 0x38504532
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4169fa
jbe 0x416a2b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x416a04
je 0x416a38
jb 0x416a37
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x416a1d
je 0x416a51
jb 0x416a50
xor cl, byte fs:[r9 + 0x52]
jbe 0x416a6a
push r12
pop rdi
jo 0x416a4e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x416a3a
xor dword [rdi + 0x54], ebx
jne 0x416a7e
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x416a95
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x416aaa
jo 0x416aad
je 0x416a80
imul ebp, dword [rbp + 0x31], 0x69727733
je 0x416aa9
push rsp
outsd dx, dword [rsi]
jbe 0x416ab3
movsxd rsp, dword [rbp + 0x45]
push 0
pop rdi
pop rdx
xor qword [rax], r14
jne 0x416acb
jo 0x416ace
je 0x416aa1
imul ebp, dword [rbp + 0x43], 0x4b504532
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x416a9b
xor eax, 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
pop rdi
jae 0x416ade
jb 0x416ade
push rbx
je 0x416ab5
je 0x416ae9
jb 0x416ae8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x416ac0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416b07
push rax
jbe 0x416b18
jbe 0x416aea
push r11
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x416ae9
xor byte [rbx + 0x68], dh
jb 0x416b23
pop rdi
jo 0x416b36
jb 0x416b0d
push rsp
pop rdi
push r10
push r12
xor byte [rdi + 0x44], bl
jo 0x416b1e
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x416b10
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x416b4f
movsxd rbx, dword [rdi + 0x73]
je 0x416b5d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x416b58
je 0x416b6d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
ja 0x416b94
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [rip + 0x64634b5f], esi
jbe 0x416b79
jo 0x416b86
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x416b72
je 0x416b8c
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x416b92
jae 0x416bb7
push rbx
je 0x416b86
xor al, 0x64
jne 0x416bc8
je 0x416bbd
insb byte [rdi], dx
je 0x416bc9
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x416ba2
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x416bc9
pop rax
push rsp
pop rdi
push r11
je 0x416bbc
je 0x416bfe
jo 0x416bf7
jo 0x416be5
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x416c0a
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x416bd9
xor ebp, dword [rbp + 0x6f]
jbe 0x416c12
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x416bf3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x416c32
movsxd rbx, dword [rdi + 0x73]
je 0x416c40
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x416c3b
je 0x416c50
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x53], eax
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x416c2a
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push 0x63
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416c6f
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x416c60
pop rdi
pop rdi
imul esi, dword [rbx + 0x5f], 0x65747962
push r12
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
jbe 0x416c9b
insb byte [rdi], dx
jne 0x416ca2
push r8
push rbx
xor ebx, dword [rdi + 0x45]
pop rdi
pop rdi
je 0x416cc1
jo 0x416caf
push r11
xor eax, 0x525f545f
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x416c8d
xor dword [rdi + 0x54], ebx
jne 0x416cd1
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x416ce8
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x416cba
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x416cef
push r10
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x416d07
je 0x416cda
imul ebp, dword [rbp + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x416d05
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x416d09
pop rdi
jb 0x416d0c
jb 0x416d10
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x416d26
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x416cf4
xor bl, byte [rdi + 0x5f]
jae 0x416d30
jb 0x416d30
pop rdi
jo 0x416d43
jb 0x416d1a
push rbx
je 0x416d0b
je 0x416d3f
jb 0x416d3e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x416d16
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416d5d
push rax
jbe 0x416d6e
jbe 0x416d40
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416d66
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x416d83
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x416d5d
je 0x416d91
jb 0x416d90
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x416d68
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416daf
push rax
jbe 0x416dc0
jbe 0x416d92
pop rdi
pop r15
jb 0x416dca
outsb dx, byte [rsi]
jbe 0x416d59
pop rdi
pop rdx
jae 0x416dc3
je 0x416da6
imul ebp, dword [rsp + rbp*2 + 0x63], 0x615f5f00
jae 0x416ddd
jb 0x416de1
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rsi
push rbx
je 0x416db9
xor ebx, dword [rdi + 0x53]
jo 0x416deb
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x416df7
pop rdi
jo 0x416e0a
jb 0x416df7
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x416dda
je 0x416e0e
jb 0x416e0d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x416de5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416e2c
push rax
jbe 0x416e3d
jbe 0x416e0f
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416e3c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x416e59
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x416e6f
jo 0x416e72
je 0x416e43
jbe 0x416e6b
movsxd rsp, dword [rbp + 0x35]
ja 0x416e79
imul esi, dword [rbp + 0x49], 0x4e454564
push rbx
je 0x416e4b
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x416e53
imul esi, dword [rbx + 0x5f], 0x616f6c66
je 0x416e95
outsb dx, byte [rsi]
pop rdi
jo 0x416ea0
imul ebp, dword [rsi + 0x74], 0x455f5449
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x416e87
je 0x416ebb
jb 0x416eba
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x416eca
pop rdi
jae 0x416ec8
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
push rbx
je 0x416e9e
xor bl, byte [rdi + 0x5f]
je 0x416ed3
push 0x65706c65
jb 0x416ec4
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x416eb3
xor al, 0x64
jne 0x416ef5
je 0x416eea
insb byte [rdi], dx
je 0x416ef6
xor qword [r10], rsi
jne 0x416f0b
jo 0x416f0e
je 0x416edf
jbe 0x416f07
movsxd rsp, dword [rbp + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x416edd
xor dword [rdi + 0x54], ebx
jne 0x416f21
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x416f18
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x416f45
jo 0x416f48
je 0x416f19
jbe 0x416f41
movsxd rsp, dword [rbp + 0x31]
ja 0x416f50
imul esi, dword [rbp + 0x55], 0x6769736e
outsb dx, byte [rsi]
outsb dx, byte fs:[rsi]
je 0x416f36
push 0x45
push r8
movsxd rdx, dword [rdi + rbx*2 + 0x53]
xor dword [rdi], ebx
movsxd rbp, dword [rdi + rbp*2 + 0x63]
imul eax, dword [rax + 0x40], 0x47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x416f42
xor dword [rdi + 0x54], ebx
jne 0x416f86
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x416f9d
jo 0x416fa0
je 0x416f71
jbe 0x416f99
movsxd rsp, dword [rbp + 0x53]
je 0x416f66
xor al, 0x64
jne 0x416fa8
je 0x416f9d
insb byte [rdi], dx
je 0x416fa9
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x416f9e
push r12
pop rdi
jo 0x416faf
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416fcd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x416fd6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x416fca
push rbx
je 0x416fb6
xor ebx, dword [rdi + 0x53]
jo 0x416fe8
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x416ff4
pop rdi
jo 0x417007
jb 0x416ff4
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x416fd7
je 0x41700b
jb 0x41700a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x416fe2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x417029
push rax
jbe 0x41703a
jbe 0x41700c
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41704e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
pop r15
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
jae 0x417065
je 0x417044
jae 0x41706a
push 0
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x417083
jo 0x417086
je 0x417066
je 0x417087
imul ebp, dword [rsi + 0x67], 0x72773331
imul esi, dword [rbp + 0x54], 0x7665446f
imul esp, dword [rbx + 0x65], 0x5f006a45
pop rdx
push rbx
je 0x417060
xor bl, byte [rdi + 0x5f]
je 0x417095
push 0x65706c65
jb 0x417086
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x4170bb
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x417082
xor dword [rdi + 0x54], ebx
jne 0x4170c6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor bl, byte [rdi + 0x44]
jo 0x4170bd
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4170a5
xor byte [rdi + 0x5f], bl
je 0x4170e0
jb 0x4170e9
ja 0x4170db
jae 0x4170f7
jae 0x4170f4
insd dword [rdi], dx
pop rdi
jb 0x4170f8
outsd dx, dword [rsi]
jb 0x4170f2
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rcx + 0x6e], ch
jo 0x417113
je 0x4170a0
pop rdi
pop rdx
push rbx
je 0x4170d7
xor al, 0x5f
pop rdi
jae 0x417113
jb 0x417113
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4170ff
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41711e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41713b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x417119
je 0x41715b
jo 0x417149
pop rdi
imul ebp, dword [rsi + 0x66], 0x4571656f
push rdx
push r11
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41716d
jo 0x417170
je 0x417141
jbe 0x417169
movsxd rsp, dword [rbp + 0x39]
ja 0x417177
imul esi, dword [rbp + 0x46], 0x456c6c69
push 0
pop rdi
pop rdx
push rbx
je 0x41714b
jbe 0x41717c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x417155
je 0x417189
jb 0x417188
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4171a2
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4171ba
push rdx
jbe 0x4171be
jbe 0x417192
jo 0x41719f
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x41718b
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4171af
xor dword [rdx], esi
jne 0x4171df
jo 0x4171e2
je 0x4171b3
jbe 0x4171db
movsxd rsp, dword [rbp + 0x53]
je 0x4171a8
xor al, 0x64
jne 0x4171ea
je 0x4171df
insb byte [rdi], dx
je 0x4171eb
push r11
xor byte [rdi + 0x45], bl
jo 0x417202
jbe 0x417191
pop rdi
pop rdx
push rbx
je 0x4171c8
xor dword [rdi + 0x54], ebx
jne 0x41720c
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x4171dd
xor al, 0x64
jne 0x41721f
je 0x417214
insb byte [rdi], dx
je 0x417220
xor qword [r10], rsi
jne 0x417235
jo 0x417238
je 0x417209
jbe 0x417231
movsxd rsp, dword [rbp + 0x45]
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x417210
xor dword [rdi + 0x54], ebx
jne 0x417254
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41726c
je 0x41723f
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x417272
je 0x417267
insb byte [rdi], dx
je 0x417273
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push r11
je 0x417262
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4172a1
movsxd rbx, dword [rdi + 0x73]
je 0x4172af
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4172aa
je 0x4172bf
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rsp
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3731
movsxd rbp, dword [rcx + 0x73]
jae 0x4172ec
je 0x417308
jo 0x4172f6
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4172da
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x417324
jb 0x417327
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x4172f0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41732f
movsxd rbx, dword [rdi + 0x73]
je 0x41733d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x417338
je 0x41734d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x417345
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rax], r14
jne 0x417376
jo 0x417379
je 0x41734c
imul ebp, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
je 0x41734b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41738a
movsxd rbx, dword [rdi + 0x73]
je 0x417398
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x417393
je 0x4173a8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x4173a8
jo 0x41738e
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41739a
jbe 0x4173cb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x4173a6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4173e5
movsxd rbx, dword [rdi + 0x73]
je 0x4173f3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4173ee
je 0x417403
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4173e3
xor byte [rdi + 0x49], bl
je 0x41741c
jb 0x417418
jae 0x417422
push r8
movsxd rcx, dword [r10 + r12*2 + 0x30]
pop rdi
push rbx
pop rdi
jae 0x417433
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41741f
jae 0x417444
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x417420
je 0x417454
jb 0x417453
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41742b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x417472
push rax
jbe 0x417483
jbe 0x417455
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x417453
jbe 0x417484
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41745d
je 0x417491
jb 0x417490
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r13 + 0x6e]
jbe 0x41743c
pop rdi
pop rdx
push rbx
je 0x417473
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4174ac
je 0x4174c1
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41748c
xor ebx, dword [rdi + 0x53]
jo 0x4174be
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4174ca
pop rdi
jo 0x4174dd
jb 0x4174ca
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4174ad
je 0x4174e1
jb 0x4174e0
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4174b8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4174ff
push rax
jbe 0x417510
jbe 0x4174e2
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41750f
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41752c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
push rax
push rbx
pop r15
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x417515
xor dword [rdi + 0x54], ebx
jne 0x417559
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x417540
jae 0x417565
push rbx
je 0x417534
xor al, 0x64
jne 0x417576
je 0x41756b
insb byte [rdi], dx
je 0x417577
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x4175a3
jo 0x4175a6
je 0x417577
jbe 0x41759f
movsxd rsp, dword [rbp + 0x35]
ja 0x4175ad
imul esi, dword [rbp + 0x49], 0x45496369
push rbx
je 0x417582
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41758a
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x4175d2
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x4175bf
xor ebp, dword [rbp + 0x6f]
jbe 0x4175f8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4175d7
je 0x41760b
jb 0x41760a
xor al, 0x62
jae 0x417612
jbe 0x4175b0
pop rdi
pop rdx
push rbx
je 0x4175e7
xor dword [rdi + 0x54], ebx
jne 0x41762b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x417612
jae 0x417637
push rbx
je 0x417606
xor al, 0x64
jne 0x417648
je 0x41763d
insb byte [rdi], dx
je 0x417649
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push r11
je 0x417636
jbe 0x417667
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x417642
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x417681
movsxd rbx, dword [rdi + 0x73]
je 0x41768f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41768a
je 0x41769f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x4d]
pop rdi
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
jo 0x4176cd
push 0x64616572
pop rdi
insd dword [rdi], dx
jne 0x4176d6
js 0x4176c4
jne 0x4176d5
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x4176b1
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x417702
outsb dx, byte gs:[rsi]
je 0x4176fa
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x69], ecx
jbe 0x417701
push r10
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4176f9
xor ebx, dword [rdi + 0x53]
jo 0x41772b
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x417737
pop rdi
jo 0x41774a
jb 0x417737
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41771a
je 0x41774e
jb 0x41774d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x417725
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41776c
push rax
jbe 0x41777d
jbe 0x41774f
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41777c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x417799
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x4177b5
je 0x417786
jbe 0x4177ae
movsxd rsp, dword [rbp + 0x43]
xor dword [rbp + 0x50], eax
movsxd rdx, dword [r11 + 0x31]
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x417789
je 0x4177a3
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
xor dword [rdx], esi
jne 0x4177d9
jo 0x4177dc
je 0x4177ad
jbe 0x4177d5
movsxd rsp, dword [rbp + 0x53]
je 0x4177a2
xor al, 0x64
jne 0x4177e4
je 0x4177d9
insb byte [rdi], dx
je 0x4177e5
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x4177bd
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4177e4
pop rax
push rsp
pop rdi
push r11
je 0x4177d7
je 0x417819
jo 0x417812
jo 0x417800
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x417825
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4177f3
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x417817
cmp dword [rcx + 0x6e], ecx
jo 0x417848
je 0x41781b
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41784e
je 0x417843
insb byte [rdi], dx
je 0x41784f
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x417855
insb byte [rdi], dx
je 0x417861
jb 0x417843
jbe 0x417800
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417869
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x417882
jb 0x417869
push rbx
je 0x41785a
je 0x41788e
jb 0x41788d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x417865
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4178ac
push rax
jbe 0x4178bd
jbe 0x41788f
pop rdi
pop r15
jb 0x41789c
jbe 0x417859
pop rdi
pop rdx
push rbx
je 0x417890
xor dword [rdi + 0x4d], ebx
jne 0x4178d8
js 0x4178c6
jae 0x4178d0
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4178d4
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4178f1
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x75], ch
je 0x417903
jne 0x417909
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x417912
jo 0x417915
je 0x4178e8
imul ebp, dword [rbp + 0x43], 0x4b504531
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4178e2
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x417918
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x417922
pop rdi
xor byte [rbp + 0x50], al
movsxd rdx, dword [r8 + 0x63]
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41790e
pop rdi
push rbx
jo 0x417941
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41794d
pop rdi
jae 0x417953
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417957
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x417974
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x417949
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x417990
push rax
jbe 0x4179a1
jbe 0x417973
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x49], ebx
push r12
pop rdi
jo 0x41798e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41797a
xor bl, byte [rdi + 0x5f]
jae 0x4179b6
jb 0x4179b6
pop rdi
jo 0x4179c9
jb 0x4179a0
push rbx
je 0x417991
je 0x4179c5
jb 0x4179c4
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4179d4
pop rdi
jae 0x4179d2
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4179d6
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4179f3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
ja 0x417a08
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [r15 + rbx*2], esi
movsxd rsp, dword [r13 + r8*2 + 0x45]
jbe 0x4179ed
jo 0x4179fa
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x72
push rdx
imul edx, dword [rbx + 0x30], 0x7645455f
jo 0x417a11
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x417a43
je 0x417a14
jbe 0x417a3c
movsxd rsp, dword [rbp + 0x34]
jb 0x417a3d
imul rax, qword fs:[r13 + 0x45], 0x3974534e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x417a45
je 0x417a25
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x417a7e
push rbx
je 0x417a48
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
xor al, 0x74
jns 0x417a9a
push r10
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x417a6d
outsw dx, word [rsi]
jb 0x417ab1
jb 0x417aa1
push r10
xor bl, byte [r15 + 0x4b]
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x417a7e
jb 0x417ab5
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x417ab9
pop rdi
jb 0x417abc
jb 0x417ac0
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x417ad7
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417ad3
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x417aec
jb 0x417ad3
push rbx
je 0x417ac4
je 0x417af8
jb 0x417af7
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x417acf
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x417b16
push rax
jbe 0x417b27
jbe 0x417af9
pop rdi
pop r15
jo 0x417b32
jb 0x417b05
jbe 0x417ac2
pop rdi
pop rdx
push rbx
je 0x417af8
xor bl, byte [rdi + 0x5f]
je 0x417b2d
push 0x65706c65
jb 0x417b1e
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x417b0d
xor al, 0x64
jne 0x417b4f
je 0x417b44
insb byte [rdi], dx
je 0x417b50
cmp byte [r13 + 0x73], dl
je 0x417b35
jae 0x417b5a
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x417b32
xor dword [rdi + 0x54], ebx
jne 0x417b76
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x417b6d
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x417b55
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x417b96
push r11
je 0x417b6b
je 0x417b9f
jb 0x417b9e
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x417b9a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x417bd9
movsxd rbx, dword [rdi + 0x73]
je 0x417be7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x417be2
je 0x417bf7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x417bd0
xor dword [rdi + 0x54], ebx
jne 0x417c14
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x417bfb
jae 0x417c20
push rbx
je 0x417bef
xor al, 0x64
jne 0x417c31
je 0x417c26
insb byte [rdi], dx
je 0x417c32
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x417c27
push r12
pop rdi
jo 0x417c38
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417c56
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x417c5f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x417c53
push rbx
je 0x417c44
je 0x417c78
jb 0x417c77
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x417c4f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x417c96
push rax
jbe 0x417ca7
jbe 0x417c79
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push rbx
cmp dword [rcx + 0x6e], ecx
jo 0x417cbb
je 0x417c8e
imul ebp, dword [rbp], 0x4b4e5a5f
push rbx
je 0x417c89
jbe 0x417cba
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x417c95
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x417cd4
movsxd rbx, dword [rdi + 0x73]
je 0x417ce2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x417cdd
je 0x417cf2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3845455f
insd dword [rdi], dx
js 0x417cfa
jae 0x417d06
jp 0x417d04
jbe 0x417ca2
pop rdi
pop rdx
push rbx
je 0x417cda
je 0x417cf4
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x417d2b
je 0x417cfe
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x417d31
je 0x417d26
insb byte [rdi], dx
je 0x417d32
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x417d0a
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x417d31
pop rax
push rsp
pop rdi
push r11
je 0x417d24
je 0x417d66
jo 0x417d5f
jo 0x417d4d
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x417d72
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x417d85
jo 0x417d88
je 0x417d59
jbe 0x417d81
movsxd rsp, dword [rbp + 0x43]
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x417d58
movsxd rbp, dword [rdi + 0x70]
jns 0x417d72
push rax
movsxd rdx, dword [r8 + 0x63]
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x417d71
xor dword [rdi + 0x5f], ebx
jb 0x417dad
jae 0x417dbd
outsd dx, dword [rsi]
push rbx
je 0x417d88
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x417dc7
movsxd rbx, dword [rdi + 0x73]
je 0x417dd5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x417dd0
je 0x417de5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r8
push rsp
pop rdi
push rdx
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x417dc1
xor bl, byte [rdi + 0x5f]
jae 0x417dfd
jb 0x417dfd
pop rdi
jo 0x417e10
jb 0x417de7
push rbx
je 0x417dd8
je 0x417e0c
jb 0x417e0b
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x417e1b
pop rdi
jae 0x417e19
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417e1d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x417e3a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x417e54
jo 0x417e57
je 0x417e28
jbe 0x417e50
movsxd rsp, dword [rbp + 0x35]
ja 0x417e5e
imul esi, dword [rbp + 0x49], 0x39415269
pop rdi
movsxd rcx, dword [r10 + 0x63]
push rbx
je 0x417e39
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x417e41
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x417e89
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x417e7a
jbe 0x417eab
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x417e84
je 0x417eb8
jb 0x417eb7
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x417e98
xor bl, byte [rdi + 0x5f]
jne 0x417ed9
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x417ef4
pop rdi
push r11
je 0x417eb2
xor ebp, dword [rbp + 0x6f]
jbe 0x417eeb
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x417ecc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x417f0b
movsxd rbx, dword [rdi + 0x73]
je 0x417f19
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x417f14
je 0x417f29
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push rbx
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x417f17
xor bl, byte [rdi + 0x5f]
je 0x417f4c
push 0x65706c65
jb 0x417f3d
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x417f72
jo 0x417f75
je 0x417f48
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x417f7c
je 0x417f71
insb byte [rdi], dx
je 0x417f7d
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x417f5a
xor dword [rdi + 0x54], ebx
jne 0x417f9e
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x417f95
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x417f7d
pop rdi
push rbx
jo 0x417fb0
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x417fbc
pop rdi
jae 0x417fc2
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417fc6
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x417fe3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jb 0x417fe8
insb byte [rdi], dx
jae 0x417fed
jbe 0x417f8b
pop rdi
pop rdx
push rbx
je 0x417fc2
xor dword [rdi + 0x54], ebx
jne 0x418006
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x41801d
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
insd dword [rdi], dx
js 0x41800d
jae 0x418030
jbe 0x417fbe
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41803a
jo 0x41803d
je 0x41800e
jbe 0x418036
movsxd rsp, dword [rbp + 0x31]
ja 0x418045
imul esi, dword [rbp + 0x55], 0x6769736e
outsb dx, byte [rsi]
outsb dx, byte fs:[rsi]
je 0x41802b
jns 0x418029
push r8
movsxd rdx, dword [rdi + rbx*2 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x418029
jbe 0x41805a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x418035
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418074
movsxd rbx, dword [rdi + 0x73]
je 0x418082
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41807d
je 0x418092
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor eax, 0x655f4d5f
jb 0x41809f
jae 0x4180a5
pop rdi
je 0x4180a3
outsb dx, byte gs:[rsi]
push r8
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x418084
xor bl, byte [rdi + 0x5f]
jae 0x4180c0
jb 0x4180c0
pop rdi
jo 0x4180d3
jb 0x4180aa
push rbx
je 0x41809b
je 0x4180cf
jb 0x4180ce
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4180a6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4180ed
push rax
jbe 0x4180fe
jbe 0x4180d0
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4180f6
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x418113
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push r11
pop rdi
push r11
je 0x4180f1
cmp dword [rdi + 0x53], ebx
jo 0x418124
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x418134
push rdx
push r12
pop rdi
jo 0x41812a
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41815b
jo 0x41815e
je 0x41812f
jbe 0x418157
movsxd rsp, dword [rbp + 0x35]
ja 0x418165
imul esi, dword [rbp + 0x49], 0x74534e52
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418172
movsxd rbx, dword [rdi + 0x73]
je 0x418180
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41817b
je 0x418190
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r9, dword [r10 + 0x45]
push rbx
je 0x41816e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x418176
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x4181be
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4181a9
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [r13 + 0x4e]
push rbx
je 0x4181bf
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x418224
jo 0x418212
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4181e9
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41820d
cmp dword [rcx + 0x6e], ecx
jo 0x41823e
je 0x418211
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x418244
je 0x418239
insb byte [rdi], dx
je 0x418245
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x418222
xor dword [rdi + 0x54], ebx
jne 0x418266
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41827e
je 0x418251
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x418284
je 0x418279
insb byte [rdi], dx
je 0x418285
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x4182b2
je 0x418285
imul ebp, dword [rbp + 0x43], 0x38504532
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41828a
je 0x4182a4
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
xor dword [rax], esi
jne 0x4182da
jo 0x4182dd
je 0x4182b0
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4182e3
je 0x4182d8
insb byte [rdi], dx
je 0x4182e4
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x4182bc
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4182e3
pop rax
push rsp
pop rdi
push r11
je 0x4182d6
je 0x418318
jo 0x418311
jo 0x4182ff
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x418324
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4182f4
jae 0x418339
jo 0x41830e
push rbx
je 0x4182ff
je 0x418333
jb 0x418332
xor ch, byte fs:[rcx + 0x64]
jbe 0x418328
push rsp
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x418313
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x418354
push rbx
je 0x41832b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41836a
movsxd rbx, dword [rdi + 0x73]
je 0x418378
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418373
je 0x418388
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x4183ad
jo 0x4183b0
je 0x418381
jbe 0x4183a9
movsxd rsp, dword [rbp + 0x31]
movsxd rbp, dword ss:[rdi + 0x6d]
jo 0x4183be
je 0x4183b0
jae 0x4183b4
push rax
outsd dx, dword [rsi]
ja 0x4183b8
jb 0x41839a
jbe 0x418357
pop rdi
pop rdx
push rbx
je 0x41838f
xor ebx, dword [rdi + 0x53]
jo 0x4183c1
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4183cd
pop rdi
jo 0x4183e0
jb 0x4183cd
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4183b0
je 0x4183e4
jb 0x4183e3
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4183bb
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418402
push rax
jbe 0x418413
jbe 0x4183e5
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x418412
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41842f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x418445
jb 0x418442
jns 0x41841a
jbe 0x4183d7
pop rdi
pop rdx
push rbx
je 0x418412
je 0x418454
jo 0x41844d
push r11
je 0x418419
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41846a
outsb dx, byte gs:[rsi]
je 0x418462
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41846f
jo 0x41847d
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x418468
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4184a9
push r11
je 0x41847e
je 0x4184b2
jb 0x4184b1
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x418492
xor byte [rbx + 0x68], dh
jb 0x4184cc
pop rdi
jo 0x4184df
jb 0x4184b6
push rbx
je 0x4184a7
je 0x4184db
jb 0x4184da
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4184ea
pop rdi
jae 0x4184e8
xor cl, byte [r9 + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x4184fe
push r11
je 0x4184c7
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41850e
push rax
jbe 0x41851f
jbe 0x4184f1
jbe 0x4184f6
push r11
pop rdi
push r12
pop rdi
add byte [r15 + 0x5a], r11b
push r11
je 0x4184f7
jbe 0x418528
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x418501
je 0x418535
jb 0x418534
push rbx
push r11
xor byte [rdi + 0x45], bl
cmp byte [r13 + 0x61], r13b
js 0x41853d
jae 0x418549
jp 0x418547
jbe 0x4184e5
pop rdi
pop rdx
push rbx
je 0x41851c
xor dword [rdi + 0x54], ebx
jne 0x418560
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x418531
xor al, 0x64
jne 0x418573
je 0x418568
insb byte [rdi], dx
je 0x418574
xor qword [r10], rsi
jne 0x418589
jo 0x41858c
je 0x41855d
jbe 0x418585
movsxd rsp, dword [rbp + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x418567
xor bl, byte [rdi + 0x57]
imul ebx, dword [rdi + 0x72], 0x65
jae 0x4185b5
insb byte [rdi], dx
je 0x4185a2
je 0x4185be
jo 0x4185ac
pop rdi
imul ebp, dword [rbp + 0x70], 0x7453496c
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x4185c5
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x4185d4
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x45], 0x76453243
add byte [rdi + 0x5a], bl
push rbx
je 0x4185a9
xor byte [rbx + 0x68], dh
jb 0x4185e3
pop rdi
jo 0x4185f6
jb 0x4185cd
push rbx
je 0x4185be
je 0x4185f2
jb 0x4185f1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4185c9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418610
push rax
jbe 0x418621
jbe 0x4185f3
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push r11
pop rdi
push r11
je 0x4185f7
cmp dword [rdi + 0x53], ebx
jo 0x41862a
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41863a
push rdx
push r12
pop rdi
jo 0x418630
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x418620
je 0x418662
jo 0x41865b
push rbx
je 0x418627
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x418678
outsb dx, byte gs:[rsi]
je 0x418670
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x4a], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41867d
jo 0x41868b
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x4186bb
jo 0x4186be
je 0x41869e
je 0x4186bf
imul ebp, dword [rsi + 0x67], 0x52453243
push rbx
je 0x41868f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4186ce
movsxd rbx, dword [rdi + 0x73]
je 0x4186dc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4186d7
je 0x4186ec
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x4186c0
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4186e4
xor dword [rdx], esi
jne 0x418714
jo 0x418717
je 0x4186e8
jbe 0x418710
movsxd rsp, dword [rbp + 0x53]
je 0x4186dd
xor al, 0x64
jne 0x41871f
je 0x418714
insb byte [rdi], dx
je 0x418720
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x418744
je 0x418715
jbe 0x41873d
movsxd rsp, dword [rbp + 0x31]
xor al, 0x73
imul ebp, dword [rcx + 0x70], 0x43
push 0x63617261
je 0x418749
jb 0x418759
jbe 0x4186e9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x418757
js 0x41875d
je 0x418736
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x41873b
je 0x418755
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
jbe 0x41878b
push r10
push rbx
je 0x41874e
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x418775
pop rax
push rsp
pop rdi
push r11
je 0x418768
je 0x4187aa
jo 0x4187a3
jo 0x418791
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4187b6
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x418784
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x4187d6
jb 0x4187ad
push rbx
push r11
je 0x41879c
xor ebx, dword [rdi + 0x53]
jo 0x4187ce
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4187da
pop rdi
jo 0x4187ed
jb 0x4187da
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4187bd
je 0x4187f1
jb 0x4187f0
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4187c8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41880f
push rax
jbe 0x418820
jbe 0x4187f2
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41881f
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41883c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rsp
push rbx
je 0x41881a
je 0x41884e
jb 0x41884d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x418825
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41886c
push rax
jbe 0x41887d
jbe 0x41884f
add byte [r15 + 0x5a], r11b
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x418878
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x418881
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x418875
push rbx
je 0x418861
xor ebx, dword [rdi + 0x53]
jo 0x418893
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41889f
pop rdi
jo 0x4188b2
jb 0x41889f
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x418882
je 0x4188b6
jb 0x4188b5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41888d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4188d4
push rax
jbe 0x4188e5
jbe 0x4188b7
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4188f9
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
cmp byte [r13 + 0x61], r13b
js 0x4188f7
jae 0x418903
jp 0x418901
jbe 0x41889f
pop rdi
pop rdx
push rbx
je 0x4188d5
xor bl, byte [rdi + 0x5f]
je 0x41890a
push 0x65706c65
jb 0x4188fb
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x4188ea
xor al, 0x64
jne 0x41892c
je 0x418921
insb byte [rdi], dx
je 0x41892d
xor qword [r8], rsi
jne 0x418942
jo 0x418945
je 0x418918
imul ebp, dword [rbp + 0x45], 0x5245454a
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x418912
xor dword [rdi + 0x54], ebx
jne 0x418956
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x41894d
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41893a
outsw dx, word [rsi]
jb 0x41897e
jb 0x41896e
push r10
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41894b
jb 0x418982
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x418986
pop rdi
jb 0x418989
jb 0x41898d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x4189a4
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x418973
jbe 0x4189a4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41897d
je 0x4189b1
jb 0x4189b0
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4189ca
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4189e2
push r10
jbe 0x4189e6
jbe 0x4189ba
jo 0x4189c7
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x4189c7
jae 0x4189ec
xor eax, 0x74697277
imul r8d, dword fs:[r8 + rsi*2 + 0x4f], 0x5f005f54
pop rdx
push rbx
push r11
je 0x4189d5
xor ebx, dword [rdi + 0x53]
jo 0x418a07
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x418a13
pop rdi
jo 0x418a26
jb 0x418a13
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4189f6
je 0x418a2a
jb 0x418a29
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x418a01
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418a48
push rax
jbe 0x418a59
jbe 0x418a2b
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x418a58
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x418a75
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x53], ecx
pop rdi
push r10
push r11
push r12
pop rdi
add byte [r15 + 0x5a], r11b
push rbx
je 0x418a57
xor al, 0x5f
pop rdi
jae 0x418a93
jb 0x418a93
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x418a7f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x418a9e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x418abb
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4e], ecx
push rbx
je 0x418a91
je 0x418ac5
jb 0x418ac4
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x418a9c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418ae3
push rax
jbe 0x418af4
jbe 0x418ac6
push r11
push r11
pop rdi
push rbx
pop r15
push r11
je 0x418ac6
cmp dword [rdi + 0x53], ebx
jo 0x418af9
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x418b09
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x418b03
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x418b34
jo 0x418b37
je 0x418b08
jbe 0x418b30
movsxd rsp, dword [rbp + 0x35]
ja 0x418b3e
imul esi, dword [rbp + 0x45], 0x5a5f0063
push rbx
je 0x418b09
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x418b4a
push rbx
je 0x418b21
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418b60
movsxd rbx, dword [rdi + 0x73]
je 0x418b6e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418b69
je 0x418b7e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x418ba3
jo 0x418ba6
je 0x418b77
jbe 0x418b9f
movsxd rsp, dword [rbp + 0x35]
ja 0x418bad
imul esi, dword [rbp + 0x49], 0x36314152
pop rdi
movsxd rbp, dword [r9 + 0x4a]
movsxd rax, dword [rbp + 0x45]
push rbx
je 0x418b89
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x418b91
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x418bd9
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x418bc9
je 0x418c0b
jo 0x418c04
push rax
jbe 0x418c15
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x418c26
jo 0x418c29
je 0x418bfa
jbe 0x418c22
movsxd rsp, dword [rbp + 0x35]
ja 0x418c30
imul esi, dword [rbp + 0x49], 0x5f334152
movsxd rdx, dword [r10 + 0x4b]
push rbx
je 0x418c05
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418c44
movsxd rbx, dword [rdi + 0x73]
je 0x418c52
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418c4d
je 0x418c62
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x418c46
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x418c4e
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x418c96
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x418c86
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x418cd0
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x418cdf
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x418cfd
outsb dx, byte gs:[rsi]
je 0x418cf5
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x418d13
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x418d03
outsw dx, word [rsi]
jb 0x418d47
jb 0x418d37
push r11
je 0x418d08
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418d4f
push rax
jbe 0x418d60
jbe 0x418d32
push r12
pop rdi
push rdx
push rbx
je 0x418d28
jb 0x418d5f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x418d63
pop rdi
jb 0x418d66
jb 0x418d6a
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x418d81
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x418d50
outsw dx, word [rsi]
jb 0x418d94
jb 0x418d84
push r11
je 0x418d55
xor al, 0x64
jne 0x418d97
je 0x418d8c
insb byte [rdi], dx
je 0x418d98
cmp byte [r13 + 0x73], dl
je 0x418d7d
jae 0x418da2
push r12
pop rdi
push rdx
push rbx
je 0x418d78
jb 0x418daf
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x418db3
pop rdi
jb 0x418db6
jb 0x418dba
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x418dd1
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x418da0
je 0x418dd4
jb 0x418dd3
xor dword fs:[rip + 0x735f4d5f], esi
je 0x418dd9
jb 0x418dee
pop rdi
je 0x418de5
jb 0x418de4
push r11
je 0x418db6
xor byte [rbx + 0x68], dh
jb 0x418df0
pop rdi
jo 0x418e03
jb 0x418dda
push rbx
pop rdi
xor dword [rax], esi
pop rdi
insd dword [rdi], dx
jo 0x418e07
pop rdi
jae 0x418e05
push r8
jbe 0x418e1c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x418df4
jbe 0x418e25
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x418e00
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418e3f
movsxd rbx, dword [rdi + 0x73]
je 0x418e4d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418e48
je 0x418e5d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3645455f
jb 0x418e69
jae 0x418e6f
jp 0x418e6d
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor dword [rcx], esi
ja 0x418e83
imul esi, dword [rbp + 0x41], 0x6577736e
jb 0x418e84
push rdx
push rbx
je 0x418e58
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418e97
movsxd rbx, dword [rdi + 0x73]
je 0x418ea5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418ea0
je 0x418eb5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x418e89
xor byte [rbx + 0x68], dh
jb 0x418ec3
pop rdi
jo 0x418ed6
jb 0x418ead
push rbx
je 0x418e9e
je 0x418ed2
jb 0x418ed1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x418ea9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418ef0
push rax
jbe 0x418f01
jbe 0x418ed3
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x418ed2
je 0x418f14
jo 0x418f0d
push r8
jbe 0x418f1e
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x418efa
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x418f30
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x418f39
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x418f2d
push rbx
je 0x418f1d
je 0x418f51
jb 0x418f50
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x418f29
xor bl, byte [rdi + 0x5f]
je 0x418f5e
push 0x65706c65
jb 0x418f4f
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x418f54
jae 0x418f79
push rbx
je 0x418f49
xor al, 0x64
jne 0x418f8b
je 0x418f80
insb byte [rdi], dx
je 0x418f8c
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x418f67
xor dword [rdi + 0x54], ebx
jne 0x418fab
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x418fa2
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x418f8b
xor ebx, dword [rdi + 0x53]
jo 0x418fbd
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x418fc9
pop rdi
jo 0x418fdc
jb 0x418fc9
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x418fac
je 0x418fe0
jb 0x418fdf
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x418fb7
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418ffe
push rax
jbe 0x41900f
jbe 0x418fe1
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41900e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41902b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x49]
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x419023
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41900e
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x419032
cmp byte [rbp + 0x73], dl
je 0x419032
jae 0x419057
push rbx
je 0x419026
xor al, 0x64
jne 0x419068
je 0x41905d
insb byte [rdi], dx
je 0x419069
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41904c
pop rdi
pop rdi
imul bp, word [rsp + rbp*2 + 0x5f], 0x4961
movsxd rax, dword [rbp + 0x4e]
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x419086
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x419077
pop rdi
pop rdi
imul esi, dword [rbx + 0x5f], 0x65747962
push r12
pop rdi
pop rdi
pop rdi
jbe 0x4190b1
insb byte [rdi], dx
jne 0x4190b8
jbe 0x41909b
pop rdi
pop rdi
je 0x4190d4
jo 0x4190c2
push r8
push rbx
xor ebx, dword [rdi + 0x53]
pop rdi
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rsp
push rsi
push rbx
je 0x4190a9
je 0x4190dd
jb 0x4190dc
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4190ec
pop rdi
jae 0x4190ea
add byte [r15 + 0x5a], r11b
push rbx
je 0x4190be
xor bl, byte [rdi + 0x5f]
jne 0x4190ff
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41911a
pop rdi
push r11
je 0x4190d8
xor ebp, dword [rbp + 0x6f]
jbe 0x419111
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4190f0
je 0x419124
jb 0x419123
push r11
xor bl, byte [rdi + 0x53]
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
push rdx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x419158
jo 0x41915b
je 0x41912c
jbe 0x419154
movsxd rsp, dword [rbp + 0x35]
ja 0x419162
imul esi, dword [rbp + 0x49], 0x74534e52
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41916f
movsxd rbx, dword [rdi + 0x73]
je 0x41917d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419178
je 0x41918d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r9, dword [r9 + 0x45]
push rbx
je 0x41916b
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x419173
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x4191bb
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4191ec
jo 0x4191ef
je 0x4191c0
jbe 0x4191e8
movsxd rsp, dword [rbp + 0x35]
ja 0x4191f6
imul esi, dword [rbp + 0x49], 0x534e4b52
je 0x4191c5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419204
movsxd rbx, dword [rdi + 0x73]
je 0x419212
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41920d
je 0x419222
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x4b]
movsxd rcx, dword [rdx + 0x45]
push rbx
je 0x419205
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41920d
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x419255
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x419240
xor bl, byte [rdi + 0x5f]
je 0x419275
push 0x65706c65
jb 0x419266
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41929b
jo 0x41929e
je 0x419271
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x4192a5
je 0x41929a
insb byte [rdi], dx
je 0x4192a6
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x419281
xor dword [rdi + 0x54], ebx
jne 0x4192c5
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x4192bc
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push r11
je 0x4192a5
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4192c9
cmp dword [rcx + 0x6e], ecx
jo 0x4192fa
je 0x4192cd
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x419300
je 0x4192f5
insb byte [rdi], dx
je 0x419301
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x4192ec
jbe 0x4192a9
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x419325
jo 0x419328
je 0x4192f9
jbe 0x419321
movsxd rsp, dword [rbp + 0x35]
ja 0x41932f
imul esi, dword [rbp + 0x49], 0x45496364
push rbx
je 0x419304
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41930c
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x419354
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41933f
xor bl, byte [rdi + 0x5f]
je 0x419374
push 0x65706c65
jb 0x419365
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x41939a
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x419361
xor dword [rdi + 0x54], ebx
jne 0x4193a5
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor bl, byte [rdi + 0x44]
jo 0x41939c
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x419384
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4193c5
push r11
je 0x41939a
je 0x4193ce
jb 0x4193cd
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4193ad
xor bl, byte [rdi + 0x5f]
je 0x4193e2
push 0x65706c65
jb 0x4193d3
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x419409
je 0x4193dc
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x419410
je 0x419405
insb byte [rdi], dx
je 0x419411
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x4193ee
xor dword [rdi + 0x54], ebx
jne 0x419432
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x419429
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x419411
xor dword [rdi + 0x54], ebx
jne 0x419455
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41946c
jo 0x41946f
je 0x419440
jbe 0x419468
movsxd rsp, dword [rbp + 0x53]
je 0x419435
xor al, 0x64
jne 0x419477
je 0x41946c
insb byte [rdi], dx
je 0x419478
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41946d
push r12
pop rdi
jo 0x41947e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4194af
jo 0x4194b2
je 0x419483
jbe 0x4194ab
movsxd rsp, dword [rbp + 0x43]
xor al, byte [rbp + 0x76]
add byte [rsi + 0x63], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
jae 0x4194b4
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x419498
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x4194e2
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x4194f1
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41950f
outsb dx, byte gs:[rsi]
je 0x419507
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x4a], ecx
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x419525
push rsp
pop rdi
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x41954b
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x419568
jo 0x41956b
je 0x41953c
jbe 0x419564
movsxd rsp, dword [rbp + 0x35]
ja 0x419572
imul esi, dword [rbp + 0x49], 0x5f374152
movsxd rbp, dword [r9 + 0x4a]
push rdx
xor ebx, dword [r15 + 0x53]
xor dword [rdi + 0x52], ebx
push rbx
je 0x419550
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41958f
movsxd rbx, dword [rdi + 0x73]
je 0x41959d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419598
je 0x4195ad
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x419590
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x419598
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x4195e0
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4195d0
je 0x419612
jo 0x41960b
push rax
jbe 0x41961c
xor dword [r9 + 0x4a], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x4195f8
jo 0x419606
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4195f2
je 0x41960c
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x419612
jae 0x419637
push rbx
je 0x419606
xor al, 0x64
jne 0x419648
je 0x41963d
insb byte [rdi], dx
je 0x419649
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x419621
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x419648
pop rax
push rsp
pop rdi
push r11
je 0x41963b
je 0x41967d
jo 0x419676
jo 0x419664
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x419689
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41968a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x419693
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x419687
push rbx
je 0x419677
je 0x4196ab
jb 0x4196aa
cmp byte fs:[r13 + 0x61], r13b
js 0x4196ac
jae 0x4196b8
jp 0x4196b6
jbe 0x419654
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4196d0
jo 0x4196d3
je 0x4196a4
jbe 0x4196cc
movsxd rsp, dword [rbp + 0x35]
ja 0x4196da
imul esi, dword [rbp + 0x49], 0x31314152
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x4196af
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4196ee
movsxd rbx, dword [rdi + 0x73]
je 0x4196fc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4196f7
je 0x41970c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x4196ea
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x4196f2
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41973a
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x419726
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x419767
push r11
je 0x41973c
je 0x419770
jb 0x41976f
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41975f
je 0x4197a1
jo 0x41979a
push rax
cmp byte [rbp + 0x73], dl
je 0x41977b
jae 0x4197a0
push rbx
je 0x41976f
xor al, 0x64
jne 0x4197b1
je 0x4197a6
insb byte [rdi], dx
je 0x4197b2
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4197a5
je 0x4197d9
jb 0x4197d8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4197b0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4197f7
push rax
jbe 0x419808
jbe 0x4197da
xor al, byte [r13 + 0x4f]
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x4197db
outsw dx, word [rsi]
jb 0x41981f
jb 0x41980f
push r10
xor dword [r9], esi
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x4197ed
jb 0x419824
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x419828
pop rdi
jb 0x41982b
jb 0x41982f
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x419846
add byte gs:[r15 + 0x5a], r11b
cmp qword [rcx + 0x6e], r9
jo 0x419856
je 0x419829
imul ebp, dword [rbp + 0x43], 0x4b504531
movsxd rax, dword [rax]
pop rdi
pop rdx
push rsp
push rbx
je 0x41982b
je 0x41985f
jb 0x41985e
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41986e
pop rdi
jae 0x41986c
add byte [r15 + 0x5a], r11b
push rbx
je 0x419840
xor al, 0x5f
pop rdi
jae 0x41987c
jb 0x41987c
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x419868
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419887
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4198a4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x419879
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41989d
xor dword [rax], esi
jne 0x4198cd
jo 0x4198d0
je 0x4198a3
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4198d6
je 0x4198cb
insb byte [rdi], dx
je 0x4198d7
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4198b4
xor dword [rdi + 0x54], ebx
jne 0x4198f8
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x4198df
jae 0x419904
push rbx
je 0x4198d3
xor al, 0x64
jne 0x419915
je 0x41990a
insb byte [rdi], dx
je 0x419916
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4198fe
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41993f
push r11
je 0x419914
je 0x419948
jb 0x419947
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x4198ff
pop rdi
pop rdx
push rbx
je 0x419937
je 0x419951
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x419988
je 0x41995b
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41998e
je 0x419983
insb byte [rdi], dx
je 0x41998f
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x419967
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41998e
pop rax
push rsp
pop rdi
push r11
je 0x419981
je 0x4199c3
jo 0x4199bc
jo 0x4199aa
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4199cf
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x4199a1
xor ebx, dword [rdi + 0x53]
jo 0x4199d3
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4199df
pop rdi
jo 0x4199f2
jb 0x4199df
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4199c2
je 0x4199f6
jb 0x4199f5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4199cd
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419a14
push rax
jbe 0x419a25
jbe 0x4199f7
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419a24
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419a41
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x419a17
pop rdi
push rbx
jo 0x419a4a
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x419a56
pop rdi
jae 0x419a5c
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419a60
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419a7d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
push rbx
je 0x419a52
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x419a76
xor dword [rdx], esi
jne 0x419aa6
jo 0x419aa9
je 0x419a7a
jbe 0x419aa2
movsxd rsp, dword [rbp + 0x53]
je 0x419a6f
xor al, 0x64
jne 0x419ab1
je 0x419aa6
insb byte [rdi], dx
je 0x419ab2
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x419ab8
insb byte [rdi], dx
je 0x419ac4
jb 0x419aa6
jbe 0x419a63
pop rdi
pop rdx
push rbx
je 0x419a9a
xor dword [rdi + 0x54], ebx
jne 0x419ade
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x419af5
jo 0x419af8
je 0x419ac9
jbe 0x419af1
movsxd rsp, dword [rbp + 0x53]
je 0x419abe
xor al, 0x64
jne 0x419b00
je 0x419af5
insb byte [rdi], dx
je 0x419b01
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x419af6
push r12
pop rdi
jo 0x419b07
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x419af2
xor bl, byte [rdi + 0x5f]
je 0x419b27
push 0x65706c65
jb 0x419b18
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x419b4e
je 0x419b21
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x419b55
je 0x419b4a
insb byte [rdi], dx
je 0x419b56
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x419b33
xor dword [rdi + 0x54], ebx
jne 0x419b77
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x419b6e
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rsp
push rbx
push rbx
je 0x419b57
cmp dword [rdi + 0x53], ebx
jo 0x419b8a
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x419b9a
add byte [edi + 0x5a], bl
ja 0x419bb2
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [r9], esi
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x419b8a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419bc9
movsxd rbx, dword [rdi + 0x73]
je 0x419bd7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419bd2
je 0x419be7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x419bcb
jo 0x419bd8
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419bc3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x419bfc
je 0x419c11
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x419be2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419c21
movsxd rbx, dword [rdi + 0x73]
je 0x419c2f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419c2a
je 0x419c3f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x419c23
xor ebx, dword [rdi + 0x5f]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419c6b
push r10
jbe 0x419c7b
push rbx
je 0x419c3e
cmp dword [rdi + 0x42], ebx
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419c85
pop rdi
push 0x65706c65
jb 0x419c6b
push rsp
pop rdi
jo 0x419c7c
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x419caa
jo 0x419c98
push r11
xor ebx, dword [rdi + 0x44]
jo 0x419c8a
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x419c7b
jbe 0x419cac
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x419c85
je 0x419cb9
jb 0x419cb8
push rbx
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x419c99
xor byte [rdi + 0x48], bl
pop rdi
jae 0x419cd8
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x419cf2
jo 0x419cf5
je 0x419cc6
jbe 0x419cee
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x419cd6
outsw dx, word [rsi]
jb 0x419d1a
jb 0x419d0a
push r11
je 0x419ce0
je 0x419d14
jb 0x419d13
push r12
pop rdi
push rdx
push rbx
je 0x419cea
jb 0x419d21
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x419d25
pop rdi
jb 0x419d28
jb 0x419d2c
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x419d43
add byte gs:[r15 + 0x5a], r11b
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419d59
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x419d62
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x419d56
push rbx
je 0x419d48
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419d87
movsxd rbx, dword [rdi + 0x73]
je 0x419d95
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419d90
je 0x419da5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x419d7e
xor bl, byte [rdi + 0x5f]
jae 0x419dba
jb 0x419dba
pop rdi
jo 0x419dcd
jb 0x419da4
push rbx
je 0x419d95
je 0x419dc9
jb 0x419dc8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x419da0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419de7
push rax
jbe 0x419df8
jbe 0x419dca
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419df0
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419e0d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x419deb
cmp dword [rdi + 0x53], ebx
jo 0x419e1e
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x419e2e
push rdx
push r12
pop rdi
jo 0x419e24
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x419e10
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x419e51
push rbx
je 0x419e28
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419e67
movsxd rbx, dword [rdi + 0x73]
je 0x419e75
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419e70
je 0x419e85
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x419e3c
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x419e88
jae 0x419ead
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x419eca
jo 0x419ecd
je 0x419ead
je 0x419ece
imul ebp, dword [rsi + 0x67], 0x4e5a5f00
push rbx
je 0x419e97
xor dword [rdi + 0x54], ebx
jne 0x419edb
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x419ef2
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419ec4
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x419ef9
push r10
push rax
xor dword [rax], esi
jne 0x419f10
jo 0x419f13
je 0x419ee6
imul ebp, dword [rbp + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x419f11
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x419f15
pop rdi
jb 0x419f18
jb 0x419f1c
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x419f32
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x419f01
je 0x419f1b
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x419f21
jae 0x419f46
push rbx
je 0x419f15
xor al, 0x64
jne 0x419f57
je 0x419f4c
insb byte [rdi], dx
je 0x419f58
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x419f30
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x419f57
pop rax
push rsp
pop rdi
push r11
je 0x419f4a
je 0x419f8c
jo 0x419f85
jo 0x419f73
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x419f98
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x419fab
jo 0x419fae
je 0x419f7f
jbe 0x419fa7
movsxd rsp, dword [rbp + 0x35]
ja 0x419fb5
imul esi, dword [rbp + 0x49], 0x454a6369
push rbx
je 0x419f8a
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x419f92
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x419fda
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419ff8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41a001
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x419ff5
push rbx
je 0x419fe1
xor ebx, dword [rdi + 0x53]
jo 0x41a013
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a01f
pop rdi
jo 0x41a032
jb 0x41a01f
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41a002
je 0x41a036
jb 0x41a035
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a00d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a054
push rax
jbe 0x41a065
jbe 0x41a037
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a079
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41a04f
xor byte [rdi + 0x49], bl
je 0x41a088
jb 0x41a084
jae 0x41a08e
push r8
movsxd rcx, dword [rdx + 0x30]
pop rdi
push rbx
pop rdi
jae 0x41a09e
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41a075
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41a0ae
je 0x41a0c3
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41a08e
xor ebx, dword [rdi + 0x53]
jo 0x41a0c0
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a0cc
pop rdi
jo 0x41a0df
jb 0x41a0cc
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41a0af
je 0x41a0e3
jb 0x41a0e2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a0ba
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a101
push rax
jbe 0x41a112
jbe 0x41a0e4
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a111
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a12e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41a114
je 0x41a156
jo 0x41a14f
push rax
jbe 0x41a160
xor cl, byte [r9 + 0x4a]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41a13c
jo 0x41a14a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a135
xor dword [rdi + 0x54], ebx
jne 0x41a179
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41a14a
xor al, 0x64
jne 0x41a18c
je 0x41a181
insb byte [rdi], dx
je 0x41a18d
cmp byte [r13 + 0x73], dl
je 0x41a172
jae 0x41a197
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a179
je 0x41a193
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
cmp byte [rbp + 0x73], dl
je 0x41a199
jae 0x41a1be
push rbx
je 0x41a18d
xor al, 0x64
jne 0x41a1cf
je 0x41a1c4
insb byte [rdi], dx
je 0x41a1d0
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41a1a8
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41a1cf
pop rax
push rsp
pop rdi
push r11
je 0x41a1c2
je 0x41a204
jo 0x41a1fd
jo 0x41a1eb
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41a210
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41a1dd
xor bl, byte [rdi + 0x5f]
je 0x41a212
push 0x65706c65
jb 0x41a203
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x41a238
jo 0x41a23b
je 0x41a20c
jbe 0x41a234
movsxd rsp, dword [rbp + 0x4a]
push rbx
je 0x41a202
xor al, 0x64
jne 0x41a244
je 0x41a239
insb byte [rdi], dx
je 0x41a245
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41a222
xor dword [rdi + 0x54], ebx
jne 0x41a266
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41a25d
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41a245
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41a297
jb 0x41a26e
push rbx
push r11
je 0x41a25d
xor ebx, dword [rdi + 0x53]
jo 0x41a28f
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a29b
pop rdi
jo 0x41a2ae
jb 0x41a29b
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41a27e
je 0x41a2b2
jb 0x41a2b1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a289
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a2d0
push rax
jbe 0x41a2e1
jbe 0x41a2b3
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a2e0
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a2fd
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
push rbx
outsb dx, byte [rsi]
add byte [rdi + 0x5a], bl
push rbx
je 0x41a2d6
xor byte [rdi + 0x5f], bl
jne 0x41a317
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41a332
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x41a333
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x41a347
push r11
je 0x41a303
xor ebp, dword [rbp + 0x6f]
jbe 0x41a33c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41a31b
je 0x41a34f
jb 0x41a34e
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x41a375
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x41a356
jbe 0x41a387
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41a360
je 0x41a394
jb 0x41a393
push rbx
push r11
xor byte [rdi + 0x45], bl
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x41a377
xor dword [rdi + 0x4d], ebx
jne 0x41a3bf
js 0x41a3ad
jae 0x41a3b7
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a3bb
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a3d8
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41a3ad
xor bl, byte [rdi + 0x5f]
jae 0x41a3e9
jb 0x41a3e9
pop rdi
jo 0x41a3fc
jb 0x41a3d3
push rbx
je 0x41a3c4
je 0x41a3f8
jb 0x41a3f7
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41a407
pop rdi
jae 0x41a405
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a409
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a426
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41a3fb
xor al, 0x5f
push rbx
jo 0x41a42e
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x41a423
imul r14, qword [rax], 0x49615345
push rbx
je 0x41a41b
je 0x41a44f
jb 0x41a44e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a426
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a46d
push rax
jbe 0x41a47e
jbe 0x41a450
xor dword [rbp + 0x45], eax
xor dword [r13 + 0x52], eax
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41a454
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41a493
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41a467
xor al, 0x64
jne 0x41a4a9
je 0x41a49e
insb byte [rdi], dx
je 0x41a4aa
xor qword [r8], rsi
jne 0x41a4bf
jo 0x41a4c2
je 0x41a495
imul ebp, dword [rbp + 0x45], 0x4531624c
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41a49d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a4e4
push rax
jbe 0x41a4f5
jbe 0x41a4c7
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x49], ebx
push r12
pop rdi
jo 0x41a4e2
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41a513
jo 0x41a516
je 0x41a4e7
jbe 0x41a50f
movsxd rsp, dword [rbp + 0x35]
ja 0x41a51d
imul esi, dword [rbp + 0x45], 0x534e4b52
je 0x41a4ec
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a52b
movsxd rbx, dword [rdi + 0x73]
je 0x41a539
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a534
je 0x41a549
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5f], r11b
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x41a56f
je 0x41a542
imul ebp, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push r11
je 0x41a53c
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41a560
cmp dword [rcx + 0x6e], ecx
jo 0x41a591
je 0x41a564
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41a597
je 0x41a58c
insb byte [rdi], dx
je 0x41a598
push r11
xor byte [rdi + 0x45], bl
jo 0x41a5af
jbe 0x41a53e
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41a5ba
jo 0x41a5bd
je 0x41a58e
jbe 0x41a5b6
movsxd rsp, dword [rbp + 0x35]
ja 0x41a5c4
imul esi, dword [rbp + 0x49], 0x4e454569
push rbx
je 0x41a596
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x41a5c0
je 0x41a5a0
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x41a5f9
push rbx
je 0x41a5c3
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41a5e3
xor ebx, dword [rdi + 0x53]
jo 0x41a615
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a621
pop rdi
jo 0x41a634
jb 0x41a621
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41a604
je 0x41a638
jb 0x41a637
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a60f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a656
push rax
jbe 0x41a667
jbe 0x41a639
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a666
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a683
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4a]
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x41a67b
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x72
push r10
imul edx, dword [rbx + 0x30], 0x7645455f
jo 0x41a692
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a67d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41a6b6
je 0x41a6cb
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41a69a
je 0x41a6ce
jb 0x41a6cd
jae 0x41a6e5
jb 0x41a6e2
jns 0x41a6be
push rbx
xor byte [rdi + 0x45], bl
jbe 0x41a6ce
push rbx
xor dword [rdi + 0x50], ebx
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41a6cf
jae 0x41a6f4
xor eax, 0x75706e69
je 0x41a6db
jbe 0x41a698
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41a714
jo 0x41a717
je 0x41a6e8
jbe 0x41a710
movsxd rsp, dword [rbp + 0x36]
ja 0x41a71e
imul esi, dword [rbp + 0x54], 0x635045
pop rdi
pop rdx
push rbx
je 0x41a6ef
je 0x41a731
jo 0x41a72a
push r11
je 0x41a6f6
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41a747
outsb dx, byte gs:[rsi]
je 0x41a73f
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x49], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41a74c
jo 0x41a75a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a745
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41a769
xor dword [rdx], esi
jne 0x41a799
jo 0x41a79c
je 0x41a76d
jbe 0x41a795
movsxd rsp, dword [rbp + 0x53]
je 0x41a762
xor al, 0x64
jne 0x41a7a4
je 0x41a799
insb byte [rdi], dx
je 0x41a7a5
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x50], eax
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41a785
xor dword [rdi + 0x54], ebx
jne 0x41a7c9
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rbx
je 0x41a79b
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41a7ec
outsb dx, byte gs:[rsi]
je 0x41a7e4
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a7e4
xor bl, byte [rdi + 0x5f]
je 0x41a819
push 0x65706c65
jb 0x41a80a
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x41a840
je 0x41a813
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x41a847
je 0x41a83c
insb byte [rdi], dx
je 0x41a848
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41a823
xor dword [rdi + 0x54], ebx
jne 0x41a867
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41a85e
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41a847
pop rdi
jns 0x41a87d
pop rdi
ja 0x41a891
jo 0x41a881
insd dword [rdi], dx
insd dword [rdi], dx
jb 0x41a888
jo 0x41a89a
imul ebp, dword [rsi + 0x74], 0x50497265
jbe 0x41a8ab
cmp dword [r15 + 0x5f], r11d
outsd dx, dword fs:[rsi]
pop rdi
ja 0x41a8b1
jo 0x41a887
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
push r11
je 0x41a880
xor ebx, dword [rdi + 0x53]
jo 0x41a8b2
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a8be
pop rdi
jo 0x41a8d1
jb 0x41a8be
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41a8a1
je 0x41a8d5
jb 0x41a8d4
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a8ac
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a8f3
push rax
jbe 0x41a904
jbe 0x41a8d6
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a903
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a920
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x4a], bl
jbe 0x41a91d
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x41a93e
jae 0x41a8ce
insb byte [rdi], dx
jne 0x41a946
push 0x4c474040
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41a91d
je 0x41a95f
jo 0x41a958
push r8
cmp byte [rbp + 0x73], dl
je 0x41a939
jae 0x41a95e
push rbx
je 0x41a92d
xor al, 0x64
jne 0x41a96f
je 0x41a964
insb byte [rdi], dx
je 0x41a970
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
outsw dx, word [rsi]
jo 0x41a990
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41a9a3
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41a9ac
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41a9a0
push rbx
je 0x41a991
je 0x41a9c5
jb 0x41a9c4
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a99c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a9e3
push rax
jbe 0x41a9f4
jbe 0x41a9c6
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41a9ff
jb 0x41aa02
movsxd rsi, dword [rcx + rcx*2 + 0x53]
cmp byte [rdi + 0x4a], bl
push rbx
pop rdi
jbe 0x41a9ec
push rsp
pop rdi
jo 0x41a9f0
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41a9dc
xor eax, 0x67696c61
outsb dx, byte [rsi]
pop rdi
jae 0x41aa2a
outsd dx, dword [rsi]
jb 0x41aa1a
insd dword [edi], dx
xor esi, dword [rdx]
insd dword [rdi], dx
cmp byte [rbp + 0x45], al
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x41aa48
jo 0x41aa4b
je 0x41aa1c
jbe 0x41aa44
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x41aa15
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41aa56
push rbx
je 0x41aa2d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41aa6c
movsxd rbx, dword [rdi + 0x73]
je 0x41aa7a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41aa75
je 0x41aa8a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor dword [rdi + 0x4d], ebx
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41aa77
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41aaac
push r10
push rbx
je 0x41aa7e
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41aab8
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41aacc
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x41aad6
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41aada
pop rdi
jb 0x41aadd
jb 0x41aae1
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x41aaf7
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41aaf7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41ab00
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41aaf4
push rbx
je 0x41aae5
je 0x41ab19
jb 0x41ab18
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41aaf0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ab37
push rax
jbe 0x41ab48
jbe 0x41ab1a
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41ab19
je 0x41ab5b
jo 0x41ab54
push rax
jbe 0x41ab65
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rcx + 0x6e], r9
jo 0x41ab77
je 0x41ab4a
imul ebp, dword [rbp + 0x43], 0x4b504532
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x41ab45
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41ab69
xor dword [rax], esi
jne 0x41ab99
jo 0x41ab9c
je 0x41ab6f
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41aba2
je 0x41ab97
insb byte [rdi], dx
je 0x41aba3
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x41aba9
insb byte [rdi], dx
je 0x41abb5
jb 0x41ab97
jbe 0x41ab54
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41abbd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41abc6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41abba
push rbx
je 0x41abaa
je 0x41abde
jb 0x41abdd
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41abf5
jb 0x41abf8
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x4a], ebx
push rdx
jbe 0x41ac04
jbe 0x41abe4
push rsp
pop rdi
jo 0x41abe8
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41abd4
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41ac13
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x41ac2e
je 0x41ac01
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rsp
push r11
je 0x41ac09
xor dword [rdi + 0x4d], ebx
jne 0x41ac51
js 0x41ac3f
jae 0x41ac49
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ac4d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41ac6a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push r11
je 0x41ac3c
xor ebp, dword [rbp + 0x6f]
jbe 0x41ac75
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41ac54
je 0x41ac88
jb 0x41ac87
jbe 0x41ac2a
pop rdi
pop rdx
push rbx
je 0x41ac61
xor dword [rdi + 0x54], ebx
jne 0x41aca5
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rbx
je 0x41ac77
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41acc8
outsb dx, byte gs:[rsi]
je 0x41acc0
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41acc2
xor al, 0x5f
pop rdi
jne 0x41ad02
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x41ad09
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x41ad10
push r8
push rbx
je 0x41aced
je 0x41ad21
jb 0x41ad20
push rbx
xor dword [rdi + 0x53], ebx
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41ad15
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x41ad43
outsb dx, byte [rsi]
push r8
movsxd rbp, dword [r10 + 0x50]
movsxd rax, dword [rbp + 0x54]
xor dword [rdi + 0x54], ebx
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi + 0x53]
je 0x41ad2d
jb 0x41ad5f
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x41ad7c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41ad76
add byte [edi + 0x5a], bl
push rbx
je 0x41ad4d
xor bl, byte [rdi + 0x5f]
je 0x41ad82
push 0x65706c65
jb 0x41ad73
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41ad78
jae 0x41ad9d
push rbx
je 0x41ad6d
xor al, 0x64
jne 0x41adaf
je 0x41ada4
insb byte [rdi], dx
je 0x41adb0
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41ad8d
xor dword [rdi + 0x54], ebx
jne 0x41add1
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41adc8
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
push rbx
je 0x41adb9
je 0x41aded
jb 0x41adec
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41adc4
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ae0b
push rax
jbe 0x41ae1c
jbe 0x41adee
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41adea
je 0x41ae04
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
xor dword [rax], esi
jne 0x41ae3a
jo 0x41ae3d
je 0x41ae10
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41ae43
je 0x41ae38
insb byte [rdi], dx
je 0x41ae44
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41ae1c
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41ae43
pop rax
push rsp
pop rdi
push r11
je 0x41ae36
je 0x41ae78
jo 0x41ae71
jo 0x41ae5f
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41ae84
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41ae52
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41ae93
push rbx
je 0x41ae6a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41aea9
movsxd rbx, dword [rdi + 0x73]
je 0x41aeb7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41aeb2
je 0x41aec7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x41ae7e
pop rdi
pop rdx
ja 0x41aef5
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [r14], esi
pop rdi
movsxd rbp, dword [r9 + 0x45]
jbe 0x41aeda
jo 0x41aee7
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x41af18
je 0x41aeeb
imul ebp, dword [rbp + 0x39], 0x6c6c6966
outsb dx, byte [rsi]
jo 0x41af26
je 0x41aef8
jbe 0x41aeb5
pop rdi
pop rdx
push rbx
je 0x41aeeb
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [rbp + 0x4e]
push rbx
je 0x41af00
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41af65
jo 0x41af53
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
outsb dx, byte [rsi]
jae 0x41af71
jb 0x41af3f
xor eax, 0x31787863
xor dword [rax], eax
pop rdi
pop rdx
push rbx
je 0x41af3b
xor bl, byte [rdi + 0x5f]
jae 0x41af77
jb 0x41af77
pop rdi
jo 0x41af8a
jb 0x41af61
push rbx
je 0x41af52
je 0x41af86
jb 0x41af85
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41af95
pop rdi
jae 0x41af93
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41af97
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41afb4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4e], ecx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x41afc6
push r11
je 0x41af8f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41afd6
push rax
jbe 0x41afe7
jbe 0x41afb9
jbe 0x41afbe
push r11
pop rdi
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x32]
add byte [r15 + 0x5a], r11b
push rbx
je 0x41afc4
jbe 0x41aff5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41afce
je 0x41b002
jb 0x41b001
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x41b018
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rdx
jbe 0x41b030
jbe 0x41b004
jo 0x41b011
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b001
outsw dx, word [rsi]
jb 0x41b045
jb 0x41b035
push r10
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41b012
jb 0x41b049
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41b04d
pop rdi
jb 0x41b050
jb 0x41b054
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41b06b
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41b035
xor dword [rdi + 0x54], ebx
jne 0x41b079
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x41b090
jo 0x41b093
je 0x41b066
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41b099
je 0x41b08e
insb byte [rdi], dx
je 0x41b09a
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b0b4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41b0bd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b0b1
push rbx
je 0x41b0a1
je 0x41b0d5
jb 0x41b0d4
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x41b081
pop rdi
pop rdx
push rbx
je 0x41b0b8
xor dword [rdi + 0x54], ebx
jne 0x41b0fc
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41b0cd
xor al, 0x64
jne 0x41b10f
je 0x41b104
insb byte [rdi], dx
je 0x41b110
cmp byte [r13 + 0x73], dl
je 0x41b0f5
jae 0x41b11a
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b0fb
xor bl, byte [rdi + 0x5f]
jae 0x41b137
jb 0x41b137
pop rdi
jo 0x41b14a
jb 0x41b121
push rbx
je 0x41b112
je 0x41b146
jb 0x41b145
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b11d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b164
push rax
jbe 0x41b175
jbe 0x41b147
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b16d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41b18a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41b164
outsw dx, word [rsi]
jb 0x41b1a8
jb 0x41b198
push r10
push rbx
je 0x41b172
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b1b1
movsxd rbx, dword [rdi + 0x73]
je 0x41b1bf
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b1ba
je 0x41b1cf
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x41b1a5
jb 0x41b1dc
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41b1e0
pop rdi
jb 0x41b1e3
jb 0x41b1e7
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
cmp byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41b1fe
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41b1ca
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41b1ff
push r10
push rbx
je 0x41b1d0
xor byte [rbx + 0x68], dh
jb 0x41b20a
pop rdi
jo 0x41b21d
jb 0x41b1f4
push rbx
je 0x41b1e5
je 0x41b219
jb 0x41b218
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b1f0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b237
push rax
jbe 0x41b248
jbe 0x41b21a
push rbx
je 0x41b210
jb 0x41b247
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41b24b
pop rdi
jb 0x41b24e
jb 0x41b252
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x41b268
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41b235
xor bl, byte [rdi + 0x5f]
je 0x41b26a
push 0x65706c65
jb 0x41b25b
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x41b291
je 0x41b264
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x41b298
je 0x41b28d
insb byte [rdi], dx
je 0x41b299
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41b274
xor dword [rdi + 0x54], ebx
jne 0x41b2b8
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x41b2af
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41b2ca
jno 0x41b2b5
push rbx
je 0x41b2a0
je 0x41b2d4
jb 0x41b2d3
xor ch, byte fs:[rcx + 0x64]
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41b2b3
je 0x41b2f5
jo 0x41b2ee
push rax
cmp byte [rbp + 0x73], dl
je 0x41b2cf
jae 0x41b2f4
push rbx
je 0x41b2c3
xor al, 0x64
jne 0x41b305
je 0x41b2fa
insb byte [rdi], dx
je 0x41b306
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
imul ebp, dword [rsi + 0x70], 0x754d7475
je 0x41b32b
js 0x41b2c8
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41b344
jo 0x41b347
je 0x41b327
je 0x41b348
imul ebp, dword [rsi + 0x67], 0x52453143
push rbx
je 0x41b318
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b357
movsxd rbx, dword [rdi + 0x73]
je 0x41b365
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b360
je 0x41b375
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x41b349
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41b38a
push rbx
je 0x41b361
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b3a0
movsxd rbx, dword [rdi + 0x73]
je 0x41b3ae
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b3a9
je 0x41b3be
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor ebx, dword [rdi + 0x4d]
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x41b3b0
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41b3ea
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41b3fe
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x31], 0x72617030
insd dword [rdi], dx
pop rdi
je 0x41b41d
jo 0x41b40b
xor al, byte [r13 + 0x69]
imul eax, dword [rax], 0x534e5a5f
je 0x41b3e8
jbe 0x41b419
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41b3f4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b433
movsxd rbx, dword [rdi + 0x73]
je 0x41b441
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b43c
je 0x41b451
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
pop rdi
pop r15
jne 0x41b46c
je 0x41b461
jo 0x41b475
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push r11
je 0x41b449
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b488
movsxd rbx, dword [rdi + 0x73]
je 0x41b496
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b491
je 0x41b4a6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x64
je 0x41b4a7
jbe 0x41b489
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41b491
xor ebx, dword [rdi + 0x53]
jo 0x41b4c3
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41b4cf
pop rdi
jo 0x41b4e2
jb 0x41b4cf
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41b4b2
je 0x41b4e6
jb 0x41b4e5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b4bd
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b504
push rax
jbe 0x41b515
jbe 0x41b4e7
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b514
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41b531
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41b50d
je 0x41b527
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41b55e
je 0x41b531
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41b564
je 0x41b559
insb byte [rdi], dx
je 0x41b565
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41b53d
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41b564
pop rax
push rsp
pop rdi
push r11
je 0x41b557
je 0x41b599
jo 0x41b592
jo 0x41b580
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41b5a5
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rsp
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3032
jae 0x41b5bc
pop rdi
movsxd rbp, dword [rcx + 0x73]
jae 0x41b5b9
je 0x41b5d5
jo 0x41b5c3
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push r11
je 0x41b5a9
xor al, 0x64
jne 0x41b5eb
je 0x41b5e0
insb byte [rdi], dx
je 0x41b5ec
xor qword [r10], rsi
jne 0x41b601
jo 0x41b604
je 0x41b5d5
jbe 0x41b5fd
movsxd rsp, dword [rbp + 0x45]
movsxd rbp, dword [rbp + rax*2 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x41b5d7
xor al, 0x64
jne 0x41b619
je 0x41b60e
insb byte [rdi], dx
je 0x41b61a
xor qword [r8], rsi
jne 0x41b62f
jo 0x41b632
je 0x41b605
imul ebp, dword [rbp + 0x45], 0x50456c63
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41b602
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41b641
insd dword [rdi], dx
xor byte [rbp + 0x53], al
je 0x41b616
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41b667
outsb dx, byte gs:[rsi]
je 0x41b65f
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor byte [rbp + 0x45], al
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b695
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41b69e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b692
push rbx
je 0x41b682
je 0x41b6b6
jb 0x41b6b5
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41b694
je 0x41b6c8
jb 0x41b6c7
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b69f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b6e6
push rax
jbe 0x41b6f7
jbe 0x41b6c9
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41b6c7
jae 0x41b6fb
outsb dx, byte [esi]
imul esi, dword [rsp], 0x534e5a5f
je 0x41b6d0
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41b70f
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41b6e3
xor al, 0x64
jne 0x41b725
je 0x41b71a
insb byte [rdi], dx
je 0x41b726
cmp byte [r13 + 0x73], dl
je 0x41b70b
jae 0x41b730
xor dword [rbp + 0x45], eax
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rcx + 0x6e], r9
jo 0x41b75c
je 0x41b72f
imul ebp, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41b76d
jo 0x41b770
je 0x41b741
jbe 0x41b769
movsxd rsp, dword [rbp + 0x35]
ja 0x41b777
imul esi, dword [rbp + 0x49], 0x35314152
pop rdi
movsxd rsp, dword [r9 + r9*2 + 0x63]
push rbx
je 0x41b753
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41b75b
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41b7a3
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
ja 0x41b7cf
imul esi, dword [rbp + 0x6c], 0x524a496e
pop rdi
movsxd rbp, dword [r9 + 0x52]
cmp dword [r15 + 0x53], ebx
xor byte [rdi + 0x45], bl
jbe 0x41b7ba
jo 0x41b7c7
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b7b2
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41b804
jb 0x41b7db
push rbx
push r11
je 0x41b7ca
xor ebx, dword [rdi + 0x53]
jo 0x41b7fc
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41b808
pop rdi
jo 0x41b81b
jb 0x41b808
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41b7eb
je 0x41b81f
jb 0x41b81e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b7f6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b83d
push rax
jbe 0x41b84e
jbe 0x41b820
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b84d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41b86a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r12d, dword [r15 + 0x65]
je 0x41b84f
jbe 0x41b80c
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x41b889
jo 0x41b88c
je 0x41b85d
jbe 0x41b885
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x41b85b
je 0x41b88f
jb 0x41b88e
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b899
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x41b8b2
jb 0x41b899
push rbx
je 0x41b88a
je 0x41b8be
jb 0x41b8bd
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b895
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b8dc
push rax
jbe 0x41b8ed
jbe 0x41b8bf
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41b8bf
outsw dx, word [rsi]
jb 0x41b903
jb 0x41b8f3
push r10
xor dword [r14], esi
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41b8d1
jb 0x41b908
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41b90c
pop rdi
jb 0x41b90f
jb 0x41b913
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41b92a
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41b8f8
je 0x41b93a
jo 0x41b933
push r8
xor dword [rdx], esi
jne 0x41b944
jo 0x41b947
je 0x41b918
jbe 0x41b940
movsxd rsp, dword [rbp + 0x53]
je 0x41b90d
xor al, 0x64
jne 0x41b94f
je 0x41b944
insb byte [rdi], dx
je 0x41b950
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x41b93f
xor dword [rdi + 0x4d], ebx
jne 0x41b987
js 0x41b975
jae 0x41b97f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b983
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41b9a0
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x41b971
xor dword [rdi + 0x54], ebx
jne 0x41b9b5
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x41b9cc
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41b999
xor ebx, dword [rdi + 0x53]
jo 0x41b9cb
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41b9d7
pop rdi
jo 0x41b9ea
jb 0x41b9d7
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41b9ba
je 0x41b9ee
jb 0x41b9ed
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b9c5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ba0c
push rax
jbe 0x41ba1d
jbe 0x41b9ef
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ba1c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41ba39
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x49], ecx
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x41ba31
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41ba1b
xor dword [rbp + 0x61], ebp
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
push rbx
je 0x41ba31
je 0x41ba65
jb 0x41ba64
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ba3c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ba83
push rax
jbe 0x41ba94
jbe 0x41ba66
push r11
pop rdi
push r11
je 0x41ba5e
xor byte [rbx + 0x68], dh
jb 0x41ba98
pop rdi
jo 0x41baab
jb 0x41ba82
push rsp
pop rdi
jo 0x41ba8e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41bac1
je 0x41ba92
jbe 0x41baba
movsxd rsp, dword [rbp + 0x32]
xor dh, byte [rdx + 0x65]
push rbp
outsb dx, byte [rsi]
jae 0x41bac6
outsb dx, byte [esi]
outsb dx, byte fs:[rsi]
je 0x41baac
outsb dx, byte gs:[rsi]
jb 0x41bacb
insb byte [rdi], dx
push 0x45
imul r10d, dword [r10 + 0x54], 0x5f00635f
pop rdx
push rbx
je 0x41bab2
pop rdi
jae 0x41baf3
jb 0x41baf0
jns 0x41bacc
push rax
push rbx
je 0x41babf
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41bafe
movsxd rbx, dword [rdi + 0x73]
je 0x41bb0c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41bb07
je 0x41bb1c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
xor eax, 0x5476455f
pop rdi
push rbx
pop rdi
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x41bb02
xor dword [rdi + 0x54], ebx
jne 0x41bb46
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41bb5d
jo 0x41bb60
je 0x41bb31
jbe 0x41bb59
movsxd rsp, dword [rbp + 0x53]
je 0x41bb26
xor al, 0x64
jne 0x41bb68
je 0x41bb5d
insb byte [rdi], dx
je 0x41bb69
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41bb5e
push r12
pop rdi
jo 0x41bb6f
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41bb5b
xor ebp, dword [rbp + 0x6f]
jbe 0x41bb94
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41bb75
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41bbb4
movsxd rbx, dword [rdi + 0x73]
je 0x41bbc2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41bbbd
je 0x41bbd2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x41bbe1
jbe 0x41bb74
pop rdi
pop rdx
push rbx
je 0x41bbab
xor al, 0x5f
pop rdi
jae 0x41bbe7
jb 0x41bbe7
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41bbd3
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41bbf2
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41bc0f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4e], ecx
push rbx
je 0x41bbe5
je 0x41bc19
jb 0x41bc18
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41bbf0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41bc37
push rax
jbe 0x41bc48
jbe 0x41bc1a
push r11
push r11
pop rdi
push r11
pop r15
push r11
je 0x41bc1a
cmp dword [rdi + 0x53], ebx
jo 0x41bc4d
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41bc5d
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x41bc57
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
push r11
je 0x41bc44
cmp dword [rdi + 0x53], ebx
jo 0x41bc77
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41bc87
add byte [edi + 0x5a], bl
push rbx
je 0x41bc63
je 0x41bca5
jo 0x41bc9e
push r8
xor dword [rdx], esi
jne 0x41bcaf
jo 0x41bcb2
je 0x41bc83
jbe 0x41bcab
movsxd rsp, dword [rbp + 0x53]
je 0x41bc78
xor al, 0x64
jne 0x41bcba
je 0x41bcaf
insb byte [rdi], dx
je 0x41bcbb
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41bca9
xor dword [rdi + 0x54], ebx
jne 0x41bced
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41bcbe
xor al, 0x64
jne 0x41bd00
je 0x41bcf5
insb byte [rdi], dx
je 0x41bd01
cmp byte [r13 + 0x73], dl
je 0x41bce6
jae 0x41bd0b
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41bcf1
outsw dx, word [rsi]
jb 0x41bd35
jb 0x41bd25
push r10
xor ebx, dword [r15 + 0x4b]
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41bd02
jb 0x41bd39
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41bd3d
pop rdi
jb 0x41bd40
jb 0x41bd44
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41bd5b
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41bd26
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x41bd64
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x41bd6b
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41bd51
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41bd90
movsxd rbx, dword [rdi + 0x73]
je 0x41bd9e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41bd99
je 0x41bdae
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x41bd7e
xor ebp, dword [rbp + 0x6f]
jbe 0x41bdb7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41bd9e
xor al, 0x5f
push rbx
jo 0x41bdd1
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x41bdc6
imul r14, qword [rax], 0x49615345
push rbx
je 0x41bdbe
je 0x41bdf2
jb 0x41bdf1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41bdc9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41be10
push rax
jbe 0x41be21
jbe 0x41bdf3
xor dword [rbp + 0x45], eax
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41bdf4
je 0x41be0e
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x41be44
jo 0x41be47
je 0x41be1a
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41be4d
je 0x41be42
insb byte [rdi], dx
je 0x41be4e
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41be26
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41be4d
pop rax
push rsp
pop rdi
push r11
je 0x41be40
je 0x41be82
jo 0x41be7b
jo 0x41be69
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41be8e
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41be5c
xor bl, byte [rdi + 0x5f]
jae 0x41be98
jb 0x41be98
pop rdi
jo 0x41beab
jb 0x41be82
push rbx
je 0x41be73
je 0x41bea7
jb 0x41bea6
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41beb6
pop rdi
jae 0x41beb4
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41beb8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41bed5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x41bee7
push r11
je 0x41beb0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41bef7
push rax
jbe 0x41bf08
jbe 0x41beda
jbe 0x41bedf
push r11
pop rdi
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x32]
add byte [r15 + 0x5a], r11b
push r11
je 0x41bee1
xor ebp, dword [rbp + 0x6f]
jbe 0x41bf1a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41befb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41bf3a
movsxd rbx, dword [rdi + 0x73]
je 0x41bf48
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41bf43
je 0x41bf58
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41befa
pop rdi
pop rdx
push rbx
je 0x41bf32
insd dword [rdi], dx
js 0x41bf4c
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
jae 0x41bf86
jb 0x41bf88
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41bf8d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41bf96
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41bf8a
push rbx
je 0x41bf76
xor ebx, dword [rdi + 0x53]
jo 0x41bfa8
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41bfb4
pop rdi
jo 0x41bfc7
jb 0x41bfb4
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41bf97
je 0x41bfcb
jb 0x41bfca
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41bfa2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41bfe9
push rax
jbe 0x41bffa
jbe 0x41bfcc
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c00e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41bfea
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c029
movsxd rbx, dword [rdi + 0x73]
je 0x41c037
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c032
je 0x41c047
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41c035
xor dword [rdi + 0x54], ebx
jne 0x41c079
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x41c090
jo 0x41c093
je 0x41c066
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41c099
je 0x41c08e
insb byte [rdi], dx
je 0x41c09a
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41c0c6
jo 0x41c0c9
je 0x41c09a
jbe 0x41c0c2
movsxd rsp, dword [rbp + 0x35]
ja 0x41c0d0
imul esi, dword [rbp + 0x45], 0x6544364e
je 0x41c0c9
imul ebp, dword [rcx + rdi + 0x50], 0x69636572
jae 0x41c0db
outsd dx, dword [rsi]
outsb dx, byte [rsi]
add byte [r15 + 0x5f], r11b
je 0x41c0dd
pop rdi
jae 0x41c0f3
jb 0x41c0f6
add byte [rdi + 0x5a], bl
push rbx
je 0x41c0bf
outsw dx, word [rsi]
jb 0x41c103
jb 0x41c0f3
push r8
jbe 0x41c10a
push r12
pop rdi
push rdx
push rbx
je 0x41c0cf
jb 0x41c106
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c10a
pop rdi
jb 0x41c10d
jb 0x41c111
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x41c128
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41c0f7
je 0x41c12b
jb 0x41c12a
xor dh, byte fs:[rax]
push 0x77647261
jb 0x41c136
pop rdi
movsxd rbp, dword [rdi + 0x6e]
movsxd rsi, dword [rbp + 0x72]
jb 0x41c13f
outsb dx, byte [rsi]
movsxd rdi, dword [rcx + 0x45]
jbe 0x41c120
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rdi], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c128
je 0x41c142
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41c178
jo 0x41c17b
je 0x41c14c
jbe 0x41c174
movsxd rsp, dword [rbp + 0x53]
je 0x41c141
xor al, 0x64
jne 0x41c183
je 0x41c178
insb byte [rdi], dx
je 0x41c184
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41c15c
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41c183
pop rax
push rsp
pop rdi
push r11
je 0x41c176
je 0x41c1b8
jo 0x41c1b1
jo 0x41c19f
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41c1c4
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41c1d7
jo 0x41c1da
je 0x41c1ab
jbe 0x41c1d3
movsxd rsp, dword [rbp + 0x44]
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41c1a8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c1ef
push rax
jbe 0x41c200
jbe 0x41c1d2
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x4a], ebx
push r12
pop rdi
jo 0x41c1ed
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c1d9
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41c1fd
xor dword [rdx], esi
jne 0x41c22d
jo 0x41c230
je 0x41c201
jbe 0x41c229
movsxd rsp, dword [rbp + 0x53]
je 0x41c1f6
xor al, 0x64
jne 0x41c238
je 0x41c22d
insb byte [rdi], dx
je 0x41c239
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41c21b
outsw dx, word [rsi]
jb 0x41c25f
jb 0x41c24f
push r11
je 0x41c220
xor al, 0x64
jne 0x41c262
je 0x41c257
insb byte [rdi], dx
je 0x41c263
xor qword [r10], rsi
jne 0x41c278
jo 0x41c27b
je 0x41c24c
jbe 0x41c274
movsxd rsp, dword [rbp + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x41c248
jb 0x41c27f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c283
pop rdi
jb 0x41c286
jb 0x41c28a
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41c2a1
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41c271
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c2b0
movsxd rbx, dword [rdi + 0x73]
je 0x41c2be
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c2b9
je 0x41c2ce
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41c2ba
jbe 0x41c2eb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41c2c6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c305
movsxd rbx, dword [rdi + 0x73]
je 0x41c313
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c30e
je 0x41c323
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x41c30a
je 0x41c33e
jb 0x41c33d
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41c34d
pop rdi
jae 0x41c34b
add byte [r15 + 0x5a], r11b
push rbx
je 0x41c31e
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41c368
jb 0x41c36b
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x41c332
je 0x41c366
jb 0x41c365
push rbx
xor byte [rdi + 0x45], bl
jbe 0x41c35a
push rsp
pop rdi
jo 0x41c35e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c34a
xor byte [rbx + 0x68], dh
jb 0x41c384
pop rdi
jo 0x41c397
jb 0x41c36e
push rbx
je 0x41c35f
je 0x41c393
jb 0x41c392
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41c3a2
pop rdi
jae 0x41c3a0
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41c37e
outsw dx, word [rsi]
jb 0x41c3c2
jb 0x41c3b2
push r10
xor dword [rip + 0x45634b5f], esi
push r12
pop rdi
push rdx
push rbx
je 0x41c390
jb 0x41c3c7
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c3cb
pop rdi
jb 0x41c3ce
jb 0x41c3d2
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41c3e9
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41c3b3
xor dword [rdi + 0x54], ebx
jne 0x41c3f7
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x41c40e
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41c3e4
insd dword [rdi], dx
jne 0x41c426
js 0x41c3eb
jne 0x41c425
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x45]
jbe 0x41c3be
pop rdi
pop rdx
ja 0x41c435
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [r15 + rbx*2], esi
movsxd rsp, dword [r13 + r8*2 + 0x45]
jbe 0x41c41a
jo 0x41c427
push rsp
pop rdi
add byte [rbx + 0x74], dh
jb 0x41c442
insd dword [rdi], dx
jo 0x41c422
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41c458
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41c461
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41c455
push rbx
je 0x41c445
je 0x41c479
jb 0x41c478
jae 0x41c48f
jb 0x41c48c
jns 0x41c468
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41c476
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c461
je 0x41c47b
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41c4b2
je 0x41c485
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41c4b8
je 0x41c4ad
insb byte [rdi], dx
je 0x41c4b9
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41c492
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41c4b9
pop rax
push rsp
pop rdi
push r11
je 0x41c4ac
je 0x41c4ee
jo 0x41c4e7
jo 0x41c4d5
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41c4fa
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
push rbx
je 0x41c4d2
je 0x41c506
jb 0x41c505
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c4dd
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c524
push rax
jbe 0x41c535
jbe 0x41c507
xor dword [r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c538
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41c551
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41c52a
je 0x41c55e
jb 0x41c55d
push rbx
je 0x41c533
jbe 0x41c564
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
jo 0x41c582
jbe 0x41c515
pop rdi
pop rdx
push rbx
je 0x41c551
je 0x41c585
jb 0x41c584
xor dword fs:[r9 + 0x52], ecx
jbe 0x41c59e
push r12
pop rdi
jo 0x41c582
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c573
jbe 0x41c5a4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41c57f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c5be
movsxd rbx, dword [rdi + 0x73]
je 0x41c5cc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c5c7
je 0x41c5dc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41c5bc
xor dword [rdi + 0x54], ebx
jne 0x41c600
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41c5d1
xor al, 0x64
jne 0x41c613
je 0x41c608
insb byte [rdi], dx
je 0x41c614
cmp qword [r9 + 0x6e], rcx
jo 0x41c62a
je 0x41c5fd
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41c602
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41c641
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41c65b
jo 0x41c65e
je 0x41c631
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41c63a
xor ebx, dword [rdi + 0x53]
jo 0x41c66c
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41c678
pop rdi
jo 0x41c68b
jb 0x41c678
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41c65b
je 0x41c68f
jb 0x41c68e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c666
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c6ad
push rax
jbe 0x41c6be
jbe 0x41c690
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c6bd
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c6da
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
pop rdi
pop r15
jo 0x41c6ed
jb 0x41c6c0
jbe 0x41c67d
pop rdi
pop rdx
push rbx
je 0x41c6b5
xor ebx, dword [rdi + 0x53]
jo 0x41c6e7
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41c6f3
pop rdi
jo 0x41c706
jb 0x41c6f3
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41c6d6
je 0x41c70a
jb 0x41c709
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c6e1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c728
push rax
jbe 0x41c739
jbe 0x41c70b
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c738
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c755
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rdi + rbx*2], esi
pop r15
je 0x41c756
insb byte [rdi], dx
je 0x41c762
jb 0x41c744
push rdx
push r11
je 0x41c73d
je 0x41c77f
jo 0x41c76d
pop rdi
imul ebp, dword [rsi + 0x66], 0x5a5f006f
push rbx
je 0x41c746
xor ebx, dword [rdi + 0x53]
jo 0x41c778
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41c784
pop rdi
jo 0x41c797
jb 0x41c784
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41c767
je 0x41c79b
jb 0x41c79a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c772
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c7b9
push rax
jbe 0x41c7ca
jbe 0x41c79c
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c7c9
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c7e6
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4a], ecx
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x41c7de
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c7fb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41c804
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41c7f8
push rbx
je 0x41c7e9
je 0x41c81d
jb 0x41c81c
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c7f4
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c83b
push rax
jbe 0x41c84c
jbe 0x41c81e
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41c819
xor dword [rdi + 0x54], ebx
jne 0x41c85d
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41c874
jo 0x41c877
je 0x41c848
jbe 0x41c870
movsxd rsp, dword [rbp + 0x53]
je 0x41c83d
xor al, 0x64
jne 0x41c87f
je 0x41c874
insb byte [rdi], dx
je 0x41c880
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41c866
cmp dword [rdi + 0x5f], ebx
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword gs:[esi]
jb 0x41c8c2
push r8
movsxd rax, dword [r13 + 0x4e]
push rbx
je 0x41c883
xor eax, 0x72657469
je 0x41c8c9
jb 0x41c8bb
je 0x41c8d0
imul esi, dword [rbx + rsi*2 + 0x49], 0x31455f54
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword gs:[esi]
jb 0x41c8f2
push r10
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41c8fc
jo 0x41c8ff
je 0x41c8d0
jbe 0x41c8f8
movsxd rsp, dword [rbp + 0x35]
ja 0x41c906
imul esi, dword [rbp + 0x45], 0x634b50
pop rdi
pop rdx
push rbx
je 0x41c8d2
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41c91c
jb 0x41c91f
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x41c8e8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c927
movsxd rbx, dword [rdi + 0x73]
je 0x41c935
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c930
je 0x41c945
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41c936
push rsp
pop rdi
jo 0x41c93a
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c92a
je 0x41c96c
jo 0x41c965
push rax
xor dword [rdx], esi
jne 0x41c976
jo 0x41c979
je 0x41c94a
jbe 0x41c972
movsxd rsp, dword [rbp + 0x53]
je 0x41c93f
xor al, 0x64
jne 0x41c981
je 0x41c976
insb byte [rdi], dx
je 0x41c982
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
ja 0x41c9b0
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [r9], esi
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x41c988
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c9c7
movsxd rbx, dword [rdi + 0x73]
je 0x41c9d5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c9d0
je 0x41c9e5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41c9c9
jo 0x41c9d6
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c9c6
je 0x41c9fa
jb 0x41c9f9
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41ca09
pop rdi
jae 0x41ca07
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41c9e3
outsw dx, word [rsi]
jb 0x41ca27
jb 0x41ca17
push r10
push rax
xor dword [rdx], esi
jne 0x41ca2f
jo 0x41ca32
je 0x41ca03
jbe 0x41ca2b
movsxd rsp, dword [rbp + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x41c9fe
jb 0x41ca35
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41ca39
pop rdi
jb 0x41ca3c
jb 0x41ca40
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41ca57
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41ca25
movsxd rbp, dword [rdi + 0x70]
jns 0x41ca53
outsb dx, byte [rsi]
push r8
movsxd rbp, dword [r10 + 0x50]
movsxd rax, dword [rbp + 0x54]
xor dword [rdi + 0x54], ebx
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41ca41
xor bl, byte [rdi + 0x57]
imul ebx, dword [rdi + 0x72], 0x65
jae 0x41ca8f
insb byte [rdi], dx
je 0x41ca7c
je 0x41ca98
jo 0x41ca86
pop rdi
imul ebp, dword [rbp + 0x70], 0x7453496c
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x41ca9f
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x41caae
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x45], 0x76453143
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x41cab9
je 0x41cabe
jb 0x41cac7
ja 0x41ca9a
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41cad0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41cae9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41cac2
je 0x41caf6
jb 0x41caf5
push rbx
je 0x41cacb
jbe 0x41cafc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x62
jae 0x41cb12
jbe 0x41cab0
jo 0x41cb26
push 0x64616572
pop rdi
insd dword [rdi], dx
jne 0x41cb2f
js 0x41cb1d
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41cb07
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41cb59
jb 0x41cb30
push rbx
push r11
je 0x41cb1f
xor ebx, dword [rdi + 0x53]
jo 0x41cb51
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41cb5d
pop rdi
jo 0x41cb70
jb 0x41cb5d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41cb40
je 0x41cb74
jb 0x41cb73
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41cb4b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41cb92
push rax
jbe 0x41cba3
jbe 0x41cb75
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41cba2
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41cbbf
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41cb96
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41cbd7
push r11
je 0x41cbac
je 0x41cbe0
jb 0x41cbdf
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
je 0x41cbec
push rsp
jo 0x41cbef
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41cbdf
jbe 0x41cb9c
pop rdi
pop rdx
ja 0x41cc13
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [r14], esi
pop rdi
movsxd rbp, dword [r9 + 0x45]
jbe 0x41cbf8
jo 0x41cc05
push rsp
pop rdi
add byte [rsi + 0x72], ah
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41cc35
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41cc3e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41cc32
push rbx
je 0x41cc23
je 0x41cc57
jb 0x41cc56
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41cc2e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41cc75
push rax
jbe 0x41cc86
jbe 0x41cc58
jae 0x41cc90
jb 0x41cc8d
jns 0x41cc69
push rbx
cmp byte [rdi + 0x45], bl
jbe 0x41cc77
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41cca8
je 0x41cc79
jbe 0x41cca1
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x53], 0x65636170
movsxd r8, dword [r8]
pop rdi
pop rdx
push rbx
push r11
je 0x41cc84
je 0x41ccb8
jb 0x41ccb7
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41ccd6
jo 0x41ccd9
je 0x41ccaa
jbe 0x41ccd2
movsxd rsp, dword [rbp + 0x35]
ja 0x41cce0
imul esi, dword [rbp + 0x49], 0x36314152
pop rdi
movsxd rbp, dword [r9 + 0x49]
movsxd rax, dword [rbp + 0x45]
push rbx
je 0x41ccbc
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41ccc4
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41cd0c
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41cd3d
jo 0x41cd40
je 0x41cd11
jbe 0x41cd39
movsxd rsp, dword [rbp + 0x35]
ja 0x41cd47
imul esi, dword [rbp + 0x49], 0x33415269
pop rdi
movsxd rcx, dword [r9 + 0x52]
push rbx
je 0x41cd1e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41cd5d
movsxd rbx, dword [rdi + 0x73]
je 0x41cd6b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41cd66
je 0x41cd7b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x41cd5e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41cd66
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41cdae
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41cd9f
outsw dx, word [rsi]
jb 0x41cde3
jb 0x41cdd3
push rbx
je 0x41cdab
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41cdea
movsxd rbx, dword [rdi + 0x73]
je 0x41cdf8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41cdf3
je 0x41ce08
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x41cdde
jb 0x41ce15
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41ce19
pop rdi
jb 0x41ce1c
jb 0x41ce20
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x41ce37
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41ce01
xor dword [rbx + 0x68], esp
jb 0x41ce35
je 0x41ce4a
imul esi, dword [rbx + rsi*2 + 0x49], 0x63374563
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x41ce46
jb 0x41ce4c
push r8
movsxd rdx, dword [r11 + 0x32]
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5f], bl
jae 0x41ce68
pop rdi
jae 0x41ce6c
jb 0x41ce6f
add byte [rbp + 0x73], dh
je 0x41ce4a
outsb dx, byte [rsi]
js 0x41ce06
pop rdi
pop rdx
push rbx
je 0x41ce3d
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41ce61
xor dword [rdx], esi
jne 0x41ce91
jo 0x41ce94
je 0x41ce65
jbe 0x41ce8d
movsxd rsp, dword [rbp + 0x53]
je 0x41ce5a
xor al, 0x64
jne 0x41ce9c
je 0x41ce91
insb byte [rdi], dx
je 0x41ce9d
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push rbx
je 0x41ce87
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41cec6
movsxd rbx, dword [rdi + 0x73]
je 0x41ced4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41cecf
je 0x41cee4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41cebd
xor dword [rdi + 0x54], ebx
jne 0x41cf01
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41cee8
jae 0x41cf0d
push rbx
je 0x41cedc
xor al, 0x64
jne 0x41cf1e
je 0x41cf13
insb byte [rdi], dx
je 0x41cf1f
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41cf14
push r12
pop rdi
jo 0x41cf25
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41cf10
xor bl, byte [rdi + 0x5f]
je 0x41cf45
push 0x65706c65
jb 0x41cf36
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41cf6b
jo 0x41cf6e
je 0x41cf41
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x41cf75
je 0x41cf6a
insb byte [rdi], dx
je 0x41cf76
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41cf51
xor dword [rdi + 0x54], ebx
jne 0x41cf95
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41cf8c
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41cf89
jae 0x41cfae
cmp dword [rbx + 0x6f], esi
insb byte [rdi], dx
jbe 0x41cfb4
push rbx
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x41cf99
jbe 0x41cf56
pop rdi
pop rdx
push rbx
je 0x41cf8d
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41cfcc
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41cfa0
xor al, 0x64
jne 0x41cfe2
je 0x41cfd7
insb byte [rdi], dx
je 0x41cfe3
cmp qword [r9 + 0x6e], rcx
jo 0x41cff9
je 0x41cfcc
imul ebp, dword [rbp + 0x45], 0x4531624c
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d006
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41d00f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d003
push rbx
je 0x41cff4
je 0x41d028
jb 0x41d027
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41cfff
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d046
push rax
jbe 0x41d057
jbe 0x41d029
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41d062
jb 0x41d065
movsxd rsi, dword [rcx + rcx*2 + 0x53]
cmp byte [rdi + 0x49], bl
push rbx
pop rdi
jbe 0x41d04f
push rsp
pop rdi
jo 0x41d053
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rsp
push rsi
push rbx
je 0x41d046
je 0x41d07a
jb 0x41d079
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d051
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d098
push rax
jbe 0x41d0a9
jbe 0x41d07b
add byte [r15 + 0x5a], r11b
push rbx
je 0x41d078
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x41d096
xor eax, 0x67696c61
outsb dx, byte [rsi]
pop rdi
jae 0x41d0e4
outsd dx, dword [rsi]
jb 0x41d0d4
insd dword [edi], dx
xor esi, dword [rdx]
insd dword [rdi], dx
cmp byte [rbp + 0x45], al
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41d0bd
je 0x41d0d7
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x41d10d
jo 0x41d110
je 0x41d0e1
jbe 0x41d109
movsxd rsp, dword [rbp + 0x53]
je 0x41d0d6
xor al, 0x64
jne 0x41d118
je 0x41d10d
insb byte [rdi], dx
je 0x41d119
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41d0f1
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41d118
pop rax
push rsp
pop rdi
push r11
je 0x41d10b
je 0x41d14d
jo 0x41d146
jo 0x41d134
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41d159
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d127
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41d168
push r11
je 0x41d13d
je 0x41d171
jb 0x41d170
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x41d128
pop rdi
pop rdx
push rbx
je 0x41d15f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d1a6
push rax
jbe 0x41d1b7
jbe 0x41d189
movsxd r13, dword [r13 + rax*2 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41d181
pop rdi
push rdi
imul ebx, dword [rdi + 0x72], 0x65
jae 0x41d1d0
insb byte [rdi], dx
je 0x41d1bd
je 0x41d1d9
jo 0x41d1c7
push r11
je 0x41d198
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41d1d2
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41d1e6
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x76453243
add byte [rdi + 0x5a], bl
push rbx
je 0x41d1bf
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41d1fe
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41d1e8
jae 0x41d20d
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41d1f7
je 0x41d22b
jb 0x41d22a
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41d204
je 0x41d21e
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
xor dword [rdx], esi
jne 0x41d254
jo 0x41d257
je 0x41d228
jbe 0x41d250
movsxd rsp, dword [rbp + 0x53]
je 0x41d21d
xor al, 0x64
jne 0x41d25f
je 0x41d254
insb byte [rdi], dx
je 0x41d260
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41d238
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41d25f
pop rax
push rsp
pop rdi
push r11
je 0x41d252
je 0x41d294
jo 0x41d28d
jo 0x41d27b
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41d2a0
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x41d27e
pop rdi
push rbx
jo 0x41d2b1
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41d2bd
pop rdi
jae 0x41d2c3
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d2c7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41d2e4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41d2b9
xor dword [rdi + 0x54], ebx
jne 0x41d2fd
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41d2ce
xor al, 0x64
jne 0x41d310
je 0x41d305
insb byte [rdi], dx
je 0x41d311
xor qword [r10], rsi
jne 0x41d326
jo 0x41d329
je 0x41d2fa
jbe 0x41d322
movsxd rsp, dword [rbp + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41d303
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x41d339
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d343
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x41d31c
jb 0x41d34e
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x41d36b
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41d365
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x41d36d
insd dword [rdi], dx
movsxd rax, dword [r13 + 0x45]
push rax
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x41d362
je 0x41d396
jb 0x41d395
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d36d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d3b4
push rax
jbe 0x41d3c5
jbe 0x41d397
xor dword [r13 + 0x76], eax
add byte [rsi + 0x67], ah
je 0x41d3d3
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
push rbx
je 0x41d3ae
je 0x41d3e2
jb 0x41d3e1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d3b9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d400
push rax
jbe 0x41d411
jbe 0x41d3e3
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor al, 0x73
insd dword [rdi], dx
js 0x41d3f8
push r10
push rsp
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d3f4
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41d433
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x41d44d
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41d423
je 0x41d43d
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
cmp byte [rbp + 0x73], dl
je 0x41d443
jae 0x41d468
push rbx
je 0x41d437
xor al, 0x64
jne 0x41d479
je 0x41d46e
insb byte [rdi], dx
je 0x41d47a
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41d452
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41d479
pop rax
push rsp
pop rdi
push r11
je 0x41d46c
je 0x41d4ae
jo 0x41d4a7
jo 0x41d495
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41d4ba
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rsp
xor qword [r9], rsi
outsb dx, byte [rsi]
jo 0x41d4d0
je 0x41d4a1
jbe 0x41d4c9
movsxd rsp, dword [rbp]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x41d4d5
push rax
jbe 0x41d46b
pop rdi
pop rdx
push rbx
je 0x41d4a2
xor dword [rdi + 0x54], ebx
jne 0x41d4e6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41d4fe
je 0x41d4d1
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41d504
je 0x41d4f9
insb byte [rdi], dx
je 0x41d505
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41d4ec
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41d52d
push r11
je 0x41d502
je 0x41d536
jb 0x41d535
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41d51a
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x41d564
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x41d573
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41d591
outsb dx, byte gs:[rsi]
je 0x41d589
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x4a]
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x41d5a7
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41d592
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d5cb
je 0x41d5e0
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41d5af
je 0x41d5e3
jb 0x41d5e2
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41d5fb
jb 0x41d5fe
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor byte [rdi + 0x4a], bl
push rdx
jbe 0x41d60a
jbe 0x41d5ec
push rbx
xor dword [rdi + 0x50], ebx
push rsp
pop rdi
jo 0x41d5f2
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d611
jno 0x41d5f7
movsxd rax, dword [rbp + 0x4e]
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41d617
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x41d608
pop rdi
pop rdi
imul esi, dword [rbx + 0x5f], 0x72616863
push r12
pop rdi
pop rdi
pop rdi
jbe 0x41d642
insb byte [rdi], dx
jne 0x41d649
pop rdi
pop rdi
je 0x41d665
jo 0x41d653
push r10
push rbx
je 0x41d62c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d66b
movsxd rbx, dword [rdi + 0x73]
je 0x41d679
imul ebp, dword [rsi + 0x67], 0x5f335349
push rbx
je 0x41d642
xor dword [rbx + 0x68], esp
jb 0x41d676
je 0x41d68b
imul esi, dword [rbx + rsi*2 + 0x49], 0x455f3353
push rbx
push r11
xor ebx, dword [rdi + 0x45]
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41d66b
outsw dx, word [rsi]
jb 0x41d6af
jb 0x41d69f
push r10
cmp dword [r15 + 0x4b], ebx
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41d67c
jb 0x41d6b3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d6b7
pop rdi
jb 0x41d6ba
jb 0x41d6be
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41d6d5
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41d6a0
xor al, 0x5f
pop rdi
jne 0x41d6e0
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x41d6e7
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x41d6ee
push r8
push rbx
je 0x41d6cd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d70c
movsxd rbx, dword [rdi + 0x73]
je 0x41d71a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d715
je 0x41d72a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push rbx
push r11
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp dword [rdi + 0x53], ebx
cmp byte [rdi + 0x52], bl
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d74a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41d753
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d747
push rbx
je 0x41d733
xor ebx, dword [rdi + 0x53]
jo 0x41d765
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41d771
pop rdi
jo 0x41d784
jb 0x41d771
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41d754
je 0x41d788
jb 0x41d787
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d75f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d7a6
push rax
jbe 0x41d7b7
jbe 0x41d789
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41d7cb
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41d7a7
pop rdi
jae 0x41d7e8
jb 0x41d7e5
jns 0x41d7c1
push rax
push rbx
je 0x41d7b4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d7f3
movsxd rbx, dword [rdi + 0x73]
je 0x41d801
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d7fc
je 0x41d811
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41d804
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x41d7ed
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41d82e
push r11
je 0x41d803
je 0x41d837
jb 0x41d836
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
je 0x41d843
push rsp
jo 0x41d846
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d836
jbe 0x41d7f3
pop rdi
pop rdx
push rbx
je 0x41d82a
xor dword [rdi + 0x54], ebx
jne 0x41d86e
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x41d885
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41d898
je 0x41d869
jbe 0x41d891
movsxd rsp, dword [rbp + 0x34]
jb 0x41d892
push r10
imul edx, dword [rbx + 0x31], 0x45454a5f
push rbx
je 0x41d876
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x41d8c0
jb 0x41d880
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x41d8db
jb 0x41d8bd
je 0x41d89d
xor al, 0x69
jae 0x41d8cf
movsxd rbp, dword [rdi + 0x6e]
jbe 0x41d8da
jb 0x41d8eb
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x41d8e6
insb byte [rdi], dx
jne 0x41d8ed
xor al, 0x74
jns 0x41d8ff
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x41d8eb
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d909
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x41d922
jb 0x41d909
push rbx
je 0x41d8fa
je 0x41d92e
jb 0x41d92d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d905
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d94c
push rax
jbe 0x41d95d
jbe 0x41d92f
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41d92b
xor ebx, dword [rdi + 0x53]
jo 0x41d95d
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41d969
pop rdi
jo 0x41d97c
jb 0x41d969
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41d94c
je 0x41d980
jb 0x41d97f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d957
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d99e
push rax
jbe 0x41d9af
jbe 0x41d981
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d9ae
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41d9cb
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor r8b, byte [rbp + 0x76]
add byte [rbp + 0x65], ch
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d9db
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41d9c0
je 0x41d9f4
jb 0x41d9f3
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41da03
pop rdi
jae 0x41da01
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41d9d8
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41da2a
jb 0x41da01
push rbx
push r11
je 0x41d9f0
xor ebx, dword [rdi + 0x53]
jo 0x41da22
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41da2e
pop rdi
jo 0x41da41
jb 0x41da2e
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41da11
je 0x41da45
jb 0x41da44
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41da1c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41da63
push rax
jbe 0x41da74
jbe 0x41da46
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41da73
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41da90
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x52], eax
push rbx
pop rdi
push rax
push rbx
pop r15
add byte [rdi + 0x5a], bl
push r11
je 0x41da74
jbe 0x41daa5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41da7e
je 0x41dab2
jb 0x41dab1
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x41dabd
xor al, 0x5f
push rbx
jo 0x41daf0
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x41dae5
imul r14, qword [rax], 0x49615345
push rbx
je 0x41dadd
je 0x41db11
jb 0x41db10
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41dae8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41db2f
push rax
jbe 0x41db40
jbe 0x41db12
xor dword [rbp + 0x45], eax
xor al, byte [r13 + 0x52]
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41db16
xor dword [rdi + 0x54], ebx
jne 0x41db5a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41db41
jae 0x41db66
push rbx
je 0x41db35
xor al, 0x64
jne 0x41db77
je 0x41db6c
insb byte [rdi], dx
je 0x41db78
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41db60
xor al, 0x5f
pop rdi
jae 0x41db9c
jb 0x41db9c
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41db88
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41dba7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41dbc4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41dbde
jo 0x41dbe1
je 0x41dbb2
jbe 0x41dbda
movsxd rsp, dword [rbp + 0x35]
ja 0x41dbe8
imul esi, dword [rbp + 0x49], 0x454a6364
push rbx
je 0x41dbbd
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41dbc5
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x41dc0d
push rsp
xor dword [rdi], ebx
pop rdi
pop rdi
js 0x41dc3f
pop rdi
jo 0x41dc2f
jb 0x41dc3f
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x41dc1f
je 0x41dc53
jb 0x41dc52
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41dc2a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41dc71
push rax
jbe 0x41dc82
jbe 0x41dc54
xor dword [r13 + 0x4f], eax
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x41dc55
outsw dx, word [rsi]
jb 0x41dc99
jb 0x41dc89
push r10
imul eax, dword [rbp + 0x4f], 0x4e525f54
push rbx
je 0x41dc62
jb 0x41dc99
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41dc9d
pop rdi
jb 0x41dca0
jb 0x41dca4
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x41dcbb
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41dc85
xor ebp, dword [rbp + 0x6f]
jbe 0x41dcbe
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41dc9d
je 0x41dcd1
jb 0x41dcd0
xor dword fs:[r13 + 0x53], eax
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41dcac
xor dword [rdi + 0x54], ebx
jne 0x41dcf0
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41dcc1
xor al, 0x64
jne 0x41dd03
je 0x41dcf8
insb byte [rdi], dx
je 0x41dd04
cmp byte [r13 + 0x73], dl
je 0x41dce9
jae 0x41dd0e
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41dcf1
xor dword [rdi + 0x54], ebx
jne 0x41dd35
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41dd4c
jo 0x41dd4f
je 0x41dd20
jbe 0x41dd48
movsxd rsp, dword [rbp + 0x53]
je 0x41dd15
xor al, 0x64
jne 0x41dd57
je 0x41dd4c
insb byte [rdi], dx
je 0x41dd58
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5f], bl
jo 0x41dd81
push 0x64616572
pop rdi
imul esp, dword [rbp + 0x79], 0x5f
movsxd rsi, dword [rdx + 0x65]
je 0x41dd82
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41dd62
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41dda1
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41dd75
xor al, 0x64
jne 0x41ddb7
je 0x41ddac
insb byte [rdi], dx
je 0x41ddb8
xor qword [r10], rsi
jne 0x41ddcd
jo 0x41ddd0
je 0x41dda1
jbe 0x41ddc9
movsxd rsp, dword [rbp + 0x45]
xor dword [rbp + 0x45], eax
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rsp
push rbx
xor dword [rdx], esi
jne 0x41ddf3
jo 0x41ddf6
je 0x41ddd6
je 0x41ddf7
imul ebp, dword [rsi + 0x67], 0x535a5f00
je 0x41ddbf
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41de09
jb 0x41de0c
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x41ddd5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41de14
movsxd rbx, dword [rdi + 0x73]
je 0x41de22
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41de1d
je 0x41de32
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41de23
push rsp
pop rdi
jo 0x41de27
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41de13
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41de37
cmp dword [rcx + 0x6e], ecx
jo 0x41de68
je 0x41de3b
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41de6e
je 0x41de63
insb byte [rdi], dx
je 0x41de6f
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x41de4d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41de8e
push rbx
je 0x41de65
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41dea4
movsxd rbx, dword [rdi + 0x73]
je 0x41deb2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41dead
je 0x41dec2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
je 0x41dece
push rsp
jo 0x41ded1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41dec1
jbe 0x41de7e
pop rdi
pop rdx
push rbx
je 0x41deb6
xor ebx, dword [rdi + 0x53]
jo 0x41dee8
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41def4
pop rdi
jo 0x41df07
jb 0x41def4
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41ded7
je 0x41df0b
jb 0x41df0a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41dee2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41df29
push rax
jbe 0x41df3a
jbe 0x41df0c
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41df39
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41df56
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41df2a
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41df85
push r11
je 0x41df41
xor ebp, dword [rbp + 0x6f]
jbe 0x41df7a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41df59
je 0x41df8d
jb 0x41df8c
push r11
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
add byte [rdi + 0x5a], bl
push rbx
je 0x41df72
je 0x41df8c
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
jbe 0x41dfc2
push r10
push rbx
je 0x41df85
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41dfac
pop rax
push rsp
pop rdi
push r11
je 0x41df9f
je 0x41dfe1
jo 0x41dfda
jo 0x41dfc8
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41dfed
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41e002
je 0x41dfd3
jbe 0x41dffb
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x55], 0x72657070
movsxd r8, dword [r8]
pop rdi
pop rdx
push rbx
je 0x41dfdb
je 0x41e00f
jb 0x41e00e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41dfe6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e02d
push rax
jbe 0x41e03e
jbe 0x41e010
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
push rbx
je 0x41e009
xor dword [rdi + 0x54], ebx
jne 0x41e04d
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41e01e
xor al, 0x64
jne 0x41e060
je 0x41e055
insb byte [rdi], dx
je 0x41e061
cmp qword [r9 + 0x6e], rcx
jo 0x41e077
je 0x41e04a
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41e050
je 0x41e06a
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x41e0a0
jo 0x41e0a3
je 0x41e076
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41e0a9
je 0x41e09e
insb byte [rdi], dx
je 0x41e0aa
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41e083
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41e0aa
pop rax
push rsp
pop rdi
push r11
je 0x41e09d
je 0x41e0df
jo 0x41e0d8
jo 0x41e0c6
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41e0eb
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rsp
push rsi
xor dword [rax], esi
jne 0x41e100
jo 0x41e103
je 0x41e0d6
imul ebp, dword [rbp], 0x534e5a5f
je 0x41e0cf
je 0x41e111
jo 0x41e10a
push r8
jbe 0x41e11b
xor dword [r9 + 0x49], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41e0f7
jo 0x41e105
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e0f0
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41e114
cmp byte [rbp + 0x73], dl
je 0x41e114
jae 0x41e139
push rbx
je 0x41e108
xor al, 0x64
jne 0x41e14a
je 0x41e13f
insb byte [rdi], dx
je 0x41e14b
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x41e151
insb byte [rdi], dx
je 0x41e15d
jb 0x41e13f
jbe 0x41e0fc
pop rdi
pop rdx
push rbx
je 0x41e133
xor dword [rdi + 0x54], ebx
jne 0x41e177
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41e148
xor al, 0x64
jne 0x41e18a
je 0x41e17f
insb byte [rdi], dx
je 0x41e18b
xor qword [r10], rsi
jne 0x41e1a0
jo 0x41e1a3
je 0x41e174
jbe 0x41e19c
movsxd rsp, dword [rbp + 0x45]
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push rbx
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x41e1c3
je 0x41e194
jbe 0x41e1bc
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push r11
je 0x41e18e
xor ebp, dword [rbp + 0x6f]
jbe 0x41e1c7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e1a8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e1e7
movsxd rbx, dword [rdi + 0x73]
je 0x41e1f5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e1f0
je 0x41e205
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
jae 0x41e20c
jbe 0x41e1aa
pop rdi
pop rdx
push rbx
je 0x41e1e2
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41e233
outsb dx, byte gs:[rsi]
je 0x41e22b
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor al, 0x73
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41e26b
jo 0x41e26e
je 0x41e23f
jbe 0x41e267
movsxd rsp, dword [rbp + 0x35]
insb byte [rdi], dx
jne 0x41e278
push 0x5f007645
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e272
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41e27b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41e26f
push rbx
je 0x41e25b
xor ebx, dword [rdi + 0x53]
jo 0x41e28d
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41e299
pop rdi
jo 0x41e2ac
jb 0x41e299
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41e27c
je 0x41e2b0
jb 0x41e2af
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e287
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e2ce
push rax
jbe 0x41e2df
jbe 0x41e2b1
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e2f3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x41e29c
pop rdi
pop rdx
push rbx
je 0x41e2d8
je 0x41e30c
jb 0x41e30b
xor al, 0x6a
outsd dx, dword [rsi]
imul ebp, dword [rsi + 0x45], 0x47404076
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e2f7
xor bl, byte [rdi + 0x5f]
jae 0x41e333
jb 0x41e333
pop rdi
jo 0x41e346
jb 0x41e31d
push rbx
je 0x41e30e
je 0x41e342
jb 0x41e341
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e319
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e360
push rax
jbe 0x41e371
jbe 0x41e343
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e369
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e386
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push r11
pop rdi
push r11
je 0x41e364
cmp dword [rdi + 0x53], ebx
jo 0x41e397
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41e3a7
push rdx
push r12
pop rdi
jo 0x41e39d
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41e3ce
jo 0x41e3d1
je 0x41e3a2
jbe 0x41e3ca
movsxd rsp, dword [rbp + 0x35]
ja 0x41e3d8
imul esi, dword [rbp + 0x49], 0x34314152
pop rdi
movsxd rsp, dword [r10 + r9*2 + 0x63]
push rbx
je 0x41e3b4
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41e3bc
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41e404
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41e3f1
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x41e42f
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x41e436
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e41a
je 0x41e44e
jb 0x41e44d
push rbx
je 0x41e41e
xor ebp, dword [rbp + 0x6f]
jbe 0x41e457
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x77
outsd dx, dword [rsi]
jb 0x41e479
jbe 0x41e410
pop rdi
pop rdx
push rbx
je 0x41e44e
pop rdi
pop rdi
je 0x41e47d
imul ebp, dword [rbp + rsi + 0x5f], 0x646f6d5f
insd dword [rdi], dx
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
insd dword [rdi], dx
xor dword [rbp + 0x4c], eax
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r12
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41e47a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41e4b3
je 0x41e4c8
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x41e499
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e4d8
movsxd rbx, dword [rdi + 0x73]
je 0x41e4e6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e4e1
je 0x41e4f6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x41e4f8
jae 0x41e504
jp 0x41e502
push r10
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41e50e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41e527
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e500
je 0x41e534
jb 0x41e533
push rbx
je 0x41e509
jbe 0x41e53a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
jbe 0x41e4eb
pop rdi
pop rdx
push rbx
je 0x41e522
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41e561
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41e535
xor al, 0x64
jne 0x41e577
je 0x41e56c
insb byte [rdi], dx
je 0x41e578
xor qword [r10], rsi
jne 0x41e58d
jo 0x41e590
je 0x41e561
jbe 0x41e589
movsxd rsp, dword [rbp + 0x45]
xor dword [rbp + 0x45], eax
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e56b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e5b2
push rax
jbe 0x41e5c3
jbe 0x41e595
cmp dword [r15 + 0x4d], r11d
pop rdi
imul ebp, dword [rsi + 0x76], 0x49656b6f
jbe 0x41e5b5
je 0x41e595
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x41e5cb
je 0x41e5e3
jo 0x41e5dc
pop r8
jae 0x41e5e6
push rsp
pop rdi
add byte [r8 + 0x74], r14b
push 0x64616572
pop rdi
jno 0x41e5fc
insb byte [rdi], dx
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41e5ce
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41e60d
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41e5e1
xor al, 0x64
jne 0x41e623
je 0x41e618
insb byte [rdi], dx
je 0x41e624
xor qword [r10], rsi
jne 0x41e639
jo 0x41e63c
je 0x41e60d
jbe 0x41e635
movsxd rsp, dword [rbp + 0x45]
xor dword [rbp + 0x45], eax
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41e65c
jo 0x41e65f
je 0x41e630
jbe 0x41e658
movsxd rsp, dword [rbp + 0x44]
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41e674
je 0x41e645
jbe 0x41e66d
movsxd rsp, dword [rbp + 0x31]
xor al, 0x73
imul ebp, dword [rcx + 0x70], 0x43
push 0x63617261
je 0x41e679
jb 0x41e689
push r8
movsxd rax, dword [rbp + 0x45]
movsxd r10, dword [r15 + rbx*2]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e68b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41e694
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41e688
push rbx
je 0x41e67a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e6b9
movsxd rbx, dword [rdi + 0x73]
je 0x41e6c7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e6c2
je 0x41e6d7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x41e6e7
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x41e6cd
xor ebx, dword [rdi + 0x53]
jo 0x41e6ff
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41e70b
pop rdi
jo 0x41e71e
jb 0x41e70b
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41e6ee
je 0x41e722
jb 0x41e721
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e6f9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e740
push rax
jbe 0x41e751
jbe 0x41e723
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e750
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e76d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
imul esi, dword fs:[rbx + 0x70], 0x4565736f
jbe 0x41e715
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41e77f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41e788
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41e77c
push rbx
je 0x41e76e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e7ad
movsxd rbx, dword [rdi + 0x73]
je 0x41e7bb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e7b6
je 0x41e7cb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x41e7cc
jae 0x41e7d8
jp 0x41e7d6
jbe 0x41e774
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x41e7e2
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x41e7f5
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
xor dword [rdx], esi
jae 0x41e7f7
je 0x41e7d8
insb byte [rdi], dx
imul ebp, dword [rbp + 0x69], 0x50726574
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor dword [rax], esi
jb 0x41e821
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
push rsp
jae 0x41e83c
jbe 0x41e7ca
pop rdi
pop rdx
push rbx
je 0x41e802
pop rdi
jns 0x41e838
pop rdi
ja 0x41e84c
jo 0x41e83c
insd dword [rdi], dx
insd dword [rdi], dx
jb 0x41e843
jo 0x41e855
imul ebp, dword [rsi + 0x74], 0x53497265
je 0x41e821
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41e85b
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41e86f
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x645f5f39
outsd dx, dword [rsi]
pop rdi
ja 0x41e886
jo 0x41e85c
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41e853
xor bl, byte [rdi + 0x44]
jae 0x41e89c
jb 0x41e899
jns 0x41e88b
jne 0x41e8a7
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x41e8b0
jb 0x41e8ad
jns 0x41e889
push rax
push rbx
je 0x41e87a
je 0x41e8ae
jb 0x41e8ad
jbe 0x41e8a2
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41e88f
jbe 0x41e8c0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41e89b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e8da
movsxd rbx, dword [rdi + 0x73]
je 0x41e8e8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e8e3
je 0x41e8f8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x41e8d9
xor al, 0x64
jne 0x41e91b
je 0x41e910
insb byte [rdi], dx
je 0x41e91c
cmp byte [r13 + 0x73], dl
je 0x41e901
jae 0x41e926
movsxd r13, dword [r13 + rax*2 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41e901
pop rdi
pop rdi
jne 0x41e942
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x41e952
je 0x41e947
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x41e928
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e967
movsxd rbx, dword [rdi + 0x73]
je 0x41e975
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e970
je 0x41e985
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insd dword [rdi], dx
push rbx
xor eax, 0x5f54455f
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e9a0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41e9a9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41e99d
push rbx
je 0x41e989
xor ebx, dword [rdi + 0x53]
jo 0x41e9bb
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41e9c7
pop rdi
jo 0x41e9da
jb 0x41e9c7
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41e9aa
je 0x41e9de
jb 0x41e9dd
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e9b5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e9fc
push rax
jbe 0x41ea0d
jbe 0x41e9df
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41ea21
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41e9f7
xor al, 0x5f
pop rdi
jae 0x41ea33
jb 0x41ea33
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41ea1f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ea3e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41ea5b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41ea75
jo 0x41ea78
je 0x41ea49
jbe 0x41ea71
movsxd rsp, dword [rbp + 0x35]
ja 0x41ea7f
imul esi, dword [rbp + 0x49], 0x39415269
pop rdi
movsxd rcx, dword [r9 + 0x63]
push rbx
je 0x41ea5a
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41ea62
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41eaaa
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41ea9b
outsw dx, word [rsi]
jb 0x41eadf
jb 0x41eacf
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41eaa7
jb 0x41eade
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41eae2
pop rdi
jb 0x41eae5
jb 0x41eae9
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41eb00
add byte gs:[r15 + 0x5f], r11b
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
push r11
je 0x41eade
xor ebx, dword [rdi + 0x53]
jo 0x41eb10
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41eb1c
pop rdi
jo 0x41eb2f
jb 0x41eb1c
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41eaff
je 0x41eb33
jb 0x41eb32
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41eb0a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41eb51
push rax
jbe 0x41eb62
jbe 0x41eb34
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41eb61
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41eb7e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x53]
pop rdi
push r10
push r11
push r12
pop rdi
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x41eba5
jo 0x41eba8
je 0x41eb79
jbe 0x41eba1
movsxd rsp, dword [rbp + 0x35]
ja 0x41ebaf
imul esi, dword [rbp + 0x49], 0x33415269
pop rdi
movsxd rcx, dword [r10 + 0x52]
push rbx
je 0x41eb86
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ebc5
movsxd rbx, dword [rdi + 0x73]
je 0x41ebd3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ebce
je 0x41ebe3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x41ebc6
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41ebce
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41ec16
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41ec07
je 0x41ec3b
jb 0x41ec3a
xor ch, byte fs:[rcx + 0x64]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ec48
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41ec51
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ec45
push rbx
je 0x41ec36
je 0x41ec6a
jb 0x41ec69
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ec41
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ec88
push rax
jbe 0x41ec99
jbe 0x41ec6b
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41ec66
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41eca7
push rbx
je 0x41ec7e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ecbd
movsxd rbx, dword [rdi + 0x73]
je 0x41eccb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ecc6
je 0x41ecdb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41ecee
jno 0x41ecd4
push rax
push rbx
je 0x41ecc7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ed06
movsxd rbx, dword [rdi + 0x73]
je 0x41ed14
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ed0f
je 0x41ed24
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x41ecf8
xor ebp, dword [rbp + 0x6f]
jbe 0x41ed31
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ed46
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41ed4f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ed43
push rbx
je 0x41ed35
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ed74
movsxd rbx, dword [rdi + 0x73]
je 0x41ed82
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ed7d
je 0x41ed92
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41ed6b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41eda4
je 0x41edb9
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41ed88
je 0x41edbc
jb 0x41edbb
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x41eda0
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [rbp + 0x4e]
push rbx
je 0x41edb5
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41ee1a
jo 0x41ee08
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41eddf
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41ee1e
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41ee08
jae 0x41ee2d
xor byte [rbp + 0x45], al
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41ee56
jo 0x41ee59
je 0x41ee2a
jbe 0x41ee52
movsxd rsp, dword [rbp + 0x35]
ja 0x41ee60
imul esi, dword [rbp + 0x49], 0x5f374152
movsxd rbp, dword [r9 + 0x49]
push rdx
xor ebx, dword [r15 + 0x53]
xor dword [rdi + 0x52], ebx
push rbx
je 0x41ee3e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ee7d
movsxd rbx, dword [rdi + 0x73]
je 0x41ee8b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ee86
je 0x41ee9b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x41ee7e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41ee86
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41eece
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41eef6
movsxd rdx, dword gs:[r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41eef3
je 0x41ef08
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x41eee1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ef20
movsxd rbx, dword [rdi + 0x73]
je 0x41ef2e
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41ef06
pop rdi
pop rdi
jne 0x41ef47
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x41ef57
je 0x41ef4c
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor byte [rbp + 0x45], al
xor dword [rax], edi
pop rdi
pop rdi
jne 0x41ef6a
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x41ef73
je 0x41ef68
outsb dx, byte [rsi]
push r8
push rbx
je 0x41ef47
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ef86
movsxd rbx, dword [rdi + 0x73]
je 0x41ef94
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ef8f
je 0x41efa4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insd dword [rdi], dx
push r12
pop rdi
push rbx
cmp dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x41ef89
jbe 0x41efba
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41ef95
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41efd4
movsxd rbx, dword [rdi + 0x73]
je 0x41efe2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41efdd
je 0x41eff2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3445455f
jae 0x41f002
jp 0x41f000
jbe 0x41ef9e
pop rdi
pop rdx
push rbx
je 0x41efd5
xor al, 0x5f
pop rdi
jae 0x41f011
jb 0x41f011
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41effd
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f01c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41f039
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
pop rdi
pop r15
jae 0x41f04f
jo 0x41f020
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41f017
xor dword [rdi + 0x54], ebx
jne 0x41f05b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x41f072
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push rbx
je 0x41f04d
je 0x41f081
jb 0x41f080
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f058
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f09f
push rax
jbe 0x41f0b0
jbe 0x41f082
xor al, byte [r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41f086
jbe 0x41f0b7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41f092
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f0d1
movsxd rbx, dword [rdi + 0x73]
je 0x41f0df
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f0da
je 0x41f0ef
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x6945455f
js 0x41f0db
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41f0ce
xor bl, byte [rdi + 0x5f]
je 0x41f103
push 0x65706c65
jb 0x41f0f4
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x41f129
jo 0x41f12c
je 0x41f0fd
jbe 0x41f125
movsxd rsp, dword [rbp + 0x49]
push rbx
je 0x41f0f3
xor al, 0x64
jne 0x41f135
je 0x41f12a
insb byte [rdi], dx
je 0x41f136
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41f113
xor dword [rdi + 0x54], ebx
jne 0x41f157
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x41f14e
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41f135
xor dword [rdi + 0x5f], ebx
jb 0x41f171
jae 0x41f181
outsd dx, dword [rsi]
push r11
je 0x41f14a
je 0x41f17e
jb 0x41f17d
push r8
push rsp
pop rdi
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41f15f
je 0x41f193
jb 0x41f192
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41f1a2
pop rdi
jae 0x41f1a0
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41f176
xor bl, byte [rdi + 0x5f]
je 0x41f1ab
push 0x65706c65
jb 0x41f19c
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41f1a1
jae 0x41f1c6
push r11
je 0x41f196
xor al, 0x64
jne 0x41f1d8
je 0x41f1cd
insb byte [rdi], dx
je 0x41f1d9
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41f1b4
xor dword [rdi + 0x54], ebx
jne 0x41f1f8
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x41f1ef
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41f1d8
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41f212
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41f226
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x31], 0x72617030
insd dword [rdi], dx
pop rdi
je 0x41f245
jo 0x41f233
xor dword [r13 + 0x69], eax
imul eax, dword [rax], 0x314e5a5f
xor cl, byte [rdi + 0x75]
je 0x41f24d
jne 0x41f253
jbe 0x41f24c
movsxd rsp, dword [rbp + 0x35]
ja 0x41f25a
imul esi, dword [rbp + 0x49], 0x35314152
pop rdi
movsxd rsp, dword [r10 + r9*2 + 0x63]
push rbx
je 0x41f236
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41f23e
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41f286
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41f272
xor dword [rdi + 0x54], ebx
jne 0x41f2b6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rbx
je 0x41f288
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41f2d9
outsb dx, byte gs:[rsi]
je 0x41f2d1
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41f2d2
xor dword [rdi + 0x54], ebx
jne 0x41f316
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x41f32d
jo 0x41f330
je 0x41f301
jbe 0x41f329
movsxd rsp, dword [rbp + 0x53]
je 0x41f2f6
xor al, 0x64
jne 0x41f338
je 0x41f32d
insb byte [rdi], dx
je 0x41f339
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41f321
xor ebx, dword [rdi + 0x53]
jo 0x41f353
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41f35f
pop rdi
jo 0x41f372
jb 0x41f35f
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41f342
je 0x41f376
jb 0x41f375
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f34d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f394
push rax
jbe 0x41f3a5
jbe 0x41f377
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f3a4
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41f3c1
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor al, byte [r13 + 0x53]
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f39e
pop rdi
push rdi
imul ebx, dword [rdi + 0x72], 0x65
jae 0x41f3ed
insb byte [rdi], dx
je 0x41f3da
je 0x41f3f6
jo 0x41f3e4
push r11
je 0x41f3b5
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41f3ef
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41f403
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x76453143
add byte [rdi + 0x5a], bl
push rbx
je 0x41f3dc
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41f415
je 0x41f42a
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x41f3fa
je 0x41f42e
jb 0x41f42d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f405
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f44c
push rax
jbe 0x41f45d
jbe 0x41f42f
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41f469
jb 0x41f46c
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push r11
pop rdi
jbe 0x41f458
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x41f45e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f449
cmp byte [rdi + 0x5f], bl
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jne 0x41f488
jb 0x41f48d
push r11
push r11
je 0x41f464
xor ebx, dword [rdi + 0x53]
jo 0x41f496
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41f4a2
pop rdi
jo 0x41f4b5
jb 0x41f4a2
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41f485
je 0x41f4b9
jb 0x41f4b8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f490
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f4d7
push rax
jbe 0x41f4e8
jbe 0x41f4ba
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f4e7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41f504
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
push r11
je 0x41f4d3
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41f525
jb 0x41f4fc
push rsp
pop rdi
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41f4f9
pop rdi
pop rdi
je 0x41f528
imul ebp, dword [rsp + rsi + 0x5f], 0x49646f4d
insd dword [rdi], dx
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
insd dword [rdi], dx
xor dword [rbp + 0x4c], eax
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x45], eax
pop rdi
pop rdi
movsxd rsp, dword [rcx + 0x6c]
movsxd rax, dword [rbp + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x41f533
je 0x41f575
jo 0x41f56e
push r8
jbe 0x41f57f
xor cl, byte [r9 + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41f55b
jo 0x41f569
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41f556
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41f58b
push r10
push r11
push rbx
je 0x41f566
je 0x41f59a
jb 0x41f599
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f571
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f5b8
push rax
jbe 0x41f5c9
jbe 0x41f59b
push rbx
je 0x41f591
jb 0x41f5c8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41f5cc
pop rdi
jb 0x41f5cf
jb 0x41f5d3
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x41f5e9
push r11
pop r15
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x41f600
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41f5d6
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41f5fa
xor dword [rax], esi
jne 0x41f62a
jo 0x41f62d
je 0x41f600
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41f633
je 0x41f628
insb byte [rdi], dx
je 0x41f634
push r11
xor byte [rdi + 0x45], bl
xor eax, 0x65736572
je 0x41f621
push rax
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f618
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41f66a
jb 0x41f641
push rbx
push r11
je 0x41f630
xor ebx, dword [rdi + 0x53]
jo 0x41f662
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41f66e
pop rdi
jo 0x41f681
jb 0x41f66e
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41f651
je 0x41f685
jb 0x41f684
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f65c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f6a3
push rax
jbe 0x41f6b4
jbe 0x41f686
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f6b3
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41f6d0
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r8], r14d
pop rdi
push rbx
pop rdi
jb 0x41f6d3
ja 0x41f6d3
jo 0x41f6ea
jb 0x41f6bd
push rax
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41f6b9
je 0x41f6ed
jb 0x41f6ec
xor dword fs:[r9 + 0x52], ecx
jbe 0x41f706
push r12
pop rdi
jo 0x41f6ea
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f6db
je 0x41f70f
jb 0x41f70e
xor dword fs:[rip + 0x6d5f4d5f], esi
imul esp, dword [rbp + 0x5f], 0x72
outsd dx, dword [rsi]
jne 0x41f72d
imul ebp, dword [rsi + 0x65], 0x31745349
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f738
push rax
jbe 0x41f749
jbe 0x41f71b
push r11
je 0x41f70d
xor byte [rbx + 0x68], dh
jb 0x41f747
pop rdi
jo 0x41f75a
jb 0x41f731
push rbx
pop rdi
xor eax, 0x706d495f
insb byte [rdi], dx
push r12
pop rdi
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f765
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41f76e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41f762
push rbx
je 0x41f752
je 0x41f786
jb 0x41f785
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41f75f
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41f783
cmp dword [rcx + 0x6e], ecx
jo 0x41f7b4
je 0x41f787
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41f7ba
je 0x41f7af
insb byte [rdi], dx
je 0x41f7bb
push r11
xor byte [rdi + 0x45], bl
xor eax, 0x65736572
je 0x41f7a8
push rax
push rbx
xor byte [rdi], bl
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x41f7e5
jb 0x41f7e8
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41f7ae
xor byte [rbx + 0x68], dh
jb 0x41f7e8
pop rdi
jo 0x41f7fb
jb 0x41f7d2
push rbx
je 0x41f7c3
je 0x41f7f7
jb 0x41f7f6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f7ce
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f815
push rax
jbe 0x41f826
jbe 0x41f7f8
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push r11
pop rdi
push r11
je 0x41f7fc
cmp dword [rdi + 0x53], ebx
jo 0x41f82f
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41f83f
push rdx
push r12
pop rdi
jo 0x41f835
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f825
insd dword [rdi], dx
jne 0x41f867
js 0x41f82a
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x45]
jbe 0x41f7fd
pop rdi
pop rdx
push rbx
je 0x41f833
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41f88e
push r11
je 0x41f84a
xor ebp, dword [rbp + 0x6f]
jbe 0x41f883
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41f864
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f8a3
movsxd rbx, dword [rdi + 0x73]
je 0x41f8b1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f8ac
je 0x41f8c1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jo 0x41f8eb
jb 0x41f8dd
pop rdi
jbe 0x41f8e4
jb 0x41f8f1
jne 0x41f8e0
insb byte [rdi], dx
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x41f8e7
pop rdi
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x41f902
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
xor qword [rax], r14
jne 0x41f92c
jo 0x41f92f
je 0x41f902
imul ebp, dword [rbp + 0x43], 0x38504531
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41f90b
pop rdi
jae 0x41f94c
jb 0x41f949
jns 0x41f925
push rax
push rbx
je 0x41f916
je 0x41f94a
jb 0x41f949
push rbx
xor byte [rdi + 0x45], bl
jbe 0x41f940
pop rdi
push rbx
xor bl, byte [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x41f92f
xor dword [rbp + 0x61], ebp
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
push rbx
je 0x41f945
je 0x41f979
jb 0x41f978
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f950
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f997
push rax
jbe 0x41f9a8
jbe 0x41f97a
push rbx
pop rdi
push r11
je 0x41f972
xor byte [rbx + 0x68], dh
jb 0x41f9ac
pop rdi
jo 0x41f9bf
jb 0x41f996
push rsp
pop rdi
jo 0x41f9a2
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
ja 0x41f9ce
imul esi, dword [rbp + 0x6c], 0x5249496e
pop rdi
movsxd rbp, dword [r9 + 0x52]
cmp dword [r15 + 0x53], ebx
xor byte [rdi + 0x45], bl
jbe 0x41f9b9
jo 0x41f9c6
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41f9b1
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41f9d5
cmp byte [rbp + 0x73], dl
je 0x41f9d5
jae 0x41f9fa
push rbx
je 0x41f9c9
xor al, 0x64
jne 0x41fa0b
je 0x41fa00
insb byte [rdi], dx
je 0x41fa0c
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f9f1
outsw dx, word [rsi]
jb 0x41fa35
jb 0x41fa25
push r12
pop rdi
push rdx
push rbx
je 0x41f9fd
jb 0x41fa34
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41fa38
pop rdi
jb 0x41fa3b
jb 0x41fa3f
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41fa56
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41fa20
xor bl, byte [rdi + 0x5f]
jae 0x41fa5c
jb 0x41fa5c
pop rdi
jo 0x41fa6f
jb 0x41fa46
push rbx
je 0x41fa37
je 0x41fa6b
jb 0x41fa6a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41fa42
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fa89
push rax
jbe 0x41fa9a
jbe 0x41fa6c
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fa92
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41faaf
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x41fa8d
cmp dword [rdi + 0x53], ebx
jo 0x41fac0
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41fad0
push rdx
push r12
pop rdi
jo 0x41fac6
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41fab2
xor dword [rdi + 0x54], ebx
jne 0x41faf6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rbx
je 0x41fac8
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41fb19
outsb dx, byte gs:[rsi]
je 0x41fb11
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor dword [rdx], esi
jae 0x41fb46
je 0x41fb33
jb 0x41fb4a
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x5a5f006a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fb56
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41fb5f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41fb53
push rbx
je 0x41fb43
je 0x41fb77
jb 0x41fb76
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x41fb52
xor ebx, dword [rdi + 0x53]
jo 0x41fb84
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41fb90
pop rdi
jo 0x41fba3
jb 0x41fb90
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41fb73
je 0x41fba7
jb 0x41fba6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41fb7e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fbc5
push rax
jbe 0x41fbd6
jbe 0x41fba8
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fbd5
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41fbf2
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41fc0a
je 0x41fbdb
jbe 0x41fc03
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x44], 0x74696769
movsxd r8, dword [r8]
ja 0x41fc1c
imul esi, dword [rbp + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
xor dword [rdx], esi
jne 0x41fc37
jo 0x41fc3a
je 0x41fc0b
jbe 0x41fc33
movsxd rsp, dword [rbp + 0x31]
xor al, 0x77
jb 0x41fc3a
je 0x41fc38
insb byte [rdi], dx
imul ebp, dword [rbp + 0x69], 0x45726574
jbe 0x41fbdf
pop rdi
pop rdx
push rbx
je 0x41fc16
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fc5d
push rax
jbe 0x41fc6e
jbe 0x41fc40
cmp dword [r15 + 0x4d], r11d
pop rdi
imul ebp, dword [rsi + 0x76], 0x49656b6f
jbe 0x41fc60
je 0x41fc40
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x41fc76
je 0x41fc8e
jo 0x41fc87
pop rax
jae 0x41fc91
push rsp
pop rdi
add byte [r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fc90
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
push rbx
je 0x41fc71
je 0x41fca5
jb 0x41fca4
push rbx
je 0x41fc7a
jbe 0x41fcab
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41fcd3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41fcf9
jo 0x41fcfc
je 0x41fcdc
je 0x41fcfd
imul ebp, dword [rsi + 0x67], 0x76453144
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x41fd10
je 0x41fce3
imul ebp, dword [rbp + 0x43], 0x38504531
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41fcec
outsw dx, word [rsi]
jb 0x41fd30
jb 0x41fd20
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x41fcf8
jb 0x41fd2f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41fd33
pop rdi
jb 0x41fd36
jb 0x41fd3a
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41fd51
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41fd20
outsw dx, word [rsi]
jb 0x41fd64
jb 0x41fd54
push r10
push rbx
je 0x41fd2d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41fd6c
movsxd rbx, dword [rdi + 0x73]
je 0x41fd7a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41fd75
je 0x41fd8a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x41fd60
jb 0x41fd97
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41fd9b
pop rdi
jb 0x41fd9e
jb 0x41fda2
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x41fdb9
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41fd89
pop rdi
jae 0x41fdca
jb 0x41fdc7
jns 0x41fda3
push rax
push rbx
je 0x41fd94
je 0x41fdc8
jb 0x41fdc7
jbe 0x41fdbb
pop rdi
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41fddf
push r8
push rbx
je 0x41fdaf
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41fdee
movsxd rbx, dword [rdi + 0x73]
je 0x41fdfc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41fdf7
je 0x41fe0c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x41fde0
xor ebp, dword [rbp + 0x6f]
jbe 0x41fe19
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41fdfc
xor byte [rbx + 0x68], dh
jb 0x41fe36
pop rdi
jo 0x41fe49
jb 0x41fe20
push rbx
je 0x41fe11
je 0x41fe45
jb 0x41fe44
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41fe54
pop rdi
jae 0x41fe52
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41fe2f
je 0x41fe71
jo 0x41fe6a
push rbx
je 0x41fe36
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41fe87
outsb dx, byte gs:[rsi]
je 0x41fe7f
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x4a]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41fe8c
jo 0x41fe9a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push rbx
xor dword [rax], esi
jne 0x41fecb
jo 0x41fece
je 0x41fea1
imul ebp, dword [rbp], 0x74535a5f
xor dword [rdx], esi
pop rdi
pop rdi
je 0x41feca
push 0x65706c65
jb 0x41febb
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41feaa
xor al, 0x64
jne 0x41feec
je 0x41fee1
insb byte [rdi], dx
je 0x41feed
cmp qword [r9 + 0x6e], rcx
jo 0x41ff03
je 0x41fed6
imul ebp, dword [rbp + 0x45], 0x5245454a
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41fed0
xor dword [rdi + 0x54], ebx
jne 0x41ff14
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x41ff0b
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41fef3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41ff34
push rbx
je 0x41ff0b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ff4a
movsxd rbx, dword [rdi + 0x73]
je 0x41ff58
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ff53
je 0x41ff68
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
je 0x41ff74
push rsp
jo 0x41ff77
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ff67
jbe 0x41ff24
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ff8d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41ff96
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ff8a
push rbx
je 0x41ff7c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ffbb
movsxd rbx, dword [rdi + 0x73]
je 0x41ffc9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ffc4
je 0x41ffd9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41ffb2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fff9
push rax
jbe 0x42000a
jbe 0x41ffdc
xor dword [r13 + 0x4f], eax
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41ffde
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x420043
je 0x420014
jbe 0x42003c
movsxd rsp, dword [rbp + 0x31]
xor eax, 0x64616572
push rbp
outsb dx, byte [rsi]
jae 0x420048
outsb dx, byte [esi]
outsb dx, byte fs:[rsi]
je 0x420030
push 0x45
imul r10d, dword [r10 + 0x54], 0x5f00635f
pop rdx
push rbx
je 0x420027
xor al, 0x5f
pop rdi
jae 0x420063
jb 0x420063
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42004f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x42006e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x42008b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4e]
push rbx
je 0x420061
je 0x420095
jb 0x420094
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42006c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4200b3
push rax
jbe 0x4200c4
jbe 0x420096
push r11
push r11
pop rdi
push rbx
pop r15
push r11
je 0x420096
cmp dword [rdi + 0x53], ebx
jo 0x4200c9
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x4200d9
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x4200d3
push rsp
xor dword [rdi], ebx
add byte [rsi], ch
jae 0x420105
insd dword [rdi], dx
je 0x4200f0
add byte [rsi], ch
jae 0x420108
jb 0x42010a
add byte [rsi], ch
jae 0x420104
jae 0x420112
jb 0x420114
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x420115
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x420123
outsb dx, byte cs:[esi]
jne 0x4200f1
jne 0x42012f
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x4200ff
push 0x687361
jns 0x420148
jae 0x420155
insd dword [rdi], dx
add byte [rsi], ch
jns 0x420150
jae 0x420158
jb 0x4200e6
outsb dx, byte cs:[esi]
jne 0x420119
jbe 0x420152
jb 0x420162
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x420126
jbe 0x42015f
jb 0x42016f
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x42016a
insb byte [rdi], dx
jns 0x420179
add byte [rsi], ch
jb 0x420174
insb byte [rdi], dx
jo 0x420180
je 0x420116
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x42014f
outsd dx, dword [esi]
je 0x420125
je 0x42018d
js 0x42019e
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x4201a3
je 0x420199
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x4201bc
jo 0x4201d0
pop rdi
je 0x4201c0
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4201ce
jns 0x42016f
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x4201ea
jns 0x42017b
push 0x63
jb 0x420180
jns 0x4201f2
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x4201fc
je 0x420192
je 0x4201f8
add byte [rsi], ch
jae 0x42020f
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4201a6
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x4202fc
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 5], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
or byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
or byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x42038a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x4203ea
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cwde
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
clc
sldt word [rax]
add byte [rax], al
add byte [rax], al
mov al, 4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4014], ch
add byte [rax], al
add byte [rax + 0x14], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add al, dl
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0x71
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
loopne 0x42054b
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop qword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x42058a
add byte [rax], al
add byte [rax], al
add byte [rax - 0x70], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
sahf
add byte [rax], al
add byte [rax], al
add al, bl
sahf
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x3c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
fiadd dword [rax]
add byte [rax], al
add byte [rax], al
in al, 0xda
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
frstor dword [rax]
add byte [rax], al
add byte [rax], al
fcomp st(5)
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
frstor dword [rax]
add byte [rax], al
add byte [rax], al
call 0x4207e2
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
frstor dword [rax]
add byte [rax], al
add byte [rax], al
fld qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
frstor dword [rax]
add byte [rax], al
add byte [rax], al
clc
fld qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
fbld tbyte [rax]
add byte [rax], al
add byte [rax], al
clc
fild word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x42085b
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x420803
add byte [rax], al
add byte [rax], al
add byte [rax + 1], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60e1], ch
add byte [rax], al
add byte [rax + 0xe1], ch
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
loope 0x4208db
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe1], bh
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe1], bh
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
loope 0x420943
add byte [rax], al
add byte [rax], al
add byte [rax], dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
mov dh, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
