xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6101ff
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x401c60
mov eax, 0
test rax, rax
je 0x401c60
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401ca8
mov eax, 0
test rax, rax
je 0x401ca8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x20e611], 0
jne 0x401cca
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x20e5fe], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401ce0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x401cdb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
mov rax, qword [rip + 0x7fa7]
test rax, rax
setne al
movzx eax, al
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.imp.pthread_equal
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
call sym.__gthread_active_p
test eax, eax
setne al
test al, al
je 0x401d59
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.imp.pthread_mutex_lock
jmp 0x401d5e
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
call sym.__gthread_active_p
test eax, eax
setne al
test al, al
je 0x401d88
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.imp.pthread_mutex_unlock
jmp 0x401d8d
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lock xadd dword [rax], edx
mov eax, edx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov rax, qword [rbp - 0x18]
mov eax, dword [rax]
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov edx, dword [rax]
mov eax, dword [rbp - 0x1c]
add edx, eax
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
mov eax, dword [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
call sym.__gthread_active_p
test eax, eax
setne al
test al, al
je 0x401e03
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, edx
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add
jmp 0x401e14
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, edx
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add_single
leave
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov eax, dword [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
cmp dword [rbp - 4], 1
jbe 0x401e48
cmp dword [rbp - 4], 0x24
jbe 0x401e61
mov ecx, str.Detail::Base_setBase_uint_
mov edx, 0x5f
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_1_0_source.cpp
mov edi, str.2____value____value____36
call sym.imp.__assert_fail
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
cmp dword [rbp - 4], 0x7f
jbe 0x401e90
mov ecx, str.Detail::Precision_setPrecision_uint_
mov edx, 0x60
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_1_0_source.cpp
mov edi, str.value___MAX_LENGTH
call sym.imp.__assert_fail
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edi, obj.inputMutex
call sym.std::mutex::lock
mov edx, dword [rip + 0x20e45b]
mov eax, dword [rip + 0x20e459]
cmp edx, eax
jl 0x401efa
mov edi, obj.inputMutex
call sym.std::mutex::unlock
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x401ff4
jmp 0x401fef
mov eax, dword [rip + 0x20e428]
lea edx, [rax + 1]
mov dword [rip + 0x20e41f], edx
mov dword [rbp - 0x24], eax
mov eax, dword [rbp - 0x24]
add eax, 1
mov dword [rbp - 0x20], eax
lea rax, [rbp - 0x20]
mov edx, 0x409b69
mov rsi, rax
mov edi, 0x409b72
call sym.writeln_charconst____6__int_charconst____9__
mov edi, 0x48
call sym.operatornew
mov rbx, rax
mov rdi, rbx
call sym.TestCase::TestCase
lea rax, [rbp - 0x20]
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::unique_ptr
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::input
mov edi, obj.inputMutex
call sym.std::mutex::unlock
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solve
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rbx, [rax + 0x20]
mov eax, dword [rbp - 0x24]
cdqe
mov rsi, rax
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
jmp 0x401ebd
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov dword [rbp - 0x14], edi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov eax, dword [rbp - 0x14]
add eax, 1
mov dword [rbp - 0xc], eax
mov edi, obj.output
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0xc]
mov r9d, 0x409b78
mov r8, rdx
mov ecx, 0x409b7a
mov rdx, rax
mov esi, str.Case__
call sym.OutputDevice::write_charconst____7__int_charconst____3__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edi, obj.output
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40207b
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x54], 0
cmp dword [rbp - 0x54], 0x63
jg 0x4021cc
mov edi, 0x48
call sym.operatornew
mov rbx, rax
mov rdi, rbx
call sym.TestCase::TestCase
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::unique_ptr
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rcx, rax
mov eax, dword [rbp - 0x54]
mov edx, eax
mov esi, 0
mov rdi, rcx
call sym.TestCase::generate
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solve
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rdx, [rax + 0x20]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solveSlow
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rdx, [rax + 0x20]
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
test al, al
je 0x4021ab
mov eax, dword [rbp - 0x54]
add eax, 1
mov dword [rbp - 0x58], eax
lea rax, [rbp - 0x58]
mov rsi, rax
mov edi, str.Error_on_test__
call sym.writeln_charconst____16__int_
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
add rax, 0x20
mov rsi, rax
mov edi, str.Expected:_n
call sym.writeln_charconst____11__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
lea rax, [rbp - 0x40]
mov rsi, rax
mov edi, str.Received:_n
call sym.writeln_charconst____11__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
add dword [rbp - 0x54], 1
jmp 0x40209e
call sym.imp.clock
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rip + 0x7b46]
divsd xmm0, xmm1
movsd qword [rbp - 0x50], xmm0
lea rax, [rbp - 0x50]
mov rsi, rax
mov edi, str._n_nTest_time:
call sym.writeln_charconst____14__double_
mov edi, 0
call sym.imp.exit
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402230
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x24], 0
cmp dword [rbp - 0x24], 0x63
jg 0x4022fd
mov edi, 0x48
call sym.operatornew
mov rbx, rax
mov rdi, rbx
call sym.TestCase::TestCase
lea rax, [rbp - 0x20]
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::unique_ptr
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rcx, rax
mov eax, dword [rbp - 0x24]
mov edx, eax
mov esi, 1
mov rdi, rcx
call sym.TestCase::generate
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solve
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rdx, [rax + 0x20]
mov eax, dword [rbp - 0x24]
mov rsi, rdx
mov edi, eax
call sym.writeAnswer
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
add dword [rbp - 0x24], 1
jmp 0x402268
call sym.imp.clock
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rip + 0x7a15]
divsd xmm0, xmm1
movsd qword [rbp - 0x20], xmm0
lea rax, [rbp - 0x20]
mov rsi, rax
mov edi, str._n_nTest_time:
call sym.writeln_charconst____14__double_
mov edi, 0
call sym.imp.exit
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edi, 0x1030
call sym.operatornew
mov rbx, rax
mov esi, str.B_small_attempt0.in
mov rdi, rbx
call 0x402c30
mov rsi, rbx
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::reset
mov edi, 0x10e8
call sym.operatornew
mov rbx, rax
mov esi, str.output.txt
mov rdi, rbx
call 0x40353a
mov rsi, rbx
mov edi, obj.output
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::reset
mov edi, 0x10e8
call sym.operatornew
mov rbx, rax
mov rax, qword [rip + 0x20dedd]
mov edx, 0
mov rsi, rax
mov rdi, rbx
call sym.OutputFile::OutputFile
mov rsi, rbx
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::reset
mov edi, 4
call sym.setPrecision
mov ebx, eax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov esi, ebx
mov rdi, rax
call 0x4033ca
mov dword [rip + 0x20defe], 0
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::operator__
mov esi, obj.testCount
mov rdi, rax
call sym.InputDevice::read_int_
mov eax, dword [rip + 0x20dee5]
cdqe
mov rsi, rax
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::resize
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::vector
mov dword [rbp - 0x68], 0
call sym.std::thread::hardware_concurrency
mov edx, eax
mov eax, dword [rbp - 0x68]
cmp edx, eax
seta al
test al, al
je 0x402493
lea rax, [rbp - 0x30]
mov esi, sym.work
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::emplace_back_void______
add dword [rbp - 0x68], 1
jmp 0x402469
lea rax, [rbp - 0x30]
mov qword [rbp - 0x40], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::begin
mov qword [rbp - 0x60], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::end
mov qword [rbp - 0x50], rax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::thread__std::vector_std::thread_std::allocator_std::thread___
test al, al
je 0x4024fc
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::operator_
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::thread::join
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::operator__
jmp 0x4024bb
mov dword [rbp - 0x64], 0
mov eax, dword [rip + 0x20de23]
cmp dword [rbp - 0x64], eax
jge 0x402536
mov eax, dword [rbp - 0x64]
cdqe
mov rsi, rax
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rdx, rax
mov eax, dword [rbp - 0x64]
mov rsi, rdx
mov edi, eax
call sym.writeAnswer
add dword [rbp - 0x64], 1
jmp 0x402503
call sym.imp.clock
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rip + 0x77dc]
divsd xmm0, xmm1
movsd qword [rbp - 0x50], xmm0
lea rax, [rbp - 0x50]
mov rsi, rax
mov edi, str._n_nTotal_time:
call sym.writeln_charconst____15__double_
mov ebx, 0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_vector
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4025eb
jmp 0x4025e6
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x60
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x40268d
cmp dword [rbp - 8], 0xffff
jne 0x40268d
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
mov edx, obj.__dso_handle
mov esi, obj.input
mov edi, sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::_unique_ptr
call sym.imp.__cxa_atexit
mov edx, obj.__dso_handle
mov esi, obj.output
mov edi, sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::_unique_ptr
call sym.imp.__cxa_atexit
mov edx, obj.__dso_handle
mov esi, obj.logs
mov edi, sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::_unique_ptr
call sym.imp.__cxa_atexit
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::vector
mov edx, obj.__dso_handle
mov esi, obj.answer_abi:cxx11_
mov edi, sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x18], 0
jne 0x4026c7
mov eax, 0
jmp 0x4026de
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.imp.memcmp
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax + 8]
cmp rdx, rax
je 0x402755
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
movzx eax, byte [rax]
cmp al, 0x2a
je 0x40275c
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rsi, rdx
mov rdi, rax
call sym.imp.strcmp
test eax, eax
jne 0x40275c
mov eax, 1
jmp 0x402761
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd xmm1, qword [rbp - 8]
movsd xmm0, qword [rip + 0x7597]
andpd xmm0, xmm1
ucomisd xmm0, qword [rip + 0x759b]
setbe al
xor eax, 1
pop rbp
ret
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd xmm0, qword [rbp - 8]
ucomisd xmm0, qword [rbp - 8]
setp al
pop rbp
ret
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd xmm0, qword [rbp - 8]
movmskpd eax, xmm0
and eax, 1
test eax, eax
setne al
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gthread_equal
test eax, eax
setne al
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::id::id
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::thread::swap
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::joinable
test al, al
je 0x402855
call sym.std::terminate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::thread::id_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::thread::id::id
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, qword [rax]
call sym.std::operator__
xor eax, 1
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4028cf
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::___shared_count
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_base____gnu_cxx::_Lock_policy_2_::___shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x409e68
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::_shared_ptr
mov eax, 0
test eax, eax
je 0x40294b
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_Impl_base::__Impl_base
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gthread_mutex_lock
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0
je 0x40299f
mov eax, dword [rbp - 4]
mov edi, eax
call sym.std::__throw_system_error
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gthread_mutex_unlock
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov edx, 0x409e50
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
mov edi, 0xa
call sym.setBase
mov edx, eax
mov rax, qword [rbp - 8]
mov dword [rax + 0x18], edx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
setae al
movzx eax, al
test rax, rax
je 0x402a49
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 8]
mov qword [rdx + 8], rcx
movzx eax, byte [rax]
leave
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 9
cmp al, 4
jbe 0x402a7c
cmp byte [rbp - 4], 0x20
jne 0x402a83
mov eax, 1
jmp 0x402a88
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 0x30
cmp al, 9
setbe al
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 0x41
cmp al, 0x19
setbe al
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 0x61
cmp al, 0x19
setbe al
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov esi, sym.InputDevice::isSpace
mov rdi, rax
call sym.InputDevice::skipCharacters_bool____char__
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x2a]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x18]
mov byte [rax + 0x2a], 0
mov rax, qword [rbp - 0x18]
movzx eax, byte [rax + 0x28]
xor eax, 1
movzx eax, al
test rax, rax
je 0x402b60
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x20]
mov rdx, qword [rbp - 0x18]
lea rdi, [rdx + 0x2a]
mov rcx, rax
mov edx, 0x1000
mov esi, 1
call sym.imp.fread
lea rdx, [rbx + rax]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
jmp 0x402bbf
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x20]
mov rdx, qword [rbp - 0x18]
lea rcx, [rdx + 0x2a]
mov rdx, rax
mov esi, 0x1000
mov rdi, rcx
call sym.imp.fgets
test rax, rax
setne al
test al, al
je 0x402bbf
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x10]
movzx eax, byte [rax]
test al, al
je 0x402bbf
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x10]
lea rdx, [rax + 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
jmp 0x402b9a
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov eax, ecx
mov byte [rbp - 0x14], dl
mov byte [rbp - 0x18], al
mov rax, qword [rbp - 8]
lea rdx, [rax + 0x2a]
mov rax, qword [rbp - 8]
lea rcx, [rax + 0x2a]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::InputDevice
mov edx, 0x409e38
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 0x20], rdx
mov rax, qword [rbp - 8]
movzx edx, byte [rbp - 0x14]
mov byte [rax + 0x28], dl
mov rax, qword [rbp - 8]
movzx edx, byte [rbp - 0x18]
mov byte [rax + 0x29], dl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, str.r_w______R___________________________E__________________
mov rdi, rax
call sym.imp.fopen
mov rsi, rax
mov rax, qword [rbp - 8]
mov ecx, 1
mov edx, 0
mov rdi, rax
call sym.InputFile::InputFile
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x409e38
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
movzx eax, byte [rax + 0x29]
test al, al
je 0x402ca2
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x20]
mov rdi, rax
call sym.imp.fclose
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edx, 0x409e10
mov rax, qword [rbp - 0x28]
mov qword [rax], rdx
mov rax, qword [rbp - 0x28]
lea rdx, [rax + 8]
mov rax, qword [rbp - 0x28]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x28]
add rax, 8
lea rdx, [rax + 0x1080]
mov rax, qword [rbp - 0x28]
mov qword [rax + 0x1090], rdx
mov rax, qword [rbp - 0x28]
mov byte [rax + 0x1098], 0
mov edi, 0
call sym.setWidth
mov edx, eax
mov rax, qword [rbp - 0x28]
mov dword [rax + 0x109c], edx
mov edi, 0x20
call sym.setFill
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax + 0x10a0], dl
mov edi, 0xa
call sym.setBase
mov edx, eax
mov rax, qword [rbp - 0x28]
mov dword [rax + 0x10a4], edx
mov edi, 9
call sym.setPrecision
mov edx, eax
mov rax, qword [rbp - 0x28]
mov dword [rax + 0x10a8], edx
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::allocator
mov edi, 0x409b4b
call sym.setDelimiter
mov rsi, rax
mov rax, qword [rbp - 0x28]
lea rcx, [rax + 0x10b8]
lea rax, [rbp - 0x19]
mov rdx, rax
mov rdi, rcx
call 0x401a80
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.OutputDevice::computeBasePower
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402dda
jmp 0x402dd5
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x1088]
mov rdx, qword [rbp - 8]
add rdx, 8
add rdx, 0x1000
cmp rax, rdx
setae al
movzx eax, al
test rax, rax
je 0x402e69
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov esi, 0x1000
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x1088]
mov rcx, qword [rbp - 8]
add rcx, 8
add rcx, 0x1000
mov rsi, rax
mov rdi, rcx
call sym.std::copy_char__char__
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x1088], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10b0], 1
mov dword [rbp - 4], 0
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a8]
cmp eax, dword [rbp - 4]
jbe 0x402ec5
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x10b0]
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
mov eax, eax
imul rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10b0], rdx
add dword [rbp - 4], 1
jmp 0x402e8a
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
movzx eax, byte [rax + 0x1098]
test al, al
je 0x402ef5
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::writeDelimiter
jmp 0x402efa
mov eax, 0
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov byte [rax + 0x1098], 1
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1090]
mov rdx, rax
mov rax, qword [rbp - 0x20]
sub rdx, rax
mov rax, rdx
mov dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
cmp eax, dword [rbp - 8]
seta al
movzx eax, al
test rax, rax
je 0x402f5b
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
sub eax, dword [rbp - 8]
mov edx, eax
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::writeFill
add dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x1088]
mov rax, qword [rbp - 0x18]
mov rcx, qword [rax + 0x1090]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_char__char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov edx, dword [rbp - 8]
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov eax, dword [rbp - 0x1c]
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov edx, dword [rbp - 0x1c]
sub rdx, -0x80
add rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1090]
cmp rdx, rax
setb al
movzx eax, al
test rax, rax
je 0x40304f
cmp dword [rbp - 0x1c], 1
jne 0x403019
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 0x18]
mov qword [rdx + 0x1088], rcx
mov rdx, qword [rbp - 0x18]
movzx edx, byte [rdx + 0x10a0]
mov byte [rax], dl
jmp 0x4030da
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x10a0]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov ecx, dword [rbp - 0x1c]
mov esi, ecx
mov rdi, rax
call sym.std::fill_n_char__unsignedint_char_
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
jmp 0x4030da
mov rax, qword [rbp - 0x18]
add rax, 8
add rax, 0x1000
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
sub rdx, rax
mov rax, rdx
mov dword [rbp - 8], eax
mov eax, dword [rbp - 8]
cmp eax, dword [rbp - 0x1c]
jbe 0x403082
mov eax, dword [rbp - 0x1c]
mov dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x10a0]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov ecx, dword [rbp - 8]
mov esi, ecx
mov rdi, rax
call sym.std::fill_n_char__unsignedint_char_
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov eax, dword [rbp - 8]
sub dword [rbp - 0x1c], eax
cmp dword [rbp - 0x1c], 0
sete al
test al, al
jne 0x4030d9
mov dword [rbp - 8], 0x1000
jmp 0x403074
nop
mov eax, dword [rbp - 4]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x409e10
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 0x10b8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov eax, 0
test eax, eax
je 0x40311f
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::_OutputDevice
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov eax, esi
mov byte [rbp - 0xc], al
mov rax, qword [rbp - 8]
mov byte [rax + 0x1098], 0
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x1088]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 8]
mov qword [rdx + 0x1088], rcx
movzx edx, byte [rbp - 0xc]
mov byte [rax], dl
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov eax, ecx
mov byte [rbp - 0x2c], al
mov rax, qword [rbp - 0x18]
mov byte [rax + 0x1098], 0
mov rax, qword [rbp - 0x28]
mov dword [rbp - 0xc], eax
cmp byte [rbp - 0x2c], 0
je 0x4031f9
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
cmp eax, dword [rbp - 0xc]
jbe 0x4031f9
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
sub eax, dword [rbp - 0xc]
mov edx, eax
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::writeFill
mov edx, eax
jmp 0x4031fe
mov edx, 0
mov eax, dword [rbp - 0xc]
add eax, edx
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov edx, dword [rbp - 0xc]
sub rdx, -0x80
add rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1090]
cmp rdx, rax
setb al
movzx eax, al
test rax, rax
je 0x403291
cmp dword [rbp - 0xc], 1
jne 0x403262
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 0x18]
mov qword [rdx + 0x1088], rcx
mov rdx, qword [rbp - 0x20]
movzx edx, byte [rdx]
mov byte [rax], dl
jmp 0x40331c
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x1088]
mov ecx, dword [rbp - 0xc]
mov rax, qword [rbp - 0x20]
mov esi, ecx
mov rdi, rax
call sym.std::copy_n_charconst__unsignedint_char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
jmp 0x40331c
mov rax, qword [rbp - 0x18]
add rax, 8
add rax, 0x1000
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
sub rdx, rax
mov rax, rdx
mov dword [rbp - 8], eax
mov eax, dword [rbp - 8]
cmp eax, dword [rbp - 0xc]
jbe 0x4032c4
mov eax, dword [rbp - 0xc]
mov dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x1088]
mov ecx, dword [rbp - 8]
mov rax, qword [rbp - 0x20]
mov esi, ecx
mov rdi, rax
call sym.std::copy_n_charconst__unsignedint_char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov eax, dword [rbp - 8]
sub dword [rbp - 0xc], eax
cmp dword [rbp - 0xc], 0
sete al
test al, al
jne 0x40331b
mov eax, dword [rbp - 8]
add qword [rbp - 0x20], rax
mov dword [rbp - 8], 0x1000
jmp 0x4032b6
nop
mov eax, dword [rbp - 4]
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
add rax, 0x10b8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x10b8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rsi, rax
mov rax, qword [rbp - 0x18]
mov ecx, 0
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::writeString
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdx, qword [rdx + 0x1088]
mov rcx, rdx
mov rdx, qword [rbp - 8]
add rdx, 8
sub rcx, rdx
mov rdx, rcx
mov ecx, edx
mov rdx, qword [rbp - 8]
mov esi, ecx
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 0x1088], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0x10], esi
mov edx, dword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov dword [rax + 0x10a8], edx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::computeBasePower
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov eax, esi
mov byte [rbp - 0xc], al
movsx edx, byte [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::writeChar
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.imp.strlen
mov rdx, rax
mov rsi, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov ecx, 1
mov rdi, rax
call sym.OutputDevice::writeString
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rsi, rax
mov rax, qword [rbp - 0x18]
mov ecx, 1
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::writeString
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 0x10d8]
mov eax, dword [rbp - 0xc]
mov rcx, qword [rbp - 8]
lea rdi, [rcx + 8]
mov rcx, rdx
mov rdx, rax
mov esi, 1
call sym.imp.fwrite
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10d8]
mov rdi, rax
call sym.imp.fflush
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov eax, edx
mov byte [rbp - 0x14], al
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::OutputDevice
mov edx, 0x409de8
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 0x10d8], rdx
mov rax, qword [rbp - 8]
movzx edx, byte [rbp - 0x14]
mov byte [rax + 0x10e0], dl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, 0x409b4d
mov rdi, rax
call sym.imp.fopen
mov rcx, rax
mov rax, qword [rbp - 8]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call sym.OutputFile::OutputFile
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x409de8
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::flush
mov rax, qword [rbp - 8]
movzx eax, byte [rax + 0x10e0]
test al, al
je 0x4035bc
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10d8]
mov rdi, rax
call sym.imp.fclose
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::_OutputDevice
mov eax, 0
test eax, eax
je 0x4035dd
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputFile::_OutputFile
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lea rcx, [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10d8]
mov rsi, rcx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::OutputDevice
mov edx, 0x409dc0
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 0x10d8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x409dc0
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::flush
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::_OutputDevice
mov eax, 0
test eax, eax
je 0x4036b9
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputString::_OutputString
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
lea rdi, [rax + 0x18]
mov rax, qword [rbp - 8]
lea r9, [rax + 0x14]
mov rax, qword [rbp - 8]
lea r8, [rax + 0x10]
mov rax, qword [rbp - 8]
lea rcx, [rax + 0xc]
mov rax, qword [rbp - 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
lea rsi, [rax + 4]
mov rax, qword [rbp - 8]
sub rsp, 8
push rdi
mov rdi, rax
call sym.read_int__int__int__int__int__int__int__
add rsp, 0x10
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x50
mov qword [rbp - 0x48], rdi
mov eax, esi
mov dword [rbp - 0x50], edx
mov byte [rbp - 0x4c], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul_::linear_congruential_engine_int_void_
lea rax, [rbp - 0x40]
mov edx, 9
mov esi, 0
mov rdi, rax
call sym.std::uniform_int_distribution_int_::uniform_int_distribution
lea rax, [rbp - 0x20]
lea rdx, [rbp - 0x30]
lea rcx, [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::bind_std::uniform_int_distribution_int__std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4037ae
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x40
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0xc8
mov qword [rbp - 0xc8], rdi
mov qword [rbp - 0xd0], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 8]
lea edx, [rax + rax]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax]
cmp edx, eax
jne 0x40389e
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x14]
lea edx, [rax + rax]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax]
cmp edx, eax
jne 0x403883
mov dword [rbp - 0xb0], 0
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 8]
mov dword [rbp - 0x98], eax
mov eax, dword [rbp - 0xb0]
cmp eax, dword [rbp - 0x98]
jge 0x403883
lea rax, [rbp - 0x60]
mov esi, 0x409b4f
mov rdi, rax
call 0x4019e0
add dword [rbp - 0xb0], 1
jmp 0x40385b
lea rdx, [rbp - 0x60]
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401900
jmp 0x404099
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x10]
lea edx, [rax + rax]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax]
cmp edx, eax
jne 0x40392f
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 4]
lea edx, [rax + rax]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax]
cmp edx, eax
jne 0x403914
mov dword [rbp - 0xac], 0
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x10]
mov dword [rbp - 0x94], eax
mov eax, dword [rbp - 0xac]
cmp eax, dword [rbp - 0x94]
jge 0x403914
lea rax, [rbp - 0x60]
mov esi, 0x409b52
mov rdi, rax
call 0x4019e0
add dword [rbp - 0xac], 1
jmp 0x4038ec
lea rdx, [rbp - 0x60]
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401900
jmp 0x404099
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x18]
lea edx, [rax + rax]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax]
cmp edx, eax
jne 0x4039c0
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
lea edx, [rax + rax]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax]
cmp edx, eax
jne 0x4039a5
mov dword [rbp - 0xa8], 0
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x18]
mov dword [rbp - 0x90], eax
mov eax, dword [rbp - 0xa8]
cmp eax, dword [rbp - 0x90]
jge 0x4039a5
lea rax, [rbp - 0x60]
mov esi, 0x409b55
mov rdi, rax
call 0x4019e0
add dword [rbp - 0xa8], 1
jmp 0x40397d
lea rdx, [rbp - 0x60]
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401900
jmp 0x404099
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 8]
test eax, eax
jle 0x4039e6
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 8]
cmp edx, eax
jle 0x403a32
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x10]
test eax, eax
jle 0x403a0c
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 4]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x10]
cmp edx, eax
jle 0x403a32
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x18]
test eax, eax
jle 0x403a4d
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0xc]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x18]
cmp edx, eax
jg 0x403a4d
lea rdx, [rbp - 0x60]
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401900
jmp 0x404099
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 8]
sub edx, eax
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0x14], edx
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 4]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x10]
sub edx, eax
mov rax, qword [rbp - 0xd0]
mov dword [rax + 4], edx
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0xc]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x18]
sub edx, eax
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0xc], edx
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 4]
cmp edx, eax
jl 0x403b34
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
cmp edx, eax
jl 0x403b0a
lea rax, [rbp - 0x60]
mov esi, 0x409b58
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x14]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0x14], edx
jmp 0x403b9e
lea rax, [rbp - 0x60]
mov esi, 0x409b5a
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0xc], edx
jmp 0x403b9e
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 4]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
cmp edx, eax
jl 0x403b76
lea rax, [rbp - 0x60]
mov esi, 0x409b5c
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 4]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 4], edx
jmp 0x403b9e
lea rax, [rbp - 0x60]
mov esi, 0x409b5a
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0xc], edx
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x14]
test eax, eax
jg 0x403bcc
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 4]
test eax, eax
jg 0x403bcc
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
test eax, eax
jle 0x403e97
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::back
movzx eax, byte [rax]
movsx eax, al
cmp eax, 0x52
je 0x403cd9
cmp eax, 0x59
je 0x403db9
cmp eax, 0x42
jne 0x403e92
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 4]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
add eax, edx
test eax, eax
jne 0x403c27
mov rax, qword [rbp - 0xc8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
jmp 0x404099
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 4]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
cmp edx, eax
jg 0x403c6f
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 4]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
cmp edx, eax
jne 0x403c76
lea rax, [rbp - 0x60]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x52
jne 0x403c76
mov eax, 1
jmp 0x403c7b
mov eax, 0
test al, al
je 0x403cac
lea rax, [rbp - 0x60]
mov esi, 0x52
mov rdi, rax
call 0x401920
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 4]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 4], edx
jmp 0x403e92
lea rax, [rbp - 0x60]
mov esi, 0x59
mov rdi, rax
call 0x401920
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0xc], edx
jmp 0x403e92
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
add eax, edx
test eax, eax
jne 0x403d07
mov rax, qword [rbp - 0xc8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
jmp 0x404099
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
cmp edx, eax
jg 0x403d4f
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
cmp edx, eax
jne 0x403d56
lea rax, [rbp - 0x60]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x42
jne 0x403d56
mov eax, 1
jmp 0x403d5b
mov eax, 0
test al, al
je 0x403d8c
lea rax, [rbp - 0x60]
mov esi, 0x42
mov rdi, rax
call 0x401920
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x14]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0x14], edx
jmp 0x403e92
lea rax, [rbp - 0x60]
mov esi, 0x59
mov rdi, rax
call 0x401920
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0xc]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0xc], edx
jmp 0x403e92
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 4]
add eax, edx
test eax, eax
jne 0x403de7
mov rax, qword [rbp - 0xc8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
jmp 0x404099
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 4]
cmp edx, eax
jg 0x403e2f
mov rax, qword [rbp - 0xd0]
mov edx, dword [rax + 0x14]
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 4]
cmp edx, eax
jne 0x403e36
lea rax, [rbp - 0x60]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x42
jne 0x403e36
mov eax, 1
jmp 0x403e3b
mov eax, 0
test al, al
je 0x403e69
lea rax, [rbp - 0x60]
mov esi, 0x42
mov rdi, rax
call 0x401920
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x14]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0x14], edx
jmp 0x403e91
lea rax, [rbp - 0x60]
mov esi, 0x52
mov rdi, rax
call 0x401920
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 4]
lea edx, [rax - 1]
mov rax, qword [rbp - 0xd0]
mov dword [rax + 4], edx
nop
jmp 0x403b9e
lea rax, [rbp - 0x60]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx ebx, byte [rax]
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::back
movzx eax, byte [rax]
cmp bl, al
sete al
test al, al
je 0x403ed7
mov rax, qword [rbp - 0xc8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
jmp 0x404099
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x60]
mov qword [rbp - 0x68], rax
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::begin
mov qword [rbp - 0x80], rax
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::end
mov qword [rbp - 0x70], rax
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
test al, al
je 0x404077
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
movzx eax, byte [rax]
mov byte [rbp - 0xb1], al
movsx edx, byte [rbp - 0xb1]
lea rax, [rbp - 0x40]
mov esi, edx
mov rdi, rax
call 0x401920
movsx eax, byte [rbp - 0xb1]
cmp eax, 0x52
je 0x403fc3
cmp eax, 0x59
je 0x404015
cmp eax, 0x42
jne 0x404066
mov dword [rbp - 0xa4], 0
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 8]
mov dword [rbp - 0x8c], eax
mov eax, dword [rbp - 0xa4]
cmp eax, dword [rbp - 0x8c]
jge 0x403fb0
lea rax, [rbp - 0x40]
mov esi, 0x409b4f
mov rdi, rax
call 0x4019e0
add dword [rbp - 0xa4], 1
jmp 0x403f88
mov rax, qword [rbp - 0xd0]
mov dword [rax + 8], 0
jmp 0x404066
mov dword [rbp - 0xa0], 0
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x10]
mov dword [rbp - 0x88], eax
mov eax, dword [rbp - 0xa0]
cmp eax, dword [rbp - 0x88]
jge 0x404005
lea rax, [rbp - 0x40]
mov esi, 0x409b52
mov rdi, rax
call 0x4019e0
add dword [rbp - 0xa0], 1
jmp 0x403fdd
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0x10], 0
jmp 0x404066
mov dword [rbp - 0x9c], 0
mov rax, qword [rbp - 0xd0]
mov eax, dword [rax + 0x18]
mov dword [rbp - 0x84], eax
mov eax, dword [rbp - 0x9c]
cmp eax, dword [rbp - 0x84]
jge 0x404057
lea rax, [rbp - 0x40]
mov esi, 0x409b55
mov rdi, rax
call 0x4019e0
add dword [rbp - 0x9c], 1
jmp 0x40402f
mov rax, qword [rbp - 0xd0]
mov dword [rax + 0x18], 0
nop
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator__
jmp 0x403f0b
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401900
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, qword [rbp - 0xc8]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4040ed
jmp 0x4040e8
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4040d1
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0xc8
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x40]
mov rdx, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.TestCase::work_abi:cxx11_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::empty
test al, al
je 0x404148
lea rax, [rbp - 0x40]
mov esi, 0x409b5e
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.TestCase::write_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rax, qword [rbp - 0x48]
add rax, 0x40
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::operator__
mov rdi, rax
call sym.OutputDevice::flush
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4041b0
jmp 0x4041ab
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
add rax, 0x20
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
mov edi, 0x10e0
call sym.operatornew
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x20
mov rsi, rax
mov rdi, rbx
call sym.OutputString::OutputString
mov rax, qword [rbp - 0x18]
add rax, 0x40
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::unique_ptr
jmp 0x40423a
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rbx, r12
jmp 0x40421f
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x20
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x10
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_std::thread::id__
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::thread::id__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rdx]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::thread::id__
mov rdx, rax
mov rax, qword [rbp - 0x20]
mov rdx, qword [rdx]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4042ca
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
test rax, rax
je 0x4042f3
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdi, rax
call sym.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_::_M_release
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 1], al
movsx edx, byte [rbp - 1]
mov rax, qword [rbp - 0x20]
mov edi, edx
call rax
test al, al
je 0x404327
jmp 0x404306
movzx eax, byte [rbp - 1]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_char__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false_char__char__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_char__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov eax, dword [rbp - 0xc]
mov esi, eax
mov rdi, rcx
call sym.std::__fill_n_a_unsignedint_char_
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov dword [rbp - 0x2c], esi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x28]
mov rdi, rax
call sym.std::__iterator_category_charconst__
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x38]
mov ecx, dword [rbp - 0x2c]
sub rsp, 8
push rbx
mov esi, ecx
mov rdi, rax
call sym.std::__copy_n_charconst__unsignedint_char__
add rsp, 0x10
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x40440f
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_InputFile__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_InputFile__std::default_delete_InputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_InputFile__std::default_delete_InputFile__
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call 0x404457
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x4044b9
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_InputFile_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_OutputFile__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_OutputFile__std::default_delete_OutputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_OutputFile_std::default_delete_OutputFile____
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call method.std::get_0ul_OutputFile__std.default_delete_OutputFile__
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x40456f
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_OutputFile_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r15
push r14
push r13
push r12
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov qword [rbp - 0x50], rcx
mov qword [rbp - 0x58], r8
mov qword [rbp - 0x60], r9
mov rdi, qword [rbp + 0x10]
call sym.std::forward_int__
mov r12, rax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_int__
mov qword [rbp - 0x68], rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::forward_int__
mov qword [rbp - 0x70], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_int__
mov r15, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_int__
mov r14, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int__
mov r13, rax
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::operator__
push r12
push rbx
mov r9, qword [rbp - 0x68]
mov r8, qword [rbp - 0x70]
mov rcx, r15
mov rdx, r14
mov rsi, r13
mov rdi, rax
call sym.InputDevice::read_int__int__int__int__int__int__int___
add rsp, 0x10
test al, al
jne 0x404668
mov ecx, str.void_read_Ts___...___with_Ts____int___int___int___int___int___int___int___
mov edx, 0x240
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_1_0_source.cpp
mov edi, str.input__read_forward_Ts__args_..._
call sym.imp.__assert_fail
nop
lea rsp, [rbp - 0x28]
pop rbx
pop r12
pop r13
pop r14
pop r15
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov dword [rbp - 0x10], edx
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0x10]
mov ecx, dword [rbp - 0xc]
mov esi, ecx
mov rdi, rax
call sym.std::uniform_int_distribution_int_::param_type::param_type
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov eax, dword [rax]
movsxd rdx, eax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul_::seed
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::uniform_int_distribution_int__
mov rdi, rax
call sym.std::_Maybe_wrap_member_pointer_std::uniform_int_distribution_int__::__do_wrap
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::_Bind_std::uniform_int_distribution_int__std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul___::_Bind_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rax, qword [rbp - 0x18]
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Maybe_get_result_type_std::uniform_int_distribution_int__void_::_Maybe_get_result_type
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Weak_result_type_impl_std::uniform_int_distribution_int__::_Weak_result_type_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rdx, qword [rdx]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::get
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 1]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x40
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::operator__
mov rsi, rbx
mov rdi, rax
call 0x403456
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_OutputDevice__true_::_Head_base_std::default_delete_OutputDevice__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_OutputDevice___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_OutputDevice__::_Tuple_impl_std::default_delete_OutputDevice__
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_OutputDevice___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_OutputDevice__false_::_Head_base_OutputDevice___
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_OutputDevice___
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_OutputDevice__std::default_delete_OutputDevice__::_Tuple_impl_OutputDevice__std::default_delete_OutputDevice____void_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 9]
lea rcx, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::tuple_OutputDevice__std::default_delete_OutputDevice__::tuple_OutputDevice___std::default_delete_OutputDevice__void_
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x404a1d
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_OutputDevice__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_OutputDevice__std::default_delete_OutputDevice__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::__get_helper_0ul_OutputDevice__std.default_delete_OutputDevice__
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::get_0ul_OutputDevice__std::default_delete_OutputDevice__
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x404ac3
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_OutputDevice_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov byte [rbp - 0x29], 0xa
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_charconst____9__
mov r13, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_int_
mov r12, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_charconst____6__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x29]
mov r8, rax
mov rcx, r13
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____6__int_charconst____9__char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x404bbd
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_TestCase__true_::_Head_base_std::default_delete_TestCase__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_TestCase___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_TestCase__::_Tuple_impl_std::default_delete_TestCase__
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_TestCase___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_TestCase__false_::_Head_base_TestCase___
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_TestCase___
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_TestCase__std::default_delete_TestCase__::_Tuple_impl_TestCase___std::default_delete_TestCase__void_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 9]
lea rcx, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::tuple_TestCase__std::default_delete_TestCase__::tuple_TestCase___std::default_delete_TestCase__void_
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x404d4d
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_TestCase__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_TestCase__std::default_delete_TestCase__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_TestCase_std::default_delete_TestCase____
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::get_0ul_TestCase__std::default_delete_TestCase__
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x404df3
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_TestCase_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::get
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 5
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::get
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov qword [rbp - 0x50], rcx
mov qword [rbp - 0x58], r8
mov qword [rbp - 0x60], r9
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_charconst____7__
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x24], eax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::forward_charconst____2__
mov r13, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov r12, rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::forward_charconst____3__
mov rbx, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_int_
mov rsi, rax
mov rax, qword [rbp - 0x38]
mov r8, r13
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::write_int_charconst____3__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edx, eax
mov eax, dword [rbp - 0x24]
add eax, edx
add rsp, 0x48
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___char_
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____16__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____16__int_char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x404ffb
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____11__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____11__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40509c
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_double_
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____14__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____14__double_char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40514b
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call 0x404457
mov rdx, rax
lea rax, [rbp - 0x20]
mov rsi, rax
mov rdi, rdx
call sym.std::swap_InputFile__
mov rax, qword [rbp - 0x20]
test rax, rax
je 0x4051a7
mov rbx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_InputFile_::operator__
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::get_0ul_OutputFile__std.default_delete_OutputFile__
mov rdx, rax
lea rax, [rbp - 0x20]
mov rsi, rax
mov rdi, rdx
call sym.std::swap_OutputFile__
mov rax, qword [rbp - 0x20]
test rax, rax
je 0x405203
mov rbx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_OutputFile_::operator__
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::get
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.InputDevice::skipCharacters
movsx edx, al
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readSignedInt_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x4052ab
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rdx, rax
mov rax, qword [rbp - 0x10]
sub rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_default_append
jmp 0x4052e3
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x10]
seta al
test al, al
je 0x4052e3
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 5
add rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_erase_at_end
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::thread__std::thread_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x4053b5
mov rax, qword [rbp - 0x10]
mov rdi, rax
call 0x405346
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::construct_std::thread_void_______
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x4053d3
mov rax, qword [rbp - 0x10]
mov rdi, rax
call 0x405346
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_M_emplace_back_aux_void______
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40541c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x405468
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_double_
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____15__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____15__double_char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40556f
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov esi, 0xffffffff
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add_dispatch
cmp eax, 1
sete al
test al, al
je 0x4055f0
mov rax, qword [rbp - 8]
mov rax, qword [rax]
add rax, 0x10
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
add rax, 0xc
mov esi, 0xffffffff
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add_dispatch
cmp eax, 1
sete al
test al, al
je 0x4055f0
mov rax, qword [rbp - 8]
mov rax, qword [rax]
add rax, 0x18
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_char__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_char__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_char__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_char__char__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_char__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov qword [rbp - 0x18], rdx
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lea rcx, [rdx + rax]
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__fill_a_char_
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov qword [rbp - 0x18], rdx
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lea rcx, [rdx + rax]
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_charconst__char__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_InputFile__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_InputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_InputFile__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_InputFile__std::default_delete_InputFile__
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rbx, qword [rbp - 0x20]
test rbx, rbx
je 0x40579a
mov rdi, rbx
call sym.InputFile::_InputFile
mov rdi, rbx
call sym.operatordelete
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_OutputFile__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_OutputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_OutputFile__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_OutputFile__std::default_delete_OutputFile__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x405846
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
add rax, 0x10
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rdi, rdx
call rax
nop
leave
ret
nop
push rbp
mov rbp, rsp
push r15
push r14
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov qword [rbp - 0x50], rcx
mov qword [rbp - 0x58], r8
mov qword [rbp - 0x60], r9
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x40591c
mov rax, qword [rbp + 0x18]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rdi, qword [rbp + 0x10]
call sym.std::forward_int__
mov r15, rax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::forward_int__
mov r14, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_int__
mov r13, rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::forward_int__
mov r12, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_int__
mov rsi, rax
mov rax, qword [rbp - 0x38]
sub rsp, 8
push rbx
mov r9, r15
mov r8, r14
mov rcx, r13
mov rdx, r12
mov rdi, rax
call sym.InputDevice::read_int__int__int__int__int__int__
add rsp, 0x10
test al, al
je 0x40591c
mov eax, 1
jmp 0x405921
mov eax, 0
lea rsp, [rbp - 0x28]
pop rbx
pop r12
pop r13
pop r14
pop r15
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov dword [rbp - 0x10], edx
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0xc]
mov dword [rax], edx
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0x10]
mov dword [rax + 4], edx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov edi, 0
call sym.std::__detail::__mod_unsignedlong_2147483647ul_1ul_0ul_
test rax, rax
jne 0x40598b
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__detail::__mod_unsignedlong_2147483647ul_1ul_0ul_
test rax, rax
jne 0x40598b
mov eax, 1
jmp 0x405990
mov eax, 0
test al, al
je 0x4059a1
mov rax, qword [rbp - 8]
mov qword [rax], 1
jmp 0x4059b7
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__detail::__mod_unsignedlong_2147483647ul_1ul_0ul_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__false_::_Head_base_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__::_Tuple_impl_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Weak_result_type_std::uniform_int_distribution_int__::_Weak_result_type
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::uniform_int_distribution_int___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rdx, qword [rdx]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__::tuple_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__void_
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_OutputDevice__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_OutputDevice__std::default_delete_OutputDevice__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_OutputDevice__std::default_delete_OutputDevice__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::get_0ul_OutputDevice__std.default_delete_OutputDevice__
mov rax, qword [rax]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_OutputDevice__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_OutputDevice__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_OutputDevice__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_OutputDevice__std::default_delete_OutputDevice__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x405bb6
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
add rax, 0x10
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rdi, rdx
call rax
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____6__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_char_
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_charconst____9__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int_
mov rsi, rax
mov rax, qword [rbp - 0x28]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::write_int_charconst____9__char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x40
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_TestCase__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_TestCase__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_TestCase__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_TestCase__std::default_delete_TestCase__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x40
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::_unique_ptr
mov rax, qword [rbp - 8]
add rax, 0x20
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rbx, qword [rbp - 0x20]
test rbx, rbx
je 0x405db0
mov rdi, rbx
call sym.TestCase::_TestCase
mov rdi, rbx
call sym.operatordelete
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_TestCase__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_TestCase__std::default_delete_TestCase__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_TestCase__std::default_delete_TestCase__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::get_0ul_TestCase__std.default_delete_TestCase__
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_OutputFile__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_OutputFile__std::default_delete_OutputFile__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::__get_helper_0ul_OutputFile__std.default_delete_OutputFile__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_0ul_OutputFile__std::default_delete_OutputFile__
mov rax, qword [rax]
leave
ret
nop
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::write_int_
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_charconst____2__
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_charconst____3__
mov rsi, rax
mov rax, qword [rbp - 0x28]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::write_charconst____3__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x40
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
jne 0x405faf
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::data
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::data
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::char_traits_char_::compare
test eax, eax
jne 0x405faf
mov eax, 1
jmp 0x405fb4
mov eax, 0
add rsp, 0x10
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____16__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int_
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_int_char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____11__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____14__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_double_
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_double_char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_InputFile___
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_InputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_InputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4061a7
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_OutputFile___
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_OutputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_OutputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40622a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_InputFile__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_InputFile__std::default_delete_InputFile__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::__get_helper_0ul_InputFile_std.default_delete_InputFile____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_0ul_InputFile__std::default_delete_InputFile__
mov rax, qword [rax]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
cmp byte [rbp - 0x24], 0x2d
sete al
mov byte [rbp - 0xd], al
cmp byte [rbp - 0xd], 0
je 0x4062e9
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
movsx edx, byte [rbp - 0x24]
lea rcx, [rbp - 0xc]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readUnsignedInt_unsignedint_
test eax, eax
sete al
test al, al
je 0x406310
mov eax, 0
jmp 0x40632f
cmp byte [rbp - 0xd], 0
je 0x40631f
mov eax, dword [rbp - 0xc]
neg eax
mov edx, eax
jmp 0x406324
mov eax, dword [rbp - 0xc]
mov edx, eax
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
mov eax, 1
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x406343
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
cmp qword [rbp - 0x40], 0
je 0x40656a
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
sub rdx, rax
mov rax, rdx
sar rax, 5
cmp rax, qword [rbp - 0x40]
jb 0x4063e1
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
mov rcx, qword [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
jmp 0x40656a
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_default_append
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_check_len
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x30]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x28]
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x40656a
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::thread_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::thread__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call 0x405346
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::construct_std::thread_void_______
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call 0x405346
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::construct_std::thread_void_______
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::thread__std::thread__std::allocator_std::thread__
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::thread__std::thread_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x406895
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x406844
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::destroy_std::thread_
jmp 0x406866
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::thread__std::thread_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____15__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_double_
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_double_char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
cmp qword [rbp - 8], 0
je 0x40696a
mov rax, qword [rbp - 8]
mov rax, qword [rax]
add rax, 8
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_char_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
movzx eax, byte [rax]
mov byte [rbp - 9], al
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x4069fc
movzx eax, byte [rbp - 9]
movzx ecx, al
mov rdx, qword [rbp - 8]
mov rax, qword [rbp - 0x18]
mov esi, ecx
mov rdi, rax
call sym.imp.memset
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_charconst__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_charconst__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false_charconst__char__
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r14
push r13
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov qword [rbp - 0x50], r9
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x406b00
mov rdi, qword [rbp + 0x10]
call sym.std::forward_int__
mov r14, rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::forward_int__
mov r13, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_int__
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int__
mov rsi, rax
mov rax, qword [rbp - 0x28]
mov r9, r14
mov r8, r13
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.InputDevice::read_int__int__int__int__int___
test al, al
je 0x406b00
mov eax, 1
jmp 0x406b05
mov eax, 0
add rsp, 0x30
pop rbx
pop r12
pop r13
pop r14
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__detail::_Mod_unsignedlong_2147483647ul_1ul_0ul_true_true_::__calc
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x406bb8
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::write_int_
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_charconst____9__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_charconst____9__char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 0x1090]
mov ecx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, ecx
mov rdi, rax
call sym.OutputDevice::writeSignedInt_int_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::writeT
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____3__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_charconst____2__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::write_int_
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x403456
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_double_
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rdx
movsd xmm0, qword [rbp - 0x30]
mov rdi, rax
call sym.OutputDevice::write_double_
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp eax, 0xa
seta al
movzx eax, al
test rax, rax
je 0x406e4b
movsx edx, byte [rbp - 0x24]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readUnsignedIntGeneral_unsignedint_
jmp 0x406ebc
mov dword [rbp - 8], 0
mov dword [rbp - 4], 0
movzx eax, byte [rbp - 0x24]
sub eax, 0x30
movzx edx, al
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp edx, eax
jae 0x406e9c
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
imul eax, dword [rbp - 8]
mov edx, eax
movsx eax, byte [rbp - 0x24]
add eax, edx
sub eax, 0x30
mov dword [rbp - 8], eax
add dword [rbp - 4], 1
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
jmp 0x406e59
mov rax, qword [rbp - 0x20]
mov edx, dword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax - 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x406f55
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x20]
ja 0x406fb5
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
cmp rax, qword [rbp - 0x20]
jae 0x406fc3
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
jmp 0x406fc7
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x406fdb
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40700e
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::allocate
jmp 0x407013
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::thread_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x407120
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::thread__
nop
leave
ret
nop
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov rdi, rax
call 0x405346
mov r13, rax
mov r12, qword [rbp - 0x30]
mov rsi, r12
mov edi, 8
call 0x4026e0
mov rbx, rax
test rbx, rbx
je 0x4071b1
mov rsi, r13
mov rdi, rbx
call sym.std::thread::thread_void______
jmp 0x4071b1
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x4026f2
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x40721d
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
cmp rax, qword [rbp - 0x20]
ja 0x40727d
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x40728b
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::max_size
jmp 0x40728f
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4072a3
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4072d6
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::allocate
jmp 0x4072db
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::thread__std::move_iterator_std::thread___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::thread__std::move_iterator_std::thread___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::thread___std::thread__std::thread_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::destroy_std::thread_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x409e90
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov eax, 0
test eax, eax
je 0x4073ab
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_.__Sp_counted_base
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x407418
mov rdx, qword [rbp - 8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rdx, qword [rbp - 8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_charconst__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_char__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_charconst__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_charconst__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_charconst__char__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov qword [rbp - 0x50], r9
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x40753b
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::forward_int__
mov r13, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_int__
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int__
mov rsi, rax
mov rax, qword [rbp - 0x28]
mov r8, r13
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.InputDevice::read_int__int__int__int___
test al, al
je 0x40753b
mov eax, 1
jmp 0x407540
mov eax, 0
add rsp, 0x38
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
mov rcx, qword [rbp - 8]
movabs rdx, 0x200000005
mov rax, rcx
mul rdx
mov rax, rcx
sub rax, rdx
shr rax, 1
add rax, rdx
shr rax, 0x1e
mov rdx, rax
mov rax, rdx
shl rax, 0x1f
sub rax, rdx
sub rcx, rax
mov rax, rcx
mov qword [rbp - 8], rax
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_charconst____9__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov qword [rbp - 0x28], rdx
mov eax, dword [rbp - 0x1c]
mov dword [rbp - 4], eax
cmp dword [rbp - 0x1c], 0
jns 0x40769e
mov eax, dword [rbp - 4]
neg eax
mov ecx, eax
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov esi, ecx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedint_
mov qword [rbp - 0x28], rax
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
mov byte [rax], 0x2d
mov rax, qword [rbp - 0x28]
jmp 0x4076b3
mov rdx, qword [rbp - 0x28]
mov ecx, dword [rbp - 4]
mov rax, qword [rbp - 0x18]
mov esi, ecx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedint_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x403456
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____2__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
movsd qword [rbp - 0x10], xmm0
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 0x1090]
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov qword [rbp - 0x18], rdx
movsd xmm0, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::writeFloatingPoint_double_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::writeT
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov dword [rbp - 8], 0
mov dword [rbp - 4], 0
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isDigit
test al, al
je 0x40779c
movzx eax, byte [rbp - 0x24]
sub eax, 0x30
mov byte [rbp - 0x24], al
jmp 0x4077dc
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isUpper
test al, al
je 0x4077b7
movzx eax, byte [rbp - 0x24]
sub eax, 0x37
mov byte [rbp - 0x24], al
jmp 0x4077dc
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isLower
test al, al
je 0x4077d2
movzx eax, byte [rbp - 0x24]
sub eax, 0x57
mov byte [rbp - 0x24], al
jmp 0x4077dc
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
mov byte [rbp - 0x24], al
movsx edx, byte [rbp - 0x24]
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp edx, eax
jae 0x407819
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
imul eax, dword [rbp - 8]
mov edx, eax
movsx eax, byte [rbp - 0x24]
add eax, edx
mov dword [rbp - 8], eax
add dword [rbp - 4], 1
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
jmp 0x407781
nop
mov rax, qword [rbp - 0x20]
mov edx, dword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax - 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_false_::__uninit_default_n_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x4078ad
mov rax, qword [rbp - 0x10]
jmp 0x4078b1
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x407923
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x407a06
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::thread_
mov rdi, rax
call sym.std::_Destroy_std::thread_
add qword [rbp - 8], 8
jmp 0x4079e1
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::___shared_count
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_std::_Bind_simple_void_____________gnu_cxx::_Lock_policy_2_::___shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::thread::id::id
mov rax, qword [rbp - 0x60]
mov rdi, rax
call 0x405346
mov rdx, rax
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::__bind_simple_void______
lea rax, [rbp - 0x30]
lea rdx, [rbp - 0x50]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call sym.std::thread::_M_make_routine_std::_Bind_simple_void_________
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________void_
lea rcx, [rbp - 0x40]
mov rax, qword [rbp - 0x58]
mov edx, sym.imp.pthread_create
mov rsi, rcx
mov rdi, rax
call sym.std::thread::_M_start_thread
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::_shared_ptr
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________::_shared_ptr
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x407b27
jmp 0x407b22
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::_shared_ptr
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________::_shared_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x58
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::max_size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::thread__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x407bc0
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::thread___std::thread__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::thread::_thread
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_charconst__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_char_
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov qword [rbp - 0x38], r8
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x407cf7
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int__
mov rsi, rax
mov rax, qword [rbp - 0x18]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.InputDevice::read_int__int__int__
test al, al
je 0x407cf7
mov eax, 1
jmp 0x407cfc
mov eax, 0
add rsp, 0x30
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov qword [rbp - 0x28], rdx
cmp dword [rbp - 0x1c], 0
sete al
movzx eax, al
test rax, rax
je 0x407d60
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
mov byte [rax], 0x30
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
cmp eax, 0xa
sete al
movzx eax, al
test rax, rax
je 0x407dc4
cmp dword [rbp - 0x1c], 0
je 0x407e1d
sub qword [rbp - 0x28], 1
mov ecx, dword [rbp - 0x1c]
mov edx, 0xcccccccd
mov eax, ecx
mul edx
shr edx, 3
mov eax, edx
shl eax, 2
add eax, edx
add eax, eax
sub ecx, eax
mov edx, ecx
mov eax, edx
add eax, 0x30
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov eax, dword [rbp - 0x1c]
mov edx, 0xcccccccd
mul edx
mov eax, edx
shr eax, 3
mov dword [rbp - 0x1c], eax
jmp 0x407d78
cmp dword [rbp - 0x1c], 0
je 0x407e1d
mov rax, qword [rbp - 0x18]
mov ecx, dword [rax + 0x10a4]
mov eax, dword [rbp - 0x1c]
mov edx, 0
div ecx
mov dword [rbp - 4], edx
sub qword [rbp - 0x28], 1
cmp dword [rbp - 4], 9
ja 0x407df6
mov eax, dword [rbp - 4]
add eax, 0x30
mov edx, eax
jmp 0x407dfe
mov eax, dword [rbp - 4]
add eax, 0x37
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov rax, qword [rbp - 0x18]
mov esi, dword [rax + 0x10a4]
mov eax, dword [rbp - 0x1c]
mov edx, 0
div esi
mov dword [rbp - 0x1c], eax
jmp 0x407dc4
mov rax, qword [rbp - 0x28]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x50
mov qword [rbp - 0x38], rdi
movsd qword [rbp - 0x40], xmm0
mov qword [rbp - 0x48], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
movsd xmm0, qword [rbp - 0x50]
call sym.std::signbit
mov byte [rbp - 0x29], al
cmp byte [rbp - 0x29], 0
je 0x407e79
movsd xmm1, qword [rbp - 0x40]
movsd xmm0, qword [rip + 0x1ec0]
xorpd xmm0, xmm1
movsd qword [rbp - 0x40], xmm0
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
movsd xmm0, qword [rbp - 0x50]
call sym.std::isnan
test al, al
je 0x407ebf
mov dword [rbp - 0x28], 0
cmp dword [rbp - 0x28], 2
jg 0x4080af
sub qword [rbp - 0x48], 1
mov eax, dword [rbp - 0x28]
cdqe
add rax, 0x409c40
movzx edx, byte [rax]
mov rax, qword [rbp - 0x48]
mov byte [rax], dl
add dword [rbp - 0x28], 1
jmp 0x407e96
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
movsd xmm0, qword [rbp - 0x50]
call sym.std::isinf
test al, al
je 0x407f05
mov dword [rbp - 0x24], 0
cmp dword [rbp - 0x24], 2
jg 0x4080af
sub qword [rbp - 0x48], 1
mov eax, dword [rbp - 0x24]
cdqe
add rax, 0x409c44
movzx edx, byte [rax]
mov rax, qword [rbp - 0x48]
mov byte [rax], dl
add dword [rbp - 0x24], 1
jmp 0x407edc
movsd xmm0, qword [rbp - 0x40]
ucomisd xmm0, qword [rip + 0x1e2e]
jae 0x407f24
movsd xmm0, qword [rbp - 0x40]
cvttsd2si rax, xmm0
mov qword [rbp - 0x20], rax
jmp 0x407f4c
movsd xmm0, qword [rbp - 0x40]
movsd xmm1, qword [rip + 0x1e0f]
subsd xmm0, xmm1
cvttsd2si rax, xmm0
mov qword [rbp - 0x20], rax
movabs rax, 0x8000000000000000
xor qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
test rax, rax
js 0x407f68
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
jmp 0x407f81
mov rdx, rax
shr rdx, 1
and eax, 1
or rdx, rax
pxor xmm0, xmm0
cvtsi2sd xmm0, rdx
addsd xmm0, xmm0
movsd xmm1, qword [rbp - 0x40]
subsd xmm1, xmm0
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10b0]
test rax, rax
js 0x407fa5
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
jmp 0x407fbe
mov rdx, rax
shr rdx, 1
and eax, 1
or rdx, rax
pxor xmm0, xmm0
cvtsi2sd xmm0, rdx
addsd xmm0, xmm0
mulsd xmm0, xmm1
movsd xmm1, qword [rip + 0x1d7e]
addsd xmm0, xmm1
ucomisd xmm0, qword [rip + 0x1d6a]
jae 0x407fe3
cvttsd2si rax, xmm0
mov qword [rbp - 0x18], rax
jmp 0x408006
movsd xmm1, qword [rip + 0x1d55]
subsd xmm0, xmm1
cvttsd2si rax, xmm0
mov qword [rbp - 0x18], rax
movabs rax, 0x8000000000000000
xor qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10b0]
cmp rax, qword [rbp - 0x18]
ja 0x40802c
add qword [rbp - 0x20], 1
mov qword [rbp - 0x18], 0
mov rax, qword [rbp - 0x38]
mov eax, dword [rax + 0x10a8]
mov eax, eax
neg rax
mov rdx, rax
mov rax, qword [rbp - 0x48]
add rax, rdx
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x38]
mov eax, dword [rax + 0x10a8]
test eax, eax
je 0x408094
mov byte [rbp - 0x2a], 0x30
mov rdx, qword [rbp - 0x48]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedlonglong_
mov rcx, rax
lea rdx, [rbp - 0x2a]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_char__char_
sub qword [rbp - 0x10], 1
mov rax, qword [rbp - 0x10]
mov byte [rax], 0x2e
mov rdx, qword [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedlonglong_
mov qword [rbp - 0x48], rax
cmp byte [rbp - 0x29], 0
je 0x4080c1
sub qword [rbp - 0x48], 1
mov rax, qword [rbp - 0x48]
mov byte [rax], 0x2d
mov rax, qword [rbp - 0x48]
mov rsi, qword [rbp - 8]
xor rsi, qword fs:[0x28]
je 0x4080d9
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
cmp qword [rbp - 0x20], 0
je 0x40811a
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdi, rax
call sym.std::_Construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
sub qword [rbp - 0x20], 1
add qword [rbp - 8], 0x20
jmp 0x4080f3
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x408178
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 5
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x40820a
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
add qword [rbp - 8], 0x20
jmp 0x4081e5
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_thread
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_void______false_::_M_head
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_M_head
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_void______false_::_Head_base_void______
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_Tuple_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_void______::tuple
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call 0x405346
mov qword [rbp - 0x10], rax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::_Maybe_wrap_member_pointer_void______::__do_wrap
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Bind_simple_void________::_Bind_simple_void______
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4083b1
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::make_shared_std::thread::_Impl_std::_Bind_simple_void__________std::_Bind_simple_void_________
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40841b
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void____________
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_base____gnu_cxx::_Lock_policy_2_::__shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________void_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::max_size
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x4084b6
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::thread___std::thread__
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x40858a
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int__
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::read_int__int____
test al, al
je 0x40858a
mov eax, 1
jmp 0x40858f
mov eax, 0
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
cmp qword [rbp - 0x20], 0
sete al
movzx eax, al
test rax, rax
je 0x4085c2
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
mov byte [rax], 0x30
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
cmp eax, 0xa
sete al
movzx eax, al
test rax, rax
je 0x408640
cmp qword [rbp - 0x20], 0
je 0x4086a7
sub qword [rbp - 0x28], 1
mov rcx, qword [rbp - 0x20]
movabs rdx, 0xcccccccccccccccd
mov rax, rcx
mul rdx
shr rdx, 3
mov rax, rdx
shl rax, 2
add rax, rdx
add rax, rax
sub rcx, rax
mov rdx, rcx
mov eax, edx
add eax, 0x30
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov rax, qword [rbp - 0x20]
movabs rdx, 0xcccccccccccccccd
mul rdx
mov rax, rdx
shr rax, 3
mov qword [rbp - 0x20], rax
jmp 0x4085da
cmp qword [rbp - 0x20], 0
je 0x4086a7
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
mov ecx, eax
mov rax, qword [rbp - 0x20]
mov edx, 0
div rcx
mov qword [rbp - 8], rdx
sub qword [rbp - 0x28], 1
cmp qword [rbp - 8], 9
ja 0x40867a
mov rax, qword [rbp - 8]
add eax, 0x30
mov edx, eax
jmp 0x408683
mov rax, qword [rbp - 8]
add eax, 0x37
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
mov esi, eax
mov rax, qword [rbp - 0x20]
mov edx, 0
div rsi
mov qword [rbp - 0x20], rax
jmp 0x408640
mov rax, qword [rbp - 0x28]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_char__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__fill_a_char_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x20
call 0x4026e0
test rax, rax
je 0x408732
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x7ffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
test al, al
je 0x4087b7
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
add qword [rbp - 0x18], 0x20
jmp 0x408767
mov rax, qword [rbp - 0x18]
jmp 0x4087f0
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_void______false_::_Head_base_void______
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_Tuple_impl_void______
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_void______::tuple_void______void_
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call method.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________.allocator
mov rax, qword [rbp - 0x28]
lea rcx, [rbp - 0x19]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocate_shared_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x18]
xor rdx, qword fs:[0x28]
je 0x408946
jmp 0x408941
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::__shared_count
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::_M_swap
mov rax, qword [rbp - 0x10]
mov qword [rax], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x408c6b
test al, al
je 0x408a3d
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::thread__::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::thread_
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::thread_std::thread__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::thread__::operator__
add qword [rbp - 0x18], 8
jmp 0x4089ed
mov rax, qword [rbp - 0x18]
jmp 0x408a76
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::thread__
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x408add
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x408add
mov eax, 1
jmp 0x408ae2
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x408d1c
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x20]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x20
call 0x4026e0
test rax, rax
je 0x408b8c
mov rsi, rbx
mov rdi, rax
call 0x401900
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________::shared_ptr_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
add rsp, 0x10
mov rax, qword [rbp - 0x28]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x408c32
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rax, qword [rax]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::thread__
xor eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::thread_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 8
call 0x4026e0
test rax, rax
je 0x408d14
mov rsi, rbx
mov rdi, rax
call sym.std::thread::thread
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_std::_Bind_simple_void_____________gnu_cxx::_Lock_policy_2_::__shared_ptr_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
add rsp, 0x10
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::thread__::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::thread__::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rax], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 0x28]
lea rdi, [rax + 8]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rcx, rdx
mov rdx, rax
mov esi, 0
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::__shared_count_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
add rsp, 0x10
mov rax, qword [rbp - 0x28]
add rax, 8
mov esi, obj.typeinfoforstd::_Sp_make_shared_tag
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::_M_get_deleter
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x28]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x28]
add rcx, 8
mov rsi, rax
mov rdi, rcx
mov eax, 0
call sym.std::__enable_shared_from_this_helper____gnu_cxx::_Lock_policy_2_
nop
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r14
push r13
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov qword [rbp - 0x70], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov qword [rax], 0
mov rdx, qword [rbp - 0x68]
lea rax, [rbp - 0x4a]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::allocator_std::thread::_Impl_std::_Bind_simple_void__________
lea rax, [rbp - 0x40]
lea rdx, [rbp - 0x4a]
mov rsi, rdx
mov rdi, rax
call sym.std::__allocate_guarded_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::get
mov qword [rbp - 0x48], rax
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::move_std::allocator_std::thread::_Impl_std::_Bind_simple_void__________const__
mov rdx, rax
lea rax, [rbp - 0x49]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::allocator
lea r13, [rbp - 0x49]
mov rax, qword [rbp - 0x70]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov r14, rax
mov r12, qword [rbp - 0x48]
mov rsi, r12
mov edi, 0x30
call 0x4026e0
mov rbx, rax
test rbx, rbx
je 0x408f8d
mov rdx, r14
mov rsi, r13
mov rdi, rbx
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Sp_counted_ptr_inplace_std::_Bind_simple_void_________
lea rax, [rbp - 0x49]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, qword [rbp - 0x58]
mov rdx, qword [rbp - 0x48]
mov qword [rax], rdx
lea rax, [rbp - 0x40]
mov esi, 0
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::operator_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::___allocated_ptr
lea rax, [rbp - 0x4a]
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_allocator
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x40902e
jmp 0x409029
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x4026f2
mov rbx, r13
lea rax, [rbp - 0x49]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
jmp 0x409001
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::___allocated_ptr
jmp 0x409012
mov rbx, rax
lea rax, [rbp - 0x4a]
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x50
pop rbx
pop r12
pop r13
pop r14
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
test rax, rax
je 0x40907e
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
add rax, 0x20
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdx, qword [rdx]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rdx
call rax
jmp 0x409083
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x48
mov qword [rbp - 0xb8], rdi
mov qword [rbp - 0xa8], rsi
mov qword [rbp - 0xa0], rdx
mov qword [rbp - 0x98], rcx
mov qword [rbp - 0x90], r8
mov qword [rbp - 0x88], r9
test al, al
je 0x4090db
movaps xmmword [rbp - 0x80], xmm0
movaps xmmword [rbp - 0x70], xmm1
movaps xmmword [rbp - 0x60], xmm2
movaps xmmword [rbp - 0x50], xmm3
movaps xmmword [rbp - 0x40], xmm4
movaps xmmword [rbp - 0x30], xmm5
movaps xmmword [rbp - 0x20], xmm6
movaps xmmword [rbp - 0x10], xmm7
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, 1
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::allocate
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::__allocated_ptr
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
test rax, rax
je 0x40918e
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::_S_raw_ptr
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_ebo_helper_0_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________true_::__Sp_ebo_helper
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_::_Sp_counted_base
mov edx, 0x409d60
mov rax, qword [rbp - 0x28]
mov qword [rax], rdx
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x19]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::allocator
mov rax, qword [rbp - 0x28]
lea rdx, [rax + 0x10]
lea rax, [rbp - 0x19]
mov rsi, rax
mov rdi, rdx
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::_Impl
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_M_ptr
mov rcx, rax
mov rax, qword [rbp - 0x30]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________::construct_std::thread::_Impl_std::_Bind_simple_void__________std::_Bind_simple_void_________
jmp 0x4092e4
mov rbx, rax
mov rax, qword [rbp - 0x28]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::__Impl
mov rax, qword [rbp - 0x28]
mov rdi, rax
call method.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_.__Sp_counted_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4092f8
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::allocate
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov qword [rax + 8], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Mutex_base____gnu_cxx::_Lock_policy_2_::_Mutex_base
mov edx, 0x409e90
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov dword [rax + 8], 1
mov rax, qword [rbp - 8]
mov dword [rax + 0xc], 1
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::aligned_storage_32ul_8ul_::aligned_storage
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Sp_ebo_helper_0_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________true_::_Sp_ebo_helper
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::__aligned_buffer_std::thread::_Impl_std::_Bind_simple_void__________::__aligned_buffer
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x10
mov rdi, rax
call sym.__gnu_cxx::__aligned_buffer_std::thread::_Impl_std::_Bind_simple_void__________::_M_ptr
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::construct_std::thread::_Impl_std::_Bind_simple_void__________std::_Bind_simple_void_________
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x409506
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 4
mov rdi, rax
call sym.operatornew
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::__aligned_buffer_std::thread::_Impl_std::_Bind_simple_void__________::_M_addr
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 0x20
call 0x4026e0
test rax, rax
je 0x4095cb
mov rsi, rbx
mov rdi, rax
call sym.std::thread::_Impl_std::_Bind_simple_void_________::_Impl
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x555555555555555
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::__shared_count
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_base____gnu_cxx::_Lock_policy_2_::__shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x409e68
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_Impl_base::_Impl_base
mov edx, 0x409d98
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 8]
add rax, 0x18
mov rsi, rdx
mov rdi, rax
call sym.std::_Bind_simple_void________::_Bind_simple
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x409d98
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_Impl_base::__Impl_base
mov eax, 0
test eax, eax
je 0x4096ef
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::thread::_Impl_std::_Bind_simple_void_________.__Impl
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x409d60
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::__Impl
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_.__Sp_counted_base
mov eax, 0
test eax, eax
je 0x409761
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::__Sp_counted_ptr_inplace
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_M_ptr
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::_M_alloc
mov rsi, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________::destroy_std::thread::_Impl_std::_Bind_simple_void__________
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::_M_alloc
mov rdx, rax
lea rax, [rbp - 0x21]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::allocator_std::thread::_Impl_std::_Bind_simple_void__________
mov rdx, qword [rbp - 0x38]
lea rcx, [rbp - 0x21]
lea rax, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::__allocated_ptr
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::__Sp_counted_ptr_inplace
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::___allocated_ptr
lea rax, [rbp - 0x21]
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_allocator
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x409857
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, obj.typeinfoforstd::_Sp_make_shared_tag
mov rdi, rax
call sym.std::type_info::operator__
test al, al
je 0x40988d
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_M_ptr
jmp 0x409892
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x18
mov rdi, rax
call sym.std::_Bind_simple_void________::operator__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_ebo_helper_0_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________true_::_S_get
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::destroy_std::thread::_Impl_std::_Bind_simple_void__________
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rdx
mov rdi, rax
call sym.std::_Bind_simple_void________::_M_invoke__
add rsp, 0x10
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40997c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rdi, rdx
call rax
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_void______
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_0ul_void______
mov rdi, rax
call sym.std::forward_void______
mov rax, qword [rax]
call rax
leave
ret
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x2063b6]
push rbp
lea rbp, [rip + 0x2063be]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x409a66
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x409a50
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
cmp eax, dword [rax]
add byte [rax], al
nop
popfq
fiadd dword [rdx + 0x442d1837]
sbb byte [rip + 0x21fb5444], ch
or dword [rax], eax
add byte [rax], dl
add byte [rax], al
add byte [rax], 0
add byte [rbx + 0x6f], dh
jae 0x409b59
jb 0x409b60
pop rdi
movsxd rbp, dword [rdi + 0x64]
jae 0x409b5b
insd dword [rdi], dx
outsb dx, byte [rsi]
je 0x409b64
movsxd rbp, dword [rdi]
insb byte [rdi], dx
jae 0x409b6c
insb byte [rdi], dx
jae 0x409b74
pop rdi
xor dword [rdi + 0x30], ebx
jae 0x409b82
jne 0x409b87
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdx], dh
xor ah, byte [rax]
cmp al, 0x3d
and byte [rsi + 0x61], dh
insb byte [rdi], dx
jne 0x409b8b
and byte [rsi], ah
and byte es:[rsi + 0x61], dh
insb byte [rdi], dx
jne str.Expected:_n
and byte [rdi + 0x363320], bh
jbe 0x409b99
insb byte [rdi], dx
jne 0x409ba0
and byte [rax], bh
pop r8
pop rdi
push r12
add byte [rdx], sil
jb 0x409b4b
and byte [rax], al
ja 0x409b4f
add byte [rdi + 0x52], al
add byte [rsi + 0x59], dl
add byte [rdx], al
pop rcx
add byte [rdx], dl
push r8
push r11
push rbx
add byte [r8], r12b
jae 0x409be0
jb 0x409be3
add byte fs:[rbx + 0x61], al
jae 0x409bdb
and byte [rax], al
or al, byte [rax]
cmp ah, byte [rax]
add byte [rbx + 0x61], al
jae 0x409be6
and byte [rbx], ah
add byte [rbp + 0x72], al
jb 0x409bf9
outsd dx, dword [rsi]
jb str._n_nTest_time:
outsd dx, dword [rsi]
outsb dx, byte [rsi]
and byte [rbp + 0x73], dh
je 0x409bb2
and eax, dword [rax]
js 0x409c07
movsxd rsi, dword gs:[rbp + 0x64]
cmp cl, byte [rdx]
add byte [rdx + 0x65], dl
push rdx
movsxd rsp, dword gs:[rbp + 0x69]
jbe 0x409c0b
cmp cl, byte fs:[rdx]
add byte [rdx], cl
or cl, byte [rdx]
push rsp
jae str.vector::_M_emplace_back_aux
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rdx + 0x2d], al
sub eax, 0x6c616d73
insb byte [rdi], dx
sub eax, 0x65747461
insd dword [rdi], dx
jo 0x409c3b
xor byte [rsi], ch
imul ebp, dword [rsi], 0x7074756f
outsd dx, dword [rsi]
jne 0x409c43
jo 0x409c46
je 0x409c01
je 0x409c4d
je str._n_nTotal_time:
or cl, byte [rdx]
push rsp
outsd dx, dword [rsi]
je 0x409c3e
insb byte [rdi], dx
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rax], al
add byte [rcx + 0x6e], ch
imul ebp, dword [rsi + 0x70], 0x3e2d7475
jb 0x409c56
sub byte fs:[rsi + 0x6f], ah
jb 0x409c6f
jb 0x409c5f
cmp al, 0x54
jae 0x409c3d
sub byte [rcx + 0x72], ah
jae 0x409c2e
sub dword cs:[rax], eax
jbe 0x409c71
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x409c87
je 0x409c7c
jo 0x409c90
outsb dx, byte gs:[rsi]
add byte fs:[rsi + 0x65], dh
jbe 0x409c8b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x409c9f
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x409cb7
add byte [rsi + 0x61], cl
add byte [rsi + 0x6e], r12b
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x74], al
je 0x409cb5
imul ebp, dword [rdx + rdi + 0x3a], 0x65736142
and byte [rbx + 0x65], dh
je 0x409ca3
jae 0x409cc9
sub byte [rbp + 0x69], dh
outsb dx, byte [rsi]
je 0x409c93
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x409ce5
imul ebp, dword [rdx + rdi + 0x3a], 0x63657250
imul esi, dword [rbx + 0x69], 0x73206e6f
je 0x409ce6
jb 0x409cfd
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x6e697528
je 0x409ccd
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x409d31
imul esp, dword [rax + 0x72], 0x28646165
push rsp
jae 0x409cf3
and byte es:[rsi], ch
sub dword cs:[rax], esp
pop rbx
ja 0x409d40
je 0x409d41
and byte [rbx + rsi*2 + 0x20], dl
cmp eax, 0x6e697b20
je 0x409d0a
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x69202c26
outsb dx, byte [rsi]
je 0x409d16
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x69202c26
outsb dx, byte [rsi]
je 0x409d22
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x69202c26
outsb dx, byte [rsi]
je 0x409d2e
jge 0x409d67
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x409d19
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
out dx, eax
jg 0x409d29
add byte [rax], al
add byte [rax + 0x412e84], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x409d8b
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x409d8f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x409e
add byte [rax], al
add byte [rax], bl
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rdi + rdx*4 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x4097], cl
add byte [rax], al
add dl, cl
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x68], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x409d31
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4096], dh
add byte [rax], al
add dl, dh
xchg eax, esi
add byte [rax], al
add byte [rax], al
add byte [rax + rbx*4 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr byte [rdi + 0x40], 1
add byte [rax], al
add byte ss:[rax], al
add byte [rax], al
add byte [rsi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + rsi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
lahf
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4034], ah
add byte [rax], al
add byte [rsi + 0x35], dh
add byte [rax], al
add byte [rax], al
add al, ah
xor eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax + 0x40], ah
add byte [rax], al
mov al, 0x1b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0x2af0000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x40a0
add byte [rax], al
add byte [rax + 0x401b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x1b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x40a0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x401b], dh
add byte [rax], al
add byte [rax + 0x69], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x401b], dh
add byte [rax], al
add byte [rax + 2], ch
push 0x6102
add byte [rax], al
add al, ah
sahf
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40a0], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x409f15
xor ebx, dword [rdi + 0x53]
jo 0x409f47
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x409f53
pop rdi
jo 0x409f66
jb 0x409f53
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x409f36
je 0x409f6a
jb 0x409f69
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x409f41
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x409f88
push rax
jbe 0x409f99
jbe 0x409f6b
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409f98
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x409fb5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
adc byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x61], ah
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x409f94
cmp dword [rdi + 0x53], ebx
jo 0x409fc7
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x409fd7
add byte [eax + 2], ch
push 0x6102
add byte [rax], al
add byte [rax + 0x409f], ah
add byte [rax], al
add byte [rax + 0x40a0], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x409fda
je 0x40a00e
jb 0x40a00d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x409fe5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40a02c
push rax
jbe 0x40a03d
jbe 0x40a00f
add byte [r8], r8b
add byte [rax + 2], ch
push 0x6102
add byte [rax], al
add al, ch
lahf
add byte [rax], al
add byte [rax], al
add byte [rax], ah
movabs al, byte [0x3231000000000040]
xor dword [rdx], esi
jne 0x40a061
jo 0x40a064
je 0x40a044
je 0x40a065
imul ebp, dword [rsi + 0x67], 0x2680000
push 0x6102
add byte [rax], al
add byte [rax], dl
movabs al, byte [0xa020000000000040]
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rax], esi
jne 0x40a089
jo 0x40a08c
je 0x40a05f
imul ebp, dword [rbp], 0x10000000
adc byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
movabs al, byte [0x3231000000000040]
xor dword [rdx], esi
jne 0x40a0a9
jo 0x40a0ac
je 0x40a07d
jbe 0x40a0a5
movsxd rsp, dword [rbp]
add byte [rax + 2], ch
push 0x6102
add byte [rax], al
add byte [rax - 0x60], bl
add byte [rax], al
add byte [rax], al
add byte [rax - 0x60], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
cmp dword [rcx + 0x6e], ecx
jo 0x40a0d2
je 0x40a0a5
imul ebp, dword [rbp], 0
add byte [rax], dl
adc byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x60], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x40a0f3
je 0x40a0c4
jbe 0x40a0ec
movsxd rsp, dword [rbp]
add byte [rax], al
adc byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40a0], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x40a0da
je 0x40a10e
jb 0x40a10d
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40a11d
pop rdi
jae 0x40a11b
add byte [r8 + 2], r13b
push 0x6102
add byte [rax], al
add al, ah
movabs al, byte [0xa118000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x40a114
pop rdi
push rbx
jo 0x40a147
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40a153
pop rdi
jae 0x40a159
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a15d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40a17a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
add byte [rax], al
add byte [rax], dl
adc byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x5f], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x40a174
xor dword [rdi + 0x4d], ebx
jne 0x40a1bc
js 0x40a1aa
jae 0x40a1b4
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a1b8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40a1d5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
lodsb al, byte [rsi]
add byte [rax], al
add dword [rax], eax
add al, dl
jbe 0x40a17e
clc
add byte [rax], al
nop
jp 0x40a186
dec eax
add byte [rax], al
xchg byte [rbx - 1], bh
inc dword [rax - 0x63fffff1]
jnp 0x40a196
jmp qword [rax - 0x3efffff1]
jnp 0x40a19e
inc eax
sldt word [rax]
jnp 0x40a1a6
jmp rax
sldt word [rax]
jl 0x40a1ae
inc dword [rax]
adc byte [rax], al
add byte [rcx], bh
jl 0x40a1b6
jmp qword [rax]
adc byte [rax], al
add byte [rbx + 0x7c], ah
inc dword [rax + 0x10]
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
jl 0x40a1c6
jmp qword [rax + 0x12]
add byte [rax], al
mov dl, 0x7c
inc dword [rax - 0x3effffee]
jl 0x40a1d6
jmp qword [rax - 0x9ffffee]
jl 0x40a1de
inc eax
adc al, byte [rax]
add byte [rip - 0x1f000083], ah
adc al, byte [rax]
add byte [rbx], dh
jge 0x40a1ee
call qword [rax - 0x72ffffe8]
jle 0x40a1f6
mov eax, 0xd000018
jg 0x40a1fe
fcomp dword [rax]
add byte [rax], al
xlatb
cmp bh, 0xff
add byte [rcx], bl
add byte [rax], al
test dword [rcx + 0x1928ffff], 0x84840000
dec dword [rax + 0x20000049]
test edi, edi
lcall [rax + 0x3500004b]
test edi, edi
jmp qword [rax]
sldt word [rax]
jo 0x40a1b3
inc dword [rax + 0xf]
add byte [rax], al
test edi, edi
jmp qword [rax + 0xf]
add byte [rax], al
xchg eax, edx
test edi, edi
jmp qword [rax + 0x10]
add byte [rax], al
test edi, edi
inc dword [rax + 0x1d000010]
xchg bh, bh
jmp qword [rax + 0x35000010]
xchg bh, bh
inc eax
adc byte [rax], al
add byte [rdx - 0x7a], dl
jmp rax
adc byte [rax], al
add byte [rax - 0x7a], ch
inc dword [rax]
adc dword [rax], eax
add byte [rdx + 0x20ffff86], dl
adc dword [rax], eax
add ah, al
xchg bh, bh
inc dword [rax + 0x11]
add byte [rax], al
call 0x6140a207
adc dword [rax], eax
add byte [rsi], cl
xchg edi, edi
inc dword [rax + 0x62000011]
xchg edi, edi
jmp qword [rax - 0x7dffffef]
xchg edi, edi
inc eax
adc dword [rax], eax
add byte [rsi - 0x1f000079], bl
adc dword [rax], eax
add dh, bl
xchg edi, edi
inc dword [rax]
adc al, byte [rax]
add byte [rax + rcx*4], al
jmp qword [rax]
adc al, byte [rax]
add byte [rdx], dh
mov bh, bh
inc dword [rax + 0x12]
add byte [rax], al
mov dil, r15b
inc dword [rax]
adc eax, dword [rax]
add byte [rax + rcx*4 + 0x1320ffff], bl
add byte [rax], al
mov bh, bh
inc dword [rax + 0x13]
add byte [rax], al
sbb cl, byte [rcx + 0x1360ffff]
add byte [rax], al
xor dword [rcx + 0x1380ffff], ecx
add byte [rax], al
mov rdi, rdi
jmp qword [rax + 0x60000013]
mov edi, edi
inc eax
adc eax, dword [rax]
add byte [rax - 0x1f000077], al
adc eax, dword [rax]
add byte [rax - 0x76], bl
dec dword [rax]
adc al, 0
add al, al
mov bh, bh
ljmp [rax]
adc al, 0
add dh, bh
mov bh, bh
ljmp [rax + 0x14]
add byte [rax], al
mov edi, edi
call qword [rax + 0x72000014]
mov eax, 0xfc000014
fcom dword [rax + rax]
add byte [rax - 0x73], bl
clc
adc al, 0
add byte [rsi + rcx*4], dh
lcall [rax]
adc eax, 0x8f700000
cmp byte [rip - 0x704e0000], dl
lcall [rax + 0x15]
add byte [rax], al
fmul dword [rdi + 0x1578ffff]
add byte [rax], al
sub byte [rax + 0x1598ffff], dl
add byte [rax], al
mov dl, 0x91
mov eax, 0x4000015
xchg eax, edx
jmp rax
adc eax, 0x925a0000
inc dword [rax]
add byte [rax], al
mov dl, byte [rdx + 0x1620ffff]
add byte [rax], al
mov al, 0x92
inc dword [rax + 0x16]
add byte [rax], al
out 0x92, al
jmp qword [rax + 0x16]
add byte [rax], al
xor byte [rbx + 0x1688ffff], dl
add byte [rax], al
jl 0x40a329
ljmp [rax - 0x35ffffea]
xchg eax, ebx
dec eax
add byte [rax], al
xchg eax, esp
call 0x7040a3c3
xchg eax, esp
call qword [rax]
add byte [rax], al
xchg eax, esi
xchg eax, esp
push qword [rax]
add byte [rax], al
retf -0x6c
call qword [rax + 0x17]
add byte [rax], al
add al, 0x95
push qword [rax + 0x17]
add byte [rax], al
xchg rax, rbp
lcall [rax + 0x72000017]
xchg eax, ebp
mov eax, 0xc6000017
xchg eax, ebp
fcom dword [rdi]
add byte [rax], al
xchg eax, esi
clc
add byte [rax], al
push 0x18ffff96
sbb byte [rax], al
add byte [rax + 0x40ffff9f], cl
sbb byte [rax], al
add byte [rax - 0x60], cl
ljmp [rax + 0x18]
add byte [rax], al
shl dword [rax + 0x1950ffff], cl
add byte [rax], al
loope 0x40a3ae
push qword [rax + 0x19]
add byte [rax], al
pop rsp
movabs eax, dword [0xa18600001990ffff]
push qword [rax - 0x42ffffe7]
movabs eax, dword [0xa209000019d0ffff]
clc
sbb dword [rax], eax
add byte [rsi], bh
movabs byte [0xa2a500001a18ffff], al
inc dword [rax + 0x1a]
add byte [rax], al
mov bl, 0xa2
jmp qword [rax + 0x1a]
add byte [rax], al
int 0xa2
inc dword [rax - 0x18ffffe6]
movabs byte [0xa30200001aa0ffff], al
inc eax
sbb al, byte [rax]
add byte [rbx - 1], bl
call 0x6a40a487
movabs dword [0xa38400001b08ffff], eax
ljmp [rax]
sbb eax, dword [rax]
add byte [rsi + 0x48ffffa3], bl
sbb eax, dword [rax]
add byte [rax + 0x68ffffa3], bh
sbb eax, dword [rax]
add byte [rdx], dl
movsb byte [rdi], byte ptr [rsi]
call qword [rax + 0x2000001b]
movsb byte [rdi], byte ptr [rsi]
push qword [rax + 0x800001b]
movsd dword [rdi], dword ptr [rsi]
jmp rax
sbb eax, dword [rax]
add byte [rdx], dh
movsd dword [rdi], dword ptr [rsi]
inc dword [rax]
sbb al, 0
add byte [rbp - 0x5b], bl
jmp qword [rax]
sbb al, 0
add byte [rbx - 0x5b], ch
inc dword [rax + 0x1c]
add byte [rax], al
jns 0x40a463
jmp qword [rax + 0x1c]
add byte [rax], al
shl dword [rbp + 0x1c88ffff], 1
add byte [rax], al
loopne 0x40a473
ljmp [rax - 0x13ffffe4]
movsd dword [rdi], dword ptr [rsi]
dec eax
sbb al, 0
add byte [rax], cl
cmpsb byte [rsi], byte ptr [rdi]
call 0x2440a501
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rax]
sbb eax, 0xa6500000
ljmp [rax]
sbb eax, 0xa66a0000
dec dword [rax + 0x1d]
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
cmpsb byte [rsi], byte ptr [rdi]
ljmp [rax + 0x1d]
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rax - 0x28ffffe3]
cmpsb byte [rsi], byte ptr [rdi]
ljmp [rax - 0x19ffffe3]
cmpsb byte [rsi], byte ptr [rdi]
dec eax
sbb eax, 0xa7280000
call 0x3640a542
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rax]
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
ljmp [rax]
add byte [rax], al
cmpsd dword fs:[rsi], dword ptr [rdi]
dec dword [rax + 0x1e]
add byte [rax], al
xchg eax, esi
cmpsd dword [rsi], dword ptr [rdi]
ljmp [rax + 0x1e]
add byte [rax], al
shl byte [rdi + 0x1e88ffff], 0
add byte [rax + rbp*4], dl
ljmp [rax + 0x6200001e]
test al, 0xff
call rax
add byte [rax], al
scasd eax, dword [rdi]
test al, 0xff
push rax
add byte [rax], al
mov ebp, 0x10ffffa8
add byte [rax], al
xlatb
test al, 0xff
push qword [rax]
add byte [rax], al
int1
test al, 0xff
call qword [rax + 0x1f]
add byte [rax], al
or al, 0xa9
push qword [rax + 0x1f]
add byte [rax], al
test ax, 0xffff
cwde
add byte [rax], al
sub dword [rcx + 0x1fc0ffff], 0xa98f0000
jmp rax
add byte [rax], al
popfq
test eax, 0x2000ffff
add byte [rax], al
stosd dword [rdi], eax
test eax, 0x2020ffff
add byte [rax], al
pop rax
stosb byte [rdi], al
dec dword [rax + 0x20]
add byte [rax], al
stosb byte [rdi], al
ljmp [rax + 0x20]
add byte [rax], al
je 0x40a568
dec dword [rax - 0x6bffffe0]
stosb byte [rdi], al
ljmp [rax - 0x39ffffe0]
stosb byte [rdi], al
dec eax
and byte [rax], al
add al, dh
stosb byte [rdi], al
call 0x4440a5fd
stosd dword [rdi], eax
dec dword [rax]
and dword [rax], eax
add byte [rdx + 0x30ffffab], dl
and dword [rax], eax
add bh, bl
stosd dword [rdi], eax
call qword [rax + 0x21]
add byte [rax], al
in eax, dx
stosd dword [rdi], eax
push qword [rax + 0x21]
add byte [rax], al
lodsb al, byte [rsi]
call qword [rax + 0x21000021]
lodsb al, byte [rsi]
push qword [rax + 0x3c000021]
lodsb al, byte [rsi]
call rax
and dword [rax], eax
add byte [rsi - 0x7000054], dl
and dword [rax], eax
add byte [rax + 0x18ffffac], dh
and al, byte [rax]
add al, dl
lodsb al, byte [rsi]
cmp byte [rdx], ah
add byte [rax], al
lodsb al, byte [rsi]
lcall [rax + 0x22]
add byte [rax], al
clc
lodsb al, byte [rsi]
js 0x40a65c
add byte [rax], al
lodsd eax, dword [rsi]
lcall [rax + 0x14000022]
lodsd eax, dword [rsi]
mov eax, 0x22000022
lodsd eax, dword [rsi]
fsub dword [rdx]
add byte [rax], al
retf
lodsd eax, dword [rsi]
inc dword [rax]
and eax, dword [rax]
add bl, dh
lodsd eax, dword [rsi]
jmp qword [rax]
and eax, dword [rax]
add byte [rcx], al
scasb al, byte [rdi]
inc dword [rax + 0x23]
add byte [rax], al
xchg eax, esp
scasb al, byte [rdi]
ljmp [rax + 0x23]
add byte [rax], al
movabs byte [0x3500002388ffffae], al
scasd eax, dword [rdi]
push qword [rax + 0x43000023]
scasd eax, dword [rdi]
call rax
and eax, dword [rax]
add byte [rcx - 0x51], dl
push rax
and eax, dword [rax]
add ah, ah
scasd eax, dword [rdi]
lcall [rax]
and al, 0
add byte [rax - 0x50], al
inc dword [rax + 0x24]
add byte [rax], al
pushfq
mov al, 0xff
ljmp [rax + 0x24]
add byte [rax], al
mov dh, 0xb0
dec dword [rax - 0x15ffffdc]
mov al, 0xff
ljmp [rax + 0x76000024]
mov cl, 0xff
dec eax
and al, 0
add byte [rdx - 0xf00004f], dl
and al, 0
add dh, dl
mov cl, 0xff
lcall [rax]
and eax, 0xb1e40000
cmp byte [rip - 0x4d9a0000], ah
lcall [rax + 0x25]
add byte [rax], al
scasb al, byte [rdi]
mov dl, 0xff
js 0x40a70f
add byte [rax], al
cli
mov dl, 0xff
lcall [rax + 0x36000025]
mov bl, 0xff
mov eax, 0x56000025
mov bl, 0xff
fsub dword [rip - 0x4c990000]
clc
and eax, 0xb3750000
lcall [rax]
add byte es:[rax], al
or byte [rdi + rdi*8 + 0x2640ff], dh
add byte [rbx + 0x60ffffb4], al
add byte es:[rax], al
popfq
mov ah, 0xff
inc dword [rax - 0xaffffda]
mov ah, 0xff
ljmp [rax + 0xf000026]
mov ch, 0xff
dec eax
add byte es:[rax], al
mov bpl, 0xff
call 0x5640a76b
mov ch, 0xff
dec dword [rax]
add byte [rax], al
mov dword [rbp + 0x2728ffff], esi
add byte [rax], al
xchg eax, edi
mov ch, 0xff
dec dword [rax + 0x27]
add byte [rax], al
mov cl, 0xb5
ljmp [rax + 0x27]
add byte [rax], al
retf
mov ch, 0xff
dec dword [rax - 0x19ffffd9]
mov ch, 0xff
ljmp [rax + 0x27]
mov dh, 0xff
dec eax
add byte [rax], al
xor dh, byte [rsi + 0x27e8ffff]
add byte [rax], al
mov sil, 0xff
dec dword [rax]
sub byte [rax], al
add byte [rdx - 0x4a], bl
ljmp [rax]
sub byte [rax], al
add byte [rsi + rsi*4 - 1], dh
dec dword [rax + 0x28]
add byte [rax], al
mov dh, 0xff
ljmp [rax + 0x28]
add byte [rax], al
test al, 0xb6
dec dword [rax - 0x25ffffd8]
mov dh, 0xff
ljmp [rax - 0x3fffffd8]
mov bh, 0xff
fsubr dword [rax]
add byte [rax], al
in al, 0xb7
clc
sub byte [rax], al
add byte [rdx - 0x48], cl
lcall [rax]
sub dword [rax], eax
add byte [rax - 0x48], bl
cmp byte [rcx], ch
add byte [rax], al
mov bh, byte [rax + 0x2958ffff]
add byte [rax], al
mov esp, 0x78ffffb8
sub dword [rax], eax
add byte [rdx], bl
mov ecx, 0x2998ffff
add byte [rax], al
sub byte [rcx + 0x29b8ffff], bh
add byte [rax], al
mov ecx, 0x29d8ffff
add byte [rax], al
pop rsp
mov ecx, 0x29f8ffff
add byte [rax], al
jbe 0x40a7bf
lcall [rax]
sub al, byte [rax]
add byte [rcx + rdi*4 + 0x2a38ffff], dl
add byte [rax], al
movabs byte [0xb000002a58ffffb9], al
mov ecx, 0x2a78ffff
add byte [rax], al
retf -0x47
lcall [rax - 0x1bffffd6]
mov ecx, 0x2ab8ffff
add byte [rax], al
mov ecx, 0x2ad8ffff
add byte [rax], al
sbb byte [rdx + 0x2af8ffff], bh
add byte [rax], al
movabs rdx, 0xba6600002b18ffff
cmp byte [rbx], ch
add byte [rax], al
mov edx, 0x2b58ffff
add byte [rax], al
sar byte [rdx + 0x2b80ffff], cl
add byte [rax], al
loopne 0x40a820
jmp qword [rax + 0x6f00002b]
mov ebx, 0x2bc8ffff
add byte [rax], al
jge 0x40a831
call 0xffffffff9740a8a8
mov ebx, 0x2c08ffff
add byte [rax], al
mov cl, 0xbb
ljmp [rax]
sub al, 0
add ah, cl
mov ebx, 0x2c48ffff
add byte [rax], al
out 0xbb, al
ljmp [rax + 0x2c]
add byte [rax], al
mov esp, 0x2c88ffff
add byte [rax], al
movabs rsp, 0xbc5600002ca8ffff
dec eax
sub al, 0
add byte [rax - 0x44], dh
call 0xffffffff8a40a8e9
mov esp, 0x2d08ffff
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
mov esp, 0x2d28ffff
add byte [rax], al
sar dword [rdi + rdi*8 + 0x2d48ff], 0
iretd
mov esp, 0x2d68ffff
add byte [rax], al
jmp 0xffffffff8940a89d
sub eax, 0xbd030000
ljmp [rax + 0x1e00002d]
mov ebp, 0x2dc8ffff
add byte [rax], al
cmp al, 0xbd
call 0xffffffffc940a92a
mov ebp, 0x2e10ffff
add byte [rax], al
movabs rsi, 0xbec600002e38ffff
jmp qword [rax + 0x2e]
add byte [rax], al
mov edi, 0x2e88ffff
add byte [rax], al
mov dh, 0xbf
push qword [rax - 0x3bffffd2]
mov edi, 0x2ed0ffff
add byte [rax], al
cmp eax, eax
push rax
add byte cs:[rax], al
sar r15b, 0xff
adc byte [rdi], ch
add byte [rax], al
mov esp, 0x30ffffc0
add byte [rax], al
retf -0x40
call qword [rax + 0x2f]
add byte [rax], al
in al, 0xc0
push qword [rax + 0x2f]
add byte [rax], al
inc al
call qword [rax + 0x1800002f]
sar edi, -1
mov al, 0x2f
add byte [rax], al
sar edi, -1
shr byte [rdi], 1
add byte [rax], al
sar edi, -1
add byte [rax], al
cld
sar edi, -1
adc byte [rax], dh
add byte [rax], al
add al, ah
cmp byte [rax], dh
add byte [rax], al
jmp qword [rax + 0x30]
add byte [rax], al
inc dword [rax - 0x7fffffd0]
jmp qword [rax - 0x2fffffd0]
dec eax
xor byte [rax], al
add dh, bl
call 0x840a9dd
dec dword [rax]
xor dword [rax], eax
add byte [rdx - 0x3b], al
ljmp [rax]
xor dword [rax], eax
add byte [rdi + rax*8], ch
call qword [rax + 0x31]
add byte [rax], al
push qword [rax + 0x31]
add byte [rax], al
pop rax
call qword [rax - 0x2fffffcf]
mov eax, 0xfd000031
fdiv dword [rcx]
add byte [rax], al
or ecx, eax
clc
xor dword [rax], eax
add byte [rax + rcx*8], bh
lcall [rax]
xor al, byte [rax]
add byte [rdi + 0x38ffffc8], cl
xor al, byte [rax]
add ah, bl
enter -1, 0x60
xor al, byte [rax]
add byte [rdx - 0x77000037], ah
xor al, byte [rax]
add byte [rcx + rcx*8 + 0x32a8ffff], bh
add byte [rax], al
cli
leave
dec eax
xor al, byte [rax]
add byte [rsi], dl
retf -1
call 0x4c40aa57
retf -1
or byte [rbx], dh
add byte [rax], al
ret 0xffca
push qword [rax]
xor eax, dword [rax]
add byte [rdx], al
retf
call qword [rax + 0x33]
add byte [rax], al
jp 0x40aa09
js 0x40aa75
add byte [rax], al
retf
lcall [rax + 0x34000033]
int3
mov eax, 0x98000033
int3
fdiv dword [rbx]
add byte [rax], al
int 0xff
clc
xor eax, dword [rax]
add byte [rbp + rcx*8 - 1], bl
lcall [rax]
xor al, 0
add byte [rsi + 0x38ffffcd], al
xor al, 0
add byte [rdx - 0x32], dh
jmp qword [rax + 0x34]
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
inc dword [rax - 0x6ffffcc]
ljmp [rax + 0x24000034]
iretd
dec eax
xor al, 0
add byte [rdx - 0x31], ah
call 0x7e40aad1
iretd
dec dword [rax]
xor eax, 0xcfb30000
ljmp [rax]
xor eax, 0xcfda0000
dec dword [rax + 0x35]
add byte [rax], al
sar dil, 1
js 0x40aaef
add byte [rax], al
cmp dl, cl
jmp qword [rax + 0x6e000035]
sar edi, 1
inc eax
xor eax, 0xd1940000
jmp rax
xor eax, 0xd1e80000
dec dword [rax]
add byte ss:[rax], al
sar bh, cl
ljmp [rax]
add byte ss:[rax], al
sar bh, cl
dec dword [rax + 0x36]
add byte [rax], al
sar bh, cl
ljmp [rax + 0x36]
add byte [rax], al
mov ch, 0xd2
dec dword [rax - 0x30ffffca]
sar bh, cl
ljmp [rax + 0x28000036]
sar edi, cl
call rax
add byte ss:[rax], al
fcmovnbe st(0), st(3)
clc
add byte ss:[rax], al
sub al, 0xd4
lcall [rax]
add byte [rax], al
cmp byte [rdi], dh
add byte [rax], al
push rbx
lcall [rax + 0x37]
add byte [rax], al
js 0x40ab69
add byte [rax], al
loopne 0x40ab0a
lcall [rax + 0x46000037]
mov eax, 0xa2000037
fdiv dword [rdi]
add byte [rax], al
out dx, al
clc
add byte [rax], al
int3
lcall [rax]
cmp byte [rax], al
add dh, dh
cmp byte [rax], bh
add byte [rax], al
sbb bh, dl
lcall [rax + 0x38]
add byte [rax], al
xlatb
js 0x40abaa
add byte [rax], al
insd dword [rdi], dx
xlatb
lcall [rax - 0x4affffc8]
xlatb
mov eax, 0xe6000038
xlatb
fdivr dword [rax]
add byte [rax], al
or al, 0xd8
clc
cmp byte [rax], al
add byte [rax], ch
fdivr st(7)
lcall [rax]
cmp dword [rax], eax
add byte [rbx], dh
fdivr st(7)
cmp byte [rcx], bh
add byte [rax], al
fdivr st(7)
lcall [rax + 0x39]
add byte [rax], al
fdivr st(7)
js 0x40abeb
add byte [rax], al
mov edx, 0x98ffffd8
cmp dword [rax], eax
add dh, dl
fdivr st(7)
mov eax, 0xbe000039
fcos
jmp rax
cmp dword [rax], eax
add al, ah
fcos
inc dword [rax]
cmp al, byte [rax]
add byte [rdx], cl
jmp qword [rax]
cmp al, byte [rax]
add byte [rdx - 0x26], dl
inc dword [rax + 0x3a]
add byte [rax], al
test dl, bl
jmp qword [rax + 0x3a]
add byte [rax], al
movabs dword [0xb100003a80ffffda], eax
jmp qword [rax - 0x34ffffc6]
inc eax
cmp al, byte [rax]
add ah, bh
jmp rax
cmp al, byte [rax]
add byte [rsi + 0x8ffffdb], dl
cmp eax, dword [rax]
add byte [rdx + 0x28ffffdb], ah
cmp eax, dword [rax]
add dh, al
dec dword [rax + 0x3b]
add byte [rax], al
mov ah, 0xdc
ljmp [rax + 0x3b]
add byte [rax], al
imul ebx, edi, -1
dec dword [rax - 0x4fffffc5]
ljmp [rax - 0x35ffffc5]
dec eax
cmp eax, dword [rax]
add al, bl
call 0x1a40ac88
loopne 0x40ac4e
dec dword [rax]
cmp al, 0
add byte [rax], dh
ljmp [rax]
cmp al, 0
add byte [rbp - 0x20], ah
dec dword [rax + 0x3c]
add byte [rax], al
sahf
loopne 0x40ac66
ljmp [rax + 0x3c]
add byte [rax], al
stosb byte [rdi], al
loopne 0x40ac6e
dec dword [rax - 0x32ffffc4]
loopne 0x40ac76
ljmp [rax - 0x24ffffc4]
loopne 0x40ac7e
dec eax
cmp al, 0
add dh, dh
loopne 0x40ac86
call 0x440acc9
loope 0x40ac8e
dec dword [rax]
cmp eax, 0xe11e0000
ljmp [rax]
cmp eax, 0xe12c0000
dec dword [rax + 0x3d]
add byte [rax], al
push rsi
loope 0x40aca6
ljmp [rax + 0x3d]
add byte [rax], al
nop
loope 0x40acae
dec dword [rax - 0x49ffffc3]
loope 0x40acb6
ljmp [rax - 0x23ffffc3]
loope 0x40acbe
dec eax
cmp eax, 0xe2430000
call 0x5240ad0a
loop 0x40acce
dec dword [rax]
add byte ds:[rax], al
lodsd eax, dword [rsi]
loop 0x40acd6
ljmp [rax]
add byte ds:[rax], al
mov esp, 0x48ffffe2
add byte ds:[rax], al
in eax, dx
loop 0x40ace6
ljmp [rax + 0x3e]
add byte [rax], al
or bl, ah
dec dword [rax + 0x1600003e]
jrcxz 0x40acf6
ljmp [rax + 0x5800003e]
jrcxz 0x40acfe
dec eax
add byte ds:[rax], al
jb 0x40ace9
call 0xffffffffa440ad4b
jrcxz 0x40ad0e
dec dword [rax]
add byte [rax], al
in al, 0xff
push qword [rax]
add byte [rax], al
cmp eax, 0x50ffffe5
add byte [rax], al
mov ah, ch
js 0x40ad69
add byte [rax], al
cwde
in eax, 0xff
lcall [rax - 0x39ffffc1]
in eax, 0xff
mov eax, 0xda00003f
in eax, 0xff
fdivr dword [rdi]
add byte [rax], al
xchg esi, esp
inc dword [rax]
add byte [rax], al
movabs byte [0xb000004020ffffe6], al
out 0xff, al
inc dword [rax + 0x40]
add byte [rax], al
loop 0x40ad44
jmp qword [rax + 0x40]
add byte [rax], al
adc al, 0xe7
inc dword [rax + 0x45000040]
out 0xff, eax
jmp qword [rax - 0x21ffffc0]
out 0xff, eax
dec eax
add byte [rax], al
hlt
out 0xff, eax
call 0x4c40adc5
call 0x4149ad89
add byte [rax], al
call 0x4169ad91
add byte [rax], al
jmp 0x4191ad99
add byte [rax], al
je 0x40ad87
push qword [rax + 0x41]
add byte [rax], al
pushfq
jmp 0x41d1ada9
add byte [rax], al
mov esp, 0xb0ffffe9
add byte [r8], al
int 0xe9
call rax
add byte [r8], al
fucomi st(1)
push rax
add byte [r8], al
and al, 0xea
call qword [rax]
add byte [rax], al
push qword [rax]
add byte [rax], al
pop rbx
call qword [rax + 0x42]
add byte [rax], al
enter -0x16, -1
js 0x40ae24
add byte [rax], al
sti
lcall [rax + 0x24000042]
jmp 0x40adee
mov eax, 0x44000042
jmp 0x40adf6
fadd dword [rdx]
add byte [rbp - 0x15], dl
clc
add byte [rax], al
movsxd rbp, ebx
lcall [rax]
add byte [r8], al
lodsb al, byte [rsi]
jmp 0x40ae0e
cmp byte [rbx], al
add dh, ah
jmp 0x40ae16
lcall [rax + 0x43]
add byte [rax], al
bnd jmp 0x40ae1e
js 0x40ae65
add byte [rax], al
jmp 0x40ae26
lcall [rax + 0x45000043]
in al, dx
mov eax, 0x7e000043
in al, dx
fadd dword [rbx]
add byte [rax - 0x7000014], dl
add byte [r8], al
in eax, dx
jmp qword [rax]
add byte [rax], r8b
in eax, dx
inc dword [rax + 0x44]
add byte [rax], al
push rsi
in eax, dx
jmp qword [rax + 0x44]
add byte [rax], al
int3
out dx, al
call qword [rax + 0x15000044]
out dx, eax
push qword [rax + 0x6e000044]
out dx, eax
call rax
add byte [rax], r8b
mov gs, edi
push rax
add byte [rax], r8b
test eax, 0x10ffffef
add byte [r8], r8b
out 0xef, al
push qword [rax]
add byte [r8], r8b
and dh, al
lcall [rax + 0x45]
add byte [rax], al
js 0x40aedf
add byte [rax], al
outsb dx, byte [rsi]
lcall [rax - 0x75ffffbb]
mov eax, 0xa6000045
fadd dword [rbp]
add byte [rax + 0xfffff1], dl
add byte [rax], r8b
scasb al, byte [rdi]
int1
jmp qword [rax]
add byte [rax], r8b
mov edx, 0x40fffff1
add byte [rax], r8b
int1
jmp qword [rax + 0x46]
add byte [rax], al
int1
inc dword [rax + 0x1a000046]
jmp qword [rax + 0x48000046]
inc eax
add byte [rax], r8b
pop rdx
jmp rax
add byte [rax], r8b
push -0xe
inc dword [rax]
add byte [r8], r8b
jbe 0x40aef0
jmp qword [rax]
add byte [r8], r8b
mov ah, 0xf2
inc dword [rax + 0x47]
add byte [rax], al
sal dl, 0xff
jmp qword [rax + 0x47]
add byte [rax], al
fdivr st(2), st(0)
inc dword [rax + 0xe000047]
jmp qword [rax + 0x2c000047]
inc eax
add byte [r8], r8b
jmp rax
add byte [r8], r8b
mov dl, 0xf3
inc dword [rax]
add byte [rax], al
jmp qword [rax]
add byte [rax], al
cld
inc dword [rax + 0x48]
add byte [rax], al
hlt
jmp qword [rax + 0x48]
add byte [rax], al
hlt
dec dword [rax + 0x78000048]
hlt
ljmp [rax - 0x79ffffb8]
hlt
dec eax
add byte [rax], al
mov al, 0xf4
call 0xffffffffcc40afbd
hlt
dec dword [rax]
add byte [r8], al
clc
hlt
ljmp [rax]
add byte [r8], al
cmc
dec dword [rax + 0x49]
add byte [rax], al
cmc
ljmp [rax + 0x49]
add byte [rax], al
test al, 0xf5
ljmp [rax - 0xbffffb7]
cmc
dec eax
add byte [r8], al
sbb dh, dh
call 0x5a40aff6
idiv bh
call qword [rax]
add byte [rax], al
idiv bh
push qword [rax]
add byte [rax], al
and al, 0xf7
call qword [rax + 0x4a]
add byte [rax], al
idiv edi
push qword [rax + 0x4a]
add byte [rax], al
mov bh, dh
lcall [rax - 0x5dffffb6]
idiv edi
mov eax, 0xc800004a
idiv edi
fmul dword [rdx]
add byte [rsi], cl
clc
clc
add byte [rax], al
sbb al, 0xf8
lcall [rax]
add byte [r8], al
clc
cmp byte [rbx], cl
add byte [rax + rdi*8 - 1], bl
lcall [rax + 0x4b]
add byte [rax], al
jbe 0x40affe
js 0x40b055
add byte [rax], al
movabs al, byte [0x1000004bb8fffff8]
stc
inc dword [rax]
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x40b03f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
shr byte [rbx - 1], 0xff
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x40b06f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
shl byte [rdi - 1], 1
push qword [rax + 3]
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rip + 0x3bffff76], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jbe 0x40b0b7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rax], ch
jbe 0x40b0ba
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
sbb dh, byte [rsi - 1]
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add dh, bh
imul edi, edi, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add ah, dh
imul edi, edi, -1
and eax, 0
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
stc
imul edi, edi, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 1
add byte [rax], al
or byte [rdi + rdi*8 - 1], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
insb byte [rdi], dx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rcx], dl
insb byte [rdi], dx
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword fs:[rax], eax
add byte [rbx], bl
insb byte [rdi], dx
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x40b1d7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], al
add byte [rax], al
sub dh, byte [rbp - 1]
jmp qword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add byte [rbx + 0x75], ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], eax
add byte [rbp + 0x75], dh
lcall [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 1
add byte [rax], al
insd dword [rdi], dx
jne 0x40b23a
lcall [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 2
add byte [rax], al
push 0x75
call qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 2
add byte [rax], al
jne 0x40b27a
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rdx + 0x75], ch
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insd dword [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rbp + rsi*2 - 1], bh
jmp qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
xor byte [rbp - 1], 0xff
add byte es:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rsi + 0x53ffff75], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, byte [rax]
add byte [rdx + 0x1fffff75], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 2
add byte [rax], al
mov edx, 0x1bffff75
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 3
add byte [rax], al
mov dh, 0x75
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x40b377
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
jne 0x40b37a
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8d, dword [rax]
add ah, bl
jne 0x40b39a
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
add eax, dword fs:[rax]
add dl, ch
jne 0x40b3ba
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], al
add byte [rax], al
push -1
dec dword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add byte [rdx], ch
push -1
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rcx], bl
push -1
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40b437
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 3
add byte [rax], al
push -1
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 4
add byte [rax], al
cmp eax, 0xeffff6a
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 4
add byte [rax], al
jne 0x40b47a
dec dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0
add byte [rbp + rsi*2 - 1], dh
call qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0
add byte [rdx + 0x28ffff75], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], al
add byte [rdx + 0x17ffff75], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, 0
add byte [rcx + 0x17ffff75], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rax + 0x17ffff75], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 4
add byte [rax], al
cwde
jne 0x40b53a
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 5
add byte [rax], al
cwde
jne 0x40b55a
call rdi
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
int 0xc
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 5
add byte [rax], al
jbe 0x40b582
ljmp [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add rax, 0x76900000
cmp eax, 0
adc byte [rsi + 0x60d4302], al
js 0x40b5bf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x40b5d9
add esi, dword [rax]
sbb eax, dword [rax]
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
jbe 0x40b5e2
push qword [rdi]
add byte [rax], al
add byte [rsp + rcx*4], al
in eax, dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jb 0x40b603
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rsi + 0x3bffff76], bl
add dword [rax], eax
add byte [rax + rdx*4], al
in eax, dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
xor dword [rcx], eax
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rip + 0x77b20000]
dec dword [rdx]
adc byte [rsi + 0x60d4302], al
add al, byte [rbp + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
cld
add eax, 0x781c0000
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 6
add byte [rax], al
pop rax
js 0x40b672
fadd qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, bh
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 6
add byte [rax], al
adc al, 0x79
cmp eax, dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add esi, dword [rsi]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
xor byte [rdx - 1], bh
inc dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x40b6cf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40b6d4
add byte [rax], al
push rdx
jp 0x40b6d2
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
pop rax
jp 0x40b6f2
dec dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x88000006
jp 0x40b712
dec dword [rcx + 1]
adc byte [rsi + 0x60d4302], al
add eax, dword [rcx + rax + 0x8070c]
and al, 0
add byte [rax], al
fadd qword [rsi]
add byte [rax], al
bnd jnp 0x40b732
call qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 7
add byte [rax], al
sbb al, 0x7c
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 7
add byte [rax], al
push rdx
jl 0x40b77a
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
jl 0x40b79a
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
push 0x36ffff7c
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jno 0x40b7d7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdi], al
add byte [rax], al
jle 0x40b856
dec dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
movabs al, byte [0x4bffff7c]
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
add byte [rax], al
int3
jl 0x40b822
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
add byte [rax], al
cli
jl 0x40b842
cmp eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jbe 0x40b85f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rsi], dl
jge 0x40b862
ljmp [rcx]
add byte [rax], al
add al, 0x9f
in eax, dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 8
add byte [rax], al
pop rax
jge 0x40b88a
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or byte [rax], al
add byte [rsi + 0x7d], bl
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40b8ce
add byte [rax], al
jb 0x40b947
cmp al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jne 0x40b8e7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 3
add byte [rax], al
jge 0x40b8ea
inc dword [rdi]
add byte [rax], al
add al, 0xa3
in eax, dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xac000008
jge 0x40b912
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rax]
add byte [rax], al
mov dl, 0x7d
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
or byte [rax], al
add dh, ah
jge 0x40b952
jp 0x40b956
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 9
add byte [rax], al
jle 0x40b972
jmp qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rax + 0x7e], cl
lcall [rdi]
or dword [rax], eax
add byte [rdi], al
in eax, dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
adc cl, byte [rcx]
or al, 7
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
cld
add eax, dword [rax]
add byte [rax - 0x79], al
mov edi, 0x4000000
mov esi, 0x410040ed
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov ch, 0xc
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 4
add byte [rax], al
fadd dword [rdi + 0x8bffff]
add byte [rax], al
add al, 0xd0
in eax, dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x7f
or al, 7
or byte [rax], al
and al, 0
add byte [rax], al
add al, 0
add byte [rbx + 0x5affff64], bl
add dword [rax], eax
add byte [rax], al
in eax, dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x4e
add dword [rdi + rax], ecx
or byte [rax + rax], bl
add byte [rax], al
fmul qword [rcx]
add byte [rax], al
int 0x65
inc dword [rax]
adc byte [rsi + 0x60d4302], al
add bh, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
xchg eax, esp
add al, 0
add byte [rip - 0x3500009a], ch
add dword [rax], eax
add byte [rcx + rdi*8], al
in eax, dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rax + rax], 0
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0xcf000004
jmp qword [rax]
add dword [rax], eax
add byte [rsi + rdx], al
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rax + rax], 0
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 4
add byte [rax], al
push 0x28dffff
add byte [rax], al
add al, 0x2d
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], -0x7f
add cl, byte [rdi + rax]
or byte [rax + rax], bl
add byte [rax], al
je 0x40bad0
add byte [rax], al
jnp 0x40ba51
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or al, byte [rax]
add byte [rcx - 0x79], ch
jnp 0x40baee
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 0xa
add byte [rax], al
xchg edi, edi
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, byte [rax]
add dh, cl
xchg edi, edi
push qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jb 0x40bb47
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
or al, byte [rax]
add ch, ah
xchg edi, edi
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xb
add byte [rax], al
or dword [rax + 0x35ffff], ecx
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jo 0x40bb8f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0xb
add byte [rax], al
mov bh, bh
jmp qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, dword fs:[rax]
add byte [rbp - 0x78], bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], cl
add byte [rax], al
mov r15b, dil
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or eax, dword [rax]
add byte [rbp - 0x78], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, dword [rax]
add byte [rdi], bh
mov bh, bh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 0xb
add byte [rax], al
cmp cl, byte [rax + 0x5affff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0xc
add byte [rax], al
insb byte [rdi], dx
mov bh, bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xc
add byte [rax], al
pop rdx
mov bh, bh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0
add byte [rax + rcx*4 - 1], dl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
or al, 0
add byte [rsi - 0x78], cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rax + rax], cs
add byte [rax - 0x78], cl
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xc
add byte [rax], al
jp 0x40bc92
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
or al, 0
add byte [rax - 0x78], ch
call 0x40bd31
adc byte [rsi + 0x60d4302], al
pop qword [r11]
mov es, word [rcx*4 - 0x7cf973fb]
add dl, dh
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xd
add byte [rax], al
and byte [rcx + 0x29ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xd
add byte [rax], al
sub cl, byte [rcx + 0x2bffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, 0x89350000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, 0x89230000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rip - 0x76ef0000], cl
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or eax, 0x89410000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
or eax, 0x89300000
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
or eax, 0x891c0000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0xe
add byte [rax], al
sbb byte [rcx + 0x1bffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xe
add byte [rax], al
adc al, 0x89
ljmp [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
and byte [rcx + 0x1affff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
sbb cl, byte [rcx + 0x3cffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
mov word [rsi], cs
add byte [rax], al
mov edi, edi
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
mov edi, edi
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
mov edi, edi
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
mov edi, edi
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x78
or al, 7
or byte [rax + rax], bl
add byte [rax], al
or al, 0xf
add byte [rax], al
cmp byte [rcx + 0xeffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xf
add byte [rax], al
mov edi, edi
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
adc al, 0x89
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sldt word [rax]
adc al, 0x89
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], cs
add byte [rax], al
mov edi, edi
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sldt word [rax]
xor byte [rcx + 0x53ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
int3
sldt word [rax]
mov edi, edi
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
sldt word [rax]
mov cl, byte [rcx + 0x4dffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 0x10
add byte [rax], al
mov bh, 0x89
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x10
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
mov edi, edi
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
adc byte [rax], al
add byte [rdi + 0x1affff89], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40c0d6
add byte [rax], al
cdq
mov edi, edi
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
adc byte [rax], al
add byte [rcx + rcx*4 + 0x5affff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
or eax, dword [rax]
add dh, al
mov edi, edi
lcall [rbx]
add byte [rax], al
add byte [rsi + rbx*2], al
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x10
add byte [rax], al
mov ecx, 0xeffff89
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x11
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
mov edi, edi
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x11
add byte [rax], al
xchg eax, ebp
mov edi, edi
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc dword [rax], r8d
add byte [rbx - 0x52000077], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c9f02
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc dword [rax], eax
add byte [rax], cl
mov bh, bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], ss
add byte [rax], al
test byte [rcx + 0xeffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc dword [rax], eax
add ah, ah
mov edi, edi
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc dword [rax], eax
add ah, ah
mov edi, edi
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc dword [rax], eax
add dh, dh
mov edi, edi
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x12
add byte [rax], al
add byte [rdx + 0x53ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sub al, 0x12
add byte [rax], al
xor al, 0x8a
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
adc al, byte [rax]
add byte [rdx - 0x76], bl
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x40c2d8
add byte [rax], al
xchg dword [rdx + 0xeffff], ecx
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
adc al, byte [rax]
add byte [rbp - 0x76], dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x12
add byte [rax], al
outsd dx, dword [rsi]
mov bh, bh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, byte [rax]
add byte [rcx - 0x76], ch
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
adc al, byte [rax]
add byte [rdx + rcx*4 - 1], ah
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x13
add byte [rax], al
xchg eax, esi
mov bh, bh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x13
add byte [rax], al
nop
mov bh, bh
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc eax, dword [rax]
add byte [rax + 0x1affff8a], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40c3e1
add byte [rax], al
mov cl, byte [rdx + 0xeffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc eax, dword [rax]
add byte [rax - 0x76], bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x66000013
mov bh, bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rbx]
add byte [rax], al
push rsp
mov bh, bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
adc eax, dword [rax]
add byte [rdx - 0x76], al
ljmp [rcx]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c9b02
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x14
add byte [rax], al
ret
mov bh, bh
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0
add bl, cl
mov bh, bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0
add byte [rcx - 0x6c000076], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], ss
add byte [rbx + rcx*4], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc al, 0
add byte [rdx], dl
mov edi, edi
call qword [rbx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0
add byte [rbp - 0x75], bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
adc al, 0
add byte [rbx - 0x75], ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0x15
add byte [rax], al
pop rcx
mov edi, edi
call qword [rbx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0x15
add byte [rax], al
mov edi, edi
lcall [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc eax, 0x8bf80000
lcall [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rip - 0x73d40000], ss
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc eax, 0x8c260000
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc eax, 0x8c3a0000
dec dword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0x8070c]
add byte [rax + rax], ah
add byte [rax], al
test byte [rax], dl
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
lcall [rbx]
add byte [rax], al
add byte [rdx], al
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc byte [rax], al
add byte [rdx + 0x44ffff8c], bl
add byte [rax], al
add byte [rsi], al
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x40c68b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x16
add byte [rax], al
mov dh, 0x8c
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
inc dword [rdx]
adc byte [rsi + 0x60d4302], al
add bh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x40c6e4
add byte [rax], al
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
add byte [rax], al
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x5a000016
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
fcom qword [rsi]
add byte [rax], al
jbe 0x40c6bf
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
jbe 0x40c6df
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x17
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0x17
add byte [rax], al
push rbp
call qword [rbx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
ror byte [rbp + 0x7bffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rdi], dl
add byte [rax], al
sbb ecx, dword [rsi + 0x1affff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
adc eax, 0x58ffff8e
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
cmp eax, 0
adc byte [rsi + 0x60d4302], al
js 0x40c85f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x18
add byte [rax], al
pop rsp
dec dword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x18
add byte [rax], al
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb byte [rax], r8b
add byte [rcx - 0x72], bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb byte [rax], al
add byte [rdi - 0x72], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax], ds
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb byte [rax], al
add byte [rbx], bh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb byte [rax], al
add byte [rsi], dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb byte [rax], al
add byte [rax], dh
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x68
or al, 7
or byte [rax + rax], bl
add byte [rax], al
or al, 0x19
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x19
add byte [rax], al
xor byte [rsi + 0x1affff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb qword [rax], r8
add byte [rdx], ch
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb dword [rax], eax
add byte [rsi + rcx*4], ah
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], ds
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb dword [rax], eax
add byte [rax], bl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
int3
sbb dword [rax], eax
add byte [rdx], ch
jmp rsi
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop qword [r11]
mov es, word [rcx*4 - 0x7cf973fb]
add dl, ah
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sbb dword [rax], eax
add al, ah
jmp qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x1a
add byte [rax], al
in al, 0x8e
jmp qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0x1a
add byte [rax], al
sub cl, byte [rdi + 0xeffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb al, byte [rax]
add byte [rax], bl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40cae8
add byte [rax], al
sub cl, byte [rdi + 0x31ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sbb al, byte [rax]
add byte [rdi + rcx*4], bh
lcall [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x7a00001a
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rdx]
add byte [rax], al
push 0x1affff8f
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sbb al, byte [rax]
add byte [rdx - 0x71], ah
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x1b
add byte [rax], al
pop rsp
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x1b
add byte [rax], al
push rsi
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb eax, dword [rax]
add byte [rdi + rcx*4 - 1], dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40cbe9
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sbb eax, dword [rax]
add byte [rax], dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x2a00001b
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rbx]
add byte [rax], al
and al, 0x8f
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sbb eax, dword [rax]
add byte [rsi], bl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x1c
add byte [rax], al
sbb byte [rdi + 0x31ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x1c
add byte [rax], al
sub cl, byte [rdi + 0x1bffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb al, 0
add byte [rsi], ah
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0x17
add byte [rax], al
and cl, byte [rdi + 0x50ffff]
add byte [rax], al
add al, 0x6a
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sbb al, 0
add byte [rdx - 0x71], cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0
add byte [rax], bh
dec dword [rdi]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x7d
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb al, 0
add byte [rdi + 0xeffff8f], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1d
add byte [rax], al
lea ecx, [rdi + 0x1affff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1d
add byte [rax], al
xchg dword [rdi + 0x1affff], ecx
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb rax, -0x707f0000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb eax, 0x8f7c0000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rip - 0x708a0000], ds
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb eax, 0x8f860000
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x68
or al, 7
or byte [rax + rax], bl
add byte [rax], al
int3
sbb eax, 0x8f980000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb eax, 0x8f860000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1e
add byte [rax], al
or byte [rdi + 0x1affff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1e
add byte [rax], al
jp 0x40ce11
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
je 0x40ce31
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
jno 0x40ce51
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rsi], ds
add byte [rax], al
pop rdi
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
pop rcx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
push rbx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 0x1f
add byte [rax], al
dec dword [rbp]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x7f
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0x1f
add byte [rax], al
mov cl, 0x8f
inc dword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x78
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
add byte [rax], al
nop
js 0x40cfb6
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdi], bl
add byte [rax], al
pop rsi
nop
js 0x40cfde
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
scasb al, byte [rdi]
nop
js 0x40d006
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
nop
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
in al, dx
nop
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 0x20
add byte [rax], al
xchg eax, r9d
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x20
add byte [rax], al
xchg eax, ecx
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
and byte [rax], al
add byte [rcx + rdx*4 + 0xeffff], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40d0e6
add byte [rax], al
jb 0x40d05b
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
and byte [rax], al
add byte [rcx + rdx*4 - 1], ch
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x20
add byte [rax], al
xchg ax, cx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and byte [rax], al
add byte [rax - 0x6f], ah
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
and byte [rax], al
add byte [rsi - 0x6f], bl
lcall [rdi]
adc byte [rsi + 0x60d4302], al
add bl, byte [rdx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
adc al, 0x21
add byte [rax], al
ficom word [rcx + 0x26ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
sbb eax, dword [rax]
add ah, ah
xchg eax, ecx
inc dword [rsi]
add al, byte [rax]
add byte [rax + rsi*2], al
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
cld
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
hlt
sbb eax, dword [rax]
add dl, al
xchg eax, ebx
inc dword [rbp]
add byte [rax], al
add al, 0x98
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rcx], ah
add byte [rax], al
loopne 0x40d16d
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
and dword [rax], eax
add ah, bl
xchg eax, ebx
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
sbb al, 0
add al, bl
xchg eax, ebx
call qword [rax]
add byte [rax], al
add al, 0x9c
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
and dword [rax], eax
add byte [rax], al
xchg eax, esp
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x22
add byte [rax], al
out dx, al
xchg eax, ebx
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x22
add byte [rax], al
clc
xchg eax, ebx
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40d29f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 0x1c
add byte [rax], al
adc dl, byte [rdi + rdi*8 + 0x1eaff]
add byte [rax], al
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
loopne 0x40d2bc
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x40d2e8
add byte [rax], al
xchg eax, ebp
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
and al, byte [rax]
add dl, dl
xchg eax, ebp
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 0x22
add byte [rax], al
rcl byte [rbp + 0x78ffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fsub qword [rdx]
add byte [rax], al
adc byte [rsi + 0x2dffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
and al, byte [rax]
add byte [rip + 0xeffff96], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x23
add byte [rax], al
or edx, dword [rsi + 0x31ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x23
add byte [rax], al
sbb al, 0x96
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
pop rsp
and eax, dword [rax]
add byte [rdi - 0x6a], cl
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rbx], ah
add byte [rax], al
je 0x40d370
inc esi
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov es, word [r11]
lea eax, [rsp + rcx*4]
add eax, 0xb6020683
or al, 7
or byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
and eax, dword [rax]
add byte [rdx], dl
xchg eax, edi
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and eax, dword [rax]
add byte [rdi + rdx*4], cl
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40d43f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
and eax, dword [rax]
add byte [rdx], ch
xchg eax, edi
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x24
add byte [rax], al
xchg eax, edi
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40d47f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0x24
add byte [rax], al
cmp al, 0x97
push qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
and al, 0
add byte [rdx + 0x3fffff97], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x40d4c7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x40d4ea
add byte [rax], al
stosb byte [rdi], al
xchg eax, edi
js 0x40d4ce
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
and al, 0
add dl, bh
xchg eax, edi
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x36000024
cwde
lcall [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fsub qword [rax + rax]
add byte [rax + rbx*4 - 1], dh
jmp qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
and al, 0
add byte [rax - 0x49000068], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0x25
add byte [rax], al
cqo
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x25
add byte [rax], al
cmp al, 0x99
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
and eax, 0x99460000
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x40d5d3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rip - 0x65f60000], ah
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
and eax, 0x9a1d0000
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and eax, 0x9a490000
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
and eax, 0x9a540000
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40d65f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x26
add byte [rax], al
jb 0x40d5fc
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x26
add byte [rax], al
outsb dx, byte [rsi]
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40d69f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte es:[rax], al
sbb dword [rdx + 0x26ffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
add al, 0x21
add byte [rax], al
mov bl, byte [rdx + 0x73ffff]
add byte [rax], al
add al, 0xc8
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6502
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pushfq
add byte es:[rax], al
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x40d713
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte es:[rax], al
xchg eax, edx
wait
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x26
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
wait
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0x27
add byte [rax], al
lodsb al, byte [rsi]
wait
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x27
add byte [rax], al
fcomp dword [rbx + 0x26ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
ficomp word [rbx + 0x2fffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
out dx, al
wait
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], fs
add byte [rax], al
hlt
wait
call qword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
and eax, 0x1affff9c
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add byte [rax], al
pushfq
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
add byte [rax], al
push rax
pushfq
push qword [rbx]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70ca502
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x28
add byte [rax], al
fistp dword [rdi + rdi*8 + 0x51ff]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0x28
add byte [rax], al
or al, 0x9d
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sub byte [rax], al
add byte [rax], cl
popfq
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40d8f6
add byte [rax], al
pushfq
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
pushfq
sub byte [rax], al
add byte [rdx], al
popfq
lcall [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x40000028
popfq
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fsubr qword [rax]
add byte [rax], al
xchg byte [rbp + 0x5cffff], bl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
sub byte [rax], al
add dl, al
popfq
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0x29
add byte [rax], al
out dx, al
popfq
fiadd word [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, cl
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0x29
add byte [rax], al
lodsb al, byte [rsi]
sahf
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sub dword [rax], eax
add byte [rsi + 0x22ffff9e], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40d9f7
add byte [rax], al
mov eax, 0x2bffff9e
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sub dword [rax], eax
add bl, al
sahf
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xcd000029
sahf
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fsubr qword [rcx]
add byte [rax], al
cmc
sahf
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sub dword [rax], eax
add byte [rsi], al
lahf
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x2a
add byte [rax], al
or al, 0x9f
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x2a
add byte [rax], al
or byte [rdi + 0xbffff], bl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sub al, byte [rax]
add bl, dh
sahf
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
jl 0x40daf8
add byte [rax], al
add dword [rdi + 0x38ffff], ebx
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x40daef
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sub al, byte [rax]
add byte [rdx], bl
lahf
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x1a00002a
lahf
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x40db53
add byte [rax], al
lahf
call 0x440db39
out dx, al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fimul word [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x2b
add byte [rax], al
lahf
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x2b
add byte [rax], al
fcomp dword [rdi + 0x2affff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub r8d, dword [rax]
add dl, ah
lahf
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub eax, dword fs:[rax]
add byte [rdx], cl
movabs al, byte [0x410000000031ffff]
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], ch
add byte [rax], al
sbb al, 0xa0
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sub eax, dword [rax]
add byte [rbx], bl
movabs al, byte [0x41000000000effff]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub eax, dword [rax]
add byte [rcx], cl
movabs al, byte [0x41000000001affff]
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x2b
add byte [rax], al
add esp, dword [rax + 0x31ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0x2c
add byte [rax], al
adc al, 0xa0
lcall [rcx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x73
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x2c
add byte [rax], al
xchg byte [rax + 0xbffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0
add byte [rdx - 0x60], dh
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sub al, 0
add byte [rsi - 0x60], dh
in eax, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ch, al
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rax + rax], gs
add byte [rcx - 1], al
push qword [rdi + 2]
adc byte [rsi + 0x60d4302], al
add esi, dword [rdx + 0x8070c02]
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
sub al, 0
add bl, bl
movabs dword [0x410000000045ffff], eax
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
sub al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sub al, 0
add dl, bh
movabs dword [0x41000000000effff], eax
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x2d
add byte [rax], al
call 0x4340dd08
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jge 0x40dd7f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x2d
add byte [rax], al
or ah, byte [rdi + rdi*8 + 0x1aff]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub rax, -0x5bfc0000
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sub eax, 0xa4150000
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x40dddf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rip - 0x5bd20000], gs
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sub eax, 0xa41a0000
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sub eax, 0xa41d0000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sub eax, 0xa40b0000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x2e
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x2e
add byte [rax], al
hlt
movabs dword [0x41000000001affff], eax
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte cs:[rax], al
out dx, al
movabs dword [0x41000000000effff], eax
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte cs:[rax], al
fsub qword [rbx + 0x29ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rsi], gs
add byte [rax], al
out 0xa3, al
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40deff
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte cs:[rax], al
add byte [rdi + rdi*8 + 0x26ff], ah
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte cs:[rax], al
movsb byte [rdi], byte ptr [rsi]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte cs:[rax], al
or al, 0xa4
jmp qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0x2f
add byte [rax], al
push rbx
movsb byte [rdi], byte ptr [rsi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x2f
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
lcall [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
jge 0x40df46
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
insb byte [rdi], dx
movsb byte [rdi], byte ptr [rsi]
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], gs
add byte [rax], al
jge 0x40df86
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
js 0x40dfa6
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x40e03f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
mov byte [rdi + rdi*8 + 0x1aff], ah
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x30
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0x30
add byte [rax], al
xchg eax, esp
movsb byte [rdi], byte ptr [rsi]
inc dword [rdx]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
js 0x40e0a3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
xor byte [rax], al
add dh, ch
movsb byte [rdi], byte ptr [rsi]
call qword [rdi]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add edx, dword [rdx]
add dword [rdi + rax], ecx
or byte [rax], al
and al, 0
add byte [rax], al
je 0x40e0f6
add byte [rax], al
in eax, 0xa5
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
xor byte [rax], al
add byte [rdx], cl
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xf8000030
movsd dword [rdi], dword ptr [rsi]
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
fdiv qword [rax]
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
sub eax, dword [rax]
add dl, bh
movsd dword [rdi], dword ptr [rsi]
ljmp [rbp + 0x4000000]
call 0x4141224c
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
and al, 0x31
add byte [rax], al
jg 0x40e120
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor dword [rax], r8d
add byte [rdx - 0x5a], bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor dword fs:[rax], eax
add byte [rax - 0x5a], ch
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], dh
add byte [rax], al
jp 0x40e180
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
xor dword [rax], eax
add byte [rsi + 0x31ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
sub al, 0
add byte [rbp - 0x6700005a], bl
add byte [rax], al
add byte [rsp + rax], al
out dx, eax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov cs, word [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
xor dword [rax], eax
add byte [rsi], cl
cmpsd dword [rsi], dword ptr [rdi]
call qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x32
add byte [rax], al
add al, 0xa7
call qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x32
add byte [rax], al
cmp al, 0xa7
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 0x2c
add byte [rax], al
xor byte [rdi + 0xadffff], ah
add byte [rax], al
add al, 0x14
out dx, eax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
je 0x40e2f8
add byte [rax], al
mov dh, 0xa7
jmp qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
xor al, byte [rax]
add ah, bh
cmpsd dword [rsi], dword ptr [rdi]
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x32
add byte [rax], al
add al, 0xa8
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, byte [rax]
add byte [rax + rbp*4], al
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
xor al, byte [rax]
add ch, dh
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x33
add byte [rax], al
jrcxz 0x40e311
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
xor al, 0x33
add byte [rax], al
or al, 0xa8
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
xor eax, dword [rax]
add byte [rax], cl
test al, 0xff
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x40e3f9
add byte [rax], al
add ebp, dword [rax + 0x6dffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
xor eax, dword [rax]
add byte [rax - 0x58], cl
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x5b000033
test al, 0xff
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fdiv qword [rbx]
add byte [rax], al
test al, 0xff
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
xor eax, dword [rax]
add byte [rax + rbp*4 - 1], ah
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x34
add byte [rax], al
push rbp
test al, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x34
add byte [rax], al
test al, 0xff
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
pop rsp
xor al, 0
add byte [rax + rbp*4 - 1], ch
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
jl 0x40e502
add byte [rax], al
xchg byte [rax + 0xbffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
xor al, 0
add byte [rdx - 0x58], dh
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x5e000034
test al, 0xff
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7d
or al, 7
or byte [rax + rax], bl
add byte [rax], al
fdiv qword [rax + rax]
add byte [rbp + 0x39ffffa8], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
cld
xor al, 0
add byte [rsi + 0x11ffffa8], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0x35
add byte [rax], al
nop
test al, 0xff
jmp qword [rbp]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
wait
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor eax, 0xa90e0000
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor eax, 0xa8ff0000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
sbb al, 0x30
add byte [rax], al
out dx, al
test al, 0xff
push qword [rbp + 1]
add byte [rax], al
add al, 0x30
out dx, eax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov es, word [r11]
lea eax, [rsp + rcx*4]
add eax, 0x65030683
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 0x35
add byte [rax], al
xor al, 0xaa
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor eax, 0xaa5d0000
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
xor eax, 0xaa960000
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x36
add byte [rax], al
xchg eax, esi
stosb byte [rdi], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x36
add byte [rax], al
xchg eax, ecx
stosb byte [rdi], al
cmp eax, 0
adc byte [rsi + 0x60d4302], al
js 0x40e6a7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
xor byte [rax], al
add byte [rsi + 0x3bffffaa], ch
add byte [rax], al
add byte [rcx + rcx*2], al
out dx, eax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jbe 0x40e6cb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40e704
add byte [rax], al
ret 0xffaa
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte ss:[rax], al
enter -0x56, -1
add byte es:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xce000036
stosb byte [rdi], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fdiv qword [rsi]
add byte [rax], al
retf -0x56
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
xor dword [rax], eax
add dh, al
stosb byte [rdi], al
jmp 0x440e759
out dx, eax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fisttp word [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x37
add byte [rax], al
mov byte [rbx + 0x1effff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
xchg byte [rbx + 0xbffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
jb 0x40e765
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], dh
add byte [rax], al
pop rbp
stosd dword [rdi], eax
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
push 0x2affffab
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
jb 0x40e7c5
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
in al, 0x37
add byte [rax], al
sub byte [rbx + 0x12ffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x38
add byte [rax], al
jb 0x40e805
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x38
add byte [rax], al
stosd dword [rdi], eax
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp byte [rax], r8b
add byte [rsi - 0x55], cl
cmp eax, 0
adc byte [rsi + 0x60d4302], al
js 0x40e8b7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp byte fs:[rax], al
add byte [rbx + rbp*4 - 1], ch
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], bh
add byte [rax], al
pop rax
stosd dword [rdi], eax
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
cmp byte [rax], al
add byte [rbx + rbp*4 - 1], dl
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insd dword [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp byte [rax], al
add byte [rsi - 0x55], ah
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x38
add byte [rax], al
stosd dword [rdi], eax
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40e957
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x39
add byte [rax], al
jle 0x40e905
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 0x39
add byte [rax], al
stosb byte [rdi], al
stosd dword [rdi], eax
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp dword [rax], r8d
add byte [rsi + 0x26ffffab], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp dword fs:[rax], eax
add byte [rbx + rbp*4 + 0x1affff], dh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rcx], bh
add byte [rax], al
scasb al, byte [rdi]
stosd dword [rdi], eax
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
cmp dword [rax], eax
add ah, dl
stosd dword [rdi], eax
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
cmp dword [rax], eax
add al, cl
stosd dword [rdi], eax
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
cmp dword [rax], eax
add byte [rsi + 0x2affffab], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x3a
add byte [rax], al
shr byte [rbx + 0x1bffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x3a
add byte [rax], al
mov esp, 0x2bffffab
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp r8b, byte [rax]
add al, cl
stosd dword [rdi], eax
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
cmp al, byte [rax]
add dh, dh
stosd dword [rdi], eax
cmp eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jbe 0x40eadf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, byte [rax]
add byte [rdx], dl
lodsb al, byte [rsi]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
cmp al, byte [rax]
add ah, dh
cmp bh, bh
lcall [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
int3
cmp al, byte [rax]
add al, bh
stosd dword [rdi], eax
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
cmp al, byte [rax]
add byte [rsp + rbp*4], ah
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
xor eax, 0xac2a0000
add byte [rax], al
add byte [rsp + rbx*2], al
out dx, eax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x75
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0x3b
add byte [rax], al
lodsb al, byte [rsi]
dec dword [rdi]
adc byte [rsi + 0x60d4302], al
add cl, byte [rdx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
push rsp
cmp eax, dword [rax]
add byte [rdx + 0x3affffac], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jne 0x40ebc7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40ec01
add byte [rax], al
int3
lodsb al, byte [rsi]
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0x36
add byte [rax], al
int3
lodsb al, byte [rsi]
inc dword [rax + rax]
add byte [rax], al
out dx, eax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x40ec0b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xe800003b
lodsb al, byte [rsi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fdivr qword [rbx]
add byte [rax], al
loop 0x40ebde
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
cmp eax, dword [rax]
add al, ch
lodsb al, byte [rsi]
inc dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0x3c
add byte [rax], al
lodsd eax, dword [rsi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x3c
add byte [rax], al
cld
lodsb al, byte [rsi]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
cmp al, 0
add byte [rdx], al
lodsd eax, dword [rsi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40ed0a
add byte [rax], al
cld
lodsb al, byte [rsi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
cmp al, 0
add dh, dh
lodsb al, byte [rsi]
jmp qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x8000003c
cmp edi, edi
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, bl
cmp al, 0
add al, ah
lodsb al, byte [rsi]
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x40ed6a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
and al, 0x3d
add byte [rax], al
or byte [rbp + 0x2ffff], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or esp, esi
add dword [rip - 0x55fffd6b], eax
add al, byte [rip - 0x10000]
add dword [rax], eax
inc dword [rcx]
add bh, bh
inc dword [rcx]
adc ebx, dword [rbp - 0x9f34cff]
adc dword [rax], eax
add dword [rdx], -0x1b
adc dword [rax], eax
mov edx, dword [rdx]
add eax, 0xffff0000
add dword [rsi], ecx
sub al, byte [rip + 0x304b0000]
cdq
add dword [rax], eax
scasb al, byte [rdi]
add dword [rip - 0x10000], eax
add dword [rsp], ecx
add eax, 0x53a0064
push rsp
add byte [rbp + 5], bh
add byte [rax], al
inc dword [rcx]
adc eax, 0x731f
cwde
add dword [rip - 0x44fffd64], eax
add dword [rbx], esp
mov dl, 2
add byte [rbp + 0x1f02], ch
inc dword [rcx]
sbb dword [rax], esi
add eax, 0x53b0000
mov dword [rbx], eax
add byte [rbx + 0x19], ch
mov al, 3
add byte [rsi + 0x39f7001], bh
add dl, bh
add dl, byte [rax]
add bh, bh
inc dword [rcx]
adc esi, dword [rax]
add eax, 0x53b0000
lock add dword [rax], eax
imul esi, dword [rsi], -0x7a
add al, byte [rax]
loope 0x40ee2b
add byte [rax], al
inc dword [rcx]
sub eax, 0x51f
add eax, 0x460004a3
add eax, 0x5560000
mov ecx, 0x56d0004
add byte [rax], al
xchg dword [rcx], eax
add eax, 0xd50004cf
add dword [rdx], ebx
add byte [rax], al
movabs eax, dword [0x4b40004e501de02]
add byte [r8], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add byte [rax], al
add bh, bh
add esp, dword [rip + 0x54601a01]
add byte [rax], al
in eax, 1
sub esp, dword [rbp + 0x2b80103]
cmp al, byte [rax]
add dl, cl
add esp, dword [rcx]
jmp 0x40ee8c
add cl, bh
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x1c221a01]
add byte [rax], al
add dword [rdi], esi
xlatb
add al, byte [rcx]
out 1, al
cmp al, byte [rax]
add byte [rbx + 0x3d04503], cl
add dh, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
or byte [rdi + 5], al
add byte [rdx + 5], r12b
add byte [rax], al
inc dword [rcx]
cmovne ebx, dword [rax + rax]
add byte [rdi + 0x1b60501], al
add bh, dl
add dword [rip - 0x1000000], eax
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x1890173]
or dl, byte [rbx + 0x1a10001]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or dword [rbp + rax + 0x72], ecx
add byte [rdi + 0x501], al
add byte [rax], al
add bh, bh
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x1890173]
or dl, byte [rbx + 0x1a10001]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
adc eax, 0x2c9055a
add byte [rsi + 5], ah
mov eax, 0x1c20002
add eax, 0xde000299
add al, byte [rip - 0x10000]
add dword [rax], eax
inc dword [rcx]
or ebx, dword [rbp + 0x1a40501]
add cl, cl
add dword [rip - 0x10000], eax
add dword [rax], eax
inc dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr byte [rax + rax*2], 1
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4026], dl
add byte [rax], al
add byte [rax + 0x401c], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild word [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rdx + rbx*4 + 0x40], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fdivr st(5)
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
std
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], dl
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x40fed9
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x40ff17
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4012], ch
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x11], bh
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add dl, dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x18], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x18], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x18], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4018], al
add byte [rax], al
add byte [rsi + 0x4018], dl
add byte [rax], al
add byte [rsi + 0x4018], ah
add byte [rax], al
add byte [rsi + 0x4018], dh
add byte [rax], al
add dh, al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x18, al
add byte [rax], al
add byte [rax], al
add dh, dh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb dword es:[rax], eax
add byte [rax], al
add byte [rax], al
sbb dword ss:[rax], eax
add byte [rax], al
add byte [rax], al
sbb dword [rax], r8d
add byte [rax], al
add byte [rax], al
push rsi
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb word [rax], ax
add byte [rax], al
add byte [rax], al
jbe 0x4100c3
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4019], al
add byte [rax], al
add byte [rsi + 0x4019], dl
add byte [rax], al
add byte [rsi + 0x4019], ah
add byte [rax], al
add byte [rsi + 0x4019], dh
add byte [rax], al
add dh, al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
out 0x19, al
add byte [rax], al
add byte [rax], al
add dh, dh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte es:[rax]
add byte [rax], al
add byte [rax], al
sbb al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
sbb r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x410144
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x401a], al
add byte [rax], al
add byte [rsi + 0x401a], dl
add byte [rax], al
add byte [rsi + 0x401a], ah
add byte [rax], al
add byte [rsi + 0x401a], dh
add byte [rax], al
add dh, al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0x1a, al
add byte [rax], al
add byte [rax], al
add dh, dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
sbb r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x4101c5
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x401b], al
add byte [rax], al
add byte [rsi + 0x401b], dl
add byte [rax], al
add byte [rsi + 0x401b], ah
add byte [rax], al
add byte [rsi + 0x401b], dh
add byte [rax], al
add dh, al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0x1b, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x410270
je 0x410279
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x410287
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x410284
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002e000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], dl
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add dl, dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
js 0x41030b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x12], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax + 0x4012], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax], bl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, 0
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x401bf000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rdx + rbx*4 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
movabs al, byte [0x409a]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax - 0x5f], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax], ah
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rbp + rbp*8 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
fdivr st(5)
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x60fde800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add al, dh
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add al, bh
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
jmp qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add al, ch
add dword [rcx], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb eax, dword [rax]
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add al, dh
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], dh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x1c], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x401c], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add al, cl
add ah, byte [rcx]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rcx], al
add byte [rip + 0x60fde800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, dl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
fdivr st(5)
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], dh
add byte [rax], dl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add dh, dh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x409c], ch
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2000001], dl
add byte [rsi], cl
add byte [rbx + 0x40], cl
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rcx + rax], ch
add byte [rax], al
add al, byte [rax]
add byte [rcx], dh
sbb eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x1d], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2000001], al
add byte [rsi], cl
add byte [rdi + 0x401d], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2000001], ch
add byte [rsi], cl
add byte [rcx + 0x401d], ch
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add bl, dl
sbb eax, 0x40
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], cl
add byte [rax], al
add dword [rax], eax
sbb eax, dword [rax]
add rsp, qword [rcx]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rdx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
rcr dword [rdx + 0x40], 0
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add dl, al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000002], bh
add byte [rax], dl
add ah, al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte fs:[rax]
add byte [rcx], al
add byte [rax], dl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], dh
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
leave
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000002], cl
add byte [rax], dl
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000002], bl
add byte [rax], dl
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0xd000100001000002], eax
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000002], ch
add byte [rax], dl
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000002], dh
add byte [rax], dl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdx], 0
add byte [rcx], al
add byte [rax], dl
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax - 0x64], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x409c], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rdx], ah
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add al, al
pushfq
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
add eax, dword [rax]
add byte [rdx], al
add byte [rsi], cl
add ah, dh
and eax, 0x40
add byte [rax], al
pushfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2000003], cl
add byte [rsi], cl
add byte [rax + 0x4026], dl
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000003], ch
add byte [rdx], dl
add byte [rax + 0x40ed], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000003], bh
add byte [rsi], dl
add al, dh
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
add eax, dword [rax]
add byte [rax], al
add byte [rcx], dl
add byte [rax - 0x5f], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add eax, dword [rax]
add byte [rcx], al
add byte [rdi], dl
add al, bh
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
add eax, dword [rax]
add byte [rax], al
add byte [rax + rax], dl
call 0x4169e2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
add eax, dword [rax]
add byte [rax], al
add byte [rax + rax], dl
fdivr st(5)
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000004], al
add byte [rcx], bl
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x62], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax + 0x220000], al
add byte [rax - 0x6d], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add eax, 0x220000
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rax], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000005], al
add byte [rsi], cl
add byte [rcx + 0x43], bh
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdx + 0x22000005], ah
add byte [rsi], cl
add byte [rdx + rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x22000005
add byte [rsi], cl
add byte [rdi], bh
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
and al, byte [rax]
add al, ah
xor eax, 0x40
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + rax*4 + 0x40], bl
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4c], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x44], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], bl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4027], cl
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
and al, byte [rax]
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x22000008
add byte [rsi], cl
add byte [rbx + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x410aaa
add byte [rax], al
and al, byte [rax]
add dl, dh
jne 0x410aeb
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 8
add byte [rax], al
and al, byte [rax]
add bl, al
jne 0x410b03
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rdi*2], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx + 0x220000], ch
add byte [rax + 0x28], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x76], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0xa
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
jo 0x410bab
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x73], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bl
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add al, al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror dword [rbx], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx - 0x75], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rax + rax], ecx
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xc], bh
add byte [rax], al
and al, byte [rax]
add byte [rsp + rcx*2 + 0x40], dh
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add al, al
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
or eax, 0x220000
add bl, cl
mov eax, dword [rax]
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xd], dh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
movabs al, byte [0x18000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rip + 0x220000], ecx
add byte [rax + 0x47], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
or eax, 0x220000
add byte [rcx + rdi*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
or eax, 0x220000
add al, cl
test byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x2200000e
add byte [rsi], cl
add al, ah
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xe], ah
add byte [rax], al
and al, byte [rax]
add ch, dl
add dword [rax], 0
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdi*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rbp + 0xf], dl
add byte [rax], al
and al, byte [rax]
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000f], ah
add byte [rsi], cl
add byte [rbx - 0x74], ch
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
sldt word [rax]
and al, byte [rax]
add byte [rsp + rax*4], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4031], bl
add byte [rax], al
add byte [rcx + 1], cl
add byte [rax], al
add byte [rbx + 0x10], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4045], dl
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x10], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x67], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4057], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x6b], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x11], bl
add byte [rax], al
and al, byte [rax]
add dh, ah
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rcx + 0x22000011], bl
add byte [rsi], cl
add byte [rcx], ah
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
sub eax, 0x40
add byte [rax], al
mov al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x31], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0x12
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x53], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdx], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, bl
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x13], bh
add byte [rax], al
and al, byte [rax]
add ch, ch
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rsi*2 + 0x40], bl
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0x14
add byte [rax], al
and al, byte [rax]
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp - 0x7c], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x14], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x28], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x410f06
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
clc
add dword [rcx], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax + rax], 0xe002200
add byte [rax + 0x4e], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000014], bh
add byte [rsi], cl
add byte [rbx + rbp*2], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
adc eax, 0x220000
add byte [rsp + rdx*4 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000015], bl
add byte [rsi], cl
add byte [rax + 0x46], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
adc eax, 0x220000
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x7000e0022000016], eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add byte [rax], al
and al, byte [rax]
add byte [rcx + rcx*2 + 0x40], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x17], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + rax*4 + 0x40], bl
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
add byte [rax], al
and al, byte [rax]
add ah, dl
add byte gs:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdx + 0x220000], bh
add byte [rsi + 0x4062], ah
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add ch, ah
add byte [rax], al
and al, byte [rax]
add byte [rbx + rcx*4 + 0x40], dl
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x18], bh
add byte [rax], al
and al, byte [rax]
add dl, al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000018], dl
add byte [rsi], cl
add byte [rax + rdx*4], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x2241108d
add byte [rsi], cl
add byte [rsi + 0x35], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4043], ch
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx], ch
add byte [rcx], ah
add byte [rax], dl
add byte [rax], ch
sahf
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x19], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + rdi*2], ah
add byte [rax], al
add byte [rax], al
add byte [rdi + 2], dh
add byte [rax], al
add byte [rcx + rbx + 0x220000], ch
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x27], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1a], dl
add byte [rax], al
and al, byte [rax]
add dh, al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
jne 0x41115b
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x2241117f
add byte [rsi], cl
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200001b], bl
add byte [rsi], cl
add byte [rax - 0x7f], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x4111ad
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4076], dh
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x20000094], bh
add byte [rdx], bl
add al, ch
add dword [rcx], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax + rax], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x408d], dh
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1c], al
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdx*4 + 0x40], bl
add byte [rax], al
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 0x1c
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rcx*4 + 0x40], dl
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rip + 0x220000], bl
add ch, ah
push rsp
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rip + 0x1100001d], ch
add byte [rax], dl
add byte [rax + 0x409a], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0x1d
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4046], ah
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbx + 0x220000], al
add dl, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
sbb eax, 0x220000
add byte [rax], ah
mov byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x405b], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1e], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xdb000e002200001e]
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200001f], cl
add byte [rsi], cl
add byte [rdi + rax*2 + 0x40], dl
add byte [rax], al
sub al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rdi], ds
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
jp 0x41135b
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dl
add byte [rax], al
and al, byte [rax]
add dl, dh
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
loopne 0x4112ea
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x5d], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x20], cl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add dword [rax], 0
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x20], ah
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4090], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x69], al
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4041], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rip + 0x22000021], bl
add byte [rsi], cl
add byte [rax + rbp*2 + 0x40], bl
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rdi + 0x21], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4065], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000021], bl
add byte [rsi], cl
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x405e], cl
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbp + 0x22], dh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
xor byte [rax + 0x40], ah
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000022], cl
add byte [rsi], cl
add byte [rsi - 0x76], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4029], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rbx], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbx*2], dl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbx + 0x23], ah
add byte [rax], al
and al, byte [rax]
add al, bh
cwde
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x7a], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4079], ah
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x24], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsp, dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000024], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x71], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x220000
add byte [rdx + rbx*2], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0x25
add byte [rdx], ah
add byte [rsi], cl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add bh, dl
and eax, 0x220000
add dl, dh
jne 0x4115cb
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0x26
add byte [rax], al
and al, byte [rax]
add byte [rsi + rsi + 0x40], bh
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x26], dl
add byte [rax], al
and al, byte [rax]
add byte [rbx + rdx*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rdi + 0x22000026], cl
add byte [rsi], cl
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
add byte es:[rax], al
and al, byte [rax]
add byte [rdi + 0x4061], dh
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mul dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rax], ah
xchg eax, esi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4c], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x411651
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x57], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x120000], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x22000027
add byte [rsi], cl
add byte [rip + 0x4056], cl
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 0x27
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4050], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rcx*2 + 0x40], ch
add byte [rax], al
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x28], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4060], ch
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
shr dword [rax], 1
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x46], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add ch, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x29], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4057], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x11000029], dl
add byte [rbx], bl
add al, dh
add ah, byte [rcx]
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dh, dh
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbp*2 + 0x40], bl
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rax], dh
sub al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rdi + 0x23], ah
add byte [rax], al
add byte [rax], al
add byte [rbp + 2], cl
add byte [rax], al
add byte [rip + 0x1100002a], dh
add byte [rbx], bl
add byte [rbx + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x5c], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rdx + rbp + 0x220000], ch
add byte [rdx - 0x79], cl
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rsi], dh
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, cl
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200002b], ah
add byte [rsi], cl
add byte [rsi + rdx*4], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dl
cdq
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rcx*2], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbp], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x69], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200002c], cl
add byte [rsi], cl
add byte [rdi + 0x4a], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
sub al, 0
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x409f], ah
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
sub eax, 0x220000
add dh, dl
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub rax, 0x220000
add byte [rax + 0x405a], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp + 0x220000], bl
add byte [rax + 0x5c], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rcx], cl
add byte cs:[rax], al
and al, byte [rax]
add byte [rbp + 0x4086], ch
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and ebp, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4074], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2e], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x405d], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200002e], dl
add byte [rsi], cl
add byte [rcx + rdi*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200002e], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte cs:[rax], al
and al, byte [rax]
add byte [rbx + 0x5e], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2f], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x405a], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2f], bh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
sbb byte [rsi + 0x40], 0
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200002f], dh
add byte [rsi], cl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x66], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rsi], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x6c], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
fnsave dword [rax]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int1
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx], dh
xor dword [rax], eax
add byte [rcx], dl
add bl, byte [rdx]
add al, dh
add dword [rcx], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword ds:[rax], eax
add byte [rdx], ah
add byte [rsi], cl
add ah, cl
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000031], ch
add byte [rsi], cl
add byte [rdi], bh
je 0x411a63
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rcx*4 + 0x40], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rdx], esi
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x402a], bh
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rsi], bh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
sahf
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x32], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x73], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sal dword [rdx], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
xor al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add al, bh
lahf
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000033], cl
add byte [rsi], cl
add bh, dh
xchg dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
xor eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx - 0x7e], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x33], dh
add byte [rax], al
and al, byte [rax]
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000033], ch
add byte [rsi], cl
add byte [rbx + rax*4 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cli
xor eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add al, ah
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x34], dh
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4a], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x5e], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
xor eax, 0x220000
add dh, bh
nop
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000035], bh
add byte [rsi], cl
add byte [rax + rsi*2 + 0x40], dl
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
xor eax, 0x220000
add byte [rdx], dl
jge 0x411c13
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x36], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x47], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000036], bl
add byte [rsi], cl
add bl, dl
mov word [rax], es
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add ch, al
add byte ss:[rax], al
and al, byte [rax]
add byte [rsi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ss:[rax], al
and al, byte [rax]
add byte [rsi - 0x73], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
add dword [rax], 0
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x37], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x22000037
add byte [rsi], cl
add byte [rax*4 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x38], cl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
mov al, 0x9d
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x38], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x38
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4081], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
cmp byte [rax], al
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x40a0], bh
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
push rdx
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x39], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x7a], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000039], dl
add byte [rsi], cl
add byte [rax], ah
mov byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sar byte [rcx], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4034], ah
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x411d9b
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
xor eax, 0x40
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
idiv dword [rcx]
add byte [rax], al
and al, byte [rax]
add bl, cl
mov eax, dword [rax]
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x3a], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasd eax, dword [rdi]
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add ch, ah
push rsp
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add ah, cl
cmp al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x3b], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4081], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x56], bh
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rdx], dh
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
mov byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200003c], bl
add byte [rsi], cl
add byte [rdx], cl
jp 0x411e9b
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbx*4 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200003d], dh
add byte [rsi], cl
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x3d], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
cmp eax, 0x210000
adc byte [rax], al
push rax
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
cmp eax, 0x220000
add byte [rdx], dl
ja 0x411f13
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte ds:[rax], al
and al, byte [rax]
add byte [rsi + 0x29], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdi], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200003e], ah
add byte [rsi], cl
add byte [rsi], dh
jge 0x411f5b
add byte [rax], al
add byte [rax], al
add ch, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
add byte ds:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x3e, eax
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
add byte [rax], al
adc al, byte [rax]
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add bl, ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
add byte ss:[rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4099], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x40], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x412012
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
loopne 0x411fdc
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax*2], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi - 0x77], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000040], dh
add byte [rsi], cl
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0x40
add byte [rax], al
and al, byte [rax]
add byte [rdi + rbp + 0x40], ah
add byte [rax], al
cmp eax, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x412072
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4066], dh
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [r8], al
and al, byte [rax]
add al, al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x41], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4074], bl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add ah, bh
add byte [r8], al
and al, byte [rax]
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax*2], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000042], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
add byte [rax], al
and dword [rax], eax
sbb eax, dword [rax]
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmovae eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx - 0x75], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte gs:[r8], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, 0x43
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x35], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rbx], 0
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
and al, byte [rax]
add byte [rax + rbx*4 + 0x40], dh
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x120000c1], cl
add byte [rdi], cl
add byte [rdx + rbx*4 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte fs:[rax], r8b
and al, byte [rax]
add byte [rbx], dl
jl 0x4121b3
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000044], cl
add byte [rsi], cl
add byte [rsi + 0x5d], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax*2 + 0x220000], bl
add byte [rsi + 0x4096], dh
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
add byte [rax], r8b
and al, byte [rax]
add byte [rsi], bl
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add ah, dh
add byte [rax], r8b
and al, byte [rax]
add byte [rdx + 0x4093], cl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000045], dl
add byte [rsi], cl
add byte [rbp + 0x4d], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
add byte [r8], r8b
and al, byte [rax]
add dl, ch
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], r8b
and al, byte [rax]
add byte [rsi + 0x408e], ah
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x46], ch
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4d], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000046], dh
add byte [rsi], cl
add dh, dh
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [r8], r8b
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rdi], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4046], ah
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x47], bh
add byte [rax], al
and al, byte [rax]
add byte [rdi + rdx*4 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [r8], r8b
and al, byte [rax]
add byte [rsi + 0x4029], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], ecx
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rbx*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx*2], dh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x57], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000048], bh
add byte [rsi], cl
add al, ch
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [r8], al
and al, byte [rax]
add dl, bl
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x49], al
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
call 0x418427
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x49], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
xor eax, 0x40
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte fs:[r8], al
and al, byte [rax]
add byte [rbx], bh
jl 0x412393
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000049], cl
add byte [rsi], cl
add byte [rsi + 0x73], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [r8], al
and al, byte [rax]
add byte [rax + rcx*4 + 0x40], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
add byte [r8], al
and al, byte [rax]
add dl, dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x4a], cl
add byte [rax], al
and al, byte [rax]
add cl, al
push rax
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rsi + 0x4a], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rdx], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rcx*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [r8], al
and al, byte [rax]
add byte [rbp + rdx*4 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x4b], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4074], bl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add dl, dh
add byte [r8], al
and al, byte [rax]
add byte [rdi], al
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4c], cl
add byte [rax], al
and al, byte [rax]
add dh, ch
jo 0x412483
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rcx + 0x2200004c], cl
add byte [rsi], cl
add byte [rdx + 0x6b], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], r8b
and al, byte [rax]
add byte [rax + 0x4c], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x2200004d
add byte [rsi], cl
add byte [rdx - 0x73], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4d], ch
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
pop rax
movabs al, byte [0xb000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jl 0x4124ff
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x78], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
add byte [r8], r8b
and al, byte [rax]
add byte [rbx], bh
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], r8b
and al, byte [rax]
add byte [rsi + 0x402c], ah
add byte [rax], al
add byte [rbx], bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x4e], cl
add byte [rax], al
and al, byte [rax]
add bh, bh
imul eax, dword [rax], 0
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x4e], ch
add byte [rax], al
and al, byte [rax]
add dl, bh
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200004e], bh
add byte [rsi], cl
add dh, dh
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [r8], r8b
and al, byte [rax]
add byte [rbx + rbp*2 + 0x40], bh
add byte [rax], al
jbe 0x412552
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add byte [r8], r8b
and al, byte [rax]
add byte [rdx], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200004f], dl
add byte [rsi], cl
add byte [rip + 0x4079], ah
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
push rax
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x5e], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x50], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x55], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, 0x22000050
add byte [rsi], cl
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
push rax
add byte [rax], al
adc al, byte [rax]
add byte [rdi + 0x22], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add dh, ch
push rax
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4085], dl
add byte [rax], al
add byte [rdi], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000051], bl
add byte [rsi], cl
add byte [rdx + 0x65], dh
add byte [rax], al
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x41266b
add byte [rax], al
and al, byte [rax]
add byte [rax], al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
push rdx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x6d], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x21000e0022000052], eax
jl 0x412693
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
push rdx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x44], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb edx, dword [rbx]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x53], ah
add byte [rax], al
and al, byte [rax]
add al, cl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rdx + 0x22000053], al
add byte [rsi], cl
add ah, ah
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
push rbx
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x42], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x54
add byte [rax], al
and al, byte [rax]
add dh, dl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x54], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbp + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000054], al
add byte [rsi], cl
add dl, cl
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rdi], al
push rbp
add byte [rax], al
and al, byte [rax]
add dl, bh
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x55], ah
add byte [rax], al
and al, byte [rax]
add al, dh
add byte gs:[rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, dword [rbp]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rax*4], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
push rbp
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
jnp 0x4127b3
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000056], dl
add byte [rsi], cl
add byte [rax], ah
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x56], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rdi + rax*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x73], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rdx, dword [rdi]
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000057], bh
add byte [rsi], cl
add byte [rdx], bh
add byte ss:[rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rdx + rcx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x58], cl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
pop rax
add byte [rax], al
and al, byte [rax]
add al, dl
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
pop rax
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
and al, byte [rax]
add ah, cl
cdq
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x59], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x6f], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
pop rcx
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
js 0x412849
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
pop rdx
add byte [rax], al
and al, byte [rax]
add ah, dl
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, 0x5a
add byte [rax], al
and al, byte [rax]
add dl, cl
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
pop rbx
add byte [rax], al
and al, byte [rax]
add cl, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x5b], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4066], dh
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200005b], cl
add byte [rsi], cl
add dh, bl
nop
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx*2], dl
add byte [rax], al
and al, byte [rax]
add dh, al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
jne 0x412943
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
pop rsp
add byte [rax], al
and al, byte [rax]
add dl, bh
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add dh, al
pop rsp
add byte [rax], al
and al, byte [rax]
add dl, dh
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb ebx, dword [rbp]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x405f], bh
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add dword [rax], 0
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200005d], bl
add byte [rsi], cl
add byte [rdx + 0x6c], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
and al, byte [rax]
add byte [rdx + rbx*2], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, 0x2200005e
add byte [rsi], cl
add byte [rbx + 0x4083], dh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rdi
add byte [rax], al
and al, byte [rax]
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5f], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
pop rdi
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x52], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
lcall [rdi]
add byte [rdx], dl
add byte [rsi], cl
add ch, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x60], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
jp 0x412a9b
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000060], cl
add byte [rsi], cl
add byte [rax], al
add dword [rax], 0
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000060], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000060], bh
add byte [rsi], cl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4d], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x61], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
and al, byte [rax]
add byte [rbp + rcx*2 + 0x40], ch
add byte [rax], al
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbp*2 + 0x40], ch
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x62], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
pop rax
sahf
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add byte [rax], al
and al, byte [rax]
add dl, al
jnp 0x412b8b
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x6d], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x12000094
add byte [rsi], cl
add byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000063], dh
add byte [rsi], cl
add byte [rsi + 0x4076], dh
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x64], cl
add byte [rax], al
and al, byte [rax]
add ah, dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000064], ch
add byte [rsi], cl
add byte [rax + 0x4062], cl
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add cl, ch
add byte fs:[rax], al
and al, byte [rax]
add byte [rbp + rbp*2 + 0x40], ah
add byte [rax], al
add byte fs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x65], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4099], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000065], cl
add byte [rsi], cl
add al, dh
add byte gs:[rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 0x65
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x412cb0
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x402c], ah
add byte [rax], al
add byte [rbx], bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cli
add byte [rax], al
and al, byte [rax]
add byte [rdx + rbx*2], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x412d11
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rdi], esp
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x404e], dl
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rdx], dh
push 0x220000
add byte [rdx - 0x78], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x68], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x404d], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000068], bh
add byte [rsi], cl
add byte [rcx + rcx*4 + 0x40], bh
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
int1
push 0x220000
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rcx], gs
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4072], ch
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
imul eax, dword [rax], 0xe002200
add byte [rsp + rcx*2 + 0x40], dh
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rsi], al
push 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax - 0x6a], ch
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0x6a
add byte [rax], al
and al, byte [rax]
add byte [rax + rdx*2], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x6a], dh
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rdx + 0x2100006a], cl
add byte [rax], dl
add byte [rax + 0x40a0], cl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200006a], ah
add byte [rsi], cl
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
push 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb ch, byte [rbx]
add byte [rdx], ah
add byte [rsi], cl
add dh, al
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp*2], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rsi*2 + 0x40], dl
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp*2 + 0x220000], bl
add byte [rbx], bh
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
insb byte [rdi], dx
add byte [rax], al
and al, byte [rax]
add dh, bh
nop
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x6c], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4073], ch
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200006c], bh
add byte [rsi], cl
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
insd dword [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4045], dl
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp*2 + 0x220000], bh
add byte [rsi + 0x5b], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp*2 + 0x220000], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x6e], al
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
lahf
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp*2], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rbp + 0x2200006e], ch
add byte [rsi], cl
add byte [rbx + 0x4078], dh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
outsd dx, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rbx + rax*4 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
and al, byte [rax]
add dh, ah
push rdx
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200006f], al
add byte [rsi], cl
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200006f], bh
add byte [rsi], cl
add ch, al
mov word [rax], es
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
outsd dx, dword [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], esi
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], al
jge 0x412ff3
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x70], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
jo 0x412fdb
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x405b], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x71], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4041], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rsi + 0x71], ch
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
rcr byte [rdi + 0x40], 1
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rcx], 0xe002200
add byte [rax], ah
mov byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
jno 0x41303b
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x4061], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
jno 0x413053
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x404d], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x72], dl
add byte [rax], al
and al, byte [rax]
add dl, ch
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000072], dh
add byte [rsi], cl
add byte [rsi], bl
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
jae 0x41309b
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x69], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x73], bl
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4093], dh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
jae 0x4130cb
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx - 0x78], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
je 0x4130e3
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rcx*2], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x74], ah
add byte [rax], al
and al, byte [rax]
add byte [rcx], ah
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
je 0x413113
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x405a], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
jne 0x41312b
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000075], bh
add byte [rsi], cl
add al, dl
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
jbe 0x41315b
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
jbe 0x413173
add byte [rdx], ah
add byte [rsi], cl
add dh, bl
jb 0x4131bb
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
sbb byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x76], ah
add byte [rax], al
and al, byte [rax]
add dl, bl
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000076], dl
add byte [rsi], cl
add dl, dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
jbe 0x4131d3
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi - 0x6b], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
ja 0x4131eb
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4057], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000077], al
add byte [rsi], cl
add byte [rax + rcx*4 + 0x40], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x22000077
add byte [rsi], cl
add byte [rsi + 0x34], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x413233
add byte [rcx], dl
add bl, byte [rdx]
add al, bh
add dword [rcx], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc edi, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2c], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000078], ah
add byte [rsi], cl
add byte [rdx + rdx*2], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x78], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
js 0x413293
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x79], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x73], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000079], cl
add byte [rsi], cl
add dl, ah
add byte ss:[rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000079], ah
add byte [rsi], cl
add al, cl
add byte cs:[rax], al
add byte [rax], al
add ah, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000079], bh
add byte [rsi], cl
add dl, bh
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
jp 0x41330b
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
jp 0x413323
add byte [rdx], ah
add byte [rsi], cl
add al, cl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200007a], bh
add byte [rsi], cl
add byte [rip + 0x4044], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
jnp 0x413353
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dl
mov byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x7b], dl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
mov eax, 0x409e
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
jnp 0x413383
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
jnp 0x41339b
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
jnp 0x4133b3
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rcx*2 + 0x40], dh
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
jl 0x4133cb
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdi*2], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4095], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasd eax, dword [rdi]
jl 0x4133fb
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rdx*4], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
jl 0x413413
add byte [rcx], ah
add byte [rax], dl
add byte [rax], ah
movabs al, byte [0x10000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x224134a9
add byte [rsi], cl
add dl, ah
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x7d], cl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x47], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200007d], bl
add byte [rsi], cl
add byte [rsi - 0x73], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
jge 0x413473
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
add dword [rax], 0
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdi*2], al
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rax], bl
jle 0x4134a3
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x7e], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x71], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
jle 0x4134d3
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4044], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
jle 0x4134eb
add byte [rcx], ah
add byte [rax], dl
add byte [rax], bl
movabs eax, dword [0x10000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x413503
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rcx*4 + 0x40], dh
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0x7f
add byte [rax], al
and al, byte [rax]
add al, cl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*2 + 0x220000], dl
add byte [rbx + rsi*2], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add dl, ah
jg 0x41354b
add byte [rdx], ah
add byte [rsi], cl
add dh, al
push rsi
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], 0
and al, byte [rax]
add al, ah
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx*2], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax + 0x220000], 0xe
add byte [rax + 0x408b], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax*4 + 0x220000], bh
add ah, ah
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000081], ah
add byte [rsi], cl
add byte [rbx + rbp*2], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000081], cl
add byte [rsi], cl
add byte [rcx + 0x4f], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rbp + 0x22000081], ah
add byte [rsi], cl
add al, dh
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
xlatb
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000081], bh
add byte [rsi], cl
add byte [rbp + 0x56], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
add dword [rax], 0x1b001100
add byte [rax], dh
add esp, dword [rcx]
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rcx + rcx*4 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
add byte [rax], al
and al, byte [rax]
add byte [rbx + rdx*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add bh, cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4e], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add dword [rax], 0
and al, byte [rax]
add byte [rdi], bh
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x7d], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4084], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, dword [rbx + 0x220000]
add byte [rsp + rcx*2], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
add dword [rax], 0
and al, byte [rax]
add byte [rdx], cl
jp 0x413713
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
test byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4e], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000084], bl
add byte [rsi], cl
add byte [rip + 0x4084], bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
test dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4044], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x7b], ch
add byte [rax], al
and al, byte [rax]
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000085], al
add byte [rsi], cl
add byte [rsp + rcx*2 + 0x40], dh
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add bh, al
test dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], al
add esp, dword [rcx]
add byte [rax], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rbp + 0x220000], cl
add byte [rdx], bh
add byte ss:[rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax*4], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x406b], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdx + 0x22000086], al
add byte [rsi], cl
add byte [rax], dh
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 0x86
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000087], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x79], ah
add byte [rax], al
and al, byte [rax]
add dl, bh
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
xchg dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x44], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x78], al
add byte [rax], al
and dword [rax], eax
sbb eax, dword [rax]
pop rax
add ah, byte [rcx]
add byte [rax], al
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x78], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x405b], cl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000088], ch
add byte [rsi], cl
add byte [rax], bl
pop rax
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
mov byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rax*2 + 0x40], dl
add byte [rax], al
sub al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword ss:[rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4079], bl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x77], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4096], dh
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000089], dl
add byte [rsi], cl
add byte [rbp + 0x4027], ah
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0xdf000e0022000089], eax
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
mov dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2c], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
mov dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, cl
push 0x40
add byte [rax], al
js 0x413902
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rbp + 0x2200008a], al
add byte [rsi], cl
add byte [rdx + 0x4091], dl
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rsi], dl
mov eax, dword [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax], al
sahf
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
mov eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp cl, byte [rbx + 0x220000]
add byte [rax], dh
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200008b], cl
add byte [rsi], cl
add byte [rbx + 0x4f], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
mov eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rcx*2 + 0x40], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
mov word [rax], es
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x5f], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx*4], al
add byte [rdx], ah
add byte [rsi], cl
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x74], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
mov word [rax], es
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4088], dh
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rbp - 0x73], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x77], bl
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x73], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x70], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
lea eax, [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov es, word cs:[rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rcx*4], cl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x72], bh
add byte [rax], al
and al, byte [rax]
add dh, al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
jne 0x413a83
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop qword [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x61], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
pop qword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rcx*2 + 0x40], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx*4], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rcx*2], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200008f], bh
add byte [rsi], cl
add byte [rax + 0x4e], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop qword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ch, bl
js 0x413b33
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x413a92
add byte [rax], al
and al, byte [rax]
add dh, bl
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
nop
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
xchg eax, ecx
add byte [rax], al
and al, byte [rax]
add byte [rcx + rcx*4 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0x91
add byte [rax], al
and al, byte [rax]
add byte [rbx + rcx*4], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdx*4], al
add byte [rax], al
and al, byte [rax]
add byte [rbx + rbx*2], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x6e], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4078], cl
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x6e], bh
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
rol byte [rdx], 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000092], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
xchg eax, edx
add byte [rax], al
and al, byte [rax]
add byte [rsi], bl
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdx*4], ah
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000093], dh
add byte [rsi], cl
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
xchg eax, esp
add byte [rax], al
and al, byte [rax]
add dl, cl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000094], ch
add byte [rsi], cl
add byte [rax*4 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x10000094], dh
add byte [rdx], bl
add al, ch
add dword [rcx], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret
xchg eax, esp
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4082], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
xchg eax, esp
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rbp + 0x220000], dl
add byte [rcx + 0x4a], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000095], bl
add byte [rsi], cl
add al, ah
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000095], dh
add byte [rsi], cl
add byte [rax + rcx*4 + 0x40], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
loop 0x413c5f
add byte [rax], al
and al, byte [rax]
add byte [rdx + rcx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4048], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add eax, dword [rax]
add byte [rax], dl
add byte [rbx], bl
add byte [rax + 3], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdx*4], dh
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000096], bh
add byte [rsi], cl
add byte [rax + rbx*4 + 0x40], dh
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdi + rdx*4], cl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
movabs al, byte [0x18000000000040a0]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
xchg eax, edi
add byte [rax], al
and al, byte [rax]
add bl, dl
mov word [rax], es
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x69], dl
add byte [rax], al
and al, byte [rax]
add dl, dh
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
add byte [rax], al
and al, byte [rax]
add bh, dl
push rsp
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdx*4 + 0x220000], bh
add byte [rdx + rax*4 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
xchg eax, edi
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4029], ah
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
xchg eax, edi
add byte [rax], al
and al, byte [rax]
add cl, al
push rax
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rbx], bl
cwde
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add byte [rax], al
and al, byte [rax]
add ah, dh
jnp 0x413e4b
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x68], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x62], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
cwde
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4091], bh
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
cdq
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4054], ah
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x67], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x7a], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x67], dh
add byte [rax], al
and al, byte [rax]
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
cdq
add byte [rax], al
and al, byte [rax]
add byte [rdi], al
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
and al, byte [rax]
add byte [rcx], dh
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x66], al
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x6c], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200009a], bh
add byte [rsi], cl
add byte [rdx - 0x68], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x65], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
wait
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x73], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
pushfq
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x404a], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x64], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + rdx*2 + 0x40], bh
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr byte [rax + rax + 0xe002200], 0
and byte [rax + rax*2], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
pushfq
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
xchg dword [rax], eax
add byte [rax], al
add byte [rax], al
sub eax, 0
add byte [rax], al
add byte [rdi], ch
popfq
add byte [rax], al
and al, byte [rax]
add byte [rcx + rcx*2 + 0x40], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x63], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dl, cl
popfq
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
popfq
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4048], bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
sahf
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4043], ch
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
add byte [rax], al
and al, byte [rax]
add byte [rdi + rax*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbx*4 + 0x120000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
sahf
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4068], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
sahf
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rdi + 0x220000], bl
add byte [rsi - 0x6f], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200009f], bl
add byte [rsi], cl
add byte [rax + 0x66], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
lahf
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4f], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add cl, bh
lahf
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0xa0
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbx*4 + 0x40], cl
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x60], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x2a], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000a0], al
add byte [rsi], cl
add dl, dl
jo 0x414133
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000a0], bl
add byte [rsi], cl
add byte [rsi + 0x405f], bh
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx + 0x220000], esp
add byte [rsi + rbx*2 + 0x40], ch
add byte [rax], al
lea eax, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x3d000e00220000a1], eax
mov eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
movabs byte [0x26a5000e00220000], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
movabs byte [0x1f8001b00100000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
sub byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0x49d2000e00220000], al
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rdx + 0x220000], ah
add byte [rbp + rsi*2 + 0x40], bl
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0x4c60000e00220000], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb ah, byte [rbx + 0x220000]
add ah, dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x5d], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4037], dh
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000a3], dl
add byte [rsi], cl
add cl, bh
push rsi
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
movabs dword [0x9586000e00220000], eax
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
mov byte [rbp + 0x40], bl
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x4141f6
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdx*4], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x48], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rbp + 0x220000], ah
add byte [rcx + 0x4a], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000a5], al
add byte [rsi], cl
add byte [rax + 0x4065], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000a5], bh
add byte [rsi], cl
add byte [rax], bh
cdq
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
frstor dword [rbp + 0x220000]
add byte [rax + 0x47], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4d], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x5a], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rbx + rbx*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisub dword [rsi + 0x220000]
add dh, ah
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rip + 0x220000a7], dl
add byte [rsi], cl
add byte [rax], ah
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x59], bl
add byte [rax], al
and al, byte [rax]
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
and al, byte [rax]
add ah, dl
jae 0x4143eb
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and ch, byte [rax + 0x220000]
add byte [rbx + rcx*4 + 0x40], dl
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
test al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x58], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x408b], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000a8], ah
add byte [rsi], cl
add byte [rsi - 0x7e], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
test al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], ah
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
test eax, 0x210000
adc byte [rax], al
push 0x40a0
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x57], cl
add byte [rax], al
and al, byte [rax]
add al, ah
add byte es:[rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x57], dl
add byte [rax], al
and al, byte [rax]
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000a9], bl
add byte [rsi], cl
add ah, dl
add byte gs:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
test eax, 0x220000
add byte [rdx + rbx*2], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosb byte [rdi], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x66], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000aa], dl
add byte [rsi], cl
add byte [rcx], bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
sbb dword [rbx + 0x220000], ebp
add byte [rip + 0x404b], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x55], dl
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4070], dl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add bl, cl
stosd dword [rdi], eax
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbp*4], dl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x79], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000ac], bl
add byte [rsi], cl
add byte [rax - 0x7c], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
lodsb al, byte [rsi]
add byte [rax], al
and al, byte [rax]
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp*4 + 0x220000], al
add byte [rsi - 0x76], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, byte [rbp + 0x220000]
add byte [rax], dh
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
lodsd eax, dword [rsi]
add byte [rax], al
and al, byte [rax]
add dl, bh
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x52], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
scasb al, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rsi + rdx*4], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000ae], cl
add byte [rsi], cl
add byte [rax - 0x6d], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
scasd eax, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4071], bh
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbp*4], dl
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x51], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x6b], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
scasd eax, dword [rdi]
add byte [rax], al
and al, byte [rax]
add dh, al
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
mov al, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rsi*4], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rbp*2 + 0x40], ah
add byte [rax], al
add byte fs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rsi*4 + 0x120000], ch
add byte [rax], al
xor byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000003], bl
add byte [rsi], cl
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0xb0
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x6a], ch
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add esi, dword [rcx + 0x220000]
add byte [rdx + 0x4045], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
mov cl, 0
add byte [rdx], ah
add byte [rsi], cl
add al, cl
test byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
mov cl, 0
add byte [rdx], ah
add byte [rsi], cl
add ch, ch
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rsi*4 + 0x220000], ah
add byte [rax + 0x405a], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
mov cl, 0
add byte [rdx], ah
add byte [rax], al
add byte [rax + 0x1b], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000b2], dl
add byte [rsi], cl
add byte [rdx], dl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x4e], ah
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
call 0x41880c
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x4e], dh
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
xchg dword [rax], eax
add byte [rax], al
add byte [rax], al
sub eax, 0
add byte [rax], al
add dh, al
mov dl, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x44], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push qword [rdx + 0x220000]
add byte [rdx], bh
add dword [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x4d], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fidiv word [rbx + 0x120000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, 0x220000b4
add byte [rsi], cl
add dl, ah
test byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x4147be
add byte [rax], al
and al, byte [rax]
add ah, cl
cdq
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000b4], bh
add byte [rsi], cl
add byte [rcx + 0x402a], ah
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
mov ah, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, dh
xchg eax, esi
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
mov ch, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], al
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x4b], dl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x5e], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rsi*4 + 0x210000], bh
adc byte [rax], al
fcomp dword [rbp + 0x40]
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0xb5
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x78], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
mov ch, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx*2 + 0x40], bh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x220000b6
add byte [rsi], cl
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x4a], bh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
js 0x41488a
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000b6], cl
add byte [rsi], cl
add dh, ch
lea eax, [rax]
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x4148c8
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbx*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rdi + 0x220000], dh
add byte [rbx + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dil, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
mov bh, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbp*2 + 0x40], cl
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000b8], cl
add byte [rsi], cl
add byte [rax], al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000b9], bl
add byte [rsi], cl
add byte [rsi + 0x4060], ch
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rcx + 0x220000], bh
add byte [rdx + 0x7b], bh
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sar byte [rcx + 0x120000], cl
add byte [rbx + 0x401e], ah
add byte [rax], al
add byte [rdx + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fstp xword [rcx + 0x220000]
add byte [rdx], dl
imul eax, dword [rax], 0
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
mov edx, 0x220000
add byte [rax], ah
add dword [rax], 0
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
mov edx, 0x220000
add dh, al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000ba], dh
add byte [rsi], cl
add byte [rax + rcx*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
mov edx, 0x220000
add dh, ah
cdq
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x45], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, 0x220000
add byte [rax + rcx*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000bb], ch
add byte [rsi], cl
add al, ah
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add cl, al
mov ebx, 0x220000
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
mov ebx, 0x220000
add byte [rax + 0x4075], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdi*4], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rdi*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add al, dl
mov esp, 0x200000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, dx
mov esp, 0x220000
add byte [rdx + 0x4097], cl
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rdi*4], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
xchg dword [rax], eax
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
mov ebp, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x414b0f
add byte [rax], al
adc al, byte [rax]
add byte [rbp + 0x401e], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
mov ebp, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rsi + 0x120000], edi
add byte [rbp + 0x20], bh
add byte [rax], al
add byte [rax], al
add dl, cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
mov esi, 0x220000
add byte [rdx + 0x4059], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x42], dh
add byte [rax], al
and al, byte [rax]
add cl, dl
jns 0x414bfb
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000be], ch
add byte [rsi], cl
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
mov esi, 0x220000
add byte [rsi + 0x405d], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
mov edi, 0x220000
add ah, cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000bf], cl
add byte [rsi], cl
add byte [rdx + 0x58], cl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
rol byte [rax], 0
and al, byte [rax]
add byte [rdx], ch
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax*8 + 0x220000], ch
add byte [rsi - 0x77], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
rol byte [rax], 0
and al, byte [rax]
add byte [rbx + rbp*2 + 0x40], bh
add byte [rax], al
jbe 0x414c6a
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol qword [r8], 0
and al, byte [rax]
add byte [rdx + 0x5c], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x3f], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x409a], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000c1], cl
add byte [rsi], cl
add dh, bl
nop
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000c2], dl
add byte [rsi], cl
add byte [rsi + rbx*2 + 0x40], ch
add byte [rax], al
lea eax, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 0xc2
add byte [rax], al
and al, byte [rax]
add dl, al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
ret 0
and al, byte [rax]
add byte [rsi - 0x73], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
ret
add byte [rax], al
and al, byte [rax]
add dl, dh
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x414cdd
add byte [rax], al
and al, byte [rax]
add byte [rcx*4 + 0x40], bl
add byte [rax], al
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
ret
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
jge 0x414d7b
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x7b], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x3c], dl
add byte [rax], al
and al, byte [rax]
add bl, dh
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax*8 + 0x220000], dl
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x404e], dl
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rdi - 0x3b], ch
add byte [rax], al
and al, byte [rax]
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000c5], bh
add byte [rsi], cl
add bl, bl
add byte [rax], 0
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dh, al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x63], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000c6], cl
add byte [rsi], cl
add byte [rax], bh
mov word [rax], es
add byte [rax], al
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
mov byte [rax], 0
and al, byte [rax]
add byte [rdx + rax*4 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
mov byte [rax], 0
and al, byte [rax]
add byte [rax + 0x4091], bh
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
mov dword [rax], 0xe002200
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax*8 + 0x220000], al
add byte [rdx + 0x405a], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
mov dword [rax], 0xe002200
add byte [rip + 0x4082], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
enter 0, 0x22
add byte [rsi], cl
add byte [rsi], cl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx*8], ch
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4d], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx*8 + 0x220000], cl
add byte [rax], dh
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror al, 0
add byte [rdx], ah
add byte [rsi], cl
add al, cl
push 0x40
add byte [rax], al
js 0x414eda
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
and al, byte [rax]
add al, cl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000c9], al
add byte [rsi], cl
add byte [rip + 0x404a], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
leave
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdx*4 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x36], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x47], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000ca], dl
add byte [rsi], cl
add byte [rsp + rdx*4 + 0x40], bl
add byte [rax], al
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
dec edx
add byte [rax], al
and al, byte [rax]
add byte [rcx], bl
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rdi + 0x220000cb], ah
add byte [rsi], cl
add byte [rbx + 0x75], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 0xcb
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x78], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
int3
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x408e], dh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx*8], ch
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000cc], cl
add byte [rsi], cl
add byte [rax + 0x4051], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0xcc
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4093], bh
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x33], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x7a], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000cd], cl
add byte [rsi], cl
add dl, al
add dword [rax], 0
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x22415102
add byte [rsi], cl
add byte [rax + 0x4079], bl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx*8], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx + rdx*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rcx, esi
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x73], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbp + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
and al, byte [rax]
add byte [rcx + rax*4 + 0x40], ah
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
iretd
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
mov al, 0x1b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x31], bh
add byte [rax], al
and al, byte [rax]
add dl, dh
add byte es:[rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x200000cf], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx*8 + 0x220000], bl
add ah, ch
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x220000cf
add byte [rsi], cl
add byte [rsi + 0x66], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
iretd
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4088], dh
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rbx - 0x30], al
add byte [rax], al
and al, byte [rax]
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rsi - 0x30], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0xb3000e00220000d0]
push rax
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
rol byte [rax], 1
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x2f], ah
add byte [rax], al
and al, byte [rax]
add al, cl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
rol dword [rax], 1
add byte [rdx], dl
add byte [rsi], cl
add byte [rsi + 0x1e], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
rol dword [rax], 1
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x210000d2], al
add byte [rax], dl
add al, ah
sahf
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x4151e4
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x402a], cl
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x120000d2], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000d2], ah
add byte [rsi], cl
add byte [rdx], ah
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
rol byte [rax], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbp*2 + 0x40], cl
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x2d], bl
add byte [rax], al
and al, byte [rax]
add dh, ah
cdq
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000d3], ah
add byte [rsi], cl
add byte [rdx + 0x54], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
rol dword [rax], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc esp, edx
add byte [rax], al
and al, byte [rax]
add al, cl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
and al, byte [rax]
add bh, bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x2c], ah
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x48], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [rax], al
and al, byte [rax]
add byte [rbx], ah
jno 0x41534b
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
and al, byte [rax]
add ah, ah
mov al, byte [rax]
add byte [rax], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], ah
xchg eax, esi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x2b], dh
add byte [rax], al
and al, byte [rax]
add dl, bh
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
adc byte [rax + 0x40], ah
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
and al, byte [rax]
add byte [rcx], ah
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdx*8 + 0x220000], al
add byte [rsi + 0x406e], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x48], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4075], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000d7], dl
add byte [rsi], cl
add byte [rsi], ah
add dword [rax], 0
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x120000d7], bh
add byte [rax], al
add al, ah
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x4153f9
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rbx], cl
fadd dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
jne 0x41544b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x4154c8
je 0x4154cc
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x41547e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4154fc
jb 0x415502
pop rdi
jne 0x41550b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x415505
je 0x415501
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x415521
jb 0x415527
pop rdi
jne 0x415530
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x415533
jns 0x415523
outsb dx, byte gs:[rsi]
je 0x41553a
jns 0x4154ca
jb 0x41552e
insd dword [rdi], dx
pop rdi
jne 0x415540
insd dword [rdi], dx
jns 0x4154d6
pop rdi
pop rdi
jb 0x41553c
insd dword [rdi], dx
pop rdi
jne 0x41554e
insd dword [rdi], dx
jns 0x415543
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x41554e
jns 0x41554e
outsb dx, byte gs:[rsi]
je 0x415565
jns 0x4154f5
jae 0x415566
jne 0x41556b
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x415551
xor dword [rcx], edi
jo 0x415572
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x41558a
jb 0x41558d
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
xor qword [rax], r15
pop rdi
pop rdi
je 0x41558d
jb 0x41558c
pop rdi
movsxd rsi, dword [rcx + rbp*2 + 0x76]
pop rdi
jo 0x4155a9
add byte [rdi + 0x5a], bl
pop rdx
xor qword [rax], r15
pop rdi
pop rdi
je 0x4155a7
jb 0x4155a6
pop rdi
movsxd rsi, dword [rcx + rbp*2 + 0x76]
pop rdi
jo 0x4155c3
xor r14b, byte [r8]
pop rdi
pop rdi
je 0x4155bd
jb 0x4155bc
pop rdi
movsxd rsi, dword [rcx + rbp*2 + 0x76]
pop rdi
jo 0x4155d7
jb 0x415565
pop rdi
pop rdx
xor qword [rip + 0x74675f5f], r14
push 0x64616572
pop rdi
jno 0x4155ec
insb byte [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor r14b, byte [rax]
pop rdi
pop rdi
je 0x4155ee
jb 0x4155ed
pop rdi
insd dword [rdi], dx
jne 0x415602
js 0x4155f0
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x50]
xor dword [rip + 0x72687470], esi
pop rdi
insd dword [rdi], dx
jne 0x415617
js 0x415605
je 0x4155a8
pop rdi
pop rdx
xor r14b, byte [rdx]
pop rdi
pop rdi
je 0x41561a
jb 0x415619
pop rdi
insd dword [rdi], dx
jne 0x41562e
js 0x41561c
jne 0x41562d
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x50]
xor dword [rip + 0x72687470], esi
pop rdi
insd dword [rdi], dx
jne 0x415645
js 0x415633
je 0x4155d6
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41563f
movsxd rdi, dword [rax + 0x78]
xor qword [rax], r15
pop rdi
pop rdi
js 0x41564e
push 0x65676e61
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rsi
imul ebp, dword [rcx], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x415667
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rip + 0x78655f5f]
movsxd rbp, dword [rax + 0x61]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
pop rdi
jae 0x41568c
outsb dx, byte [rsi]
insb byte [edi], dx
push r8
imul ebp, dword [rcx], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x415695
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rdi]
pop rdi
pop rdi
js 0x4156a4
push 0x65676e61
pop rdi
outsb dx, byte [rsi]
pop rdi
pop rdi
imul esi, dword fs:[rbx + 0x70], 0x68637461
push r8
imul ebp, dword [rcx], 0x74535a5f
cmp byte [rdi + 0x5f], r11b
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x4156bc
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4156db
jb 0x4156e6
add byte [rdi + 0x5a], bl
push rbx
je 0x4156d1
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4156f6
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x415711
je 0x415706
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41571d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x415705
xor dword [rax], esi
jb 0x415720
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x415717
xor dword [rcx], esi
je 0x415741
jns 0x415730
je 0x415742
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x41572a
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x415759
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
xor r9, qword [rcx + 0x4e]
add byte [rdi + 0x5a], r11b
pop rdi
add byte [rdi + 0x5a], r11b
xor r14b, byte [rax + 0x69]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
push rbp
push r10
pop rdi
push rbx
pop r10
add byte [r15 + 0x5a], r11b
xor qword [rax], r14
pop r8
pop rdi
push r12
add byte [rdi + 0x5a], bl
pop rdx
jae 0x415791
je 0x415770
jae 0x415796
push 0x45
xor dword [rcx], edi
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor dword [rdx], esi
jae 0x4157b5
je 0x4157a2
jb 0x4157b9
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x3931456a
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x72
push rdx
imul edx, dword [rbx + 0x30], 0x5f30535f
push rbx
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x45], bl
jbe 0x4157d8
jo 0x4157e5
push rsp
pop rdi
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x41582b
je 0x415823
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x415831
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x415847
jb 0x41584a
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x41585f
pop rdi
pop r15
pop rdi
pop rdx
cmp byte [rbx + 0x65], dh
je 0x41584c
imul esp, dword [rsp + rsi*2 + 0x68], 0x5f5f006a
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x41589d
jns 0x41589d
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4158ae
jns 0x4158ae
jae 0x4158c5
jb 0x4158c8
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4158a3
je 0x4158bd
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x4158f4
je 0x4158c7
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4158fa
je 0x4158ef
insb byte [rdi], dx
je 0x4158fb
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x4158d4
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4158fb
pop rax
push rsp
pop rdi
push r11
je 0x4158ee
je 0x415930
jo 0x415929
jo 0x415917
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41593c
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41590b
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41595d
jb 0x415934
push rbx
push r11
je 0x415923
xor ebx, dword [rdi + 0x53]
jo 0x415955
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x415961
pop rdi
jo 0x415974
jb 0x415961
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x415944
je 0x415978
jb 0x415977
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41594f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x415996
push rax
jbe 0x4159a7
jbe 0x415979
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4159a6
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4159c3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x52]
push rbx
pop rdi
push rax
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4159a1
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4159e0
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x4159ca
jae 0x4159ef
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4159d3
xor byte [rdi + 0x48], bl
pop rdi
jae 0x415a12
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x415a2c
jo 0x415a2f
je 0x415a00
jbe 0x415a28
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x415a0e
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
movsxd rbp, dword [rdx + 0x63]
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x415a70
je 0x415a41
jbe 0x415a69
movsxd rsp, dword [rbp + 0x38]
outsb dx, byte [rsi]
js 0x415a7b
push 0x76457261
add byte [rdi + 0x5a], bl
push rbx
je 0x415a45
xor dword [rdi + 0x54], ebx
jne 0x415a89
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x415aa0
jo 0x415aa3
je 0x415a76
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x415aa9
je 0x415a9e
insb byte [rdi], dx
je 0x415aaa
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x415ad7
jo 0x415ada
je 0x415aad
imul ebp, dword [rbp + 0x44], 0x764530
pop rdi
pop rdx
push rbx
je 0x415aa6
xor byte [rdi + 0x48], bl
pop rdi
jae 0x415ae5
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x415aff
xor byte [rbp + 0x45], al
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x415ad2
xor dword [rdi + 0x54], ebx
jne 0x415b16
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x415afd
jae 0x415b22
push rbx
je 0x415af1
xor al, 0x64
jne 0x415b33
je 0x415b28
insb byte [rdi], dx
je 0x415b34
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x415b29
push r12
pop rdi
jo 0x415b3a
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x415b27
je 0x415b41
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x415b78
je 0x415b4b
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x415b7e
je 0x415b73
insb byte [rdi], dx
je 0x415b7f
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x415b57
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x415b7e
pop rax
push rsp
pop rdi
push r11
je 0x415b71
je 0x415bb3
jo 0x415bac
jo 0x415b9a
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x415bbf
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x415bd2
jo 0x415bd5
je 0x415ba6
jbe 0x415bce
movsxd rsp, dword [rbp + 0x44]
xor byte [rbp + 0x76], al
add byte [rdi + 0x5a], bl
push rbx
je 0x415ba6
imul esi, dword [rbx + 0x6e], 0x646e61
pop rdi
pop rdx
push rbx
je 0x415bb1
imul ebp, dword [rsi + 0x64], 0x32745349
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x415bf1
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x415c05
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x49], 0x36327453
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x415c28
outsb dx, byte gs:[rsi]
je 0x415c20
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
push rbx
je 0x415c13
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6c65685f
jo 0x415c53
jb 0x415c39
pop rax
jae 0x415c65
push rbx
je 0x415c2b
pop rdi
pop rdi
outsd dx, dword [rsi]
jb 0x415c5a
push r11
je 0x415c31
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push rbx
je 0x415c46
movsxd rsp, dword gs:[rcx + 0x79]
push r12
pop rdi
xor al, 0x74
jns 0x415c8e
push r11
je 0x415c5b
imul esi, dword [rbx + 0x5f], 0x6d756e65
push r11
pop r15
xor eax, 0x756c6176
push r11
cmp byte [rdi + 0x49], bl
jo 0x415c94
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x415cb8
push r11
cmp byte [rdi + 0x44], bl
jo 0x415ca0
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x415c8e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x415cc3
push r10
push rbx
je 0x415c9a
je 0x415cce
jb 0x415ccd
xor ch, byte fs:[rcx + 0x64]
push rbx
je 0x415ca5
jb 0x415cdc
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x415ce0
pop rdi
jb 0x415ce3
jb 0x415ce7
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x415cfd
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x415ccb
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x415cef
cmp byte [rbp + 0x73], dl
je 0x415cef
jae 0x415d14
push rbx
je 0x415ce3
xor al, 0x64
jne 0x415d25
je 0x415d1a
insb byte [rdi], dx
je 0x415d26
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x50], eax
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x415d4b
jo 0x415d4e
je 0x415d1f
jbe 0x415d47
movsxd rsp, dword [rbp + 0x35]
ja 0x415d55
imul esi, dword [rbp + 0x49], 0x5f394152
movsxd rsp, dword [r11 + 0x49]
push rbx
je 0x415d2f
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x415d37
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x415d7f
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x415d6b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x415da4
je 0x415db9
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x415d8a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x415dc9
movsxd rbx, dword [rdi + 0x73]
je 0x415dd7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x415dd2
je 0x415de7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
push rax
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x415dd3
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x415e24
je 0x415e19
outsb dx, byte [rsi]
push r8
push rbx
je 0x415df8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x415e37
movsxd rbx, dword [rdi + 0x73]
je 0x415e45
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x415e40
je 0x415e55
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insd dword [rdi], dx
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x415e38
je 0x415e6c
jb 0x415e6b
xor al, 0x73
ja 0x415e6d
jo 0x415e53
push rdx
push rbx
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x415e8e
jo 0x415e91
je 0x415e62
jbe 0x415e8a
movsxd rsp, dword [rbp + 0x31]
xor al, 0x77
jb 0x415e91
je 0x415e8f
push rbx
imul esp, dword [rdi + 0x6e], 0x6e496465
je 0x415e7d
imul eax, dword [rbp + 0x45], 0x5f546350
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x415ea8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x415eb1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x415ea5
push rbx
je 0x415e95
je 0x415ec9
jb 0x415ec8
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x415eb5
je 0x415ee9
jb 0x415ee8
xor al, byte fs:[r13 + 0x4f]
push rbx
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x415f08
jo 0x415f0b
je 0x415edc
jbe 0x415f04
movsxd rsp, dword [rbp + 0x35]
ja 0x415f12
imul esi, dword [rbp + 0x49], 0x31314152
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x415ee7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x415f26
movsxd rbx, dword [rdi + 0x73]
je 0x415f34
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x415f2f
je 0x415f44
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rax, dword [rbp + 0x45]
push rbx
je 0x415f22
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x415f2a
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x415f72
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x415f66
je 0x415f9a
jb 0x415f99
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x415f73
pop rdi
push rbx
jo 0x415fa6
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x415fb2
pop rdi
jae 0x415fb8
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x415fbc
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x415fd9
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x415faf
xor ebx, dword [rdi + 0x53]
jo 0x415fe1
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x415fed
pop rdi
jo 0x416000
jb 0x415fed
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x415fd0
je 0x416004
jb 0x416003
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x415fdb
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416022
push rax
jbe 0x416033
jbe 0x416005
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416032
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41604f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x416029
jbe 0x41605a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x416033
je 0x416067
jb 0x416066
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41604c
je 0x416080
jb 0x41607f
xor dword fs:[r13 + 0x4f], eax
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x416059
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x4160a3
jb 0x4160a6
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x41606f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4160ae
movsxd rbx, dword [rdi + 0x73]
je 0x4160bc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4160b7
je 0x4160cc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x4160c4
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4160b6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4160f5
movsxd rbx, dword [rdi + 0x73]
je 0x416103
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4160fe
je 0x416113
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x416122
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x416106
je 0x416148
jo 0x416141
push r8
cmp byte [rbp + 0x73], dl
je 0x416122
jae 0x416147
push rbx
je 0x416116
xor al, 0x64
jne 0x416158
je 0x41614d
insb byte [rdi], dx
je 0x416159
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x416147
xor dword [rdi + 0x54], ebx
jne 0x41618b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41615c
xor al, 0x64
jne 0x41619e
je 0x416193
insb byte [rdi], dx
je 0x41619f
xor qword [r10], rsi
jne 0x4161b4
jo 0x4161b7
je 0x416188
jbe 0x4161b0
movsxd rsp, dword [rbp + 0x45]
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41618e
xor eax, 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
pop rdi
jae 0x4161d1
jb 0x4161d1
push rbx
je 0x4161a8
je 0x4161dc
jb 0x4161db
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4161b3
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4161fa
push rax
jbe 0x41620b
jbe 0x4161dd
push r11
push r11
pop rdi
push r11
pop rdi
push r11
je 0x4161dc
xor byte [rbx + 0x68], dh
jb 0x416216
pop rdi
jo 0x416229
jb 0x416200
push rsp
pop rdi
push r10
push r12
xor byte [rdi + 0x44], bl
jo 0x416211
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
cmp qword [r9 + 0x6e], rcx
jo 0x416244
je 0x416217
imul ebp, dword [rbp], 0x534e5a5f
je 0x41620d
xor bl, byte [rdi + 0x4d]
jns 0x416243
pop rdi
je 0x416246
jb 0x41624e
jae 0x416260
insb byte [rdi], dx
je 0x41624d
je 0x416269
jo 0x416257
push r11
je 0x416228
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x416262
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x416276
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x76], 0x45324345
jbe 0x416219
pop rdi
pop rdx
push rbx
push r11
je 0x416258
je 0x41628c
jb 0x41628b
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x416265
xor ebp, dword [rbp + 0x6f]
jbe 0x41629e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41627d
je 0x4162b1
jb 0x4162b0
xor al, byte fs:[r13 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41628b
xor bl, byte [rdi + 0x5f]
je 0x4162c0
push 0x65706c65
jb 0x4162b1
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x4162b6
jae 0x4162db
push r11
je 0x4162ab
xor al, 0x64
jne 0x4162ed
je 0x4162e2
insb byte [rdi], dx
je 0x4162ee
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x4162cb
xor dword [rdi + 0x54], ebx
jne 0x41630f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x416306
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4162ee
xor bl, byte [rdi + 0x44]
jae 0x416337
jb 0x416334
jns 0x416326
jne 0x416342
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x41634b
jb 0x416348
jns 0x416324
push rax
push rbx
je 0x416317
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x416356
movsxd rbx, dword [rdi + 0x73]
je 0x416364
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41635f
je 0x416374
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x416368
pop rdi
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x416397
je 0x416368
jbe 0x416390
movsxd rsp, dword [rbp + 0x34]
jb 0x416391
push r10
imul edx, dword [rbx + 0x31], 0x3153495f
pop rdi
push rbx
xor dword [rdi + 0x45], ebx
push rbx
je 0x41637b
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x4163c5
jb 0x416385
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x4163e0
jb 0x4163c2
je 0x4163a2
xor al, 0x69
jae 0x4163d4
movsxd rbp, dword [rdi + 0x6e]
jbe 0x4163df
jb 0x4163f0
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x4163eb
insb byte [rdi], dx
jne 0x4163f2
xor al, 0x74
jns 0x416404
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x4163f0
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4163dc
xor dword [rdi + 0x54], ebx
jne 0x416420
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x416437
jo 0x41643a
je 0x41640d
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x416440
je 0x416435
insb byte [rdi], dx
je 0x416441
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x416464
push r8
push rbx
je 0x416432
je 0x416466
jb 0x416465
push rdx
push r11
je 0x41643a
xor ebp, dword [rbp + 0x6f]
jbe 0x416473
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x416456
xor byte [rbx + 0x68], dh
jb 0x416490
pop rdi
jo 0x4164a3
jb 0x41647a
push rbx
je 0x41646b
je 0x41649f
jb 0x41649e
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4164ae
pop rdi
jae 0x4164ac
xor dword [r9 + 0x4e], ecx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x4164c2
push r11
je 0x41648b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4164d2
push rax
jbe 0x4164e3
jbe 0x4164b5
jbe 0x4164ba
push r11
pop rdi
push r12
pop rdi
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x4164fa
jo 0x4164fd
je 0x4164ce
jbe 0x4164f6
movsxd rsp, dword [rbp + 0x31]
xor dword [rdi + 0x72], esi
imul esi, dword [rbp + 0x53], 0x6e697274
push r8
movsxd rbp, dword [r13 + 0x62]
add byte [rdi + 0x5a], bl
xor al, 0x72
push r10
imul edx, dword [rbx + 0x30], 0x5f30535f
push rbx
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x45], bl
jbe 0x416508
jo 0x416515
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x416500
xor al, 0x5f
push rbx
jo 0x416533
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x416528
imul r14, qword [rax], 0x49615345
push rbx
je 0x416520
je 0x416554
jb 0x416553
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41652b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416572
push rax
jbe 0x416583
jbe 0x416555
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
je 0x416566
push rdx
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41655d
xor dword [rdi + 0x54], ebx
jne 0x4165a1
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x416572
xor al, 0x64
jne 0x4165b4
je 0x4165a9
insb byte [rdi], dx
je 0x4165b5
xor qword [r8], rsi
jne 0x4165ca
jo 0x4165cd
je 0x4165a0
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push rbx
je 0x4165af
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4165ee
movsxd rbx, dword [rdi + 0x73]
je 0x4165fc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4165f7
je 0x41660c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4165e5
pop rdi
push rbx
jo 0x416618
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x416624
pop rdi
jae 0x41662a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41662e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41664b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41661f
xor bl, byte [rdi + 0x5f]
je 0x416654
push 0x65706c65
jb 0x416645
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x416634
xor al, 0x64
jne 0x416676
je 0x41666b
insb byte [rdi], dx
je 0x416677
cmp qword [r9 + 0x6e], rcx
jo 0x41668d
je 0x416660
imul ebp, dword [rbp + 0x45], 0x52454549
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41665a
xor dword [rdi + 0x54], ebx
jne 0x41669e
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x416695
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x4166c2
jo 0x4166c5
je 0x416696
jbe 0x4166be
movsxd rsp, dword [rbp + 0x31]
xor byte [rsi + 0x6c], ah
jne 0x4166d0
push 0x6279614d
jbe 0x416666
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4166e2
jo 0x4166e5
je 0x4166b6
jbe 0x4166de
movsxd rsp, dword [rbp + 0x39]
ja 0x4166ec
imul esi, dword [rbp + 0x43], 0x45726168
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4166c0
outsw dx, word [rsi]
jb 0x416704
jb 0x4166f4
push r10
jbe 0x41670b
push r12
pop rdi
push rdx
push rbx
je 0x4166d0
jb 0x416707
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41670b
pop rdi
jb 0x41670e
jb 0x416712
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x416729
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4166f4
je 0x41670e
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x416744
jo 0x416747
je 0x41671a
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41674d
je 0x416742
insb byte [rdi], dx
je 0x41674e
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x416726
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41674d
pop rax
push rsp
pop rdi
push r11
je 0x416740
je 0x416782
jo 0x41677b
jo 0x416769
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41678e
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41675c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41679d
push rbx
je 0x416774
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4167b3
movsxd rbx, dword [rdi + 0x73]
je 0x4167c1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4167bc
je 0x4167d1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4167b1
xor al, 0x5f
push rbx
jo 0x4167e4
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x4167d9
imul r14, qword [rax], 0x49615345
push rbx
je 0x4167d1
je 0x416805
jb 0x416804
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4167dc
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416823
push rax
jbe 0x416834
jbe 0x416806
xor dword [rbp + 0x45], eax
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x416806
xor dword [rdi + 0x54], ebx
jne 0x41684a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41681b
xor al, 0x64
jne 0x41685d
je 0x416852
insb byte [rdi], dx
je 0x41685e
cmp byte [r13 + 0x73], dl
je 0x416843
jae 0x416868
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push rbx
je 0x416855
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x416894
movsxd rbx, dword [rdi + 0x73]
je 0x4168a2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41689d
je 0x4168b2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41688b
xor dword [rdi + 0x54], ebx
jne 0x4168cf
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x4168e6
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4168b2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4168eb
je 0x416900
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4168cf
je 0x416903
jb 0x416902
cmp byte fs:[r13 + 0x61], r13b
js 0x416905
jae 0x416911
jp 0x41690f
push r10
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x4168ee
je 0x416922
jb 0x416921
cmp byte fs:[rdx + 0x6f], ch
imul ebp, dword [rsi + 0x61], 0x45656c62
jbe 0x4168ca
pop rdi
je 0x416931
add byte [rdi + 0x5a], bl
push r11
je 0x416909
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41692d
xor dword [rax], esi
jne 0x41695d
jo 0x416960
je 0x416933
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x416966
je 0x41695b
insb byte [rdi], dx
je 0x416967
push r11
xor byte [rdi + 0x45], bl
jo 0x41697e
jbe 0x41690d
pop rdi
pop rdx
push rbx
je 0x416944
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x416985
push rbx
je 0x41695c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41699b
movsxd rbx, dword [rdi + 0x73]
je 0x4169a9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4169a4
je 0x4169b9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x416970
pop rdi
pop rdx
push rbx
je 0x4169a8
xor ebx, dword [rdi + 0x53]
jo 0x4169da
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4169e6
pop rdi
jo 0x4169f9
jb 0x4169e6
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4169c9
je 0x4169fd
jb 0x4169fc
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4169d4
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416a1b
push rax
jbe 0x416a2c
jbe 0x4169fe
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416a2b
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x416a48
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor dword [r13 + 0x53], eax
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x416a26
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x416a60
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x416a74
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x43], 0x69694531
add byte [rdi + 0x5a], bl
push rbx
je 0x416a4f
imul ebp, dword [rsi + 0x64], 0x32745349
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x416a8f
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x416aa3
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x4a], 0x36327453
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x416ac6
outsb dx, byte gs:[rsi]
je 0x416abe
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
push rbx
je 0x416ab1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6c65685f
jo 0x416af1
jb 0x416ad7
pop rax
jae 0x416b03
push rbx
je 0x416ac9
pop rdi
pop rdi
outsd dx, dword [rsi]
jb 0x416af8
push rbx
je 0x416acf
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push rbx
je 0x416ae4
movsxd rsp, dword gs:[rcx + 0x79]
push r12
pop rdi
xor al, 0x74
jns 0x416b2c
push r11
je 0x416af9
imul esi, dword [rbx + 0x5f], 0x6d756e65
push r11
pop r15
xor eax, 0x756c6176
push r11
cmp byte [rdi + 0x4a], bl
jo 0x416b32
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x416b56
push r11
cmp byte [rdi + 0x44], bl
jo 0x416b3e
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x416b29
xor bl, byte [rdi + 0x5f]
je 0x416b5e
push 0x65706c65
jb 0x416b4f
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x416b3e
xor al, 0x64
jne 0x416b80
je 0x416b75
insb byte [rdi], dx
je 0x416b81
cmp byte [r13 + 0x73], dl
je 0x416b66
jae 0x416b8b
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x416b63
xor dword [rdi + 0x54], ebx
jne 0x416ba7
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x416b9e
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x416b8a
je 0x416bcc
jo 0x416bc5
push rax
xor dword [rdx], esi
jne 0x416bd6
jo 0x416bd9
je 0x416baa
jbe 0x416bd2
movsxd rsp, dword [rbp + 0x53]
je 0x416b9f
xor al, 0x64
jne 0x416be1
je 0x416bd6
insb byte [rdi], dx
je 0x416be2
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x416bd7
je 0x416c05
jb 0x416c0f
imul ebp, dword [rsi + 0x61], 0x40766574
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x416bed
xor byte [rdi + 0x48], bl
pop rdi
jae 0x416c2c
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x416c46
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x416c19
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x416c5a
push r11
je 0x416c2f
je 0x416c63
jb 0x416c62
push rbx
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x416c8a
je 0x416c5b
jbe 0x416c83
movsxd rsp, dword [rbp + 0x31]
xor esi, dword [rdx + 0x65]
push rbx
imul esp, dword [rdi + 0x6e], 0x6e496465
je 0x416c75
imul eax, dword [rbp + 0x45], 0x5f545262
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
push rbx
je 0x416c75
je 0x416ca9
jb 0x416ca8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x416c80
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416cc7
push rax
jbe 0x416cd8
jbe 0x416caa
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x416ca4
xor bl, byte [rdi + 0x5f]
je 0x416cd9
push 0x65706c65
jb 0x416cca
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x416cb9
xor al, 0x64
jne 0x416cfb
je 0x416cf0
insb byte [rdi], dx
je 0x416cfc
xor qword [r10], rsi
jne 0x416d11
jo 0x416d14
je 0x416ce5
jbe 0x416d0d
movsxd rsp, dword [rbp + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x416ce3
xor dword [rdi + 0x54], ebx
jne 0x416d27
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x416d1e
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x416d0b
je 0x416d3f
jb 0x416d3e
xor ch, byte fs:[rcx + 0x64]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x416d1b
xor al, 0x5f
pop rdi
jae 0x416d57
jb 0x416d57
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x416d43
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416d62
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x416d7f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rdi + rbx*2], esi
pop r15
je 0x416d80
insb byte [rdi], dx
je 0x416d8c
jb 0x416d6e
push rdx
push r11
je 0x416d67
je 0x416da9
jo 0x416d97
pop rdi
imul ebp, dword [rsi + 0x66], 0x5a5f006f
xor qword [rax], r14
jne 0x416db4
jo 0x416db7
je 0x416d8a
imul ebp, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
push rbx
je 0x416d85
movsxd rbp, dword [rdi + 0x70]
jns 0x416d9f
push rax
movsxd rdx, dword [rbx + 0x30]
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416dd1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x416dda
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x416dce
push rbx
je 0x416dbf
je 0x416df3
jb 0x416df2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x416dca
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416e11
push rax
jbe 0x416e22
jbe 0x416df4
xor al, byte [r13 + 0x52]
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rsp
push rsi
cmp dword [rcx + 0x6e], ecx
jo 0x416e3a
je 0x416e0d
imul ebp, dword [rbp], 0x314e5a5f
xor cl, byte [rdi + 0x75]
je 0x416e44
jne 0x416e4a
jbe 0x416e43
movsxd rsp, dword [rbp + 0x31]
cmp byte [rdi + 0x72], dh
imul esi, dword [rbp + 0x46], 0x74616f6c
imul ebp, dword [rsi + 0x67], 0x6e696f50
je 0x416e3a
push r8
movsxd rdx, dword [rdi + rbx*2 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x416e33
xor byte [rdi + 0x48], bl
pop rdi
jae 0x416e72
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x416e46
xor al, 0x64
jne 0x416e88
je 0x416e7d
insb byte [rdi], dx
je 0x416e89
cmp byte [r13 + 0x73], dl
je 0x416e6e
jae 0x416e93
xor dword [rbp + 0x45], eax
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x416e8c
jae 0x416eb1
xor al, 0x77
outsd dx, dword [rsi]
jb 0x416ebc
xor eax, 0x31787863
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x416e95
imul esi, dword [rbx + 0x69], 0x64666e
pop rdi
pop rdx
push r11
je 0x416e9f
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x416ec3
cmp byte [rbp + 0x73], dl
je 0x416ec3
jae 0x416ee8
push rbx
je 0x416eb7
xor al, 0x64
jne 0x416ef9
je 0x416eee
insb byte [rdi], dx
je 0x416efa
push r11
xor byte [rdi + 0x45], bl
jo 0x416f11
jbe 0x416ea0
pop rdi
pop rdx
push rbx
je 0x416ed7
xor al, 0x5f
pop rdi
jae 0x416f13
jb 0x416f13
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x416eff
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416f1e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x416f3b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4e]
push rbx
je 0x416f11
je 0x416f45
jb 0x416f44
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x416f1c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x416f63
push rax
jbe 0x416f74
jbe 0x416f46
push r11
push r11
pop rdi
push r11
pop r15
push r11
je 0x416f46
cmp dword [rdi + 0x53], ebx
jo 0x416f79
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x416f89
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x416f83
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x416f6f
xor byte [rdi + 0x48], bl
pop rdi
jae 0x416fae
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x416fc9
je 0x416f9c
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x416fd6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x416fdf
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x416fd3
push rbx
je 0x416fc5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x417004
movsxd rbx, dword [rdi + 0x73]
je 0x417012
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41700d
je 0x417022
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x416fce
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41704a
jo 0x41704d
je 0x41701e
jbe 0x417046
movsxd rsp, dword [rbp + 0x35]
ja 0x417054
imul esi, dword [rbp + 0x49], 0x534e4b52
je 0x417023
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x417062
movsxd rbx, dword [rdi + 0x73]
je 0x417070
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41706b
je 0x417080
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x4b]
movsxd rcx, dword [rcx + 0x45]
push rbx
je 0x417063
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41706b
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x4170b3
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4170d2
jno 0x4170b8
push rax
push rbx
je 0x4170a9
je 0x4170dd
jb 0x4170dc
push rdx
push r11
je 0x4170b1
xor ebp, dword [rbp + 0x6f]
jbe 0x4170ea
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4170cd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x417106
je 0x41711b
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x4170eb
je 0x41711f
jb 0x41711e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4170f6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41713d
push rax
jbe 0x41714e
jbe 0x417120
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41715a
jb 0x41715d
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push rbx
pop rdi
jbe 0x417149
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x41714f
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41713b
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41717a
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x417194
jo 0x417197
je 0x417168
jbe 0x417190
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x417172
xor ebp, dword [rbp + 0x6f]
jbe 0x4171ab
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41718a
je 0x4171be
jb 0x4171bd
jo 0x4171cd
jbe 0x417160
pop rdi
pop rdx
ja 0x4171d7
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [rip + 0x64634b5f], esi
jbe 0x4171bc
jo 0x4171c9
push rsp
pop rdi
add byte [rdi + 0x49], bl
pop r15
jae 0x4171f7
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x4171c4
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x417215
outsb dx, byte gs:[rsi]
je 0x41720d
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x69]
jbe 0x417214
push r10
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41720c
je 0x417226
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41722c
jae 0x417251
push rbx
je 0x417220
xor al, 0x64
jne 0x417262
je 0x417257
insb byte [rdi], dx
je 0x417263
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41723c
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x417263
pop rax
push rsp
pop rdi
push r11
je 0x417256
je 0x417298
jo 0x417291
jo 0x41727f
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4172a4
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x417273
xor dword [rdi + 0x54], ebx
jne 0x4172b7
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x4172ce
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41729e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4172df
push rbx
je 0x4172b6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4172f5
movsxd rbx, dword [rdi + 0x73]
je 0x417303
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4172fe
je 0x417313
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x4172ca
pop rdi
pop rdx
push rbx
je 0x417300
pop rdi
pop rdi
je 0x41733c
jb 0x417345
ja 0x417337
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x41732c
outsw dx, word [rsi]
jb 0x417370
jb 0x417360
push r11
je 0x417332
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x417383
outsb dx, byte gs:[rsi]
je 0x41737b
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
push r12
pop rdi
push rdx
push rbx
je 0x417371
jb 0x4173a8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4173ac
pop rdi
jb 0x4173af
jb 0x4173b3
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x4173ca
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x417394
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4173d3
insd dword [rdi], dx
xor byte [rbp + 0x53], al
je 0x4173a8
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x4173f9
outsb dx, byte gs:[rsi]
je 0x4173f1
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4173f7
jae 0x41743c
jo 0x417411
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x417443
je 0x417416
imul ebp, dword [rbp + 0x45], 0x5f545276
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x417413
xor byte [rbx + 0x68], dh
jb 0x41744d
pop rdi
jo 0x417460
jb 0x417437
push rbx
je 0x417428
je 0x41745c
jb 0x41745b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x417433
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41747a
push rax
jbe 0x41748b
jbe 0x41745d
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x417458
xor byte [rbx + 0x68], dh
jb 0x417492
pop rdi
jo 0x4174a5
jb 0x41747c
push rbx
je 0x41746d
je 0x4174a1
jb 0x4174a0
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4174b0
pop rdi
jae 0x4174ae
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x417488
pop rdi
push rbx
jo 0x4174bb
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4174c7
pop rdi
jae 0x4174cd
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4174d1
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4174ee
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x4174d4
jae 0x4174f9
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4174d4
je 0x417516
jo 0x41750f
push r8
jbe 0x417520
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4174ed
xor bl, byte [rdi + 0x5f]
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
jae 0x41752e
jb 0x41752e
pop rdi
jb 0x41753d
insd dword [rdi], dx
pop rdi
je 0x41753a
imul esi, dword [rbx + 0x5f], 0x706c6568
jb 0x417525
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417544
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x417561
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
jbe 0x41754e
push r11
je 0x417531
xor al, 0x5f
pop rdi
jae 0x41756d
jb 0x41756d
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x417559
pop rax
push rsp
pop rdi
jp 0x417517
pop rdi
pop rdx
push rbx
je 0x41754e
pop rdi
push rbx
jo 0x417581
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41758d
pop rdi
jae 0x417593
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417597
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4175b4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x4175ca
jb 0x4175c7
jns 0x41759f
jbe 0x41755c
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x4175a8
jae 0x4175cd
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4175d6
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4175ef
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4175c8
je 0x4175fc
jb 0x4175fb
push rbx
je 0x4175d1
jbe 0x417602
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4175ee
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41762f
push r11
je 0x417604
je 0x417638
jb 0x417637
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x4175ef
pop rdi
pop rdx
push rbx
je 0x417626
xor byte [rdi + 0x48], bl
pop rdi
jae 0x417665
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x417639
xor al, 0x64
jne 0x41767b
je 0x417670
insb byte [rdi], dx
je 0x41767c
cmp byte [r13 + 0x73], dl
je 0x417661
jae 0x417686
xor dword [rbp + 0x45], eax
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41769c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4176a5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x417699
push rbx
je 0x41768a
je 0x4176be
jb 0x4176bd
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x417695
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4176dc
push rax
jbe 0x4176ed
jbe 0x4176bf
xor dword [r13 + 0x52], eax
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x4176bf
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4176e3
xor dword [rax], esi
jne 0x417713
jo 0x417716
je 0x4176e9
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41771c
je 0x417711
insb byte [rdi], dx
je 0x41771d
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x417708
jbe 0x4176c5
pop rdi
pop rdx
push rsp
push rbx
xor dword [rdx], esi
jne 0x417742
jo 0x417745
je 0x417716
jbe 0x41773e
movsxd rsp, dword [rbp]
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x417756
je 0x417727
jbe 0x41774f
movsxd rsp, dword [rbp + 0x34]
jb 0x417750
push r10
imul edx, dword [rbx + 0x31], 0x4545495f
push rbx
je 0x417734
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x41777e
jb 0x41773e
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x417799
jb 0x41777b
je 0x41775b
xor al, 0x69
jae 0x41778d
movsxd rbp, dword [rdi + 0x6e]
jbe 0x417798
jb 0x4177a9
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x4177a4
insb byte [rdi], dx
jne 0x4177ab
xor al, 0x74
jns 0x4177bd
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x4177a9
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x4177dc
je 0x4177ad
jbe 0x4177d5
movsxd rsp, dword [rbp + 0x43]
xor al, byte [rbp + 0x50]
movsxd rdx, dword [r11 + 0x31]
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x4177b0
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4177d4
cmp byte [rbp + 0x73], dl
je 0x4177d4
jae 0x4177f9
push rbx
je 0x4177c8
xor al, 0x64
jne 0x41780a
je 0x4177ff
insb byte [rdi], dx
je 0x41780b
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x4177f6
jbe 0x4177b3
pop rdi
pop rdx
push rbx
je 0x4177eb
xor ebx, dword [rdi + 0x53]
jo 0x41781d
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x417829
pop rdi
jo 0x41783c
jb 0x417829
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41780c
je 0x417840
jb 0x41783f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x417817
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41785e
push rax
jbe 0x41786f
jbe 0x417841
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41786e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41788b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
cmp byte [rdi + 0x4d], bl
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rax, dword [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x417872
je 0x4178a6
jb 0x4178a5
xor cl, byte fs:[r9 + 0x52]
jbe 0x4178bf
push r12
pop rdi
jo 0x4178a3
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41788f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4178c8
je 0x4178dd
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4178ac
je 0x4178e0
jb 0x4178df
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor dword [rdi + 0x50], ebx
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4178ea
xor dword [rdi + 0x54], ebx
jne 0x41792e
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x417946
je 0x417919
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41794c
je 0x417941
insb byte [rdi], dx
je 0x41794d
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push r11
je 0x41793c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41797b
movsxd rbx, dword [rdi + 0x73]
je 0x417989
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x417984
je 0x417999
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x74735f63
jb 0x417980
jbe 0x41797d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4179b6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4179bf
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4179b3
push rbx
je 0x4179a3
je 0x4179d7
jb 0x4179d6
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4179ee
jb 0x4179f1
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x49], ebx
push rdx
jbe 0x4179fd
jbe 0x4179dd
push rsp
pop rdi
jo 0x4179e1
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4179d1
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x417a1b
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x417a2a
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x417a48
outsb dx, byte gs:[rsi]
je 0x417a40
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x49], ecx
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x417a5e
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x417a5e
jae 0x417a83
xor eax, 0x766c6f73
jbe 0x417a27
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x417aa3
jo 0x417aa6
je 0x417a77
jbe 0x417a9f
movsxd rsp, dword [rbp + 0x35]
ja 0x417aad
imul esi, dword [rbp + 0x49], 0x5f394152
movsxd rsp, dword [r11 + 0x4a]
push rbx
je 0x417a87
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x417a8f
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x417ad7
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x417b08
jo 0x417b0b
je 0x417aeb
je 0x417b0c
imul ebp, dword [rsi + 0x67], 0x76453044
add byte [rdi + 0x5a], bl
push rbx
je 0x417ade
jbe 0x417b0f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x417ae8
je 0x417b1c
jb 0x417b1b
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x417b32
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r10
jbe 0x417b4a
jbe 0x417b1e
jo 0x417b2b
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x417b16
xor dword [rdi + 0x54], ebx
jne 0x417b5a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x417b2b
xor al, 0x64
jne 0x417b6d
je 0x417b62
insb byte [rdi], dx
je 0x417b6e
xor qword [r10], rsi
jne 0x417b83
jo 0x417b86
je 0x417b57
jbe 0x417b7f
movsxd rsp, dword [rbp + 0x45]
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x417b60
jae 0x417ba5
jo 0x417b7a
push rax
xor dword [rax], esi
jne 0x417bab
jo 0x417bae
je 0x417b81
imul ebp, dword [rbp + 0x45], 0x5f545276
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x417b7e
xor byte [rbx + 0x68], dh
jb 0x417bb8
pop rdi
jo 0x417bcb
jb 0x417ba2
push rbx
je 0x417b93
je 0x417bc7
jb 0x417bc6
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x417bd6
pop rdi
jae 0x417bd4
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x417bad
xor dword [rdi + 0x54], ebx
jne 0x417bf1
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x417bd8
jae 0x417bfd
push rbx
je 0x417bcc
xor al, 0x64
jne 0x417c0e
je 0x417c03
insb byte [rdi], dx
je 0x417c0f
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x417c04
push r12
pop rdi
jo 0x417c15
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x417c02
xor al, 0x64
jne 0x417c44
je 0x417c39
insb byte [rdi], dx
je 0x417c45
cmp qword [r9 + 0x6e], rcx
jo 0x417c5b
je 0x417c2e
imul ebp, dword [rbp + 0x45], 0x50456c63
push rbx
xor byte [rdi], bl
jae 0x417c6a
jb 0x417c64
outsb dx, byte gs:[rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x417c3e
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x417c74
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x417c7e
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x50], al
movsxd rdx, dword [rbx + 0x30]
pop rdi
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
insd dword [rdi], dx
insd dword [rdi], dx
movsxd rbp, dword [rbp + 0x70]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x417c84
outsw dx, word [rsi]
jb 0x417cc8
jb 0x417cb8
push r10
xor dword [r15 + rbx*2], esi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x417c96
jb 0x417ccd
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x417cd1
pop rdi
jb 0x417cd4
jb 0x417cd8
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x417cef
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x417cb9
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x417cdd
cmp byte [rbp + 0x73], dl
je 0x417cdd
jae 0x417d02
push rbx
je 0x417cd1
xor al, 0x64
jne 0x417d13
je 0x417d08
insb byte [rdi], dx
je 0x417d14
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x417d36
jo 0x417d39
je 0x417d0a
jbe 0x417d32
movsxd rsp, dword [rbp + 0x35]
ja 0x417d40
imul esi, dword [rbp + 0x49], 0x34314152
pop rdi
movsxd rsp, dword [r9 + r9*2 + 0x63]
push rbx
je 0x417d1c
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x417d24
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x417d6c
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x417d59
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x417d93
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x417da7
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x43], 0x69694532
add byte [rdi + 0x5a], bl
push rbx
je 0x417d85
outsw dx, word [rsi]
jb 0x417dc9
jb 0x417db9
push r11
je 0x417d8b
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x417dc5
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x417dd9
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x525f544f
push rbx
je 0x417daf
jb 0x417de6
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x417dea
pop rdi
jb 0x417ded
jb 0x417df1
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x417e08
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x417dd2
xor dword [rdi + 0x54], ebx
jne 0x417e16
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x417de7
xor al, 0x64
jne 0x417e29
je 0x417e1e
insb byte [rdi], dx
je 0x417e2a
xor qword [r8], rsi
jne 0x417e3f
jo 0x417e42
je 0x417e15
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
insb byte [rdi], dx
outsd dx, dword [rsi]
jae 0x417de8
pop rdi
pop rdx
push rbx
je 0x417e1f
xor bl, byte [rdi + 0x5f]
jae 0x417e5b
jb 0x417e5b
pop rdi
jo 0x417e6e
jb 0x417e45
push rbx
je 0x417e36
je 0x417e6a
jb 0x417e69
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x417e79
pop rdi
jae 0x417e77
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417e7b
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x417e98
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x417e9f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x417eb8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x417e91
je 0x417ec5
jb 0x417ec4
push rbx
je 0x417e9a
jbe 0x417ecb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
insd dword [rdi], dx
imul ebp, dword [rsi], 0x74736574
outsd dx, dword [rsi]
jne 0x417efb
je 0x417e8f
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x417f0b
jo 0x417f0e
je 0x417edf
jbe 0x417f07
movsxd rsp, dword [rbp + 0x35]
ja 0x417f15
imul esi, dword [rbp + 0x49], 0x5f364152
movsxd rbp, dword [r9 + 0x4a]
push rdx
cmp dword [r15 + 0x53], ebx
xor dword [rdi + 0x63], ebx
push rbx
je 0x417ef7
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x417eff
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
cmp byte [rdi + 0x4f], bl
push rsp
xor byte [rdi + 0x44], bl
jo 0x417f47
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x417f34
xor byte [rdi + 0x5f], bl
jne 0x417f75
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x417f90
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x417f91
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x417fa5
push r11
je 0x417f61
xor ebp, dword [rbp + 0x6f]
jbe 0x417f9a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x417f7b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x417fba
movsxd rbx, dword [rdi + 0x73]
je 0x417fc8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x417fc3
je 0x417fd8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x417fbe
je 0x417fd8
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41800e
jo 0x418011
je 0x417fe2
jbe 0x41800a
movsxd rsp, dword [rbp + 0x53]
je 0x417fd7
xor al, 0x64
jne 0x418019
je 0x41800e
insb byte [rdi], dx
je 0x41801a
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x417ff3
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41801a
pop rax
push rsp
pop rdi
push r11
je 0x41800d
je 0x41804f
jo 0x418048
jo 0x418036
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41805b
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41802f
je 0x418063
jb 0x418062
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x418072
pop rdi
jae 0x418070
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x418047
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x418080
je 0x418095
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x418065
je 0x418099
jb 0x418098
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x418070
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4180b7
push rax
jbe 0x4180c8
jbe 0x41809a
jae 0x4180d3
jb 0x4180d0
jns 0x4180ac
push rbx
pop rdi
jbe 0x4180bc
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4180a8
xor dword [rdi + 0x54], ebx
jne 0x4180ec
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x4180bd
xor al, 0x64
jne 0x4180ff
je 0x4180f4
insb byte [rdi], dx
je 0x418100
cmp byte [r13 + 0x73], dl
je 0x4180e5
jae 0x41810a
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4180ea
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x418120
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41812a
pop rdi
xor byte [rbp + 0x50], al
movsxd rdx, dword [rbx + 0x30]
pop rdi
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x418115
xor bl, byte [rdi + 0x5f]
je 0x41814a
push 0x65706c65
jb 0x41813b
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x418170
jo 0x418173
je 0x418144
jbe 0x41816c
movsxd rsp, dword [rbp + 0x49]
push rbx
je 0x41813a
xor al, 0x64
jne 0x41817c
je 0x418171
insb byte [rdi], dx
je 0x41817d
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x418158
xor dword [rdi + 0x54], ebx
jne 0x41819c
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x418193
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rsp
push rbx
push rbx
je 0x418182
je 0x4181b6
jb 0x4181b5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41818d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4181d4
push rax
jbe 0x4181e5
jbe 0x4181b7
add byte [r15 + 0x5a], r11b
push rbx
je 0x4181b2
jbe 0x4181e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4181bc
je 0x4181f0
jb 0x4181ef
push rbx
push r11
xor byte [rdi + 0x45], bl
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x41819d
pop rdi
pop rdx
push rbx
je 0x4181d4
xor dword [rdi + 0x54], ebx
jne 0x418218
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x41822f
jo 0x418232
je 0x418203
jbe 0x41822b
movsxd rsp, dword [rbp + 0x53]
je 0x4181f8
xor al, 0x64
jne 0x41823a
je 0x41822f
insb byte [rdi], dx
je 0x41823b
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x418268
jo 0x41826b
je 0x41823c
jbe 0x418264
movsxd rsp, dword [rbp + 0x35]
ja 0x418272
imul esi, dword [rbp + 0x49], 0x5f364152
movsxd rbp, dword [r9 + 0x49]
push rdx
cmp dword [r15 + 0x53], ebx
xor dword [rdi + 0x63], ebx
push rbx
je 0x418254
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41825c
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
cmp byte [rdi + 0x4f], bl
push rsp
xor byte [rdi + 0x44], bl
jo 0x4182a4
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x418292
imul bp, word [rsp + rbp*2 + 0x49], 0x6350
movsxd rax, dword [rbp + 0x76]
push rsp
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4182a9
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [r13 + 0x4e]
push rbx
je 0x4182bf
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x418324
jo 0x418312
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4182e9
xor byte [rdi + 0x48], bl
pop rdi
jae 0x418328
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x418312
jae 0x418337
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x418325
je 0x418359
jb 0x418358
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x418332
xor byte [rdi + 0x5f], bl
je 0x41836d
jb 0x418376
ja 0x418368
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x418377
pop rdi
jb 0x418385
outsd dx, dword [rsi]
jb 0x418366
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x41835e
je 0x418378
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x4183ae
jo 0x4183b1
je 0x418384
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4183b7
je 0x4183ac
insb byte [rdi], dx
je 0x4183b8
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x418391
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4183b8
pop rax
push rsp
pop rdi
push r11
je 0x4183ab
je 0x4183ed
jo 0x4183e6
jo 0x4183d4
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4183f9
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4183c8
xor byte [rdi + 0x48], bl
pop rdi
jae 0x418407
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x418421
jo 0x418424
je 0x4183f5
jbe 0x41841d
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rsp
push rsi
push rbx
je 0x418402
pop rdi
push rbx
jo 0x418435
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x418441
pop rdi
jae 0x418447
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41844b
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x418468
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x41843e
outsw dx, word [rsi]
jb 0x418482
jb 0x418472
push r10
push rax
cmp byte [rbp + 0x73], dl
je 0x41845a
jae 0x41847f
push r12
pop rdi
push rdx
push rbx
je 0x418454
jb 0x41848b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41848f
pop rdi
jb 0x418492
jb 0x418496
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x4184ad
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x418477
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4184b0
je 0x4184c5
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x418494
je 0x4184c8
jb 0x4184c7
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4184e0
jb 0x4184e3
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor byte [rdi + 0x49], bl
push rdx
jbe 0x4184ef
jbe 0x4184d1
push rbx
xor dword [rdi + 0x50], ebx
push rsp
pop rdi
jo 0x4184d7
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x418508
jo 0x41850b
je 0x4184dc
jbe 0x418504
movsxd rsp, dword [rbp + 0x35]
ja 0x418512
imul esi, dword [rbp + 0x49], 0x5f334152
movsxd rdx, dword [r10 + 0x4b]
push rbx
je 0x4184e7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418526
movsxd rbx, dword [rdi + 0x73]
je 0x418534
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41852f
je 0x418544
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x418528
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x418530
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x418578
push rsp
xor dword [rdi], ebx
insd dword [rdi], dx
insd dword [rdi], dx
jae 0x418597
je 0x418574
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x418579
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41859d
xor dword [rdx], esi
jne 0x4185cd
jo 0x4185d0
je 0x4185a1
jbe 0x4185c9
movsxd rsp, dword [rbp + 0x53]
je 0x418596
xor al, 0x64
jne 0x4185d8
je 0x4185cd
insb byte [rdi], dx
je 0x4185d9
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x4185c4
jbe 0x418581
pop rdi
pop rdi
jae 0x4185f5
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x4185c6
je 0x4185e0
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x418616
jo 0x418619
je 0x4185ea
jbe 0x418612
movsxd rsp, dword [rbp + 0x53]
je 0x4185df
xor al, 0x64
jne 0x418621
je 0x418616
insb byte [rdi], dx
je 0x418622
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x4185fb
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x418622
pop rax
push rsp
pop rdi
push r11
je 0x418615
je 0x418657
jo 0x418650
jo 0x41863e
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x418663
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x418631
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x418667
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x418671
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x50], al
movsxd rdx, dword [r8 + 0x63]
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x418673
jae 0x418698
cmp byte [rdi + 0x65], ah
outsb dx, byte [rsi]
jb 0x41869b
je 0x4186a1
imul eax, dword [rax], 0x534e5a5f
je 0x418677
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4186be
push rax
jbe 0x4186cf
jbe 0x4186a1
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x4a], ebx
push r12
pop rdi
jo 0x4186bc
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x4186ef
je 0x4186c0
jbe 0x4186e8
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x4c], 0x7265776f
movsxd r8, dword [r8]
pop rdi
pop rdx
push rsp
push rsi
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x41870b
je 0x4186dc
jbe 0x418704
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x4186d5
xor byte [rbx + 0x68], dh
jb 0x41870f
pop rdi
jo 0x418722
jb 0x4186f9
push rbx
je 0x4186ea
je 0x41871e
jb 0x41871d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4186f5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41873c
push rax
jbe 0x41874d
jbe 0x41871f
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x418723
cmp dword [rdi + 0x53], ebx
jo 0x418756
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x418766
push rdx
push r12
pop rdi
jo 0x41875c
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x418748
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41876c
xor dword [rax], esi
jne 0x41879c
jo 0x41879f
je 0x418772
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4187a5
je 0x41879a
insb byte [rdi], dx
je 0x4187a6
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r8], rsi
jne 0x4187c9
jo 0x4187cc
je 0x41879f
imul ebp, dword [rbp], 0x74535a5f
cmp byte [rdi + 0x44], bl
jae 0x4187db
jb 0x4187d8
jns 0x4187b4
push rbx
je 0x4187a6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4187e5
movsxd rbx, dword [rdi + 0x73]
je 0x4187f3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4187ee
je 0x418803
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x4187f2
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4187e2
pop rdi
jae 0x418823
jb 0x418820
jns 0x4187fc
push rbx
je 0x4187ec
je 0x418820
jb 0x41881f
jbe 0x41880f
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4187f9
xor byte [rdi + 0x48], bl
pop rdi
jae 0x418838
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x418852
jo 0x418855
je 0x418828
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41882e
xor ebx, dword [rdi + 0x5f]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418876
push r10
jbe 0x418886
push rbx
je 0x418849
cmp dword [rdi + 0x42], ebx
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418890
pop rdi
push 0x65706c65
jb 0x418876
push rsp
pop rdi
jo 0x418887
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x4188b5
jo 0x4188a3
push r11
xor ebx, dword [rdi + 0x44]
jo 0x418895
push rbx
xor al, 0x5f
add byte [rax + 0x74], dh
push 0x64616572
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x4188bd
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x41889c
xor bl, byte [rdi + 0x5f]
je 0x4188d1
push 0x65706c65
jb 0x4188c2
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x4188b1
xor al, 0x64
jne 0x4188f3
je 0x4188e8
insb byte [rdi], dx
je 0x4188f4
xor qword [r8], rsi
jne 0x418909
jo 0x41890c
je 0x4188df
imul ebp, dword [rbp + 0x45], 0x52454549
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x4188d9
xor dword [rdi + 0x54], ebx
jne 0x41891d
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x418914
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4188fb
xor bl, byte [rdi + 0x5f]
je 0x418930
push 0x65706c65
jb 0x418921
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x418956
jo 0x418959
je 0x41892a
jbe 0x418952
movsxd rsp, dword [rbp + 0x4a]
push rbx
je 0x418920
xor al, 0x64
jne 0x418962
je 0x418957
insb byte [rdi], dx
je 0x418963
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41893e
xor dword [rdi + 0x54], ebx
jne 0x418982
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x418979
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x418960
xor bl, byte [rdi + 0x5f]
je 0x418995
push 0x65706c65
jb 0x418986
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x4189bb
jo 0x4189be
je 0x418991
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x4189c5
je 0x4189ba
insb byte [rdi], dx
je 0x4189c6
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x4189a3
xor dword [rdi + 0x54], ebx
jne 0x4189e7
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x4189de
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
push r11
je 0x4189ca
xor ebx, dword [rdi + 0x53]
jo 0x4189fc
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x418a08
pop rdi
jo 0x418a1b
jb 0x418a08
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4189eb
je 0x418a1f
jb 0x418a1e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4189f6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418a3d
push rax
jbe 0x418a4e
jbe 0x418a20
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x418a4d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x418a6a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x418a40
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x418a81
push r11
je 0x418a56
je 0x418a8a
jb 0x418a89
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x418a41
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x418aaa
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x418ab3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x418aa7
push rbx
je 0x418a99
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418ad8
movsxd rbx, dword [rdi + 0x73]
je 0x418ae6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418ae1
je 0x418af6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x418ade
xor bl, byte [rdi + 0x4d]
jns 0x418b14
pop rdi
je 0x418b17
jb 0x418b1f
jae 0x418b31
insb byte [rdi], dx
je 0x418b1e
je 0x418b3a
jo 0x418b28
push r11
je 0x418af9
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x418b33
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x418b47
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x76], 0x45314345
jbe 0x418aea
pop rdi
pop rdx
push rbx
je 0x418b20
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x418b6a
jb 0x418b6d
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x418b34
je 0x418b68
jb 0x418b67
push r11
xor byte [rdi + 0x45], bl
jbe 0x418b5c
push rsp
pop rdi
jo 0x418b60
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x418b91
jo 0x418b94
je 0x418b74
je 0x418b95
imul ebp, dword [rsi + 0x67], 0x76453244
add byte [rdi + 0x5a], bl
push rbx
je 0x418b62
xor byte [rbx + 0x68], dh
jb 0x418b9c
pop rdi
jo 0x418baf
jb 0x418b86
push rbx
je 0x418b77
je 0x418bab
jb 0x418baa
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x418b82
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418bc9
push rax
jbe 0x418bda
jbe 0x418bac
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x418bb0
cmp dword [rdi + 0x53], ebx
jo 0x418be3
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x418bf3
push rdx
push r12
pop rdi
jo 0x418be9
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x418bd5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418c1c
push rax
jbe 0x418c2d
jbe 0x418bff
xor al, byte [r13 + 0x4f]
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x418c00
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418c3f
movsxd rbx, dword [rdi + 0x73]
je 0x418c4d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418c48
je 0x418c5d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor esp, dword [rbp + 0x6e]
jbe 0x418c3f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x418c8d
je 0x418c5e
jbe 0x418c86
movsxd rsp, dword [rbp + 0x34]
jb 0x418c87
push r10
imul edx, dword [rbx + 0x31], 0x31534a5f
pop rdi
push rbx
je 0x418c6e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x418cb8
jb 0x418c78
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x418cd3
jb 0x418cb5
je 0x418c95
xor al, 0x69
jae 0x418cc7
movsxd rbp, dword [rdi + 0x6e]
jbe 0x418cd2
jb 0x418ce3
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x418cde
insb byte [rdi], dx
jne 0x418ce5
xor al, 0x74
jns 0x418cf7
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x418ce3
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x418d15
jo 0x418d18
je 0x418cf8
je 0x418d19
imul ebp, dword [rsi + 0x67], 0x4e5a5f00
push rbx
je 0x418ce8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418d27
movsxd rbx, dword [rdi + 0x73]
je 0x418d35
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418d30
je 0x418d45
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x418d2f
xor ebp, dword [rbp + 0x6f]
jbe 0x418d68
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x418d49
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418d88
movsxd rbx, dword [rdi + 0x73]
je 0x418d96
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418d91
je 0x418da6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x53]
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push r11
je 0x418d82
pop rdi
push rbx
jo 0x418db5
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x418dc1
pop rdi
jae 0x418dc7
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x418dcb
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x418de8
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x418dfe
jo 0x418e01
je 0x418dd4
imul ebp, dword [rbp + 0x43], 0x38504532
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x418ddc
jbe 0x418e0d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x418de6
je 0x418e1a
jb 0x418e19
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x418dff
je 0x418e33
jb 0x418e32
xor cl, byte fs:[r9 + 0x52]
jbe 0x418e4c
push r12
pop rdi
jo 0x418e30
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x418e1c
xor dword [rdi + 0x54], ebx
jne 0x418e60
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x418e77
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x418e8c
jo 0x418e8f
je 0x418e62
imul ebp, dword [rbp + 0x31], 0x69727733
je 0x418e8b
push rsp
outsd dx, dword [rsi]
jbe 0x418e95
movsxd rsp, dword [rbp + 0x45]
push 0
pop rdi
pop rdx
xor qword [rax], r14
jne 0x418ead
jo 0x418eb0
je 0x418e83
imul ebp, dword [rbp + 0x43], 0x4b504532
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x418e7d
xor eax, 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
pop rdi
jae 0x418ec0
jb 0x418ec0
push rbx
je 0x418e97
je 0x418ecb
jb 0x418eca
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x418ea2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x418ee9
push rax
jbe 0x418efa
jbe 0x418ecc
push r11
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x418ecb
xor byte [rbx + 0x68], dh
jb 0x418f05
pop rdi
jo 0x418f18
jb 0x418eef
push rsp
pop rdi
push r10
push r12
xor byte [rdi + 0x44], bl
jo 0x418f00
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x418ef2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418f31
movsxd rbx, dword [rdi + 0x73]
je 0x418f3f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418f3a
je 0x418f4f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
ja 0x418f76
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [rip + 0x64634b5f], esi
jbe 0x418f5b
jo 0x418f68
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x418f59
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x418f98
movsxd rbx, dword [rdi + 0x73]
je 0x418fa6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x418fa1
je 0x418fb6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x418f9f
movsxd r8, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x418f9e
je 0x418fb8
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x418fbe
jae 0x418fe3
push rbx
je 0x418fb2
xor al, 0x64
jne 0x418ff4
je 0x418fe9
insb byte [rdi], dx
je 0x418ff5
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x418fce
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x418ff5
pop rax
push rsp
pop rdi
push r11
je 0x418fe8
je 0x41902a
jo 0x419023
jo 0x419011
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x419036
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x419005
xor ebp, dword [rbp + 0x6f]
jbe 0x41903e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41901f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41905e
movsxd rbx, dword [rdi + 0x73]
je 0x41906c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419067
je 0x41907c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x53], eax
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419056
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push 0x63
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41909b
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x41908c
pop rdi
pop rdi
imul esi, dword [rbx + 0x5f], 0x65747962
push r12
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
jbe 0x4190c7
insb byte [rdi], dx
jne 0x4190ce
push r8
push rbx
xor ebx, dword [rdi + 0x45]
pop rdi
pop rdi
je 0x4190ed
jo 0x4190db
push r11
xor eax, 0x525f545f
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4190b9
xor dword [rdi + 0x54], ebx
jne 0x4190fd
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x419114
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4190e6
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41911b
push r10
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x419133
je 0x419106
imul ebp, dword [rbp + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x419131
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x419135
pop rdi
jb 0x419138
jb 0x41913c
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x419152
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x419120
xor bl, byte [rdi + 0x5f]
jae 0x41915c
jb 0x41915c
pop rdi
jo 0x41916f
jb 0x419146
push rbx
je 0x419137
je 0x41916b
jb 0x41916a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x419142
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419189
push rax
jbe 0x41919a
jbe 0x41916c
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419192
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4191af
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x419189
je 0x4191bd
jb 0x4191bc
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x419194
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4191db
push rax
jbe 0x4191ec
jbe 0x4191be
pop rdi
pop r15
jb 0x4191f6
outsb dx, byte [rsi]
jbe 0x419185
pop rdi
pop rdx
jae 0x4191ef
je 0x4191d2
imul ebp, dword [rsp + rbp*2 + 0x63], 0x615f5f00
jae 0x419209
jb 0x41920d
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rsi
push rbx
je 0x4191e5
xor ebx, dword [rdi + 0x53]
jo 0x419217
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x419223
pop rdi
jo 0x419236
jb 0x419223
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x419206
je 0x41923a
jb 0x419239
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x419211
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419258
push rax
jbe 0x419269
jbe 0x41923b
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419268
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419285
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41929b
jo 0x41929e
je 0x41926f
jbe 0x419297
movsxd rsp, dword [rbp + 0x35]
ja 0x4192a5
imul esi, dword [rbp + 0x49], 0x4e454564
push rbx
je 0x419277
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x41927f
imul esi, dword [rbx + 0x5f], 0x616f6c66
je 0x4192c1
outsb dx, byte [rsi]
pop rdi
jo 0x4192cc
imul ebp, dword [rsi + 0x74], 0x455f5449
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4192b3
je 0x4192e7
jb 0x4192e6
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4192f6
pop rdi
jae 0x4192f4
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
push rbx
je 0x4192ca
xor bl, byte [rdi + 0x5f]
je 0x4192ff
push 0x65706c65
jb 0x4192f0
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x4192df
xor al, 0x64
jne 0x419321
je 0x419316
insb byte [rdi], dx
je 0x419322
xor qword [r10], rsi
jne 0x419337
jo 0x41933a
je 0x41930b
jbe 0x419333
movsxd rsp, dword [rbp + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x419309
xor dword [rdi + 0x54], ebx
jne 0x41934d
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x419344
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x419371
jo 0x419374
je 0x419345
jbe 0x41936d
movsxd rsp, dword [rbp + 0x31]
ja 0x41937c
imul esi, dword [rbp + 0x55], 0x6769736e
outsb dx, byte [rsi]
outsb dx, byte fs:[rsi]
je 0x419362
push 0x45
push r8
movsxd rdx, dword [rdi + rbx*2 + 0x53]
xor dword [rdi], ebx
movsxd rbp, dword [rdi + rbp*2 + 0x63]
imul eax, dword [rax + 0x40], 0x47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41936e
xor dword [rdi + 0x54], ebx
jne 0x4193b2
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x4193c9
jo 0x4193cc
je 0x41939d
jbe 0x4193c5
movsxd rsp, dword [rbp + 0x53]
je 0x419392
xor al, 0x64
jne 0x4193d4
je 0x4193c9
insb byte [rdi], dx
je 0x4193d5
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x4193ca
push r12
pop rdi
jo 0x4193db
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4193f9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x419402
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4193f6
push rbx
je 0x4193e2
xor ebx, dword [rdi + 0x53]
jo 0x419414
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x419420
pop rdi
jo 0x419433
jb 0x419420
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x419403
je 0x419437
jb 0x419436
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41940e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419455
push rax
jbe 0x419466
jbe 0x419438
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41947a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
pop r15
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
jae 0x419491
je 0x419470
jae 0x419496
push 0
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4194af
jo 0x4194b2
je 0x419492
je 0x4194b3
imul ebp, dword [rsi + 0x67], 0x72773331
imul esi, dword [rbp + 0x54], 0x7665446f
imul esp, dword [rbx + 0x65], 0x5f006a45
pop rdx
push rbx
je 0x41948c
xor bl, byte [rdi + 0x5f]
je 0x4194c1
push 0x65706c65
jb 0x4194b2
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x4194e7
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x4194ae
xor dword [rdi + 0x54], ebx
jne 0x4194f2
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor bl, byte [rdi + 0x44]
jo 0x4194e9
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4194d1
xor byte [rdi + 0x5f], bl
je 0x41950c
jb 0x419515
ja 0x419507
jae 0x419523
jae 0x419520
insd dword [rdi], dx
pop rdi
jb 0x419524
outsd dx, dword [rsi]
jb 0x41951e
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rcx + 0x6e], ch
jo 0x41953f
je 0x4194cc
pop rdi
pop rdx
push rbx
je 0x419503
xor al, 0x5f
pop rdi
jae 0x41953f
jb 0x41953f
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41952b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41954a
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419567
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x419545
je 0x419587
jo 0x419575
pop rdi
imul ebp, dword [rsi + 0x66], 0x4571656f
push rdx
push r11
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x419599
jo 0x41959c
je 0x41956d
jbe 0x419595
movsxd rsp, dword [rbp + 0x39]
ja 0x4195a3
imul esi, dword [rbp + 0x46], 0x456c6c69
push 0
pop rdi
pop rdx
push rbx
je 0x419577
jbe 0x4195a8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x419581
je 0x4195b5
jb 0x4195b4
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4195ce
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4195e6
push rdx
jbe 0x4195ea
jbe 0x4195be
jo 0x4195cb
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x4195b7
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4195db
xor dword [rdx], esi
jne 0x41960b
jo 0x41960e
je 0x4195df
jbe 0x419607
movsxd rsp, dword [rbp + 0x53]
je 0x4195d4
xor al, 0x64
jne 0x419616
je 0x41960b
insb byte [rdi], dx
je 0x419617
push r11
xor byte [rdi + 0x45], bl
jo 0x41962e
jbe 0x4195bd
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41963b
je 0x41960c
jbe 0x419634
movsxd rsp, dword [rbp + 0x34]
jb 0x419635
push r10
imul edx, dword [rbx + 0x31], 0x3153495f
pop rdi
push rbx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x45], ebx
push rbx
je 0x419622
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x41966c
jb 0x41962c
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x419687
jb 0x419669
je 0x419649
xor al, 0x69
jae 0x41967b
movsxd rbp, dword [rdi + 0x6e]
jbe 0x419686
jb 0x419697
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x419692
insb byte [rdi], dx
jne 0x419699
xor al, 0x74
jns 0x4196ab
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x419697
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x419683
xor dword [rdi + 0x54], ebx
jne 0x4196c7
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x419698
xor al, 0x64
jne 0x4196da
je 0x4196cf
insb byte [rdi], dx
je 0x4196db
xor qword [r10], rsi
jne 0x4196f0
jo 0x4196f3
je 0x4196c4
jbe 0x4196ec
movsxd rsp, dword [rbp + 0x45]
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4196cb
xor dword [rdi + 0x54], ebx
jne 0x41970f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x419727
je 0x4196fa
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41972d
je 0x419722
insb byte [rdi], dx
je 0x41972e
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push r11
je 0x41971d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41975c
movsxd rbx, dword [rdi + 0x73]
je 0x41976a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419765
je 0x41977a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rsp
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3731
movsxd rbp, dword [rcx + 0x73]
jae 0x4197a7
je 0x4197c3
jo 0x4197b1
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x419795
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x4197df
jb 0x4197e2
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x4197ab
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4197ea
movsxd rbx, dword [rdi + 0x73]
je 0x4197f8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4197f3
je 0x419808
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x419800
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4197f2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419831
movsxd rbx, dword [rdi + 0x73]
je 0x41983f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41983a
je 0x41984f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
movsxd rbp, dword [rbx + 0x45]
jbe 0x419832
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x41987e
jo 0x419881
je 0x419854
imul ebp, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
je 0x419853
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419892
movsxd rbx, dword [rdi + 0x73]
je 0x4198a0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41989b
je 0x4198b0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x4198b0
jo 0x419896
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4198a2
jbe 0x4198d3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x4198ae
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4198ed
movsxd rbx, dword [rdi + 0x73]
je 0x4198fb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4198f6
je 0x41990b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4198eb
xor byte [rdi + 0x49], bl
je 0x419924
jb 0x419920
jae 0x41992a
push r8
movsxd rcx, dword [r10 + r12*2 + 0x30]
pop rdi
push rbx
pop rdi
jae 0x41993b
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x419927
jae 0x41994c
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x419928
je 0x41995c
jb 0x41995b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x419933
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41997a
push rax
jbe 0x41998b
jbe 0x41995d
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41995b
jbe 0x41998c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x419965
je 0x419999
jb 0x419998
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r13 + 0x6e]
jbe 0x419944
pop rdi
pop rdx
push rbx
je 0x41997b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4199b4
je 0x4199c9
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x419994
xor ebx, dword [rdi + 0x53]
jo 0x4199c6
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4199d2
pop rdi
jo 0x4199e5
jb 0x4199d2
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4199b5
je 0x4199e9
jb 0x4199e8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4199c0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419a07
push rax
jbe 0x419a18
jbe 0x4199ea
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419a17
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419a34
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
push rax
push rbx
pop r15
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x419a1d
xor dword [rdi + 0x54], ebx
jne 0x419a61
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x419a48
jae 0x419a6d
push rbx
je 0x419a3c
xor al, 0x64
jne 0x419a7e
je 0x419a73
insb byte [rdi], dx
je 0x419a7f
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x419aab
jo 0x419aae
je 0x419a7f
jbe 0x419aa7
movsxd rsp, dword [rbp + 0x35]
ja 0x419ab5
imul esi, dword [rbp + 0x49], 0x45496369
push rbx
je 0x419a8a
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x419a92
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x419ada
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x419ac7
xor ebp, dword [rbp + 0x6f]
jbe 0x419b00
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x419adf
je 0x419b13
jb 0x419b12
xor al, 0x62
jae 0x419b1a
jbe 0x419ab8
pop rdi
pop rdx
push rbx
je 0x419aef
xor dword [rdi + 0x54], ebx
jne 0x419b33
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x419b1a
jae 0x419b3f
push rbx
je 0x419b0e
xor al, 0x64
jne 0x419b50
je 0x419b45
insb byte [rdi], dx
je 0x419b51
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push r11
je 0x419b3e
jbe 0x419b6f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x419b4a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419b89
movsxd rbx, dword [rdi + 0x73]
je 0x419b97
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419b92
je 0x419ba7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x4d]
pop rdi
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
jo 0x419bd5
push 0x64616572
pop rdi
insd dword [rdi], dx
jne 0x419bde
js 0x419bcc
jne 0x419bdd
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x419bb9
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x419c0a
outsb dx, byte gs:[rsi]
je 0x419c02
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x69], ecx
jbe 0x419c09
push r10
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419c01
xor ebx, dword [rdi + 0x53]
jo 0x419c33
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x419c3f
pop rdi
jo 0x419c52
jb 0x419c3f
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x419c22
je 0x419c56
jb 0x419c55
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x419c2d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419c74
push rax
jbe 0x419c85
jbe 0x419c57
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419c84
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419ca1
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x419cbd
je 0x419c8e
jbe 0x419cb6
movsxd rsp, dword [rbp + 0x43]
xor dword [rbp + 0x50], eax
movsxd rdx, dword [r11 + 0x31]
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419c91
je 0x419cab
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
xor dword [rdx], esi
jne 0x419ce1
jo 0x419ce4
je 0x419cb5
jbe 0x419cdd
movsxd rsp, dword [rbp + 0x53]
je 0x419caa
xor al, 0x64
jne 0x419cec
je 0x419ce1
insb byte [rdi], dx
je 0x419ced
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x419cc5
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x419cec
pop rax
push rsp
pop rdi
push r11
je 0x419cdf
je 0x419d21
jo 0x419d1a
jo 0x419d08
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x419d2d
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x419cfb
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x419d1f
cmp dword [rcx + 0x6e], ecx
jo 0x419d50
je 0x419d23
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x419d56
je 0x419d4b
insb byte [rdi], dx
je 0x419d57
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x419d5d
insb byte [rdi], dx
je 0x419d69
jb 0x419d4b
jbe 0x419d08
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419d71
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x419d8a
jb 0x419d71
push rbx
je 0x419d62
je 0x419d96
jb 0x419d95
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x419d6d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419db4
push rax
jbe 0x419dc5
jbe 0x419d97
pop rdi
pop r15
jb 0x419da4
jbe 0x419d61
pop rdi
pop rdx
push rbx
je 0x419d98
xor dword [rdi + 0x4d], ebx
jne 0x419de0
js 0x419dce
jae 0x419dd8
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419ddc
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419df9
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x75], ch
je 0x419e0b
jne 0x419e11
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x419e1a
jo 0x419e1d
je 0x419df0
imul ebp, dword [rbp + 0x43], 0x4b504531
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x419dea
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x419e20
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x419e2a
pop rdi
xor byte [rbp + 0x50], al
movsxd rdx, dword [r8 + 0x63]
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x419e16
pop rdi
push rbx
jo 0x419e49
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x419e55
pop rdi
jae 0x419e5b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419e5f
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419e7c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x419e51
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x419e98
push rax
jbe 0x419ea9
jbe 0x419e7b
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x49], ebx
push r12
pop rdi
jo 0x419e96
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x419e82
xor bl, byte [rdi + 0x5f]
jae 0x419ebe
jb 0x419ebe
pop rdi
jo 0x419ed1
jb 0x419ea8
push rbx
je 0x419e99
je 0x419ecd
jb 0x419ecc
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x419edc
pop rdi
jae 0x419eda
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419ede
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419efb
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
ja 0x419f10
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [r15 + rbx*2], esi
movsxd rsp, dword [r13 + r8*2 + 0x45]
jbe 0x419ef5
jo 0x419f02
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x419f34
je 0x419f05
jbe 0x419f2d
movsxd rsp, dword [rbp + 0x34]
jb 0x419f2e
imul rax, qword fs:[r13 + 0x45], 0x3974534e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x419f36
je 0x419f16
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x419f6f
push rbx
je 0x419f39
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
xor al, 0x74
jns 0x419f8b
push r10
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x419f5e
outsw dx, word [rsi]
jb 0x419fa2
jb 0x419f92
push r10
xor bl, byte [r15 + 0x4b]
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x419f6f
jb 0x419fa6
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x419faa
pop rdi
jb 0x419fad
jb 0x419fb1
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x419fc8
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419fc4
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x419fdd
jb 0x419fc4
push rbx
je 0x419fb5
je 0x419fe9
jb 0x419fe8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x419fc0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a007
push rax
jbe 0x41a018
jbe 0x419fea
pop rdi
pop r15
jo 0x41a023
jb 0x419ff6
jbe 0x419fb3
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41a031
je 0x41a002
jbe 0x41a02a
movsxd rsp, dword [rbp + 0x34]
jb 0x41a02b
push r10
imul edx, dword [rbx + 0x31], 0x31534a5f
pop rdi
push rbx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x45], ebx
push rbx
je 0x41a018
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x41a062
jb 0x41a022
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x41a07d
jb 0x41a05f
je 0x41a03f
xor al, 0x69
jae 0x41a071
movsxd rbp, dword [rdi + 0x6e]
jbe 0x41a07c
jb 0x41a08d
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x41a088
insb byte [rdi], dx
jne 0x41a08f
xor al, 0x74
jns 0x41a0a1
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x41a08d
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41a078
xor bl, byte [rdi + 0x5f]
je 0x41a0ad
push 0x65706c65
jb 0x41a09e
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41a08d
xor al, 0x64
jne 0x41a0cf
je 0x41a0c4
insb byte [rdi], dx
je 0x41a0d0
cmp byte [r13 + 0x73], dl
je 0x41a0b5
jae 0x41a0da
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41a0b2
xor dword [rdi + 0x54], ebx
jne 0x41a0f6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x41a0ed
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41a0d5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41a116
push r11
je 0x41a0eb
je 0x41a11f
jb 0x41a11e
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x41a11a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a159
movsxd rbx, dword [rdi + 0x73]
je 0x41a167
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a162
je 0x41a177
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41a150
xor dword [rdi + 0x54], ebx
jne 0x41a194
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41a17b
jae 0x41a1a0
push rbx
je 0x41a16f
xor al, 0x64
jne 0x41a1b1
je 0x41a1a6
insb byte [rdi], dx
je 0x41a1b2
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41a1a7
push r12
pop rdi
jo 0x41a1b8
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a1d6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41a1df
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41a1d3
push rbx
je 0x41a1c4
je 0x41a1f8
jb 0x41a1f7
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a1cf
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a216
push rax
jbe 0x41a227
jbe 0x41a1f9
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push rbx
cmp dword [rcx + 0x6e], ecx
jo 0x41a23b
je 0x41a20e
imul ebp, dword [rbp], 0x4b4e5a5f
push rbx
je 0x41a209
jbe 0x41a23a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41a215
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a254
movsxd rbx, dword [rdi + 0x73]
je 0x41a262
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a25d
je 0x41a272
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3845455f
insd dword [rdi], dx
js 0x41a27a
jae 0x41a286
jp 0x41a284
jbe 0x41a222
pop rdi
pop rdx
push rbx
je 0x41a25a
je 0x41a274
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41a2ab
je 0x41a27e
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41a2b1
je 0x41a2a6
insb byte [rdi], dx
je 0x41a2b2
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41a28a
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41a2b1
pop rax
push rsp
pop rdi
push r11
je 0x41a2a4
je 0x41a2e6
jo 0x41a2df
jo 0x41a2cd
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41a2f2
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41a305
jo 0x41a308
je 0x41a2d9
jbe 0x41a301
movsxd rsp, dword [rbp + 0x43]
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41a2d8
movsxd rbp, dword [rdi + 0x70]
jns 0x41a2f2
push rax
movsxd rdx, dword [r8 + 0x63]
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41a2f1
xor dword [rdi + 0x5f], ebx
jb 0x41a32d
jae 0x41a33d
outsd dx, dword [rsi]
push rbx
je 0x41a308
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a347
movsxd rbx, dword [rdi + 0x73]
je 0x41a355
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a350
je 0x41a365
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r8
push rsp
pop rdi
push rdx
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a341
xor bl, byte [rdi + 0x5f]
jae 0x41a37d
jb 0x41a37d
pop rdi
jo 0x41a390
jb 0x41a367
push rbx
je 0x41a358
je 0x41a38c
jb 0x41a38b
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41a39b
pop rdi
jae 0x41a399
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a39d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a3ba
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41a3d4
jo 0x41a3d7
je 0x41a3a8
jbe 0x41a3d0
movsxd rsp, dword [rbp + 0x35]
ja 0x41a3de
imul esi, dword [rbp + 0x49], 0x39415269
pop rdi
movsxd rcx, dword [r10 + 0x63]
push rbx
je 0x41a3b9
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41a3c1
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41a409
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41a3fa
jbe 0x41a42b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41a404
je 0x41a438
jb 0x41a437
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41a418
xor bl, byte [rdi + 0x5f]
jne 0x41a459
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41a474
pop rdi
push r11
je 0x41a432
xor ebp, dword [rbp + 0x6f]
jbe 0x41a46b
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41a44c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a48b
movsxd rbx, dword [rdi + 0x73]
je 0x41a499
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a494
je 0x41a4a9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push rbx
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x41a497
xor bl, byte [rdi + 0x5f]
je 0x41a4cc
push 0x65706c65
jb 0x41a4bd
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41a4f2
jo 0x41a4f5
je 0x41a4c8
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x41a4fc
je 0x41a4f1
insb byte [rdi], dx
je 0x41a4fd
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41a4da
xor dword [rdi + 0x54], ebx
jne 0x41a51e
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41a515
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41a4fd
pop rdi
push rbx
jo 0x41a530
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a53c
pop rdi
jae 0x41a542
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a546
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a563
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jb 0x41a568
insb byte [rdi], dx
jae 0x41a56d
jbe 0x41a50b
pop rdi
pop rdx
push rbx
je 0x41a542
xor dword [rdi + 0x54], ebx
jne 0x41a586
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x41a59d
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
insd dword [rdi], dx
js 0x41a58d
jae 0x41a5b0
jbe 0x41a53e
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41a5ba
jo 0x41a5bd
je 0x41a58e
jbe 0x41a5b6
movsxd rsp, dword [rbp + 0x31]
ja 0x41a5c5
imul esi, dword [rbp + 0x55], 0x6769736e
outsb dx, byte [rsi]
outsb dx, byte fs:[rsi]
je 0x41a5ab
jns 0x41a5a9
push r8
movsxd rdx, dword [rdi + rbx*2 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41a5a9
jbe 0x41a5da
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41a5b5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a5f4
movsxd rbx, dword [rdi + 0x73]
je 0x41a602
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a5fd
je 0x41a612
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor eax, 0x655f4d5f
jb 0x41a61f
jae 0x41a625
pop rdi
je 0x41a623
outsb dx, byte gs:[rsi]
push r8
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x41a604
xor bl, byte [rdi + 0x5f]
jae 0x41a640
jb 0x41a640
pop rdi
jo 0x41a653
jb 0x41a62a
push rbx
je 0x41a61b
je 0x41a64f
jb 0x41a64e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a626
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a66d
push rax
jbe 0x41a67e
jbe 0x41a650
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a676
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a693
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push r11
pop rdi
push r11
je 0x41a671
cmp dword [rdi + 0x53], ebx
jo 0x41a6a4
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41a6b4
push rdx
push r12
pop rdi
jo 0x41a6aa
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41a6db
jo 0x41a6de
je 0x41a6af
jbe 0x41a6d7
movsxd rsp, dword [rbp + 0x35]
ja 0x41a6e5
imul esi, dword [rbp + 0x49], 0x74534e52
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a6f2
movsxd rbx, dword [rdi + 0x73]
je 0x41a700
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a6fb
je 0x41a710
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r9, dword [r10 + 0x45]
push rbx
je 0x41a6ee
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41a6f6
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41a73e
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41a729
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [r13 + 0x4e]
push rbx
je 0x41a73f
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41a7a4
jo 0x41a792
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41a769
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41a78d
cmp dword [rcx + 0x6e], ecx
jo 0x41a7be
je 0x41a791
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41a7c4
je 0x41a7b9
insb byte [rdi], dx
je 0x41a7c5
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41a7a2
xor dword [rdi + 0x54], ebx
jne 0x41a7e6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41a7fe
je 0x41a7d1
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41a804
je 0x41a7f9
insb byte [rdi], dx
je 0x41a805
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x41a832
je 0x41a805
imul ebp, dword [rbp + 0x43], 0x38504532
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41a80a
je 0x41a824
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
xor dword [rax], esi
jne 0x41a85a
jo 0x41a85d
je 0x41a830
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41a863
je 0x41a858
insb byte [rdi], dx
je 0x41a864
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41a83c
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41a863
pop rax
push rsp
pop rdi
push r11
je 0x41a856
je 0x41a898
jo 0x41a891
jo 0x41a87f
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41a8a4
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41a874
jae 0x41a8b9
jo 0x41a88e
push rbx
je 0x41a87f
je 0x41a8b3
jb 0x41a8b2
xor ch, byte fs:[rcx + 0x64]
jbe 0x41a8a8
push rsp
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41a893
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41a8d4
push rbx
je 0x41a8ab
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a8ea
movsxd rbx, dword [rdi + 0x73]
je 0x41a8f8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a8f3
je 0x41a908
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41a92d
jo 0x41a930
je 0x41a901
jbe 0x41a929
movsxd rsp, dword [rbp + 0x31]
movsxd rbp, dword ss:[rdi + 0x6d]
jo 0x41a93e
je 0x41a930
jae 0x41a934
push rax
outsd dx, dword [rsi]
ja 0x41a938
jb 0x41a91a
jbe 0x41a8d7
pop rdi
pop rdx
push rbx
je 0x41a90f
xor ebx, dword [rdi + 0x53]
jo 0x41a941
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a94d
pop rdi
jo 0x41a960
jb 0x41a94d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41a930
je 0x41a964
jb 0x41a963
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a93b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a982
push rax
jbe 0x41a993
jbe 0x41a965
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a992
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a9af
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x41a9c5
jb 0x41a9c2
jns 0x41a99a
jbe 0x41a957
pop rdi
pop rdx
push rbx
je 0x41a992
je 0x41a9d4
jo 0x41a9cd
push r11
je 0x41a999
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41a9ea
outsb dx, byte gs:[rsi]
je 0x41a9e2
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41a9ef
jo 0x41a9fd
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a9e8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41aa29
push r11
je 0x41a9fe
je 0x41aa32
jb 0x41aa31
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41aa12
xor byte [rbx + 0x68], dh
jb 0x41aa4c
pop rdi
jo 0x41aa5f
jb 0x41aa36
push rbx
je 0x41aa27
je 0x41aa5b
jb 0x41aa5a
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41aa6a
pop rdi
jae 0x41aa68
xor cl, byte [r9 + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x41aa7e
push r11
je 0x41aa47
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41aa8e
push rax
jbe 0x41aa9f
jbe 0x41aa71
jbe 0x41aa76
push r11
pop rdi
push r12
pop rdi
add byte [r15 + 0x5a], r11b
push r11
je 0x41aa77
jbe 0x41aaa8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41aa81
je 0x41aab5
jb 0x41aab4
push rbx
push r11
xor byte [rdi + 0x45], bl
cmp byte [r13 + 0x61], r13b
js 0x41aabd
jae 0x41aac9
jp 0x41aac7
jbe 0x41aa65
pop rdi
pop rdx
push rbx
je 0x41aa9c
xor dword [rdi + 0x54], ebx
jne 0x41aae0
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41aab1
xor al, 0x64
jne 0x41aaf3
je 0x41aae8
insb byte [rdi], dx
je 0x41aaf4
xor qword [r10], rsi
jne 0x41ab09
jo 0x41ab0c
je 0x41aadd
jbe 0x41ab05
movsxd rsp, dword [rbp + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41aaec
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ab2b
movsxd rbx, dword [rdi + 0x73]
je 0x41ab39
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ab34
je 0x41ab49
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x41ab2d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41ab35
xor bl, byte [rdi + 0x57]
imul ebx, dword [rdi + 0x72], 0x65
jae 0x41ab83
insb byte [rdi], dx
je 0x41ab70
je 0x41ab8c
jo 0x41ab7a
pop rdi
imul ebp, dword [rbp + 0x70], 0x7453496c
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x41ab93
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x41aba2
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x45], 0x76453243
add byte [rdi + 0x5a], bl
push rbx
je 0x41ab77
xor byte [rbx + 0x68], dh
jb 0x41abb1
pop rdi
jo 0x41abc4
jb 0x41ab9b
push rbx
je 0x41ab8c
je 0x41abc0
jb 0x41abbf
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ab97
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41abde
push rax
jbe 0x41abef
jbe 0x41abc1
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push r11
pop rdi
push r11
je 0x41abc5
cmp dword [rdi + 0x53], ebx
jo 0x41abf8
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41ac08
push rdx
push r12
pop rdi
jo 0x41abfe
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41abee
je 0x41ac30
jo 0x41ac29
push rbx
je 0x41abf5
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41ac46
outsb dx, byte gs:[rsi]
je 0x41ac3e
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x4a], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41ac4b
jo 0x41ac59
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41ac89
jo 0x41ac8c
je 0x41ac6c
je 0x41ac8d
imul ebp, dword [rsi + 0x67], 0x52453243
push rbx
je 0x41ac5d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ac9c
movsxd rbx, dword [rdi + 0x73]
je 0x41acaa
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41aca5
je 0x41acba
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x41ac8e
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41acb2
xor dword [rdx], esi
jne 0x41ace2
jo 0x41ace5
je 0x41acb6
jbe 0x41acde
movsxd rsp, dword [rbp + 0x53]
je 0x41acab
xor al, 0x64
jne 0x41aced
je 0x41ace2
insb byte [rdi], dx
je 0x41acee
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41ad12
je 0x41ace3
jbe 0x41ad0b
movsxd rsp, dword [rbp + 0x34]
jb 0x41ad0c
push r10
imul edx, dword [rbx + 0x31], 0x3153495f
pop rdi
push rbx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x45], ebx
push rbx
je 0x41acff
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x41ad49
jb 0x41ad09
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x41ad64
jb 0x41ad46
je 0x41ad26
xor al, 0x69
jae 0x41ad58
movsxd rbp, dword [rdi + 0x6e]
jbe 0x41ad63
jb 0x41ad74
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x41ad6f
insb byte [rdi], dx
jne 0x41ad76
xor al, 0x74
jns 0x41ad88
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x41ad74
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41ada7
je 0x41ad78
jbe 0x41ada0
movsxd rsp, dword [rbp + 0x31]
xor al, 0x73
imul ebp, dword [rcx + 0x70], 0x43
push 0x63617261
je 0x41adac
jb 0x41adbc
jbe 0x41ad4c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x41adba
js 0x41adc0
je 0x41ad99
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x41ad9e
je 0x41adb8
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
jbe 0x41adee
push r10
push rbx
je 0x41adb1
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41add8
pop rax
push rsp
pop rdi
push r11
je 0x41adcb
je 0x41ae0d
jo 0x41ae06
jo 0x41adf4
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41ae19
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41ade7
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41ae39
jb 0x41ae10
push rbx
push r11
je 0x41adff
xor ebx, dword [rdi + 0x53]
jo 0x41ae31
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41ae3d
pop rdi
jo 0x41ae50
jb 0x41ae3d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41ae20
je 0x41ae54
jb 0x41ae53
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ae2b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ae72
push rax
jbe 0x41ae83
jbe 0x41ae55
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ae82
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41ae9f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rsp
push rbx
je 0x41ae7d
je 0x41aeb1
jb 0x41aeb0
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ae88
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41aecf
push rax
jbe 0x41aee0
jbe 0x41aeb2
add byte [r15 + 0x5a], r11b
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41aedb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41aee4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41aed8
push rbx
je 0x41aec4
xor ebx, dword [rdi + 0x53]
jo 0x41aef6
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41af02
pop rdi
jo 0x41af15
jb 0x41af02
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41aee5
je 0x41af19
jb 0x41af18
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41aef0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41af37
push rax
jbe 0x41af48
jbe 0x41af1a
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41af5c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
cmp byte [r13 + 0x61], r13b
js 0x41af5a
jae 0x41af66
jp 0x41af64
jbe 0x41af02
pop rdi
pop rdx
push rbx
je 0x41af38
xor bl, byte [rdi + 0x5f]
je 0x41af6d
push 0x65706c65
jb 0x41af5e
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41af4d
xor al, 0x64
jne 0x41af8f
je 0x41af84
insb byte [rdi], dx
je 0x41af90
xor qword [r8], rsi
jne 0x41afa5
jo 0x41afa8
je 0x41af7b
imul ebp, dword [rbp + 0x45], 0x5245454a
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41af75
xor dword [rdi + 0x54], ebx
jne 0x41afb9
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x41afb0
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41af9d
outsw dx, word [rsi]
jb 0x41afe1
jb 0x41afd1
push r10
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41afae
jb 0x41afe5
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41afe9
pop rdi
jb 0x41afec
jb 0x41aff0
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41b007
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41afd6
jbe 0x41b007
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41afe0
je 0x41b014
jb 0x41b013
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x41b02d
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x41b045
push r10
jbe 0x41b049
jbe 0x41b01d
jo 0x41b02a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x41b019
xor ebx, dword [rdi + 0x53]
jo 0x41b04b
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41b057
pop rdi
jo 0x41b06a
jb 0x41b057
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41b03a
je 0x41b06e
jb 0x41b06d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b045
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b08c
push rax
jbe 0x41b09d
jbe 0x41b06f
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b09c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41b0b9
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x53], ecx
pop rdi
push r10
push r11
push r12
pop rdi
add byte [r15 + 0x5a], r11b
push rbx
je 0x41b09b
xor al, 0x5f
pop rdi
jae 0x41b0d7
jb 0x41b0d7
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41b0c3
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b0e2
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41b0ff
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4e], ecx
push rbx
je 0x41b0d5
je 0x41b109
jb 0x41b108
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b0e0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b127
push rax
jbe 0x41b138
jbe 0x41b10a
push r11
push r11
pop rdi
push rbx
pop r15
push r11
je 0x41b10a
cmp dword [rdi + 0x53], ebx
jo 0x41b13d
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41b14d
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x41b147
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41b178
jo 0x41b17b
je 0x41b14c
jbe 0x41b174
movsxd rsp, dword [rbp + 0x35]
ja 0x41b182
imul esi, dword [rbp + 0x45], 0x5a5f0063
push rbx
je 0x41b14d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41b18e
push rbx
je 0x41b165
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b1a4
movsxd rbx, dword [rdi + 0x73]
je 0x41b1b2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b1ad
je 0x41b1c2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41b1e7
jo 0x41b1ea
je 0x41b1bb
jbe 0x41b1e3
movsxd rsp, dword [rbp + 0x35]
ja 0x41b1f1
imul esi, dword [rbp + 0x49], 0x36314152
pop rdi
movsxd rbp, dword [r9 + 0x4a]
movsxd rax, dword [rbp + 0x45]
push rbx
je 0x41b1cd
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41b1d5
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41b21d
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41b20d
je 0x41b24f
jo 0x41b248
push rax
jbe 0x41b259
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41b26a
jo 0x41b26d
je 0x41b23e
jbe 0x41b266
movsxd rsp, dword [rbp + 0x35]
ja 0x41b274
imul esi, dword [rbp + 0x49], 0x5f334152
movsxd rdx, dword [r10 + 0x4b]
push rbx
je 0x41b249
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b288
movsxd rbx, dword [rdi + 0x73]
je 0x41b296
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b291
je 0x41b2a6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x41b28a
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41b292
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41b2da
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41b2ca
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x41b314
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x41b323
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41b341
outsb dx, byte gs:[rsi]
je 0x41b339
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x41b357
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b347
outsw dx, word [rsi]
jb 0x41b38b
jb 0x41b37b
push r11
je 0x41b34c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b393
push rax
jbe 0x41b3a4
jbe 0x41b376
push r12
pop rdi
push rdx
push rbx
je 0x41b36c
jb 0x41b3a3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41b3a7
pop rdi
jb 0x41b3aa
jb 0x41b3ae
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x41b3c5
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41b394
outsw dx, word [rsi]
jb 0x41b3d8
jb 0x41b3c8
push r11
je 0x41b399
xor al, 0x64
jne 0x41b3db
je 0x41b3d0
insb byte [rdi], dx
je 0x41b3dc
cmp byte [r13 + 0x73], dl
je 0x41b3c1
jae 0x41b3e6
push r12
pop rdi
push rdx
push rbx
je 0x41b3bc
jb 0x41b3f3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41b3f7
pop rdi
jb 0x41b3fa
jb 0x41b3fe
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41b415
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41b3e4
je 0x41b418
jb 0x41b417
xor dword fs:[rip + 0x735f4d5f], esi
je 0x41b41d
jb 0x41b432
pop rdi
je 0x41b429
jb 0x41b428
push r11
je 0x41b3fa
xor byte [rbx + 0x68], dh
jb 0x41b434
pop rdi
jo 0x41b447
jb 0x41b41e
push rbx
pop rdi
xor dword [rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41b44b
pop rdi
jae 0x41b449
push r8
jbe 0x41b460
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41b438
jbe 0x41b469
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41b444
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b483
movsxd rbx, dword [rdi + 0x73]
je 0x41b491
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b48c
je 0x41b4a1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3645455f
jb 0x41b4ad
jae 0x41b4b3
jp 0x41b4b1
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor dword [rcx], esi
ja 0x41b4c7
imul esi, dword [rbp + 0x41], 0x6577736e
jb 0x41b4c8
push rdx
push rbx
je 0x41b49c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b4db
movsxd rbx, dword [rdi + 0x73]
je 0x41b4e9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b4e4
je 0x41b4f9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x41b4cd
xor byte [rbx + 0x68], dh
jb 0x41b507
pop rdi
jo 0x41b51a
jb 0x41b4f1
push rbx
je 0x41b4e2
je 0x41b516
jb 0x41b515
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b4ed
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b534
push rax
jbe 0x41b545
jbe 0x41b517
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41b516
je 0x41b558
jo 0x41b551
push r8
jbe 0x41b562
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x41b53e
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b574
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41b57d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b571
push rbx
je 0x41b561
je 0x41b595
jb 0x41b594
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41b56d
xor bl, byte [rdi + 0x5f]
je 0x41b5a2
push 0x65706c65
jb 0x41b593
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41b598
jae 0x41b5bd
push rbx
je 0x41b58d
xor al, 0x64
jne 0x41b5cf
je 0x41b5c4
insb byte [rdi], dx
je 0x41b5d0
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41b5ab
xor dword [rdi + 0x54], ebx
jne 0x41b5ef
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41b5e6
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41b5cf
xor ebx, dword [rdi + 0x53]
jo 0x41b601
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41b60d
pop rdi
jo 0x41b620
jb 0x41b60d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41b5f0
je 0x41b624
jb 0x41b623
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b5fb
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b642
push rax
jbe 0x41b653
jbe 0x41b625
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b652
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41b66f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x49]
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x41b667
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b652
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41b676
cmp byte [rbp + 0x73], dl
je 0x41b676
jae 0x41b69b
push rbx
je 0x41b66a
xor al, 0x64
jne 0x41b6ac
je 0x41b6a1
insb byte [rdi], dx
je 0x41b6ad
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41b690
pop rdi
pop rdi
imul bp, word [rsp + rbp*2 + 0x5f], 0x4961
movsxd rax, dword [rbp + 0x4e]
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41b6ca
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x41b6bb
pop rdi
pop rdi
imul esi, dword [rbx + 0x5f], 0x65747962
push r12
pop rdi
pop rdi
pop rdi
jbe 0x41b6f5
insb byte [rdi], dx
jne 0x41b6fc
jbe 0x41b6df
pop rdi
pop rdi
je 0x41b718
jo 0x41b706
push r8
push rbx
xor ebx, dword [rdi + 0x53]
pop rdi
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41b6ec
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b72b
movsxd rbx, dword [rdi + 0x73]
je 0x41b739
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b734
je 0x41b749
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x41b732
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rsp
push rsi
push rbx
je 0x41b739
je 0x41b76d
jb 0x41b76c
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41b77c
pop rdi
jae 0x41b77a
add byte [r15 + 0x5a], r11b
push rbx
je 0x41b74e
xor bl, byte [rdi + 0x5f]
jne 0x41b78f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41b7aa
pop rdi
push r11
je 0x41b768
xor ebp, dword [rbp + 0x6f]
jbe 0x41b7a1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41b780
je 0x41b7b4
jb 0x41b7b3
push r11
xor bl, byte [rdi + 0x53]
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
push rdx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41b7e8
jo 0x41b7eb
je 0x41b7bc
jbe 0x41b7e4
movsxd rsp, dword [rbp + 0x35]
ja 0x41b7f2
imul esi, dword [rbp + 0x49], 0x74534e52
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b7ff
movsxd rbx, dword [rdi + 0x73]
je 0x41b80d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b808
je 0x41b81d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r9, dword [r9 + 0x45]
push rbx
je 0x41b7fb
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41b803
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41b84b
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41b87c
jo 0x41b87f
je 0x41b850
jbe 0x41b878
movsxd rsp, dword [rbp + 0x35]
ja 0x41b886
imul esi, dword [rbp + 0x49], 0x534e4b52
je 0x41b855
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b894
movsxd rbx, dword [rdi + 0x73]
je 0x41b8a2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b89d
je 0x41b8b2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x4b]
movsxd rcx, dword [rdx + 0x45]
push rbx
je 0x41b895
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41b89d
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41b8e5
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41b8d0
xor bl, byte [rdi + 0x5f]
je 0x41b905
push 0x65706c65
jb 0x41b8f6
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41b92b
jo 0x41b92e
je 0x41b901
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x41b935
je 0x41b92a
insb byte [rdi], dx
je 0x41b936
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41b911
xor dword [rdi + 0x54], ebx
jne 0x41b955
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x41b94c
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push r11
je 0x41b935
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41b959
cmp dword [rcx + 0x6e], ecx
jo 0x41b98a
je 0x41b95d
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41b990
je 0x41b985
insb byte [rdi], dx
je 0x41b991
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x41b97c
jbe 0x41b939
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41b9b5
jo 0x41b9b8
je 0x41b989
jbe 0x41b9b1
movsxd rsp, dword [rbp + 0x35]
ja 0x41b9bf
imul esi, dword [rbp + 0x49], 0x45496364
push rbx
je 0x41b994
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41b99c
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x41b9e4
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41b9cf
xor bl, byte [rdi + 0x5f]
je 0x41ba04
push 0x65706c65
jb 0x41b9f5
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x41ba2a
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41b9f1
xor dword [rdi + 0x54], ebx
jne 0x41ba35
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor bl, byte [rdi + 0x44]
jo 0x41ba2c
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41ba14
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41ba55
push r11
je 0x41ba2a
je 0x41ba5e
jb 0x41ba5d
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41ba3d
xor bl, byte [rdi + 0x5f]
je 0x41ba72
push 0x65706c65
jb 0x41ba63
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x41ba99
je 0x41ba6c
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x41baa0
je 0x41ba95
insb byte [rdi], dx
je 0x41baa1
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41ba7e
xor dword [rdi + 0x54], ebx
jne 0x41bac2
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41bab9
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41baa1
xor dword [rdi + 0x54], ebx
jne 0x41bae5
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41bafc
jo 0x41baff
je 0x41bad0
jbe 0x41baf8
movsxd rsp, dword [rbp + 0x53]
je 0x41bac5
xor al, 0x64
jne 0x41bb07
je 0x41bafc
insb byte [rdi], dx
je 0x41bb08
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41bafd
push r12
pop rdi
jo 0x41bb0e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41bb2c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41bb45
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x41bb21
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41bb60
movsxd rbx, dword [rdi + 0x73]
je 0x41bb6e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41bb69
je 0x41bb7e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x41bb8d
jbe 0x41bb20
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41bb9c
jo 0x41bb9f
je 0x41bb70
jbe 0x41bb98
movsxd rsp, dword [rbp + 0x43]
xor al, byte [rbp + 0x76]
add byte [rsi + 0x63], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
jae 0x41bba1
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41bb85
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x41bbcf
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x41bbde
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41bbfc
outsb dx, byte gs:[rsi]
je 0x41bbf4
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x4a], ecx
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x41bc12
push rsp
pop rdi
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x41bc38
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41bc55
jo 0x41bc58
je 0x41bc29
jbe 0x41bc51
movsxd rsp, dword [rbp + 0x35]
ja 0x41bc5f
imul esi, dword [rbp + 0x49], 0x5f374152
movsxd rbp, dword [r9 + 0x4a]
push rdx
xor ebx, dword [r15 + 0x53]
xor dword [rdi + 0x52], ebx
push rbx
je 0x41bc3d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41bc7c
movsxd rbx, dword [rdi + 0x73]
je 0x41bc8a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41bc85
je 0x41bc9a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x41bc7d
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41bc85
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41bccd
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41bcbd
je 0x41bcff
jo 0x41bcf8
push rax
jbe 0x41bd09
xor dword [r9 + 0x4a], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41bce5
jo 0x41bcf3
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41bcdf
je 0x41bcf9
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41bcff
jae 0x41bd24
push rbx
je 0x41bcf3
xor al, 0x64
jne 0x41bd35
je 0x41bd2a
insb byte [rdi], dx
je 0x41bd36
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41bd0e
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41bd35
pop rax
push rsp
pop rdi
push r11
je 0x41bd28
je 0x41bd6a
jo 0x41bd63
jo 0x41bd51
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41bd76
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41bd77
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41bd80
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41bd74
push rbx
je 0x41bd64
je 0x41bd98
jb 0x41bd97
cmp byte fs:[r13 + 0x61], r13b
js 0x41bd99
jae 0x41bda5
jp 0x41bda3
jbe 0x41bd41
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41bdbd
jo 0x41bdc0
je 0x41bd91
jbe 0x41bdb9
movsxd rsp, dword [rbp + 0x35]
ja 0x41bdc7
imul esi, dword [rbp + 0x49], 0x31314152
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x41bd9c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41bddb
movsxd rbx, dword [rdi + 0x73]
je 0x41bde9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41bde4
je 0x41bdf9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x41bdd7
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41bddf
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41be27
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41be13
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41be54
push r11
je 0x41be29
je 0x41be5d
jb 0x41be5c
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41be4c
je 0x41be8e
jo 0x41be87
push rax
cmp byte [rbp + 0x73], dl
je 0x41be68
jae 0x41be8d
push rbx
je 0x41be5c
xor al, 0x64
jne 0x41be9e
je 0x41be93
insb byte [rdi], dx
je 0x41be9f
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41be92
je 0x41bec6
jb 0x41bec5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41be9d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41bee4
push rax
jbe 0x41bef5
jbe 0x41bec7
xor al, byte [r13 + 0x4f]
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x41bec8
outsw dx, word [rsi]
jb 0x41bf0c
jb 0x41befc
push r10
xor dword [r9], esi
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41beda
jb 0x41bf11
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41bf15
pop rdi
jb 0x41bf18
jb 0x41bf1c
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41bf33
add byte gs:[r15 + 0x5a], r11b
cmp qword [rcx + 0x6e], r9
jo 0x41bf43
je 0x41bf16
imul ebp, dword [rbp + 0x43], 0x4b504531
movsxd rax, dword [rax]
pop rdi
pop rdx
push rsp
push rbx
je 0x41bf18
je 0x41bf4c
jb 0x41bf4b
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41bf5b
pop rdi
jae 0x41bf59
add byte [r15 + 0x5a], r11b
push rbx
je 0x41bf2d
xor al, 0x5f
pop rdi
jae 0x41bf69
jb 0x41bf69
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41bf55
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41bf74
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41bf91
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41bf66
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41bf8a
xor dword [rax], esi
jne 0x41bfba
jo 0x41bfbd
je 0x41bf90
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41bfc3
je 0x41bfb8
insb byte [rdi], dx
je 0x41bfc4
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41bfa1
xor dword [rdi + 0x54], ebx
jne 0x41bfe5
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41bfcc
jae 0x41bff1
push rbx
je 0x41bfc0
xor al, 0x64
jne 0x41c002
je 0x41bff7
insb byte [rdi], dx
je 0x41c003
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41bfeb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41c02c
push r11
je 0x41c001
je 0x41c035
jb 0x41c034
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x41bfec
pop rdi
pop rdx
push rbx
je 0x41c024
je 0x41c03e
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41c075
je 0x41c048
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41c07b
je 0x41c070
insb byte [rdi], dx
je 0x41c07c
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41c054
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41c07b
pop rax
push rsp
pop rdi
push r11
je 0x41c06e
je 0x41c0b0
jo 0x41c0a9
jo 0x41c097
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41c0bc
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x41c08e
xor ebx, dword [rdi + 0x53]
jo 0x41c0c0
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41c0cc
pop rdi
jo 0x41c0df
jb 0x41c0cc
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41c0af
je 0x41c0e3
jb 0x41c0e2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c0ba
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c101
push rax
jbe 0x41c112
jbe 0x41c0e4
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c111
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c12e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41c104
pop rdi
push rbx
jo 0x41c137
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41c143
pop rdi
jae 0x41c149
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c14d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c16a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41c172
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41c18b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x41c167
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c1a6
movsxd rbx, dword [rdi + 0x73]
je 0x41c1b4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c1af
je 0x41c1c4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41c166
pop rdi
pop rdx
xor al, 0x72
push rdx
imul edx, dword [rbx + 0x30], 0x5f30535f
push rbx
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x45], bl
jbe 0x41c1cb
jo 0x41c1d8
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c1c3
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41c1e7
xor dword [rdx], esi
jne 0x41c217
jo 0x41c21a
je 0x41c1eb
jbe 0x41c213
movsxd rsp, dword [rbp + 0x53]
je 0x41c1e0
xor al, 0x64
jne 0x41c222
je 0x41c217
insb byte [rdi], dx
je 0x41c223
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x41c229
insb byte [rdi], dx
je 0x41c235
jb 0x41c217
jbe 0x41c1d4
pop rdi
pop rdx
push rbx
je 0x41c20b
xor dword [rdi + 0x54], ebx
jne 0x41c24f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x41c266
jo 0x41c269
je 0x41c23a
jbe 0x41c262
movsxd rsp, dword [rbp + 0x53]
je 0x41c22f
xor al, 0x64
jne 0x41c271
je 0x41c266
insb byte [rdi], dx
je 0x41c272
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41c267
push r12
pop rdi
jo 0x41c278
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c263
xor bl, byte [rdi + 0x5f]
je 0x41c298
push 0x65706c65
jb 0x41c289
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x41c2bf
je 0x41c292
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x41c2c6
je 0x41c2bb
insb byte [rdi], dx
je 0x41c2c7
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41c2a4
xor dword [rdi + 0x54], ebx
jne 0x41c2e8
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x41c2df
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rsp
push rbx
push rbx
je 0x41c2c8
cmp dword [rdi + 0x53], ebx
jo 0x41c2fb
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41c30b
add byte [edi + 0x5a], bl
ja 0x41c323
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [r9], esi
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x41c2fb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c33a
movsxd rbx, dword [rdi + 0x73]
je 0x41c348
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c343
je 0x41c358
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41c33c
jo 0x41c349
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c334
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41c36d
je 0x41c382
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x41c353
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c392
movsxd rbx, dword [rdi + 0x73]
je 0x41c3a0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c39b
je 0x41c3b0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41c394
xor ebx, dword [rdi + 0x5f]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c3dc
push r10
jbe 0x41c3ec
push rbx
je 0x41c3af
cmp dword [rdi + 0x42], ebx
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c3f6
pop rdi
push 0x65706c65
jb 0x41c3dc
push rsp
pop rdi
jo 0x41c3ed
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x41c41b
jo 0x41c409
push r11
xor ebx, dword [rdi + 0x44]
jo 0x41c3fb
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41c3ec
jbe 0x41c41d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41c3f6
je 0x41c42a
jb 0x41c429
push rbx
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41c40a
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41c449
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x41c463
jo 0x41c466
je 0x41c437
jbe 0x41c45f
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41c447
outsw dx, word [rsi]
jb 0x41c48b
jb 0x41c47b
push r11
je 0x41c451
je 0x41c485
jb 0x41c484
push r12
pop rdi
push rdx
push rbx
je 0x41c45b
jb 0x41c492
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c496
pop rdi
jb 0x41c499
jb 0x41c49d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x41c4b4
add byte gs:[r15 + 0x5a], r11b
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c4ca
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41c4d3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41c4c7
push rbx
je 0x41c4b9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c4f8
movsxd rbx, dword [rdi + 0x73]
je 0x41c506
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c501
je 0x41c516
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41c4ef
xor bl, byte [rdi + 0x5f]
jae 0x41c52b
jb 0x41c52b
pop rdi
jo 0x41c53e
jb 0x41c515
push rbx
je 0x41c506
je 0x41c53a
jb 0x41c539
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c511
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c558
push rax
jbe 0x41c569
jbe 0x41c53b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c561
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c57e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x41c55c
cmp dword [rdi + 0x53], ebx
jo 0x41c58f
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41c59f
push rdx
push r12
pop rdi
jo 0x41c595
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c581
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41c5c2
push rbx
je 0x41c599
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c5d8
movsxd rbx, dword [rdi + 0x73]
je 0x41c5e6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c5e1
je 0x41c5f6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x41c5ad
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41c5f9
jae 0x41c61e
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x41c63b
jo 0x41c63e
je 0x41c61e
je 0x41c63f
imul ebp, dword [rsi + 0x67], 0x4e5a5f00
push rbx
je 0x41c608
xor dword [rdi + 0x54], ebx
jne 0x41c64c
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x41c663
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c635
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c66a
push r10
push rax
xor dword [rax], esi
jne 0x41c681
jo 0x41c684
je 0x41c657
imul ebp, dword [rbp + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x41c682
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c686
pop rdi
jb 0x41c689
jb 0x41c68d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x41c6a3
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41c672
je 0x41c68c
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41c692
jae 0x41c6b7
push rbx
je 0x41c686
xor al, 0x64
jne 0x41c6c8
je 0x41c6bd
insb byte [rdi], dx
je 0x41c6c9
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41c6a1
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41c6c8
pop rax
push rsp
pop rdi
push r11
je 0x41c6bb
je 0x41c6fd
jo 0x41c6f6
jo 0x41c6e4
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41c709
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41c71c
jo 0x41c71f
je 0x41c6f0
jbe 0x41c718
movsxd rsp, dword [rbp + 0x35]
ja 0x41c726
imul esi, dword [rbp + 0x49], 0x454a6369
push rbx
je 0x41c6fb
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41c703
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x41c74b
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c769
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41c772
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41c766
push rbx
je 0x41c752
xor ebx, dword [rdi + 0x53]
jo 0x41c784
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41c790
pop rdi
jo 0x41c7a3
jb 0x41c790
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41c773
je 0x41c7a7
jb 0x41c7a6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c77e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c7c5
push rax
jbe 0x41c7d6
jbe 0x41c7a8
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c7ea
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41c7c0
xor byte [rdi + 0x49], bl
je 0x41c7f9
jb 0x41c7f5
jae 0x41c7ff
push r8
movsxd rcx, dword [rdx + 0x30]
pop rdi
push rbx
pop rdi
jae 0x41c80f
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c7e6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41c81f
je 0x41c834
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41c7ff
xor ebx, dword [rdi + 0x53]
jo 0x41c831
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41c83d
pop rdi
jo 0x41c850
jb 0x41c83d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41c820
je 0x41c854
jb 0x41c853
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c82b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c872
push rax
jbe 0x41c883
jbe 0x41c855
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c882
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c89f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41c885
je 0x41c8c7
jo 0x41c8c0
push rax
jbe 0x41c8d1
xor cl, byte [r9 + 0x4a]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41c8ad
jo 0x41c8bb
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c8a6
xor dword [rdi + 0x54], ebx
jne 0x41c8ea
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41c8bb
xor al, 0x64
jne 0x41c8fd
je 0x41c8f2
insb byte [rdi], dx
je 0x41c8fe
cmp byte [r13 + 0x73], dl
je 0x41c8e3
jae 0x41c908
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c8ea
je 0x41c904
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
cmp byte [rbp + 0x73], dl
je 0x41c90a
jae 0x41c92f
push rbx
je 0x41c8fe
xor al, 0x64
jne 0x41c940
je 0x41c935
insb byte [rdi], dx
je 0x41c941
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41c919
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41c940
pop rax
push rsp
pop rdi
push r11
je 0x41c933
je 0x41c975
jo 0x41c96e
jo 0x41c95c
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41c981
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c94e
xor bl, byte [rdi + 0x5f]
je 0x41c983
push 0x65706c65
jb 0x41c974
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x41c9a9
jo 0x41c9ac
je 0x41c97d
jbe 0x41c9a5
movsxd rsp, dword [rbp + 0x4a]
push rbx
je 0x41c973
xor al, 0x64
jne 0x41c9b5
je 0x41c9aa
insb byte [rdi], dx
je 0x41c9b6
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41c993
xor dword [rdi + 0x54], ebx
jne 0x41c9d7
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41c9ce
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41c9b6
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41ca08
jb 0x41c9df
push rbx
push r11
je 0x41c9ce
xor ebx, dword [rdi + 0x53]
jo 0x41ca00
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41ca0c
pop rdi
jo 0x41ca1f
jb 0x41ca0c
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41c9ef
je 0x41ca23
jb 0x41ca22
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c9fa
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ca41
push rax
jbe 0x41ca52
jbe 0x41ca24
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ca51
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41ca6e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
push rbx
outsb dx, byte [rsi]
add byte [rdi + 0x5a], bl
push rbx
je 0x41ca47
xor byte [rdi + 0x5f], bl
jne 0x41ca88
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41caa3
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x41caa4
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x41cab8
push r11
je 0x41ca74
xor ebp, dword [rbp + 0x6f]
jbe 0x41caad
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41ca8c
je 0x41cac0
jb 0x41cabf
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x41cae6
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x41cac7
jbe 0x41caf8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41cad1
je 0x41cb05
jb 0x41cb04
push rbx
push r11
xor byte [rdi + 0x45], bl
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x41cae8
xor dword [rdi + 0x4d], ebx
jne 0x41cb30
js 0x41cb1e
jae 0x41cb28
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41cb2c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41cb49
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41cb1e
xor bl, byte [rdi + 0x5f]
jae 0x41cb5a
jb 0x41cb5a
pop rdi
jo 0x41cb6d
jb 0x41cb44
push rbx
je 0x41cb35
je 0x41cb69
jb 0x41cb68
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41cb78
pop rdi
jae 0x41cb76
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41cb7a
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41cb97
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41cb6c
xor al, 0x5f
push rbx
jo 0x41cb9f
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x41cb94
imul r14, qword [rax], 0x49615345
push rbx
je 0x41cb8c
je 0x41cbc0
jb 0x41cbbf
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41cb97
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41cbde
push rax
jbe 0x41cbef
jbe 0x41cbc1
xor dword [rbp + 0x45], eax
xor dword [r13 + 0x52], eax
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41cbc5
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41cc04
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41cbd8
xor al, 0x64
jne 0x41cc1a
je 0x41cc0f
insb byte [rdi], dx
je 0x41cc1b
xor qword [r8], rsi
jne 0x41cc30
jo 0x41cc33
je 0x41cc06
imul ebp, dword [rbp + 0x45], 0x4531624c
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41cc0e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41cc55
push rax
jbe 0x41cc66
jbe 0x41cc38
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x49], ebx
push r12
pop rdi
jo 0x41cc53
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41cc84
jo 0x41cc87
je 0x41cc58
jbe 0x41cc80
movsxd rsp, dword [rbp + 0x35]
ja 0x41cc8e
imul esi, dword [rbp + 0x45], 0x534e4b52
je 0x41cc5d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41cc9c
movsxd rbx, dword [rdi + 0x73]
je 0x41ccaa
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41cca5
je 0x41ccba
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5f], r11b
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x41cce0
je 0x41ccb3
imul ebp, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push r11
je 0x41ccad
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41ccd1
cmp dword [rcx + 0x6e], ecx
jo 0x41cd02
je 0x41ccd5
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41cd08
je 0x41ccfd
insb byte [rdi], dx
je 0x41cd09
push r11
xor byte [rdi + 0x45], bl
jo 0x41cd20
jbe 0x41ccaf
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41cd2b
jo 0x41cd2e
je 0x41ccff
jbe 0x41cd27
movsxd rsp, dword [rbp + 0x35]
ja 0x41cd35
imul esi, dword [rbp + 0x49], 0x4e454569
push rbx
je 0x41cd07
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x41cd31
je 0x41cd11
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x41cd6a
push rbx
je 0x41cd34
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41cd54
xor ebx, dword [rdi + 0x53]
jo 0x41cd86
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41cd92
pop rdi
jo 0x41cda5
jb 0x41cd92
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41cd75
je 0x41cda9
jb 0x41cda8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41cd80
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41cdc7
push rax
jbe 0x41cdd8
jbe 0x41cdaa
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41cdd7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41cdf4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4a]
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x41cdec
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41cdd7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ce10
je 0x41ce25
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41cdf4
je 0x41ce28
jb 0x41ce27
jae 0x41ce3f
jb 0x41ce3c
jns 0x41ce18
push rbx
xor byte [rdi + 0x45], bl
jbe 0x41ce28
push rbx
xor dword [rdi + 0x50], ebx
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41ce29
jae 0x41ce4e
xor eax, 0x75706e69
je 0x41ce35
jbe 0x41cdf2
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41ce6e
jo 0x41ce71
je 0x41ce42
jbe 0x41ce6a
movsxd rsp, dword [rbp + 0x36]
ja 0x41ce78
imul esi, dword [rbp + 0x54], 0x635045
pop rdi
pop rdx
push rbx
je 0x41ce49
je 0x41ce8b
jo 0x41ce84
push r11
je 0x41ce50
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41cea1
outsb dx, byte gs:[rsi]
je 0x41ce99
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x49], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41cea6
jo 0x41ceb4
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41ce9f
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41cec3
xor dword [rdx], esi
jne 0x41cef3
jo 0x41cef6
je 0x41cec7
jbe 0x41ceef
movsxd rsp, dword [rbp + 0x53]
je 0x41cebc
xor al, 0x64
jne 0x41cefe
je 0x41cef3
insb byte [rdi], dx
je 0x41ceff
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x50], eax
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41cedf
xor dword [rdi + 0x54], ebx
jne 0x41cf23
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rbx
je 0x41cef5
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41cf46
outsb dx, byte gs:[rsi]
je 0x41cf3e
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41cf3e
xor bl, byte [rdi + 0x5f]
je 0x41cf73
push 0x65706c65
jb 0x41cf64
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x41cf9a
je 0x41cf6d
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x41cfa1
je 0x41cf96
insb byte [rdi], dx
je 0x41cfa2
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41cf7d
xor dword [rdi + 0x54], ebx
jne 0x41cfc1
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41cfb8
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41cfa1
pop rdi
jns 0x41cfd7
pop rdi
ja 0x41cfeb
jo 0x41cfdb
insd dword [rdi], dx
insd dword [rdi], dx
jb 0x41cfe2
jo 0x41cff4
imul ebp, dword [rsi + 0x74], 0x50497265
jbe 0x41d005
cmp dword [r15 + 0x5f], r11d
outsd dx, dword fs:[rsi]
pop rdi
ja 0x41d00b
jo 0x41cfe1
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
push r11
je 0x41cfda
xor ebx, dword [rdi + 0x53]
jo 0x41d00c
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41d018
pop rdi
jo 0x41d02b
jb 0x41d018
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41cffb
je 0x41d02f
jb 0x41d02e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d006
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d04d
push rax
jbe 0x41d05e
jbe 0x41d030
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d05d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41d07a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x4a], bl
jbe 0x41d077
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x41d098
jae 0x41d028
insb byte [rdi], dx
jne 0x41d0a0
push 0x4c474040
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41d077
je 0x41d0b9
jo 0x41d0b2
push r8
cmp byte [rbp + 0x73], dl
je 0x41d093
jae 0x41d0b8
push rbx
je 0x41d087
xor al, 0x64
jne 0x41d0c9
je 0x41d0be
insb byte [rdi], dx
je 0x41d0ca
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
outsw dx, word [rsi]
jo 0x41d0ea
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41d0fd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41d106
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d0fa
push rbx
je 0x41d0eb
je 0x41d11f
jb 0x41d11e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d0f6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d13d
push rax
jbe 0x41d14e
jbe 0x41d120
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41d159
jb 0x41d15c
movsxd rsi, dword [rcx + rcx*2 + 0x53]
cmp byte [rdi + 0x4a], bl
push rbx
pop rdi
jbe 0x41d146
push rsp
pop rdi
jo 0x41d14a
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d136
xor eax, 0x67696c61
outsb dx, byte [rsi]
pop rdi
jae 0x41d184
outsd dx, dword [rsi]
jb 0x41d174
insd dword [edi], dx
xor esi, dword [rdx]
insd dword [rdi], dx
cmp byte [rbp + 0x45], al
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x41d1a2
jo 0x41d1a5
je 0x41d176
jbe 0x41d19e
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x41d16f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41d1b0
push rbx
je 0x41d187
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d1c6
movsxd rbx, dword [rdi + 0x73]
je 0x41d1d4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d1cf
je 0x41d1e4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor dword [rdi + 0x4d], ebx
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41d1d1
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d206
push r10
push rbx
je 0x41d1d8
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41d212
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41d226
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x41d230
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d234
pop rdi
jb 0x41d237
jb 0x41d23b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x41d251
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d251
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41d25a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d24e
push rbx
je 0x41d23f
je 0x41d273
jb 0x41d272
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d24a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d291
push rax
jbe 0x41d2a2
jbe 0x41d274
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41d273
je 0x41d2b5
jo 0x41d2ae
push rax
jbe 0x41d2bf
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rcx + 0x6e], r9
jo 0x41d2d1
je 0x41d2a4
imul ebp, dword [rbp + 0x43], 0x4b504532
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x41d29f
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41d2c3
xor dword [rax], esi
jne 0x41d2f3
jo 0x41d2f6
je 0x41d2c9
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41d2fc
je 0x41d2f1
insb byte [rdi], dx
je 0x41d2fd
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x41d303
insb byte [rdi], dx
je 0x41d30f
jb 0x41d2f1
jbe 0x41d2ae
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d317
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41d320
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d314
push rbx
je 0x41d304
je 0x41d338
jb 0x41d337
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41d34f
jb 0x41d352
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x4a], ebx
push rdx
jbe 0x41d35e
jbe 0x41d33e
push rsp
pop rdi
jo 0x41d342
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d32e
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41d36d
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x41d388
je 0x41d35b
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rsp
push r11
je 0x41d363
xor dword [rdi + 0x4d], ebx
jne 0x41d3ab
js 0x41d399
jae 0x41d3a3
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d3a7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41d3c4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push r11
je 0x41d396
xor ebp, dword [rbp + 0x6f]
jbe 0x41d3cf
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41d3ae
je 0x41d3e2
jb 0x41d3e1
jbe 0x41d384
pop rdi
pop rdx
push rbx
je 0x41d3bb
xor dword [rdi + 0x54], ebx
jne 0x41d3ff
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rbx
je 0x41d3d1
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41d422
outsb dx, byte gs:[rsi]
je 0x41d41a
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41d41c
xor al, 0x5f
pop rdi
jne 0x41d45c
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x41d463
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x41d46a
push r8
push rbx
je 0x41d447
je 0x41d47b
jb 0x41d47a
push rbx
xor dword [rdi + 0x53], ebx
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41d46f
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x41d49d
outsb dx, byte [rsi]
push r8
movsxd rbp, dword [r10 + 0x50]
movsxd rax, dword [rbp + 0x54]
xor dword [rdi + 0x54], ebx
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi + 0x53]
je 0x41d487
jb 0x41d4b9
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x41d4d6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41d4d0
add byte [edi + 0x5a], bl
push rbx
je 0x41d4a7
xor bl, byte [rdi + 0x5f]
je 0x41d4dc
push 0x65706c65
jb 0x41d4cd
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41d4d2
jae 0x41d4f7
push rbx
je 0x41d4c7
xor al, 0x64
jne 0x41d509
je 0x41d4fe
insb byte [rdi], dx
je 0x41d50a
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41d4e7
xor dword [rdi + 0x54], ebx
jne 0x41d52b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41d522
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
push rbx
je 0x41d513
je 0x41d547
jb 0x41d546
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d51e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d565
push rax
jbe 0x41d576
jbe 0x41d548
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41d544
je 0x41d55e
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
xor dword [rax], esi
jne 0x41d594
jo 0x41d597
je 0x41d56a
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41d59d
je 0x41d592
insb byte [rdi], dx
je 0x41d59e
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41d576
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41d59d
pop rax
push rsp
pop rdi
push r11
je 0x41d590
je 0x41d5d2
jo 0x41d5cb
jo 0x41d5b9
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41d5de
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d5ac
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41d5ed
push rbx
je 0x41d5c4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d603
movsxd rbx, dword [rdi + 0x73]
je 0x41d611
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d60c
je 0x41d621
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x41d5d8
pop rdi
pop rdx
ja 0x41d64f
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [r14], esi
pop rdi
movsxd rbp, dword [r9 + 0x45]
jbe 0x41d634
jo 0x41d641
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x41d672
je 0x41d645
imul ebp, dword [rbp + 0x39], 0x6c6c6966
outsb dx, byte [rsi]
jo 0x41d680
je 0x41d652
jbe 0x41d60f
pop rdi
pop rdx
push rbx
je 0x41d645
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [rbp + 0x4e]
push rbx
je 0x41d65a
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41d6bf
jo 0x41d6ad
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
outsb dx, byte [rsi]
jae 0x41d6cb
jb 0x41d699
xor eax, 0x31787863
xor dword [rax], eax
pop rdi
pop rdx
push rbx
je 0x41d695
xor bl, byte [rdi + 0x5f]
jae 0x41d6d1
jb 0x41d6d1
pop rdi
jo 0x41d6e4
jb 0x41d6bb
push rbx
je 0x41d6ac
je 0x41d6e0
jb 0x41d6df
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41d6ef
pop rdi
jae 0x41d6ed
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d6f1
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41d70e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4e], ecx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x41d720
push r11
je 0x41d6e9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d730
push rax
jbe 0x41d741
jbe 0x41d713
jbe 0x41d718
push r11
pop rdi
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x32]
add byte [r15 + 0x5a], r11b
push rbx
je 0x41d71e
jbe 0x41d74f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41d728
je 0x41d75c
jb 0x41d75b
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x41d772
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rdx
jbe 0x41d78a
jbe 0x41d75e
jo 0x41d76b
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41d75b
outsw dx, word [rsi]
jb 0x41d79f
jb 0x41d78f
push r10
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41d76c
jb 0x41d7a3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d7a7
pop rdi
jb 0x41d7aa
jb 0x41d7ae
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41d7c5
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41d78f
xor dword [rdi + 0x54], ebx
jne 0x41d7d3
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x41d7ea
jo 0x41d7ed
je 0x41d7c0
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41d7f3
je 0x41d7e8
insb byte [rdi], dx
je 0x41d7f4
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d80e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41d817
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d80b
push rbx
je 0x41d7fb
je 0x41d82f
jb 0x41d82e
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x41d7db
pop rdi
pop rdx
push rbx
je 0x41d812
xor dword [rdi + 0x54], ebx
jne 0x41d856
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41d827
xor al, 0x64
jne 0x41d869
je 0x41d85e
insb byte [rdi], dx
je 0x41d86a
cmp byte [r13 + 0x73], dl
je 0x41d84f
jae 0x41d874
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41d855
xor bl, byte [rdi + 0x5f]
jae 0x41d891
jb 0x41d891
pop rdi
jo 0x41d8a4
jb 0x41d87b
push rbx
je 0x41d86c
je 0x41d8a0
jb 0x41d89f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d877
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d8be
push rax
jbe 0x41d8cf
jbe 0x41d8a1
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d8c7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41d8e4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41d8be
outsw dx, word [rsi]
jb 0x41d902
jb 0x41d8f2
push r10
push rbx
je 0x41d8cc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d90b
movsxd rbx, dword [rdi + 0x73]
je 0x41d919
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d914
je 0x41d929
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x41d8ff
jb 0x41d936
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d93a
pop rdi
jb 0x41d93d
jb 0x41d941
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
cmp byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41d958
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41d924
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d959
push r10
push rbx
je 0x41d92a
xor byte [rbx + 0x68], dh
jb 0x41d964
pop rdi
jo 0x41d977
jb 0x41d94e
push rbx
je 0x41d93f
je 0x41d973
jb 0x41d972
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d94a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d991
push rax
jbe 0x41d9a2
jbe 0x41d974
push rbx
je 0x41d96a
jb 0x41d9a1
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d9a5
pop rdi
jb 0x41d9a8
jb 0x41d9ac
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x41d9c2
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41d98f
xor bl, byte [rdi + 0x5f]
je 0x41d9c4
push 0x65706c65
jb 0x41d9b5
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x41d9eb
je 0x41d9be
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x41d9f2
je 0x41d9e7
insb byte [rdi], dx
je 0x41d9f3
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41d9ce
xor dword [rdi + 0x54], ebx
jne 0x41da12
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x41da09
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41da24
jno 0x41da0f
push rbx
je 0x41d9fa
je 0x41da2e
jb 0x41da2d
xor ch, byte fs:[rcx + 0x64]
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41da0d
je 0x41da4f
jo 0x41da48
push rax
cmp byte [rbp + 0x73], dl
je 0x41da29
jae 0x41da4e
push rbx
je 0x41da1d
xor al, 0x64
jne 0x41da5f
je 0x41da54
insb byte [rdi], dx
je 0x41da60
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
imul ebp, dword [rsi + 0x70], 0x754d7475
je 0x41da85
js 0x41da22
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41da9e
jo 0x41daa1
je 0x41da81
je 0x41daa2
imul ebp, dword [rsi + 0x67], 0x52453143
push rbx
je 0x41da72
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41dab1
movsxd rbx, dword [rdi + 0x73]
je 0x41dabf
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41daba
je 0x41dacf
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x41daa3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41dae4
push rbx
je 0x41dabb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41dafa
movsxd rbx, dword [rdi + 0x73]
je 0x41db08
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41db03
je 0x41db18
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor ebx, dword [rdi + 0x4d]
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x41db0a
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41db44
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41db58
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x31], 0x72617030
insd dword [rdi], dx
pop rdi
je 0x41db77
jo 0x41db65
xor al, byte [r13 + 0x69]
imul eax, dword [rax], 0x534e5a5f
je 0x41db42
jbe 0x41db73
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41db4e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41db8d
movsxd rbx, dword [rdi + 0x73]
je 0x41db9b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41db96
je 0x41dbab
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
pop rdi
pop r15
jne 0x41dbc6
je 0x41dbbb
jo 0x41dbcf
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push r11
je 0x41dba3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41dbe2
movsxd rbx, dword [rdi + 0x73]
je 0x41dbf0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41dbeb
je 0x41dc00
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x64
je 0x41dc01
jbe 0x41dbe3
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41dbeb
xor ebx, dword [rdi + 0x53]
jo 0x41dc1d
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41dc29
pop rdi
jo 0x41dc3c
jb 0x41dc29
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41dc0c
je 0x41dc40
jb 0x41dc3f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41dc17
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41dc5e
push rax
jbe 0x41dc6f
jbe 0x41dc41
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41dc6e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41dc8b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41dc67
je 0x41dc81
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41dcb8
je 0x41dc8b
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41dcbe
je 0x41dcb3
insb byte [rdi], dx
je 0x41dcbf
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41dc97
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41dcbe
pop rax
push rsp
pop rdi
push r11
je 0x41dcb1
je 0x41dcf3
jo 0x41dcec
jo 0x41dcda
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41dcff
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rsp
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3032
jae 0x41dd16
pop rdi
movsxd rbp, dword [rcx + 0x73]
jae 0x41dd13
je 0x41dd2f
jo 0x41dd1d
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push r11
je 0x41dd03
xor al, 0x64
jne 0x41dd45
je 0x41dd3a
insb byte [rdi], dx
je 0x41dd46
xor qword [r10], rsi
jne 0x41dd5b
jo 0x41dd5e
je 0x41dd2f
jbe 0x41dd57
movsxd rsp, dword [rbp + 0x45]
movsxd rbp, dword [rbp + rax*2 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x41dd31
xor al, 0x64
jne 0x41dd73
je 0x41dd68
insb byte [rdi], dx
je 0x41dd74
xor qword [r8], rsi
jne 0x41dd89
jo 0x41dd8c
je 0x41dd5f
imul ebp, dword [rbp + 0x45], 0x50456c63
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41dd5c
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41dd9b
insd dword [rdi], dx
xor byte [rbp + 0x53], al
je 0x41dd70
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41ddc1
outsb dx, byte gs:[rsi]
je 0x41ddb9
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor byte [rbp + 0x45], al
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ddef
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41ddf8
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ddec
push rbx
je 0x41dddc
je 0x41de10
jb 0x41de0f
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41ddee
je 0x41de22
jb 0x41de21
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ddf9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41de40
push rax
jbe 0x41de51
jbe 0x41de23
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41de21
jae 0x41de55
outsb dx, byte [esi]
imul esi, dword [rsp], 0x534e5a5f
je 0x41de2a
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41de69
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41de3d
xor al, 0x64
jne 0x41de7f
je 0x41de74
insb byte [rdi], dx
je 0x41de80
cmp byte [r13 + 0x73], dl
je 0x41de65
jae 0x41de8a
xor dword [rbp + 0x45], eax
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rcx + 0x6e], r9
jo 0x41deb6
je 0x41de89
imul ebp, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41dec7
jo 0x41deca
je 0x41de9b
jbe 0x41dec3
movsxd rsp, dword [rbp + 0x35]
ja 0x41ded1
imul esi, dword [rbp + 0x49], 0x35314152
pop rdi
movsxd rsp, dword [r9 + r9*2 + 0x63]
push rbx
je 0x41dead
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41deb5
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41defd
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
ja 0x41df29
imul esi, dword [rbp + 0x6c], 0x524a496e
pop rdi
movsxd rbp, dword [r9 + 0x52]
cmp dword [r15 + 0x53], ebx
xor byte [rdi + 0x45], bl
jbe 0x41df14
jo 0x41df21
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41df0c
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41df5e
jb 0x41df35
push rbx
push r11
je 0x41df24
xor ebx, dword [rdi + 0x53]
jo 0x41df56
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41df62
pop rdi
jo 0x41df75
jb 0x41df62
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41df45
je 0x41df79
jb 0x41df78
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41df50
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41df97
push rax
jbe 0x41dfa8
jbe 0x41df7a
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41dfa7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41dfc4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r12d, dword [r15 + 0x65]
je 0x41dfa9
jbe 0x41df66
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x41dfe3
jo 0x41dfe6
je 0x41dfb7
jbe 0x41dfdf
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x41dfb5
je 0x41dfe9
jb 0x41dfe8
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41dff3
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x41e00c
jb 0x41dff3
push rbx
je 0x41dfe4
je 0x41e018
jb 0x41e017
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41dfef
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e036
push rax
jbe 0x41e047
jbe 0x41e019
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41e019
outsw dx, word [rsi]
jb 0x41e05d
jb 0x41e04d
push r10
xor dword [r14], esi
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41e02b
jb 0x41e062
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41e066
pop rdi
jb 0x41e069
jb 0x41e06d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41e084
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41e052
je 0x41e094
jo 0x41e08d
push r8
xor dword [rdx], esi
jne 0x41e09e
jo 0x41e0a1
je 0x41e072
jbe 0x41e09a
movsxd rsp, dword [rbp + 0x53]
je 0x41e067
xor al, 0x64
jne 0x41e0a9
je 0x41e09e
insb byte [rdi], dx
je 0x41e0aa
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x41e099
xor dword [rdi + 0x4d], ebx
jne 0x41e0e1
js 0x41e0cf
jae 0x41e0d9
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e0dd
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e0fa
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x41e0cb
xor dword [rdi + 0x54], ebx
jne 0x41e10f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x41e126
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41e0f3
xor ebx, dword [rdi + 0x53]
jo 0x41e125
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41e131
pop rdi
jo 0x41e144
jb 0x41e131
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41e114
je 0x41e148
jb 0x41e147
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e11f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e166
push rax
jbe 0x41e177
jbe 0x41e149
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e176
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e193
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x49], ecx
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x41e18b
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e175
xor dword [rbp + 0x61], ebp
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
push rbx
je 0x41e18b
je 0x41e1bf
jb 0x41e1be
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e196
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e1dd
push rax
jbe 0x41e1ee
jbe 0x41e1c0
push r11
pop rdi
push r11
je 0x41e1b8
xor byte [rbx + 0x68], dh
jb 0x41e1f2
pop rdi
jo 0x41e205
jb 0x41e1dc
push rsp
pop rdi
jo 0x41e1e8
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41e21b
je 0x41e1ec
jbe 0x41e214
movsxd rsp, dword [rbp + 0x32]
xor dh, byte [rdx + 0x65]
push rbp
outsb dx, byte [rsi]
jae 0x41e220
outsb dx, byte [esi]
outsb dx, byte fs:[rsi]
je 0x41e206
outsb dx, byte gs:[rsi]
jb 0x41e225
insb byte [rdi], dx
push 0x45
imul r10d, dword [r10 + 0x54], 0x5f00635f
pop rdx
push rbx
je 0x41e20c
pop rdi
jae 0x41e24d
jb 0x41e24a
jns 0x41e226
push rax
push rbx
je 0x41e219
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e258
movsxd rbx, dword [rdi + 0x73]
je 0x41e266
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e261
je 0x41e276
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
xor eax, 0x5476455f
pop rdi
push rbx
pop rdi
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x41e25c
xor dword [rdi + 0x54], ebx
jne 0x41e2a0
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41e2b7
jo 0x41e2ba
je 0x41e28b
jbe 0x41e2b3
movsxd rsp, dword [rbp + 0x53]
je 0x41e280
xor al, 0x64
jne 0x41e2c2
je 0x41e2b7
insb byte [rdi], dx
je 0x41e2c3
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41e2b8
push r12
pop rdi
jo 0x41e2c9
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41e2b5
xor ebp, dword [rbp + 0x6f]
jbe 0x41e2ee
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e2cf
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e30e
movsxd rbx, dword [rdi + 0x73]
je 0x41e31c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e317
je 0x41e32c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x41e33b
jbe 0x41e2ce
pop rdi
pop rdx
push rbx
je 0x41e305
xor al, 0x5f
pop rdi
jae 0x41e341
jb 0x41e341
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41e32d
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e34c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e369
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4e], ecx
push rbx
je 0x41e33f
je 0x41e373
jb 0x41e372
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e34a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e391
push rax
jbe 0x41e3a2
jbe 0x41e374
push r11
push r11
pop rdi
push r11
pop r15
push r11
je 0x41e374
cmp dword [rdi + 0x53], ebx
jo 0x41e3a7
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41e3b7
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x41e3b1
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
push r11
je 0x41e39e
cmp dword [rdi + 0x53], ebx
jo 0x41e3d1
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41e3e1
add byte [edi + 0x5a], bl
push rbx
je 0x41e3bd
je 0x41e3ff
jo 0x41e3f8
push r8
xor dword [rdx], esi
jne 0x41e409
jo 0x41e40c
je 0x41e3dd
jbe 0x41e405
movsxd rsp, dword [rbp + 0x53]
je 0x41e3d2
xor al, 0x64
jne 0x41e414
je 0x41e409
insb byte [rdi], dx
je 0x41e415
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41e403
xor dword [rdi + 0x54], ebx
jne 0x41e447
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41e418
xor al, 0x64
jne 0x41e45a
je 0x41e44f
insb byte [rdi], dx
je 0x41e45b
cmp byte [r13 + 0x73], dl
je 0x41e440
jae 0x41e465
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e44b
outsw dx, word [rsi]
jb 0x41e48f
jb 0x41e47f
push r10
xor ebx, dword [r15 + 0x4b]
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41e45c
jb 0x41e493
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41e497
pop rdi
jb 0x41e49a
jb 0x41e49e
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41e4b5
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41e480
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x41e4be
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x41e4c5
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e4ab
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e4ea
movsxd rbx, dword [rdi + 0x73]
je 0x41e4f8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e4f3
je 0x41e508
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x41e4d8
xor ebp, dword [rbp + 0x6f]
jbe 0x41e511
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e4f8
xor al, 0x5f
push rbx
jo 0x41e52b
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x41e520
imul r14, qword [rax], 0x49615345
push rbx
je 0x41e518
je 0x41e54c
jb 0x41e54b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e523
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e56a
push rax
jbe 0x41e57b
jbe 0x41e54d
xor dword [rbp + 0x45], eax
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41e54e
je 0x41e568
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x41e59e
jo 0x41e5a1
je 0x41e574
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41e5a7
je 0x41e59c
insb byte [rdi], dx
je 0x41e5a8
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41e580
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41e5a7
pop rax
push rsp
pop rdi
push r11
je 0x41e59a
je 0x41e5dc
jo 0x41e5d5
jo 0x41e5c3
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41e5e8
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41e5b6
xor bl, byte [rdi + 0x5f]
jae 0x41e5f2
jb 0x41e5f2
pop rdi
jo 0x41e605
jb 0x41e5dc
push rbx
je 0x41e5cd
je 0x41e601
jb 0x41e600
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41e610
pop rdi
jae 0x41e60e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e612
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e62f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x41e641
push r11
je 0x41e60a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e651
push rax
jbe 0x41e662
jbe 0x41e634
jbe 0x41e639
push r11
pop rdi
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x32]
add byte [r15 + 0x5a], r11b
push r11
je 0x41e63b
xor ebp, dword [rbp + 0x6f]
jbe 0x41e674
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e655
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e694
movsxd rbx, dword [rdi + 0x73]
je 0x41e6a2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e69d
je 0x41e6b2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41e654
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41e6be
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41e6d7
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x41e6b3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e6f2
movsxd rbx, dword [rdi + 0x73]
je 0x41e700
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e6fb
je 0x41e710
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
jae 0x41e717
jbe 0x41e6b5
pop rdi
pop rdx
push rbx
je 0x41e6ed
insd dword [rdi], dx
js 0x41e707
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
jae 0x41e741
jb 0x41e743
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41e71c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e75b
movsxd rbx, dword [rdi + 0x73]
je 0x41e769
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e764
je 0x41e779
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e794
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41e79d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41e791
push rbx
je 0x41e77d
xor ebx, dword [rdi + 0x53]
jo 0x41e7af
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41e7bb
pop rdi
jo 0x41e7ce
jb 0x41e7bb
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41e79e
je 0x41e7d2
jb 0x41e7d1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e7a9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e7f0
push rax
jbe 0x41e801
jbe 0x41e7d3
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e815
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41e7f1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e830
movsxd rbx, dword [rdi + 0x73]
je 0x41e83e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e839
je 0x41e84e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41e83c
xor dword [rdi + 0x54], ebx
jne 0x41e880
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x41e897
jo 0x41e89a
je 0x41e86d
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41e8a0
je 0x41e895
insb byte [rdi], dx
je 0x41e8a1
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41e8cd
jo 0x41e8d0
je 0x41e8a1
jbe 0x41e8c9
movsxd rsp, dword [rbp + 0x35]
ja 0x41e8d7
imul esi, dword [rbp + 0x45], 0x6544364e
je 0x41e8d0
imul ebp, dword [rcx + rdi + 0x50], 0x69636572
jae 0x41e8e2
outsd dx, dword [rsi]
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41e8fb
je 0x41e8cc
jbe 0x41e8f4
movsxd rsp, dword [rbp + 0x34]
jb 0x41e8f5
push r10
imul edx, dword [rbx + 0x31], 0x3153495f
pop rdi
push rbx
je 0x41e8dc
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x41e926
jb 0x41e8e6
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x41e941
jb 0x41e923
je 0x41e903
xor al, 0x69
jae 0x41e935
movsxd rbp, dword [rdi + 0x6e]
jbe 0x41e940
jb 0x41e951
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x41e94c
insb byte [rdi], dx
jne 0x41e953
xor al, 0x74
jns 0x41e965
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x41e951
push rsp
xor dword [rdi], ebx
pop rdi
pop rdi
je 0x41e96d
pop rdi
jae 0x41e983
jb 0x41e986
add byte [rdi + 0x5a], bl
push rbx
je 0x41e94f
outsw dx, word [rsi]
jb 0x41e993
jb 0x41e983
push r8
jbe 0x41e99a
push r12
pop rdi
push rdx
push rbx
je 0x41e95f
jb 0x41e996
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41e99a
pop rdi
jb 0x41e99d
jb 0x41e9a1
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x41e9b8
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41e987
je 0x41e9bb
jb 0x41e9ba
xor dh, byte fs:[rax]
push 0x77647261
jb 0x41e9c6
pop rdi
movsxd rbp, dword [rdi + 0x6e]
movsxd rsi, dword [rbp + 0x72]
jb 0x41e9cf
outsb dx, byte [rsi]
movsxd rdi, dword [rcx + 0x45]
jbe 0x41e9b0
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rdi], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e9b8
je 0x41e9d2
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41ea08
jo 0x41ea0b
je 0x41e9dc
jbe 0x41ea04
movsxd rsp, dword [rbp + 0x53]
je 0x41e9d1
xor al, 0x64
jne 0x41ea13
je 0x41ea08
insb byte [rdi], dx
je 0x41ea14
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41e9ec
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41ea13
pop rax
push rsp
pop rdi
push r11
je 0x41ea06
je 0x41ea48
jo 0x41ea41
jo 0x41ea2f
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41ea54
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41ea67
jo 0x41ea6a
je 0x41ea3b
jbe 0x41ea63
movsxd rsp, dword [rbp + 0x44]
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41ea38
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ea7f
push rax
jbe 0x41ea90
jbe 0x41ea62
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x4a], ebx
push r12
pop rdi
jo 0x41ea7d
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41ea69
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41ea8d
xor dword [rdx], esi
jne 0x41eabd
jo 0x41eac0
je 0x41ea91
jbe 0x41eab9
movsxd rsp, dword [rbp + 0x53]
je 0x41ea86
xor al, 0x64
jne 0x41eac8
je 0x41eabd
insb byte [rdi], dx
je 0x41eac9
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41eaab
outsw dx, word [rsi]
jb 0x41eaef
jb 0x41eadf
push r11
je 0x41eab0
xor al, 0x64
jne 0x41eaf2
je 0x41eae7
insb byte [rdi], dx
je 0x41eaf3
xor qword [r10], rsi
jne 0x41eb08
jo 0x41eb0b
je 0x41eadc
jbe 0x41eb04
movsxd rsp, dword [rbp + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x41ead8
jb 0x41eb0f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41eb13
pop rdi
jb 0x41eb16
jb 0x41eb1a
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41eb31
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41eb01
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41eb40
movsxd rbx, dword [rdi + 0x73]
je 0x41eb4e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41eb49
je 0x41eb5e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41eb4a
jbe 0x41eb7b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41eb56
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41eb95
movsxd rbx, dword [rdi + 0x73]
je 0x41eba3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41eb9e
je 0x41ebb3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x41eb9a
je 0x41ebce
jb 0x41ebcd
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41ebdd
pop rdi
jae 0x41ebdb
add byte [r15 + 0x5a], r11b
push rbx
je 0x41ebae
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41ebf8
jb 0x41ebfb
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x41ebc2
je 0x41ebf6
jb 0x41ebf5
push rbx
xor byte [rdi + 0x45], bl
jbe 0x41ebea
push rsp
pop rdi
jo 0x41ebee
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41ebda
xor byte [rbx + 0x68], dh
jb 0x41ec14
pop rdi
jo 0x41ec27
jb 0x41ebfe
push rbx
je 0x41ebef
je 0x41ec23
jb 0x41ec22
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41ec32
pop rdi
jae 0x41ec30
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41ec0e
outsw dx, word [rsi]
jb 0x41ec52
jb 0x41ec42
push r10
xor dword [rip + 0x45634b5f], esi
push r12
pop rdi
push rdx
push rbx
je 0x41ec20
jb 0x41ec57
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41ec5b
pop rdi
jb 0x41ec5e
jb 0x41ec62
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41ec79
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41ec43
xor dword [rdi + 0x54], ebx
jne 0x41ec87
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x41ec9e
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41ec74
insd dword [rdi], dx
jne 0x41ecb6
js 0x41ec7b
jne 0x41ecb5
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x45]
jbe 0x41ec4e
pop rdi
pop rdx
ja 0x41ecc5
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [r15 + rbx*2], esi
movsxd rsp, dword [r13 + r8*2 + 0x45]
jbe 0x41ecaa
jo 0x41ecb7
push rsp
pop rdi
add byte [rbx + 0x74], dh
jb 0x41ecd2
insd dword [rdi], dx
jo 0x41ecb2
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41ece8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41ecf1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ece5
push rbx
je 0x41ecd5
je 0x41ed09
jb 0x41ed08
jae 0x41ed1f
jb 0x41ed1c
jns 0x41ecf8
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41ed06
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41ecf1
je 0x41ed0b
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41ed42
je 0x41ed15
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41ed48
je 0x41ed3d
insb byte [rdi], dx
je 0x41ed49
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41ed22
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41ed49
pop rax
push rsp
pop rdi
push r11
je 0x41ed3c
je 0x41ed7e
jo 0x41ed77
jo 0x41ed65
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41ed8a
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
push rbx
je 0x41ed62
je 0x41ed96
jb 0x41ed95
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ed6d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41edb4
push rax
jbe 0x41edc5
jbe 0x41ed97
xor dword [r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41edc8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41ede1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41edba
je 0x41edee
jb 0x41eded
push rbx
je 0x41edc3
jbe 0x41edf4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
jo 0x41ee12
jbe 0x41eda5
pop rdi
pop rdx
push rbx
je 0x41ede1
je 0x41ee15
jb 0x41ee14
xor dword fs:[r9 + 0x52], ecx
jbe 0x41ee2e
push r12
pop rdi
jo 0x41ee12
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41ee03
jbe 0x41ee34
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41ee0f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ee4e
movsxd rbx, dword [rdi + 0x73]
je 0x41ee5c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ee57
je 0x41ee6c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41ee4c
xor dword [rdi + 0x54], ebx
jne 0x41ee90
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41ee61
xor al, 0x64
jne 0x41eea3
je 0x41ee98
insb byte [rdi], dx
je 0x41eea4
cmp qword [r9 + 0x6e], rcx
jo 0x41eeba
je 0x41ee8d
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41ee92
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41eed1
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41eeeb
jo 0x41eeee
je 0x41eec1
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41eeca
xor ebx, dword [rdi + 0x53]
jo 0x41eefc
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41ef08
pop rdi
jo 0x41ef1b
jb 0x41ef08
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41eeeb
je 0x41ef1f
jb 0x41ef1e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41eef6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ef3d
push rax
jbe 0x41ef4e
jbe 0x41ef20
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ef4d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41ef6a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
pop rdi
pop r15
jo 0x41ef7d
jb 0x41ef50
jbe 0x41ef0d
pop rdi
pop rdx
push rbx
je 0x41ef45
xor ebx, dword [rdi + 0x53]
jo 0x41ef77
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41ef83
pop rdi
jo 0x41ef96
jb 0x41ef83
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41ef66
je 0x41ef9a
jb 0x41ef99
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ef71
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41efb8
push rax
jbe 0x41efc9
jbe 0x41ef9b
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41efc8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41efe5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rdi + rbx*2], esi
pop r15
je 0x41efe6
insb byte [rdi], dx
je 0x41eff2
jb 0x41efd4
push rdx
push r11
je 0x41efcd
je 0x41f00f
jo 0x41effd
pop rdi
imul ebp, dword [rsi + 0x66], 0x5a5f006f
push rbx
je 0x41efd6
xor ebx, dword [rdi + 0x53]
jo 0x41f008
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41f014
pop rdi
jo 0x41f027
jb 0x41f014
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41eff7
je 0x41f02b
jb 0x41f02a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f002
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f049
push rax
jbe 0x41f05a
jbe 0x41f02c
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f059
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41f076
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4a], ecx
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x41f06e
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f08b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41f094
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41f088
push rbx
je 0x41f079
je 0x41f0ad
jb 0x41f0ac
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f084
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f0cb
push rax
jbe 0x41f0dc
jbe 0x41f0ae
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41f0a9
xor dword [rdi + 0x54], ebx
jne 0x41f0ed
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41f104
jo 0x41f107
je 0x41f0d8
jbe 0x41f100
movsxd rsp, dword [rbp + 0x53]
je 0x41f0cd
xor al, 0x64
jne 0x41f10f
je 0x41f104
insb byte [rdi], dx
je 0x41f110
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41f0f6
cmp dword [rdi + 0x5f], ebx
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword gs:[esi]
jb 0x41f152
push r8
movsxd rax, dword [r13 + 0x4e]
push rbx
je 0x41f113
xor eax, 0x72657469
je 0x41f159
jb 0x41f14b
je 0x41f160
imul esi, dword [rbx + rsi*2 + 0x49], 0x31455f54
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword gs:[esi]
jb 0x41f182
push r10
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41f18c
jo 0x41f18f
je 0x41f160
jbe 0x41f188
movsxd rsp, dword [rbp + 0x35]
ja 0x41f196
imul esi, dword [rbp + 0x45], 0x634b50
pop rdi
pop rdx
push rbx
je 0x41f162
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41f1ac
jb 0x41f1af
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x41f178
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f1b7
movsxd rbx, dword [rdi + 0x73]
je 0x41f1c5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f1c0
je 0x41f1d5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41f1c6
push rsp
pop rdi
jo 0x41f1ca
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f1ba
je 0x41f1fc
jo 0x41f1f5
push rax
xor dword [rdx], esi
jne 0x41f206
jo 0x41f209
je 0x41f1da
jbe 0x41f202
movsxd rsp, dword [rbp + 0x53]
je 0x41f1cf
xor al, 0x64
jne 0x41f211
je 0x41f206
insb byte [rdi], dx
je 0x41f212
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
ja 0x41f240
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [r9], esi
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x41f218
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f257
movsxd rbx, dword [rdi + 0x73]
je 0x41f265
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f260
je 0x41f275
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41f259
jo 0x41f266
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41f256
je 0x41f28a
jb 0x41f289
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41f299
pop rdi
jae 0x41f297
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41f273
outsw dx, word [rsi]
jb 0x41f2b7
jb 0x41f2a7
push r10
push rax
xor dword [rdx], esi
jne 0x41f2bf
jo 0x41f2c2
je 0x41f293
jbe 0x41f2bb
movsxd rsp, dword [rbp + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x41f28e
jb 0x41f2c5
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41f2c9
pop rdi
jb 0x41f2cc
jb 0x41f2d0
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41f2e7
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41f2b5
movsxd rbp, dword [rdi + 0x70]
jns 0x41f2e3
outsb dx, byte [rsi]
push r8
movsxd rbp, dword [r10 + 0x50]
movsxd rax, dword [rbp + 0x54]
xor dword [rdi + 0x54], ebx
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41f2d1
xor bl, byte [rdi + 0x57]
imul ebx, dword [rdi + 0x72], 0x65
jae 0x41f31f
insb byte [rdi], dx
je 0x41f30c
je 0x41f328
jo 0x41f316
pop rdi
imul ebp, dword [rbp + 0x70], 0x7453496c
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x41f32f
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x41f33e
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x45], 0x76453143
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x41f349
je 0x41f34e
jb 0x41f357
ja 0x41f32a
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41f360
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41f379
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41f352
je 0x41f386
jb 0x41f385
push rbx
je 0x41f35b
jbe 0x41f38c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x62
jae 0x41f3a2
jbe 0x41f340
jo 0x41f3b6
push 0x64616572
pop rdi
insd dword [rdi], dx
jne 0x41f3bf
js 0x41f3ad
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41f397
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41f3e9
jb 0x41f3c0
push rbx
push r11
je 0x41f3af
xor ebx, dword [rdi + 0x53]
jo 0x41f3e1
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41f3ed
pop rdi
jo 0x41f400
jb 0x41f3ed
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41f3d0
je 0x41f404
jb 0x41f403
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f3db
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f422
push rax
jbe 0x41f433
jbe 0x41f405
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f432
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41f44f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41f426
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41f467
push r11
je 0x41f43c
je 0x41f470
jb 0x41f46f
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
je 0x41f47c
push rsp
jo 0x41f47f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41f46f
jbe 0x41f42c
pop rdi
pop rdx
ja 0x41f4a3
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [r14], esi
pop rdi
movsxd rbp, dword [r9 + 0x45]
jbe 0x41f488
jo 0x41f495
push rsp
pop rdi
add byte [rsi + 0x72], ah
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41f4c5
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41f4ce
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41f4c2
push rbx
je 0x41f4b3
je 0x41f4e7
jb 0x41f4e6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f4be
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f505
push rax
jbe 0x41f516
jbe 0x41f4e8
jae 0x41f520
jb 0x41f51d
jns 0x41f4f9
push rbx
cmp byte [rdi + 0x45], bl
jbe 0x41f507
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41f538
je 0x41f509
jbe 0x41f531
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x53], 0x65636170
movsxd r8, dword [r8]
pop rdi
pop rdx
push rbx
push r11
je 0x41f514
je 0x41f548
jb 0x41f547
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41f566
jo 0x41f569
je 0x41f53a
jbe 0x41f562
movsxd rsp, dword [rbp + 0x35]
ja 0x41f570
imul esi, dword [rbp + 0x49], 0x36314152
pop rdi
movsxd rbp, dword [r9 + 0x49]
movsxd rax, dword [rbp + 0x45]
push rbx
je 0x41f54c
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41f554
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41f59c
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41f5cd
jo 0x41f5d0
je 0x41f5a1
jbe 0x41f5c9
movsxd rsp, dword [rbp + 0x35]
ja 0x41f5d7
imul esi, dword [rbp + 0x49], 0x33415269
pop rdi
movsxd rcx, dword [r9 + 0x52]
push rbx
je 0x41f5ae
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f5ed
movsxd rbx, dword [rdi + 0x73]
je 0x41f5fb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f5f6
je 0x41f60b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x41f5ee
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41f5f6
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41f63e
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41f62f
outsw dx, word [rsi]
jb 0x41f673
jb 0x41f663
push rbx
je 0x41f63b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f67a
movsxd rbx, dword [rdi + 0x73]
je 0x41f688
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f683
je 0x41f698
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x41f66e
jb 0x41f6a5
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41f6a9
pop rdi
jb 0x41f6ac
jb 0x41f6b0
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x41f6c7
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41f691
xor dword [rbx + 0x68], esp
jb 0x41f6c5
je 0x41f6da
imul esi, dword [rbx + rsi*2 + 0x49], 0x63374563
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x41f6d6
jb 0x41f6dc
push r8
movsxd rdx, dword [r11 + 0x32]
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5f], bl
jae 0x41f6f8
pop rdi
jae 0x41f6fc
jb 0x41f6ff
add byte [rbp + 0x73], dh
je 0x41f6da
outsb dx, byte [rsi]
js 0x41f696
pop rdi
pop rdx
push rbx
je 0x41f6cd
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41f6f1
xor dword [rdx], esi
jne 0x41f721
jo 0x41f724
je 0x41f6f5
jbe 0x41f71d
movsxd rsp, dword [rbp + 0x53]
je 0x41f6ea
xor al, 0x64
jne 0x41f72c
je 0x41f721
insb byte [rdi], dx
je 0x41f72d
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push rbx
je 0x41f717
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f756
movsxd rbx, dword [rdi + 0x73]
je 0x41f764
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f75f
je 0x41f774
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41f74d
xor dword [rdi + 0x54], ebx
jne 0x41f791
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41f778
jae 0x41f79d
push rbx
je 0x41f76c
xor al, 0x64
jne 0x41f7ae
je 0x41f7a3
insb byte [rdi], dx
je 0x41f7af
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41f7a4
push r12
pop rdi
jo 0x41f7b5
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f7a0
xor bl, byte [rdi + 0x5f]
je 0x41f7d5
push 0x65706c65
jb 0x41f7c6
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41f7fb
jo 0x41f7fe
je 0x41f7d1
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x41f805
je 0x41f7fa
insb byte [rdi], dx
je 0x41f806
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41f7e1
xor dword [rdi + 0x54], ebx
jne 0x41f825
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41f81c
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41f819
jae 0x41f83e
cmp dword [rbx + 0x6f], esi
insb byte [rdi], dx
jbe 0x41f844
push rbx
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x41f829
jbe 0x41f7e6
pop rdi
pop rdx
push rbx
je 0x41f81d
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41f85c
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41f830
xor al, 0x64
jne 0x41f872
je 0x41f867
insb byte [rdi], dx
je 0x41f873
cmp qword [r9 + 0x6e], rcx
jo 0x41f889
je 0x41f85c
imul ebp, dword [rbp + 0x45], 0x4531624c
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f896
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41f89f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41f893
push rbx
je 0x41f884
je 0x41f8b8
jb 0x41f8b7
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f88f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f8d6
push rax
jbe 0x41f8e7
jbe 0x41f8b9
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41f8f2
jb 0x41f8f5
movsxd rsi, dword [rcx + rcx*2 + 0x53]
cmp byte [rdi + 0x49], bl
push rbx
pop rdi
jbe 0x41f8df
push rsp
pop rdi
jo 0x41f8e3
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rsp
push rsi
push rbx
je 0x41f8d6
je 0x41f90a
jb 0x41f909
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f8e1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f928
push rax
jbe 0x41f939
jbe 0x41f90b
add byte [r15 + 0x5a], r11b
push rbx
je 0x41f908
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x41f926
xor eax, 0x67696c61
outsb dx, byte [rsi]
pop rdi
jae 0x41f974
outsd dx, dword [rsi]
jb 0x41f964
insd dword [edi], dx
xor esi, dword [rdx]
insd dword [rdi], dx
cmp byte [rbp + 0x45], al
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41f961
jae 0x41f986
xor eax, 0x74697277
push r10
push rbx
je 0x41f965
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f9a4
movsxd rbx, dword [rdi + 0x73]
je 0x41f9b2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f9ad
je 0x41f9c2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul r8d, dword [r8 + rsi*2 + 0x4f], 0x5f005f54
pop rdx
push rbx
je 0x41f9a0
je 0x41f9ba
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x41f9f0
jo 0x41f9f3
je 0x41f9c4
jbe 0x41f9ec
movsxd rsp, dword [rbp + 0x53]
je 0x41f9b9
xor al, 0x64
jne 0x41f9fb
je 0x41f9f0
insb byte [rdi], dx
je 0x41f9fc
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41f9d4
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41f9fb
pop rax
push rsp
pop rdi
push r11
je 0x41f9ee
je 0x41fa30
jo 0x41fa29
jo 0x41fa17
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41fa3c
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41fa0a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41fa4b
push r11
je 0x41fa20
je 0x41fa54
jb 0x41fa53
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x41fa0b
pop rdi
pop rdx
push rbx
je 0x41fa42
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fa89
push rax
jbe 0x41fa9a
jbe 0x41fa6c
movsxd r13, dword [r13 + rax*2 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41fa64
pop rdi
push rdi
imul ebx, dword [rdi + 0x72], 0x65
jae 0x41fab3
insb byte [rdi], dx
je 0x41faa0
je 0x41fabc
jo 0x41faaa
push r11
je 0x41fa7b
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41fab5
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41fac9
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x76453243
add byte [rdi + 0x5a], bl
push rbx
je 0x41faa2
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41fae1
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41facb
jae 0x41faf0
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41fada
je 0x41fb0e
jb 0x41fb0d
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41fae7
je 0x41fb01
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
xor dword [rdx], esi
jne 0x41fb37
jo 0x41fb3a
je 0x41fb0b
jbe 0x41fb33
movsxd rsp, dword [rbp + 0x53]
je 0x41fb00
xor al, 0x64
jne 0x41fb42
je 0x41fb37
insb byte [rdi], dx
je 0x41fb43
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41fb1b
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41fb42
pop rax
push rsp
pop rdi
push r11
je 0x41fb35
je 0x41fb77
jo 0x41fb70
jo 0x41fb5e
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41fb83
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x41fb61
pop rdi
push rbx
jo 0x41fb94
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41fba0
pop rdi
jae 0x41fba6
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fbaa
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41fbc7
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41fb9c
xor dword [rdi + 0x54], ebx
jne 0x41fbe0
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41fbb1
xor al, 0x64
jne 0x41fbf3
je 0x41fbe8
insb byte [rdi], dx
je 0x41fbf4
xor qword [r10], rsi
jne 0x41fc09
jo 0x41fc0c
je 0x41fbdd
jbe 0x41fc05
movsxd rsp, dword [rbp + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fc18
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x41fbfc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41fc3b
movsxd rbx, dword [rdi + 0x73]
je 0x41fc49
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41fc44
je 0x41fc59
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41fc72
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41fc53
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x41fc89
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41fc93
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x41fc6c
jb 0x41fc9e
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x41fcbb
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41fcb5
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x41fcbd
insd dword [rdi], dx
movsxd rax, dword [r13 + 0x45]
push rax
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x41fcb2
je 0x41fce6
jb 0x41fce5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41fcbd
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fd04
push rax
jbe 0x41fd15
jbe 0x41fce7
xor dword [r13 + 0x76], eax
add byte [rsi + 0x67], ah
je 0x41fd23
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
push rbx
je 0x41fcfe
je 0x41fd32
jb 0x41fd31
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41fd09
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fd50
push rax
jbe 0x41fd61
jbe 0x41fd33
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41fd2e
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41fd6d
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x41fd87
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41fd5d
je 0x41fd77
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
cmp byte [rbp + 0x73], dl
je 0x41fd7d
jae 0x41fda2
push rbx
je 0x41fd71
xor al, 0x64
jne 0x41fdb3
je 0x41fda8
insb byte [rdi], dx
je 0x41fdb4
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41fd8c
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41fdb3
pop rax
push rsp
pop rdi
push r11
je 0x41fda6
je 0x41fde8
jo 0x41fde1
jo 0x41fdcf
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41fdf4
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rsp
xor qword [r9], rsi
outsb dx, byte [rsi]
jo 0x41fe0a
je 0x41fddb
jbe 0x41fe03
movsxd rsp, dword [rbp]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x41fe0f
push rax
jbe 0x41fda5
pop rdi
pop rdx
push rbx
je 0x41fddc
xor dword [rdi + 0x54], ebx
jne 0x41fe20
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41fe38
je 0x41fe0b
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41fe3e
je 0x41fe33
insb byte [rdi], dx
je 0x41fe3f
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41fe26
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41fe67
push r11
je 0x41fe3c
je 0x41fe70
jb 0x41fe6f
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41fe54
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x41fe9e
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x41fead
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41fecb
outsb dx, byte gs:[rsi]
je 0x41fec3
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x4a]
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x41fee1
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41fecc
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ff05
je 0x41ff1a
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41fee9
je 0x41ff1d
jb 0x41ff1c
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41ff35
jb 0x41ff38
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor byte [rdi + 0x4a], bl
push rdx
jbe 0x41ff44
jbe 0x41ff26
push rbx
xor dword [rdi + 0x50], ebx
push rsp
pop rdi
jo 0x41ff2c
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41ff4b
jno 0x41ff31
movsxd rax, dword [rbp + 0x4e]
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41ff51
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x41ff42
pop rdi
pop rdi
imul esi, dword [rbx + 0x5f], 0x72616863
push r12
pop rdi
pop rdi
pop rdi
jbe 0x41ff7c
insb byte [rdi], dx
jne 0x41ff83
pop rdi
pop rdi
je 0x41ff9f
jo 0x41ff8d
push r10
push rbx
je 0x41ff66
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ffa5
movsxd rbx, dword [rdi + 0x73]
je 0x41ffb3
imul ebp, dword [rsi + 0x67], 0x5f335349
push rbx
je 0x41ff7c
xor dword [rbx + 0x68], esp
jb 0x41ffb0
je 0x41ffc5
imul esi, dword [rbx + rsi*2 + 0x49], 0x455f3353
push rbx
push r11
xor ebx, dword [rdi + 0x45]
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41ffa5
outsw dx, word [rsi]
jb 0x41ffe9
jb 0x41ffd9
push r10
cmp dword [r15 + 0x4b], ebx
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41ffb6
jb 0x41ffed
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41fff1
pop rdi
jb 0x41fff4
jb 0x41fff8
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x42000f
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41ffda
xor al, 0x5f
pop rdi
jne 0x42001a
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x420021
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x420028
push r8
push rbx
je 0x420007
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x420046
movsxd rbx, dword [rdi + 0x73]
je 0x420054
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42004f
je 0x420064
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push rbx
push r11
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp dword [rdi + 0x53], ebx
cmp byte [rdi + 0x52], bl
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x420084
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42008d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x420081
push rbx
je 0x42006d
xor ebx, dword [rdi + 0x53]
jo 0x42009f
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4200ab
pop rdi
jo 0x4200be
jb 0x4200ab
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x42008e
je 0x4200c2
jb 0x4200c1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420099
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4200e0
push rax
jbe 0x4200f1
jbe 0x4200c3
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x420105
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4200e1
pop rdi
jae 0x420122
jb 0x42011f
jns 0x4200fb
push rax
push rbx
je 0x4200ee
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42012d
movsxd rbx, dword [rdi + 0x73]
je 0x42013b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x420136
je 0x42014b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x42013e
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x420127
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x420168
push r11
je 0x42013d
je 0x420171
jb 0x420170
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
je 0x42017d
push rsp
jo 0x420180
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x420170
jbe 0x42012d
pop rdi
pop rdx
push rbx
je 0x420164
xor dword [rdi + 0x54], ebx
jne 0x4201a8
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x4201bf
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x4201d2
je 0x4201a3
jbe 0x4201cb
movsxd rsp, dword [rbp + 0x34]
jb 0x4201cc
push r10
imul edx, dword [rbx + 0x31], 0x45454a5f
push rbx
je 0x4201b0
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x4201fa
jb 0x4201ba
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x420215
jb 0x4201f7
je 0x4201d7
xor al, 0x69
jae 0x420209
movsxd rbp, dword [rdi + 0x6e]
jbe 0x420214
jb 0x420225
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x420220
insb byte [rdi], dx
jne 0x420227
xor al, 0x74
jns 0x420239
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x420225
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x420243
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x42025c
jb 0x420243
push rbx
je 0x420234
je 0x420268
jb 0x420267
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42023f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x420286
push rax
jbe 0x420297
jbe 0x420269
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x420265
xor ebx, dword [rdi + 0x53]
jo 0x420297
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4202a3
pop rdi
jo 0x4202b6
jb 0x4202a3
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x420286
je 0x4202ba
jb 0x4202b9
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420291
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4202d8
push rax
jbe 0x4202e9
jbe 0x4202bb
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4202e8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x420305
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor r8b, byte [rbp + 0x76]
add byte [rbp + 0x65], ch
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x420315
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x4202fa
je 0x42032e
jb 0x42032d
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x42033d
pop rdi
jae 0x42033b
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x420312
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x420364
jb 0x42033b
push rbx
push r11
je 0x42032a
xor ebx, dword [rdi + 0x53]
jo 0x42035c
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x420368
pop rdi
jo 0x42037b
jb 0x420368
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x42034b
je 0x42037f
jb 0x42037e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420356
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42039d
push rax
jbe 0x4203ae
jbe 0x420380
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4203ad
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4203ca
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x52], eax
push rbx
pop rdi
push rax
push rbx
pop r15
add byte [rdi + 0x5a], bl
push r11
je 0x4203ae
jbe 0x4203df
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4203b8
je 0x4203ec
jb 0x4203eb
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4203f7
xor al, 0x5f
push rbx
jo 0x42042a
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x42041f
imul r14, qword [rax], 0x49615345
push rbx
je 0x420417
je 0x42044b
jb 0x42044a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420422
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x420469
push rax
jbe 0x42047a
jbe 0x42044c
xor dword [rbp + 0x45], eax
xor al, byte [r13 + 0x52]
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x420450
xor dword [rdi + 0x54], ebx
jne 0x420494
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x42047b
jae 0x4204a0
push rbx
je 0x42046f
xor al, 0x64
jne 0x4204b1
je 0x4204a6
insb byte [rdi], dx
je 0x4204b2
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x42049a
xor al, 0x5f
pop rdi
jae 0x4204d6
jb 0x4204d6
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4204c2
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4204e1
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4204fe
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x420518
jo 0x42051b
je 0x4204ec
jbe 0x420514
movsxd rsp, dword [rbp + 0x35]
ja 0x420522
imul esi, dword [rbp + 0x49], 0x454a6364
push rbx
je 0x4204f7
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x4204ff
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x420547
push rsp
xor dword [rdi], ebx
pop rdi
pop rdi
js 0x420579
pop rdi
jo 0x420569
jb 0x420579
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x420559
je 0x42058d
jb 0x42058c
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420564
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4205ab
push rax
jbe 0x4205bc
jbe 0x42058e
xor dword [r13 + 0x4f], eax
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x42058f
outsw dx, word [rsi]
jb 0x4205d3
jb 0x4205c3
push r10
imul eax, dword [rbp + 0x4f], 0x4e525f54
push rbx
je 0x42059c
jb 0x4205d3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4205d7
pop rdi
jb 0x4205da
jb 0x4205de
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x4205f5
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4205bf
xor ebp, dword [rbp + 0x6f]
jbe 0x4205f8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4205d7
je 0x42060b
jb 0x42060a
xor dword fs:[r13 + 0x53], eax
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4205e6
xor dword [rdi + 0x54], ebx
jne 0x42062a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x4205fb
xor al, 0x64
jne 0x42063d
je 0x420632
insb byte [rdi], dx
je 0x42063e
cmp byte [r13 + 0x73], dl
je 0x420623
jae 0x420648
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x42062b
xor dword [rdi + 0x54], ebx
jne 0x42066f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x420686
jo 0x420689
je 0x42065a
jbe 0x420682
movsxd rsp, dword [rbp + 0x53]
je 0x42064f
xor al, 0x64
jne 0x420691
je 0x420686
insb byte [rdi], dx
je 0x420692
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5f], bl
jo 0x4206bb
push 0x64616572
pop rdi
imul esp, dword [rbp + 0x79], 0x5f
movsxd rsi, dword [rdx + 0x65]
je 0x4206bc
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x42069c
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4206db
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x4206af
xor al, 0x64
jne 0x4206f1
je 0x4206e6
insb byte [rdi], dx
je 0x4206f2
xor qword [r10], rsi
jne 0x420707
jo 0x42070a
je 0x4206db
jbe 0x420703
movsxd rsp, dword [rbp + 0x45]
xor dword [rbp + 0x45], eax
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rsp
push rbx
xor dword [rdx], esi
jne 0x42072d
jo 0x420730
je 0x420710
je 0x420731
imul ebp, dword [rsi + 0x67], 0x535a5f00
je 0x4206f9
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x420743
jb 0x420746
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x42070f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42074e
movsxd rbx, dword [rdi + 0x73]
je 0x42075c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x420757
je 0x42076c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x42075d
push rsp
pop rdi
jo 0x420761
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42074d
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x420771
cmp dword [rcx + 0x6e], ecx
jo 0x4207a2
je 0x420775
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4207a8
je 0x42079d
insb byte [rdi], dx
je 0x4207a9
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x420787
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4207c8
push rbx
je 0x42079f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4207de
movsxd rbx, dword [rdi + 0x73]
je 0x4207ec
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4207e7
je 0x4207fc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
je 0x420808
push rsp
jo 0x42080b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4207fb
jbe 0x4207b8
pop rdi
pop rdx
push rbx
je 0x4207f0
xor ebx, dword [rdi + 0x53]
jo 0x420822
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42082e
pop rdi
jo 0x420841
jb 0x42082e
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x420811
je 0x420845
jb 0x420844
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42081c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x420863
push rax
jbe 0x420874
jbe 0x420846
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x420873
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x420890
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x42086c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4208ab
movsxd rbx, dword [rdi + 0x73]
je 0x4208b9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4208b4
je 0x4208c9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x74706d65
jns 0x4208b0
jbe 0x4208ad
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4208b3
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x42090e
push r11
je 0x4208ca
xor ebp, dword [rbp + 0x6f]
jbe 0x420903
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4208e2
je 0x420916
jb 0x420915
push r11
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
add byte [rdi + 0x5a], bl
push rbx
je 0x4208fb
je 0x420915
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
jbe 0x42094b
push r10
push rbx
je 0x42090e
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x420935
pop rax
push rsp
pop rdi
push r11
je 0x420928
je 0x42096a
jo 0x420963
jo 0x420951
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x420976
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x42098b
je 0x42095c
jbe 0x420984
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x55], 0x72657070
movsxd r8, dword [r8]
pop rdi
pop rdx
push rbx
je 0x420964
je 0x420998
jb 0x420997
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42096f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4209b6
push rax
jbe 0x4209c7
jbe 0x420999
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
push rbx
je 0x420992
xor dword [rdi + 0x54], ebx
jne 0x4209d6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x4209a7
xor al, 0x64
jne 0x4209e9
je 0x4209de
insb byte [rdi], dx
je 0x4209ea
cmp qword [r9 + 0x6e], rcx
jo 0x420a00
je 0x4209d3
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4209d9
je 0x4209f3
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x420a29
jo 0x420a2c
je 0x4209ff
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x420a32
je 0x420a27
insb byte [rdi], dx
je 0x420a33
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x420a0c
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x420a33
pop rax
push rsp
pop rdi
push r11
je 0x420a26
je 0x420a68
jo 0x420a61
jo 0x420a4f
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x420a74
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rsp
push rsi
xor dword [rax], esi
jne 0x420a89
jo 0x420a8c
je 0x420a5f
imul ebp, dword [rbp], 0x534e5a5f
je 0x420a58
je 0x420a9a
jo 0x420a93
push r8
jbe 0x420aa4
xor dword [r9 + 0x49], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x420a80
jo 0x420a8e
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x420a79
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x420a9d
cmp byte [rbp + 0x73], dl
je 0x420a9d
jae 0x420ac2
push rbx
je 0x420a91
xor al, 0x64
jne 0x420ad3
je 0x420ac8
insb byte [rdi], dx
je 0x420ad4
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x420ada
insb byte [rdi], dx
je 0x420ae6
jb 0x420ac8
jbe 0x420a85
pop rdi
pop rdx
push rbx
je 0x420abc
xor dword [rdi + 0x54], ebx
jne 0x420b00
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x420ad1
xor al, 0x64
jne 0x420b13
je 0x420b08
insb byte [rdi], dx
je 0x420b14
xor qword [r10], rsi
jne 0x420b29
jo 0x420b2c
je 0x420afd
jbe 0x420b25
movsxd rsp, dword [rbp + 0x45]
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push rbx
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x420b4c
je 0x420b1d
jbe 0x420b45
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push r11
je 0x420b17
xor ebp, dword [rbp + 0x6f]
jbe 0x420b50
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x420b31
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x420b70
movsxd rbx, dword [rdi + 0x73]
je 0x420b7e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x420b79
je 0x420b8e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
jae 0x420b95
jbe 0x420b33
pop rdi
pop rdx
push rbx
je 0x420b6b
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x420bbc
outsb dx, byte gs:[rsi]
je 0x420bb4
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor al, 0x73
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x420bf4
jo 0x420bf7
je 0x420bc8
jbe 0x420bf0
movsxd rsp, dword [rbp + 0x35]
insb byte [rdi], dx
jne 0x420c01
push 0x5f007645
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x420bfb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x420c04
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x420bf8
push rbx
je 0x420be4
xor ebx, dword [rdi + 0x53]
jo 0x420c16
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x420c22
pop rdi
jo 0x420c35
jb 0x420c22
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x420c05
je 0x420c39
jb 0x420c38
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420c10
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x420c57
push rax
jbe 0x420c68
jbe 0x420c3a
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x420c7c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x420c25
pop rdi
pop rdx
push rbx
je 0x420c61
je 0x420c95
jb 0x420c94
xor al, 0x6a
outsd dx, dword [rsi]
imul ebp, dword [rsi + 0x45], 0x47404076
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x420cc7
je 0x420c98
jbe 0x420cc0
movsxd rsp, dword [rbp + 0x34]
jb 0x420cc1
push r10
imul edx, dword [rbx + 0x31], 0x31534a5f
pop rdi
push rbx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x45], ebx
push rbx
je 0x420cb1
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x420cfb
jb 0x420cbb
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x420d16
jb 0x420cf8
je 0x420cd8
xor al, 0x69
jae 0x420d0a
movsxd rbp, dword [rdi + 0x6e]
jbe 0x420d15
jb 0x420d26
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x420d21
insb byte [rdi], dx
jne 0x420d28
xor al, 0x74
jns 0x420d3a
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x420d26
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x420d12
xor bl, byte [rdi + 0x5f]
jae 0x420d4e
jb 0x420d4e
pop rdi
jo 0x420d61
jb 0x420d38
push rbx
je 0x420d29
je 0x420d5d
jb 0x420d5c
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420d34
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x420d7b
push rax
jbe 0x420d8c
jbe 0x420d5e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x420d84
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x420da1
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push r11
pop rdi
push r11
je 0x420d7f
cmp dword [rdi + 0x53], ebx
jo 0x420db2
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x420dc2
push rdx
push r12
pop rdi
jo 0x420db8
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x420de9
jo 0x420dec
je 0x420dbd
jbe 0x420de5
movsxd rsp, dword [rbp + 0x35]
ja 0x420df3
imul esi, dword [rbp + 0x49], 0x34314152
pop rdi
movsxd rsp, dword [r10 + r9*2 + 0x63]
push rbx
je 0x420dcf
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x420dd7
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x420e1f
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x420e0c
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x420e4a
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x420e51
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x420e35
je 0x420e69
jb 0x420e68
push rbx
je 0x420e39
xor ebp, dword [rbp + 0x6f]
jbe 0x420e72
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x77
outsd dx, dword [rsi]
jb 0x420e94
jbe 0x420e2b
pop rdi
pop rdx
push rbx
je 0x420e69
pop rdi
pop rdi
je 0x420e98
imul ebp, dword [rbp + rsi + 0x5f], 0x646f6d5f
insd dword [rdi], dx
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
insd dword [rdi], dx
xor dword [rbp + 0x4c], eax
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r12
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x420e95
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x420ece
je 0x420ee3
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x420eb4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x420ef3
movsxd rbx, dword [rdi + 0x73]
je 0x420f01
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x420efc
je 0x420f11
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x420f13
jae 0x420f1f
jp 0x420f1d
push r10
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x420f29
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x420f42
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x420f1b
je 0x420f4f
jb 0x420f4e
push rbx
je 0x420f24
jbe 0x420f55
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
jbe 0x420f06
pop rdi
pop rdx
push rbx
je 0x420f3d
xor byte [rdi + 0x48], bl
pop rdi
jae 0x420f7c
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x420f50
xor al, 0x64
jne 0x420f92
je 0x420f87
insb byte [rdi], dx
je 0x420f93
xor qword [r10], rsi
jne 0x420fa8
jo 0x420fab
je 0x420f7c
jbe 0x420fa4
movsxd rsp, dword [rbp + 0x45]
xor dword [rbp + 0x45], eax
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x420f86
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x420fcd
push rax
jbe 0x420fde
jbe 0x420fb0
cmp dword [r15 + 0x4d], r11d
pop rdi
imul ebp, dword [rsi + 0x76], 0x49656b6f
jbe 0x420fd0
je 0x420fb0
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x420fe6
je 0x420ffe
jo 0x420ff7
pop r8
jae 0x421001
push rsp
pop rdi
add byte [r8 + 0x74], r14b
push 0x64616572
pop rdi
jno 0x421017
insb byte [rdi], dx
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x420fe9
xor byte [rdi + 0x48], bl
pop rdi
jae 0x421028
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x420ffc
xor al, 0x64
jne 0x42103e
je 0x421033
insb byte [rdi], dx
je 0x42103f
xor qword [r10], rsi
jne 0x421054
jo 0x421057
je 0x421028
jbe 0x421050
movsxd rsp, dword [rbp + 0x45]
xor dword [rbp + 0x45], eax
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x421077
jo 0x42107a
je 0x42104b
jbe 0x421073
movsxd rsp, dword [rbp + 0x44]
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x42108f
je 0x421060
jbe 0x421088
movsxd rsp, dword [rbp + 0x31]
xor al, 0x73
imul ebp, dword [rcx + 0x70], 0x43
push 0x63617261
je 0x421094
jb 0x4210a4
push r8
movsxd rax, dword [rbp + 0x45]
movsxd r10, dword [r15 + rbx*2]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4210a6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4210af
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4210a3
push rbx
je 0x421095
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4210d4
movsxd rbx, dword [rdi + 0x73]
je 0x4210e2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4210dd
je 0x4210f2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x421112
je 0x4210e3
jbe 0x42110b
movsxd rsp, dword [rbp + 0x34]
jb 0x42110c
push r10
imul edx, dword [rbx + 0x31], 0x31534a5f
pop rdi
push rbx
xor dword [rdi + 0x45], ebx
push rbx
je 0x4210f6
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x421140
jb 0x421100
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x42115b
jb 0x42113d
je 0x42111d
xor al, 0x69
jae 0x42114f
movsxd rbp, dword [rdi + 0x6e]
jbe 0x42115a
jb 0x42116b
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x421166
insb byte [rdi], dx
jne 0x42116d
xor al, 0x74
jns 0x42117f
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x42116b
push rsp
xor dword [rdi], ebx
pop rdi
push r12
pop r15
jb 0x42118e
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x421174
xor ebx, dword [rdi + 0x53]
jo 0x4211a6
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4211b2
pop rdi
jo 0x4211c5
jb 0x4211b2
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x421195
je 0x4211c9
jb 0x4211c8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4211a0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4211e7
push rax
jbe 0x4211f8
jbe 0x4211ca
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4211f7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x421214
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
imul esi, dword fs:[rbx + 0x70], 0x4565736f
jbe 0x4211bc
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x421226
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42122f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x421223
push rbx
je 0x421215
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421254
movsxd rbx, dword [rdi + 0x73]
je 0x421262
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42125d
je 0x421272
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x421273
jae 0x42127f
jp 0x42127d
jbe 0x42121b
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x421289
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x42129c
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
xor dword [rdx], esi
jae 0x42129e
je 0x42127f
insb byte [rdi], dx
imul ebp, dword [rbp + 0x69], 0x50726574
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor dword [rax], esi
jb 0x4212c8
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
push rsp
jae 0x4212e3
jbe 0x421271
pop rdi
pop rdx
push rbx
je 0x4212a9
pop rdi
jns 0x4212df
pop rdi
ja 0x4212f3
jo 0x4212e3
insd dword [rdi], dx
insd dword [rdi], dx
jb 0x4212ea
jo 0x4212fc
imul ebp, dword [rsi + 0x74], 0x53497265
je 0x4212c8
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x421302
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x421316
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x645f5f39
outsd dx, dword [rsi]
pop rdi
ja 0x42132d
jo 0x421303
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4212fa
xor bl, byte [rdi + 0x44]
jae 0x421343
jb 0x421340
jns 0x421332
jne 0x42134e
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x421357
jb 0x421354
jns 0x421330
push rax
push rbx
je 0x421321
je 0x421355
jb 0x421354
jbe 0x421349
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x421336
jbe 0x421367
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x421342
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421381
movsxd rbx, dword [rdi + 0x73]
je 0x42138f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42138a
je 0x42139f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x421380
xor al, 0x64
jne 0x4213c2
je 0x4213b7
insb byte [rdi], dx
je 0x4213c3
cmp byte [r13 + 0x73], dl
je 0x4213a8
jae 0x4213cd
movsxd r13, dword [r13 + rax*2 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4213a8
pop rdi
pop rdi
jne 0x4213e9
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x4213f9
je 0x4213ee
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x4213cf
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42140e
movsxd rbx, dword [rdi + 0x73]
je 0x42141c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x421417
je 0x42142c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insd dword [rdi], dx
push rbx
xor eax, 0x5f54455f
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x42145c
je 0x42142d
jbe 0x421455
movsxd rsp, dword [rbp + 0x34]
jb 0x421456
push r10
imul edx, dword [rbx + 0x31], 0x31534a5f
pop rdi
push rbx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x45], ebx
push rbx
je 0x421449
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x421493
jb 0x421453
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x4214ae
jb 0x421490
je 0x421470
xor al, 0x69
jae 0x4214a2
movsxd rbp, dword [rdi + 0x6e]
jbe 0x4214ad
jb 0x4214be
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x4214b9
insb byte [rdi], dx
jne 0x4214c0
xor al, 0x74
jns 0x4214d2
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x4214be
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4214dc
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4214e5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4214d9
push rbx
je 0x4214c5
xor ebx, dword [rdi + 0x53]
jo 0x4214f7
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x421503
pop rdi
jo 0x421516
jb 0x421503
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4214e6
je 0x42151a
jb 0x421519
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4214f1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x421538
push rax
jbe 0x421549
jbe 0x42151b
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x42155d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x421533
xor al, 0x5f
pop rdi
jae 0x42156f
jb 0x42156f
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42155b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x42157a
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x421597
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x4215b1
jo 0x4215b4
je 0x421585
jbe 0x4215ad
movsxd rsp, dword [rbp + 0x35]
ja 0x4215bb
imul esi, dword [rbp + 0x49], 0x39415269
pop rdi
movsxd rcx, dword [r9 + 0x63]
push rbx
je 0x421596
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x42159e
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x4215e6
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4215d7
outsw dx, word [rsi]
jb 0x42161b
jb 0x42160b
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x4215e3
jb 0x42161a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x42161e
pop rdi
jb 0x421621
jb 0x421625
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x42163c
add byte gs:[r15 + 0x5f], r11b
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
push r11
je 0x42161a
xor ebx, dword [rdi + 0x53]
jo 0x42164c
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x421658
pop rdi
jo 0x42166b
jb 0x421658
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x42163b
je 0x42166f
jb 0x42166e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x421646
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42168d
push rax
jbe 0x42169e
jbe 0x421670
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x42169d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4216ba
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x53]
pop rdi
push r10
push r11
push r12
pop rdi
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x4216e1
jo 0x4216e4
je 0x4216b5
jbe 0x4216dd
movsxd rsp, dword [rbp + 0x35]
ja 0x4216eb
imul esi, dword [rbp + 0x49], 0x33415269
pop rdi
movsxd rcx, dword [r10 + 0x52]
push rbx
je 0x4216c2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421701
movsxd rbx, dword [rdi + 0x73]
je 0x42170f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42170a
je 0x42171f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x421702
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x42170a
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x421752
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x421743
je 0x421777
jb 0x421776
xor ch, byte fs:[rcx + 0x64]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x421784
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42178d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x421781
push rbx
je 0x421772
je 0x4217a6
jb 0x4217a5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42177d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4217c4
push rax
jbe 0x4217d5
jbe 0x4217a7
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4217a2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4217e3
push rbx
je 0x4217ba
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4217f9
movsxd rbx, dword [rdi + 0x73]
je 0x421807
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x421802
je 0x421817
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x42182a
jno 0x421810
push rax
push rbx
je 0x421803
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421842
movsxd rbx, dword [rdi + 0x73]
je 0x421850
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42184b
je 0x421860
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x421834
xor ebp, dword [rbp + 0x6f]
jbe 0x42186d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x421882
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42188b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42187f
push rbx
je 0x421871
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4218b0
movsxd rbx, dword [rdi + 0x73]
je 0x4218be
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4218b9
je 0x4218ce
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4218a7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4218e0
je 0x4218f5
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4218c4
je 0x4218f8
jb 0x4218f7
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x4218dc
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [rbp + 0x4e]
push rbx
je 0x4218f1
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x421956
jo 0x421944
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x42191b
xor byte [rdi + 0x48], bl
pop rdi
jae 0x42195a
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x421944
jae 0x421969
xor byte [rbp + 0x45], al
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x421992
jo 0x421995
je 0x421966
jbe 0x42198e
movsxd rsp, dword [rbp + 0x35]
ja 0x42199c
imul esi, dword [rbp + 0x49], 0x5f374152
movsxd rbp, dword [r9 + 0x49]
push rdx
xor ebx, dword [r15 + 0x53]
xor dword [rdi + 0x52], ebx
push rbx
je 0x42197a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4219b9
movsxd rbx, dword [rdi + 0x73]
je 0x4219c7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4219c2
je 0x4219d7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x4219ba
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x4219c2
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x421a0a
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x421a32
movsxd rdx, dword gs:[r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x421a2f
je 0x421a44
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x421a1d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421a5c
movsxd rbx, dword [rdi + 0x73]
je 0x421a6a
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x421a42
pop rdi
pop rdi
jne 0x421a83
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x421a93
je 0x421a88
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor byte [rbp + 0x45], al
xor dword [rax], edi
pop rdi
pop rdi
jne 0x421aa6
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x421aaf
je 0x421aa4
outsb dx, byte [rsi]
push r8
push rbx
je 0x421a83
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421ac2
movsxd rbx, dword [rdi + 0x73]
je 0x421ad0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x421acb
je 0x421ae0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insd dword [rdi], dx
push r12
pop rdi
push rbx
cmp dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x421ac5
jbe 0x421af6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x421ad1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421b10
movsxd rbx, dword [rdi + 0x73]
je 0x421b1e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x421b19
je 0x421b2e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3445455f
jae 0x421b3e
jp 0x421b3c
jbe 0x421ada
pop rdi
pop rdx
push rbx
je 0x421b11
xor al, 0x5f
pop rdi
jae 0x421b4d
jb 0x421b4d
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x421b39
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x421b58
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x421b75
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
pop rdi
pop r15
jae 0x421b8b
jo 0x421b5c
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x421b53
xor dword [rdi + 0x54], ebx
jne 0x421b97
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x421bae
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push rbx
je 0x421b89
je 0x421bbd
jb 0x421bbc
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x421b94
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x421bdb
push rax
jbe 0x421bec
jbe 0x421bbe
xor al, byte [r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x421bc2
jbe 0x421bf3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x421bce
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421c0d
movsxd rbx, dword [rdi + 0x73]
je 0x421c1b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x421c16
je 0x421c2b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x6945455f
js 0x421c17
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x421c0a
xor bl, byte [rdi + 0x5f]
je 0x421c3f
push 0x65706c65
jb 0x421c30
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x421c65
jo 0x421c68
je 0x421c39
jbe 0x421c61
movsxd rsp, dword [rbp + 0x49]
push rbx
je 0x421c2f
xor al, 0x64
jne 0x421c71
je 0x421c66
insb byte [rdi], dx
je 0x421c72
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x421c4f
xor dword [rdi + 0x54], ebx
jne 0x421c93
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x421c8a
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x421c71
xor dword [rdi + 0x5f], ebx
jb 0x421cad
jae 0x421cbd
outsd dx, dword [rsi]
push r11
je 0x421c86
je 0x421cba
jb 0x421cb9
push r8
push rsp
pop rdi
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x421c9b
je 0x421ccf
jb 0x421cce
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x421cde
pop rdi
jae 0x421cdc
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x421cb2
xor bl, byte [rdi + 0x5f]
je 0x421ce7
push 0x65706c65
jb 0x421cd8
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x421cdd
jae 0x421d02
push r11
je 0x421cd2
xor al, 0x64
jne 0x421d14
je 0x421d09
insb byte [rdi], dx
je 0x421d15
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x421cf0
xor dword [rdi + 0x54], ebx
jne 0x421d34
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x421d2b
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x421d14
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x421d4e
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x421d62
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x31], 0x72617030
insd dword [rdi], dx
pop rdi
je 0x421d81
jo 0x421d6f
xor dword [r13 + 0x69], eax
imul eax, dword [rax], 0x314e5a5f
xor cl, byte [rdi + 0x75]
je 0x421d89
jne 0x421d8f
jbe 0x421d88
movsxd rsp, dword [rbp + 0x35]
ja 0x421d96
imul esi, dword [rbp + 0x49], 0x35314152
pop rdi
movsxd rsp, dword [r10 + r9*2 + 0x63]
push rbx
je 0x421d72
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x421d7a
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x421dc2
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x421dae
xor dword [rdi + 0x54], ebx
jne 0x421df2
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rbx
je 0x421dc4
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x421e15
outsb dx, byte gs:[rsi]
je 0x421e0d
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x421e0e
xor dword [rdi + 0x54], ebx
jne 0x421e52
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x421e69
jo 0x421e6c
je 0x421e3d
jbe 0x421e65
movsxd rsp, dword [rbp + 0x53]
je 0x421e32
xor al, 0x64
jne 0x421e74
je 0x421e69
insb byte [rdi], dx
je 0x421e75
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x421e5d
xor ebx, dword [rdi + 0x53]
jo 0x421e8f
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x421e9b
pop rdi
jo 0x421eae
jb 0x421e9b
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x421e7e
je 0x421eb2
jb 0x421eb1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x421e89
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x421ed0
push rax
jbe 0x421ee1
jbe 0x421eb3
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x421ee0
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x421efd
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor al, byte [r13 + 0x53]
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x421eda
pop rdi
push rdi
imul ebx, dword [rdi + 0x72], 0x65
jae 0x421f29
insb byte [rdi], dx
je 0x421f16
je 0x421f32
jo 0x421f20
push r11
je 0x421ef1
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x421f2b
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x421f3f
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x76453143
add byte [rdi + 0x5a], bl
push rbx
je 0x421f18
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x421f51
je 0x421f66
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x421f36
je 0x421f6a
jb 0x421f69
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x421f41
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x421f88
push rax
jbe 0x421f99
jbe 0x421f6b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x421fa5
jb 0x421fa8
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push r11
pop rdi
jbe 0x421f94
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x421f9a
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x421f85
cmp byte [rdi + 0x5f], bl
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jne 0x421fc4
jb 0x421fc9
push r11
push r11
je 0x421fa0
xor ebx, dword [rdi + 0x53]
jo 0x421fd2
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x421fde
pop rdi
jo 0x421ff1
jb 0x421fde
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x421fc1
je 0x421ff5
jb 0x421ff4
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x421fcc
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422013
push rax
jbe 0x422024
jbe 0x421ff6
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422023
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x422040
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
push r11
je 0x42200f
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x422061
jb 0x422038
push rsp
pop rdi
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x422035
pop rdi
pop rdi
je 0x422064
imul ebp, dword [rsp + rsi + 0x5f], 0x49646f4d
insd dword [rdi], dx
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
insd dword [rdi], dx
xor dword [rbp + 0x4c], eax
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x45], eax
pop rdi
pop rdi
movsxd rsp, dword [rcx + 0x6c]
movsxd rax, dword [rbp + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x42206f
je 0x4220b1
jo 0x4220aa
push r8
jbe 0x4220bb
xor cl, byte [r9 + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x422097
jo 0x4220a5
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x422092
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4220c7
push r10
push r11
push rbx
je 0x4220a2
je 0x4220d6
jb 0x4220d5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4220ad
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4220f4
push rax
jbe 0x422105
jbe 0x4220d7
push rbx
je 0x4220cd
jb 0x422104
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x422108
pop rdi
jb 0x42210b
jb 0x42210f
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x422125
push r11
pop r15
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x42213c
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x422112
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x422136
xor dword [rax], esi
jne 0x422166
jo 0x422169
je 0x42213c
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x42216f
je 0x422164
insb byte [rdi], dx
je 0x422170
push r11
xor byte [rdi + 0x45], bl
xor eax, 0x65736572
je 0x42215d
push rax
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x422154
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x4221a6
jb 0x42217d
push rbx
push r11
je 0x42216c
xor ebx, dword [rdi + 0x53]
jo 0x42219e
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4221aa
pop rdi
jo 0x4221bd
jb 0x4221aa
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x42218d
je 0x4221c1
jb 0x4221c0
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x422198
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4221df
push rax
jbe 0x4221f0
jbe 0x4221c2
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4221ef
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x42220c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r8], r14d
pop rdi
push rbx
pop rdi
jb 0x42220f
ja 0x42220f
jo 0x422226
jb 0x4221f9
push rax
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4221f5
je 0x422229
jb 0x422228
xor dword fs:[r9 + 0x52], ecx
jbe 0x422242
push r12
pop rdi
jo 0x422226
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x422217
je 0x42224b
jb 0x42224a
xor dword fs:[rip + 0x6d5f4d5f], esi
imul esp, dword [rbp + 0x5f], 0x72
outsd dx, dword [rsi]
jne 0x422269
imul ebp, dword [rsi + 0x65], 0x31745349
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422274
push rax
jbe 0x422285
jbe 0x422257
push r11
je 0x422249
xor byte [rbx + 0x68], dh
jb 0x422283
pop rdi
jo 0x422296
jb 0x42226d
push rbx
pop rdi
xor eax, 0x706d495f
insb byte [rdi], dx
push r12
pop rdi
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4222a1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4222aa
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42229e
push rbx
je 0x42228e
je 0x4222c2
jb 0x4222c1
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x42229b
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4222bf
cmp dword [rcx + 0x6e], ecx
jo 0x4222f0
je 0x4222c3
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4222f6
je 0x4222eb
insb byte [rdi], dx
je 0x4222f7
push r11
xor byte [rdi + 0x45], bl
xor eax, 0x65736572
je 0x4222e4
push rax
push rbx
xor byte [rdi], bl
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x422321
jb 0x422324
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4222ea
xor byte [rbx + 0x68], dh
jb 0x422324
pop rdi
jo 0x422337
jb 0x42230e
push rbx
je 0x4222ff
je 0x422333
jb 0x422332
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42230a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422351
push rax
jbe 0x422362
jbe 0x422334
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push r11
pop rdi
push r11
je 0x422338
cmp dword [rdi + 0x53], ebx
jo 0x42236b
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x42237b
push rdx
push r12
pop rdi
jo 0x422371
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x422361
insd dword [rdi], dx
jne 0x4223a3
js 0x422366
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x45]
jbe 0x422339
pop rdi
pop rdx
push rbx
je 0x42236f
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x4223ca
push r11
je 0x422386
xor ebp, dword [rbp + 0x6f]
jbe 0x4223bf
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4223a0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4223df
movsxd rbx, dword [rdi + 0x73]
je 0x4223ed
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4223e8
je 0x4223fd
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jo 0x422427
jb 0x422419
pop rdi
jbe 0x422420
jb 0x42242d
jne 0x42241c
insb byte [rdi], dx
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x422423
pop rdi
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x42243e
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
xor qword [rax], r14
jne 0x422468
jo 0x42246b
je 0x42243e
imul ebp, dword [rbp + 0x43], 0x38504531
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x422447
pop rdi
jae 0x422488
jb 0x422485
jns 0x422461
push rax
push rbx
je 0x422452
je 0x422486
jb 0x422485
push rbx
xor byte [rdi + 0x45], bl
jbe 0x42247c
pop rdi
push rbx
xor bl, byte [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x42246b
xor dword [rbp + 0x61], ebp
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
push rbx
je 0x422481
je 0x4224b5
jb 0x4224b4
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42248c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4224d3
push rax
jbe 0x4224e4
jbe 0x4224b6
push rbx
pop rdi
push r11
je 0x4224ae
xor byte [rbx + 0x68], dh
jb 0x4224e8
pop rdi
jo 0x4224fb
jb 0x4224d2
push rsp
pop rdi
jo 0x4224de
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
ja 0x42250a
imul esi, dword [rbp + 0x6c], 0x5249496e
pop rdi
movsxd rbp, dword [r9 + 0x52]
cmp dword [r15 + 0x53], ebx
xor byte [rdi + 0x45], bl
jbe 0x4224f5
jo 0x422502
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4224ed
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x422511
cmp byte [rbp + 0x73], dl
je 0x422511
jae 0x422536
push rbx
je 0x422505
xor al, 0x64
jne 0x422547
je 0x42253c
insb byte [rdi], dx
je 0x422548
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42252d
outsw dx, word [rsi]
jb 0x422571
jb 0x422561
push r12
pop rdi
push rdx
push rbx
je 0x422539
jb 0x422570
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x422574
pop rdi
jb 0x422577
jb 0x42257b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x422592
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x42255c
xor bl, byte [rdi + 0x5f]
jae 0x422598
jb 0x422598
pop rdi
jo 0x4225ab
jb 0x422582
push rbx
je 0x422573
je 0x4225a7
jb 0x4225a6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42257e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4225c5
push rax
jbe 0x4225d6
jbe 0x4225a8
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4225ce
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4225eb
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x4225c9
cmp dword [rdi + 0x53], ebx
jo 0x4225fc
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x42260c
push rdx
push r12
pop rdi
jo 0x422602
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4225ee
xor dword [rdi + 0x54], ebx
jne 0x422632
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rbx
je 0x422604
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x422655
outsb dx, byte gs:[rsi]
je 0x42264d
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor dword [rdx], esi
jae 0x422682
je 0x42266f
jb 0x422686
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x5a5f006a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422692
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42269b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42268f
push rbx
je 0x42267f
je 0x4226b3
jb 0x4226b2
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x42268e
xor ebx, dword [rdi + 0x53]
jo 0x4226c0
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4226cc
pop rdi
jo 0x4226df
jb 0x4226cc
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4226af
je 0x4226e3
jb 0x4226e2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4226ba
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422701
push rax
jbe 0x422712
jbe 0x4226e4
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422711
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x42272e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x422746
je 0x422717
jbe 0x42273f
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x44], 0x74696769
movsxd r8, dword [r8]
ja 0x422758
imul esi, dword [rbp + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
xor dword [rdx], esi
jne 0x422773
jo 0x422776
je 0x422747
jbe 0x42276f
movsxd rsp, dword [rbp + 0x31]
xor al, 0x77
jb 0x422776
je 0x422774
insb byte [rdi], dx
imul ebp, dword [rbp + 0x69], 0x45726574
jbe 0x42271b
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x422799
je 0x42276a
jbe 0x422792
movsxd rsp, dword [rbp + 0x34]
jb 0x422793
push r10
imul edx, dword [rbx + 0x31], 0x3153495f
pop rdi
push rbx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x45], ebx
push rbx
je 0x422783
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x4227cd
jb 0x42278d
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x4227e8
jb 0x4227ca
je 0x4227aa
xor al, 0x69
jae 0x4227dc
movsxd rbp, dword [rdi + 0x6e]
jbe 0x4227e7
jb 0x4227f8
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x4227f3
insb byte [rdi], dx
jne 0x4227fa
xor al, 0x74
jns 0x42280c
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x4227f8
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4227e4
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42282b
push rax
jbe 0x42283c
jbe 0x42280e
cmp dword [r15 + 0x4d], r11d
pop rdi
imul ebp, dword [rsi + 0x76], 0x49656b6f
jbe 0x42282e
je 0x42280e
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x422844
je 0x42285c
jo 0x422855
pop rax
jae 0x42285f
push rsp
pop rdi
add byte [r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x42285e
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
push rbx
je 0x42283f
je 0x422873
jb 0x422872
push rbx
je 0x422848
jbe 0x422879
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4228a1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x4228c7
jo 0x4228ca
je 0x4228aa
je 0x4228cb
imul ebp, dword [rsi + 0x67], 0x76453144
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x4228de
je 0x4228b1
imul ebp, dword [rbp + 0x43], 0x38504531
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4228ba
outsw dx, word [rsi]
jb 0x4228fe
jb 0x4228ee
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x4228c6
jb 0x4228fd
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x422901
pop rdi
jb 0x422904
jb 0x422908
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x42291f
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4228ee
outsw dx, word [rsi]
jb 0x422932
jb 0x422922
push r10
push rbx
je 0x4228fb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42293a
movsxd rbx, dword [rdi + 0x73]
je 0x422948
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422943
je 0x422958
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x42292e
jb 0x422965
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x422969
pop rdi
jb 0x42296c
jb 0x422970
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x422987
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x422957
pop rdi
jae 0x422998
jb 0x422995
jns 0x422971
push rax
push rbx
je 0x422962
je 0x422996
jb 0x422995
jbe 0x422989
pop rdi
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4229ad
push r8
push rbx
je 0x42297d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4229bc
movsxd rbx, dword [rdi + 0x73]
je 0x4229ca
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4229c5
je 0x4229da
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x4229ae
xor ebp, dword [rbp + 0x6f]
jbe 0x4229e7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4229ca
xor byte [rbx + 0x68], dh
jb 0x422a04
pop rdi
jo 0x422a17
jb 0x4229ee
push rbx
je 0x4229df
je 0x422a13
jb 0x422a12
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x422a22
pop rdi
jae 0x422a20
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4229fd
je 0x422a3f
jo 0x422a38
push rbx
je 0x422a04
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x422a55
outsb dx, byte gs:[rsi]
je 0x422a4d
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x4a]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x422a5a
jo 0x422a68
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x422a59
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422a98
movsxd rbx, dword [rdi + 0x73]
je 0x422aa6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422aa1
je 0x422ab6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rsp
push rbx
xor dword [rax], esi
jne 0x422ae3
jo 0x422ae6
je 0x422ab9
imul ebp, dword [rbp], 0x74535a5f
xor dword [rdx], esi
pop rdi
pop rdi
je 0x422ae2
push 0x65706c65
jb 0x422ad3
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x422ac2
xor al, 0x64
jne 0x422b04
je 0x422af9
insb byte [rdi], dx
je 0x422b05
cmp qword [r9 + 0x6e], rcx
jo 0x422b1b
je 0x422aee
imul ebp, dword [rbp + 0x45], 0x5245454a
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x422ae8
xor dword [rdi + 0x54], ebx
jne 0x422b2c
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x422b23
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x422b0b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x422b4c
push rbx
je 0x422b23
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422b62
movsxd rbx, dword [rdi + 0x73]
je 0x422b70
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422b6b
je 0x422b80
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
je 0x422b8c
push rsp
jo 0x422b8f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x422b7f
jbe 0x422b3c
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x422b88
jae 0x422bad
xor eax, 0x74697277
push rdx
push rbx
je 0x422b8c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422bcb
movsxd rbx, dword [rdi + 0x73]
je 0x422bd9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422bd4
je 0x422be9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul r8d, dword [r8 + rsi*2 + 0x4f], 0x5f005f54
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422bf8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x422c01
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x422bf5
push rbx
je 0x422be7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422c26
movsxd rbx, dword [rdi + 0x73]
je 0x422c34
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422c2f
je 0x422c44
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x422c1d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422c64
push rax
jbe 0x422c75
jbe 0x422c47
xor dword [r13 + 0x4f], eax
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x422c49
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x422cae
je 0x422c7f
jbe 0x422ca7
movsxd rsp, dword [rbp + 0x31]
xor eax, 0x64616572
push rbp
outsb dx, byte [rsi]
jae 0x422cb3
outsb dx, byte [esi]
outsb dx, byte fs:[rsi]
je 0x422c9b
push 0x45
imul r10d, dword [r10 + 0x54], 0x5f00635f
pop rdx
push rbx
je 0x422c92
xor al, 0x5f
pop rdi
jae 0x422cce
jb 0x422cce
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x422cba
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422cd9
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x422cf6
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4e]
push rbx
je 0x422ccc
je 0x422d00
jb 0x422cff
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x422cd7
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422d1e
push rax
jbe 0x422d2f
jbe 0x422d01
push r11
push r11
pop rdi
push rbx
pop r15
push r11
je 0x422d01
cmp dword [rdi + 0x53], ebx
jo 0x422d34
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x422d44
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x422d3e
push rsp
xor dword [rdi], ebx
add byte [rsi], ch
jae 0x422d70
insd dword [rdi], dx
je 0x422d5b
add byte [rsi], ch
jae 0x422d73
jb 0x422d75
add byte [rsi], ch
jae 0x422d6f
jae 0x422d7d
jb 0x422d7f
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x422d80
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x422d8e
outsb dx, byte cs:[esi]
jne 0x422d5c
jne 0x422d9a
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x422d6a
push 0x687361
jns 0x422db3
jae 0x422dc0
insd dword [rdi], dx
add byte [rsi], ch
jns 0x422dbb
jae 0x422dc3
jb 0x422d51
outsb dx, byte cs:[esi]
jne 0x422d84
jbe 0x422dbd
jb 0x422dcd
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x422d91
jbe 0x422dca
jb 0x422dda
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x422dd5
insb byte [rdi], dx
jns 0x422de4
add byte [rsi], ch
jb 0x422ddf
insb byte [rdi], dx
jo 0x422deb
je 0x422d81
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x422dba
outsd dx, dword [esi]
je 0x422d90
je 0x422df8
js 0x422e09
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x422e0e
je 0x422e04
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x422e27
jo 0x422e3b
pop rdi
je 0x422e2b
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x422e39
jns 0x422dda
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x422e55
jns 0x422de6
push 0x63
jb 0x422deb
jns 0x422e5d
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x422e67
je 0x422dfd
je 0x422e63
add byte [rsi], ch
jae 0x422e7a
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x422e11
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x422f6c
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add cl, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], bh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x42305a
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4012], ch
add byte [rax], al
add byte [rax + 0x12], ch
add byte [rax], al
add byte [rax + 5], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x18], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x18], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x7e], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rbx*4 + 0x40], al
add byte [rax], al
test byte [rdx], bl
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x409a], ah
add byte [rax], al
add byte [rax + 0x9a], ah
add byte [rax], al
add bh, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x42320b
add byte [rax], al
add byte [rax], al
add byte [rax - 0x5f], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
mov al, 0
add byte [rax], al
add byte [rax], al
add byte [rbp + rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp*8 + 0x40], cl
add byte [rax], al
mov ebp, gs
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
std
add byte [rax], al
add byte [rax], al
add al, bl
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
std
add byte [rax], al
add byte [rax], al
add al, ch
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
std
add byte [rax], al
add byte [rax], al
add al, dh
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
std
add byte [rax], al
add byte [rax], al
add al, bh
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
jmp qword [rax]
add byte [rax], al
add byte [rax], al
clc
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
call 0x42347e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add dword [rcx], esp
add byte [rax], al
add byte [rax], al
call 0x4235b6
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, byte [rcx]
add byte [rax], al
add byte [rax], al
clc
add dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 2
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add al, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], ah
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
push rsp
add dword [rax], eax
add byte [rax], al
add byte [rax], al
movabs dword [0xd8], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
