xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60a167
push rbp
sub rax, obj.vtablefor__cxxabiv1::__class_type_info
cmp rax, 0xe
mov rbp, rsp
jbe 0x401950
mov eax, 0
test rax, rax
je 0x401950
pop rbp
mov edi, obj.vtablefor__cxxabiv1::__class_type_info
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.vtablefor__cxxabiv1::__class_type_info
push rbp
sub rsi, obj.vtablefor__cxxabiv1::__class_type_info
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401998
mov eax, 0
test rax, rax
je 0x401998
pop rbp
mov edi, obj.vtablefor__cxxabiv1::__class_type_info
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x208881], 0
jne 0x4019ba
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x20886e], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x4019d0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x4019cb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
nop word cs:[rax + rax]
mov eax, edi
ret
nop dword [rax]
nop word cs:[rax + rax]
mov eax, edi
ret
nop dword [rax]
nop word cs:[rax + rax]
lea eax, [rdi - 2]
cmp eax, 0x22
ja 0x401a1b
mov eax, edi
ret
push rax
mov ecx, str.Detail::Base_setBase_uint_
mov edx, 0x5f
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_2_1_source.cpp
mov edi, str.2____value____value____36
call sym.imp.__assert_fail
nop
nop word cs:[rax + rax]
cmp edi, 0x7f
ja 0x401a48
mov eax, edi
ret
push rax
mov ecx, str.Detail::Precision_setPrecision_uint_
mov edx, 0x60
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_2_1_source.cpp
mov edi, str.value___MAX_LENGTH
call sym.imp.__assert_fail
nop dword [rax]
nop word cs:[rax + rax]
mov rax, rdi
ret
nop
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
lea r13d, [rdi + 1]
push rbp
push rbx
mov rbp, rsi
sub rsp, 0x28
mov r12, qword [rip + 0x2087f4]
mov r15d, dword [r12 + 0x109c]
mov byte [r12 + 0x1098], 0
cmp r15d, 6
ja 0x401e00
mov r14, qword [r12 + 0x1088]
lea rbx, [r12 + 0x1008]
lea rax, [r14 + 0x86]
cmp qword [r12 + 0x1090], rax
jbe 0x4021e0
mov edx, 0x2320
mov dword [r14], 0x65736143
add r14, 6
mov word [r14 - 2], dx
mov qword [r12 + 0x1088], r14
test r13d, r13d
mov rsi, qword [r12 + 0x1090]
mov ecx, r13d
js 0x401ff0
je 0x402360
mov r8d, dword [r12 + 0x10a4]
mov edi, 0xcccccccd
cmp r8d, 0xa
jne 0x401d00
nop word [rax + rax]
mov eax, ecx
sub rsi, 1
mul edi
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
test edx, edx
mov byte [rsi], cl
mov ecx, edx
jne 0x401b30
mov r15, rsi
cmp byte [r12 + 0x1098], 0
jne 0x401e58
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
mov edx, dword [r12 + 0x109c]
mov r13, rax
mov byte [r12 + 0x1098], 1
sub r13, r15
cmp r13d, edx
jb 0x4020e0
xor eax, eax
test r13, r13
je 0x401baa
mov rdi, rcx
mov rdx, r13
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
mov rax, r13
add rcx, rax
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x4020a0
mov r13d, dword [r12 + 0x109c]
mov byte [r12 + 0x1098], 0
cmp r13d, 2
ja 0x401db0
lea rax, [rcx + 0x82]
cmp qword [r12 + 0x1090], rax
jbe 0x4022b0
mov eax, 0x203a
add rcx, 2
mov word [rcx - 2], ax
mov qword [r12 + 0x1088], rcx
mov r13, qword [rbp + 8]
mov r8d, dword [r12 + 0x109c]
mov r15, qword [rbp]
mov byte [r12 + 0x1098], 0
cmp r13d, r8d
mov r14d, r13d
jb 0x401d60
mov ebp, r13d
mov rax, qword [r12 + 0x1090]
lea rdx, [rcx + rbp + 0x80]
cmp rax, rdx
jbe 0x402138
cmp r13d, 1
je 0x402070
test r13d, r13d
jne 0x401d38
add rcx, rbp
mov qword [r12 + 0x1088], rcx
mov ebp, dword [r12 + 0x109c]
mov byte [r12 + 0x1098], 0
cmp ebp, 1
ja 0x401ec0
lea rdx, [rcx + 0x81]
cmp rax, rdx
jbe 0x401f18
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
mov byte [rcx], 0xa
mov rbx, qword [rip + 0x2085ee]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x401fb8
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word [rax + rax]
mov eax, ecx
xor edx, edx
sub rsi, 1
div r8d
lea eax, [rdx + 0x30]
lea edi, [rdx + 0x37]
cmp edx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov r8d, dword [r12 + 0x10a4]
mov eax, ecx
div r8d
test eax, eax
mov ecx, eax
jne 0x401d00
jmp 0x401b4d
nop dword [rax + rax]
mov rdi, rcx
mov rdx, rbp
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
mov rax, qword [r12 + 0x1090]
jmp 0x401c57
nop word cs:[rax + rax]
sub r8d, r13d
mov edx, r8d
lea rax, [rcx + rdx + 0x80]
cmp qword [r12 + 0x1090], rax
mov rbp, rdx
jbe 0x40268b
cmp edx, 1
je 0x402400
movzx esi, byte [r12 + 0x10a0]
lea rbp, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [r12 + 0x1088], rbp
mov rcx, rbp
jmp 0x401c28
nop dword [rax]
lea edx, [r13 - 2]
lea rax, [rcx + rdx + 0x80]
cmp qword [r12 + 0x1090], rax
mov r13, rdx
jbe 0x402745
cmp edx, 1
je 0x4023dc
movzx esi, byte [r12 + 0x10a0]
lea r13, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [r12 + 0x1088], r13
mov rcx, r13
jmp 0x401bd9
nop dword [rax + rax]
mov rdi, qword [r12 + 0x1088]
lea edx, [r15 - 6]
mov r15, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [r12 + 0x1090], rax
jbe 0x40249b
cmp edx, 1
je 0x402394
movzx esi, byte [r12 + 0x10a0]
lea r14, [rdi + rdx]
lea rbx, [r12 + 0x1008]
call sym.imp.memset
mov qword [r12 + 0x1088], r14
jmp 0x401ac7
nop dword [rax]
mov rdx, qword [r12 + 0x10c0]
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
mov r9, qword [r12 + 0x10b8]
mov byte [r12 + 0x1098], 0
mov r13d, edx
mov r14d, edx
lea rsi, [rcx + r13 + 0x80]
cmp rax, rsi
jbe 0x4025dc
cmp edx, 1
je 0x40236d
test edx, edx
jne 0x401fc8
add rcx, r13
mov qword [r12 + 0x1088], rcx
jmp 0x401b6f
nop dword [rax]
lea edx, [rbp - 1]
lea rsi, [rcx + rdx + 0x80]
mov rbp, rdx
cmp rax, rsi
jbe 0x40254c
cmp edx, 1
je 0x4023b0
movzx esi, byte [r12 + 0x10a0]
lea rbp, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov rax, qword [r12 + 0x1090]
mov rcx, rbp
mov qword [r12 + 0x1088], rbp
lea rdx, [rcx + 0x81]
cmp rax, rdx
ja 0x401c8c
mov eax, ebx
mov ebp, 1
mov r15d, 0x4080b8
sub eax, ecx
lea r13, [r12 + 8]
jmp 0x401f5b
nop
test eax, eax
mov r14d, eax
jne 0x402951
add rcx, r14
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x401f85
test ebp, ebp
je 0x401c9b
add r15, r14
mov eax, 0x1000
cmp ebp, eax
jae 0x401f30
mov r14d, ebp
xor ebp, ebp
mov rdi, rcx
mov rdx, r14
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r14
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jb 0x401f4b
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x402424
add rcx, r13
mov qword [r12 + 0x1088], rcx
jmp 0x401f4b
nop dword [rax + rax]
mov rdi, rbx
call rax
jmp 0x401ce4
nop word [rax + rax]
mov rdi, rcx
mov rdx, r13
mov rsi, r9
call sym.imp.memmove
mov rcx, rax
mov rax, qword [r12 + 0x1090]
jmp 0x401ea9
nop word cs:[rax + rax]
mov edi, r13d
neg edi
je 0x4027cc
mov r8d, dword [r12 + 0x10a4]
mov ecx, 0xcccccccd
cmp r8d, 0xa
jne 0x402040
nop
mov eax, edi
sub rsi, 1
mul ecx
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub edi, eax
add edi, 0x30
test edx, edx
mov byte [rsi], dil
mov edi, edx
jne 0x402010
mov byte [rsi - 1], 0x2d
lea r15, [rsi - 1]
jmp 0x401b50
nop dword [rax + rax]
mov eax, edi
xor edx, edx
sub rsi, 1
div r8d
lea eax, [rdx + 0x30]
lea ecx, [rdx + 0x37]
cmp edx, 9
cmova eax, ecx
xor edx, edx
mov byte [rsi], al
mov r8d, dword [r12 + 0x10a4]
mov eax, edi
div r8d
test eax, eax
mov edi, eax
jne 0x402040
jmp 0x40202e
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r15]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
jmp 0x401c62
nop word [rax + rax]
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
xor r13d, r13d
call qword [rax]
mov rax, qword [r12 + 0x1088]
lea rcx, [r12 + 8]
sub rax, rbx
jne 0x40272c
add rcx, r13
mov qword [r12 + 0x1088], rcx
jmp 0x401bbe
nop word [rax + rax]
sub edx, r13d
mov edx, edx
lea rsi, [rcx + rdx + 0x80]
mov r14, rdx
cmp rax, rsi
jbe 0x4027fd
cmp edx, 1
je 0x4027d9
movzx esi, byte [r12 + 0x10a0]
lea r13, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [r12 + 0x1088], r13
mov rcx, r13
mov r13, qword [r12 + 0x1090]
sub r13, r15
jmp 0x401b8f
nop word [rax + rax]
lea rax, [r12 + 8]
mov ebp, ebx
sub ebp, ecx
mov qword [rsp], rax
jmp 0x40216d
nop word [rax + rax]
add rcx, r13
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x40219c
sub r14d, ebp
je 0x4021d0
add r15, r13
mov ebp, 0x1000
cmp r14d, ebp
cmovbe ebp, r14d
test ebp, ebp
mov r13d, ebp
je 0x402150
mov rdi, rcx
mov rdx, r13
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r13
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jb 0x402160
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x40247d
add rcx, qword [rsp]
sub r14d, ebp
mov qword [r12 + 0x1088], rcx
jne 0x402165
nop
mov rax, qword [r12 + 0x1090]
jmp 0x401c62
nop dword [rax]
lea rdi, [r12 + 8]
mov eax, ebx
mov ecx, 6
sub eax, r14d
mov r15d, str.Case__
mov qword [rsp + 0x10], rdi
jmp 0x40222b
nop dword [rax]
test eax, eax
mov r8d, eax
jne 0x402960
add r14, r8
cmp r14, rbx
mov qword [r12 + 0x1088], r14
jae 0x402262
test ecx, ecx
je 0x401af9
add r15, r8
mov eax, 0x1000
cmp ecx, eax
jae 0x402200
mov r8d, ecx
xor ecx, ecx
mov rdx, r8
mov rdi, r14
mov rsi, r15
mov dword [rsp + 8], ecx
mov qword [rsp], r8
call sym.imp.memmove
mov r8, qword [rsp]
mov ecx, dword [rsp + 8]
add r14, r8
cmp r14, rbx
mov qword [r12 + 0x1088], r14
jb 0x40221b
mov rax, qword [r12]
mov qword [rsp + 8], r8
mov esi, 0x1000
mov dword [rsp], ecx
mov rdi, r12
xor r14d, r14d
call qword [rax]
mov rax, qword [r12 + 0x1088]
mov ecx, dword [rsp]
mov r8, qword [rsp + 8]
sub rax, rbx
jne 0x40245d
add r14, qword [rsp + 0x10]
mov qword [r12 + 0x1088], r14
jmp 0x40221b
nop word cs:[rax + rax]
lea rdi, [r12 + 8]
mov eax, ebx
mov r13d, 2
sub eax, ecx
mov r14d, 0x40808d
mov qword [rsp], rdi
jmp 0x4022fc
nop dword [rax + rax]
test eax, eax
mov r15d, eax
jne 0x402958
add rcx, r15
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x402328
test r13d, r13d
je 0x401c03
add r14, r15
mov eax, 0x1000
cmp r13d, eax
jae 0x4022d0
mov r15d, r13d
xor r13d, r13d
mov rdi, rcx
mov rdx, r15
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
add rcx, r15
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jb 0x4022eb
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x40243f
add rcx, qword [rsp]
mov qword [r12 + 0x1088], rcx
jmp 0x4022eb
nop word [rax + rax]
mov byte [rsi - 1], 0x30
lea r15, [rsi - 1]
jmp 0x401b50
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r9]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
jmp 0x401b6f
lea rax, [rdi + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rdi], al
jmp 0x401ab7
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
jmp 0x401c7c
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
jmp 0x401bd9
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
jmp 0x401c28
mov rdx, rax
mov rsi, rbx
mov rdi, r13
mov qword [rsp], rax
call sym.imp.memmove
mov rcx, qword [rsp]
jmp 0x401fa6
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x402349
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov r14, rax
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov ecx, dword [rsp]
jmp 0x402294
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x4021bd
lea rbx, [r12 + 0x1008]
mov r14, rdi
mov eax, ebx
sub eax, edi
lea rdi, [r12 + 8]
mov qword [rsp + 0x10], rdi
jmp 0x4024de
nop word cs:[rax + rax]
cmp rbx, r8
mov qword [r12 + 0x1088], r8
mov r14, r8
jbe 0x402515
sub r15d, ecx
mov eax, 0x1000
je 0x401ac7
cmp r15d, eax
cmovbe eax, r15d
mov edx, eax
test edx, edx
mov rcx, rdx
lea r8, [r14 + rdx]
je 0x4024c0
movzx esi, byte [r12 + 0x10a0]
mov rdi, r14
mov qword [rsp], r8
mov dword [rsp + 8], edx
call sym.imp.memset
mov ecx, dword [rsp + 8]
mov r8, qword [rsp]
jmp 0x4024c0
mov rax, qword [r12]
mov dword [rsp], ecx
mov esi, 0x1000
mov rdi, r12
xor r14d, r14d
call qword [rax]
mov rax, qword [r12 + 0x1088]
mov ecx, dword [rsp]
sub rax, rbx
jne 0x40288d
add r14, qword [rsp + 0x10]
mov qword [r12 + 0x1088], r14
jmp 0x4024d0
mov eax, ebx
lea r14, [r12 + 8]
sub eax, ecx
jmp 0x40257a
nop word [rax + rax]
cmp r15, rbx
mov qword [r12 + 0x1088], r15
mov rcx, r15
jae 0x40259f
sub ebp, r13d
mov eax, 0x1000
je 0x4025cf
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r13, rdx
lea r15, [rcx + rdx]
je 0x402560
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
call sym.imp.memset
jmp 0x402560
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
xor r15d, r15d
call qword [rax]
mov rax, qword [r12 + 0x1088]
sub rax, rbx
jne 0x40291e
lea rcx, [r14 + r15]
mov qword [r12 + 0x1088], rcx
jmp 0x402570
mov rax, qword [r12 + 0x1090]
jmp 0x401c7c
lea rax, [r12 + 8]
mov r13d, ebx
sub r13d, ecx
mov qword [rsp + 0x10], rax
jmp 0x402612
nop
add rcx, r10
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x402646
sub r14d, r13d
je 0x401b67
add r9, r10
mov r13d, 0x1000
cmp r14d, r13d
cmovbe r13d, r14d
test r13d, r13d
mov r10d, r13d
je 0x4025f0
mov rdx, r10
mov rsi, r9
mov rdi, rcx
mov qword [rsp + 8], r10
mov qword [rsp], r9
call sym.imp.memmove
mov r10, qword [rsp + 8]
mov r9, qword [rsp]
mov rcx, rax
jmp 0x4025f0
mov rax, qword [r12]
mov qword [rsp + 8], r9
mov esi, 0x1000
mov qword [rsp], r10
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
mov r10, qword [rsp]
mov r9, qword [rsp + 8]
sub rax, rbx
jne 0x4028a8
add rcx, qword [rsp + 0x10]
mov qword [r12 + 0x1088], rcx
jmp 0x402600
lea rdi, [r12 + 8]
mov eax, ebx
sub eax, ecx
mov qword [rsp + 0x10], rdi
jmp 0x4026be
nop dword [rax + rax]
cmp r9, rbx
mov qword [r12 + 0x1088], r9
mov rcx, r9
jae 0x4026f4
sub ebp, r10d
mov eax, 0x1000
je 0x401c28
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r10, rdx
lea r9, [rcx + rdx]
je 0x4026a0
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
mov qword [rsp + 8], r9
mov dword [rsp], edx
call sym.imp.memset
mov r9, qword [rsp + 8]
mov r10d, dword [rsp]
jmp 0x4026a0
mov rax, qword [r12]
mov dword [rsp], r10d
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
mov r10d, dword [rsp]
sub rax, rbx
jne 0x4028d9
add rcx, qword [rsp + 0x10]
mov qword [r12 + 0x1088], rcx
jmp 0x4026b0
mov rdi, rcx
mov rdx, rax
mov rsi, rbx
mov r13, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x4020c7
lea rdi, [r12 + 8]
mov eax, ebx
sub eax, ecx
mov qword [rsp], rdi
jmp 0x402776
nop dword [rax]
cmp r14, rbx
mov qword [r12 + 0x1088], r14
mov rcx, r14
jae 0x40279d
sub r13d, r15d
mov eax, 0x1000
je 0x401bd9
cmp r13d, eax
cmovbe eax, r13d
mov edx, eax
test edx, edx
mov r15, rdx
lea r14, [rcx + rdx]
je 0x402758
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
call sym.imp.memset
jmp 0x402758
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x402900
add rcx, qword [rsp]
mov qword [r12 + 0x1088], rcx
jmp 0x402768
mov byte [rsi - 1], 0x30
sub rsi, 1
jmp 0x40202e
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
jmp 0x402122
lea rdi, [r12 + 8]
mov eax, ebx
sub eax, ecx
mov qword [rsp + 8], rdi
jmp 0x40282e
nop dword [rax]
cmp r9, rbx
mov qword [r12 + 0x1088], r9
mov rcx, r9
jae 0x40285d
sub r14d, r13d
mov eax, 0x1000
je 0x402122
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
test edx, edx
mov r13, rdx
lea r9, [rcx + rdx]
je 0x402810
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
mov qword [rsp], r9
call sym.imp.memset
mov r9, qword [rsp]
jmp 0x402810
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x402934
add rcx, qword [rsp + 8]
mov qword [r12 + 0x1088], rcx
jmp 0x402820
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov r14, rax
call sym.imp.memmove
mov ecx, dword [rsp]
jmp 0x40253d
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 0x18], r9
mov qword [rsp + 8], r10
mov qword [rsp], rax
call sym.imp.memmove
mov r9, qword [rsp + 0x18]
mov r10, qword [rsp + 8]
mov rcx, qword [rsp]
jmp 0x402679
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov dword [rsp + 8], r10d
mov qword [rsp], rax
call sym.imp.memmove
mov r10d, dword [rsp + 8]
mov rcx, qword [rsp]
jmp 0x40271d
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x4027be
mov rdx, rax
mov rsi, rbx
mov rdi, r14
mov r15, rax
call sym.imp.memmove
jmp 0x4025c1
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, rbx
mov qword [rsp], rax
call sym.imp.memmove
mov rcx, qword [rsp]
jmp 0x40287e
sub ebp, eax
jmp 0x401f64
sub r13d, eax
jmp 0x402307
sub ecx, eax
jmp 0x402234
nop word [rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x38
mov rax, qword fs:[0x28]
mov qword [rsp + 0x28], rax
xor eax, eax
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x4029aa
mov edi, obj.inputMutex
call sym.imp.pthread_mutex_lock
test eax, eax
jne 0x403e7f
mov eax, dword [rip + 0x2078ac]
cmp eax, dword [rip + 0x2078a2]
mov dword [rsp + 0x1c], eax
jge 0x403d13
mov r13, qword [rip + 0x2078c1]
lea r12d, [rax + 1]
mov dword [rip + 0x20788a], r12d
mov ebp, dword [r13 + 0x109c]
mov byte [r13 + 0x1098], 0
cmp ebp, 5
ja 0x4038b0
mov r15, qword [r13 + 0x1088]
lea rbx, [r13 + 0x1008]
lea rax, [r15 + 0x85]
cmp qword [r13 + 0x1090], rax
jbe 0x40390e
mov dword [r15], 0x65736143
mov byte [r15 + 4], 0x20
add r15, 5
mov qword [r13 + 0x1088], r15
test r12d, r12d
mov rbp, qword [r13 + 0x1090]
mov esi, r12d
js 0x403832
je 0x403add
mov edi, dword [r13 + 0x10a4]
cmp edi, 0xa
jne 0x402d04
mov eax, 0xcccccccd
sub rbp, 1
mul esi
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub esi, eax
test edx, edx
lea eax, [rsi + 0x30]
mov esi, edx
mov byte [rbp], al
jne 0x402a4c
cmp byte [r13 + 0x1098], 0
jne 0x4037c3
mov r8, qword [r13 + 0x1088]
mov rsi, qword [r13 + 0x1090]
mov r12d, dword [r13 + 0x109c]
mov rax, rsi
mov byte [r13 + 0x1098], 1
sub rax, rbp
cmp eax, r12d
jb 0x403aea
xor r14d, r14d
test rax, rax
je 0x402ac3
mov rdi, r8
mov rdx, rax
mov rsi, rbp
mov r14, rax
call sym.imp.memmove
mov r8, rax
add r14, r8
cmp rbx, r14
mov qword [r13 + 0x1088], r14
jbe 0x403aaa
mov ebp, dword [r13 + 0x109c]
mov byte [r13 + 0x1098], 0
cmp ebp, 8
ja 0x4039af
lea rax, [r14 + 0x88]
cmp qword [r13 + 0x1090], rax
jbe 0x403a05
movabs rax, 0x6465747261747320
add r14, 8
mov qword [r14 - 8], rax
lea rax, [r14 + 1]
mov byte [r13 + 0x1098], 0
mov qword [r13 + 0x1088], rax
mov byte [r14], 0xa
cmp rbx, qword [r13 + 0x1088]
jbe 0x403b5a
mov rbx, qword [rip + 0x207749]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x403aa0
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
mov edi, 0x18828
call sym.operatornew
lea rbx, [rax + 0x18810]
mov qword [rax + 0x18808], 0
mov byte [rax + 0x18810], 0
mov edi, 0x10e0
mov r15, rax
mov qword [rsp + 8], rax
mov qword [rax + 0x18800], rbx
call sym.operatornew
lea rdx, [rax + 8]
mov rbx, qword [rip + 0x2076c9]
mov byte [rax + 0x1098], 0
mov dword [rax + 0x109c], 0
mov byte [rax + 0x10a0], 0x20
mov qword [rax + 0x1088], rdx
lea rdx, [rax + 0x1088]
mov dword [rax + 0x10a4], 0xa
mov dword [rax + 0x10a8], 9
mov byte [rax + 0x10c8], 0x20
mov qword [rax + 0x1090], rdx
lea rdx, [rax + 0x10c8]
mov qword [rax + 0x10c0], 1
mov byte [rax + 0x10c9], 0
mov qword [rax + 0x10b0], 0x3b9aca00
mov qword [rax + 0x10b8], rdx
lea rdx, [r15 + 0x18800]
mov qword [rax], 0x408548
mov qword [r15 + 0x18820], rax
mov qword [rsp + 0x20], r15
mov qword [rax + 0x10d8], rdx
mov rax, qword [rbx + 8]
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x402e3f
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov edi, r12d
cmp dl, 4
jbe 0x402c67
cmp r12b, 0x20
je 0x402c67
cmp r12b, 0x2d
movsx ecx, r12b
je 0x403793
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x402d5f
lea edx, [rdi - 0x30]
xor r13d, r13d
xor ebp, ebp
movzx edx, dl
cmp edx, esi
jb 0x402cdf
jmp 0x402d7d
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx ecx, byte [rdx]
lea edx, [rcx - 0x30]
movzx edx, dl
cmp edx, esi
jae 0x402d7d
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
mov rdx, rax
lea ebp, [rbp + rcx - 0x30]
ja 0x402cc6
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402cc6
mov eax, esi
xor edx, edx
sub rbp, 1
div edi
lea eax, [rdx + 0x30]
lea ecx, [rdx + 0x37]
cmp edx, 9
cmova eax, ecx
xor edx, edx
mov byte [rbp], al
mov edi, dword [r13 + 0x10a4]
mov eax, esi
div edi
test eax, eax
mov esi, eax
jne 0x402d04
jmp 0x402a6d
mov ecx, edx
movsx ecx, cl
cmp ecx, esi
jae 0x402d7d
imul ebp, esi
add r13d, 1
add ebp, ecx
cmp qword [rbx + 0x10], rax
jbe 0x403b9f
lea rdx, [rax + 1]
mov qword [rbx + 8], rdx
movzx ecx, byte [rax]
mov rax, rdx
lea edx, [rcx - 0x30]
cmp dl, 9
jbe 0x402d35
lea edx, [rcx - 0x41]
cmp dl, 0x19
ja 0x4037b2
sub ecx, 0x37
movsx ecx, cl
cmp ecx, esi
jb 0x402d3e
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x402f8e
mov edx, ebp
mov rdi, qword [rsp + 8]
neg edx
cmp r12b, 0x2d
cmove ebp, edx
mov dword [rdi], ebp
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x402fa7
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov esi, r12d
cmp dl, 4
jbe 0x402da0
cmp r12b, 0x20
je 0x402da0
cmp r12b, 0x2d
movsx edx, r12b
je 0x403bb3
mov ecx, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp ecx, 0xa
ja 0x402e50
sub esi, 0x30
xor r13d, r13d
xor ebp, ebp
movzx esi, sil
cmp esi, ecx
jb 0x402e1a
jmp 0x402ea3
nop dword [rax]
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea esi, [rdx - 0x30]
movzx esi, sil
cmp esi, ecx
jae 0x402ea3
imul ebp, ecx
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x402e00
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov ecx, dword [rbx + 0x18]
jmp 0x402e00
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402c74
lea esi, [rdx - 0x30]
cmp sil, 9
ja 0x402e8c
mov edx, esi
movsx edx, dl
cmp edx, ecx
jae 0x402ea3
imul ebp, ecx
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x403bed
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movzx edx, byte [rax]
mov rax, rsi
lea esi, [rdx - 0x30]
cmp sil, 9
jbe 0x402e59
lea esi, [rdx - 0x41]
cmp sil, 0x19
ja 0x403b8d
sub edx, 0x37
movsx edx, dl
cmp edx, ecx
jb 0x402e62
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x402f8e
mov rdi, qword [rsp + 8]
mov eax, ebp
neg eax
cmp r12b, 0x2d
cmove ebp, eax
mov eax, dword [rdi]
mov dword [rdi + 4], ebp
test eax, eax
jle 0x4033e2
sub eax, 1
lea r14, [rdi + 0x1c4]
lea r15, [rdi + rax*4 + 0x1c8]
mov rbx, qword [rip + 0x2073ae]
mov rax, qword [rbx + 8]
nop
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x4030ba
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x402ef0
cmp r12b, 0x20
je 0x402ef0
cmp r12b, 0x2d
movsx edx, r12b
je 0x40336b
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x402fe2
sub ecx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx ecx, cl
cmp esi, ecx
ja 0x402f69
jmp 0x403000
nop
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x403000
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x402f50
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402f50
mov ecx, str.void_read_Ts___...___with_Ts____int___int___
mov edx, 0x240
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_2_1_source.cpp
mov edi, str.input__read_forward_Ts__args_..._
call sym.imp.__assert_fail
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402dad
mov edx, ecx
movsx edx, dl
cmp edx, esi
jae 0x403000
imul ebp, esi
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x4033cb
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x402fb8
lea ecx, [rdx - 0x41]
cmp cl, 0x19
ja 0x40338a
sub edx, 0x37
movsx edx, dl
cmp edx, esi
jb 0x402fc1
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x402f8e
mov edx, ebp
neg edx
cmp r12b, 0x2d
cmove ebp, edx
mov dword [r14 - 0x1bc], ebp
nop
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x403233
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x403020
cmp r12b, 0x20
je 0x403020
cmp r12b, 0x2d
movsx edx, r12b
je 0x40339b
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x4030f5
sub ecx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx ecx, cl
cmp esi, ecx
ja 0x403095
jmp 0x403113
nop
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x403113
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x403080
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x403080
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402efd
mov edx, ecx
movsx edx, dl
cmp edx, esi
jae 0x403113
imul ebp, esi
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x40375d
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x4030cb
lea ecx, [rdx - 0x41]
cmp cl, 0x19
ja 0x4033ba
sub edx, 0x37
movsx edx, dl
cmp edx, esi
jb 0x4030d4
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x402f8e
mov eax, ebp
neg eax
cmp r12b, 0x2d
cmove ebp, eax
add r14, 4
mov dword [r14 - 4], ebp
cmp r14, r15
jne 0x402ee3
mov rdi, qword [rsp + 8]
movsxd rax, dword [rdi]
test eax, eax
jle 0x403c39
lea edx, [rax - 1]
lea rsi, [rdi + 0x380]
imul rdx, rdx, 0x378
mov qword [rsp], rsi
lea rdi, [rdi + rdx + 0x6f8]
mov qword [rsp + 0x10], rdi
mov rdi, rsi
lea r15, [rdi + rax*8]
mov r14, rdi
mov rbx, qword [rip + 0x207115]
cmp rdi, r15
je 0x4032d0
mov rax, qword [rbx + 8]
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x403300
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx ebp, byte [rdx]
lea edx, [rbp - 9]
mov ecx, ebp
cmp dl, 4
jbe 0x403190
cmp bpl, 0x20
je 0x403190
cmp bpl, 0x2d
movsx rdx, bpl
je 0x403318
mov esi, dword [rbx + 0x18]
xor r12d, r12d
xor r13d, r13d
cmp esi, 0xa
ja 0x40327a
sub ecx, 0x30
xor r12d, r12d
xor r13d, r13d
movzx ecx, cl
cmp ecx, esi
jb 0x40320a
jmp 0x4032a0
nop dword [rax]
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx rdx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x4032a0
mov ecx, esi
add r12d, 1
imul r13, rcx
cmp qword [rbx + 0x10], rax
lea r13, [r13 + rdx - 0x30]
mov rdx, rax
ja 0x4031f0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x4031f0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x40302d
nop dword [rax]
mov edx, ecx
movsx ecx, dl
cmp ecx, esi
jae 0x4032a0
mov ecx, esi
movsx rdx, dl
add r12d, 1
imul r13, rcx
add r13, rdx
cmp qword [rbx + 0x10], rax
jbe 0x403349
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x403248
lea ecx, [rdx - 0x41]
cmp cl, 0x19
ja 0x403338
sub edx, 0x37
movsx ecx, dl
cmp ecx, esi
jb 0x403251
nop dword [rax + rax]
sub rax, 1
test r12d, r12d
mov qword [rbx + 8], rax
je 0x403c20
mov rdx, r13
neg rdx
cmp bpl, 0x2d
cmove r13, rdx
add r14, 8
mov qword [r14 - 8], r13
cmp r15, r14
jne 0x403190
add qword [rsp], 0x378
mov rax, qword [rsp]
cmp rax, qword [rsp + 0x10]
mov rax, qword [rsp + 8]
je 0x4033df
movsxd rax, dword [rax]
mov rdi, qword [rsp]
jmp 0x403175
nop dword [rax + rax]
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x40319d
nop dword [rax]
cmp rax, qword [rbx + 0x10]
jae 0x40335d
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx rdx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x4031c6
nop dword [rax]
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
cmova edx, esi
jmp 0x40324a
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x40326c
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x40331e
cmp rax, qword [rbx + 0x10]
jae 0x403771
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x402f2a
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
cmova edx, esi
jmp 0x402fba
cmp rax, qword [rbx + 0x10]
jae 0x403b38
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x40305a
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
cmova edx, esi
jmp 0x4030cd
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402fd4
mov ebp, dword [rax + 4]
test ebp, ebp
jle 0x403640
mov rdi, qword [rsp + 8]
lea eax, [rbp - 1]
lea r14, [rdi + 0x18644]
lea r15, [rdi + rax*4 + 0x18648]
mov rbx, qword [rip + 0x206e90]
mov rcx, qword [rbx + 8]
nop dword [rax]
cmp qword [rbx + 0x10], rcx
mov rax, rcx
jbe 0x4035ba
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx r12d, byte [rax]
lea eax, [r12 - 9]
mov edx, r12d
cmp al, 4
jbe 0x403410
cmp r12b, 0x20
je 0x403410
cmp r12b, 0x2d
movsx eax, r12b
je 0x4036d5
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x4034d4
sub edx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx edx, dl
cmp esi, edx
ja 0x403485
jmp 0x4034f2
nop word [rax + rax]
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movsx eax, byte [rax]
lea edx, [rax - 0x30]
movzx edx, dl
cmp edx, esi
jae 0x4034f2
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rcx
lea ebp, [rbp + rax - 0x30]
mov rax, rcx
ja 0x403470
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x403470
mov eax, edx
movsx eax, al
cmp eax, esi
jae 0x4034f2
imul ebp, esi
add r13d, 1
add ebp, eax
cmp qword [rbx + 0x10], rcx
jbe 0x403735
lea rdx, [rcx + 1]
mov qword [rbx + 8], rdx
movzx eax, byte [rcx]
mov rcx, rdx
lea edx, [rax - 0x30]
cmp dl, 9
jbe 0x4034aa
lea edx, [rax - 0x41]
cmp dl, 0x19
ja 0x4036f4
sub eax, 0x37
movsx eax, al
cmp eax, esi
jb 0x4034b3
sub rcx, 1
test r13d, r13d
mov qword [rbx + 8], rcx
je 0x402f8e
mov eax, ebp
neg eax
cmp r12b, 0x2d
cmove ebp, eax
mov dword [r14 - 0x1bc], ebp
nop dword [rax]
cmp qword [rbx + 0x10], rcx
mov rax, rcx
jbe 0x4036c4
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx r12d, byte [rax]
lea eax, [r12 - 9]
mov edx, r12d
cmp al, 4
jbe 0x403518
cmp r12b, 0x20
je 0x403518
cmp r12b, 0x2d
movsx eax, r12b
je 0x403705
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x4035f5
sub edx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx edx, dl
cmp esi, edx
ja 0x403595
jmp 0x403613
nop word cs:[rax + rax]
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movsx eax, byte [rax]
lea edx, [rax - 0x30]
movzx edx, dl
cmp edx, esi
jae 0x403613
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rcx
lea ebp, [rbp + rax - 0x30]
mov rax, rcx
ja 0x403580
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x403580
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x40341d
mov eax, edx
movsx eax, al
cmp eax, esi
jae 0x403613
imul ebp, esi
add r13d, 1
add ebp, eax
cmp qword [rbx + 0x10], rcx
jbe 0x403749
lea rdx, [rcx + 1]
mov qword [rbx + 8], rdx
movzx eax, byte [rcx]
mov rcx, rdx
lea edx, [rax - 0x30]
cmp dl, 9
jbe 0x4035cb
lea edx, [rax - 0x41]
cmp dl, 0x19
ja 0x403724
sub eax, 0x37
movsx eax, al
cmp eax, esi
jb 0x4035d4
sub rcx, 1
test r13d, r13d
mov qword [rbx + 8], rcx
je 0x402f8e
mov eax, ebp
neg eax
cmp r12b, 0x2d
cmove ebp, eax
add r14, 4
mov dword [r14 - 4], ebp
cmp r15, r14
jne 0x403401
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x403654
mov edi, obj.inputMutex
call sym.imp.pthread_mutex_unlock
mov rdi, qword [rsp + 0x20]
call sym.TestCase::solve
movsxd rdi, dword [rsp + 0x1c]
mov rax, qword [rsp + 0x20]
lea rsi, [rax + 0x18800]
shl rdi, 5
add rdi, qword [rip + 0x206bc6]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rbx, qword [rsp + 0x20]
test rbx, rbx
je 0x40298e
mov rdi, qword [rbx + 0x18820]
test rdi, rdi
je 0x40369f
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x18800]
lea rax, [rbx + 0x18810]
cmp rdi, rax
je 0x4036b7
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
jmp 0x40298e
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x403525
cmp rcx, qword [rbx + 0x10]
jae 0x403782
lea rsi, [rcx + 1]
mov qword [rbx + 8], rsi
movsx eax, byte [rcx]
mov rcx, rsi
mov edx, eax
jmp 0x403449
lea edx, [rax - 0x61]
sub eax, 0x57
cmp dl, 0x19
cmova eax, esi
jmp 0x4034ac
cmp rcx, qword [rbx + 0x10]
jae 0x403b49
lea rsi, [rcx + 1]
mov qword [rbx + 8], rsi
movsx eax, byte [rcx]
mov rcx, rsi
mov edx, eax
jmp 0x403551
lea edx, [rax - 0x61]
sub eax, 0x57
cmp dl, 0x19
cmova eax, esi
jmp 0x4035cd
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x4034c6
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x4035e7
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x4030e7
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x403375
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 8]
jmp 0x4036df
cmp rax, qword [rbx + 0x10]
jae 0x403bce
lea rdx, [rax + 1]
mov qword [rbx + 8], rdx
movsx ecx, byte [rax]
mov rax, rdx
mov edi, ecx
jmp 0x402ca1
lea edx, [rcx - 0x61]
sub ecx, 0x57
cmp dl, 0x19
cmova ecx, esi
jmp 0x402d37
mov rax, qword [r13 + 0x10c0]
mov r8, qword [r13 + 0x1088]
mov rsi, qword [r13 + 0x1090]
mov r14, qword [r13 + 0x10b8]
mov byte [r13 + 0x1098], 0
mov r12d, eax
mov r15d, eax
lea rdx, [r8 + r12 + 0x80]
cmp rsi, rdx
jbe 0x403da2
cmp eax, 1
je 0x403d7d
test eax, eax
je 0x403823
mov rsi, r14
mov rdi, r8
mov rdx, r12
call sym.imp.memmove
mov rsi, qword [r13 + 0x1090]
mov r8, rax
add r8, r12
mov qword [r13 + 0x1088], r8
jmp 0x402a89
neg r12d
je 0x403cfe
mov esi, dword [r13 + 0x10a4]
cmp esi, 0xa
jne 0x40387b
mov eax, 0xcccccccd
sub rbp, 1
mul r12d
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub r12d, eax
mov eax, r12d
mov r12d, edx
add eax, 0x30
test edx, edx
mov byte [rbp], al
jne 0x403847
mov byte [rbp - 1], 0x2d
sub rbp, 1
jmp 0x402a6d
mov eax, r12d
xor edx, edx
sub rbp, 1
div esi
lea eax, [rdx + 0x30]
lea ecx, [rdx + 0x37]
cmp edx, 9
cmova eax, ecx
xor edx, edx
mov byte [rbp], al
mov esi, dword [r13 + 0x10a4]
mov eax, r12d
div esi
test eax, eax
mov r12d, eax
jne 0x40387b
jmp 0x40386e
nop dword [rax]
mov rdi, qword [r13 + 0x1088]
lea edx, [rbp - 5]
mov rbp, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [r13 + 0x1090], rax
jbe 0x403eb6
cmp edx, 1
je 0x403e9c
movzx esi, byte [r13 + 0x10a0]
lea r15, [rdi + rdx]
lea rbx, [r13 + 0x1008]
call sym.imp.memset
lea rax, [r15 + 0x85]
cmp qword [r13 + 0x1090], rax
mov qword [r13 + 0x1088], r15
ja 0x402a0c
lea rdi, [r13 + 8]
mov eax, ebx
mov r14d, 5
sub eax, r15d
mov qword [rsp], str.Case
mov qword [rsp + 8], rdi
jmp 0x403957
test eax, eax
mov ebp, eax
jne 0x403f48
add r15, rbp
cmp rbx, r15
mov qword [r13 + 0x1088], r15
jbe 0x403980
test r14d, r14d
je 0x402a23
add qword [rsp], rbp
mov eax, 0x1000
cmp r14d, eax
jae 0x40392c
mov ebp, r14d
xor r14d, r14d
mov rsi, qword [rsp]
mov rdi, r15
mov rdx, rbp
add r15, rbp
call sym.imp.memmove
cmp rbx, r15
mov qword [r13 + 0x1088], r15
ja 0x403945
mov rax, qword [r13]
mov esi, 0x1000
mov rdi, r13
xor r15d, r15d
call qword [rax]
mov rax, qword [r13 + 0x1088]
sub rax, rbx
jne 0x403e67
add r15, qword [rsp + 8]
mov qword [r13 + 0x1088], r15
jmp 0x403945
lea edx, [rbp - 8]
lea rax, [r14 + rdx + 0x80]
cmp qword [r13 + 0x1090], rax
mov rbp, rdx
jbe 0x403f8b
cmp edx, 1
je 0x403f69
movzx esi, byte [r13 + 0x10a0]
lea rbp, [r14 + rdx]
mov rdi, r14
mov r14, rbp
call sym.imp.memset
lea rax, [r14 + 0x88]
cmp qword [r13 + 0x1090], rax
mov qword [r13 + 0x1088], rbp
ja 0x402b02
lea rdi, [r13 + 8]
mov eax, ebx
mov r15d, 8
sub eax, r14d
mov r12d, str.started
mov qword [rsp], rdi
jmp 0x403a4a
test eax, eax
mov ebp, eax
jne 0x403d4a
add r14, rbp
cmp rbx, r14
mov qword [r13 + 0x1088], r14
jbe 0x403a72
test r15d, r15d
je 0x402b14
add r12, rbp
mov eax, 0x1000
cmp r15d, eax
jae 0x403a20
mov ebp, r15d
xor r15d, r15d
mov rdi, r14
mov rdx, rbp
add r14, rbp
mov rsi, r12
call sym.imp.memmove
cmp rbx, r14
mov qword [r13 + 0x1088], r14
ja 0x403a39
mov rax, qword [r13]
mov esi, 0x1000
mov rdi, r13
xor r14d, r14d
call qword [rax]
mov rax, qword [r13 + 0x1088]
sub rax, rbx
jne 0x403c01
add r14, qword [rsp]
mov qword [r13 + 0x1088], r14
jmp 0x403a39
mov rdi, rbx
call rax
jmp 0x402b81
mov rax, qword [r13]
mov esi, 0x1000
mov rdi, r13
xor ebp, ebp
lea r14, [r13 + 8]
call qword [rax]
mov rax, qword [r13 + 0x1088]
sub rax, rbx
jne 0x403e86
add r14, rbp
mov qword [r13 + 0x1088], r14
jmp 0x402ad6
mov byte [rbp - 1], 0x30
sub rbp, 1
jmp 0x402a6d
sub r12d, eax
mov edx, r12d
lea rax, [r8 + rdx + 0x80]
cmp rsi, rax
jbe 0x403c63
cmp r12d, 1
je 0x403c41
movzx esi, byte [r13 + 0x10a0]
lea r15, [r8 + rdx]
mov rdi, r8
call sym.imp.memset
mov qword [r13 + 0x1088], r15
mov rax, qword [r13 + 0x1090]
mov r8, r15
sub rax, rbp
jmp 0x402aa7
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x4033a5
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 8]
jmp 0x40370f
mov rax, qword [r13]
mov esi, 0x1000
mov rdi, r13
xor ebp, ebp
call qword [rax]
mov rax, qword [r13 + 0x1088]
lea r8, [r13 + 8]
sub rax, rbx
jne 0x403f50
add rbp, r8
mov qword [r13 + 0x1088], rbp
jmp 0x402b38
lea esi, [rdx - 0x61]
sub edx, 0x57
cmp sil, 0x19
cmova edx, ecx
jmp 0x402e5b
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402d51
cmp rax, qword [rbx + 0x10]
jae 0x403bdf
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movsx edx, byte [rax]
mov rax, rcx
mov esi, edx
jmp 0x402dda
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x40379d
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x403bb9
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov ecx, dword [rbx + 0x18]
jmp 0x402e75
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov r14, rax
call sym.imp.memmove
jmp 0x403a93
nop dword [rax + rax]
mov ecx, str.void_read_Ts___...___with_Ts____long_long_int_____111___int___
mov edx, 0x240
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_2_1_source.cpp
mov edi, str.input__read_forward_Ts__args_..._
call sym.imp.__assert_fail
mov ebp, dword [rdi + 4]
jmp 0x4033e2
lea rax, [r8 + 1]
mov qword [r13 + 0x1088], rax
movzx eax, byte [r13 + 0x10a0]
mov byte [r8], al
mov r15, qword [r13 + 0x1088]
jmp 0x403b26
lea rdi, [r13 + 8]
mov eax, ebx
sub eax, r8d
mov qword [rsp], rdi
mov rdi, r8
jmp 0x403c95
nop dword [rax]
cmp rbx, r15
mov qword [r13 + 0x1088], r15
jbe 0x403cc2
sub r12d, r14d
mov eax, 0x1000
je 0x403b26
mov rdi, r15
cmp r12d, eax
cmovbe eax, r12d
mov edx, eax
test edx, edx
mov r14, rdx
lea r15, [rdi + rdx]
je 0x403c78
movzx esi, byte [r13 + 0x10a0]
call sym.imp.memset
cmp rbx, r15
mov qword [r13 + 0x1088], r15
ja 0x403c84
mov rax, qword [r13]
mov esi, 0x1000
mov rdi, r13
xor r15d, r15d
call qword [rax]
mov rax, qword [r13 + 0x1088]
sub rax, rbx
je 0x403cf1
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov r15, rax
call sym.imp.memmove
add r15, qword [rsp]
mov qword [r13 + 0x1088], r15
jmp 0x403c84
mov byte [rbp - 1], 0x30
sub rbp, 1
mov byte [rbp - 1], 0x2d
sub rbp, 1
jmp 0x402a6d
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x403d27
mov edi, obj.inputMutex
call sym.imp.pthread_mutex_unlock
mov rax, qword [rsp + 0x28]
xor rax, qword fs:[0x28]
jne 0x40402a
add rsp, 0x38
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
sub r15d, eax
jmp 0x403a55
mov rbp, rax
mov rax, qword [rsp + 8]
mov rdi, qword [rax + 0x18800]
cmp rbx, rdi
je 0x403d6b
call sym.operatordelete
mov rdi, qword [rsp + 8]
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
lea rax, [r8 + 1]
mov qword [r13 + 0x1088], rax
movzx eax, byte [r14]
mov byte [r8], al
mov r8, qword [r13 + 0x1088]
mov rsi, qword [r13 + 0x1090]
jmp 0x402a89
mov r12d, ebx
lea rax, [r13 + 8]
mov qword [rsp + 8], rbp
sub r12d, r8d
cmp r15d, r12d
mov qword [rsp], rax
cmovbe r12d, r15d
test r12d, r12d
mov ebp, r12d
je 0x403dd5
mov rdi, r8
mov rdx, rbp
mov rsi, r14
call sym.imp.memmove
mov r8, rax
add r8, rbp
cmp rbx, r8
mov qword [r13 + 0x1088], r8
jbe 0x403e10
sub r15d, r12d
je 0x403e56
mov r12d, 0x1000
add r14, rbp
cmp r15d, r12d
cmovbe r12d, r15d
test r12d, r12d
mov ebp, r12d
jne 0x403dc4
add r8, rbp
cmp rbx, r8
mov qword [r13 + 0x1088], r8
ja 0x403de4
mov rax, qword [r13]
mov esi, 0x1000
mov rdi, r13
call qword [rax]
mov rax, qword [r13 + 0x1088]
xor r8d, r8d
sub rax, rbx
je 0x403e46
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 0x10], rax
call sym.imp.memmove
mov r8, qword [rsp + 0x10]
add r8, qword [rsp]
sub r15d, r12d
mov qword [r13 + 0x1088], r8
jne 0x403de9
mov rbp, qword [rsp + 8]
mov rsi, qword [r13 + 0x1090]
jmp 0x402a89
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, rbx
mov r15, rax
call sym.imp.memmove
jmp 0x4039a1
mov edi, eax
call sym.std::__throw_system_error
mov rdx, rax
mov rsi, rbx
mov rdi, r14
mov rbp, rax
call sym.imp.memmove
jmp 0x403ace
lea rax, [rdi + 1]
mov qword [r13 + 0x1088], rax
movzx eax, byte [r13 + 0x10a0]
mov byte [rdi], al
jmp 0x4029ea
lea rbx, [r13 + 0x1008]
lea rsi, [r13 + 8]
mov eax, ebx
mov qword [rsp], rsi
sub eax, edi
jmp 0x403ee1
nop dword [rax + rax]
sub ebp, r14d
mov eax, 0x1000
je 0x4029f8
mov rdi, r15
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r14, rdx
lea r15, [rdi + rdx]
je 0x403f00
movzx esi, byte [r13 + 0x10a0]
call sym.imp.memset
cmp rbx, r15
mov qword [r13 + 0x1088], r15
ja 0x403ed0
mov rax, qword [r13]
mov esi, 0x1000
mov rdi, r13
xor r15d, r15d
call qword [rax]
mov rax, qword [r13 + 0x1088]
sub rax, rbx
je 0x403f3b
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov r15, rax
call sym.imp.memmove
add r15, qword [rsp]
mov qword [r13 + 0x1088], r15
jmp 0x403ed0
sub r14d, eax
jmp 0x403962
mov rdi, r8
mov rdx, rax
mov rsi, rbx
mov rbp, rax
call sym.imp.memmove
mov r8, rax
jmp 0x403b7e
lea rax, [r14 + 1]
mov qword [r13 + 0x1088], rax
movzx eax, byte [r13 + 0x10a0]
mov byte [r14], al
mov r14, qword [r13 + 0x1088]
jmp 0x402aee
mov eax, ebx
mov rdi, r14
lea r15, [r13 + 8]
sub eax, r14d
jmp 0x403fb1
nop dword [rax]
sub ebp, r12d
mov eax, 0x1000
je 0x402aee
mov rdi, r14
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
add r14, rdx
test edx, edx
mov r12, rdx
je 0x403fcf
movzx esi, byte [r13 + 0x10a0]
call sym.imp.memset
cmp rbx, r14
mov qword [r13 + 0x1088], r14
ja 0x403fa0
mov rax, qword [r13]
mov esi, 0x1000
mov rdi, r13
xor r14d, r14d
call qword [rax]
mov rax, qword [r13 + 0x1088]
sub rax, rbx
je 0x404009
mov rdx, rax
mov rsi, rbx
mov rdi, r15
mov r14, rax
call sym.imp.memmove
add r14, r15
mov qword [r13 + 0x1088], r14
jmp 0x403fa0
lea rdi, [rsp + 0x20]
mov rbx, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rdi, rbx
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
nop
push r15
push r14
push r13
push r12
mov r12d, 0xcccccccd
push rbp
push rbx
mov ebp, 1
sub rsp, 0x78
mov rax, qword fs:[0x28]
mov qword [rsp + 0x68], rax
xor eax, eax
lea r13, [rsp + 0x50]
nop
mov edi, 0x18828
call sym.operatornew
lea r14, [rax + 0x18810]
mov qword [rax + 0x18808], 0
mov byte [rax + 0x18810], 0
mov edi, 0x10e0
mov rbx, rax
mov qword [rax + 0x18800], r14
call sym.operatornew
lea rdx, [rax + 8]
mov byte [rax + 0x1098], 0
mov dword [rax + 0x109c], 0
mov byte [rax + 0x10a0], 0x20
mov dword [rax + 0x10a4], 0xa
mov rdi, rbx
mov qword [rax + 0x1088], rdx
lea rdx, [rax + 0x1088]
mov dword [rax + 0x10a8], 9
mov byte [rax + 0x10c8], 0x20
mov qword [rax + 0x10c0], 1
mov qword [rax + 0x1090], rdx
lea rdx, [rax + 0x10c8]
mov byte [rax + 0x10c9], 0
mov qword [rax + 0x10b0], 0x3b9aca00
mov qword [rax], 0x408548
mov qword [rax + 0x10b8], rdx
lea rdx, [rbx + 0x18800]
mov qword [rbx + 0x18820], rax
mov qword [rsp + 0x30], rbx
mov qword [rax + 0x10d8], rdx
call sym.TestCase::solve
mov rax, qword [rsp + 0x30]
lea rdi, [rsp + 0x40]
mov qword [rsp + 0x40], r13
mov qword [rsp + 0x48], 0
mov byte [rsp + 0x50], 0
lea rsi, [rax + 0x18800]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rax, qword [rsp + 0x30]
mov rbx, qword [rax + 0x18820]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea r14, [rbx + 8]
mov rdi, rbx
sub rsi, r14
call qword [rax]
mov qword [rbx + 0x1088], r14
mov rax, qword [rsp + 0x30]
mov rdx, qword [rax + 0x18808]
cmp rdx, qword [rsp + 0x48]
je 0x404660
mov rbx, qword [rip + 0x2060e1]
mov r14d, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
cmp r14d, 0xf
ja 0x4047e0
mov rcx, qword [rbx + 0x1088]
lea r15, [rbx + 0x1008]
lea rax, [rcx + 0x8f]
cmp qword [rbx + 0x1090], rax
jbe 0x404846
movabs rax, 0x6e6f20726f727245
mov esi, 0x2074
mov dword [rcx + 8], 0x73657420
mov qword [rcx], rax
mov word [rcx + 0xc], si
add rcx, 0xf
mov byte [rcx - 1], 0x23
mov qword [rbx + 0x1088], rcx
mov ecx, dword [rbx + 0x10a4]
mov r14, qword [rbx + 0x1090]
cmp ecx, 0xa
jne 0x404cc8
mov ecx, ebp
nop dword [rax]
mov eax, ecx
sub r14, 1
mul r12d
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
test edx, edx
mov byte [r14], cl
mov ecx, edx
jne 0x404228
cmp byte [rbx + 0x1098], 0
jne 0x404968
mov r8, qword [rbx + 0x1088]
mov rcx, qword [rbx + 0x1090]
mov edx, dword [rbx + 0x109c]
mov rax, rcx
mov byte [rbx + 0x1098], 1
sub rax, r14
cmp eax, edx
jb 0x404c00
xor ecx, ecx
test rax, rax
je 0x40429d
mov rdi, r8
mov rdx, rax
mov rsi, r14
mov qword [rsp], rax
call sym.imp.memmove
mov rcx, qword [rsp]
mov r8, rax
lea rax, [r8 + rcx]
cmp rax, r15
mov qword [rbx + 0x1088], rax
jae 0x404e48
lea rdx, [rax + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rdx
mov byte [rax], 0xa
cmp qword [rbx + 0x1088], r15
jae 0x404e10
mov rbx, qword [rip + 0x205fae]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea r14, [rbx + 8]
mov rax, qword [rax]
sub rsi, r14
cmp rax, sym.OutputFile::writeToDevice
jne 0x404af0
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, r14
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], r14
mov rbx, qword [rip + 0x205f5e]
mov rax, qword [rsp + 0x30]
mov r14d, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
mov qword [rsp + 0x10], rax
cmp r14d, 0xa
ja 0x4049e8
lea rax, [rbx + 0x1008]
mov rcx, qword [rbx + 0x1088]
mov qword [rsp], rax
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
jbe 0x404a52
movabs rax, 0x6465746365707845
mov edx, 0xa3a
add rcx, 0xa
mov qword [rcx - 0xa], rax
mov word [rcx - 2], dx
mov qword [rbx + 0x1088], rcx
mov rax, qword [rsp + 0x10]
mov r15, qword [rax + 0x18808]
mov rax, qword [rax + 0x18800]
mov byte [rbx + 0x1098], 0
mov qword [rsp + 0x10], rax
mov eax, dword [rbx + 0x109c]
mov r14d, r15d
cmp r15d, eax
jb 0x404910
mov r8d, r15d
lea rax, [rcx + r8 + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x404b60
cmp r15d, 1
je 0x404b38
test r15d, r15d
je 0x404409
mov rsi, qword [rsp + 0x10]
mov rdx, r8
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov rcx, rax
add rcx, r8
lea rax, [rcx + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rax
mov byte [rcx], 0xa
mov rax, qword [rsp]
cmp rax, qword [rbx + 0x1088]
jbe 0x404c90
mov rbx, qword [rip + 0x205e4f]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea r14, [rbx + 8]
mov rax, qword [rax]
sub rsi, r14
cmp rax, sym.OutputFile::writeToDevice
jne 0x404b00
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, r14
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], r14
mov rbx, qword [rip + 0x205dff]
mov r14d, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
cmp r14d, 0xa
ja 0x4046e8
lea rax, [rbx + 0x1008]
mov rcx, qword [rbx + 0x1088]
mov qword [rsp], rax
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
jbe 0x404752
movabs rax, 0x6465766965636552
add rcx, 0xa
mov qword [rcx - 0xa], rax
mov eax, 0xa3a
mov word [rcx - 2], ax
mov qword [rbx + 0x1088], rcx
mov rax, qword [rsp + 0x40]
mov r15, qword [rsp + 0x48]
mov byte [rbx + 0x1098], 0
mov qword [rsp + 0x10], rax
mov eax, dword [rbx + 0x109c]
mov r14d, r15d
cmp r15d, eax
jb 0x404690
mov r8d, r15d
lea rax, [rcx + r8 + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x404d00
cmp r15d, 1
je 0x404b10
test r15d, r15d
je 0x404555
mov rsi, qword [rsp + 0x10]
mov rdx, r8
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov rcx, rax
add rcx, r8
lea rax, [rcx + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rax
mov byte [rcx], 0xa
mov rax, qword [rsp]
cmp rax, qword [rbx + 0x1088]
jbe 0x404dd8
mov rbx, qword [rip + 0x205d03]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea r14, [rbx + 8]
mov rax, qword [rax]
sub rsi, r14
cmp rax, sym.OutputFile::writeToDevice
jne 0x404ae0
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, r14
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], r14
mov rbx, qword [rsp + 0x40]
cmp rbx, r13
je 0x4045e0
mov rdi, rbx
call sym.operatordelete
mov rbx, qword [rsp + 0x30]
test rbx, rbx
je 0x40461c
mov rdi, qword [rbx + 0x18820]
test rdi, rdi
je 0x4045fc
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x18800]
lea rax, [rbx + 0x18810]
cmp rdi, rax
je 0x404614
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
add ebp, 1
cmp ebp, 0x65
jne 0x404060
call sym.imp.clock
pxor xmm0, xmm0
lea rsi, [rsp + 0x30]
mov edi, str._n_nTest_time:
cvtsi2sd xmm0, rax
divsd xmm0, qword [rip + 0x3fc0]
movsd qword [rsp + 0x30], xmm0
call sym.writeln_charconst____15__double_
xor edi, edi
call sym.imp.exit
nop word [rax + rax]
test rdx, rdx
mov rbx, qword [rsp + 0x40]
je 0x4045d3
mov rdi, qword [rax + 0x18800]
mov rsi, rbx
call sym.imp.memcmp
test eax, eax
jne 0x4041a0
jmp 0x4045d3
nop word [rax + rax]
sub eax, r15d
mov edx, eax
mov esi, eax
mov dword [rsp + 8], eax
lea rax, [rcx + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x405343
cmp esi, 1
je 0x404ecb
movzx esi, byte [rbx + 0x10a0]
lea r8, [rcx + rdx]
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memset
mov r8, qword [rsp + 8]
mov qword [rbx + 0x1088], r8
mov rcx, r8
jmp 0x404511
nop dword [rax]
mov rdi, qword [rbx + 0x1088]
lea edx, [r14 - 0xa]
mov r14, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x404f24
cmp edx, 1
je 0x404eeb
movzx esi, byte [rbx + 0x10a0]
lea rcx, [rdi + rdx]
mov qword [rsp], rcx
call sym.imp.memset
mov rcx, qword [rsp]
lea rax, [rbx + 0x1008]
mov qword [rsp], rax
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rcx
ja 0x4044c7
mov r14d, dword [rsp]
lea rax, [rbx + 8]
mov r15d, 0xa
mov qword [rsp + 0x10], str.Received:_n
mov qword [rsp + 0x18], rax
sub r14d, ecx
jmp 0x4047b4
nop dword [rax + rax]
mov eax, r14d
test r14d, r14d
mov qword [rsp + 8], rax
jne 0x4047c4
add rcx, qword [rsp + 8]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
jbe 0x404da0
sub r15d, r14d
je 0x4044e9
mov rsi, qword [rsp + 8]
add qword [rsp + 0x10], rsi
mov r14d, 0x1000
cmp r15d, r14d
jae 0x404778
mov eax, r15d
mov r14d, r15d
mov qword [rsp + 8], rax
mov rdx, qword [rsp + 8]
mov rsi, qword [rsp + 0x10]
mov rdi, rcx
call sym.imp.memmove
mov rcx, rax
jmp 0x404785
nop dword [rax + rax]
mov rdi, qword [rbx + 0x1088]
lea edx, [r14 - 0xf]
mov r14, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x40512c
cmp edx, 1
je 0x404e75
movzx esi, byte [rbx + 0x10a0]
lea rcx, [rdi + rdx]
lea r15, [rbx + 0x1008]
mov qword [rsp], rcx
call sym.imp.memset
mov rcx, qword [rsp]
lea rax, [rcx + 0x8f]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rcx
ja 0x4041e1
lea rax, [rbx + 8]
mov r14d, r15d
mov dword [rsp + 8], 0xf
sub r14d, ecx
mov qword [rsp + 0x10], str.Error_on_test__
mov qword [rsp + 0x18], rax
jmp 0x4048a6
nop dword [rax + rax]
mov eax, r14d
test r14d, r14d
mov qword [rsp], rax
jne 0x4048b8
add rcx, qword [rsp]
cmp rcx, r15
mov qword [rbx + 0x1088], rcx
jae 0x4048dc
sub dword [rsp + 8], r14d
je 0x40420d
mov rsi, qword [rsp]
add qword [rsp + 0x10], rsi
mov r14d, 0x1000
cmp dword [rsp + 8], r14d
jae 0x404870
mov edi, dword [rsp + 8]
mov qword [rsp], rdi
mov r14d, edi
mov rdx, qword [rsp]
mov rsi, qword [rsp + 0x10]
mov rdi, rcx
call sym.imp.memmove
mov rcx, rax
add rcx, qword [rsp]
cmp rcx, r15
mov qword [rbx + 0x1088], rcx
jb 0x40488c
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, r15
jne 0x4051f0
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x40488c
nop dword [rax]
sub eax, r15d
mov edx, eax
mov edi, eax
mov dword [rsp + 8], eax
lea rax, [rcx + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x40520f
cmp edi, 1
je 0x404f04
movzx esi, byte [rbx + 0x10a0]
lea r8, [rcx + rdx]
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memset
mov r8, qword [rsp + 8]
mov qword [rbx + 0x1088], r8
mov rcx, r8
jmp 0x4043c5
nop dword [rax]
mov rax, qword [rbx + 0x10c0]
mov r8, qword [rbx + 0x1088]
mov rcx, qword [rbx + 0x1090]
mov rdi, qword [rbx + 0x10b8]
mov byte [rbx + 0x1098], 0
mov r9d, eax
mov dword [rsp + 8], eax
lea rdx, [r8 + r9 + 0x80]
mov qword [rsp + 0x10], rdi
cmp rcx, rdx
jbe 0x405061
cmp eax, 1
je 0x404e8e
test eax, eax
je 0x4049d5
mov rsi, rdi
mov rdx, r9
mov rdi, r8
mov qword [rsp], r9
call sym.imp.memmove
mov rcx, qword [rbx + 0x1090]
mov r9, qword [rsp]
mov r8, rax
add r8, r9
mov qword [rbx + 0x1088], r8
jmp 0x404262
nop dword [rax]
mov rdi, qword [rbx + 0x1088]
lea edx, [r14 - 0xa]
mov r14, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x404fc1
cmp edx, 1
je 0x404eb2
movzx esi, byte [rbx + 0x10a0]
lea rcx, [rdi + rdx]
mov qword [rsp], rcx
call sym.imp.memset
mov rcx, qword [rsp]
lea rax, [rbx + 0x1008]
mov qword [rsp], rax
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rcx
ja 0x404372
mov r14d, dword [rsp]
lea rax, [rbx + 8]
mov r15d, 0xa
mov qword [rsp + 0x18], str.Expected:_n
mov qword [rsp + 0x20], rax
sub r14d, ecx
jmp 0x404ab4
nop dword [rax + rax]
mov eax, r14d
test r14d, r14d
mov qword [rsp + 8], rax
jne 0x404ac4
add rcx, qword [rsp + 8]
cmp rcx, qword [rsp]
mov qword [rbx + 0x1088], rcx
jae 0x404c58
sub r15d, r14d
je 0x404394
mov rsi, qword [rsp + 8]
add qword [rsp + 0x18], rsi
mov r14d, 0x1000
cmp r15d, r14d
jae 0x404a78
mov eax, r15d
mov r14d, r15d
mov qword [rsp + 8], rax
mov rdx, qword [rsp + 8]
mov rsi, qword [rsp + 0x18]
mov rdi, rcx
call sym.imp.memmove
mov rcx, rax
jmp 0x404a85
nop dword [rax + rax]
mov rdi, rbx
call rax
jmp 0x4045c7
nop word [rax + rax]
mov rdi, rbx
call rax
jmp 0x40431c
nop word [rax + rax]
mov rdi, rbx
call rax
jmp 0x40447b
nop word [rax + rax]
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
mov rax, qword [rsp + 0x10]
movzx eax, byte [rax]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x404558
nop dword [rax]
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
mov rax, qword [rsp + 0x10]
movzx eax, byte [rax]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x40440c
nop dword [rax]
mov r15d, dword [rsp]
lea rax, [rbx + 8]
mov qword [rsp + 0x18], rax
sub r15d, ecx
jmp 0x404ba3
nop word [rax + rax]
add rcx, qword [rsp + 8]
cmp rcx, qword [rsp]
mov qword [rbx + 0x1088], rcx
jae 0x404bd0
sub r14d, r15d
je 0x40440c
mov rsi, qword [rsp + 8]
add qword [rsp + 0x10], rsi
mov r15d, 0x1000
cmp r14d, r15d
cmovbe r15d, r14d
mov eax, r15d
test r15d, r15d
mov qword [rsp + 8], rax
je 0x404b78
mov rsi, qword [rsp + 0x10]
mov rdi, rcx
mov edx, r15d
call sym.imp.memmove
mov rcx, rax
jmp 0x404b78
nop dword [rax]
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
xor ecx, ecx
mov rax, qword [rbx + 0x1088]
sub rax, qword [rsp]
jne 0x4052e3
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x404b8a
nop
sub edx, eax
lea rax, [r8 + rdx + 0x80]
mov dword [rsp], edx
cmp rcx, rax
jbe 0x405422
cmp edx, 1
je 0x405401
movzx esi, byte [rbx + 0x10a0]
lea rcx, [r8 + rdx]
mov rdi, r8
mov qword [rsp], rcx
call sym.imp.memset
mov rcx, qword [rsp]
mov qword [rbx + 0x1088], rcx
mov r8, rcx
mov rax, qword [rbx + 0x1090]
sub rax, r14
jmp 0x40427d
nop dword [rax + rax]
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
xor ecx, ecx
mov rax, qword [rbx + 0x1088]
sub rax, qword [rsp]
jne 0x405303
add rcx, qword [rsp + 0x20]
mov qword [rbx + 0x1088], rcx
jmp 0x404a9b
nop dword [rax]
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
xor r14d, r14d
mov rax, qword [rbx + 0x1088]
sub rax, qword [rsp]
lea rcx, [rbx + 8]
jne 0x4052b0
add r14, rcx
mov qword [rbx + 0x1088], r14
jmp 0x404432
nop dword [rax]
mov esi, ebp
nop word [rax + rax]
mov eax, esi
xor edx, edx
sub r14, 1
div ecx
lea ecx, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp edx, 9
cmova eax, ecx
xor edx, edx
mov byte [r14], al
mov ecx, dword [rbx + 0x10a4]
mov eax, esi
div ecx
test eax, eax
mov esi, eax
jne 0x404cd0
jmp 0x404247
mov r15d, dword [rsp]
lea rax, [rbx + 8]
mov qword [rsp + 0x18], rax
sub r15d, ecx
jmp 0x404d43
nop word [rax + rax]
add rcx, qword [rsp + 8]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
jbe 0x404d70
sub r14d, r15d
je 0x404558
mov rsi, qword [rsp + 8]
add qword [rsp + 0x10], rsi
mov r15d, 0x1000
cmp r14d, r15d
cmovbe r15d, r14d
mov eax, r15d
test r15d, r15d
mov qword [rsp + 8], rax
je 0x404d18
mov rsi, qword [rsp + 0x10]
mov rdi, rcx
mov edx, r15d
call sym.imp.memmove
mov rcx, rax
jmp 0x404d18
nop dword [rax]
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
xor ecx, ecx
mov rax, qword [rbx + 0x1088]
sub rax, qword [rsp]
jne 0x40510c
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x404d2a
nop
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
xor ecx, ecx
mov rax, qword [rbx + 0x1088]
sub rax, qword [rsp]
jne 0x405323
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x40479b
nop dword [rax]
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
xor r14d, r14d
mov rax, qword [rbx + 0x1088]
sub rax, qword [rsp]
lea rcx, [rbx + 8]
jne 0x4051d6
add r14, rcx
mov qword [rbx + 0x1088], r14
jmp 0x40457e
nop dword [rax]
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor r14d, r14d
lea rcx, [rbx + 8]
sub rax, r15
jne 0x4052ca
add r14, rcx
mov qword [rbx + 0x1088], r14
jmp 0x4042d3
nop dword [rax + rax]
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor r14d, r14d
lea rcx, [rbx + 8]
sub rax, r15
jne 0x4053e8
lea rax, [rcx + r14]
jmp 0x4042b1
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x4041bf
lea rax, [r8 + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rdi]
mov byte [r8], al
mov r8, qword [rbx + 0x1088]
mov rcx, qword [rbx + 0x1090]
jmp 0x404262
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x40434c
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x404511
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x4044a1
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x4043c5
lea rax, [rbx + 0x1008]
lea rsi, [rbx + 8]
mov qword [rsp], rax
mov qword [rsp + 0x10], rsi
sub eax, edi
jmp 0x404f5e
nop dword [rax]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
jbe 0x404f95
sub r14d, r15d
mov eax, 0x1000
je 0x4044b3
mov rdi, rcx
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
test edx, edx
mov r15, rdx
lea rcx, [rdi + rdx]
je 0x404f40
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 8], rcx
call sym.imp.memset
mov rcx, qword [rsp + 8]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
ja 0x404f4d
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 0x1088]
sub rcx, qword [rsp]
jne 0x40557b
add rcx, qword [rsp + 0x10]
mov qword [rbx + 0x1088], rcx
jmp 0x404f4d
lea rax, [rbx + 0x1008]
lea rsi, [rbx + 8]
mov qword [rsp], rax
mov qword [rsp + 0x18], rsi
sub eax, edi
jmp 0x404ffe
nop dword [rax]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
jbe 0x405035
sub r14d, r15d
mov eax, 0x1000
je 0x40435e
mov rdi, rcx
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
test edx, edx
mov r15, rdx
lea rcx, [rdi + rdx]
je 0x404fe0
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 8], rcx
call sym.imp.memset
mov rcx, qword [rsp + 8]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
ja 0x404fed
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 0x1088]
sub rcx, qword [rsp]
jne 0x40551c
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x404fed
lea rdi, [rbx + 8]
mov eax, r15d
sub eax, r8d
mov qword [rsp + 0x20], rdi
jmp 0x4050a4
nop word [rax + rax]
add r8, qword [rsp]
cmp r8, r15
mov qword [rbx + 0x1088], r8
jae 0x4050de
mov edi, dword [rsp + 0x18]
sub dword [rsp + 8], edi
je 0x40425b
mov rdi, qword [rsp]
add qword [rsp + 0x10], rdi
mov eax, 0x1000
mov esi, dword [rsp + 8]
cmp esi, eax
cmovbe eax, esi
mov edi, eax
test eax, eax
mov dword [rsp + 0x18], eax
mov qword [rsp], rdi
je 0x405078
mov rsi, qword [rsp + 0x10]
mov rdx, rdi
mov rdi, r8
call sym.imp.memmove
mov r8, rax
add r8, qword [rsp]
cmp r8, r15
mov qword [rbx + 0x1088], r8
jb 0x405088
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov r8, qword [rbx + 0x1088]
sub r8, r15
jne 0x40553c
add r8, qword [rsp + 0x20]
mov qword [rbx + 0x1088], r8
jmp 0x405088
mov rsi, qword [rsp]
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov qword [rsp + 0x20], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x20]
jmp 0x404d90
lea rax, [rbx + 0x1008]
lea rsi, [rbx + 8]
mov qword [rsp], rax
mov qword [rsp + 0x10], rsi
sub eax, edi
jmp 0x405162
nop dword [rax]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
jbe 0x405199
sub r14d, r15d
mov eax, 0x1000
je 0x4051cd
mov rdi, rcx
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
test edx, edx
mov r15, rdx
lea rcx, [rdi + rdx]
je 0x405148
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 8], rcx
call sym.imp.memset
mov rcx, qword [rsp + 8]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
ja 0x405155
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 0x1088]
sub rcx, qword [rsp]
jne 0x4054dc
add rcx, qword [rsp + 0x10]
sub r14d, r15d
mov eax, 0x1000
mov qword [rbx + 0x1088], rcx
jne 0x40515f
mov r15, qword [rsp]
jmp 0x4041cd
mov rsi, qword [rsp]
mov rdi, rcx
mov rdx, rax
mov r14, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x404dfd
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, r15
mov qword [rsp + 0x20], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x20]
jmp 0x4048fb
mov eax, dword [rsp]
lea rsi, [rbx + 8]
mov rdi, rcx
mov qword [rsp + 0x28], rsi
sub eax, ecx
jmp 0x40524b
nop word [rax + rax]
cmp rcx, qword [rsp]
mov qword [rbx + 0x1088], rcx
jae 0x405284
mov esi, dword [rsp + 0x18]
sub dword [rsp + 8], esi
mov eax, 0x1000
je 0x4043c5
mov rdi, rcx
mov esi, dword [rsp + 8]
cmp esi, eax
cmovbe eax, esi
mov edx, eax
mov dword [rsp + 0x18], eax
add rcx, rdx
test eax, eax
je 0x405228
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x20], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x20]
cmp rcx, qword [rsp]
mov qword [rbx + 0x1088], rcx
jb 0x405235
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 0x1088]
sub rcx, qword [rsp]
jne 0x40555b
add rcx, qword [rsp + 0x28]
mov qword [rbx + 0x1088], rcx
jmp 0x405235
mov rsi, qword [rsp]
mov rdi, rcx
mov rdx, rax
mov r14, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x404cb5
mov rdi, rcx
mov rdx, rax
mov rsi, r15
mov r14, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x404e34
mov rsi, qword [rsp]
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov qword [rsp + 0x20], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x20]
jmp 0x404bf0
mov rsi, qword [rsp]
mov rdi, qword [rsp + 0x20]
mov rdx, rax
mov qword [rsp + 0x28], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
jmp 0x404c78
mov rsi, qword [rsp]
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov qword [rsp + 0x20], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x20]
jmp 0x404dc0
mov eax, dword [rsp]
lea rsi, [rbx + 8]
mov rdi, rcx
mov qword [rsp + 0x28], rsi
sub eax, ecx
jmp 0x405383
nop word cs:[rax + rax]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
jbe 0x4053bc
mov esi, dword [rsp + 0x18]
sub dword [rsp + 8], esi
mov eax, 0x1000
je 0x404511
mov rdi, rcx
mov esi, dword [rsp + 8]
cmp esi, eax
cmovbe eax, esi
mov edx, eax
mov dword [rsp + 0x18], eax
add rcx, rdx
test eax, eax
je 0x405360
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x20], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x20]
cmp qword [rsp], rcx
mov qword [rbx + 0x1088], rcx
ja 0x40536d
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 0x1088]
sub rcx, qword [rsp]
jne 0x4054fc
add rcx, qword [rsp + 0x28]
mov qword [rbx + 0x1088], rcx
jmp 0x40536d
mov rdi, rcx
mov rdx, rax
mov rsi, r15
mov r14, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x404e6c
lea rax, [r8 + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [r8], al
mov r8, qword [rbx + 0x1088]
jmp 0x404c44
lea rsi, [rbx + 8]
mov eax, r15d
mov rdi, r8
sub eax, r8d
mov qword [rsp + 0x10], rsi
jmp 0x405461
nop word cs:[rax + rax]
cmp r8, r15
mov qword [rbx + 0x1088], r8
jae 0x405498
mov esi, dword [rsp + 8]
sub dword [rsp], esi
mov eax, 0x1000
je 0x404c44
mov rdi, r8
mov esi, dword [rsp]
cmp esi, eax
cmovbe eax, esi
mov edx, eax
mov dword [rsp + 8], eax
add r8, rdx
test eax, eax
je 0x405440
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x18], r8
call sym.imp.memset
mov r8, qword [rsp + 0x18]
cmp r8, r15
mov qword [rbx + 0x1088], r8
jb 0x40544c
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov r8, qword [rbx + 0x1088]
sub r8, r15
je 0x4054cb
mov rdi, qword [rsp + 0x10]
mov rdx, r8
mov rsi, r15
mov qword [rsp + 0x18], r8
call sym.imp.memmove
mov r8, qword [rsp + 0x18]
add r8, qword [rsp + 0x10]
mov qword [rbx + 0x1088], r8
jmp 0x40544c
mov rsi, qword [rsp]
mov rdi, qword [rsp + 0x10]
mov rdx, rcx
mov qword [rsp + 8], rcx
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x4051b7
mov rsi, qword [rsp]
mov rdi, qword [rsp + 0x28]
mov rdx, rcx
mov qword [rsp + 0x20], rcx
call sym.imp.memmove
mov rcx, qword [rsp + 0x20]
jmp 0x4053da
mov rsi, qword [rsp]
mov rdi, qword [rsp + 0x18]
mov rdx, rcx
mov qword [rsp + 8], rcx
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x405053
mov rdi, qword [rsp + 0x20]
mov rdx, r8
mov rsi, r15
mov qword [rsp + 0x28], r8
call sym.imp.memmove
mov r8, qword [rsp + 0x28]
jmp 0x4050fb
mov rsi, qword [rsp]
mov rdi, qword [rsp + 0x28]
mov rdx, rcx
mov qword [rsp + 0x20], rcx
call sym.imp.memmove
mov rcx, qword [rsp + 0x20]
jmp 0x4052a2
mov rsi, qword [rsp]
mov rdi, qword [rsp + 0x10]
mov rdx, rcx
mov qword [rsp + 8], rcx
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x404fb3
mov rdi, qword [rsp + 0x40]
mov rbx, rax
lea rax, [rsp + 0x50]
cmp rdi, rax
je 0x4055b2
call sym.operatordelete
lea rdi, [rsp + 0x30]
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rdi, qword [rbx + 0x18800]
mov rbp, rax
cmp r14, rdi
je 0x4055d8
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
mov rbx, rax
jmp 0x4055b2
nop dword [rax]
push r12
push rbp
xor ebp, ebp
push rbx
sub rsp, 0x10
mov rax, qword fs:[0x28]
mov qword [rsp + 8], rax
xor eax, eax
nop word [rax + rax]
mov edi, 0x18828
call sym.operatornew
lea r12, [rax + 0x18810]
mov qword [rax + 0x18808], 0
mov byte [rax + 0x18810], 0
mov edi, 0x10e0
mov rbx, rax
mov qword [rax + 0x18800], r12
call sym.operatornew
lea rdx, [rax + 8]
mov byte [rax + 0x1098], 0
mov dword [rax + 0x109c], 0
mov byte [rax + 0x10a0], 0x20
mov dword [rax + 0x10a4], 0xa
mov rdi, rbx
mov qword [rax + 0x1088], rdx
lea rdx, [rax + 0x1088]
mov dword [rax + 0x10a8], 9
mov byte [rax + 0x10c8], 0x20
mov qword [rax + 0x10c0], 1
mov qword [rax + 0x1090], rdx
lea rdx, [rax + 0x10c8]
mov byte [rax + 0x10c9], 0
mov qword [rax + 0x10b0], 0x3b9aca00
mov qword [rax], 0x408548
mov qword [rax + 0x10b8], rdx
lea rdx, [rbx + 0x18800]
mov qword [rbx + 0x18820], rax
mov qword [rsp], rbx
mov qword [rax + 0x10d8], rdx
call sym.TestCase::solve
mov rax, qword [rsp]
mov edi, ebp
lea rsi, [rax + 0x18800]
call sym.writeAnswer
mov rbx, qword [rsp]
test rbx, rbx
je 0x405733
mov rdi, qword [rbx + 0x18820]
test rdi, rdi
je 0x405713
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x18800]
lea rax, [rbx + 0x18810]
cmp rdi, rax
je 0x40572b
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
add ebp, 1
cmp ebp, 0x64
jne 0x405610
call sym.imp.clock
pxor xmm0, xmm0
mov edi, str._n_nTest_time:
mov rsi, rsp
cvtsi2sd xmm0, rax
divsd xmm0, qword [rip + 0x2eab]
movsd qword [rsp], xmm0
call sym.writeln_charconst____15__double_
xor edi, edi
call sym.imp.exit
mov rdi, qword [rbx + 0x18800]
mov rbp, rax
cmp r12, rdi
je 0x405782
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
mov rbx, rax
mov rdi, rsp
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rdi, rbx
call sym.imp._Unwind_Resume
nop word cs:[rax + rax]
nop
ret
nop word cs:[rax + rax]
nop dword [rax]
mov rax, rdi
lea rdi, [rdi + 0x10]
mov rax, qword [rax + 0x10]
jmp qword [rax]
nop dword [rax]
jmp qword [rdi + 0x18]
nop word cs:[rax + rax]
nop dword [rax]
push r12
push rbp
push rbx
mov rbp, qword [rdi + 8]
mov rbx, qword [rdi]
cmp rbp, rbx
je 0x405816
mov r12, rdi
nop dword [rax + rax]
mov rdi, qword [rbx]
lea rax, [rbx + 0x10]
cmp rdi, rax
je 0x405809
call sym.operatordelete
add rbx, 0x20
cmp rbp, rbx
jne 0x4057f8
mov rbp, qword [r12]
test rbp, rbp
je 0x405830
pop rbx
mov rdi, rbp
pop rbp
pop r12
jmp sym.operatordelete
nop word [rax + rax]
pop rbx
pop rbp
pop r12
ret
nop word cs:[rax + rax]
nop
jmp sym.operatordelete
nop word cs:[rax + rax]
nop
jmp sym.operatordelete
nop word cs:[rax + rax]
nop
push rbx
mov rcx, qword [rdi + 0x10d8]
mov rbx, rdi
lea rdi, [rdi + 8]
mov edx, esi
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
pop rbx
jmp sym.imp.fflush
nop dword [rax + rax]
push rbp
push rbx
lea rbp, [rdi + 0x2a]
mov rbx, rdi
sub rsp, 8
cmp byte [rdi + 0x28], 0
mov qword [rdi + 8], rbp
mov byte [rdi + 0x2a], 0
jne 0x4058d0
mov rcx, qword [rdi + 0x20]
mov edx, 0x1000
mov rdi, rbp
mov esi, 1
call sym.imp.fread
add rbp, rax
mov qword [rbx + 0x10], rbp
add rsp, 8
pop rbx
pop rbp
ret
nop
mov rdx, qword [rdi + 0x20]
mov qword [rdi + 0x10], rbp
mov esi, 0x1000
mov rdi, rbp
call sym.imp.fgets
test rax, rax
je 0x4058c8
mov rax, qword [rbx + 0x10]
cmp byte [rax], 0
je 0x4058c8
nop dword [rax + rax]
add rax, 1
mov qword [rbx + 0x10], rax
cmp byte [rax], 0
jne 0x4058f8
jmp 0x4058c8
nop word [rax + rax]
mov rsi, qword [rsi + 8]
mov rdx, rdi
cmp rsi, str.St19_Sp_make_shared_tag
je 0x405935
xor eax, eax
cmp byte [rsi], 0x2a
je 0x405939
mov edi, str.St19_Sp_make_shared_tag
mov ecx, 0x18
repe cmpsb byte [rsi], byte ptr [rdi]
jne 0x405939
lea rax, [rdx + 0x10]
ret
nop dword [rax + rax]
test rdi, rdi
je 0x405960
mov rax, qword [rdi]
mov rax, qword [rax + 8]
cmp rax, sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::__Sp_counted_ptr_inplace
jne 0x405968
jmp sym.operatordelete
nop dword [rax]
ret
nop word [rax + rax]
jmp rax
nop word [rax + rax]
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
movabs rax, 0x7fffffffffffffff
sub rsp, 8
mov qword [rdi], 0x408548
mov rdx, qword [rdi + 0x1088]
mov rdi, qword [rdi + 0x10d8]
sub edx, ebp
sub rax, qword [rdi + 8]
cmp rdx, rax
ja 0x4059e7
mov rsi, rbp
add rbx, 0x10c8
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rdi, qword [rbx - 0x10]
mov qword [rbx - 0x40], rbp
mov qword [rbx - 0x10c8], 0x4084f8
cmp rdi, rbx
je 0x4059e0
add rsp, 8
pop rbx
pop rbp
jmp sym.operatordelete
nop dword [rax]
add rsp, 8
pop rbx
pop rbp
ret
mov edi, str.basic_string::append
call sym.std::__throw_length_error
nop word cs:[rax + rax]
nop dword [rax + rax]
push rbx
mov rbx, qword [rdi]
test rbx, rbx
je 0x405a38
cmp byte [rbx + 0x29], 0
mov qword [rbx], 0x4084e0
jne 0x405a20
mov rdi, rbx
pop rbx
jmp sym.operatordelete
nop
mov rdi, qword [rbx + 0x20]
call sym.imp.fclose
mov rdi, rbx
pop rbx
jmp sym.operatordelete
nop word [rax + rax]
pop rbx
ret
nop word [rax + rax]
mov edx, esi
lea rsi, [rdi + 8]
mov rdi, qword [rdi + 0x10d8]
movabs rax, 0x7fffffffffffffff
sub rax, qword [rdi + 8]
cmp rdx, rax
ja 0x405a65
jmp sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
push rax
mov edi, str.basic_string::append
call sym.std::__throw_length_error
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
movabs rax, 0x7fffffffffffffff
sub rsp, 8
mov qword [rdi], 0x408548
mov rdx, qword [rdi + 0x1088]
mov rdi, qword [rdi + 0x10d8]
sub edx, ebp
sub rax, qword [rdi + 8]
cmp rdx, rax
ja 0x405ae3
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rdi, qword [rbx + 0x10b8]
lea rax, [rbx + 0x10c8]
mov qword [rbx + 0x1088], rbp
mov qword [rbx], 0x4084f8
cmp rdi, rax
je 0x405ad5
call sym.operatordelete
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp sym.operatordelete
mov edi, str.basic_string::append
call sym.std::__throw_length_error
nop dword [rax]
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
mov esi, 1
sub rsp, 8
mov rdx, qword [rdi + 0x1088]
mov rcx, qword [rdi + 0x10d8]
mov qword [rdi], 0x408520
mov rdi, rbp
sub edx, ebp
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
cmp byte [rbx + 0x10e0], 0
mov qword [rbx + 0x1088], rbp
jne 0x405b70
mov rdi, qword [rbx + 0x10b8]
lea rax, [rbx + 0x10c8]
mov qword [rbx], 0x4084f8
cmp rdi, rax
je 0x405b5c
call sym.operatordelete
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp sym.operatordelete
nop word [rax + rax]
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fclose
jmp 0x405b3d
nop
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
mov esi, 1
sub rsp, 8
mov rdx, qword [rdi + 0x1088]
mov rcx, qword [rdi + 0x10d8]
mov qword [rdi], 0x408520
mov rdi, rbp
sub edx, ebp
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
cmp byte [rbx + 0x10e0], 0
mov qword [rbx + 0x1088], rbp
jne 0x405bf8
mov rdi, qword [rbx + 0x10b8]
mov qword [rbx], 0x4084f8
add rbx, 0x10c8
cmp rdi, rbx
je 0x405c10
add rsp, 8
pop rbx
pop rbp
jmp sym.operatordelete
nop word [rax + rax]
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fclose
jmp 0x405bcd
nop word cs:[rax + rax]
add rsp, 8
pop rbx
pop rbp
ret
nop word [rax + rax]
push rbp
push rbx
sub rsp, 8
mov rbx, qword [rdi]
test rbx, rbx
je 0x405cc0
mov rax, qword [rbx]
mov rax, qword [rax + 0x10]
cmp rax, 0x405af0
jne 0x405ce0
mov rdx, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rcx, qword [rbx + 0x10d8]
mov esi, 1
mov qword [rbx], 0x408520
mov rdi, rbp
sub edx, ebp
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
cmp byte [rbx + 0x10e0], 0
mov qword [rbx + 0x1088], rbp
jne 0x405cd0
mov rdi, qword [rbx + 0x10b8]
lea rax, [rbx + 0x10c8]
mov qword [rbx], 0x4084f8
cmp rdi, rax
je 0x405ca8
call sym.operatordelete
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp sym.operatordelete
nop word cs:[rax + rax]
add rsp, 8
pop rbx
pop rbp
ret
nop word [rax + rax]
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fclose
jmp 0x405c89
nop
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp rax
nop dword [rax + rax]
push rbx
mov rbx, qword [rdi + 0x10]
mov qword [rdi], 0x4084b8
test rbx, rbx
je 0x405d12
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x405d18
lock sub dword [rbx + 8], 1
je 0x405d40
pop rbx
ret
nop dword [rax]
mov eax, dword [rbx + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [rbx + 8], edx
jne 0x405d12
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, dword [rbx + 0xc]
lea edx, [rax - 1]
mov dword [rbx + 0xc], edx
jmp 0x405d53
nop word [rax + rax]
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [rbx + 0xc], eax
cmp eax, 1
jne 0x405d12
mov rax, qword [rbx]
mov rdi, rbx
pop rbx
mov rax, qword [rax + 0x18]
jmp rax
nop word cs:[rax + rax]
nop
push rbp
push rbx
mov rbp, rdi
sub rsp, 8
mov rbx, qword [rdi + 0x10]
mov qword [rdi], 0x4084b8
test rbx, rbx
je 0x405d9a
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x405db0
lock sub dword [rbx + 8], 1
je 0x405dd8
add rsp, 8
mov rdi, rbp
pop rbx
pop rbp
jmp sym.operatordelete
nop dword [rax + rax]
mov eax, dword [rbx + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [rbx + 8], edx
jne 0x405d9a
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, dword [rbx + 0xc]
lea edx, [rax - 1]
mov dword [rbx + 0xc], edx
jmp 0x405deb
nop word [rax + rax]
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [rbx + 0xc], eax
cmp eax, 1
jne 0x405d9a
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x18]
jmp 0x405d9a
nop dword [rax + rax]
push rbx
mov rbx, qword [rdi]
test rbx, rbx
je 0x405e40
mov rdi, qword [rbx + 0x18820]
test rdi, rdi
je 0x405e1b
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x18800]
lea rax, [rbx + 0x18810]
cmp rdi, rax
je 0x405e33
call sym.operatordelete
mov rdi, rbx
pop rbx
jmp sym.operatordelete
nop dword [rax]
pop rbx
ret
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
push r13
push r12
mov r12, rsi
push rbp
push rbx
mov rbx, rdi
sub rsp, 8
mov rdx, qword [rdi + 8]
jmp 0x405e93
nop word [rax + rax]
lea rdx, [rax + 1]
mov qword [rbx + 8], rdx
movzx ebp, byte [rax]
lea eax, [rbp - 9]
mov esi, ebp
cmp al, 4
setbe cl
cmp bpl, 0x20
sete al
or cl, al
mov r15d, ecx
je 0x405eb0
cmp qword [rbx + 0x10], rdx
mov rax, rdx
ja 0x405e70
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x405e70
nop word [rax + rax]
cmp bpl, 0x2d
mov ecx, ebp
je 0x405fd0
mov edi, dword [rbx + 0x18]
xor r13d, r13d
xor r14d, r14d
cmp edi, 0xa
ja 0x405f6a
sub esi, 0x30
xor r13d, r13d
xor r14d, r14d
movzx esi, sil
cmp esi, edi
jb 0x405f02
jmp 0x405f90
nop dword [rax]
lea rdx, [rcx + 1]
mov qword [rbx + 8], rdx
movzx ecx, byte [rcx]
lea esi, [rcx - 0x30]
movzx esi, sil
cmp esi, edi
jae 0x405f90
imul r14d, edi
add r13d, 1
cmp qword [rbx + 0x10], rdx
movsx esi, cl
mov rcx, rdx
lea r14d, [r14 + rsi - 0x30]
ja 0x405ee8
mov rdx, qword [rbx]
mov rdi, rbx
call qword [rdx]
mov rcx, qword [rbx + 8]
mov edi, dword [rbx + 0x18]
jmp 0x405ee8
nop dword [rax]
lea esi, [rcx - 0x61]
sub ecx, 0x57
cmp sil, 0x19
mov esi, ecx
cmova esi, edi
movsx ecx, sil
cmp edi, ecx
jbe 0x405f90
imul r14d, edi
add r13d, 1
add r14d, ecx
cmp qword [rbx + 0x10], rdx
jbe 0x405feb
lea rsi, [rdx + 1]
mov qword [rbx + 8], rsi
movzx ecx, byte [rdx]
mov rdx, rsi
lea esi, [rcx - 0x30]
cmp sil, 9
jbe 0x405f3f
lea esi, [rcx - 0x41]
cmp sil, 0x19
ja 0x405f30
lea esi, [rcx - 0x37]
movsx ecx, sil
cmp edi, ecx
ja 0x405f47
nop word [rax + rax]
sub rdx, 1
test r13d, r13d
mov qword [rbx + 8], rdx
je 0x405fb4
mov eax, r14d
mov r15d, 1
neg eax
cmp bpl, 0x2d
cmove r14d, eax
mov dword [r12], r14d
add rsp, 8
mov eax, r15d
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
cmp qword [rbx + 0x10], rdx
jbe 0x405fff
lea rdi, [rdx + 1]
mov qword [rbx + 8], rdi
movzx ecx, byte [rdx]
mov rdx, rdi
mov esi, ecx
jmp 0x405ebc
mov rdx, qword [rbx]
mov rdi, rbx
call qword [rdx]
mov rdx, qword [rbx + 8]
mov edi, dword [rbx + 0x18]
jmp 0x405f5c
mov rdx, qword [rbx]
mov rdi, rbx
call qword [rdx]
mov rdx, qword [rbx + 8]
jmp 0x405fd6
nop dword [rax]
sub rsp, 8
mov rdx, qword [rdi + 8]
mov rdi, qword [rdi]
cmp rdx, rdi
je 0x40603f
cmp qword [rdi], 0
jne 0x406055
mov rax, rdi
jmp 0x406036
nop dword [rax + rax]
cmp qword [rax], 0
jne 0x406055
add rax, 8
cmp rdx, rax
jne 0x406030
test rdi, rdi
je 0x406050
add rsp, 8
jmp sym.operatordelete
nop dword [rax]
add rsp, 8
ret
call sym.std::terminate
nop word [rax + rax]
push r15
push r14
mov r14, rdi
push r13
push r12
mov r12, rsi
push rbp
push rbx
sub rsp, 0x28
mov rbp, qword [rip + 0x20420d]
call sym.imp.strlen
mov r15, rax
mov r8d, eax
mov ebx, dword [rbp + 0x109c]
mov byte [rbp + 0x1098], 0
cmp eax, ebx
jb 0x406388
mov rcx, qword [rbp + 0x1088]
lea r13, [rbp + 0x1008]
mov ebx, r15d
mov rsi, qword [rbp + 0x1090]
lea rax, [rcx + rbx + 0x80]
cmp rsi, rax
jbe 0x4065b8
cmp r15d, 1
je 0x4064e0
test r15d, r15d
jne 0x406308
add rbx, rcx
mov qword [rbp + 0x1088], rbx
movsd xmm0, qword [r12]
movmskpd r14d, xmm0
and r14d, 1
je 0x4060fe
movsd xmm1, qword [rip + 0x24c6]
xorpd xmm0, xmm1
ucomisd xmm0, xmm0
jp 0x406670
movsd xmm1, qword [rip + 0x24c0]
andpd xmm1, xmm0
ucomisd xmm1, qword [rip + 0x24d4]
jbe 0x406230
lea r12, [rsi - 3]
mov byte [rsi - 1], 0x66
mov byte [rsi - 2], 0x6e
mov byte [rsi - 3], 0x49
test r14d, r14d
je 0x406141
mov byte [r12 - 1], 0x2d
sub r12, 1
cmp byte [rbp + 0x1098], 0
jne 0x406328
mov rcx, qword [rbp + 0x1088]
mov rax, qword [rbp + 0x1090]
mov edx, dword [rbp + 0x109c]
mov rbx, rax
mov byte [rbp + 0x1098], 1
sub rbx, r12
cmp ebx, edx
jb 0x406568
xor edi, edi
test rbx, rbx
je 0x406192
mov rdi, rcx
mov rdx, rbx
mov rsi, r12
call sym.imp.memmove
mov rdi, rbx
mov rcx, rax
add rdi, rcx
cmp rdi, r13
mov qword [rbp + 0x1088], rdi
jae 0x406538
lea rax, [rdi + 1]
mov byte [rbp + 0x1098], 0
mov qword [rbp + 0x1088], rax
mov byte [rdi], 0xa
cmp qword [rbp + 0x1088], r13
jae 0x406500
mov rbx, qword [rip + 0x2040ba]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x4064b0
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
movsd xmm2, qword [rip + 0x23c0]
ucomisd xmm0, xmm2
jae 0x406490
cvttsd2si rbx, xmm0
test rbx, rbx
mov rdx, qword [rbp + 0x10b0]
js 0x406688
pxor xmm1, xmm1
cvtsi2sd xmm1, rbx
test rdx, rdx
subsd xmm0, xmm1
js 0x4066b0
pxor xmm1, xmm1
cvtsi2sd xmm1, rdx
mulsd xmm0, xmm1
addsd xmm0, qword [rip + 0x237e]
ucomisd xmm0, xmm2
jae 0x406470
cvttsd2si rcx, xmm0
cmp rdx, rcx
ja 0x4063f0
mov edx, dword [rbp + 0x10a8]
mov r12, rsi
add rbx, 1
sub r12, rdx
test edx, edx
jne 0x406957
test rbx, rbx
je 0x406720
mov eax, dword [rbp + 0x10a4]
movabs rcx, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x406741
nop dword [rax]
mov rax, rbx
sub r12, 1
mul rcx
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rbx, rax
add ebx, 0x30
test rdx, rdx
mov byte [r12], bl
mov rbx, rdx
jne 0x4062d8
jmp 0x406132
nop dword [rax]
mov rsi, r14
mov rdi, rcx
mov rdx, rbx
call sym.imp.memmove
mov rsi, qword [rbp + 0x1090]
mov rcx, rax
jmp 0x4060d7
nop dword [rax]
mov rdx, qword [rbp + 0x10c0]
mov rcx, qword [rbp + 0x1088]
mov rax, qword [rbp + 0x1090]
mov r14, qword [rbp + 0x10b8]
mov byte [rbp + 0x1098], 0
mov ebx, edx
mov r15d, edx
lea rsi, [rcx + rbx + 0x80]
cmp rax, rsi
jbe 0x4067a7
cmp edx, 1
je 0x4066f8
test edx, edx
jne 0x4064c0
add rcx, rbx
mov qword [rbp + 0x1088], rcx
jmp 0x40615c
nop dword [rax]
mov rdi, qword [rbp + 0x1088]
sub ebx, eax
mov edx, ebx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x406871
cmp ebx, 1
je 0x4066d8
movzx esi, byte [rbp + 0x10a0]
lea rcx, [rdi + rdx]
mov dword [rsp + 8], r15d
lea r13, [rbp + 0x1008]
mov qword [rsp], rcx
call sym.imp.memset
mov rcx, qword [rsp]
mov r8d, dword [rsp + 8]
mov qword [rbp + 0x1088], rcx
jmp 0x4060a9
nop word cs:[rax + rax]
mov edx, dword [rbp + 0x10a8]
mov r12, rsi
sub r12, rdx
test edx, edx
je 0x4062b2
test rcx, rcx
je 0x406957
mov eax, dword [rbp + 0x10a4]
movabs rdi, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x406964
nop word cs:[rax + rax]
mov rax, rcx
sub rsi, 1
mul rdi
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rcx, rax
add ecx, 0x30
test rdx, rdx
mov byte [rsi], cl
mov rcx, rdx
jne 0x406430
sub rsi, r12
mov rdx, rsi
jne 0x40672f
mov byte [r12 - 1], 0x2e
sub r12, 1
jmp 0x4062b2
subsd xmm0, xmm2
movabs rax, 0x8000000000000000
cvttsd2si rcx, xmm0
xor rcx, rax
jmp 0x406291
nop dword [rax + rax]
movapd xmm1, xmm0
movabs rax, 0x8000000000000000
subsd xmm1, xmm2
cvttsd2si rbx, xmm1
xor rbx, rax
jmp 0x406247
nop
mov rdi, rbx
call rax
jmp 0x406210
nop word [rax + rax]
mov rdi, rcx
mov rdx, rbx
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
mov rax, qword [rbp + 0x1090]
jmp 0x406372
nop dword [rax]
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r14]
mov byte [rcx], al
mov rsi, qword [rbp + 0x1090]
jmp 0x4060e1
nop dword [rax]
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor ebx, ebx
call qword [rax]
mov rax, qword [rbp + 0x1088]
lea rcx, [rbp + 8]
sub rax, r13
jne 0x406858
add rbx, rcx
mov qword [rbp + 0x1088], rbx
jmp 0x4061c7
nop dword [rax + rax]
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor ebx, ebx
call qword [rax]
mov rax, qword [rbp + 0x1088]
lea rcx, [rbp + 8]
sub rax, r13
jne 0x40683f
lea rdi, [rcx + rbx]
jmp 0x4061a5
nop dword [rax]
sub edx, ebx
mov edx, edx
lea rsi, [rcx + rdx + 0x80]
mov rbx, rdx
cmp rax, rsi
jbe 0x4069a6
cmp edx, 1
je 0x406937
movzx esi, byte [rbp + 0x10a0]
lea rbx, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [rbp + 0x1088], rbx
mov rcx, rbx
mov rbx, qword [rbp + 0x1090]
sub rbx, r12
jmp 0x406177
nop dword [rax]
lea rax, [rbp + 8]
mov ebx, r13d
mov r15, r14
sub ebx, ecx
mov qword [rsp + 8], rax
jmp 0x4065ec
nop dword [rax + rax]
add rcx, r14
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jae 0x406622
sub r8d, ebx
je 0x406660
add r15, r14
mov ebx, 0x1000
cmp r8d, ebx
cmovbe ebx, r8d
test ebx, ebx
mov r14d, ebx
je 0x4065d0
mov rdi, rcx
mov rdx, r14
mov rsi, r15
mov dword [rsp], r8d
call sym.imp.memmove
mov rcx, rax
mov r8d, dword [rsp]
add rcx, r14
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jb 0x4065df
mov rax, qword [rbp]
mov dword [rsp], r8d
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
mov r8d, dword [rsp]
sub rax, r13
jne 0x406780
add rcx, qword [rsp + 8]
sub r8d, ebx
mov qword [rbp + 0x1088], rcx
jne 0x4065e4
nop dword [rax + rax]
mov rsi, qword [rbp + 0x1090]
jmp 0x4060e1
nop dword [rax]
mov byte [rsi - 1], 0x4e
mov byte [rsi - 2], 0x61
lea r12, [rsi - 3]
mov byte [rsi - 3], 0x4e
jmp 0x406132
nop dword [rax]
mov rax, rbx
mov rcx, rbx
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x406260
nop dword [rax]
mov rax, rdx
mov rcx, rdx
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x406276
nop dword [rax]
lea rax, [rdi + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rdi], al
jmp 0x40609b
nop dword [rax]
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r14]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
mov rax, qword [rbp + 0x1090]
jmp 0x40615c
nop dword [rax]
mov byte [r12 - 1], 0x30
sub r12, 1
jmp 0x406132
mov esi, 0x30
mov rdi, r12
call sym.imp.memset
jmp 0x406461
mov ecx, eax
nop dword [rax + rax]
mov rax, rbx
xor edx, edx
sub r12, 1
div rcx
lea ecx, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, ecx
xor edx, edx
mov byte [r12], al
mov ecx, dword [rbp + 0x10a4]
mov rax, rbx
div rcx
test rax, rax
mov rbx, rax
jne 0x406748
jmp 0x406132
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r13
mov dword [rsp + 0x10], r8d
mov qword [rsp], rax
call sym.imp.memmove
mov r8d, dword [rsp + 0x10]
mov rcx, qword [rsp]
jmp 0x40664a
lea rax, [rbp + 8]
mov ebx, r13d
sub ebx, ecx
mov qword [rsp + 8], rax
jmp 0x4067e0
nop word [rax + rax]
add rcx, r9
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jae 0x406809
sub r15d, ebx
je 0x406155
add r14, r9
mov ebx, 0x1000
cmp r15d, ebx
cmovbe ebx, r15d
test ebx, ebx
mov r9d, ebx
je 0x4067c0
mov rdx, r9
mov rdi, rcx
mov rsi, r14
mov qword [rsp], r9
call sym.imp.memmove
mov r9, qword [rsp]
mov rcx, rax
jmp 0x4067c0
mov rax, qword [rbp]
mov qword [rsp], r9
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
mov r9, qword [rsp]
sub rax, r13
jne 0x406a21
add rcx, qword [rsp + 8]
mov qword [rbp + 0x1088], rcx
jmp 0x4067cf
mov rdi, rcx
mov rdx, rax
mov rsi, r13
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x40655c
mov rdi, rcx
mov rdx, rax
mov rsi, r13
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x406524
lea r10, [rbp + 0x1008]
mov rcx, rdi
mov eax, r10d
sub eax, edi
lea rdi, [rbp + 8]
mov qword [rsp + 0x18], rdi
jmp 0x4068ad
nop dword [rax + rax]
cmp r10, r11
mov qword [rbp + 0x1088], r11
mov rcx, r11
jbe 0x4068ec
sub ebx, r13d
mov eax, 0x1000
je 0x40692f
cmp ebx, eax
cmovbe eax, ebx
mov edx, eax
test edx, edx
mov r13, rdx
lea r11, [rcx + rdx]
je 0x406890
movzx esi, byte [rbp + 0x10a0]
mov rdi, rcx
mov qword [rsp + 0x10], r11
mov qword [rsp + 8], r10
mov dword [rsp], r8d
call sym.imp.memset
mov r11, qword [rsp + 0x10]
mov r10, qword [rsp + 8]
mov r8d, dword [rsp]
jmp 0x406890
mov rax, qword [rbp]
mov qword [rsp + 8], r10
mov esi, 0x1000
mov dword [rsp], r8d
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
mov r10, qword [rsp + 8]
xor ecx, ecx
mov r8d, dword [rsp]
sub rax, r10
jne 0x406a48
add rcx, qword [rsp + 0x18]
mov qword [rbp + 0x1088], rcx
jmp 0x40689f
mov r13, r10
jmp 0x4060a9
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
jmp 0x4065a6
mov byte [rsi - 1], 0x30
sub rsi, 1
jmp 0x406455
mov edi, eax
nop word cs:[rax + rax]
mov rax, rcx
xor edx, edx
sub rsi, 1
div rdi
lea edi, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov edi, dword [rbp + 0x10a4]
mov rax, rcx
div rdi
test rax, rax
mov rcx, rax
jne 0x406970
jmp 0x406455
lea rdi, [rbp + 8]
mov eax, r13d
sub eax, ecx
mov qword [rsp], rdi
jmp 0x4069d5
nop dword [rax]
cmp r14, r13
mov qword [rbp + 0x1088], r14
mov rcx, r14
jae 0x4069f8
sub ebx, r15d
mov eax, 0x1000
je 0x4065a6
cmp ebx, eax
cmovbe eax, ebx
mov edx, eax
test edx, edx
mov r15, rdx
lea r14, [rcx + rdx]
je 0x4069b8
movzx esi, byte [rbp + 0x10a0]
mov rdi, rcx
call sym.imp.memset
jmp 0x4069b8
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
sub rax, r13
jne 0x406a79
add rcx, qword [rsp]
mov qword [rbp + 0x1088], rcx
jmp 0x4069c7
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 0x10], r9
mov qword [rsp], rax
call sym.imp.memmove
mov r9, qword [rsp + 0x10]
mov rcx, qword [rsp]
jmp 0x406831
mov rdi, qword [rsp + 0x18]
mov rsi, r10
mov rdx, rax
mov dword [rsp + 0x10], r8d
mov qword [rsp], r10
mov qword [rsp + 8], rax
call sym.imp.memmove
mov r8d, dword [rsp + 0x10]
mov rcx, qword [rsp + 8]
mov r10, qword [rsp]
jmp 0x40691e
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x406a14
nop word cs:[rax + rax]
nop
mov eax, sym.imp.__pthread_key_create
push rbx
mov rbx, rdi
test rax, rax
je 0x406ac0
lock sub dword [rdi + 8], 1
je 0x406ae0
pop rbx
ret
nop word [rax + rax]
mov eax, dword [rdi + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [rdi + 8], edx
jne 0x406ab5
mov rax, qword [rdi]
call qword [rax + 0x10]
mov eax, dword [rbx + 0xc]
lea edx, [rax - 1]
mov dword [rbx + 0xc], edx
jmp 0x406af0
nop
mov rax, qword [rdi]
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [rbx + 0xc], eax
cmp eax, 1
jne 0x406ab5
mov rax, qword [rbx]
mov rdi, rbx
pop rbx
mov rax, qword [rax + 0x18]
jmp rax
nop word cs:[rax + rax]
nop dword [rax]
test rsi, rsi
je 0x406cfc
mov r8, qword [rdi + 8]
mov rax, qword [rdi + 0x10]
sub rax, r8
sar rax, 5
cmp rsi, rax
ja 0x406b70
mov rdx, rsi
mov rax, r8
nop dword [rax + rax]
test rax, rax
je 0x406b50
lea rcx, [rax + 0x10]
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
mov qword [rax], rcx
add rax, 0x20
sub rdx, 1
jne 0x406b38
shl rsi, 5
add rsi, r8
mov qword [rdi + 8], rsi
ret
nop word cs:[rax + rax]
push r15
push r14
mov rax, r8
push r13
push r12
movabs rcx, 0x7ffffffffffffff
push rbp
push rbx
mov rdx, rcx
mov r14, rsi
mov rbx, rdi
sub rsp, 8
mov r15, qword [rdi]
sub rax, r15
sar rax, 5
sub rdx, rax
cmp rsi, rdx
ja 0x406d3b
cmp rsi, rax
mov rdx, rax
cmovae rdx, rsi
add rax, rdx
jb 0x406d00
cmp rax, rcx
ja 0x406d00
xor r12d, r12d
xor ebp, ebp
test rax, rax
mov rsi, r8
jne 0x406d21
nop word [rax + rax]
cmp rsi, r15
je 0x406d30
lea rdx, [r15 + 0x20]
lea rax, [r15 + 0x10]
sub rsi, rdx
mov rdx, rbp
mov rdi, rsi
lea rsi, [r15 + rsi + 0x30]
shr rdi, 5
jmp 0x406c36
nop dword [rax]
mov qword [rdx], rcx
mov rcx, qword [rax]
mov qword [rdx + 0x10], rcx
mov rcx, qword [rax - 8]
mov qword [rdx + 8], rcx
mov qword [rax - 0x10], rax
mov qword [rax - 8], 0
mov byte [rax], 0
add rax, 0x20
add rdx, 0x20
cmp rax, rsi
je 0x406c60
test rdx, rdx
je 0x406c29
lea rcx, [rdx + 0x10]
mov qword [rdx], rcx
mov rcx, qword [rax - 0x10]
cmp rcx, rax
jne 0x406c08
mov r9, qword [rax]
mov r10, qword [rax + 8]
mov qword [rdx + 0x10], r9
mov qword [rdx + 0x18], r10
jmp 0x406c12
nop dword [rax]
add rdi, 1
mov r15, qword [rbx + 8]
mov r13, qword [rbx]
shl rdi, 5
add rdi, rbp
mov rax, rdi
mov rdx, r14
nop dword [rax + rax]
test rax, rax
je 0x406c98
lea rcx, [rax + 0x10]
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
mov qword [rax], rcx
add rax, 0x20
sub rdx, 1
jne 0x406c80
mov rsi, r14
shl rsi, 5
cmp r13, r15
lea r14, [rdi + rsi]
je 0x406cd6
nop word [rax + rax]
mov rdi, qword [r13]
lea rax, [r13 + 0x10]
cmp rdi, rax
je 0x406cca
call sym.operatordelete
add r13, 0x20
cmp r13, r15
jne 0x406cb8
mov r15, qword [rbx]
test r15, r15
je 0x406ce3
mov rdi, r15
call sym.operatordelete
mov qword [rbx], rbp
mov qword [rbx + 8], r14
mov qword [rbx + 0x10], r12
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
mov r12, -0x20
mov rdi, r12
call sym.operatornew
mov rsi, qword [rbx + 8]
mov rbp, rax
mov r15, qword [rbx]
add r12, rax
jmp 0x406be0
shl rax, 5
mov r12, rax
jmp 0x406d07
nop word [rax + rax]
mov r13, r15
mov rdi, rbp
jmp 0x406c72
mov edi, str.vector::_M_default_append
call sym.std::__throw_length_error
nop word cs:[rax + rax]
nop
push r14
push r13
mov r14, rsi
push r12
push rbp
push rbx
mov rbx, rdi
sub rsp, 0x20
mov rcx, qword [rbx + 8]
mov rdi, qword [rdi]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x18], rax
xor eax, eax
mov r13, rcx
sub r13, rdi
mov r12, r13
sar r12, 3
test r12, r12
je 0x406f00
lea rax, [r12 + r12]
cmp r12, rax
jbe 0x406fb6
mov r12, -8
mov rdi, r12
call sym.operatornew
mov rcx, qword [rbx + 8]
mov rdi, qword [rbx]
mov rbp, rax
mov r13, rcx
sub r13, rdi
add r13, rbp
je 0x406e4f
mov qword [r13], 0
mov edi, 0x30
call sym.operatornew
lea rdx, [rax + 0x10]
mov dword [rax + 8], 1
mov dword [rax + 0xc], 1
mov qword [rax], 0x408598
mov qword [rax + 0x18], 0
mov rsi, rsp
mov qword [rsp], rdx
mov qword [rax + 0x20], 0
mov edx, sym.imp.pthread_create
mov qword [rax + 0x10], 0x408570
mov qword [rax + 0x28], r14
mov rdi, r13
mov qword [rsp + 8], rax
call sym.std::thread::_M_start_thread
mov r13, qword [rsp + 8]
test r13, r13
je 0x406e48
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x406f38
lock sub dword [r13 + 8], 1
je 0x406f0b
mov rcx, qword [rbx + 8]
mov rdi, qword [rbx]
cmp rcx, rdi
je 0x406f63
mov rdx, rbp
mov rax, rdi
nop
test rdx, rdx
je 0x406e79
mov qword [rdx], 0
mov rsi, qword [rax]
mov qword [rdx], rsi
mov qword [rax], 0
add rax, 8
add rdx, 8
cmp rax, rcx
jne 0x406e60
lea rax, [rdi + 8]
mov rsi, rcx
sub rsi, rax
mov rax, rsi
shr rax, 3
cmp qword [rdi], 0
lea r13, [rbp + rax*8 + 0x10]
jne 0x406f79
mov rax, rdi
jmp 0x406eba
nop dword [rax + rax]
cmp qword [rax], 0
jne 0x406f79
add rax, 8
cmp rax, rcx
jne 0x406eb0
test rdi, rdi
je 0x406ecd
call sym.operatordelete
mov qword [rbx], rbp
add rbp, r12
mov qword [rbx + 8], r13
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
mov qword [rbx + 0x10], rbp
jne 0x406f83
add rsp, 0x20
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax]
mov r12d, 8
jmp 0x406da3
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [r13 + 0xc], eax
cmp eax, 1
jne 0x406e48
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x18]
jmp 0x406e48
mov eax, dword [r13 + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [r13 + 8], edx
jne 0x406e48
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x10]
mov eax, dword [r13 + 0xc]
lea edx, [rax - 1]
mov dword [r13 + 0xc], edx
jmp 0x406f20
lea r13, [rbp + 8]
jmp 0x406ec3
mov rax, qword [rbx + 8]
sub rax, qword [rbx]
cmp qword [rax], 0
je 0x406faf
call sym.std::terminate
mov r12, rax
jmp 0x406f88
call sym.imp.__stack_chk_fail
mov rdi, qword [rsp + 8]
test rdi, rdi
je 0x406f97
call sym.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_::_M_release
mov rax, r12
mov rdi, rax
call sym.imp.__cxa_begin_catch
test rbp, rbp
je 0x406f6c
mov rdi, rbp
call sym.operatordelete
call sym.imp.__cxa_rethrow
jmp 0x406f9a
movabs rdx, 0x1fffffffffffffff
cmp rax, rdx
ja 0x406d9c
test rax, rax
jne 0x406fdd
xor r12d, r12d
xor ebp, ebp
jmp 0x406dbb
mov rbx, rax
jmp 0x406fe6
shl r12, 4
jmp 0x406da3
call sym.imp.__cxa_end_catch
mov rdi, rbx
call sym.imp._Unwind_Resume
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
mov r15, rdx
push r13
push r12
mov r14, rsi
push rbp
push rbx
mov rbx, rdi
sub rsp, 8
mov r8, qword [rdi + 8]
mov r9, qword [rdi]
mov rcx, r8
sub rcx, r9
mov rax, rcx
sar rax, 4
test rax, rax
je 0x4070e8
lea rdx, [rax + rax]
cmp rax, rdx
jbe 0x4070f2
mov rbp, -0x10
mov rdi, rbp
call sym.operatornew
mov r8, qword [rbx + 8]
mov r9, qword [rbx]
lea r13, [rax + 0x10]
mov r12, rax
add rbp, rax
mov rcx, r8
mov rdi, r9
sub rcx, r9
add rcx, r12
je 0x40707e
movsd xmm0, qword [r14]
mov eax, dword [r15]
movsd qword [rcx], xmm0
mov dword [rcx + 8], eax
cmp r8, rdi
je 0x4070c0
mov rdx, rdi
mov rcx, r12
nop dword [rax]
test rcx, rcx
je 0x4070a3
mov r9, qword [rdx]
mov r10, qword [rdx + 8]
mov qword [rcx], r9
mov qword [rcx + 8], r10
add rdx, 0x10
add rcx, 0x10
cmp rdx, r8
jne 0x407090
lea rax, [rdi + 0x10]
sub rdx, rax
and rdx, 0xfffffffffffffff0
lea r13, [r12 + rdx + 0x20]
test rdi, rdi
je 0x4070ca
call sym.operatordelete
mov qword [rbx], r12
mov qword [rbx + 8], r13
mov qword [rbx + 0x10], rbp
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
mov ebp, 0x10
jmp 0x407048
movabs rsi, 0xfffffffffffffff
cmp rdx, rsi
ja 0x407041
test rdx, rdx
jne 0x40711d
mov rdi, r9
mov r13d, 0x10
xor ebp, ebp
xor r12d, r12d
jmp 0x40706a
shl rax, 5
mov rbp, rax
jmp 0x407048
nop dword [rax]
lea rax, [rdx - 1]
push r12
push rbp
mov r8, rsi
push rbx
mov rbp, rax
shr rbp, 0x3f
add rbp, rax
sar rbp, 1
cmp rsi, rbp
jl 0x407174
jmp 0x4072a8
nop word [rax + rax]
mov ebx, dword [r10 + 8]
shl r8, 4
add r8, rdi
cmp rax, rbp
movsd qword [r8], xmm1
mov dword [r8 + 8], ebx
jge 0x4071d0
mov r8, rax
lea r9, [r8 + 1]
lea r11, [r9 + r9]
shl r9, 5
add r9, rdi
lea rax, [r11 - 1]
movsd xmm2, qword [r9]
mov r10, rax
shl r10, 4
add r10, rdi
movsd xmm1, qword [r10]
ucomisd xmm2, xmm1
ja 0x407158
ucomisd xmm1, xmm2
ja 0x4071c0
mov r12d, dword [r10 + 8]
mov ebx, dword [r9 + 8]
cmp ebx, r12d
jle 0x4071c4
mov ebx, r12d
jmp 0x40715c
nop dword [rax]
mov ebx, dword [r9 + 8]
mov r10, r9
movapd xmm1, xmm2
mov rax, r11
jmp 0x40715c
test dl, 1
jne 0x4071ef
sub rdx, 2
mov r8, rdx
shr r8, 0x3f
add rdx, r8
sar rdx, 1
cmp rdx, rax
je 0x407280
cmp rax, rsi
jle 0x407233
lea rdx, [rax - 1]
mov r8, rdx
shr r8, 0x3f
add r8, rdx
sar r8, 1
nop dword [rax]
mov r10, r8
shl r10, 4
add r10, rdi
movsd xmm1, qword [r10]
ucomisd xmm1, xmm0
ja 0x407248
ucomisd xmm0, xmm1
ja 0x40722b
mov edx, dword [r10 + 8]
cmp ecx, edx
jl 0x40724c
shl rax, 4
lea r10, [rdi + rax]
movsd qword [r10], xmm0
mov dword [r10 + 8], ecx
pop rbx
pop rbp
pop r12
ret
nop dword [rax]
mov edx, dword [r10 + 8]
shl rax, 4
add rax, rdi
mov dword [rax + 8], edx
lea rdx, [r8 - 1]
movsd qword [rax], xmm1
mov rax, rdx
shr rax, 0x3f
add rdx, rax
mov rax, r8
sar rdx, 1
cmp rsi, r8
jge 0x407233
mov r8, rdx
jmp 0x407208
nop dword [rax + rax]
lea rax, [rax + rax + 1]
mov rdx, rax
shl rdx, 4
add rdx, rdi
mov r8d, dword [rdx + 8]
movsd xmm1, qword [rdx]
movsd qword [r10], xmm1
mov dword [r10 + 8], r8d
mov r10, rdx
jmp 0x4071ef
mov rax, rsi
shl rax, 4
test dl, 1
lea r10, [rdi + rax]
mov rax, rsi
je 0x4071d5
jmp 0x407233
nop word cs:[rax + rax]
nop
push r15
push r14
push r13
push r12
mov r12, rdi
push rbp
push rbx
sub rsp, 0x88
mov r11d, dword [rdi]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x78], rax
xor eax, eax
test r11d, r11d
jle 0x4073a1
lea eax, [r11 - 1]
lea r14, [rdi + 0x380]
xor r10d, r10d
xor r9d, r9d
lea r13, [rax + 1]
lea rbx, [rax*8 + 0x388]
imul rbp, r13, -0x378
mov rsi, r14
xor r8d, r8d
nop word [rax + rax]
mov rdi, rbx
mov rax, rsi
sub rdi, r8
add rdi, r12
jmp 0x40734f
nop
cmp rcx, -1
je 0x407372
add rax, 8
cmp rax, rdi
je 0x40737e
mov rcx, qword [rsi + r9*8]
cmp rcx, -1
je 0x407346
lea rdx, [r8 + rax]
mov rdx, qword [rdx + r10]
cmp rdx, -1
je 0x407346
add rdx, rcx
mov rcx, qword [rax]
cmp rdx, rcx
jge 0x407340
mov qword [rax], rdx
add rax, 8
cmp rax, rdi
jne 0x40734f
sub r8, 0x378
add rsi, 0x378
cmp r8, rbp
jne 0x407330
add r9, 1
add r10, 0x378
cmp r13, r9
jne 0x407324
mov eax, dword [r12 + 4]
test eax, eax
jle 0x407e18
lea rbx, [r12 + 0x18644]
sub eax, 1
lea rax, [r12 + rax*4 + 0x18648]
mov qword [rsp + 0x18], rbx
movsxd rbx, r11d
test rbx, rbx
mov qword [rsp + 0x20], rax
je 0x407898
movabs rax, 0x1fffffffffffffff
cmp rbx, rax
ja 0x407ea6
lea rdi, [rbx*8]
call sym.operatornew
mov r15, rax
shl rax, 0x3c
shr rax, 0x3f
cmp rax, rbx
cmova rax, rbx
cmp rbx, 6
ja 0x407916
movsd xmm5, qword [rip + 0x11f5]
cmp rbx, 1
lea rsi, [r15 + 8]
movsd qword [r15], xmm5
je 0x407c1c
cmp rbx, 2
movsd qword [r15 + 8], xmm5
lea rsi, [r15 + 0x10]
je 0x407c30
cmp rbx, 3
movsd qword [r15 + 0x10], xmm5
lea rsi, [r15 + 0x18]
je 0x407c26
cmp rbx, 4
movsd qword [r15 + 0x18], xmm5
lea rsi, [r15 + 0x20]
je 0x407c59
cmp rbx, 5
movsd qword [r15 + 0x20], xmm5
lea rsi, [r15 + 0x28]
je 0x407c4f
movsd qword [r15 + 0x28], xmm5
lea rsi, [r15 + 0x30]
mov rax, rbx
cmp rbx, rax
je 0x4074b8
sub rbx, rax
lea rcx, [rbx - 2]
shr rcx, 1
add rcx, 1
cmp rbx, 1
lea rdi, [rcx + rcx]
jne 0x407931
movsd xmm4, qword [rip + 0x115c]
movsd qword [rsi], xmm4
mov rax, qword [rsp + 0x18]
lea rdx, [rsp + 0x40]
lea rdi, [rsp + 0x50]
mov eax, dword [rax - 0x1bc]
mov dword [rsp + 8], eax
sub eax, 1
mov dword [rsp + 0x40], eax
cdqe
lea rsi, [r15 + rax*8]
mov qword [rsi], 0
mov qword [rsp + 0x50], 0
mov qword [rsp + 0x58], 0
mov qword [rsp + 0x60], 0
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_M_emplace_back_aux_double__int__
mov r9, qword [rsp + 0x58]
mov rdi, qword [rsp + 0x50]
mov rdx, r9
movsd xmm1, qword [r9 - 0x10]
sub rdx, rdi
mov r8d, dword [r9 - 8]
sar rdx, 4
lea rax, [rdx - 1]
test rax, rax
jle 0x40756a
sub rdx, 2
mov rsi, rdx
shr rsi, 0x3f
add rdx, rsi
mov rsi, rdx
sar rsi, 1
mov rcx, rsi
shl rcx, 4
add rcx, rdi
movsd xmm0, qword [rcx]
ucomisd xmm0, xmm1
ja 0x4078a0
ucomisd xmm1, xmm0
ja 0x40756a
mov edx, dword [rcx + 8]
cmp edx, r8d
jg 0x4078a3
shl rax, 4
lea rcx, [rdi + rax]
cmp rdi, r9
movsd qword [rcx], xmm1
mov dword [rcx + 8], r8d
je 0x40776e
nop dword [rax + rax]
mov rax, r9
movsd xmm1, qword [rdi]
sub rax, rdi
mov ebx, dword [rdi + 8]
cmp rax, 0x1f
jle 0x4075e3
mov rax, qword [r9 - 0x10]
lea rdx, [r9 - 0x10]
movsd qword [rsp + 0x10], xmm1
mov rcx, qword [r9 - 8]
sub rsp, 8
movsd qword [r9 - 0x10], xmm1
mov dword [r9 - 8], ebx
sub rdx, rdi
xor esi, esi
mov qword [rsp + 0x10], rax
sar rdx, 4
movsd xmm0, qword [rsp + 0x10]
push 0
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
mov r9, qword [rsp + 0x68]
pop rax
pop rdx
movsd xmm1, qword [rsp + 0x10]
movsxd rax, ebx
sub r9, 0x10
lea r14, [r15 + rax*8]
mov qword [rsp + 0x58], r9
ucomisd xmm1, qword [r14]
ja 0x407760
mov r13d, dword [r12]
mov dword [rsp + 0x44], 0
test r13d, r13d
jle 0x407760
mov rdx, rax
mov rbx, rax
xor esi, esi
shl rdx, 4
shl rbx, 7
lea rbp, [r12 + rax*4]
sub rbx, rdx
sub rbx, rax
jmp 0x407644
nop
mov esi, dword [rsp + 0x44]
add esi, 1
cmp r13d, esi
mov dword [rsp + 0x44], esi
jle 0x407760
movsxd rdx, esi
lea rax, [rdx + rbx + 0x70]
mov rax, qword [r12 + rax*8]
cmp rax, -1
je 0x407634
movsxd rcx, dword [rbp + 8]
cmp rax, rcx
jg 0x407634
pxor xmm0, xmm0
pxor xmm1, xmm1
cvtsi2sd xmm0, rax
lea rax, [r15 + rdx*8]
cvtsi2sd xmm1, dword [rbp + 0x1c4]
divsd xmm0, xmm1
addsd xmm0, qword [r14]
movsd qword [rsp + 0x48], xmm0
movsd xmm1, qword [rax]
ucomisd xmm1, xmm0
jbe 0x407630
cmp qword [rsp + 0x60], r9
movsd qword [rax], xmm0
je 0x4078ee
test r9, r9
je 0x4078d9
movsd xmm1, qword [rsp + 0x48]
mov dword [r9 + 8], esi
movsd qword [r9], xmm1
add r9, 0x10
mov qword [rsp + 0x58], r9
mov r8, qword [rsp + 0x50]
mov rdx, r9
sub rdx, r8
sar rdx, 4
lea rax, [rdx - 1]
test rax, rax
jle 0x407711
sub rdx, 2
mov rdi, rdx
shr rdi, 0x3f
add rdi, rdx
sar rdi, 1
nop word [rax + rax]
mov rdx, rdi
shl rdx, 4
add rdx, r8
movsd xmm0, qword [rdx]
ucomisd xmm0, xmm1
ja 0x407728
ucomisd xmm1, xmm0
ja 0x407711
mov ecx, dword [rdx + 8]
cmp ecx, esi
jg 0x40772b
shl rax, 4
lea rdx, [r8 + rax]
movsd qword [rdx], xmm1
mov dword [rdx + 8], esi
jmp 0x407630
nop dword [rax]
mov ecx, dword [rdx + 8]
shl rax, 4
add rax, r8
mov dword [rax + 8], ecx
movsd qword [rax], xmm0
lea rax, [rdi - 1]
mov rcx, rax
shr rcx, 0x3f
add rax, rcx
sar rax, 1
test rdi, rdi
mov rcx, rax
mov rax, rdi
jle 0x407719
mov rdi, rcx
jmp 0x4076f0
nop word [rax + rax]
mov rdi, qword [rsp + 0x50]
cmp rdi, r9
jne 0x407588
mov rax, qword [rsp + 0x18]
mov rbp, qword [r12 + 0x18820]
mov eax, dword [rax]
mov rsi, qword [rbp + 0x1090]
mov dword [rsp + 8], eax
sub eax, 1
cdqe
movsd xmm0, qword [r15 + rax*8]
movmskpd r14d, xmm0
and r14d, 1
je 0x4077a6
xorpd xmm0, xmmword [rip + 0xe1a]
ucomisd xmm0, xmm0
jp 0x407c3a
movapd xmm1, xmm0
andpd xmm1, xmmword [rip + 0xe14]
ucomisd xmm1, qword [rip + 0xe2c]
jbe 0x407962
lea rbx, [rsi - 3]
mov byte [rsi - 1], 0x66
mov byte [rsi - 2], 0x6e
mov byte [rsi - 3], 0x49
test r14d, r14d
je 0x4077e7
mov byte [rbx - 1], 0x2d
sub rbx, 1
cmp byte [rbp + 0x1098], 0
jne 0x407ac8
mov rcx, qword [rbp + 0x1088]
mov rsi, qword [rbp + 0x1090]
lea r13, [rbp + 0x1008]
mov r14d, dword [rbp + 0x109c]
mov rax, rsi
mov byte [rbp + 0x1098], 1
sub rax, rbx
cmp eax, r14d
jb 0x407c96
xor r14d, r14d
test rax, rax
je 0x407842
mov rdi, rcx
mov rdx, rax
mov rsi, rbx
mov r14, rax
call sym.imp.memmove
mov rcx, rax
lea rax, [rcx + r14]
cmp rax, r13
mov qword [rbp + 0x1088], rax
jae 0x407c63
mov rdi, qword [rsp + 0x50]
test rdi, rdi
je 0x407865
call sym.operatordelete
test r15, r15
je 0x407872
mov rdi, r15
call sym.operatordelete
add qword [rsp + 0x18], 4
mov rax, qword [rsp + 0x18]
cmp qword [rsp + 0x20], rax
je 0x407e18
mov r11d, dword [r12]
movsxd rbx, r11d
test rbx, rbx
jne 0x4073d7
xor r15d, r15d
jmp 0x4074b8
mov edx, dword [rcx + 8]
shl rax, 4
add rax, rdi
mov dword [rax + 8], edx
movsd qword [rax], xmm0
lea rax, [rsi - 1]
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
test rsi, rsi
mov rdx, rax
mov rax, rsi
jle 0x407572
mov rsi, rdx
jmp 0x407540
mov esi, dword [8]
movsd xmm1, qword [0]
jmp 0x4076b8
lea rdx, [rsp + 0x44]
lea rsi, [rsp + 0x48]
lea rdi, [rsp + 0x50]
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_M_emplace_back_aux_double__int__
mov r9, qword [rsp + 0x58]
mov esi, dword [r9 - 8]
movsd xmm1, qword [r9 - 0x10]
jmp 0x4076c1
test rax, rax
jne 0x407c0b
lea rcx, [rbx - 2]
mov rsi, r15
shr rcx, 1
add rcx, 1
lea rdi, [rcx + rcx]
movapd xmm3, xmmword [rip + 0xca7]
lea rdx, [r15 + rax*8]
xor eax, eax
add rax, 1
add rdx, 0x10
movaps xmmword [rdx - 0x10], xmm3
cmp rcx, rax
ja 0x40793f
cmp rdi, rbx
lea rsi, [rsi + rdi*8]
jne 0x4074ac
jmp 0x4074b8
movsd xmm2, qword [rip + 0xc8e]
ucomisd xmm0, xmm2
jae 0x407b3e
cvttsd2si r13, xmm0
mov rdx, qword [rbp + 0x10b0]
test r13, r13
js 0x407b68
pxor xmm1, xmm1
test rdx, rdx
cvtsi2sd xmm1, r13
subsd xmm0, xmm1
js 0x407b91
pxor xmm1, xmm1
cvtsi2sd xmm1, rdx
mulsd xmm0, xmm1
addsd xmm0, qword [rip + 0xc4c]
ucomisd xmm0, xmm2
jae 0x407bf0
cvttsd2si rcx, xmm0
cmp rdx, rcx
jbe 0x407bb2
mov edx, dword [rbp + 0x10a8]
mov rbx, rsi
sub rbx, rdx
test edx, edx
je 0x407a37
test rcx, rcx
je 0x407bca
mov edi, dword [rbp + 0x10a4]
cmp edi, 0xa
jne 0x407a8b
movabs rdi, 0xcccccccccccccccd
mov rax, rcx
sub rsi, 1
mul rdi
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rcx, rax
test rdx, rdx
lea eax, [rcx + 0x30]
mov rcx, rdx
mov byte [rsi], al
jne 0x4079fe
sub rsi, rbx
mov rdx, rsi
jne 0x407bde
mov byte [rbx - 1], 0x2e
sub rbx, 1
test r13, r13
je 0x407d1b
mov eax, dword [rbp + 0x10a4]
movabs rcx, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x407ce3
nop dword [rax]
mov rax, r13
sub rbx, 1
mul rcx
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub r13, rax
test rdx, rdx
lea eax, [r13 + 0x30]
mov r13, rdx
mov byte [rbx], al
jne 0x407a60
jmp 0x4077da
mov rax, rcx
xor edx, edx
sub rsi, 1
div rdi
lea edi, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov edi, dword [rbp + 0x10a4]
mov rax, rcx
div rdi
test rax, rax
mov rcx, rax
jne 0x407a8b
jmp 0x407a23
nop dword [rax]
mov rax, qword [rbp + 0x10c0]
mov rcx, qword [rbp + 0x1088]
mov rsi, qword [rbp + 0x1090]
mov r13, qword [rbp + 0x10b8]
mov byte [rbp + 0x1098], 0
mov r14d, eax
mov dword [rsp + 0x10], eax
lea rdx, [rcx + r14 + 0x80]
cmp rsi, rdx
jbe 0x407d54
cmp eax, 1
je 0x407d28
test eax, eax
je 0x407b28
mov rsi, r13
mov rdi, rcx
mov rdx, r14
call sym.imp.memmove
mov rsi, qword [rbp + 0x1090]
mov rcx, rax
add rcx, r14
lea r13, [rbp + 0x1008]
mov qword [rbp + 0x1088], rcx
jmp 0x407809
movapd xmm1, xmm0
movabs rax, 0x8000000000000000
mov rdx, qword [rbp + 0x10b0]
subsd xmm1, xmm2
cvttsd2si r13, xmm1
xor r13, rax
test r13, r13
jns 0x407989
mov rax, r13
mov rcx, r13
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
test rdx, rdx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
subsd xmm0, xmm1
jns 0x40799f
mov rax, rdx
mov rcx, rdx
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x4079a8
mov edx, dword [rbp + 0x10a8]
mov rbx, rsi
add r13, 1
sub rbx, rdx
test edx, edx
je 0x407a37
mov byte [rsi - 1], 0x30
sub rsi, 1
sub rsi, rbx
mov rdx, rsi
je 0x407a2f
mov esi, 0x30
mov rdi, rbx
call sym.imp.memset
jmp 0x407a2f
subsd xmm0, xmm2
movabs rax, 0x8000000000000000
cvttsd2si rcx, xmm0
xor rcx, rax
jmp 0x4079c3
movsd xmm2, qword [rip + 0x9fd]
lea rsi, [r15 + 8]
movsd qword [r15], xmm2
mov eax, 1
jmp 0x40748b
mov eax, 3
jmp 0x40748b
mov eax, 2
jmp 0x40748b
mov byte [rsi - 1], 0x4e
mov byte [rsi - 2], 0x61
lea rbx, [rsi - 3]
mov byte [rsi - 3], 0x4e
jmp 0x4077da
mov eax, 5
jmp 0x40748b
mov eax, 4
jmp 0x40748b
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ebx, ebx
lea rcx, [rbp + 8]
sub rax, r13
jne 0x407e5f
add rbx, rcx
mov qword [rbp + 0x1088], rbx
jmp 0x407856
sub r14d, eax
mov edx, r14d
lea rax, [rcx + rdx + 0x80]
cmp rsi, rax
jbe 0x407eab
cmp r14d, 1
je 0x407df8
movzx esi, byte [rbp + 0x10a0]
lea r14, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [rbp + 0x1088], r14
mov rcx, r14
mov rax, qword [rbp + 0x1090]
sub rax, rbx
jmp 0x407826
mov ecx, eax
mov rax, r13
xor edx, edx
sub rbx, 1
div rcx
lea ecx, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, ecx
xor edx, edx
mov byte [rbx], al
mov ecx, dword [rbp + 0x10a4]
mov rax, r13
div rcx
test rax, rax
mov r13, rax
jne 0x407ce5
jmp 0x4077da
mov byte [rbx - 1], 0x30
sub rbx, 1
jmp 0x4077da
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r13]
lea r13, [rbp + 0x1008]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
mov rsi, qword [rbp + 0x1090]
jmp 0x407809
lea r14, [rbp + 0x1008]
lea rdi, [rbp + 8]
mov eax, r14d
mov qword [rsp + 0x28], rdi
sub eax, ecx
jmp 0x407d90
add rcx, qword [rsp + 8]
cmp r14, rcx
mov qword [rbp + 0x1088], rcx
jbe 0x407dca
mov edi, dword [rsp + 0x34]
sub dword [rsp + 0x10], edi
je 0x407dbb
add r13, qword [rsp + 8]
mov eax, 0x1000
mov edi, dword [rsp + 0x10]
cmp edi, eax
cmovbe eax, edi
mov edi, eax
test eax, eax
mov dword [rsp + 0x34], eax
mov qword [rsp + 8], rdi
je 0x407d6b
mov rdx, rdi
mov rsi, r13
mov rdi, rcx
call sym.imp.memmove
mov rcx, rax
jmp 0x407d6b
mov rsi, qword [rbp + 0x1090]
mov r13, r14
jmp 0x407809
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
sub rax, r14
jne 0x407f5c
add rcx, qword [rsp + 0x28]
mov qword [rbp + 0x1088], rcx
jmp 0x407d7c
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
jmp 0x407cd4
mov rbx, qword [r12 + 0x18820]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea rbp, [rbx + 8]
mov rdi, rbx
sub rsi, rbp
call qword [rax]
mov rax, qword [rsp + 0x78]
xor rax, qword fs:[0x28]
mov qword [rbx + 0x1088], rbp
jne 0x407e7d
add rsp, 0x88
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov rdi, rcx
mov rdx, rax
mov rsi, r13
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x407c87
mov rbx, rax
jmp 0x407e82
call sym.imp.__stack_chk_fail
mov rdi, qword [rsp + 0x50]
test rdi, rdi
je 0x407e91
call sym.operatordelete
test r15, r15
je 0x407e9e
mov rdi, r15
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
call sym.std::__throw_bad_alloc
lea rsi, [rbp + 8]
mov eax, r13d
mov rdi, rcx
sub eax, ecx
mov qword [rsp + 8], rsi
jmp 0x407edf
nop
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jae 0x407f15
sub r14d, dword [rsp + 0x10]
mov eax, 0x1000
je 0x407cd4
mov rdi, rcx
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
mov dword [rsp + 0x10], eax
add rcx, rdx
test eax, eax
je 0x407ec0
movzx esi, byte [rbp + 0x10a0]
mov qword [rsp + 0x28], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x28]
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jb 0x407ecc
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
sub rax, r13
je 0x407f4b
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 0x28], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
add rcx, qword [rsp + 8]
mov qword [rbp + 0x1088], rcx
jmp 0x407ecc
mov rdi, qword [rsp + 0x28]
mov rdx, rax
mov rsi, r14
mov qword [rsp + 0x38], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x38]
jmp 0x407dea
nop dword [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201e46]
push rbp
lea rbp, [rip + 0x201e4e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x407fd6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x407fc0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
jae 0x408071
movsxd rbx, dword [rdi + 0x73]
je 0x40807f
imul ebp, dword [rsi + 0x67], 0x70613a3a
jo 0x40807b
outsb dx, byte [rsi]
add byte fs:[rdx], dh
xor ah, byte [rax]
cmp al, 0x3d
and byte [rsi + 0x61], dh
insb byte [rdi], dx
jne 0x408088
and byte [rsi], ah
and byte es:[rsi + 0x61], dh
insb byte [rdi], dx
jne 0x408091
and byte [rdi + 0x363320], bh
jbe str.started
insb byte [rdi], dx
jne 0x40809d
and byte [rax], bh
pop r8
pop rdi
push r12
add byte [rbx + 0x61], al
jae str.Expected:_n
and byte [rbx], ah
add byte [rsi + 0x65], dh
jbe 0x4080b4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x4080ca
je 0x4080bf
jo 0x4080d3
outsb dx, byte gs:[rsi]
add byte fs:[rdx], dh
sub eax, 0x6772616c
imul ebp, dword cs:[rsi], 0x756f0077
outsd dx, dword [rsi]
jne 0x4080ed
jo 0x4080f0
je 0x4080ab
je 0x4080f7
je str._n_nTotal_time:
or cl, byte [rdx]
push rsp
outsd dx, dword [rsi]
je 0x4080e8
insb byte [rdi], dx
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rbx + 0x61], al
jae 0x4080f9
and byte [rax], al
and byte [rbx + 0x74], dh
jb str.input__read_forward_Ts__args_..._
add byte fs:[rbp + 0x72], al
jb 0x408114
outsd dx, dword [rsi]
jb str._n_nTest_time:
outsd dx, dword [rsi]
outsb dx, byte [rsi]
and byte [rbp + 0x73], dh
je 0x4080cd
and eax, dword [rax]
js 0x408122
movsxd rsi, dword gs:[rbp + 0x64]
cmp cl, byte [rdx]
add byte [rdx + 0x65], dl
push rdx
movsxd rsp, dword gs:[rbp + 0x69]
jbe 0x408126
cmp cl, byte fs:[rdx]
add byte [rdx], cl
or cl, byte [rdx]
push rsp
jae 0x40813f
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x408149
jb 0x408150
pop rdi
movsxd rbp, dword [rdi + 0x64]
jae 0x40814b
insd dword [rdi], dx
outsb dx, byte [rsi]
je 0x408154
movsxd rbp, dword [rdi]
insb byte [rdi], dx
jae 0x40815c
insb byte [rdi], dx
jae 0x408164
pop rdi
xor bl, byte [rdi + 0x31]
jae 0x408172
jne 0x408177
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x6e], ch
imul ebp, dword [rsi + 0x70], 0x3e2d7475
jb 0x40817e
sub byte fs:[rsi + 0x6f], ah
jb 0x408197
jb 0x408187
cmp al, 0x54
jae 0x408165
sub byte [rcx + 0x72], ah
jae 0x408156
sub dword cs:[rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x4081b1
imul esp, dword [rax + 0x72], 0x28646165
push rsp
jae 0x408173
and byte es:[rsi], ch
sub dword cs:[rax], esp
pop rbx
ja str.Detail::Precision_setPrecision_uint_
je 0x4081c1
and byte [rbx + rsi*2 + 0x20], dl
cmp eax, 0x6e697b20
je 0x40818a
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x5d7d26
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x6f], dh
jbe 0x4081f1
imul esp, dword [rax + 0x72], 0x28646165
push rsp
jae 0x4081b3
and byte es:[rsi], ch
sub dword cs:[rax], esp
pop rbx
ja 0x408200
je 0x408201
and byte [rbx + rsi*2 + 0x20], dl
cmp eax, 0x6f6c7b20
outsb dx, byte [rsi]
and byte [edi + ebp*2 + 0x6e], ch
and byte [ecx + 0x6e], ch
je 0x4081ce
sub byte [rsi], ah
sub dword [rbx + 0x31], ebx
xor dword [rcx], esi
pop rbp
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x5d7d26
add byte [rbp + 0x74], al
je 0x408225
imul ebp, dword [rdx + rdi + 0x3a], 0x63657250
imul esi, dword [rbx + 0x69], 0x73206e6f
je 0x408226
jb 0x40823d
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x6e697528
je 0x40820d
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x408255
imul ebp, dword [rdx + rdi + 0x3a], 0x65736142
and byte [rbx + 0x65], dh
je 0x408243
jae 0x408269
sub byte [rbp + 0x69], dh
outsb dx, byte [rsi]
je 0x408233
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
je 0x408254
xor dword [rdi + 0x4d], ebx
jne 0x40829c
js 0x40828a
jae 0x408294
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne obj.typeinfoforstd::_Sp_counted_base____gnu_cxx::_Lock_policy_2_
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4082b5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
jo 0x4081f3
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x408294
pop rdi
push rbx
jo 0x4082c7
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4082d3
pop rdi
jae 0x4082d9
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4082dd
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4082fa
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
add byte [rax], al
add al, cl
enter 0x60a1, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x7e], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x4082ea
je 0x40831e
jb 0x40831d
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40832d
pop rdi
jae 0x40832b
add byte [r8 - 0x5f], r14b
jo 0x40826b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4082], dh
add byte [rax], al
add byte [rcx], dh
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x408353
je 0x408324
jbe 0x40834c
movsxd rsp, dword [rbp]
add byte [rax], al
jo 0x40828b
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
cmp dword [rcx + 0x6e], ecx
jo 0x408372
je 0x408345
imul ebp, dword [rbp], 0
add al, cl
enter 0x60a1, 0
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rdx], esi
jne 0x408399
jo 0x40839c
je 0x40836d
jbe 0x408395
movsxd rsp, dword [rbp]
add byte [rax - 0x5f], dh
jo 0x4082d3
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add dword [rax], 0
add byte [rax], al
add byte [rcx], dh
xor dword [rax], esi
jne 0x4083b9
jo 0x4083bc
je 0x40838f
imul ebp, dword [rbp], 0xc8000000
enter 0x60a1, 0
add byte [rax], al
add byte [rax], al
add dword [rax], 0
add byte [rax], al
add byte [rax], dh
add dword [rax], 0
add byte [rax], al
add byte [rcx], dh
xor dword [rdx], esi
jne 0x4083e1
jo 0x4083e4
je 0x4083c4
je 0x4083e5
imul ebp, dword [rsi + 0x67], 0xa1c80000
enter 0x60a1, 0
add byte [rax], al
add byte [rax], al
push 0x4083
add byte [rax], al
add byte [rax], dh
add dword [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x4083da
je 0x40840e
jb 0x40840d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4083e5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40842c
push rax
jbe 0x40843d
jbe 0x40840f
add byte [r8], r8b
add al, cl
enter 0x60a1, 0
add byte [rax], al
add byte [rax], al
movabs al, byte [0xc800000000004083]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x408424
cmp dword [rdi + 0x53], ebx
jo 0x408457
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x408467
add byte [eax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x408455
xor ebx, dword [rdi + 0x53]
jo 0x408487
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x408493
pop rdi
jo 0x4084a6
jb 0x408493
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x408476
je 0x4084aa
jb 0x4084a9
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x408481
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4084c8
push rax
jbe 0x4084d9
jbe 0x4084ab
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4084d8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4084f5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
enter 0x60a1, 0
add byte [rax], al
add byte [rax], al
and byte [rax + rax*2], al
add byte [rax + 0x4082], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x4082, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rbx + 0x40], al
add byte [rax], al
nop
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rbx + 0x40], al
add byte [rax], al
and byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add dword [rax], 0
add byte [rax], al
add byte [rax + 0x58], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x405b], al
add byte [rax], al
add al, dh
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x4084c5
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5a], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x59], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5a], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rbx + 0x40], 1
add byte [rax], al
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5d], dh
add byte [rax], al
add byte [rax], al
add al, dl
push rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
test byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x57
add byte [rax], al
add byte [rax], al
add byte [rax + 0x58], al
add byte [rax], al
add byte [rax], al
add al, al
push rdi
add byte [rax], al
add byte [rax], al
add byte [rax + 0x58], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x4085d9
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x3d], bh
xchg eax, esp
and eax, 0x54b249ad
push rsp
jge 0x4085ad
xchg eax, esp
and eax, 0x54b249ad
out dx, eax
jg 0x4085f9
add byte [rax], al
add byte [rax], al
add al, ah
add byte [r8], al
add byte [rax], al
add byte [rax], al
loopne 0x408647
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp - 0x6b3c82bf], 0x25
jge 0x4085d5
xchg eax, esp
and eax, 0x54b249ad
add dword [rbx], ebx
add edi, dword [rbx]
insb byte [rdi], dx
add dword [rax], eax
add byte [rax + rax], ch
add byte [rax], al
mov eax, 0xb8ffff8a
add dword [rax], eax
add byte [rax - 0x73], cl
lcall [rax + 7]
add byte [rax], al
cmp byte [rdx + 0x928ffff], dl
add byte [rax], al
fcom dword [rdx + 0x188ffff]
add byte [rax], al
fcom dword [rbx + 0x4e8ffff]
add byte [rax], al
call 0x14085e4
add eax, 0x93f80000
lcall [rax]
add eax, 0x94280000
push qword [rax]
add eax, 0x94580000
dec dword [rax + 5]
add byte [rax], al
push 0x60ffff94
add eax, 0xa3580000
js 0x408682
add byte [rax], al
sbb byte [rdx + 0x8c8ffff], bh
add byte [rax], al
fmul st(7)
inc dword [rax]
or dword [rax], eax
add byte [rax - 0x1f00002f], bl
add dword [rax], eax
add byte [rax - 0x700002f], ch
add dword [rax], eax
add byte [rax + 0x10ffffd1], bh
add al, byte [rax]
add al, cl
sar edi, 1
ljmp [rax]
add al, byte [rax]
add byte [rax], ch
sar bh, cl
jmp qword [rax + 2]
add byte [rax], al
cmp dl, dl
js 0x4086bc
add byte [rax], al
sar dil, cl
call qword [rax + 0x78000002]
sar bh, cl
push qword [rax - 0x7fffffe]
sar bh, cl
jmp rax
add al, byte [rax]
add byte [rax], ch
sar edi, cl
clc
add al, byte [rax]
add byte [rax - 0x2d], bl
push qword [rax]
add eax, dword [rax]
add al, ch
sar edi, cl
push qword [rax + 3]
add byte [rax], al
sub ah, dl
jmp qword [rax + 0x58000003]
mov eax, 0xd8000003
call 0x68408708
lcall [rax]
add al, 0
add byte [rax], cl
call qword [rax + 4]
add byte [rax], al
fcom st(6)
lcall [rax + 0x58000004]
xlatb
mov eax, 0xe8000004
xlatb
push qword [rax + 0x38000005]
fdivr st(7)
call rax
add eax, 0xd9f80000
jmp qword [rax]
add byte [rax], al
inc dword [rax + 6]
add byte [rax], al
mov ah, ah
call qword [rax - 0x7fffffa]
in al, 0xff
push qword [rax + 0x38000006]
out 0xff, eax
call qword [rax]
add byte [rax], al
call 0xffffffff9140874a
add byte [rax], al
sbb bl, ch
jmp rax
add byte [rax], al
mov eax, 0x10ffffec
or byte [rax], al
add byte [rax - 7], ch
inc dword [rax + 9]
add byte [rax], al
fdivr st(1)
dec dword [rax + 9]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4087a7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg rax, rcx
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4087d7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
clc
mov bh, bh
inc dword [rax + 2]
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rax + 0x2ffffcf], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
pop rsp
add byte [rax], al
add byte [rax + 0xdffffcf], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
je 0x40882e
add byte [rax], al
movabs al, byte [0x3ffffcf]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
mov word [rax], es
add byte [rax], al
cwde
iretd
call qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rcx + 0xe]
and byte [rbx + 0xe0a7804], al
sbb byte [rsi + rcx + 0x10], al
or byte [rsi + 0xb], cl
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add al, al
iretd
inc dword [rip]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
fadd qword [rax]
add byte [rax], al
mov eax, 0x5ffffcf
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add byte [rax], al
add byte [rax + 0x28ffffcf], dh
add byte [rax], al
add byte [rax], al
adc byte [rbx + 0x80e6202], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
adc al, 1
add byte [rax], al
ror bh, 0xff
push qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x4b
and byte [rdi + 0xa], ch
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rdx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rax], dl
sar bh, 1
ljmp [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
pop rsp
add dword [rax], eax
add byte [rax], ch
sar bh, 1
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x408949
add eax, dword [rax]
adc eax, dword [rax]
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x3c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
and al, dl
inc dword [rcx + 0x4000000]
mov esp, 0x4100408f
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x55
and byte [rdx], al
or cl, byte [r14]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rbx + rcx + 0x44], cl
or cl, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte fs:[rax], al
add byte [rax - 0x30], dh
cmp al, byte [rax]
add byte [rax], al
add al, 0xc0
pop qword [rax]
adc byte [rbx + 0xe0a5902], al
or byte [rsi + 0xb], al
or r9b, byte [r14]
or byte [rbx + 0xb], cl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add al, 2
add byte [rax], al
adc al, 0xff
push qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
add byte [rax + 0x7dffffd0], bl
add byte [rax], al
add byte [rsp + rax*8], al
pop qword [rax]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x55
and byte [rdx], al
push rdx
or cl, byte [rsi]
sbb byte [rsi + rcx + 0x10], al
or byte [rbp + 0xb], al
add byte [rax + rax], ch
add byte [rax], al
fadd qword [rax]
add byte [rax], al
call 0xffffffff8f4089dd
add byte [rax], al
add byte [rax + rcx*8], al
pop qword [rax]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x50
and byte [rdx], al
pop rsi
or cl, byte [rsi]
sbb byte [rsi + rcx + 0x10], al
or byte [rbx + 0xb], cl
add byte [rax + rax], dh
add byte [rax], al
or al, 1
add byte [rax], al
sar rdi, 1
call qword [rdi + 0x4000000]
int3
pop qword [rax]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x50
and byte [rdx], al
pop rcx
or cl, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rbx + 0xb], cl
pop rsp
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rax + rax], al
add byte [rcx + rax], al
add byte [rax - 0x3400002f], dh
add byte [rax], al
add byte [rax + rdx*8], al
pop qword [rax]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x44
and byte [rdx], al
xchg byte [rdx], cl
sbb byte [rsi + rcx + 0x10], al
or byte [rdi + 0xb], cl
or r9b, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rdx + 0xb], cl
push rsp
sbb byte [rsi + rcx + 0x10], al
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add al, byte [rax]
add byte [rax], bh
sar bh, cl
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rbx + 0xe0a6202], al
or byte [rbp + 0xb], al
add al, byte [rdi + 0xe]
or byte [rax + rax], ch
add byte [rax], al
sbb al, 3
add byte [rax], al
cwde
sar bh, cl
dec dword [rbx]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x47
and byte [rbp + 0xa], ah
sbb byte [rsi + rcx + 0x10], al
or byte [rbp + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add r8, qword [rax]
add al, ch
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add eax, dword fs:[rax]
add al, ah
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
jl 0x408b39
add byte [rax], al
fmul dword [rsi + 0x25ffff]
add byte [rax], al
add byte [rsi + rcx + 0x10], cl
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add al, dh
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
lodsb al, byte [rsi]
add eax, dword [rax]
add byte [rax], cl
inc dword [rax + rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, al
add eax, dword [rax]
add byte [rax], al
jmp rdi
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bb], es
cmp byte [rbx + 0x600e4707], al
add ebx, dword [rdx + 2]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdi + 0xb], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
xor dl, dl
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rbx + 0xe0a7602], al
or byte [rcx + 0xb], cl
or byte [rax], al
add byte [rax], r8b
add byte [rsp + rax], dh
add byte [rax], al
sar bh, cl
mov ebp, 1
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x400e4707], al
add edx, dword [rcx + rax + 0xa]
cmp byte [rsi + rcx + 0x30], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], al
add al, dl
sar edi, cl
dec dword [rdx]
add byte [rax], al
add byte [rsi + rcx + 0x10], al
je 0x408c58
or byte [rax + 0xb], cl
or r9b, byte [rsi]
or byte [rcx + 0xb], al
add byte [rax], r8b
add byte [rsp + rax - 0x2c000000], ah
push qword [rdx + rcx]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x600e4407], al
add esp, dword [rdi + 0x380e0a01]
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add al, 0
add al, dh
jmp qword [rdx]
add byte [rax], al
add byte [rsi + 0xe], al
adc byte [rbx + 0xe0a5002], al
or byte [rdx + 0xb], cl
jl 0x408cd4
or byte [rax], al
pop rsp
add byte [rax], al
add byte [rax - 0x21c00000], dl
push qword [rip + 2]
add ah, byte [rdx + 0xe]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b5], es
cmp byte [rbx + 0x400e4d07], al
add ebx, dword [rsi + 1]
cmp byte [rcx - 0x3d], al
xor byte [rcx - 0x3a], al
sub byte [rdx - 0x34], al
and byte [rdx - 0x33], al
sbb byte [rdx - 0x32], al
adc byte [rdx - 0x31], al
or byte [rsi + rcx + 0x40], al
add dword [rdi], -0x7a
mov word [rip + 0x38e048d], es
pop qword [rdx]
add byte [rax + rax], al
add byte [rsp + rax], al
add byte [rax], al
and al, ah
jmp qword [rbx + 0x4000002]
pop qword [rax]
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e41
push rax
add edx, dword [rcx + 0x300e0a01]
sub byte [rcx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbp + 0xb], al
xor al, 0
add byte [rax], al
add al, 0
add al, ch
test edi, edi
push rax
add al, 0
add byte [rsp + rdi*8], al
pop qword [rax]
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rsi + 0xe]
and byte [rbx + 0x500e4404], al
add edi, dword [rbx + 4]
or cl, byte [rsi]
and byte [rcx + 0xe], al
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], r8b
add ah, dh
add eax, 0xe2500000
ljmp [rcx]
add dword [rax], eax
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x400e4707], al
add al, dl
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbp + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
xor bl, ah
call qword [rcx + rax + 0x46000000]
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rsi + rcx + 0x20]
add dword [rbx + rax], 2
add dword [rdx], ecx
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax + 0xb], cl
add byte [rax], al
add byte fs:[rax], al
add byte [rax - 0x1b600000], al
ljmp [rbx + 0x400000c]
nop
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx - 0x3ff1b8f9], al
add dword [rbx], eax
int 2
enter 0x6001, 0xe
rol byte [rcx], 1
enter 0x4101, 0xe
rol byte [rcx], 3
ja 0x408e7c
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rbp + rax], ch
add al, bl
mov edi, 0x4000016
push rdx
nop
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx + 0x700e4407], al
add eax, ecx
adc ecx, dword [rdx]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
xor al, 0
add byte [rax], al
mov esp, 0x48000005
mov cl, 0xff
mov ebp, 0x4000015
test dword [rax + 0xe420040], edx
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b9], es
cmp byte [rbx - 0x4ff1b6f9], al
add dword [rax], eax
and al, 0
add byte [rax], al
hlt
add eax, 0xc6d00000
push qword [rbp + 0x4000001]
mov al, 0x90
add byte [rdx + 0xe], al
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rbx + 0xe]
and byte [rbx + 0x300e4404], al
add byte [rax + rax], dl
add byte [rax], al
mov word [rdi], es
add byte [rax], al
or byte [rcx + 0x97ffff], cl
add byte [rax], al
add byte [rsi + rcx + 0x10], al
add cl, byte [rsi + 0x44080e]
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
and al, dh
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x408f9a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
in al, dx
add byte [rax], al
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x5561b01]
add byte [rax], al
add dword [rcx], 0x104e405
iretd
add dword [rip - 0x20fcfb52], eax
add al, 5
mov byte [rip + 0x5059e00], al
add byte [rax], al
add dword [rax], eax
add byte [rbp], bh
add byte [rax], al
add bh, bh
inc dword [rcx]
sbb eax, 0x2f000005
add eax, 0x8c0009ad
add dword [rip + 0x19e0000], eax
add eax, 0xcd0009c0
add dh, dl
add dword [rax], eax
add byte [rdx + 0x9e60506], cl
add ah, bl
add eax, 0xe20009c2
xchg byte [rcx], al
out 9, al
add byte [rbp + 0x509], dl
mov ebx, 0x2b09
inc dword [rcx]
movabs byte [0x11d804b000000502], al
test al, 0x17
add ah, ah
ja 0x40904b
add cl, dl
sbb byte [rdx], al
test al, 0x17
add bh, bh
inc dword [rcx]
add byte [rdx], 0
add bh, cl
add al, 5
loop 0x409087
add byte [rcx - 0x5aea6ef9], cl
sub eax, 0xaf209f00
add al, byte [rax]
add dh, cl
and edx, dword [rbx]
movsd dword [rdi], dword ptr [rsi]
sub eax, 0x223f800
add byte [rax], al
mov ch, 0x24
push rax
movsd dword [rdi], dword ptr [rsi]
sub eax, 0xd926e100
add byte [rax], al
inc dword [rcx]
xor eax, 0x62000005
add eax, 0x82002b94
add al, byte [rip - 0x2fffd448]
add al, bh
or bl, ch
sub al, byte [rax]
sahf
or al, 5
add byte [rax], al
mov bh, 0x11
mov esi, 0x2aeb17
sub ebp, dword [rcx]
add byte [rax], al
inc dword [rcx]
adc al, 0x25
add eax, 0x5520000
inc byte [rdx]
add cl, dh
add dword [rdi], edx
movabs byte [0x4302f20003], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr byte [rcx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 0x18], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4019], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x10
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add ah, dh
jg 0x409e93
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
popfq
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
popfq
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 7], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0x2000000000060]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 3
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], ah
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add al, dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rsi + 0xb], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
adc byte [rax], al
add byte [rax], al
add byte [rax], al
not byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword es:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword ss:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], r8d
add byte [rax], al
add byte [rax], al
push rsi
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc word [rax], ax
add byte [rax], al
add byte [rax], al
jbe 0x40a073
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4011], al
add byte [rax], al
add byte [rsi + 0x4011], dl
add byte [rax], al
add byte [rsi + 0x4011], ah
add byte [rax], al
add byte [rsi + 0x4011], dh
add byte [rax], al
add dh, al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
out 0x11, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte es:[rax]
add byte [rax], al
add byte [rax], al
adc al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40a0f4
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4012], al
add byte [rax], al
add byte [rsi + 0x4012], dl
add byte [rax], al
add byte [rsi + 0x4012], ah
add byte [rax], al
add byte [rsi + 0x4012], dh
add byte [rax], al
add dh, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0x12, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
adc eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8d, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40a1d8
je 0x40a1e1
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40a1ef
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40a1ec
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002e000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 7], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rsi + 0xb], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add al, dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or dword [rax], eax
movabs al, byte [0x400c]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
test al, 0x10
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
rcl byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40135000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0x13], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add ah, dh
jg 0x40a34b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax], bl
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, byte [rax]
mov byte [rdi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, dword [rax]
mov esp, 0x408f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
fcomp dword [rbp + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, 0x609de800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add al, dh
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add al, bh
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
lahf
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
movabs al, byte [0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, byte [rax]
push rax
movabs eax, dword [0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb eax, dword [rax]
movabs eax, dword [0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add al, dh
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], ah
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x19], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4019], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax], ch
movabs byte [0x1000000000060], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rcx], al
add byte [rip + 0x609de800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
fcomp dword [rbp + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], dh
add byte [rax], dl
add al, dh
add dword [rax], 0
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol dword [rax], cl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
rol byte [rcx + 0x40], 0
add byte [rip], ah
add byte [rax], al
add ah, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax - 0x7f], al
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdx], ch
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4081], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], bl
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x18], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax + 1], bh
add byte [rax], al
add dword [rax], eax
sbb eax, dword [rax]
movabs al, byte [0x1000000000060a2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1000001], al
add byte [rdx], dl
add byte [rax + 0x408f], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000001], dl
add byte [rsi], dl
add al, dh
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], ah
add byte [rcx], dl
add byte [rax], bl
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 1
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 1
add byte [rax], al
add byte [rax + rax], dl
call 0x41070a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
fcomp dword [rbp + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, al
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add al, bh
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2000000a], dh
add byte [rdx], bl
add byte [rax - 0x5f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x15], bh
add byte [rax], al
add byte [rdi], al
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x405b], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rbx], bl
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, ah
push rdi
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rdx], 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add al, ch
test byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x40a76d
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rbx], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x5d], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rdi + 0x12000003], dh
add byte [rsi], cl
add al, dh
jg 0x40a7e3
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4058], dl
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 0xa
add byte [rax], al
adc al, byte [rax]
add al, dh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x40a7e5
add byte [rax], al
and al, byte [rax]
add byte [rax], ah
pop rsp
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], bl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
test dword [rax], eax
add byte [rax], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x5e], dl
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], bh
add byte [rax], al
add byte [rdx + 0x12000004], bh
add byte [rsi], cl
add byte [rax + 0x401a], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rip + 0x200000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rip + 0x200000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 5
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add eax, 0x210000
adc byte [rax], al
mov byte [rbp + 0x40], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rdi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add eax, 0x220000
add byte [rax + 0x5a], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x22000006
add byte [rsi], cl
add byte [rax + 0x59], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add cl, al
add eax, dword [rax]
add byte [rdx], dl
add byte [rdi], cl
add ah, dh
jg 0x40a963
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 6
add byte [rax], al
and al, byte [rax]
add al, ah
push rdi
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x12000006
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
and al, byte [rax]
add al, dh
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
and byte [rdx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x21000007], cl
add byte [rax], dl
add byte [rax - 0x7d], dl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000007], bl
add byte [rsi], cl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0x21000007
add byte [rax], dl
add byte [rax - 0x7d], bh
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4057], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 8], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x29], dh
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x16], bh
add byte [rax], al
add byte [rcx + 8], ch
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
cmp byte [rbp + 0x40], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jl 0x40aaa2
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dh
jno 0x40aafb
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], dl
add byte [rax], al
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx], bl
add byte [rcx], ah
add byte [rax], dl
add byte [rax], dh
add dword [rax], 0
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 9], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
mov al, 0x11
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx + 0x200000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 9
add byte [rax], al
and al, byte [rax]
add byte [rax], al
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
or dword [rax], eax
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x4082], bl
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
or al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add al, dl
test byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rdx], cl
add byte [rax], al
adc dword [rax], eax
adc byte [rax], al
add byte [rax + 0x40], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax], dl
test dword [rax], eax
add byte [rax], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dh
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rdx + rcx], ah
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], bh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
push 0x4083
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1100000a], cl
add byte [rbx], bl
add byte [rdx + 0x60], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
or al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1000000a], ch
add byte [rdx], bl
add byte [rax - 0x5f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx + 0x120000], bh
add byte [rax], al
rcl byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
or al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x4084], ch
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
or al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax], cl
add dword [rax], 0
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
or eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax - 0x5e], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x2100000b
add byte [rax], dl
add byte [rax - 0x7e], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], al
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x1a], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
or eax, dword [rax]
add byte [rcx], ah
add byte [rbx], bl
add byte [rax - 0x5f], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rbx], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x6d], dl
add byte [rax], al
add byte [rax], al
add byte [rbx + 2], ah
add byte [rax], al
add dl, cl
or eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x60a2], bl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or eax, dword [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x4083], ah
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
or al, 0
add byte [rcx], dl
add byte [rbx], bl
add byte [rax - 0x5e], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2100000c], cl
add byte [rax], dl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
jo 0x40ad9b
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xc], ah
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
or al, 0
add byte [rcx], ah
add byte [rax], dl
add al, dl
add dword [rax], 0
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
or al, 0
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax - 0x5f], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xd], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rip + 0x210000], ecx
adc byte [rax], al
nop
test byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
or eax, 0x2110000
sbb al, byte [rax]
pop rax
movabs eax, dword [0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rsi], ecx
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
and byte [rbx + 0x40], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x407f], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0xe
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
and byte [rax + rax*2], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x5a], dh
add byte [rax], al
add byte [rax], al
add byte [rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x2100000f
add byte [rax], dl
add al, dh
add dword [rax], 0
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
sldt word [rax]
and al, byte [rax]
add al, dh
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
and byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xf], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x59], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rcx + 0x2200000f], cl
add byte [rsi], cl
add byte [rax + 0x406a], ah
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x40af59
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rdi], 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, byte [rax]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x405b], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rsi], dl
adc byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rdx], ah
adc byte [rax], al
add byte [rax], dl
add byte [rbx], bl
add byte [rax - 0x5f], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x10], al
add byte [rax], al
and dword [rax], eax
sbb eax, dword [rax]
mov eax, 0x60a1
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40b002
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
enter 0x4082, 0
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x21000010], ch
add byte [rax], dl
add byte [rax + 0x4082], dh
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
adc byte [rax], al
add byte [rcx], ah
add byte [rax], dl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
pop rsp
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
jo 0x40b0b3
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx], bl
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], dh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
add dword [rax], 0
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rcx + 0x12000011], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, al
push rdi
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add dh, dl
add dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add byte [rax + 0x60a2], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x12
add byte [rax], al
adc al, byte [rax]
add al, dh
push rbp
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rsi + 0x12], dh
add byte [rax], al
and al, byte [rax]
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
adc al, byte [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x60a2], dl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000012], dh
add byte [rsi], cl
add al, dl
jb 0x40b1a3
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xc], ch
add byte [rax], al
add dl, cl
adc al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
adc al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdx], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rbx], edx
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
and byte [rdx + 0x60], ah
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x12000013
add byte [rsi], cl
add byte [rax + 0x1a], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x13], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x58], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x13], dh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
fadd dword [rdx + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000013], al
add byte [rax], al
add al, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
adc eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4057], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdx], cl
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdx], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x58], dl
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdi], cl
adc eax, 0x100000
sbb al, byte [rax]
movabs eax, dword [0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x120000
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
adc eax, 0x220000
add byte [rax + 0x6d], dl
add byte [rax], al
add byte [rax], al
add byte [rbx + 2], ah
add byte [rax], al
add byte [rbx + 0x15], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
imul eax, dword [rax], 0
add byte [rax], al
add byte [rip + 2], dh
add byte [rax], al
add dl, bl
adc eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
adc eax, 0x220000
add al, dl
push rdi
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], ch
add byte [rax], al
adc al, byte [rax]
add al, dh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x12000016
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000016], bh
add byte [rsi], cl
add byte [rax + 0x58], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rbx + 0x11000016], dh
add byte [rbx], bl
add byte [rax - 0x5e], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x16, al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x59], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x13], ah
add byte [rax], al
add byte [rax], al
add al, dh
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
test al, 0x10
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
mov byte [rdx + 0x60], ah
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x40b4b8
je 0x40b4bc
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40b46e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40b4ec
jb 0x40b4f2
pop rdi
jne 0x40b4fb
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x40b4f5
je 0x40b4f1
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40b511
jb 0x40b517
pop rdi
jne 0x40b520
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40b523
jns 0x40b513
outsb dx, byte gs:[rsi]
je 0x40b52a
jns 0x40b4ba
jb 0x40b51e
insd dword [rdi], dx
pop rdi
jne 0x40b530
insd dword [rdi], dx
jns 0x40b4c6
pop rdi
pop rdi
jb 0x40b52c
insd dword [rdi], dx
pop rdi
jne 0x40b53e
insd dword [rdi], dx
jns 0x40b533
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40b53e
jns 0x40b53e
outsb dx, byte gs:[rsi]
je 0x40b555
jns 0x40b4e5
jae 0x40b556
jne 0x40b55b
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
pop rdx
jae 0x40b55b
je 0x40b53a
jae 0x40b560
push 0x45
xor dword [rcx], edi
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor dword [rdx], esi
jae 0x40b57f
je 0x40b56c
jb 0x40b583
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x3931456a
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x72
push rdx
imul edx, dword [rbx + 0x30], 0x7645455f
jo 0x40b5a0
push rsp
pop rdi
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x72
push rdx
xor dword [r9], esi
xor dword [rdi + 0x78], ebx
push rdx
imul eax, dword [rbp + 0x45], 0x4f704476
push rsp
pop rdi
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x40b61c
pop rdi
pop r15
pop rdi
pop rdx
cmp byte [rbx + 0x65], dh
je 0x40b609
imul esp, dword [rsp + rsi*2 + 0x68], 0x5a5f006a
push rbx
je 0x40b609
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40b676
jns 0x40b676
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40b687
jns 0x40b687
jae 0x40b69e
jb 0x40b6a1
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
xor dword [rax], esi
jb 0x40b69e
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
push rsp
jae 0x40b6b9
jbe 0x40b647
pop rdi
pop rdx
xor qword [rax], r14
jne 0x40b6c3
jo 0x40b6c6
je 0x40b699
imul ebp, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
je 0x40b697
jbe 0x40b6c8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40b6a3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b6e2
movsxd rbx, dword [rdi + 0x73]
je 0x40b6f0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b6eb
je 0x40b700
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40b6e0
xor byte [rdi + 0x5f], bl
je 0x40b71b
jb 0x40b724
ja 0x40b716
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40b725
pop rdi
jb 0x40b733
outsd dx, dword [rsi]
jb 0x40b714
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x40b751
jo 0x40b754
je 0x40b725
jbe 0x40b74d
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40b71f
xor ebx, dword [rdi + 0x53]
jo 0x40b751
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40b75d
pop rdi
jo 0x40b770
jb 0x40b75d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40b740
je 0x40b774
jb 0x40b773
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b74b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b792
push rax
jbe 0x40b7a3
jbe 0x40b775
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b7a2
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40b7bf
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rdi + rbx*2], esi
pop r15
je 0x40b7c0
insb byte [rdi], dx
je 0x40b7cc
jb 0x40b7ae
push rdx
push r11
je 0x40b7a7
je 0x40b7e9
jo 0x40b7d7
pop rdi
imul ebp, dword [rsi + 0x66], 0x5a5f006f
push rbx
je 0x40b7af
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40b7d3
cmp byte [rbp + 0x73], dl
je 0x40b7d3
jae 0x40b7f8
push rbx
je 0x40b7c7
xor al, 0x64
jne 0x40b809
je 0x40b7fe
insb byte [rdi], dx
je 0x40b80a
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rbp + 0x65], ch
insd dword [rdi], dx
jae 0x40b81a
je 0x40b7f7
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40b800
je 0x40b834
jb 0x40b833
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b80b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b852
push rax
jbe 0x40b863
jbe 0x40b835
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rcx + 0x6e], r9
jo 0x40b884
je 0x40b857
imul ebp, dword [rbp + 0x39], 0x6c6c6966
outsb dx, byte [rsi]
jo 0x40b892
je 0x40b864
jbe 0x40b821
pop rdi
pop rdx
push rbx
je 0x40b858
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40b87c
xor dword [rax], esi
jne 0x40b8ac
jo 0x40b8af
je 0x40b882
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40b8b5
je 0x40b8aa
insb byte [rdi], dx
je 0x40b8b6
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push rsi
push rbx
je 0x40b89a
je 0x40b8ce
jb 0x40b8cd
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b8a5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b8ec
push rax
jbe 0x40b8fd
jbe 0x40b8cf
add byte [r15 + 0x5a], r11b
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x40b90c
je 0x40b8dd
jbe 0x40b905
movsxd rsp, dword [rbp + 0x34]
jb 0x40b906
imul rax, qword fs:[r13 + 0x45], 0x3974534e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x40b90e
je 0x40b8ee
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x40b947
push rbx
je 0x40b911
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
xor al, 0x74
jns 0x40b963
push r10
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
xor dword [rcx], esi
ja 0x40b972
imul esi, dword [rbp + 0x41], 0x6577736e
jb 0x40b973
push rdx
push rbx
je 0x40b947
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b986
movsxd rbx, dword [rdi + 0x73]
je 0x40b994
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b98f
je 0x40b9a4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5f], r11b
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40b9be
jb 0x40b9c1
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40b9b3
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40b9d4
jae 0x40b964
pop rdi
pop rdx
push rbx
je 0x40b99b
xor byte [rdi + 0x5f], bl
je 0x40b9d6
jb 0x40b9df
ja 0x40b9d1
jae 0x40b9ed
jae 0x40b9ea
insd dword [rdi], dx
pop rdi
jb 0x40b9ee
outsd dx, dword [rsi]
jb 0x40b9e8
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rsp
push rsi
push rbx
je 0x40b9c9
xor ebx, dword [rdi + 0x53]
jo 0x40b9fb
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40ba07
pop rdi
jo 0x40ba1a
jb 0x40ba07
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40b9ea
je 0x40ba1e
jb 0x40ba1d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b9f5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40ba3c
push rax
jbe 0x40ba4d
jbe 0x40ba1f
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ba4c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40ba69
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x40ba4a
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x40ba93
jo 0x40ba96
je 0x40ba76
je 0x40ba97
imul ebp, dword [rsi + 0x67], 0x72773331
imul esi, dword [rbp + 0x54], 0x7665446f
imul esp, dword [rbx + 0x65], 0x5f006a45
pop rdi
jae 0x40bab2
jb 0x40bab6
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
xor dword [rdx], esi
jne 0x40bad1
jo 0x40bad4
je 0x40bab4
je 0x40bad5
imul ebp, dword [rsi + 0x67], 0x76453144
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x40bad8
je 0x40badd
jb 0x40bae6
ja 0x40bab9
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40bac3
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40bae6
jbe 0x40bb17
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40baf2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bb31
movsxd rbx, dword [rdi + 0x73]
je 0x40bb3f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bb3a
je 0x40bb4f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rsi + 0x6f], ah
jo 0x40bb61
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6c5f5f00
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x40bb8b
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40bb61
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40bb85
cmp dword [rcx + 0x6e], ecx
jo 0x40bbb6
je 0x40bb89
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40bbbc
je 0x40bbb1
insb byte [rdi], dx
je 0x40bbbd
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40bb9f
je 0x40bbd3
jb 0x40bbd2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40bbaa
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40bbf1
push rax
jbe 0x40bc02
jbe 0x40bbd4
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x40bbce
xor dword [rdi + 0x4d], ebx
jne 0x40bc16
js 0x40bc04
jae 0x40bc0e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bc12
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40bc2f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rsp
xor qword [r8], rsi
jne 0x40bc46
jo 0x40bc49
je 0x40bc1c
imul ebp, dword [rbp], 0x534e5a5f
je 0x40bc16
jbe 0x40bc47
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40bc20
je 0x40bc54
jb 0x40bc53
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x40bc7a
jo 0x40bc7d
je 0x40bc5d
je 0x40bc7e
imul ebp, dword [rsi + 0x67], 0x635f5f00
js 0x40bc76
pop rdi
je 0x40bc7e
js 0x40bc84
je 0x40bc5d
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40bc62
xor ebx, dword [rdi + 0x53]
jo 0x40bc94
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40bca0
pop rdi
jo 0x40bcb3
jb 0x40bca0
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40bc83
je 0x40bcb7
jb 0x40bcb6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40bc8e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40bcd5
push rax
jbe 0x40bce6
jbe 0x40bcb8
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bce5
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40bd02
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor al, 0x77
outsd dx, dword [rsi]
jb 0x40bd12
jbe 0x40bca9
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x40bd26
jo 0x40bd29
je 0x40bd09
je 0x40bd2a
imul ebp, dword [rsi + 0x67], 0x65676600
je 0x40bd34
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x40bd05
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x40bd51
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bd4a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40bd63
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bd3a
jo 0x40bd69
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40bd47
jbe 0x40bd78
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insb byte [rdi], dx
push rbx
xor ebx, dword [rdi + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40bda6
xor dword [rip + 0x6574495f], esi
jb 0x40bd9a
movsxd rbp, dword [rdi + 0x6d]
jo 0x40bd9f
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x40bdb0
je 0x40bdb3
jb 0x40bd99
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x40bdad
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop rdi
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40bda3
je 0x40bdd7
jb 0x40bdd6
xor dh, byte fs:[rax]
push 0x77647261
jb 0x40bde2
pop rdi
movsxd rbp, dword [rdi + 0x6e]
movsxd rsi, dword [rbp + 0x72]
jb 0x40bdeb
outsb dx, byte [rsi]
movsxd rdi, dword [rcx + 0x45]
jbe 0x40bdcc
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rdi], esi
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x40be19
jo 0x40be1c
je 0x40bded
jbe 0x40be15
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40bded
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x40be42
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x40be27
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40be4b
cmp dword [rcx + 0x6e], ecx
jo 0x40be7c
je 0x40be4f
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40be82
je 0x40be77
insb byte [rdi], dx
je 0x40be83
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push r11
je 0x40be61
pop rdi
push rbx
jo 0x40be94
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40bea0
pop rdi
jae 0x40bea6
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40beaa
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40bec7
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rsp
push rsi
cmp dword [rcx + 0x6e], ecx
jo 0x40bedf
je 0x40beb2
imul ebp, dword [rbp], 0x5f4f495f
jae 0x40beea
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rsp
push rsi
xor dword [rax], esi
jne 0x40befc
jo 0x40beff
je 0x40bed2
imul ebp, dword [rbp], 0x314e5a5f
xor byte [rdi + 0x75], cl
je 0x40bf09
jne 0x40bf0f
imul r13d, dword [rbp + r12*2 + 0x44], 0x764530
jae 0x40bf1a
jb 0x40bf14
outsb dx, byte gs:[rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rbx
xor dword [rdx], esi
jne 0x40bf35
jo 0x40bf38
je 0x40bf18
je 0x40bf39
imul ebp, dword [rsi + 0x67], 0x73657400
je 0x40bf19
outsb dx, byte [rsi]
js 0x40bed5
pop rdi
push r12
pop r15
jb 0x40bf41
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x40bf56
pop rdi
jae 0x40bf6c
jb 0x40bf6f
add byte [rax + 0x74], dh
push 0x64616572
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x40bf6f
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rsi
push rbx
je 0x40bf56
je 0x40bf8a
jb 0x40bf89
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40bf99
pop rdi
jae 0x40bf97
add byte [r15 + 0x5a], r11b
push rsp
cmp qword [r9 + 0x6e], rcx
jo 0x40bfb2
je 0x40bf85
imul ebp, dword [rbp], 0x74736574
outsd dx, dword [rsi]
jne 0x40bfb9
je 0x40bf4d
pop rdi
pop rdx
push rsp
push r11
je 0x40bf85
xor dword [rdi + 0x4d], ebx
jne 0x40bfcd
js 0x40bfbb
jae 0x40bfc5
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bfc9
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40bfe6
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor dword [rdx], esi
jae 0x40bfeb
je 0x40bfcc
insb byte [rdi], dx
imul ebp, dword [rbp + 0x69], 0x50726574
movsxd rax, dword [r8]
pop rdi
pop rdx
push rsp
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3731
movsxd rbp, dword [rcx + 0x73]
jae 0x40c00e
je 0x40c02a
jo 0x40c018
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40c002
jbe 0x40c033
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40c00c
je 0x40c040
jb 0x40c03f
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40c059
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40c071
push rdx
jbe 0x40c075
jbe 0x40c049
jo 0x40c056
push rsp
pop rdi
add byte [rcx + 0x6e], ch
jo 0x40c083
je 0x40c010
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x40c04e
je 0x40c082
jb 0x40c081
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c059
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c0a0
push rax
jbe 0x40c0b1
jbe 0x40c083
add byte [r9 + 0x6e], r13b
jo 0x40c0bb
je 0x40c095
jne 0x40c0be
js 0x40c04d
pop rdi
pop rdx
push rsp
push rbx
cmp dword [rcx + 0x6e], ecx
jo 0x40c0cb
je 0x40c09e
imul ebp, dword [rbp], 0x534e5a5f
je 0x40c098
jbe 0x40c0c9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40c0a0
jo 0x40c0cf
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40c0f1
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40c109
push rdx
push rdx
imul eax, dword [rbp + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x40c0d9
pop rdi
push rbx
jo 0x40c10c
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40c118
pop rdi
jae 0x40c11e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c122
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40c13f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rsp
push rbx
je 0x40c117
je 0x40c14b
jb 0x40c14a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c122
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c169
push rax
jbe 0x40c17a
jbe 0x40c14c
add byte [r15 + 0x5f], r11b
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c153
je 0x40c187
jb 0x40c186
xor al, 0x6a
outsd dx, dword [rsi]
imul ebp, dword [rsi + 0x45], 0x47404076
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c177
je 0x40c1ab
jb 0x40c1aa
xor dword fs:[rip + 0x735f4d5f], esi
je 0x40c1b0
jb 0x40c1c5
pop rdi
je 0x40c1bc
jb 0x40c1bb
push r11
je 0x40c18d
xor byte [rbx + 0x68], dh
jb 0x40c1c7
pop rdi
jo 0x40c1da
jb 0x40c1b1
push rbx
pop rdi
xor dword [rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40c1de
pop rdi
jae 0x40c1dc
push r8
jbe 0x40c1f3
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
ja 0x40c206
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [rip + 0x64634b5f], esi
jbe 0x40c1eb
jo 0x40c1f8
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c1ea
je 0x40c218
jb 0x40c222
imul ebp, dword [rsi + 0x61], 0x40766574
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rsp
push r11
je 0x40c202
xor ebx, dword [rdi + 0x53]
jo 0x40c234
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40c240
pop rdi
jo 0x40c253
jb 0x40c240
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40c223
je 0x40c257
jb 0x40c256
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c22e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c275
push rax
jbe 0x40c286
jbe 0x40c258
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c285
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40c2a2
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5f], bl
jae 0x40c2b0
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rsp
push rbx
xor dword [rdx], esi
jne 0x40c2c6
jo 0x40c2c9
je 0x40c29a
jbe 0x40c2c2
movsxd rsp, dword [rbp]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rsp
push rbx
push rbx
je 0x40c2a5
xor ebx, dword [rdi + 0x53]
jo 0x40c2d7
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40c2e3
pop rdi
jo 0x40c2f6
jb 0x40c2e3
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40c2c6
je 0x40c2fa
jb 0x40c2f9
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c2d1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c318
push rax
jbe 0x40c329
jbe 0x40c2fb
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c328
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40c345
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x40c31c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c35b
movsxd rbx, dword [rdi + 0x73]
je 0x40c369
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c364
je 0x40c379
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x40c379
jo 0x40c35f
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x40c3ab
jo 0x40c3ae
je 0x40c38e
je 0x40c3af
imul ebp, dword [rsi + 0x67], 0x76453044
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x40c37d
cmp dword [rdi + 0x53], ebx
jo 0x40c3b0
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x40c3c0
add byte [edi + 0x5a], bl
push rbx
je 0x40c39d
je 0x40c3d1
jb 0x40c3d0
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c3a8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c3ef
push rax
jbe 0x40c400
jbe 0x40c3d2
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jo 0x40c411
jb 0x40c403
pop rdi
jbe 0x40c40a
jb 0x40c417
jne 0x40c406
insb byte [rdi], dx
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x40c42f
jo 0x40c432
je 0x40c412
je 0x40c433
imul ebp, dword [rsi + 0x67], 0x76453244
add byte [rdi + 0x5a], bl
push rbx
je 0x40c400
pop rdi
push rbx
jo 0x40c433
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40c43f
pop rdi
jae 0x40c445
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c449
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40c466
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jb 0x40c46b
insb byte [rdi], dx
jae 0x40c470
jbe 0x40c40e
insd dword [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c47a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x65726600
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x375a5f00
jae 0x40c4a0
je 0x40c483
imul ebp, dword [rsp + rbp*2 + 0x63], 0x4e5a5f00
xor dword [rax], esi
jne 0x40c4be
jo 0x40c4c1
je 0x40c494
imul ebp, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
jae 0x40c4c0
je 0x40c49f
jae 0x40c4c5
push 0
pop rdi
pop rdi
jae 0x40c4da
pop rdi
jae 0x40c4de
jb 0x40c4e1
add byte [rbx + 0x6c], ah
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3032
jae 0x40c501
pop rdi
movsxd rbp, dword [rcx + 0x73]
jae 0x40c4fe
je 0x40c51a
jo 0x40c508
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rsp
push rbx
je 0x40c4f4
je 0x40c528
jb 0x40c527
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40c537
pop rdi
jae 0x40c535
add byte [r15 + 0x5f], r11b
jae 0x40c54a
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x40c52c
je 0x40c560
jb 0x40c55f
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40c56f
pop rdi
jae 0x40c56d
add byte [r15 + 0x5a], r11b
push rsp
xor qword [r9], rsi
outsb dx, byte [rsi]
jo 0x40c589
je 0x40c55a
jbe 0x40c582
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40c553
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40c577
xor dword [rax], esi
jne 0x40c5a7
jo 0x40c5aa
je 0x40c57d
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40c5b0
je 0x40c5a5
insb byte [rdi], dx
je 0x40c5b1
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40c593
jbe 0x40c5c4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40c59b
jo 0x40c5ca
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40c5ec
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40c604
push r10
push rdx
imul eax, dword [rbp + 0x45], 0x70447645
push r12
pop rdi
add byte [rbp + 0x65], ch
insd dword [rdi], dx
movsxd rbp, dword [rbp + 0x70]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rbx
xor dword [rax], esi
jne 0x40c62d
jo 0x40c630
je 0x40c603
imul ebp, dword [rbp], 0x534e5a5f
je 0x40c5fe
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c63d
movsxd rbx, dword [rdi + 0x73]
je 0x40c64b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c646
je 0x40c65b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
jo 0x40c66d
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40c64e
xor ebx, dword [rdi + 0x53]
jo 0x40c680
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40c68c
pop rdi
jo 0x40c69f
jb 0x40c68c
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40c66f
je 0x40c6a3
jb 0x40c6a2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c67a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c6c1
push rax
jbe 0x40c6d2
jbe 0x40c6a4
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c6d1
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40c6ee
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
imul esi, dword fs:[rbx + 0x70], 0x4565736f
jbe 0x40c696
movsxd rbp, dword [rdi + rbp*2 + 0x73]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x375a5f00
insd dword [rdi], dx
js 0x40c705
jae 0x40c728
jbe 0x40c6b6
pop rdi
pop rdx
push rbx
je 0x40c6ed
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40c711
cmp byte [rbp + 0x73], dl
je 0x40c711
jae 0x40c736
push rbx
je 0x40c705
xor al, 0x64
jne 0x40c747
je 0x40c73c
insb byte [rdi], dx
je 0x40c748
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x75], ch
je 0x40c762
jne 0x40c768
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x40c741
jae 0x40c766
xor eax, 0x766c6f73
jbe 0x40c70a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40c75c
pop rdi
pop rdi
je 0x40c798
jb 0x40c7a1
ja 0x40c793
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
ja 0x40c7c3
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [rip + 0x64634b5f], esi
jbe 0x40c7a8
jo 0x40c7b5
push rsp
pop rdi
add byte [rbx + 0x74], dh
jb 0x40c7e1
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x315a5f00
xor dh, byte [rbx + 0x65]
je 0x40c7d5
jb 0x40c7ec
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x5a5f006a
xor qword [rax], r14
jne 0x40c80b
jo 0x40c80e
je 0x40c7e1
imul ebp, dword [rbp + 0x31], 0x69727733
je 0x40c80a
push rsp
outsd dx, dword [rsi]
jbe 0x40c814
movsxd rsp, dword [rbp + 0x45]
push 0
pop rdi
pop rdx
push rsp
push rbx
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x40c82f
je 0x40c800
jbe 0x40c828
movsxd rsp, dword [rbp]
pop rdi
pop rdi
jo 0x40c83a
push 0x64616572
pop rdi
imul esp, dword [rbp + 0x79], 0x5f
movsxd rsi, dword [rdx + 0x65]
je 0x40c83b
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x635f5f00
js 0x40c84a
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40c83a
xor ebx, dword [rdi + 0x53]
jo 0x40c86c
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40c878
pop rdi
jo 0x40c88b
jb 0x40c878
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40c85b
je 0x40c88f
jb 0x40c88e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c866
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c8ad
push rax
jbe 0x40c8be
jbe 0x40c890
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c8bd
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40c8da
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rsi + 0x77], ah
jb 0x40c8e5
je 0x40c8e3
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x68747000
jb 0x40c8f6
pop rdi
insd dword [rdi], dx
jne 0x40c90b
js 0x40c8f9
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40c8e8
jbe 0x40c919
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40c8f2
je 0x40c926
jb 0x40c925
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40c907
xor ebx, dword [rdi + 0x53]
jo 0x40c939
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40c945
pop rdi
jo 0x40c958
jb 0x40c945
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40c928
je 0x40c95c
jb 0x40c95b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c933
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c97a
push rax
jbe 0x40c98b
jbe 0x40c95d
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c98a
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40c9a7
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x40c9bd
jb 0x40c9ba
jns 0x40c992
jbe 0x40c94f
pop rdi
je 0x40c9b6
add byte [rdi + 0x5f], bl
js 0x40c9d3
pop rdi
jo 0x40c9c3
jb 0x40c9d3
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40c9b3
jbe 0x40c9e4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40c9bd
je 0x40c9f1
jb 0x40c9f0
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40ca0a
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40ca22
push r10
jbe 0x40ca26
jbe 0x40c9fa
jo 0x40ca07
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c9f7
jbe 0x40ca28
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40ca03
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ca42
movsxd rbx, dword [rdi + 0x73]
je 0x40ca50
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ca4b
je 0x40ca60
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
pop rdi
pop r15
jne 0x40ca7b
je 0x40ca70
jo 0x40ca84
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x40ca8c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40ca69
je 0x40ca9d
jb 0x40ca9c
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40ca74
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40cabb
push rax
jbe 0x40cacc
jbe 0x40ca9e
pop rdi
pop r15
jb 0x40cad6
outsb dx, byte [rsi]
jbe 0x40ca65
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40cad3
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40cae6
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40cab5
xor ebx, dword [rdi + 0x53]
jo 0x40cae7
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40caf3
pop rdi
jo 0x40cb06
jb 0x40caf3
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40cad6
je 0x40cb0a
jb 0x40cb09
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40cae1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40cb28
push rax
jbe 0x40cb39
jbe 0x40cb0b
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40cb38
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40cb55
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
jae 0x40cb71
jb 0x40cb3f
xor eax, 0x31787863
xor dword [rax], eax
jo 0x40cb7a
push 0x64616572
pop rdi
insd dword [rdi], dx
jne 0x40cb83
js 0x40cb71
jne 0x40cb82
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40cb5d
pop rdi
push rbx
jo 0x40cb90
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40cb9c
pop rdi
jae 0x40cba2
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40cba6
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40cbc3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x40cbd9
jb 0x40cbd6
jns 0x40cbae
jbe 0x40cb6b
insd dword [rdi], dx
imul ebp, dword [rsi], 0x756c6666
jae 0x40cbde
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x676f6c00
jae 0x40cb89
add byte [rsi], ch
jae 0x40cc06
insd dword [rdi], dx
je 0x40cbf1
add byte [rsi], ch
jae 0x40cc09
jb 0x40cc0b
add byte [rsi], ch
jae 0x40cc05
jae 0x40cc13
jb 0x40cc15
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40cc16
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40cc24
outsb dx, byte cs:[esi]
jne 0x40cbf2
jne 0x40cc30
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40cc00
push 0x687361
jns 0x40cc49
jae 0x40cc56
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40cc51
jae 0x40cc59
jb 0x40cbe7
outsb dx, byte cs:[esi]
jne 0x40cc1a
jbe 0x40cc53
jb 0x40cc63
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40cc27
jbe 0x40cc60
jb 0x40cc70
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40cc6b
insb byte [rdi], dx
jns 0x40cc7a
add byte [rsi], ch
jb 0x40cc75
insb byte [rdi], dx
jo 0x40cc81
je 0x40cc17
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40cc50
outsd dx, dword [esi]
je 0x40cc26
je 0x40cc8e
js 0x40cc9f
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40cca4
je 0x40cc9a
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40ccbd
jo 0x40ccd1
pop rdi
je 0x40ccc1
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40cccf
jns 0x40cc70
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40cceb
jns 0x40cc7c
push 0x63
jb 0x40cc81
jns 0x40ccf3
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40ccfd
je 0x40cc93
je 0x40ccf9
add byte [rsi], ch
jae 0x40cd10
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40cca7
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40cdfc
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 4], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xb], ch
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xb], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
ror byte [rbx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x40ceea
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xa00000000000400c]
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rip], cl
add byte [rax], al
test al, 3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4010], ch
add byte [rax], al
add byte [rax + 0x10], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
adc byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x13], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x13], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x13], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x13], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
jg 0x40d0bb
add byte [rax], al
add byte [rax], al
add ah, dh
jg 0x40d083
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
sbb byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rsi + 0x40], al
add byte [rax], al
sbb byte [rsi], al
add byte [rax], al
insb byte [rdi], dx
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4087], cl
add byte [rax], al
add byte [rax + 0x87], cl
add byte [rax], al
add byte [rax + rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx*4 + 0x40], bh
add byte [rax], al
mov esp, 0x8f
add byte [rax], al
add byte [rcx + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
popfq
add byte [rax], al
add byte [rax], al
add al, bl
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
popfq
add byte [rax], al
add byte [rax], al
add al, ch
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
popfq
add byte [rax], al
add byte [rax], al
add al, dh
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
popfq
add byte [rax], al
add byte [rax], al
add al, bh
popfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
lahf
add byte [rax], al
add byte [rax], al
add al, bh
lahf
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], ah
add byte [rax], al
push rax
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x5f], dl
add byte [rax], al
add byte [rax], al
add byte [rax - 0x5f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0xa160000000000060]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add qword [rax], rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x5f], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, ecx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa1], bl
add byte [rax], al
add byte [rax + 0x12], ch
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x4c], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
