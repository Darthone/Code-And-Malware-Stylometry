xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6131bf
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x401870
mov eax, 0
test rax, rax
je 0x401870
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x4018b8
mov eax, 0
test rax, rax
je 0x4018b8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x2119c1], 0
jne 0x4018da
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x2119ae], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x4018f0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x4018eb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
mov rax, qword [rip + 0x9fb7]
test rax, rax
setne al
movzx eax, al
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.imp.pthread_equal
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
call sym.__gthread_active_p
test eax, eax
setne al
test al, al
je 0x401969
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.imp.pthread_mutex_lock
jmp 0x40196e
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
call sym.__gthread_active_p
test eax, eax
setne al
test al, al
je 0x401998
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.imp.pthread_mutex_unlock
jmp 0x40199d
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lock xadd dword [rax], edx
mov eax, edx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov rax, qword [rbp - 0x18]
mov eax, dword [rax]
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov edx, dword [rax]
mov eax, dword [rbp - 0x1c]
add edx, eax
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
mov eax, dword [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
call sym.__gthread_active_p
test eax, eax
setne al
test al, al
je 0x401a13
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, edx
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add
jmp 0x401a24
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, edx
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add_single
leave
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov eax, dword [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
cmp dword [rbp - 4], 1
jbe 0x401a58
cmp dword [rbp - 4], 0x24
jbe 0x401a71
mov ecx, str.Detail::Base_setBase_uint_
mov edx, 0x5f
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_2_0_source.cpp
mov edi, str.2____value____value____36
call sym.imp.__assert_fail
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
cmp dword [rbp - 4], 0x7f
jbe 0x401aa0
mov ecx, str.Detail::Precision_setPrecision_uint_
mov edx, 0x60
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_2_0_source.cpp
mov edi, str.value___MAX_LENGTH
call sym.imp.__assert_fail
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edi, obj.inputMutex
call sym.std::mutex::lock
mov edx, dword [rip + 0x21180b]
mov eax, dword [rip + 0x211809]
cmp edx, eax
jl 0x401b0a
mov edi, obj.inputMutex
call sym.std::mutex::unlock
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x401c07
jmp 0x401c02
mov eax, dword [rip + 0x2117d8]
lea edx, [rax + 1]
mov dword [rip + 0x2117cf], edx
mov dword [rbp - 0x24], eax
mov eax, dword [rbp - 0x24]
add eax, 1
mov dword [rbp - 0x20], eax
lea rax, [rbp - 0x20]
mov edx, 0x40b78f
mov rsi, rax
mov edi, 0x40b798
call sym.writeln_charconst____6__int_charconst____9__
mov edi, 0x18828
call sym.operatornew
mov rbx, rax
mov rdi, rbx
call sym.TestCase::TestCase
lea rax, [rbp - 0x20]
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::unique_ptr
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::input
mov edi, obj.inputMutex
call sym.std::mutex::unlock
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solve
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rbx, [rax + 0x18800]
mov eax, dword [rbp - 0x24]
cdqe
mov rsi, rax
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
jmp 0x401acd
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov dword [rbp - 0x14], edi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov eax, dword [rbp - 0x14]
add eax, 1
mov dword [rbp - 0xc], eax
mov edi, obj.output
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0xc]
mov r9d, 0x40b79e
mov r8, rdx
mov ecx, 0x40b7a0
mov rdx, rax
mov esi, str.Case__
call sym.OutputDevice::write_charconst____7__int_charconst____3__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edi, obj.output
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401c8e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x54], 0
cmp dword [rbp - 0x54], 0x63
jg 0x401de7
mov edi, 0x18828
call sym.operatornew
mov rbx, rax
mov rdi, rbx
call sym.TestCase::TestCase
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::unique_ptr
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rcx, rax
mov eax, dword [rbp - 0x54]
mov edx, eax
mov esi, 0
mov rdi, rcx
call sym.TestCase::generate
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solve
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rdx, [rax + 0x18800]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solveSlow
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rdx, [rax + 0x18800]
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
test al, al
je 0x401dc6
mov eax, dword [rbp - 0x54]
add eax, 1
mov dword [rbp - 0x58], eax
lea rax, [rbp - 0x58]
mov rsi, rax
mov edi, str.Error_on_test__
call sym.writeln_charconst____16__int_
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
add rax, 0x18800
mov rsi, rax
mov edi, str.Expected:_n
call sym.writeln_charconst____11__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
lea rax, [rbp - 0x40]
mov rsi, rax
mov edi, str.Received:_n
call sym.writeln_charconst____11__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
add dword [rbp - 0x54], 1
jmp 0x401cb1
call sym.imp.clock
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rip + 0x9b73]
divsd xmm0, xmm1
movsd qword [rbp - 0x50], xmm0
lea rax, [rbp - 0x50]
mov rsi, rax
mov edi, str._n_nTest_time:
call sym.writeln_charconst____14__double_
mov edi, 0
call sym.imp.exit
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401e4b
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x24], 0
cmp dword [rbp - 0x24], 0x63
jg 0x401f1b
mov edi, 0x18828
call sym.operatornew
mov rbx, rax
mov rdi, rbx
call sym.TestCase::TestCase
lea rax, [rbp - 0x20]
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::unique_ptr
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rcx, rax
mov eax, dword [rbp - 0x24]
mov edx, eax
mov esi, 1
mov rdi, rcx
call sym.TestCase::generate
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
mov rdi, rax
call sym.TestCase::solve
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::operator__
lea rdx, [rax + 0x18800]
mov eax, dword [rbp - 0x24]
mov rsi, rdx
mov edi, eax
call sym.writeAnswer
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
add dword [rbp - 0x24], 1
jmp 0x401e83
call sym.imp.clock
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rip + 0x9a3f]
divsd xmm0, xmm1
movsd qword [rbp - 0x20], xmm0
lea rax, [rbp - 0x20]
mov rsi, rax
mov edi, str._n_nTest_time:
call sym.writeln_charconst____14__double_
mov edi, 0
call sym.imp.exit
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edi, 0x1030
call sym.operatornew
mov rbx, rax
mov esi, str.C_small_attempt0.in
mov rdi, rbx
call 0x40285e
mov rsi, rbx
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::reset
mov edi, 0x10e8
call sym.operatornew
mov rbx, rax
mov esi, str.output.txt
mov rdi, rbx
call 0x403168
mov rsi, rbx
mov edi, obj.output
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::reset
mov edi, 0x10e8
call sym.operatornew
mov rbx, rax
mov rax, qword [rip + 0x21127f]
mov edx, 0
mov rsi, rax
mov rdi, rbx
call sym.OutputFile::OutputFile
mov rsi, rbx
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::reset
mov edi, 4
call sym.setPrecision
mov ebx, eax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov esi, ebx
mov rdi, rax
call 0x402ff8
mov dword [rip + 0x2112a0], 0
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::operator__
mov esi, obj.testCount
mov rdi, rax
call sym.InputDevice::read_int_
mov eax, dword [rip + 0x211287]
cdqe
mov rsi, rax
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::resize
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::vector
mov dword [rbp - 0x68], 0
call sym.std::thread::hardware_concurrency
mov edx, eax
mov eax, dword [rbp - 0x68]
cmp edx, eax
seta al
test al, al
je 0x4020b1
lea rax, [rbp - 0x30]
mov esi, sym.work
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::emplace_back_void______
add dword [rbp - 0x68], 1
jmp 0x402087
lea rax, [rbp - 0x30]
mov qword [rbp - 0x40], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::begin
mov qword [rbp - 0x60], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::end
mov qword [rbp - 0x50], rax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::thread__std::vector_std::thread_std::allocator_std::thread___
test al, al
je 0x40211a
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::operator_
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::thread::join
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::operator__
jmp 0x4020d9
mov dword [rbp - 0x64], 0
mov eax, dword [rip + 0x2111c5]
cmp dword [rbp - 0x64], eax
jge 0x402154
mov eax, dword [rbp - 0x64]
cdqe
mov rsi, rax
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rdx, rax
mov eax, dword [rbp - 0x64]
mov rsi, rdx
mov edi, eax
call sym.writeAnswer
add dword [rbp - 0x64], 1
jmp 0x402121
call sym.imp.clock
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rip + 0x9806]
divsd xmm0, xmm1
movsd qword [rbp - 0x50], xmm0
lea rax, [rbp - 0x50]
mov rsi, rax
mov edi, str._n_nTotal_time:
call sym.writeln_charconst____15__double_
mov ebx, 0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_vector
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x402209
jmp 0x402204
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rax, r12
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x60
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x4022ab
cmp dword [rbp - 8], 0xffff
jne 0x4022ab
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
mov edx, obj.__dso_handle
mov esi, obj.input
mov edi, sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::_unique_ptr
call sym.imp.__cxa_atexit
mov edx, obj.__dso_handle
mov esi, obj.output
mov edi, sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::_unique_ptr
call sym.imp.__cxa_atexit
mov edx, obj.__dso_handle
mov esi, obj.logs
mov edi, sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::_unique_ptr
call sym.imp.__cxa_atexit
mov edi, obj.answer_abi:cxx11_
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::vector
mov edx, obj.__dso_handle
mov esi, obj.answer_abi:cxx11_
mov edi, sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x18], 0
jne 0x4022e5
mov eax, 0
jmp 0x4022fc
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.imp.memcmp
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax + 8]
cmp rdx, rax
je 0x402373
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
movzx eax, byte [rax]
cmp al, 0x2a
je 0x40237a
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rsi, rdx
mov rdi, rax
call sym.imp.strcmp
test eax, eax
jne 0x40237a
mov eax, 1
jmp 0x40237f
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd xmm1, qword [rbp - 8]
movsd xmm0, qword [rip + 0x95b9]
andpd xmm0, xmm1
ucomisd xmm0, qword [rip + 0x95bd]
setbe al
xor eax, 1
pop rbp
ret
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd xmm0, qword [rbp - 8]
ucomisd xmm0, qword [rbp - 8]
setp al
pop rbp
ret
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd xmm0, qword [rbp - 8]
movmskpd eax, xmm0
and eax, 1
test eax, eax
setne al
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gthread_equal
test eax, eax
setne al
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::id::id
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::thread::swap
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::joinable
test al, al
je 0x402473
call sym.std::terminate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::thread::id_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::thread::id::id
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, qword [rax]
call sym.std::operator__
xor eax, 1
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4024ed
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::___shared_count
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_base____gnu_cxx::_Lock_policy_2_::___shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x40bab8
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::_shared_ptr
mov eax, 0
test eax, eax
je 0x402569
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_Impl_base::__Impl_base
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gthread_mutex_lock
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0
je 0x4025bd
mov eax, dword [rbp - 4]
mov edi, eax
call sym.std::__throw_system_error
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gthread_mutex_unlock
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov edx, 0x40baa0
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
mov edi, 0xa
call sym.setBase
mov edx, eax
mov rax, qword [rbp - 8]
mov dword [rax + 0x18], edx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
setae al
movzx eax, al
test rax, rax
je 0x402667
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 8]
mov qword [rdx + 8], rcx
movzx eax, byte [rax]
leave
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 9
cmp al, 4
jbe 0x40269a
cmp byte [rbp - 4], 0x20
jne 0x4026a1
mov eax, 1
jmp 0x4026a6
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 0x30
cmp al, 9
setbe al
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 0x41
cmp al, 0x19
setbe al
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, edi
mov byte [rbp - 4], al
movzx eax, byte [rbp - 4]
sub eax, 0x61
cmp al, 0x19
setbe al
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov esi, sym.InputDevice::isSpace
mov rdi, rax
call sym.InputDevice::skipCharacters_bool____char__
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov eax, 1
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x2a]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x18]
mov byte [rax + 0x2a], 0
mov rax, qword [rbp - 0x18]
movzx eax, byte [rax + 0x28]
xor eax, 1
movzx eax, al
test rax, rax
je 0x40278e
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x20]
mov rdx, qword [rbp - 0x18]
lea rdi, [rdx + 0x2a]
mov rcx, rax
mov edx, 0x1000
mov esi, 1
call sym.imp.fread
lea rdx, [rbx + rax]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
jmp 0x4027ed
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x20]
mov rdx, qword [rbp - 0x18]
lea rcx, [rdx + 0x2a]
mov rdx, rax
mov esi, 0x1000
mov rdi, rcx
call sym.imp.fgets
test rax, rax
setne al
test al, al
je 0x4027ed
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x10]
movzx eax, byte [rax]
test al, al
je 0x4027ed
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x10]
lea rdx, [rax + 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
jmp 0x4027c8
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov eax, ecx
mov byte [rbp - 0x14], dl
mov byte [rbp - 0x18], al
mov rax, qword [rbp - 8]
lea rdx, [rax + 0x2a]
mov rax, qword [rbp - 8]
lea rcx, [rax + 0x2a]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::InputDevice
mov edx, 0x40ba88
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 0x20], rdx
mov rax, qword [rbp - 8]
movzx edx, byte [rbp - 0x14]
mov byte [rax + 0x28], dl
mov rax, qword [rbp - 8]
movzx edx, byte [rbp - 0x18]
mov byte [rax + 0x29], dl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, str.r_w__________________
mov rdi, rax
call sym.imp.fopen
mov rsi, rax
mov rax, qword [rbp - 8]
mov ecx, 1
mov edx, 0
mov rdi, rax
call sym.InputFile::InputFile
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x40ba88
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
movzx eax, byte [rax + 0x29]
test al, al
je 0x4028d0
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x20]
mov rdi, rax
call sym.imp.fclose
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edx, 0x40ba60
mov rax, qword [rbp - 0x28]
mov qword [rax], rdx
mov rax, qword [rbp - 0x28]
lea rdx, [rax + 8]
mov rax, qword [rbp - 0x28]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x28]
add rax, 8
lea rdx, [rax + 0x1080]
mov rax, qword [rbp - 0x28]
mov qword [rax + 0x1090], rdx
mov rax, qword [rbp - 0x28]
mov byte [rax + 0x1098], 0
mov edi, 0
call sym.setWidth
mov edx, eax
mov rax, qword [rbp - 0x28]
mov dword [rax + 0x109c], edx
mov edi, 0x20
call sym.setFill
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax + 0x10a0], dl
mov edi, 0xa
call sym.setBase
mov edx, eax
mov rax, qword [rbp - 0x28]
mov dword [rax + 0x10a4], edx
mov edi, 9
call sym.setPrecision
mov edx, eax
mov rax, qword [rbp - 0x28]
mov dword [rax + 0x10a8], edx
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::allocator
mov edi, 0x40b78b
call sym.setDelimiter
mov rsi, rax
mov rax, qword [rbp - 0x28]
lea rcx, [rax + 0x10b8]
lea rax, [rbp - 0x19]
mov rdx, rax
mov rdi, rcx
call 0x4016b0
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.OutputDevice::computeBasePower
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402a08
jmp 0x402a03
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x1088]
mov rdx, qword [rbp - 8]
add rdx, 8
add rdx, 0x1000
cmp rax, rdx
setae al
movzx eax, al
test rax, rax
je 0x402a97
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov esi, 0x1000
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x1088]
mov rcx, qword [rbp - 8]
add rcx, 8
add rcx, 0x1000
mov rsi, rax
mov rdi, rcx
call sym.std::copy_char__char__
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x1088], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10b0], 1
mov dword [rbp - 4], 0
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a8]
cmp eax, dword [rbp - 4]
jbe 0x402af3
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x10b0]
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
mov eax, eax
imul rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10b0], rdx
add dword [rbp - 4], 1
jmp 0x402ab8
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
movzx eax, byte [rax + 0x1098]
test al, al
je 0x402b23
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::writeDelimiter
jmp 0x402b28
mov eax, 0
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov byte [rax + 0x1098], 1
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1090]
mov rdx, rax
mov rax, qword [rbp - 0x20]
sub rdx, rax
mov rax, rdx
mov dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
cmp eax, dword [rbp - 8]
seta al
movzx eax, al
test rax, rax
je 0x402b89
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
sub eax, dword [rbp - 8]
mov edx, eax
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::writeFill
add dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x1088]
mov rax, qword [rbp - 0x18]
mov rcx, qword [rax + 0x1090]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_char__char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov edx, dword [rbp - 8]
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov eax, dword [rbp - 0x1c]
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov edx, dword [rbp - 0x1c]
sub rdx, -0x80
add rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1090]
cmp rdx, rax
setb al
movzx eax, al
test rax, rax
je 0x402c7d
cmp dword [rbp - 0x1c], 1
jne 0x402c47
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 0x18]
mov qword [rdx + 0x1088], rcx
mov rdx, qword [rbp - 0x18]
movzx edx, byte [rdx + 0x10a0]
mov byte [rax], dl
jmp 0x402d08
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x10a0]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov ecx, dword [rbp - 0x1c]
mov esi, ecx
mov rdi, rax
call sym.std::fill_n_char__unsignedint_char_
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
jmp 0x402d08
mov rax, qword [rbp - 0x18]
add rax, 8
add rax, 0x1000
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
sub rdx, rax
mov rax, rdx
mov dword [rbp - 8], eax
mov eax, dword [rbp - 8]
cmp eax, dword [rbp - 0x1c]
jbe 0x402cb0
mov eax, dword [rbp - 0x1c]
mov dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x10a0]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov ecx, dword [rbp - 8]
mov esi, ecx
mov rdi, rax
call sym.std::fill_n_char__unsignedint_char_
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov eax, dword [rbp - 8]
sub dword [rbp - 0x1c], eax
cmp dword [rbp - 0x1c], 0
sete al
test al, al
jne 0x402d07
mov dword [rbp - 8], 0x1000
jmp 0x402ca2
nop
mov eax, dword [rbp - 4]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x40ba60
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 0x10b8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov eax, 0
test eax, eax
je 0x402d4d
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::_OutputDevice
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov eax, esi
mov byte [rbp - 0xc], al
mov rax, qword [rbp - 8]
mov byte [rax + 0x1098], 0
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x1088]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 8]
mov qword [rdx + 0x1088], rcx
movzx edx, byte [rbp - 0xc]
mov byte [rax], dl
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov eax, ecx
mov byte [rbp - 0x2c], al
mov rax, qword [rbp - 0x18]
mov byte [rax + 0x1098], 0
mov rax, qword [rbp - 0x28]
mov dword [rbp - 0xc], eax
cmp byte [rbp - 0x2c], 0
je 0x402e27
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
cmp eax, dword [rbp - 0xc]
jbe 0x402e27
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x109c]
sub eax, dword [rbp - 0xc]
mov edx, eax
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::writeFill
mov edx, eax
jmp 0x402e2c
mov edx, 0
mov eax, dword [rbp - 0xc]
add eax, edx
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
mov edx, dword [rbp - 0xc]
sub rdx, -0x80
add rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1090]
cmp rdx, rax
setb al
movzx eax, al
test rax, rax
je 0x402ebf
cmp dword [rbp - 0xc], 1
jne 0x402e90
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
lea rcx, [rax + 1]
mov rdx, qword [rbp - 0x18]
mov qword [rdx + 0x1088], rcx
mov rdx, qword [rbp - 0x20]
movzx edx, byte [rdx]
mov byte [rax], dl
jmp 0x402f4a
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x1088]
mov ecx, dword [rbp - 0xc]
mov rax, qword [rbp - 0x20]
mov esi, ecx
mov rdi, rax
call sym.std::copy_n_charconst__unsignedint_char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
jmp 0x402f4a
mov rax, qword [rbp - 0x18]
add rax, 8
add rax, 0x1000
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x1088]
sub rdx, rax
mov rax, rdx
mov dword [rbp - 8], eax
mov eax, dword [rbp - 8]
cmp eax, dword [rbp - 0xc]
jbe 0x402ef2
mov eax, dword [rbp - 0xc]
mov dword [rbp - 8], eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x1088]
mov ecx, dword [rbp - 8]
mov rax, qword [rbp - 0x20]
mov esi, ecx
mov rdi, rax
call sym.std::copy_n_charconst__unsignedint_char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x1088], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::flushMaybe
mov eax, dword [rbp - 8]
sub dword [rbp - 0xc], eax
cmp dword [rbp - 0xc], 0
sete al
test al, al
jne 0x402f49
mov eax, dword [rbp - 8]
add qword [rbp - 0x20], rax
mov dword [rbp - 8], 0x1000
jmp 0x402ee4
nop
mov eax, dword [rbp - 4]
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
add rax, 0x10b8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x10b8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rsi, rax
mov rax, qword [rbp - 0x18]
mov ecx, 0
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::writeString
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdx, qword [rdx + 0x1088]
mov rcx, rdx
mov rdx, qword [rbp - 8]
add rdx, 8
sub rcx, rdx
mov rdx, rcx
mov ecx, edx
mov rdx, qword [rbp - 8]
mov esi, ecx
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 0x1088], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0x10], esi
mov edx, dword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov dword [rax + 0x10a8], edx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::computeBasePower
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov eax, esi
mov byte [rbp - 0xc], al
movsx edx, byte [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::writeChar
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.imp.strlen
mov rdx, rax
mov rsi, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov ecx, 1
mov rdi, rax
call sym.OutputDevice::writeString
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rsi, rax
mov rax, qword [rbp - 0x18]
mov ecx, 1
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::writeString
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 0x10d8]
mov eax, dword [rbp - 0xc]
mov rcx, qword [rbp - 8]
lea rdi, [rcx + 8]
mov rcx, rdx
mov rdx, rax
mov esi, 1
call sym.imp.fwrite
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10d8]
mov rdi, rax
call sym.imp.fflush
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov eax, edx
mov byte [rbp - 0x14], al
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::OutputDevice
mov edx, 0x40ba38
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 0x10d8], rdx
mov rax, qword [rbp - 8]
movzx edx, byte [rbp - 0x14]
mov byte [rax + 0x10e0], dl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, 0x40b78d
mov rdi, rax
call sym.imp.fopen
mov rcx, rax
mov rax, qword [rbp - 8]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call sym.OutputFile::OutputFile
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x40ba38
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::flush
mov rax, qword [rbp - 8]
movzx eax, byte [rax + 0x10e0]
test al, al
je 0x4031ea
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10d8]
mov rdi, rax
call sym.imp.fclose
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::_OutputDevice
mov eax, 0
test eax, eax
je 0x40320b
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputFile::_OutputFile
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lea rcx, [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10d8]
mov rsi, rcx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::OutputDevice
mov edx, 0x40ba10
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 0x10d8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x40ba10
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::flush
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputDevice::_OutputDevice
mov eax, 0
test eax, eax
je 0x4032e7
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.OutputString::_OutputString
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
lea rdx, [rax + 4]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.read_int__int__
mov dword [rbp - 0x18], 0
mov rax, qword [rbp - 0x28]
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov eax, dword [rbp - 0x18]
cmp eax, dword [rbp - 0xc]
jge 0x403390
mov eax, dword [rbp - 0x18]
cdqe
add rax, 0x70
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rdx
lea rdx, [rax + 4]
mov eax, dword [rbp - 0x18]
cdqe
lea rcx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rcx
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.read_int__int__
add dword [rbp - 0x18], 1
jmp 0x403343
mov dword [rbp - 0x14], 0
mov rax, qword [rbp - 0x28]
mov eax, dword [rax]
mov dword [rbp - 8], eax
mov eax, dword [rbp - 0x14]
cmp eax, dword [rbp - 8]
jge 0x4033d8
mov rax, qword [rbp - 0x28]
mov edx, dword [rbp - 0x14]
movsxd rdx, edx
imul rdx, rdx, 0x378
lea rcx, [rdx + 0x380]
mov rdx, qword [rbp - 0x28]
add rdx, rcx
mov rsi, rax
mov rdi, rdx
call sym.read_longlong____111__int__
add dword [rbp - 0x14], 1
jmp 0x4033a0
mov dword [rbp - 0x10], 0
mov rax, qword [rbp - 0x28]
mov eax, dword [rax + 4]
mov dword [rbp - 4], eax
mov eax, dword [rbp - 0x10]
cmp eax, dword [rbp - 4]
jge 0x40343e
mov eax, dword [rbp - 0x10]
cdqe
add rax, 0x6190
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rdx
lea rdx, [rax + 4]
mov eax, dword [rbp - 0x10]
cdqe
add rax, 0x6120
lea rcx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rcx
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.read_int__int__
add dword [rbp - 0x10], 1
jmp 0x4033e9
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x50
mov qword [rbp - 0x48], rdi
mov eax, esi
mov dword [rbp - 0x50], edx
mov byte [rbp - 0x4c], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul_::linear_congruential_engine_int_void_
lea rax, [rbp - 0x40]
mov edx, 9
mov esi, 0
mov rdi, rax
call sym.std::uniform_int_distribution_int_::uniform_int_distribution
lea rax, [rbp - 0x20]
lea rdx, [rbp - 0x30]
lea rcx, [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::bind_std::uniform_int_distribution_int__std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4034ba
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x18820
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_vector
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0xc8
mov qword [rbp - 0xc8], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0xb8], 0
mov rax, qword [rbp - 0xc8]
mov eax, dword [rax]
mov dword [rbp - 0xa8], eax
mov eax, dword [rbp - 0xb8]
cmp eax, dword [rbp - 0xa8]
jge 0x4037b6
mov dword [rbp - 0xb4], 0
mov rax, qword [rbp - 0xc8]
mov eax, dword [rax]
mov dword [rbp - 0xa4], eax
mov eax, dword [rbp - 0xb4]
cmp eax, dword [rbp - 0xa4]
jge 0x4037aa
mov dword [rbp - 0xb0], 0
mov rax, qword [rbp - 0xc8]
mov eax, dword [rax]
mov dword [rbp - 0xa0], eax
mov eax, dword [rbp - 0xb0]
cmp eax, dword [rbp - 0xa0]
jge 0x40379e
mov rsi, qword [rbp - 0xc8]
mov eax, dword [rbp - 0xb8]
movsxd rdi, eax
mov eax, dword [rbp - 0xb4]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, rdi
add rax, 0x70
mov rax, qword [rsi + rax*8]
cmp rax, -1
je 0x403792
mov rsi, qword [rbp - 0xc8]
mov eax, dword [rbp - 0xb0]
movsxd rdi, eax
mov eax, dword [rbp - 0xb8]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, rdi
add rax, 0x70
mov rax, qword [rsi + rax*8]
cmp rax, -1
je 0x403792
mov rsi, qword [rbp - 0xc8]
mov eax, dword [rbp - 0xb8]
movsxd rdi, eax
mov eax, dword [rbp - 0xb4]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, rdi
add rax, 0x70
mov rdi, qword [rsi + rax*8]
mov rsi, qword [rbp - 0xc8]
mov eax, dword [rbp - 0xb0]
movsxd r8, eax
mov eax, dword [rbp - 0xb8]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, r8
add rax, 0x70
mov rax, qword [rsi + rax*8]
add rax, rdi
mov qword [rbp - 0x88], rax
mov rsi, qword [rbp - 0xc8]
mov eax, dword [rbp - 0xb0]
movsxd rdi, eax
mov eax, dword [rbp - 0xb4]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, rdi
add rax, 0x70
mov rax, qword [rsi + rax*8]
cmp rax, -1
je 0x40374c
mov rsi, qword [rbp - 0xc8]
mov eax, dword [rbp - 0xb0]
movsxd rdi, eax
mov eax, dword [rbp - 0xb4]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, rdi
add rax, 0x70
mov rax, qword [rsi + rax*8]
cmp rax, qword [rbp - 0x88]
jle 0x403792
mov rsi, qword [rbp - 0xc8]
mov eax, dword [rbp - 0xb0]
movsxd rdi, eax
mov eax, dword [rbp - 0xb4]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, rdi
lea rdx, [rax + 0x70]
mov rax, qword [rbp - 0x88]
mov qword [rsi + rdx*8], rax
add dword [rbp - 0xb0], 1
jmp 0x403593
add dword [rbp - 0xb4], 1
jmp 0x403568
add dword [rbp - 0xb8], 1
jmp 0x40353d
mov dword [rbp - 0xac], 0
mov rax, qword [rbp - 0xc8]
mov eax, dword [rax + 4]
mov dword [rbp - 0x9c], eax
mov eax, dword [rbp - 0xac]
cmp eax, dword [rbp - 0x9c]
jge 0x403b9e
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_double_::allocator
movsd xmm0, qword [rip + 0x8172]
movsd qword [rbp - 0x40], xmm0
mov rax, qword [rbp - 0xc8]
mov eax, dword [rax]
movsxd rsi, eax
lea rcx, [rbp - 0x60]
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::vector
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_double_::_allocator
mov rax, qword [rbp - 0xc8]
mov edx, dword [rbp - 0xac]
movsxd rdx, edx
add rdx, 0x6120
mov eax, dword [rax + rdx*4 + 8]
sub eax, 1
mov dword [rbp - 0xc0], eax
mov eax, dword [rbp - 0xc0]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
pxor xmm0, xmm0
movsd qword [rax], xmm0
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::vector
lea rdx, [rbp - 0x60]
lea rcx, [rbp - 0x90]
lea rax, [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::priority_queue
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_vector
mov eax, dword [rbp - 0xc0]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rcx, rax
lea rdx, [rbp - 0xc0]
lea rax, [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::emplace_double__int__
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::empty
xor eax, 1
test al, al
je 0x403b35
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::top
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x60], rax
mov qword [rbp - 0x58], rdx
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::pop
mov eax, dword [rbp - 0x58]
mov dword [rbp - 0x98], eax
mov eax, dword [rbp - 0x98]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm1, qword [rax]
movsd xmm0, qword [rbp - 0x60]
ucomisd xmm0, xmm1
seta al
test al, al
jne 0x403b2f
mov dword [rbp - 0xbc], 0
mov rax, qword [rbp - 0xc8]
mov eax, dword [rax]
mov dword [rbp - 0x94], eax
mov eax, dword [rbp - 0xbc]
cmp eax, dword [rbp - 0x94]
jge 0x4038ce
mov eax, dword [rbp - 0xbc]
mov rsi, qword [rbp - 0xc8]
movsxd rdi, eax
mov eax, dword [rbp - 0x98]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, rdi
add rax, 0x70
mov rax, qword [rsi + rax*8]
cmp rax, -1
je 0x403b1b
mov eax, dword [rbp - 0xbc]
mov rsi, qword [rbp - 0xc8]
movsxd rdi, eax
mov eax, dword [rbp - 0x98]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, rdi
add rax, 0x70
mov rcx, qword [rsi + rax*8]
mov rax, qword [rbp - 0xc8]
mov edx, dword [rbp - 0x98]
movsxd rdx, edx
mov eax, dword [rax + rdx*4 + 8]
cdqe
cmp rcx, rax
jg 0x403b1b
mov eax, dword [rbp - 0x98]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm2, qword [rax]
mov eax, dword [rbp - 0xbc]
mov rsi, qword [rbp - 0xc8]
movsxd rdi, eax
mov eax, dword [rbp - 0x98]
movsxd rcx, eax
mov rdx, rcx
mov rax, rdx
shl rax, 4
mov rdx, rax
lea rax, [rdx*8]
sub rax, rdx
sub rax, rcx
add rax, rdi
add rax, 0x70
mov rax, qword [rsi + rax*8]
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
mov rax, qword [rbp - 0xc8]
mov edx, dword [rbp - 0x98]
movsxd rdx, edx
add rdx, 0x70
mov eax, dword [rax + rdx*4 + 4]
pxor xmm1, xmm1
cvtsi2sd xmm1, eax
divsd xmm0, xmm1
addsd xmm0, xmm2
movsd qword [rbp - 0x90], xmm0
mov eax, dword [rbp - 0xbc]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm0, qword [rax]
movsd xmm1, qword [rbp - 0x90]
ucomisd xmm0, xmm1
seta al
test al, al
je 0x403b1b
mov eax, dword [rbp - 0xbc]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm0, qword [rbp - 0x90]
movsd qword [rax], xmm0
lea rdx, [rbp - 0xbc]
lea rcx, [rbp - 0x90]
lea rax, [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::emplace_double__int__
mov eax, dword [rbp - 0xbc]
add eax, 1
mov dword [rbp - 0xbc], eax
jmp 0x40395e
nop
jmp 0x4038ce
mov rax, qword [rbp - 0xc8]
mov edx, dword [rbp - 0xac]
movsxd rdx, edx
add rdx, 0x6190
mov eax, dword [rax + rdx*4 + 4]
sub eax, 1
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rdx, rax
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call sym.TestCase::write_double__
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::_priority_queue
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
add dword [rbp - 0xac], 1
jmp 0x4037d0
mov rax, qword [rbp - 0xc8]
add rax, 0x18820
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403c23
jmp 0x403c1e
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_double_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_vector
jmp 0x403c07
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::_priority_queue
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0xc8
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
add rax, 0x18800
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
mov edi, 0x10e0
call sym.operatornew
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x18800
mov rsi, rax
mov rdi, rbx
call sym.OutputString::OutputString
mov rax, qword [rbp - 0x18]
add rax, 0x18820
mov rsi, rbx
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::unique_ptr
jmp 0x403cb8
mov r12, rax
mov rdi, rbx
call sym.operatordelete
mov rbx, r12
jmp 0x403c9b
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x18800
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x10
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_std::thread::id__
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::thread::id__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rdx]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::thread::id__
mov rdx, rax
mov rax, qword [rbp - 0x20]
mov rdx, qword [rdx]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x403d48
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
test rax, rax
je 0x403d71
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdi, rax
call sym.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_::_M_release
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 1], al
movsx edx, byte [rbp - 1]
mov rax, qword [rbp - 0x20]
mov edi, edx
call rax
test al, al
je 0x403da5
jmp 0x403d84
movzx eax, byte [rbp - 1]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_char__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false_char__char__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_char__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov eax, dword [rbp - 0xc]
mov esi, eax
mov rdi, rcx
call sym.std::__fill_n_a_unsignedint_char_
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov dword [rbp - 0x2c], esi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x28]
mov rdi, rax
call sym.std::__iterator_category_charconst__
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x38]
mov ecx, dword [rbp - 0x2c]
sub rsp, 8
push rbx
mov esi, ecx
mov rdi, rax
call sym.std::__copy_n_charconst__unsignedint_char__
add rsp, 0x10
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x403e8d
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_InputFile__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_InputFile__std::default_delete_InputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_InputFile__std::default_delete_InputFile__
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call 0x403ed5
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x403f37
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_InputFile_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_OutputFile__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_OutputFile__std::default_delete_OutputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_OutputFile_std::default_delete_OutputFile____
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call method.std::get_0ul_OutputFile__std.default_delete_OutputFile__
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x403fed
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_OutputFile_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int__
mov r12, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::operator__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.InputDevice::read_int__int____
test al, al
jne 0x404074
mov ecx, str.void_read_Ts___...___with_Ts____int___int___
mov edx, 0x240
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_2_0_source.cpp
mov edi, str.input__read_forward_Ts__args_..._
call sym.imp.__assert_fail
nop
add rsp, 0x10
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_longlong____111__
mov r12, rax
mov edi, obj.input
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::operator__
mov edx, ebx
mov rsi, r12
mov rdi, rax
call sym.InputDevice::read_longlong__int_
test al, al
jne 0x4040f0
mov ecx, str.void_read_Ts___...___with_Ts____long_long_int_____111___int___
mov edx, 0x240
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_2_0_source.cpp
mov edi, str.input__read_forward_Ts__args_..._
call sym.imp.__assert_fail
nop
add rsp, 0x10
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov dword [rbp - 0x10], edx
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0x10]
mov ecx, dword [rbp - 0xc]
mov esi, ecx
mov rdi, rax
call sym.std::uniform_int_distribution_int_::param_type::param_type
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov eax, dword [rax]
movsxd rdx, eax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul_::seed
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::uniform_int_distribution_int__
mov rdi, rax
call sym.std::_Maybe_wrap_member_pointer_std::uniform_int_distribution_int__::__do_wrap
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::_Bind_std::uniform_int_distribution_int__std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul___::_Bind_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rax, qword [rbp - 0x18]
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Maybe_get_result_type_std::uniform_int_distribution_int__void_::_Maybe_get_result_type
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Weak_result_type_impl_std::uniform_int_distribution_int__::_Weak_result_type_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rdx, qword [rdx]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::get
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_double_.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_fill_initialize
jmp 0x4042f7
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___std::pair_double_int__
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::move_std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x405a16
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.end
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.begin
sub rsp, 8
push r12
mov rsi, rbx
mov rdi, rax
call sym.std::make_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____std::greater_std::pair_double_int___
add rsp, 0x10
jmp 0x404451
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_double__
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::emplace_back_double__int__
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.end
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.begin
sub rsp, 8
push r12
mov rsi, rbx
mov rdi, rax
call sym.std::push_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____std::greater_std::pair_double_int___
add rsp, 0x10
nop
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::empty
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::front
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.end
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.begin
sub rsp, 8
push r12
mov rsi, rbx
mov rdi, rax
call sym.std::pop_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____std::greater_std::pair_double_int___
add rsp, 0x10
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::pop_back
nop
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_double__
mov rbx, qword [rax]
mov rax, qword [rbp - 0x18]
add rax, 0x18820
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::operator__
mov qword [rbp - 0x28], rbx
movsd xmm0, qword [rbp - 0x28]
mov rdi, rax
call sym.OutputDevice::write_double_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_OutputDevice__true_::_Head_base_std::default_delete_OutputDevice__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_OutputDevice___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_OutputDevice__::_Tuple_impl_std::default_delete_OutputDevice__
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_OutputDevice___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_OutputDevice__false_::_Head_base_OutputDevice___
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::default_delete_OutputDevice__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_OutputDevice___
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_OutputDevice__std::default_delete_OutputDevice__::_Tuple_impl_OutputDevice__std::default_delete_OutputDevice____void_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 9]
lea rcx, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::tuple_OutputDevice__std::default_delete_OutputDevice__::tuple_OutputDevice___std::default_delete_OutputDevice__void_
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x404743
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_OutputDevice__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_OutputDevice__std::default_delete_OutputDevice__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::__get_helper_0ul_OutputDevice__std.default_delete_OutputDevice__
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::get_0ul_OutputDevice__std::default_delete_OutputDevice__
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x4047e9
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_OutputDevice_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov byte [rbp - 0x29], 0xa
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_charconst____9__
mov r13, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_int_
mov r12, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_charconst____6__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x29]
mov r8, rax
mov rcx, r13
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____6__int_charconst____9__char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x4048e3
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_TestCase__true_::_Head_base_std::default_delete_TestCase__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_TestCase___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_TestCase__::_Tuple_impl_std::default_delete_TestCase__
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_TestCase___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_TestCase__false_::_Head_base_TestCase___
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::default_delete_TestCase__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_TestCase___
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_TestCase__std::default_delete_TestCase__::_Tuple_impl_TestCase___std::default_delete_TestCase__void_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 9]
lea rcx, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::tuple_TestCase__std::default_delete_TestCase__::tuple_TestCase___std::default_delete_TestCase__void_
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x404a73
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_TestCase__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_TestCase__std::default_delete_TestCase__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_TestCase_std::default_delete_TestCase____
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::get_0ul_TestCase__std::default_delete_TestCase__
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
test rax, rax
je 0x404b19
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_TestCase_::operator__
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::get
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 5
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::get
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov qword [rbp - 0x50], rcx
mov qword [rbp - 0x58], r8
mov qword [rbp - 0x60], r9
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_charconst____7__
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x24], eax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::forward_charconst____2__
mov r13, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov r12, rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::forward_charconst____3__
mov rbx, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_int_
mov rsi, rax
mov rax, qword [rbp - 0x38]
mov r8, r13
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::write_int_charconst____3__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edx, eax
mov eax, dword [rbp - 0x24]
add eax, edx
add rsp, 0x48
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___char_
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____16__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____16__int_char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x404d21
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____11__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____11__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x404dd0
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_double_
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____14__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____14__double_char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x404e7f
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call 0x403ed5
mov rdx, rax
lea rax, [rbp - 0x20]
mov rsi, rax
mov rdi, rdx
call sym.std::swap_InputFile__
mov rax, qword [rbp - 0x20]
test rax, rax
je 0x404edb
mov rbx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_InputFile_::operator__
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::get_0ul_OutputFile__std.default_delete_OutputFile__
mov rdx, rax
lea rax, [rbp - 0x20]
mov rsi, rax
mov rdi, rdx
call sym.std::swap_OutputFile__
mov rax, qword [rbp - 0x20]
test rax, rax
je 0x404f37
mov rbx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::get_deleter
mov rsi, rbx
mov rdi, rax
call sym.std::default_delete_OutputFile_::operator__
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::unique_ptr_InputFile_std::default_delete_InputFile__::get
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.InputDevice::skipCharacters
movsx edx, al
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readSignedInt_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x404fdf
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rdx, rax
mov rax, qword [rbp - 0x10]
sub rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_default_append
jmp 0x405017
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x10]
seta al
test al, al
je 0x405017
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 5
add rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_erase_at_end
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::thread__std::thread_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x4050e9
mov rax, qword [rbp - 0x10]
mov rdi, rax
call 0x40507a
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::construct_std::thread_void_______
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x405107
mov rax, qword [rbp - 0x10]
mov rdi, rax
call 0x40507a
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_M_emplace_back_aux_void______
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x405150
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40519c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::thread__std::vector_std::thread_std::allocator_std::thread___::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 0xa
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_double_
mov r12, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____15__
mov rbx, rax
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
lea rax, [rbp - 0x19]
mov rcx, rax
mov rdx, r12
mov rsi, rbx
call sym.OutputDevice::write_charconst____15__double_char_
mov edi, obj.logs
call sym.std::unique_ptr_OutputFile_std::default_delete_OutputFile__::operator__
mov rdi, rax
call sym.OutputDevice::flush
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4052a3
call sym.imp.__stack_chk_fail
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov esi, 0xffffffff
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add_dispatch
cmp eax, 1
sete al
test al, al
je 0x405324
mov rax, qword [rbp - 8]
mov rax, qword [rax]
add rax, 0x10
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
mov rax, qword [rbp - 8]
add rax, 0xc
mov esi, 0xffffffff
mov rdi, rax
call sym.__gnu_cxx::__exchange_and_add_dispatch
cmp eax, 1
sete al
test al, al
je 0x405324
mov rax, qword [rbp - 8]
mov rax, qword [rax]
add rax, 0x18
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_char__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_char__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_char__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_char__char__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_char__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov qword [rbp - 0x18], rdx
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lea rcx, [rdx + rax]
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__fill_a_char_
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov qword [rbp - 0x18], rdx
mov edx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
lea rcx, [rdx + rax]
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_charconst__char__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_InputFile__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_InputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_InputFile__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_InputFile__std::default_delete_InputFile__
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rbx, qword [rbp - 0x20]
test rbx, rbx
je 0x4054ce
mov rdi, rbx
call sym.InputFile::_InputFile
mov rdi, rbx
call sym.operatordelete
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_OutputFile__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_OutputFile__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_OutputFile__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_OutputFile__std::default_delete_OutputFile__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40557a
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
add rax, 0x10
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rdi, rdx
call rax
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x4055dd
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_int_
test al, al
je 0x4055dd
mov eax, 1
jmp 0x4055e2
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov dword [rbp - 0x14], edx
mov eax, dword [rbp - 0x14]
cdqe
lea rdx, [rax*8]
mov rax, qword [rbp - 0x10]
add rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::read_longlong__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov dword [rbp - 0x10], edx
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0xc]
mov dword [rax], edx
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0x10]
mov dword [rax + 4], edx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov edi, 0
call sym.std::__detail::__mod_unsignedlong_2147483647ul_1ul_0ul_
test rax, rax
jne 0x40567b
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__detail::__mod_unsignedlong_2147483647ul_1ul_0ul_
test rax, rax
jne 0x40567b
mov eax, 1
jmp 0x405680
mov eax, 0
test al, al
je 0x405691
mov rax, qword [rbp - 8]
mov qword [rax], 1
jmp 0x4056a7
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__detail::__mod_unsignedlong_2147483647ul_1ul_0ul_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__false_::_Head_base_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__::_Tuple_impl_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Weak_result_type_std::uniform_int_distribution_int__::_Weak_result_type
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::uniform_int_distribution_int___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rdx, qword [rdx]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__
mov rdx, rax
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__::tuple_std::linear_congruential_engine_unsignedlong_16807ul_0ul_2147483647ul__void_
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_OutputDevice__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_OutputDevice__std::default_delete_OutputDevice__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_OutputDevice__std::default_delete_OutputDevice__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::get_0ul_OutputDevice__std.default_delete_OutputDevice__
mov rax, qword [rax]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_double_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_create_storage
jmp 0x40587f
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_double__unsignedlong_double_double_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_double_int__::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x405a8e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x405ada
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
sub rsp, 8
push rax
call sym.__gnu_cxx::__ops::__iter_comp_iter_std::greater_std::pair_double_int___
add rsp, 0x10
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__make_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_______gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
add rsp, 0x10
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x405b93
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_double__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov rcx, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::construct_std::pair_double_int__double__int__
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
jmp 0x405bc3
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_double__
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_M_emplace_back_aux_double__int__
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x60], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x60]
mov esi, 1
mov rdi, rax
call 0x40741a
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x30], rax
mov qword [rbp - 0x28], rdx
sub rsp, 8
push rbx
call method.__gnu_cxx::__ops::__iter_comp_val_std::greater_std.pair_double_int___
add rsp, 0x10
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
lea rsi, [rax - 1]
mov rcx, qword [rbx]
mov rdx, qword [rbx + 8]
mov rax, qword [rbp - 0x50]
sub rsp, 8
push r12
mov qword [rbp - 0x58], rcx
movsd xmm0, qword [rbp - 0x58]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__push_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int____
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x405caa
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::end
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::begin
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x405d16
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::begin
mov qword [rbp - 0x10], rax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x405d63
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
cmp rax, 1
setg al
test al, al
je 0x405dd1
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator__
sub rsp, 8
push r12
call sym.__gnu_cxx::__ops::__iter_comp_iter_std::greater_std::pair_double_int___
add rsp, 0x10
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_______gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
add rsp, 0x10
nop
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax - 0x10]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::destroy_std::pair_double_int__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
movsd qword [rbp - 0x10], xmm0
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 0x1090]
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov qword [rbp - 0x18], rdx
movsd xmm0, qword [rbp - 0x18]
mov rdi, rax
call sym.OutputDevice::writeFloatingPoint_double_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::writeT
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_OutputDevice__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_OutputDevice__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_OutputDevice__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_OutputDevice__std::default_delete_OutputDevice__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x405f06
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
add rax, 0x10
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rdi, rdx
call rax
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____6__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_char_
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_charconst____9__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int_
mov rsi, rax
mov rax, qword [rbp - 0x28]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::write_int_charconst____9__char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x40
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_1ul_std::default_delete_TestCase__true_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_1ul_std::default_delete_TestCase__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_1ul_std::default_delete_TestCase__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_1ul_TestCase__std::default_delete_TestCase__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x18820
mov rdi, rax
call sym.std::unique_ptr_OutputDevice_std::default_delete_OutputDevice__::_unique_ptr
mov rax, qword [rbp - 8]
add rax, 0x18800
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rbx, qword [rbp - 0x20]
test rbx, rbx
je 0x406104
mov rdi, rbx
call sym.TestCase::_TestCase
mov rdi, rbx
call sym.operatordelete
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_TestCase__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_TestCase__std::default_delete_TestCase__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_TestCase__std::default_delete_TestCase__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::get_0ul_TestCase__std.default_delete_TestCase__
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_OutputFile__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_OutputFile__std::default_delete_OutputFile__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::__get_helper_0ul_OutputFile__std.default_delete_OutputFile__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_0ul_OutputFile__std::default_delete_OutputFile__
mov rax, qword [rax]
leave
ret
nop
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::write_int_
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_charconst____2__
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_charconst____3__
mov rsi, rax
mov rax, qword [rbp - 0x28]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.OutputDevice::write_charconst____3__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x40
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
jne 0x406303
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::data
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::data
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::char_traits_char_::compare
test eax, eax
jne 0x406303
mov eax, 1
jmp 0x406308
mov eax, 0
add rsp, 0x10
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____16__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_int_
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_int_char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____11__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____14__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_double_
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_double_char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_InputFile___
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_InputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_InputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4064fb
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_OutputFile___
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_OutputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_OutputFile___
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40657e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Head_base_0ul_InputFile__false_._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Tuple_impl_0ul_InputFile__std::default_delete_InputFile__._M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::__get_helper_0ul_InputFile_std.default_delete_InputFile____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_0ul_InputFile__std::default_delete_InputFile__
mov rax, qword [rax]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
cmp byte [rbp - 0x24], 0x2d
sete al
mov byte [rbp - 0xd], al
cmp byte [rbp - 0xd], 0
je 0x40663d
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
movsx edx, byte [rbp - 0x24]
lea rcx, [rbp - 0xc]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readUnsignedInt_unsignedint_
test eax, eax
sete al
test al, al
je 0x406664
mov eax, 0
jmp 0x406683
cmp byte [rbp - 0xd], 0
je 0x406673
mov eax, dword [rbp - 0xc]
neg eax
mov edx, eax
jmp 0x406678
mov eax, dword [rbp - 0xc]
mov edx, eax
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
mov eax, 1
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x406697
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
cmp qword [rbp - 0x40], 0
je 0x4068be
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
sub rdx, rax
mov rax, rdx
sar rax, 5
cmp rax, qword [rbp - 0x40]
jb 0x406735
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
mov rcx, qword [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
jmp 0x4068be
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_default_append
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_check_len
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x30]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x28]
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x4068be
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::thread_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::thread__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call 0x40507a
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::construct_std::thread_void_______
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call 0x40507a
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::construct_std::thread_void_______
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::thread__std::thread__std::allocator_std::thread__
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::thread__std::thread_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x406be9
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x406b98
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::destroy_std::thread_
jmp 0x406bba
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::thread_std::allocator_std::thread__._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::thread__std::thread_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____15__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_double_
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_double_char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
cmp qword [rbp - 8], 0
je 0x406cbe
mov rax, qword [rbp - 8]
mov rax, qword [rax]
add rax, 8
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdi, rdx
call rax
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_char_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
movzx eax, byte [rax]
mov byte [rbp - 9], al
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x406d50
movzx eax, byte [rbp - 9]
movzx ecx, al
mov rdx, qword [rbp - 8]
mov rax, qword [rbp - 0x18]
mov esi, ecx
mov rdi, rax
call sym.imp.memset
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_charconst__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_charconst__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false_charconst__char__
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
cmp rax, qword [rbp - 0x18]
je 0x406de6
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.InputDevice::read_longlong_
xor eax, 1
test al, al
je 0x406ddf
mov eax, 0
jmp 0x406df2
add qword [rbp - 0x10], 8
jmp 0x406db4
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.InputDevice::read
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__detail::_Mod_unsignedlong_2147483647ul_1ul_0ul_true_true_::__calc
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x40856e
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x406ee4
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x408636
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x406fca
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_std::pair_double_int___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rdi, rax
call sym.std::move_std::allocator_std::pair_double_int____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_Vector_impl._Vector_impl
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_Vector_impl::_M_swap_data
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x19]
sub rsp, 8
push rdx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int___::_Iter_comp_iter
add rsp, 0x10
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4070ae
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x60
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x60], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
cmp rax, 1
setle al
test al, al
jne 0x4071af
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x28]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x30], rax
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x20], rax
mov qword [rbp - 0x18], rdx
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdi, qword [rax]
mov rcx, qword [rax + 8]
mov rdx, qword [rbp - 0x28]
mov rsi, qword [rbp - 0x30]
mov rax, qword [rbp - 0x50]
sub rsp, 8
movzx r8d, byte [rbp + 0x10]
push r8
mov qword [rbp - 0x58], rdi
movsd xmm0, qword [rbp - 0x58]
mov rdi, rax
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
add rsp, 0x10
cmp qword [rbp - 0x30], 0
je 0x4071b2
sub qword [rbp - 0x30], 1
jmp 0x407125
nop
jmp 0x4071b3
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4071c7
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_double__
mov rdx, rax
mov rsi, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rcx, rbx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::construct_std::pair_double_int__double__int___
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_int__
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_double__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x18]
lea rsi, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::construct_std::pair_double_int__double__int__
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::pair_double_int___std::pair_double_int___std::allocator_std::pair_double_int___
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 0x10
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___std::pair_double_int__
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x407411
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x4073c0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::destroy_std::pair_double_int__
jmp 0x4073e2
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___std::pair_double_int__
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x40
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 4
neg rdx
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40747d
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 4
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x19]
sub rsp, 8
push rdx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int___::_Iter_comp_val
add rsp, 0x10
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x407517
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x48], rsi
mov qword [rbp - 0x58], rdx
movq rsi, xmm0
mov eax, 0
mov edx, 0
mov rax, rsi
mov rdx, rcx
mov qword [rbp - 0x70], rax
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x48]
cmp rax, qword [rbp - 0x58]
jle 0x4075b5
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov rcx, rax
lea rax, [rbp - 0x70]
mov rdx, rax
mov rsi, rcx
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int___::operator_____gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____std::pair_double_int__
test al, al
je 0x4075b5
mov eax, 1
jmp 0x4075ba
mov eax, 0
test al, al
je 0x407644
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x48], rax
mov rax, qword [rbp - 0x48]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
jmp 0x407577
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x407696
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4076ef
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x407744
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::base
mov rax, qword [rax]
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax - 0x10]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x60], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x30], rax
mov qword [rbp - 0x28], rdx
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
mov rdi, rax
mov rcx, qword [rbx]
mov rdx, qword [rbx + 8]
mov rax, qword [rbp - 0x40]
sub rsp, 8
movzx esi, byte [rbp + 0x10]
push rsi
mov qword [rbp - 0x58], rcx
movsd xmm0, qword [rbp - 0x58]
mov rcx, rdx
mov rdx, rdi
mov esi, 0
mov rdi, rax
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x407897
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::destroy_std::pair_double_int__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x50
mov qword [rbp - 0x38], rdi
movsd qword [rbp - 0x40], xmm0
mov qword [rbp - 0x48], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
movsd xmm0, qword [rbp - 0x50]
call sym.std::signbit
mov byte [rbp - 0x29], al
cmp byte [rbp - 0x29], 0
je 0x407919
movsd xmm1, qword [rbp - 0x40]
movsd xmm0, qword [rip + 0x4070]
xorpd xmm0, xmm1
movsd qword [rbp - 0x40], xmm0
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
movsd xmm0, qword [rbp - 0x50]
call sym.std::isnan
test al, al
je 0x40795f
mov dword [rbp - 0x28], 0
cmp dword [rbp - 0x28], 2
jg 0x407b4f
sub qword [rbp - 0x48], 1
mov eax, dword [rbp - 0x28]
cdqe
add rax, 0x40b868
movzx edx, byte [rax]
mov rax, qword [rbp - 0x48]
mov byte [rax], dl
add dword [rbp - 0x28], 1
jmp 0x407936
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
movsd xmm0, qword [rbp - 0x50]
call sym.std::isinf
test al, al
je 0x4079a5
mov dword [rbp - 0x24], 0
cmp dword [rbp - 0x24], 2
jg 0x407b4f
sub qword [rbp - 0x48], 1
mov eax, dword [rbp - 0x24]
cdqe
add rax, 0x40b86c
movzx edx, byte [rax]
mov rax, qword [rbp - 0x48]
mov byte [rax], dl
add dword [rbp - 0x24], 1
jmp 0x40797c
movsd xmm0, qword [rbp - 0x40]
ucomisd xmm0, qword [rip + 0x3fde]
jae 0x4079c4
movsd xmm0, qword [rbp - 0x40]
cvttsd2si rax, xmm0
mov qword [rbp - 0x20], rax
jmp 0x4079ec
movsd xmm0, qword [rbp - 0x40]
movsd xmm1, qword [rip + 0x3fbf]
subsd xmm0, xmm1
cvttsd2si rax, xmm0
mov qword [rbp - 0x20], rax
movabs rax, 0x8000000000000000
xor qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
test rax, rax
js 0x407a08
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
jmp 0x407a21
mov rdx, rax
shr rdx, 1
and eax, 1
or rdx, rax
pxor xmm0, xmm0
cvtsi2sd xmm0, rdx
addsd xmm0, xmm0
movsd xmm1, qword [rbp - 0x40]
subsd xmm1, xmm0
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10b0]
test rax, rax
js 0x407a45
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
jmp 0x407a5e
mov rdx, rax
shr rdx, 1
and eax, 1
or rdx, rax
pxor xmm0, xmm0
cvtsi2sd xmm0, rdx
addsd xmm0, xmm0
mulsd xmm0, xmm1
movsd xmm1, qword [rip + 0x3f2e]
addsd xmm0, xmm1
ucomisd xmm0, qword [rip + 0x3f1a]
jae 0x407a83
cvttsd2si rax, xmm0
mov qword [rbp - 0x18], rax
jmp 0x407aa6
movsd xmm1, qword [rip + 0x3f05]
subsd xmm0, xmm1
cvttsd2si rax, xmm0
mov qword [rbp - 0x18], rax
movabs rax, 0x8000000000000000
xor qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10b0]
cmp rax, qword [rbp - 0x18]
ja 0x407acc
add qword [rbp - 0x20], 1
mov qword [rbp - 0x18], 0
mov rax, qword [rbp - 0x38]
mov eax, dword [rax + 0x10a8]
mov eax, eax
neg rax
mov rdx, rax
mov rax, qword [rbp - 0x48]
add rax, rdx
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x38]
mov eax, dword [rax + 0x10a8]
test eax, eax
je 0x407b34
mov byte [rbp - 0x2a], 0x30
mov rdx, qword [rbp - 0x48]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedlonglong_
mov rcx, rax
lea rdx, [rbp - 0x2a]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_char__char_
sub qword [rbp - 0x10], 1
mov rax, qword [rbp - 0x10]
mov byte [rax], 0x2e
mov rdx, qword [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedlonglong_
mov qword [rbp - 0x48], rax
cmp byte [rbp - 0x29], 0
je 0x407b61
sub qword [rbp - 0x48], 1
mov rax, qword [rbp - 0x48]
mov byte [rax], 0x2d
mov rax, qword [rbp - 0x48]
mov rsi, qword [rbp - 8]
xor rsi, qword fs:[0x28]
je 0x407b79
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x407c08
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::write_int_
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_charconst____9__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_charconst____9__char_
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 0x1090]
mov ecx, dword [rbp - 0xc]
mov rax, qword [rbp - 8]
mov esi, ecx
mov rdi, rax
call sym.OutputDevice::writeSignedInt_int_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::writeT
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_charconst____3__
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_charconst____2__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.OutputDevice::write_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__charconst____2__
mov edx, eax
mov eax, dword [rbp - 0x14]
add eax, edx
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.OutputDevice::write_int_
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x403084
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_double_
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rdx
movsd xmm0, qword [rbp - 0x30]
mov rdi, rax
call sym.OutputDevice::write_double_
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp eax, 0xa
seta al
movzx eax, al
test rax, rax
je 0x407e9b
movsx edx, byte [rbp - 0x24]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readUnsignedIntGeneral_unsignedint_
jmp 0x407f0c
mov dword [rbp - 8], 0
mov dword [rbp - 4], 0
movzx eax, byte [rbp - 0x24]
sub eax, 0x30
movzx edx, al
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp edx, eax
jae 0x407eec
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
imul eax, dword [rbp - 8]
mov edx, eax
movsx eax, byte [rbp - 0x24]
add eax, edx
sub eax, 0x30
mov dword [rbp - 8], eax
add dword [rbp - 4], 1
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
jmp 0x407ea9
mov rax, qword [rbp - 0x20]
mov edx, dword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax - 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x407fa5
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x20]
ja 0x408005
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
cmp rax, qword [rbp - 0x20]
jae 0x408013
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
jmp 0x408017
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x40802b
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40805e
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::allocate
jmp 0x408063
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::thread_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x408170
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::thread__
nop
leave
ret
nop
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov rdi, rax
call 0x40507a
mov r13, rax
mov r12, qword [rbp - 0x30]
mov rsi, r12
mov edi, 8
call 0x4022fe
mov rbx, rax
test rbx, rbx
je 0x408201
mov rsi, r13
mov rdi, rbx
call sym.std::thread::thread_void______
jmp 0x408201
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x402310
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x40826d
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::size
cmp rax, qword [rbp - 0x20]
ja 0x4082cd
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x4082db
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::thread_std::allocator_std::thread__::max_size
jmp 0x4082df
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4082f3
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x408326
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::allocate
jmp 0x40832b
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::thread__std::move_iterator_std::thread___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::thread__std::move_iterator_std::thread___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::thread___std::thread__std::thread_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::destroy_std::thread_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x40bae0
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov eax, 0
test eax, eax
je 0x4083fb
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_.__Sp_counted_base
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x408468
mov rdx, qword [rbp - 8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rdx, qword [rbp - 8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_charconst__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_char__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_charconst__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_charconst__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_charconst__char__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.InputDevice::skipCharacters
movsx edx, al
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readSignedInt_longlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
mov rcx, qword [rbp - 8]
movabs rdx, 0x200000005
mov rax, rcx
mul rdx
mov rax, rcx
sub rax, rdx
shr rax, 1
add rax, rdx
shr rax, 0x1e
mov rdx, rax
mov rax, rdx
shl rax, 0x1f
sub rax, rdx
sub rcx, rax
mov rax, rcx
mov qword [rbp - 8], rax
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4085c0
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::allocate
jmp 0x4085c5
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_true_::__uninit_fill_n_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x40962c
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::allocator_std::pair_double_int____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::pair_double_int__::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::pair_double_int___
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::pair_double_int___
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
add rax, 0x10
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::pair_double_int___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 4
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4087b6
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x48], rsi
mov qword [rbp - 0x58], rdx
movq rsi, xmm0
mov eax, 0
mov edx, 0
mov rax, rsi
mov rdx, rcx
mov qword [rbp - 0x70], rax
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x48]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x58]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x28]
jle 0x4088e7
mov rax, qword [rbp - 0x28]
add rax, 1
add rax, rax
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x28]
lea rdx, [rax - 1]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov rbx, rax
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov rdx, rbx
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int___::operator_____gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_______gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____
test al, al
je 0x40887e
sub qword [rbp - 0x28], 1
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x48], rax
jmp 0x40880b
mov rax, qword [rbp - 0x58]
and eax, 1
test rax, rax
jne 0x40898d
mov rax, qword [rbp - 0x58]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x28]
jne 0x40898d
mov rax, qword [rbp - 0x28]
add rax, 1
add rax, rax
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x28]
lea rdx, [rax - 1]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x408756
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
mov rax, qword [rbp - 0x28]
sub rax, 1
mov qword [rbp - 0x48], rax
sub rsp, 8
movzx eax, byte [rbp + 0x10]
push rax
call sym.__gnu_cxx::__ops::__iter_comp_val_std::greater_std::pair_double_int___
add rsp, 0x10
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdi, qword [rax]
mov rcx, qword [rax + 8]
mov rdx, qword [rbp - 0x20]
mov rsi, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
sub rsp, 8
push r12
mov qword [rbp - 0x60], rdi
movsd xmm0, qword [rbp - 0x60]
mov rdi, rax
call sym.std::__push_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int____
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4089ee
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_double__
movsd xmm0, qword [rax]
mov rax, qword [rbp - 8]
movsd qword [rax], xmm0
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int__
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax + 8], edx
nop
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_double__
mov rbx, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 0x10
call 0x4022fe
test rax, rax
je 0x408a99
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::pair_double__int__void_
nop
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x408b03
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
cmp rax, qword [rbp - 0x20]
ja 0x408b63
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::max_size
cmp rax, qword [rbp - 0x20]
jae 0x408b71
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::max_size
jmp 0x408b75
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x408b89
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x408bbc
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::allocate
jmp 0x408bc1
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_double_int___std::move_iterator_std::pair_double_int____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_double_int___std::move_iterator_std::pair_double_int____
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::pair_double_int____std::pair_double_int___std::pair_double_int__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rcx, rax
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::greater_std::pair_double_int__::operator__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_double_
movsd xmm0, qword [rax]
mov rax, qword [rbp - 8]
movsd qword [rax], xmm0
mov rax, qword [rbp - 0x10]
add rax, 8
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax + 8], edx
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
cmp qword [rbp - 0x20], 0
sete al
movzx eax, al
test rax, rax
je 0x408d40
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
mov byte [rax], 0x30
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
cmp eax, 0xa
sete al
movzx eax, al
test rax, rax
je 0x408dbe
cmp qword [rbp - 0x20], 0
je 0x408e25
sub qword [rbp - 0x28], 1
mov rcx, qword [rbp - 0x20]
movabs rdx, 0xcccccccccccccccd
mov rax, rcx
mul rdx
shr rdx, 3
mov rax, rdx
shl rax, 2
add rax, rdx
add rax, rax
sub rcx, rax
mov rdx, rcx
mov eax, edx
add eax, 0x30
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov rax, qword [rbp - 0x20]
movabs rdx, 0xcccccccccccccccd
mul rdx
mov rax, rdx
shr rax, 3
mov qword [rbp - 0x20], rax
jmp 0x408d58
cmp qword [rbp - 0x20], 0
je 0x408e25
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
mov ecx, eax
mov rax, qword [rbp - 0x20]
mov edx, 0
div rcx
mov qword [rbp - 8], rdx
sub qword [rbp - 0x28], 1
cmp qword [rbp - 8], 9
ja 0x408df8
mov rax, qword [rbp - 8]
add eax, 0x30
mov edx, eax
jmp 0x408e01
mov rax, qword [rbp - 8]
add eax, 0x37
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
mov esi, eax
mov rax, qword [rbp - 0x20]
mov edx, 0
div rsi
mov qword [rbp - 0x20], rax
jmp 0x408dbe
mov rax, qword [rbp - 0x28]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_char__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__fill_a_char_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_charconst____9__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_char_
movzx eax, byte [rax]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call method.OutputDevice.write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov qword [rbp - 0x28], rdx
mov eax, dword [rbp - 0x1c]
mov dword [rbp - 4], eax
cmp dword [rbp - 0x1c], 0
jns 0x408f7a
mov eax, dword [rbp - 4]
neg eax
mov ecx, eax
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov esi, ecx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedint_
mov qword [rbp - 0x28], rax
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
mov byte [rax], 0x2d
mov rax, qword [rbp - 0x28]
jmp 0x408f8f
mov rdx, qword [rbp - 0x28]
mov ecx, dword [rbp - 4]
mov rax, qword [rbp - 0x18]
mov esi, ecx
mov rdi, rax
call sym.OutputDevice::writeUnsignedInt_unsignedint_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x403084
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_charconst____2__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.OutputDevice::write
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov dword [rbp - 8], 0
mov dword [rbp - 4], 0
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isDigit
test al, al
je 0x40902c
movzx eax, byte [rbp - 0x24]
sub eax, 0x30
mov byte [rbp - 0x24], al
jmp 0x40906c
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isUpper
test al, al
je 0x409047
movzx eax, byte [rbp - 0x24]
sub eax, 0x37
mov byte [rbp - 0x24], al
jmp 0x40906c
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isLower
test al, al
je 0x409062
movzx eax, byte [rbp - 0x24]
sub eax, 0x57
mov byte [rbp - 0x24], al
jmp 0x40906c
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
mov byte [rbp - 0x24], al
movsx edx, byte [rbp - 0x24]
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp edx, eax
jae 0x4090a9
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
imul eax, dword [rbp - 8]
mov edx, eax
movsx eax, byte [rbp - 0x24]
add eax, edx
mov dword [rbp - 8], eax
add dword [rbp - 4], 1
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
jmp 0x409011
nop
mov rax, qword [rbp - 0x20]
mov edx, dword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax - 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_false_::__uninit_default_n_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x40913d
mov rax, qword [rbp - 0x10]
jmp 0x409141
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4091b3
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x409296
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::thread_
mov rdi, rax
call sym.std::_Destroy_std::thread_
add qword [rbp - 8], 8
jmp 0x409271
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::___shared_count
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_std::_Bind_simple_void_____________gnu_cxx::_Lock_policy_2_::___shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::thread::id::id
mov rax, qword [rbp - 0x60]
mov rdi, rax
call 0x40507a
mov rdx, rax
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::__bind_simple_void______
lea rax, [rbp - 0x30]
lea rdx, [rbp - 0x50]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call sym.std::thread::_M_make_routine_std::_Bind_simple_void_________
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________void_
lea rcx, [rbp - 0x40]
mov rax, qword [rbp - 0x58]
mov edx, sym.imp.pthread_create
mov rsi, rcx
mov rdi, rax
call sym.std::thread::_M_start_thread
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::_shared_ptr
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________::_shared_ptr
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4093b7
jmp 0x4093b2
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::_shared_ptr
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________::_shared_ptr
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x58
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::thread_std::allocator_std::thread__::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread__::max_size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::thread__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x409450
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::thread___std::thread__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::thread::_thread
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_charconst__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_char_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov eax, edx
mov byte [rbp - 0x34], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
cmp byte [rbp - 0x34], 0x2d
sete al
mov byte [rbp - 0x11], al
cmp byte [rbp - 0x11], 0
je 0x40953f
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x34], al
movsx edx, byte [rbp - 0x34]
lea rcx, [rbp - 0x10]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readUnsignedInt_unsignedlonglong_
test eax, eax
sete al
test al, al
je 0x409566
mov eax, 0
jmp 0x40958b
cmp byte [rbp - 0x11], 0
je 0x409578
mov rax, qword [rbp - 0x10]
neg rax
mov rdx, rax
jmp 0x40957f
mov rax, qword [rbp - 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x30]
mov qword [rax], rdx
mov eax, 1
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40959f
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_std::pair_double_int____
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_double_int____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::pair_double_int____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x409703
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::greater_std::pair_double_int__::operator__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x19]
sub rsp, 8
push rdx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int___::_Iter_comp_val
add rsp, 0x10
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x409795
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::max_size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40982e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::pair_double_int____std::pair_double_int___
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 0x10]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
ja 0x4098b3
mov rax, qword [rbp - 0x10]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 8]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
seta al
xor eax, 1
test al, al
je 0x4098ba
mov rax, qword [rbp - 8]
mov edx, dword [rax + 8]
mov rax, qword [rbp - 0x10]
mov eax, dword [rax + 8]
cmp edx, eax
jge 0x4098ba
mov eax, 1
jmp 0x4098bf
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 8]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call 0x409861
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__double_int_
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov qword [rbp - 0x28], rdx
cmp dword [rbp - 0x1c], 0
sete al
movzx eax, al
test rax, rax
je 0x40996a
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
mov byte [rax], 0x30
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x10a4]
cmp eax, 0xa
sete al
movzx eax, al
test rax, rax
je 0x4099ce
cmp dword [rbp - 0x1c], 0
je 0x409a27
sub qword [rbp - 0x28], 1
mov ecx, dword [rbp - 0x1c]
mov edx, 0xcccccccd
mov eax, ecx
mul edx
shr edx, 3
mov eax, edx
shl eax, 2
add eax, edx
add eax, eax
sub ecx, eax
mov edx, ecx
mov eax, edx
add eax, 0x30
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov eax, dword [rbp - 0x1c]
mov edx, 0xcccccccd
mul edx
mov eax, edx
shr eax, 3
mov dword [rbp - 0x1c], eax
jmp 0x409982
cmp dword [rbp - 0x1c], 0
je 0x409a27
mov rax, qword [rbp - 0x18]
mov ecx, dword [rax + 0x10a4]
mov eax, dword [rbp - 0x1c]
mov edx, 0
div ecx
mov dword [rbp - 4], edx
sub qword [rbp - 0x28], 1
cmp dword [rbp - 4], 9
ja 0x409a00
mov eax, dword [rbp - 4]
add eax, 0x30
mov edx, eax
jmp 0x409a08
mov eax, dword [rbp - 4]
add eax, 0x37
mov edx, eax
mov rax, qword [rbp - 0x28]
mov byte [rax], dl
mov rax, qword [rbp - 0x18]
mov esi, dword [rax + 0x10a4]
mov eax, dword [rbp - 0x1c]
mov edx, 0
div esi
mov dword [rbp - 0x1c], eax
jmp 0x4099ce
mov rax, qword [rbp - 0x28]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
cmp qword [rbp - 0x20], 0
je 0x409a6c
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdi, rax
call sym.std::_Construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
sub qword [rbp - 0x20], 1
add qword [rbp - 8], 0x20
jmp 0x409a45
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x409aca
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 5
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x409b5c
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
add qword [rbp - 8], 0x20
jmp 0x409b37
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_thread
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_void______false_::_M_head
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_M_head
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_void______false_::_Head_base_void______
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_Tuple_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_void______::tuple
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call 0x40507a
mov qword [rbp - 0x10], rax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::_Maybe_wrap_member_pointer_void______::__do_wrap
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Bind_simple_void________::_Bind_simple_void______
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x409d03
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::make_shared_std::thread::_Impl_std::_Bind_simple_void__________std::_Bind_simple_void_________
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x409d6d
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void____________
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_base____gnu_cxx::_Lock_policy_2_::__shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________void_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::max_size
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x409e08
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::thread___std::thread__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp eax, 0xa
seta al
movzx eax, al
test rax, rax
je 0x409ea9
movsx edx, byte [rbp - 0x24]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.InputDevice::readUnsignedIntGeneral_unsignedlonglong_
jmp 0x409f25
mov qword [rbp - 8], 0
mov dword [rbp - 0xc], 0
movzx eax, byte [rbp - 0x24]
sub eax, 0x30
movzx edx, al
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp edx, eax
jae 0x409f03
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
mov eax, eax
imul rax, qword [rbp - 8]
mov rdx, rax
movsx rax, byte [rbp - 0x24]
add rax, rdx
sub rax, 0x30
mov qword [rbp - 8], rax
add dword [rbp - 0xc], 1
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
jmp 0x409eb8
mov rax, qword [rbp - 0x20]
mov rdx, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax - 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov eax, dword [rbp - 0xc]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x409f58
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_double__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::max_size
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40a00a
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 4
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::pair_double_int____std::pair_double_int___
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x20
call 0x4022fe
test rax, rax
je 0x40a09f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x7ffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
test al, al
je 0x40a123
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
add qword [rbp - 0x18], 0x20
jmp 0x40a0d3
mov rax, qword [rbp - 0x18]
jmp 0x40a15c
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_void______false_::_Head_base_void______
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_Tuple_impl_void______
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_void______
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_void______::tuple_void______void_
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call method.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________.allocator
mov rax, qword [rbp - 0x28]
lea rcx, [rbp - 0x19]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocate_shared_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x18]
xor rdx, qword fs:[0x28]
je 0x40a2b2
jmp 0x40a2ad
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::__shared_count
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::_M_swap
mov rax, qword [rbp - 0x10]
mov qword [rax], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x40a795
test al, al
je 0x40a3a9
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::thread__::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::thread_
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::thread_std::thread__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::thread__::operator__
add qword [rbp - 0x18], 8
jmp 0x40a359
mov rax, qword [rbp - 0x18]
jmp 0x40a3e2
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::thread__
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov eax, edx
mov byte [rbp - 0x24], al
mov qword [rbp - 8], 0
mov dword [rbp - 0xc], 0
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isDigit
test al, al
je 0x40a429
movzx eax, byte [rbp - 0x24]
sub eax, 0x30
mov byte [rbp - 0x24], al
jmp 0x40a469
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isUpper
test al, al
je 0x40a444
movzx eax, byte [rbp - 0x24]
sub eax, 0x37
mov byte [rbp - 0x24], al
jmp 0x40a469
movsx eax, byte [rbp - 0x24]
mov edi, eax
call sym.InputDevice::isLower
test al, al
je 0x40a45f
movzx eax, byte [rbp - 0x24]
sub eax, 0x57
mov byte [rbp - 0x24], al
jmp 0x40a469
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
mov byte [rbp - 0x24], al
movsx edx, byte [rbp - 0x24]
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
cmp edx, eax
jae 0x40a4ad
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
mov eax, eax
imul rax, qword [rbp - 8]
mov rdx, rax
movsx rax, byte [rbp - 0x24]
add rax, rdx
mov qword [rbp - 8], rax
add dword [rbp - 0xc], 1
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.InputDevice::nextChar
mov byte [rbp - 0x24], al
jmp 0x40a40e
nop
mov rax, qword [rbp - 0x20]
mov rdx, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax - 1]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov eax, dword [rbp - 0xc]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_double__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
movsd xmm0, qword [rax]
movsd qword [rbp - 8], xmm0
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x10], rax
cmp qword [rbp - 0x10], 0
je 0x40a545
mov rax, qword [rbp - 0x18]
movsd xmm0, qword [rbp - 8]
movsd qword [rax], xmm0
sub qword [rbp - 0x10], 1
add qword [rbp - 0x18], 8
jmp 0x40a525
mov rax, qword [rbp - 0x18]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xfffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x40a854
test al, al
je 0x40a5cd
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::pair_double_int__
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::pair_double_int__std::pair_double_int__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::operator__
add qword [rbp - 0x18], 0x10
jmp 0x40a57d
mov rax, qword [rbp - 0x18]
jmp 0x40a606
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x40a918
xor eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x20]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x20
call 0x4022fe
test rax, rax
je 0x40a6b6
mov rsi, rbx
mov rdi, rax
call 0x401580
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_std::_Bind_simple_void__________::shared_ptr_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
add rsp, 0x10
mov rax, qword [rbp - 0x28]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x40a75c
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rax, qword [rax]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::thread__
xor eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::thread_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 8
call 0x4022fe
test rax, rax
je 0x40a83e
mov rsi, rbx
mov rdi, rax
call sym.std::thread::thread
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::pair_double_int___
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::pair_double_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x10
call 0x4022fe
mov rcx, rax
test rcx, rcx
je 0x40a910
mov rax, qword [rbx]
mov rdx, qword [rbx + 8]
mov qword [rcx], rax
mov qword [rcx + 8], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_std::_Bind_simple_void_____________gnu_cxx::_Lock_policy_2_::__shared_ptr_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
add rsp, 0x10
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::thread__::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::thread__::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rax], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 0x28]
lea rdi, [rax + 8]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rcx, rdx
mov rdx, rax
mov esi, 0
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::__shared_count_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void___________std::_Bind_simple_void_________
add rsp, 0x10
mov rax, qword [rbp - 0x28]
add rax, 8
mov esi, obj.typeinfoforstd::_Sp_make_shared_tag
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::_M_get_deleter
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x28]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x28]
add rcx, 8
mov rsi, rax
mov rdi, rcx
mov eax, 0
call sym.std::__enable_shared_from_this_helper____gnu_cxx::_Lock_policy_2_
nop
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r14
push r13
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov qword [rbp - 0x70], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov qword [rax], 0
mov rdx, qword [rbp - 0x68]
lea rax, [rbp - 0x4a]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::allocator_std::thread::_Impl_std::_Bind_simple_void__________
lea rax, [rbp - 0x40]
lea rdx, [rbp - 0x4a]
mov rsi, rdx
mov rdi, rax
call sym.std::__allocate_guarded_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::get
mov qword [rbp - 0x48], rax
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::move_std::allocator_std::thread::_Impl_std::_Bind_simple_void__________const__
mov rdx, rax
lea rax, [rbp - 0x49]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::allocator
lea r13, [rbp - 0x49]
mov rax, qword [rbp - 0x70]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov r14, rax
mov r12, qword [rbp - 0x48]
mov rsi, r12
mov edi, 0x30
call 0x4022fe
mov rbx, rax
test rbx, rbx
je 0x40abd5
mov rdx, r14
mov rsi, r13
mov rdi, rbx
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Sp_counted_ptr_inplace_std::_Bind_simple_void_________
lea rax, [rbp - 0x49]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, qword [rbp - 0x58]
mov rdx, qword [rbp - 0x48]
mov qword [rax], rdx
lea rax, [rbp - 0x40]
mov esi, 0
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::operator_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::___allocated_ptr
lea rax, [rbp - 0x4a]
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_allocator
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x40ac76
jmp 0x40ac71
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x402310
mov rbx, r13
lea rax, [rbp - 0x49]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
jmp 0x40ac49
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::___allocated_ptr
jmp 0x40ac5a
mov rbx, rax
lea rax, [rbp - 0x4a]
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x50
pop rbx
pop r12
pop r13
pop r14
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
test rax, rax
je 0x40acc6
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rax, qword [rax]
add rax, 0x20
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
mov rdx, qword [rdx]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rdx
call rax
jmp 0x40accb
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x48
mov qword [rbp - 0xb8], rdi
mov qword [rbp - 0xa8], rsi
mov qword [rbp - 0xa0], rdx
mov qword [rbp - 0x98], rcx
mov qword [rbp - 0x90], r8
mov qword [rbp - 0x88], r9
test al, al
je 0x40ad23
movaps xmmword [rbp - 0x80], xmm0
movaps xmmword [rbp - 0x70], xmm1
movaps xmmword [rbp - 0x60], xmm2
movaps xmmword [rbp - 0x50], xmm3
movaps xmmword [rbp - 0x40], xmm4
movaps xmmword [rbp - 0x30], xmm5
movaps xmmword [rbp - 0x20], xmm6
movaps xmmword [rbp - 0x10], xmm7
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, 1
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::allocate
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::__allocated_ptr
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
test rax, rax
je 0x40add6
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::_S_raw_ptr
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_ebo_helper_0_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________true_::__Sp_ebo_helper
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_::_Sp_counted_base
mov edx, 0x40b9b0
mov rax, qword [rbp - 0x28]
mov qword [rax], rdx
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x19]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::allocator
mov rax, qword [rbp - 0x28]
lea rdx, [rax + 0x10]
lea rax, [rbp - 0x19]
mov rsi, rax
mov rdi, rdx
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::_Impl
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_M_ptr
mov rcx, rax
mov rax, qword [rbp - 0x30]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________::construct_std::thread::_Impl_std::_Bind_simple_void__________std::_Bind_simple_void_________
jmp 0x40af2c
mov rbx, rax
mov rax, qword [rbp - 0x28]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::__Impl
mov rax, qword [rbp - 0x28]
mov rdi, rax
call method.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_.__Sp_counted_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40af40
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::allocate
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov qword [rax + 8], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Mutex_base____gnu_cxx::_Lock_policy_2_::_Mutex_base
mov edx, 0x40bae0
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov dword [rax + 8], 1
mov rax, qword [rbp - 8]
mov dword [rax + 0xc], 1
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::aligned_storage_32ul_8ul_::aligned_storage
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Sp_ebo_helper_0_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________true_::_Sp_ebo_helper
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::__aligned_buffer_std::thread::_Impl_std::_Bind_simple_void__________::__aligned_buffer
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x10
mov rdi, rax
call sym.__gnu_cxx::__aligned_buffer_std::thread::_Impl_std::_Bind_simple_void__________::_M_ptr
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::construct_std::thread::_Impl_std::_Bind_simple_void__________std::_Bind_simple_void_________
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40b14e
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 4
mov rdi, rax
call sym.operatornew
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::thread::_Impl_std::_Bind_simple_void__________::allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::__aligned_buffer_std::thread::_Impl_std::_Bind_simple_void__________::_M_addr
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 0x20
call 0x4022fe
test rax, rax
je 0x40b213
mov rsi, rbx
mov rdi, rax
call sym.std::thread::_Impl_std::_Bind_simple_void_________::_Impl
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x555555555555555
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__shared_count____gnu_cxx::_Lock_policy_2_::__shared_count
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__shared_ptr_std::thread::_Impl_base____gnu_cxx::_Lock_policy_2_::__shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x40bab8
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::shared_ptr_std::thread::_Impl_base_::shared_ptr
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_Impl_base::_Impl_base
mov edx, 0x40b9e8
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::_Bind_simple_void_________
mov rdx, rax
mov rax, qword [rbp - 8]
add rax, 0x18
mov rsi, rdx
mov rdi, rax
call sym.std::_Bind_simple_void________::_Bind_simple
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x40b9e8
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::thread::_Impl_base::__Impl_base
mov eax, 0
test eax, eax
je 0x40b337
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::thread::_Impl_std::_Bind_simple_void_________.__Impl
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edx, 0x40b9b0
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::__Impl
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_.__Sp_counted_base
mov eax, 0
test eax, eax
je 0x40b3a9
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::__Sp_counted_ptr_inplace
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.operatordelete
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_M_ptr
mov rbx, rax
mov rax, qword [rbp - 0x18]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::_M_alloc
mov rsi, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________::destroy_std::thread::_Impl_std::_Bind_simple_void__________
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
add rax, 0x10
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_Impl::_M_alloc
mov rdx, rax
lea rax, [rbp - 0x21]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::allocator_std::thread::_Impl_std::_Bind_simple_void__________
mov rdx, qword [rbp - 0x38]
lea rcx, [rbp - 0x21]
lea rax, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::__allocated_ptr
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::__Sp_counted_ptr_inplace
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::__allocated_ptr_std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2___::___allocated_ptr
lea rax, [rbp - 0x21]
mov rdi, rax
call sym.std::allocator_std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2__::_allocator
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40b49f
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov esi, obj.typeinfoforstd::_Sp_make_shared_tag
mov rdi, rax
call sym.std::type_info::operator__
test al, al
je 0x40b4d5
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::_M_ptr
jmp 0x40b4da
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x18
mov rdi, rax
call sym.std::_Bind_simple_void________::operator__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Sp_ebo_helper_0_std::allocator_std::thread::_Impl_std::_Bind_simple_void___________true_::_S_get
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::thread::_Impl_std::_Bind_simple_void__________::destroy_std::thread::_Impl_std::_Bind_simple_void__________
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rdx
mov rdi, rax
call sym.std::_Bind_simple_void________::_M_invoke__
add rsp, 0x10
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40b5c4
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rdi, rdx
call rax
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_void______::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_void______
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::get_0ul_void______
mov rdi, rax
call sym.std::forward_void______
mov rax, qword [rax]
call rax
leave
ret
nop word cs:[rax + rax]
nop
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x207766]
push rbp
lea rbp, [rip + 0x20776e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x40b6b6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x40b6a0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
cmp eax, dword [rax]
add byte [rax], al
nop
popfq
fiadd dword [rdx + 0x442d1837]
sbb byte [rip + 0x21fb5444], ch
or dword [rax], eax
add byte [rax], dl
add byte [rax], al
add byte [rax], 0
add byte [rbx + 0x6f], dh
jae 0x40b799
jb 0x40b7a0
pop rdi
movsxd rbp, dword [rdi + 0x64]
jae 0x40b79b
insd dword [rdi], dx
outsb dx, byte [rsi]
je 0x40b7a4
movsxd rbp, dword [rdi]
insb byte [rdi], dx
jae 0x40b7ac
insb byte [rdi], dx
jae 0x40b7b4
pop rdi
xor bl, byte [rdi + 0x30]
jae 0x40b7c2
jne 0x40b7c7
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdx], dh
xor ah, byte [rax]
cmp al, 0x3d
and byte [rsi + 0x61], dh
insb byte [rdi], dx
jne 0x40b7cb
and byte [rsi], ah
and byte es:[rsi + 0x61], dh
insb byte [rdi], dx
jne 0x40b7d4
and byte [rdi + 0x363320], bh
jbe 0x40b7d9
insb byte [rdi], dx
jne 0x40b7e0
and byte [rax], bh
pop r8
pop rdi
push r12
add byte [rdx], sil
jb 0x40b78b
and byte [rax], al
ja 0x40b78f
and byte [rbx + 0x74], dh
jb 0x40b809
add byte fs:[rbx + 0x61], al
jae 0x40b801
and byte [rax], al
or al, byte [rax]
cmp ah, byte [rax]
add byte [rbx + 0x61], al
jae 0x40b80c
and byte [rbx], ah
add byte [rbp + 0x72], al
jb 0x40b81f
outsd dx, dword [rsi]
jb str._n_nTest_time:
outsd dx, dword [rsi]
outsb dx, byte [rsi]
and byte [rbp + 0x73], dh
je 0x40b7d8
and eax, dword [rax]
js 0x40b82d
movsxd rsi, dword gs:[rbp + 0x64]
cmp cl, byte [rdx]
add byte [rdx + 0x65], dl
push rdx
movsxd rsp, dword gs:[rbp + 0x69]
jbe 0x40b831
cmp cl, byte fs:[rdx]
add byte [rdx], cl
or cl, byte [rdx]
push rsp
jae 0x40b84a
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rbx + 0x2d], al
sub eax, 0x6c616d73
insb byte [rdi], dx
sub eax, 0x65747461
insd dword [rdi], dx
jo 0x40b861
xor byte [rsi], ch
imul ebp, dword [rsi], 0x7074756f
outsd dx, dword [rsi]
jne 0x40b869
jo 0x40b86c
je 0x40b827
je 0x40b873
je str._n_nTotal_time:
or cl, byte [rdx]
push rsp
outsd dx, dword [rsi]
je 0x40b864
insb byte [rdi], dx
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x6e], ch
imul ebp, dword [rsi + 0x70], 0x3e2d7475
jb 0x40b87e
sub byte fs:[rsi + 0x6f], ah
jb 0x40b897
jb 0x40b887
cmp al, 0x54
jae 0x40b865
sub byte [rcx + 0x72], ah
jae 0x40b856
sub dword cs:[rax], eax
jbe 0x40b899
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x40b8af
je 0x40b8a4
jo 0x40b8b8
outsb dx, byte gs:[rsi]
add byte fs:[rsi + 0x65], dh
jbe 0x40b8b3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40b8c7
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40b8df
add byte [rsi + 0x61], cl
add byte [rsi + 0x6e], r12b
add byte [r13 + 0x74], al
je 0x40b8d5
imul ebp, dword [rdx + rdi + 0x3a], 0x65736142
and byte [rbx + 0x65], dh
je 0x40b8c3
jae 0x40b8e9
sub byte [rbp + 0x69], dh
outsb dx, byte [rsi]
je 0x40b8b3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x40b905
imul ebp, dword [rdx + rdi + 0x3a], 0x63657250
imul esi, dword [rbx + 0x69], 0x73206e6f
je 0x40b906
jb 0x40b91d
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x6e697528
je 0x40b8ed
add byte [rax], al
add byte [rax], al
jo 0x40b8e1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x6f], dh
jbe 0x40b951
imul esp, dword [rax + 0x72], 0x28646165
push rsp
jae 0x40b913
and byte es:[rsi], ch
sub dword cs:[rax], esp
pop rbx
ja 0x40b960
je 0x40b961
and byte [rbx + rsi*2 + 0x20], dl
cmp eax, 0x6f6c7b20
outsb dx, byte [rsi]
and byte [edi + ebp*2 + 0x6e], ch
and byte [ecx + 0x6e], ch
je 0x40b92e
sub byte [rsi], ah
sub dword [rbx + 0x31], ebx
xor dword [rcx], esi
pop rbp
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x5d7d26
add byte [rsi + 0x6f], dh
jbe 0x40b991
imul esp, dword [rax + 0x72], 0x28646165
push rsp
jae 0x40b953
and byte es:[rsi], ch
sub dword cs:[rax], esp
pop rbx
ja obj.vtableforstd::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_
je 0x40b9a1
and byte [rbx + rsi*2 + 0x20], dl
cmp eax, 0x6e697b20
je 0x40b96a
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x5d7d26
add byte [rax], al
add bh, bh
jg 0x40b959
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
out dx, eax
jg 0x40b9e6
ret
xchg eax, esp
and eax, 0x54b249ad
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp + 0x41], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40b9db
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40b9df
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rbx + 0x40], bh
add byte [rax], al
mov bl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi*4 + 0x40], ch
add byte [rax], al
sal byte [rbx + 0x40], cl
add byte [rax], al
adc dh, byte [rax + rax*2]
add byte [rdx + 0x40b4], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x40bb
add byte [rax], al
add dh, bh
mov dl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
mov bl, 0x40
add byte [rax], al
add byte [rax], al
add ah, bl
mov ah, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax + rax*2], bh
add byte [rdx + rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x4032], ah
add byte [rax], al
add dl, ch
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax + rax*2], bh
add dh, cl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x40
add byte [rax], al
rcl byte [rdi], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax + rax*2], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0xbc
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x40bc, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rdi], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
mov esp, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rdi], 1
add byte [rax], al
add byte [rax], al
add byte [rsp + rbp*2 + 0x40], dl
add byte [rax], al
rcl byte [rdi], 1
add byte [rax], al
add byte [rax], al
add byte [rax], ch
sub byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
mov ebx, 0x40
add byte [rax], al
clc
mov esp, 0x40
add byte [rax], al
push rbx
je 0x40bb55
xor ebx, dword [rdi + 0x53]
jo 0x40bb87
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40bb93
pop rdi
jo 0x40bba6
jb 0x40bb93
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40bb76
je 0x40bbaa
jb 0x40bba9
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40bb81
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40bbc8
push rax
jbe 0x40bbd9
jbe 0x40bbab
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bbd8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40bbf5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
sal byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40bb], ah
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x40bbd4
cmp dword [rdi + 0x53], ebx
jo 0x40bc07
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x40bc17
add byte [eax], ch
sub byte [rdx], dh
add byte [rax], al
add byte [rax], al
add al, ah
mov ebx, 0x40
add byte [rax], al
enter 0x40bc, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
je 0x40bc1a
je 0x40bc4e
jb 0x40bc4d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40bc25
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40bc6c
push rax
jbe 0x40bc7d
jbe 0x40bc4f
add byte [r8], r8b
add byte [rax], ch
sub byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], ch
mov esp, 0x40
add byte [rax], al
mov esp, 0x40
add byte [rax], al
xor dword [rdx], esi
jne 0x40bca1
jo 0x40bca4
je 0x40bc84
je 0x40bca5
imul ebp, dword [rsi + 0x67], 0x32280000
sub byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax - 0x44], dl
add byte [rax], al
add byte [rax], al
add byte [rax - 0x44], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rax], esi
jne 0x40bcc9
jo 0x40bccc
je 0x40bc9f
imul ebp, dword [rbp], 0xd0000000
sal byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax - 0x44], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rdx], esi
jne 0x40bce9
jo 0x40bcec
je 0x40bcbd
jbe 0x40bce5
movsxd rsp, dword [rbp]
add byte [rax], ch
sub byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40bc], bl
add byte [rax], al
add byte [rax + 0x40bc], ch
add byte [rax], al
add byte [rcx], bh
cmp dword [rcx + 0x6e], ecx
jo 0x40bd12
je 0x40bce5
imul ebp, dword [rbp], 0
add al, dl
sal byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40bc], bh
add byte [rax], al
add byte [rcx], dh
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x40bd33
je 0x40bd04
jbe 0x40bd2c
movsxd rsp, dword [rbp]
add byte [rax], al
sal byte [rcx], 1
add byte [rax], al
add byte [rax], al
add al, ah
mov esp, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
je 0x40bd1a
je 0x40bd4e
jb 0x40bd4d
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40bd5d
pop rdi
jae 0x40bd5b
add byte [r8], r13b
sub byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
mov ebp, 0x40
add byte [rax], al
pop rax
mov ebp, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
je 0x40bd54
pop rdi
push rbx
jo 0x40bd87
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40bd93
pop rdi
jae 0x40bd99
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bd9d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40bdba
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
add byte [rax], al
add al, dl
sal byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40bd], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x40bdb4
xor dword [rdi + 0x4d], ebx
jne 0x40bdfc
js 0x40bdea
jae 0x40bdf4
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bdf8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40be15
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
adc al, byte [rax]
add byte [rcx + 2], bl
add byte [rax], al
and byte [rdi - 1], dl
jmp qword [rax]
adc eax, dword [rax]
add byte [rax + 0x5a], ah
push rax
adc al, byte [rax]
add byte [rsi + 0x5b], dl
ljmp [rax + 0x6c000013]
pop rbx
dec eax
adc eax, dword [rax]
add byte [rcx - 0x170000a5], dl
adc eax, dword [rax]
add al, al
pop rbx
dec dword [rax]
adc al, 0
add bh, ch
pop rbx
ljmp [rax]
adc al, 0
add byte [rcx], cl
pop rsp
dec dword [rax + 0x14]
add byte [rax], al
xor ebx, dword [rdi + rdi*8 - 1]
push 0x76000014
pop rsp
dec dword [rax - 0x7dffffea]
pop rsp
ljmp [rax - 0x6effffea]
pop rsp
dec eax
add byte [rax], al
pop rsp
call 0xfffffffff540be3b
pop rsp
dec dword [rax]
add byte [rax], al
add ebx, dword [rbp - 1]
call rax
sbb al, 0
add byte [rax + 0x5e], ah
clc
sbb al, 0
add al, ah
pop rsi
lcall [rax]
sbb eax, 0x60b20000
inc dword [rax + 0x1d]
add byte [rax], al
ljmp [rax + 0x1d]
add byte [rax], al
push rax
pop rsi
add byte [rax], al
inc dword [rax]
add byte [rax], al
adc esp, dword [rbp - 1]
dec dword [rax + 0x13]
add byte [rax], al
ljmp [rax + 0x13]
add byte [rax], al
dec dword [rax + 0x70000013]
dec dword [rax - 0x2effffec]
ljmp [rax - 0x4ffffec]
dec eax
adc al, 0
add byte [rbx], dl
call 0x3040beb1
dec dword [rax]
adc eax, 0x66460000
ljmp [rax]
adc eax, 0x66700000
dec dword [rax + 0x15]
add byte [rax], al
movabs byte [0xc600001568ffff66], al
dec dword [rax - 0x13ffffeb]
ljmp [rax + 0x40000015]
dec eax
adc eax, 0x67600000
call 0x7c40bef2
dec dword [rax]
add byte [rax], al
mov esp, 0x28ffff67
add byte [rax], al
loop 0x40bf55
dec dword [rax + 0x16]
add byte [rax], al
adc byte [rax - 1], ch
ljmp [rax + 0x16]
add byte [rax], al
sub al, 0x68
ljmp [rax]
add byte [rax], al
jp 0x40bf6e
dec dword [rax + 0x17]
add byte [rax], al
shr byte [rax - 1], 1
ljmp [rax + 0x17]
add byte [rax], al
clc
push 0x1788ffff
add byte [rax], al
punpckhwd mm7, mm7
ljmp [rax + 0x26000017]
imul edi, edi, 0x17c8ff
add byte [rsi], bh
imul edi, edi, 0x17e8ff
add byte [rsi + 0x69], bl
dec dword [rax]
sbb byte [rax], al
add byte [rsi + 0x69], ch
ljmp [rax]
sbb byte [rax], al
add byte [rsi + 0x6a], al
call qword [rax + 0x18]
add byte [rax], al
scasb al, byte [rdi]
push -1
push qword [rax + 0x18]
add byte [rax], al
in al, dx
push -1
push qword [rax + 0x24000018]
imul edi, edi, -1
fcomp dword [rax]
add byte [rax], al
insb byte [rdi], dx
inc dword [rax]
sbb dword [rax], eax
add dl, ch
insb byte [rdi], dx
jmp qword [rax]
sbb dword [rax], eax
add byte [rsi + 0x6d], al
inc dword [rax + 0x19]
add byte [rax], al
and ch, byte [rsi - 1]
jmp qword [rax + 0x19]
add byte [rax], al
pop rsi
outsd dx, dword [rsi]
inc dword [rax - 0x5fffffe7]
outsd dx, dword [rsi]
jmp qword [rax - 0x39ffffe7]
outsd dx, dword [rsi]
inc eax
sbb dword [rax], eax
add byte [rsi], dl
jo 0x40bf9e
jmp rax
sbb dword [rax], eax
add byte [rax + 0xffff71], ah
sbb al, byte [rax]
add dl, dh
jno 0x40bfae
ljmp [rax]
sbb al, byte [rax]
add byte [rax + 0x72], cl
dec dword [rax + 0x1a]
add byte [rax], al
js 0x40c030
ljmp [rax + 0x1a]
add byte [rax], al
sahf
jb 0x40bfc6
dec dword [rax - 0x2bffffe6]
jb 0x40bfce
ljmp [rax + 0x1e00001a]
jae 0x40bfd6
call rax
sbb al, byte [rax]
add byte [rdx + 0x73], ch
push rax
sbb al, byte [rax]
add byte [rax + 0x10ffff73], bh
sbb eax, dword [rax]
add ah, dh
jae 0x40bfee
push qword [rax]
sbb eax, dword [rax]
add byte [rsi + 0x74], bl
lcall [rax + 0x1b]
add byte [rax], al
test byte [rdi + rdi*8 - 1], dh
js 0x40c01d
add byte [rax], al
mov eax, 0x98ffff74
sbb eax, dword [rax]
add dl, dh
je 0x40c00e
mov eax, 0x3a00001b
jne 0x40c016
jmp rax
sbb eax, dword [rax]
add byte [rax + 0x75], ah
inc dword [rax]
sbb al, 0
add byte [rdx + 0x20ffff76], dl
sbb al, 0
add byte [rdi + rsi*2], cl
inc dword [rax + 0x1c]
add byte [rax], al
ja 0x40c036
jmp qword [rax + 0x1c]
add byte [rax], al
push rdx
ja 0x40c03e
inc dword [rax + 0x7e00001c]
jle 0x40c046
ljmp [rax + 0x1100001c]
jg 0x40c04e
call qword [rax + 0x1f00001d]
jg 0x40c056
push qword [rax - 0x65ffffe3]
jg 0x40c05e
call rax
sbb eax, 0x7fc40000
push rax
sbb eax, 0x7ffb0000
call qword [rax]
add byte [rax], al
cmp r15b, 0xff
cmp byte [rsi], bl
add byte [rax], al
jl 0x40bffe
lcall [rax + 0x1e]
add byte [rax], al
jrcxz 0x40c006
inc dword [rax - 0xeffffe2]
cmp bh, 0xff
movabs al, byte [0xc0ffff810b00001e]
add byte [rax], al
and eax, 0xe0ffff81
add byte [rax], al
cmp edi, 0x1f00ff
add byte [rdx + 0x28ffff81], bl
add byte [rax], al
test al, 0x81
dec dword [rax + 0x1f]
add byte [rax], al
ret 0xff81
ljmp [rax + 0x1f]
add byte [rax], al
fadd qword [rcx + 0x1f88ffff]
add byte [rax], al
test byte [rcx + 0x1fa8ffff], 0
add byte [rax - 0x7e], dl
call rax
add byte [rax], al
pop rsi
push rax
add byte [rax], al
lcall [rax]
and byte [rax], al
add ah, bl
cmp byte [rax], ah
add byte [rax], al
cmp rdi, -1
and byte [rax], al
add byte [rbx + rax*4 - 1], dh
inc dword [rax - 0x60ffffe0]
cmp edi, -1
movabs al, byte [0xc0ffff83ad000020]
and byte [rax], al
add byte [rbx - 0x1f00007d], bh
and byte [rax], al
add byte [rbx], dl
test bh, bh
dec dword [rax]
and dword [rax], eax
add byte [rdx], ah
test bh, bh
ljmp [rax]
and dword [rax], eax
add byte [rsi], ch
test bh, bh
dec dword [rax + 0x21]
add byte [rax], al
test dil, dil
ljmp [rax + 0x21]
add byte [rax], al
test bh, bh
dec dword [rax - 0x6dffffdf]
test bh, bh
ljmp [rax - 0x53ffffdf]
test bh, bh
dec eax
and dword [rax], eax
add al, cl
test bh, bh
call 0xffffffffe440c17e
test bh, bh
dec dword [rax]
and al, byte [rax]
add byte [rsi - 0x7b], cl
push qword [rax]
and al, byte [rax]
add byte [rdx + 0x58ffff85], dl
and al, byte [rax]
add byte [rdx + 0x78ffff85], dh
and al, byte [rax]
add dh, cl
test edi, edi
jmp qword [rax + 0x12000022]
xchg bh, bh
dec eax
and al, byte [rax]
add byte [rax], ah
xchg bh, bh
call 0xffffffffaa40c1b7
xchg bh, bh
lcall [rax]
and eax, dword [rax]
add byte [rax + 0x38ffff86], bh
and eax, dword [rax]
add byte [rdx], bh
xchg edi, edi
jmp qword [rax + 0x23]
add byte [rax], al
push rsp
xchg edi, edi
inc dword [rax + 0x6e000023]
xchg edi, edi
jmp qword [rax - 0x3bffffdd]
xchg edi, edi
dec eax
and eax, dword [rax]
add byte [rsi], cl
mov bh, bh
push rax
and eax, dword [rax]
add byte [rax + rcx*4], bl
call qword [rax]
and al, 0
add byte [rdx], ch
mov bh, bh
push qword [rax]
and al, 0
add byte [rdx - 0x78], cl
call qword [rax + 0x24]
add byte [rax], al
jl 0x40c16e
push qword [rax + 0x24]
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
mov bh, bh
call qword [rax - 0x5ffffdc]
mov bh, bh
push qword [rax + 0x48000024]
mov edi, edi
fsub dword [rax + rax]
add byte [rbp - 0x7000077], dl
and al, 0
add byte [rbx + 0x18ffff89], ah
and eax, 0x89bd0000
cmp byte [rip - 0x76290000], ah
lcall [rax + 0x25]
add byte [rax], al
mov edi, edi
js 0x40c24f
add byte [rax], al
mov r15b, dil
jmp qword [rax + 0x67000025]
mov bh, bh
dec eax
and eax, 0x8a750000
call 0xffffffff8340c26a
mov bh, bh
dec dword [rax]
add byte es:[rax], al
xchg eax, ecx
mov bh, bh
ljmp [rax]
add byte es:[rax], al
mov edi, edi
call qword [rax + 0x26]
add byte [rax], al
mov r15, rdi
push qword [rax + 0x26]
add byte [rax], al
pop rdx
mov edi, edi
call qword [rax + 0x7a000026]
mov edi, edi
push qword [rax - 0x53ffffda]
mov edi, edi
call rax
add byte es:[rax], al
mov edi, edi
push rax
add byte es:[rax], al
sub cl, byte [rdi + rdi*8 + 0x2710ff]
add byte [rax - 0x74], bh
cmp byte [rdi], ah
add byte [rax], al
lcall [rax + 0x27]
add byte [rax], al
ror dword [rdi + rdi*8 + 0x2778ff], cl
add ch, ch
lcall [rax + 0x7000027]
mov eax, 0x22000027
fsub dword [rdi]
add byte [rax], al
jl 0x40c24b
inc dword [rax]
sub byte [rax], al
add byte [rsi + 0x20ffff8d], dl
sub byte [rax], al
add byte [rsi + 0x40ffff8d], dh
sub byte [rax], al
add al, dl
jmp qword [rax + 0x28]
add byte [rax], al
fimul word [rbp + 0x2880ffff]
add byte [rax], al
in al, dx
jmp qword [rax - 0x5ffffd8]
inc eax
sub byte [rax], al
add byte [rax], cl
jmp rax
sub byte [rax], al
add byte [rcx + 0x8ffff8e], dh
sub dword [rax], eax
add cl, bl
ljmp [rax]
sub dword [rax], eax
add bh, ah
dec dword [rax + 0x29]
add byte [rax], al
jp 0x40c2a5
push qword [rax + 0x29]
add byte [rax], al
mov byte [rdi + 0x2990ffff], cl
add byte [rax], al
xchg eax, esi
push qword [rax + 0x29000029]
nop
fsubr dword [rcx]
add byte [rax], al
nop
clc
sub dword [rax], eax
add byte [rbp - 0x70], al
lcall [rax]
sub al, byte [rax]
add al, bl
nop
inc dword [rax + 0x2a]
add byte [rax], al
xor al, 0x91
ljmp [rax + 0x2a]
add byte [rax], al
nop
xchg eax, ecx
call qword [rax - 0x55ffffd6]
xchg eax, ecx
push qword [rax - 0x21ffffd6]
xchg eax, ecx
call rax
sub al, byte [rax]
add byte [rdx - 0x6e], ch
push rax
sub al, byte [rax]
add byte [rsi + 0x18ffff92], al
sub eax, dword [rax]
add dl, cl
xchg eax, edx
inc dword [rax + 0x2b]
add byte [rax], al
fcom dword [rdx + 0x2b60ffff]
add byte [rax], al
pop rdx
xchg eax, ebx
inc dword [rax - 0x5dffffd5]
xchg eax, ebx
jmp qword [rax - 0x11ffffd5]
xchg eax, ebx
inc eax
sub eax, dword [rax]
add byte [rdx], ch
xchg eax, esp
jmp rax
sub eax, dword [rax]
add byte [rdx - 0x6c], cl
inc dword [rax]
sub al, 0
add byte [rbx - 0x6c], bl
jmp qword [rax]
sub al, 0
add byte [rcx - 0x6c], ch
inc dword [rax + 0x2c]
add byte [rax], al
cld
xchg eax, esp
ljmp [rax + 0x2c]
add byte [rax], al
ja 0x40c363
dec dword [rax - 0x6effffd4]
xchg eax, ebp
ljmp [rax - 0x16ffffd4]
xchg eax, ebp
call rax
sub al, 0
add byte [rbx], al
xchg eax, esi
push rax
sub al, 0
add byte [rax - 0x6a], al
call qword [rax]
sub eax, 0x964a0000
push qword [rax]
sub eax, 0x967d0000
call qword [rax + 0x2d]
add byte [rax], al
mov edx, dword [rsi + 0x2d70ffff]
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
xchg eax, esi
call qword [rax - 0x40ffffd3]
xchg eax, esi
push qword [rax - 0x25ffffd3]
xchg eax, esi
call rax
sub eax, 0x96f40000
push rax
sub eax, 0x97260000
call qword [rax]
add byte cs:[rax], al
xor al, 0x97
push qword [rax]
add byte cs:[rax], al
xchg rax, rdi
call qword [rax + 0x2e]
add byte [rax], al
push 0x70ffff97
add byte cs:[rax], al
xchg eax, edi
call qword [rax - 0x63ffffd2]
xchg eax, edi
push qword [rax - 0x31ffffd2]
xchg eax, edi
call rax
add byte cs:[rax], al
xor al, 0x98
push rax
add byte cs:[rax], al
jo 0x40c406
call qword [rax]
add byte [rax], al
xchg eax, esp
cwde
push qword [rax]
add byte [rax], al
cli
cwde
call qword [rax + 0x2f]
add byte [rax], al
or byte [rcx + 0x2f70ffff], bl
add byte [rax], al
cmp bl, byte [rcx + 0x2f90ffff]
add byte [rax], al
insb byte [rdi], dx
cdq
push qword [rax - 0x35ffffd1]
cdq
call rax
add byte [rax], al
fcomp dword [rcx + 0x2ff0ffff]
add byte [rax], al
cdq
call qword [rax]
xor byte [rax], al
add byte [rdx + rbx*4], cl
push qword [rax]
xor byte [rax], al
add byte [rsi], ah
call qword [rax + 0x30]
add byte [rax], al
push qword [rax + 0x30]
add byte [rax], al
push rax
call qword [rax + 0x5c000030]
push qword [rax + 0x78000030]
call rax
xor byte [rax], al
add dh, dl
clc
xor byte [rax], al
add byte [rsi], ah
wait
jmp qword [rax]
xor dword [rax], eax
add byte [rsi - 0x65], ch
inc dword [rax + 0x31]
add byte [rax], al
jl 0x40c499
jmp qword [rax + 0x31]
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
wait
inc dword [rax - 0x3dffffcf]
wait
jmp qword [rax - 0x21ffffcf]
wait
inc eax
xor dword [rax], eax
add byte [rsi], ch
pushfq
call 0x3c40c556
pushfq
dec dword [rax]
xor al, byte [rax]
add byte [rsi - 0x64], ah
ljmp [rax]
xor al, byte [rax]
add byte [rax + 0x48ffff9c], bl
xor al, byte [rax]
add al, ah
pushfq
ljmp [rax + 0x32]
add byte [rax], al
sub al, 0x9d
dec dword [rax + 0x6e000032]
popfq
ljmp [rax + 0x1b000032]
sahf
call rax
xor al, byte [rax]
add byte [rcx], ch
sahf
push rax
xor al, byte [rax]
add byte [rdi + rbx*4], al
lcall [rax]
xor eax, dword [rax]
add byte [rax - 0x61], ch
cmp byte [rbx], dh
add byte [rax], al
mov ch, 0x9f
lcall [rax + 0x33]
add byte [rax], al
sub al, 0xa0
inc dword [rax + 0x66000033]
movabs al, byte [0xa0b2000033a8ffff]
dec eax
xor eax, dword [rax]
add al, al
movabs al, byte [0xa0da000033e8ffff]
dec dword [rax]
xor al, 0
add ah, dh
movabs al, byte [0xa10e00003428ffff]
dec dword [rax + 0x34]
add byte [rax], al
sub byte [rcx + 0x3468ffff], ah
add byte [rax], al
pop rdx
movabs eax, dword [0xa17600003488ffff]
ljmp [rax - 0x6dffffcc]
movabs eax, dword [0xa1e2000034c8ffff]
push rax
xor al, 0
add al, dh
movabs eax, dword [0xa27f00003510ffff]
cmp byte [rip - 0x5d730000], dh
lcall [rax + 0x35]
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
movabs byte [0xa2c100003578ffff], al
lcall [rax - 0x23ffffcb]
movabs byte [0xa2f6000035b8ffff], al
fdiv dword [rip - 0x5cd60000]
clc
xor eax, 0xa35c0000
lcall [rax]
add byte ss:[rax], al
push -0x5d
cmp byte [rsi], dh
add byte [rax], al
test byte [rbx + 0x3658ffff], ah
add byte [rax], al
sahf
movabs dword [0xa3b800003678ffff], eax
lcall [rax - 0x2affffca]
movabs dword [0xa3e3000036b8ffff], eax
fdiv dword [rsi]
add byte [rax], al
std
movabs dword [0xa417000036f8ffff], eax
lcall [rax]
add byte [rax], al
xor ah, byte [rdi + rdi*8 + 0x3738ff]
add byte [rax - 0x5c], dl
lcall [rax + 0x37]
add byte [rax], al
frstor dword [rdi + rdi*8 + 0x3780ff]
add byte [rdx - 0x5b], ah
ljmp [rax - 0x25ffffc9]
movsd dword [rdi], dword ptr [rsi]
call rax
add byte [rax], al
push rdx
cmpsb byte [rsi], byte ptr [rdi]
clc
add byte [rax], al
retf -0x5a
jmp qword [rax]
cmp byte [rax], al
add al, bl
cmpsb byte [rsi], byte ptr [rdi]
inc dword [rax + 0x38]
add byte [rax], al
cmpsq qword [rsi], qword ptr [rdi]
jmp qword [rax + 0x38]
add byte [rax], al
pop rbx
cmpsd dword [rsi], dword ptr [rdi]
inc dword [rax - 0x2fffffc8]
cmpsd dword [rsi], dword ptr [rdi]
jmp qword [rax - 0x21ffffc8]
cmpsd dword [rsi], dword ptr [rdi]
inc eax
cmp byte [rax], al
add al, bh
cmpsd dword [rsi], dword ptr [rdi]
jmp rax
cmp byte [rax], al
add byte [rdx], dl
test al, 0xff
inc dword [rax]
cmp dword [rax], eax
add byte [rax + rbp*4], ch
jmp qword [rax]
cmp dword [rax], eax
add byte [rdx - 0x58], cl
inc dword [rax + 0x39]
add byte [rax], al
test al, 0xff
jmp qword [rax + 0x39]
add byte [rax], al
adc byte [rcx + 0x3980ffff], ch
add byte [rax], al
stosd dword [rdi], eax
ljmp [rax + 0x5c000039]
stosd dword [rdi], eax
call rax
cmp dword [rax], eax
add byte [rax - 0x55], bh
push rax
cmp dword [rax], eax
add byte [rbx + rbp*4 + 0x3a10ffff], dl
add byte [rax], al
in al, 0xab
cmp byte [rdx], bh
add byte [rax], al
repne stosd dword [rdi], eax
lcall [rax + 0x3a]
add byte [rax], al
sbb al, 0xac
js 0x40c764
add byte [rax], al
push rsi
lodsb al, byte [rsi]
lcall [rax + 0x4000003a]
scasb al, byte [rdi]
inc eax
cmp al, byte [rax]
add byte [rsi - 0x52], bl
jmp rax
cmp al, byte [rax]
add byte [rsi + rbp*4 - 1], ch
inc dword [rax]
cmp eax, dword [rax]
add ah, ah
scasb al, byte [rdi]
ljmp [rax]
cmp eax, dword [rax]
add byte [rcx], dl
scasd eax, dword [rdi]
dec dword [rax + 0x3b]
add byte [rax], al
scasd eax, dword [rdi]
ljmp [rax + 0x3b]
add byte [rax], al
push rax
scasd eax, dword [rdi]
dec dword [rax - 0x5cffffc5]
scasd eax, dword [rdi]
ljmp [rax - 0xfffffc5]
scasd eax, dword [rdi]
call rax
cmp eax, dword [rax]
add byte [rax + rsi*4 - 1], al
push rax
cmp eax, dword [rax]
add byte [rsi - 0x50], bl
call qword [rax]
cmp al, 0
add byte [rax + 0x30ffffb0], ch
cmp al, 0
add byte [rdx], al
mov cl, 0xff
call qword [rax + 0x3c]
add byte [rax], al
mov cl, 0xff
push qword [rax + 0x3c]
add byte [rax], al
push -0x6f00004f
cmp al, 0
add byte [rsi - 0x4f00004f], cl
cmp al, 0
add ah, cl
mov cl, 0xff
call rax
cmp al, 0
add al, ch
mov cl, 0xff
push rax
cmp al, 0
add byte [rip + 0x10ffffb2], bl
cmp eax, 0xb2430000
push qword [rax]
cmp eax, 0xb2520000
call qword [rax + 0x3d]
add byte [rax], al
sahf
mov dl, 0xff
push qword [rax + 0x3d]
add byte [rax], al
mov ebx, 0x90ffffb2
cmp eax, 0xb3040000
push qword [rax + 0x1900003d]
mov ah, 0xff
call rax
cmp eax, 0xb46c0000
clc
cmp eax, 0xb66a0000
jmp qword [rax]
add byte ds:[rax], al
sal byte [rsi + 0x3e40ffff], 1
add byte [rax], al
loope 0x40c7cc
jmp qword [rax + 0x3e]
add byte [rax], al
and al, 0xb7
inc dword [rax + 0x6d00003e]
mov bh, 0xff
jmp qword [rax - 0x11ffffc2]
mov eax, 0x3ec8ffff
add byte [rax], al
mov ecx, 0x3ee8ffff
add byte [rax], al
xchg eax, esi
mov ecx, 0x3f08ffff
add byte [rax], al
sar byte [rcx + 0x3f28ffff], cl
add byte [rax], al
in al, 0xb9
dec dword [rax + 0x3f]
add byte [rax], al
add al, 0xba
ljmp [rax + 0x3f]
add byte [rax], al
in eax, dx
mov edx, 0x3f90ffff
add byte [rax], al
adc al, 0xbb
push qword [rax - 0x33ffffc1]
mov ebp, 0x3fd0ffff
add byte [rax], al
or bh, byte [rsi + 0x3ff0ffff]
add byte [rax], al
mov esi, 0x4010ffff
add byte [rax], al
pop rsp
mov esi, 0x4030ffff
add byte [rax], al
sar byte [rsi + 0x4058ffff], cl
add byte [rax], al
adc bh, byte [rdi + 0x4078ffff]
add byte [rax], al
mov bh, byte [rdi + 0x40a0ffff]
add byte [rax], al
out 0xbf, al
inc eax
add byte [rax], al
sar dil, 0xff
loopne 0x40c8f2
add byte [rax], al
test al, 0xc0
inc dword [rax]
add byte [r8], al
pop rsi
sar edi, -1
and byte [rcx], al
add byte [rcx + rax*8 - 1], ch
inc dword [rax + 0x41]
add byte [rax], al
xchg eax, esi
sar edi, -1
add byte [r8], al
ret 0xffff
mov byte [rcx], al
add byte [rbp - 0x5700003e], dh
add byte [r8], al
or ebx, eax
call rax
add byte [r8], al
xor al, 0xc3
push rax
add byte [r8], al
jb 0x40c8b9
call qword [rax]
add byte [rax], al
mov es, ebx
push qword [rax]
add byte [rax], al
ret
ret
call qword [rax + 0x42]
add byte [rax], al
ret
push qword [rax + 0x42]
add byte [rax], al
pop rsi
jmp qword [rax + 0x4a000042]
dec eax
add byte [rax], al
jle 0x40c8eb
call 0xffffffffa440c96f
dec dword [rax]
add byte [r8], al
clc
push qword [rax]
add byte [r8], al
call qword [rax + 0x43]
add byte [rax], al
push qword [rax + 0x43]
add byte [rax], al
je 0x40c914
call qword [rax - 0x3affffbd]
push qword [rax - 0x20ffffbd]
call rax
add byte [r8], al
cmp bh, al
clc
add byte [r8], al
insb byte [rdi], dx
lcall [rax]
add byte [rax], r8b
mov esi, 0x38ffffc7
add byte [rax], r8b
in al, 0xc7
lcall [rax + 0x44]
add byte [rax], al
enter -1, 0x78
add byte [rax], r8b
enter -1, -0x68
add byte [rax], r8b
jbe 0x40c95e
mov eax, 0x86000044
enter -1, -0x28
add byte [rax], r8b
movabs byte [0xad000044f8ffffc8], al
enter -1, 0x18
add byte [r8], r8b
fcmovne st(0), st(0)
cmp byte [rbp], al
add dl, ch
enter -1, 0x58
add byte [r8], r8b
leave
js 0x40ca0f
add byte [rax], al
leave
lcall [rax - 0x59ffffbb]
leave
mov eax, 0x8000045
retf -1
fadd dword [rbp]
add byte [rax - 0x34], cl
inc dword [rax]
add byte [rax], r8b
mov esp, cs
jmp qword [rax]
add byte [rax], r8b
hlt
int3
dec dword [rax + 0x46]
add byte [rax], al
loopne 0x40c9cb
push qword [rax + 0x46]
add byte [rax], al
adc al, 0xce
call qword [rax + 0x3a000046]
push qword [rax - 0x71ffffba]
fadd dword [rsi]
add byte [rsi + rcx*8 + 0x46f8ffff], bl
add byte [rax], al
test al, 0xce
lcall [rax]
add byte [r8], r8b
loopne 0x40c9fc
cmp byte [rdi], al
add byte [rax], ch
iretd
lcall [rax + 0x47]
add byte [rax], al
iretd
js 0x40ca89
add byte [rax], al
push rsp
iretd
lcall [rax + 0x64000047]
iretd
mov eax, 0x7b000047
sar bh, 1
fadd dword [rdi]
add al, cl
sar bh, 1
inc dword [rax]
add byte [rax], al
in al, 0xd0
jmp qword [rax]
add byte [rax], al
out dx, eax
sar bh, 1
inc dword [rax + 0x48]
add byte [rax], al
sar edi, 1
jmp qword [rax + 0x48]
add byte [rax], al
jl 0x40ca4f
inc dword [rax - 0x1dffffb8]
sar edi, 1
jmp qword [rax + 0x3e000048]
sar bh, cl
inc eax
add byte [rax], al
sbb al, 0xd3
jmp rax
add byte [rax], al
sar edi, cl
inc dword [rax]
add byte [r8], al
push 0x20ffffd3
add byte [r8], al
xchg eax, ebx
sar edi, cl
inc dword [rax + 0x49]
add byte [rax], al
mov ebp, 0x60ffffd3
add byte [r8], al
add eax, 0x80ffffd4
add byte [r8], al
jmp qword [rax + 0x5c000049]
inc eax
add byte [r8], al
js 0x40caaa
jmp rax
add byte [r8], al
adc esp, -1
inc dword [rax]
add byte [rax], al
mov cl, 0xd4
jmp qword [rax]
add byte [rax], al
inc dword [rax + 0x4a]
add byte [rax], al
or dl, ch
jmp qword [rax + 0x4a]
add byte [rax], al
inc dword [rax + 0xe00004a]
ljmp [rax + 0x3000004a]
dec eax
add byte [rax], al
pop rdx
call 0xffffffffa240cb67
dec dword [rax]
add byte [r8], al
ljmp [rax]
add byte [r8], al
dec dword [rax + 0x4b]
add byte [rax], al
add edi, edx
ljmp [rax + 0x4b]
add byte [rax], al
sbb edx, edi
dec dword [rax + 0x4c00004b]
xlatb
ljmp [rax - 0xdffffb5]
xlatb
dec eax
add byte [r8], al
add eax, ebx
call 0x2c40cba8
fdivr st(7)
dec dword [rax]
add byte [rax], r8b
fdivr st(7)
ljmp [rax]
add byte [rax], r8b
jl 0x40cb46
dec dword [rax + 0x4c]
add byte [rax], al
mov al, bl
ljmp [rax + 0x4c]
add byte [rax], al
lodsb al, byte [rsi]
fdivr st(7)
dec dword [rax - 0x2dffffb4]
fdivr st(7)
ljmp [rax - 0x1fffffb4]
fdivr st(7)
dec eax
add byte [rax], r8b
push rsi
fcos
call 0xffffffffa240cbe9
fcos
call qword [rax]
add byte [r8], r8b
in al, dx
fcos
push qword [rax]
add byte [r8], r8b
call qword [rax + 0x4d]
add byte [rax], al
cmp dl, bl
push qword [rax + 0x4d]
add byte [rax], al
sbb dl, 0xff
call qword [rax - 0x4effffb3]
push qword [rax + 0x1100004d]
call rax
add byte [r8], r8b
push rax
add byte [r8], r8b
call qword [rax]
add byte [rax], r8b
insb byte [rdi], dx
push qword [rax]
add byte [rax], r8b
nop
call qword [rax + 0x4e]
add byte [rax], al
jge 0x40cbd2
push qword [rax + 0x4e]
add byte [rax], al
ret 0xffdc
call qword [rax - 0x23ffffb2]
fdiv st(7), st(0)
push qword [rax - 0x15ffffb2]
fdiv st(7), st(0)
call rax
add byte [rax], r8b
sub al, 0xdd
push rax
add byte [rax], r8b
call qword [rax]
add byte [r8], r8b
ja 0x40cc03
push qword [rax]
add byte [r8], r8b
mov al, 0xdd
call qword [rax + 0x4f]
add byte [rax], al
mov esp, 0x70ffffdd
add byte [r8], r8b
fstp st(5), st(0)
call qword [rax - 0x12ffffb1]
push qword [rax + 0x800004f]
fdivp st(7)
call rax
add byte [r8], r8b
fdivp st(7)
push rax
add byte [r8], r8b
xor dh, bl
call qword [rax]
push rax
add byte [rax], al
fdivp st(7)
push qword [rax]
push rax
add byte [rax], al
push 0x50ffffde
push rax
add byte [rax], al
movabs byte [0xc800005070ffffde], al
fdivp st(7)
call qword [rax - 0x11ffffb0]
fdivp st(7)
push qword [rax + 0x55000050]
call rax
push rax
add byte [rax], al
push rax
push rax
add byte [rax], al
mov edi, 0x10ffffdf
push rcx
add byte [rax], al
push qword [rax]
push rcx
add byte [rax], al
call qword [rax + 0x51]
add byte [rax], al
sbb ah, al
push qword [rax + 0x51]
add byte [rax], al
sub al, ah
call qword [rax + 0x6a000051]
loopne 0x40ccc6
push qword [rax - 0x7bffffaf]
loopne 0x40ccce
call rax
push rcx
add byte [rax], al
mov dh, 0xe0
push rax
push rcx
add byte [rax], al
js 0x40ccbf
call qword [rax]
push rdx
add byte [rax], al
mov edx, 0x30ffffe1
push rdx
add byte [rax], al
loope 0x40ccee
call qword [rax + 0x52]
add byte [rax], al
add edx, esp
push qword [rax + 0x52]
add byte [rax], al
sbb al, 0xe2
call qword [rax + 0x2a000052]
loop 0x40cd06
push qword [rax + 0x6c000052]
loop 0x40cd0e
call rax
push rdx
add byte [rax], al
xchg dl, ah
push rax
push rdx
add byte [rax], al
mov bh, 0xe2
call qword [rax]
push rbx
add byte [rax], al
loop 0x40cd26
push qword [rax]
push rbx
add byte [rax], al
loop 0x40cd2e
call qword [rax + 0x53]
add byte [rax], al
jrcxz 0x40cd36
push qword [rax + 0x53]
add byte [rax], al
mov bl, 0xe3
lcall [rax - 0x31ffffad]
jrcxz 0x40cd46
mov eax, 0xdc000053
jrcxz 0x40cd4e
fcom dword [rbx]
add byte [rsi], cl
in al, 0xff
clc
push rbx
add byte [rax], al
in al, 0xff
lcall [rax]
push rsp
add byte [rax], al
jno 0x40cd4a
cmp byte [rax + rax], dl
or ah, ch
jmp qword [rax + 0x54]
add byte [rax], al
and ch, ah
inc dword [rax + 0x78000054]
in eax, 0xff
jmp qword [rax - 0x73ffffac]
in eax, 0xff
inc eax
push rsp
add byte [rax], al
cmp ah, dh
call 0x2240cde9
out 0xff, eax
dec dword [rax]
push rbp
add byte [rax], al
out 0xff, eax
ljmp [rax]
push rbp
add byte [rax], al
push rax
out 0xff, eax
dec dword [rax + 0x55]
add byte [rax], al
pushfq
out 0xff, eax
ljmp [rax + 0x55]
add byte [rax], al
mov al, 0xe7
dec dword [rax + 0x5d000055]
call 0x55f1cdc1
add byte [rax], al
xchg al, ch
call rax
push rbp
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
call 0x5631cdd1
add byte [rax], al
mov bh, 0xe8
call qword [rax]
push rsi
add byte [rax], al
call 0x5671cde1
add byte [rax], al
jmp 0x5691cde9
add byte [rax], al
sub ch, cl
push qword [rax + 0x56]
add byte [rax], al
jmp 0x56d1cdf9
add byte [rax], al
mov dl, 0xe9
mov eax, 0xe5000056
jmp 0x5719ce09
add byte [rax], al
clc
push rsi
add byte [rax], al
lcall [rax]
push rdi
add byte [rax], al
cmp byte [rdi], dl
add byte [rbp - 0x16], cl
lcall [rax + 0x57]
add byte [rax], al
xchg eax, esi
js 0x40ce89
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
lcall [rax - 0x33ffffa9]
mov eax, 0xec000057
fcom dword [rdi]
add dl, bh
clc
push rdi
add byte [rax], al
or ebp, ebx
lcall [rax]
pop rax
add byte [rax], al
sbb ebx, ebp
cmp byte [rax], bl
add byte [rax - 0x15], ch
jmp qword [rax + 0x58]
add byte [rax], al
movabs byte [0xae00005880ffffeb], al
jmp 0x40ce76
jmp qword [rax - 0x45ffffa8]
jmp 0x40ce7e
inc eax
pop rax
add byte [rax], al
add esp, ebp
jmp rax
pop rax
add byte [rax], al
cmp ch, ah
inc dword [rax]
pop rcx
add byte [rax], al
je 0x40ce82
jmp qword [rax]
pop rcx
add byte [rax], al
xchg ah, ch
inc dword [rax + 0x59]
add byte [rax], al
sub al, 0xed
ljmp [rax + 0x59]
add byte [rax], al
in eax, dx
dec dword [rax + 0x4f000059]
in eax, dx
ljmp [rax + 0x5e000059]
in eax, dx
dec eax
pop rcx
add byte [rax], al
out dx, al
clc
pop rcx
add byte [rax], al
sbb eax, 0x18ffffef
pop rdx
add byte [rax], al
jbe 0x40cec5
cmp byte [rdx], bl
add byte [rsi + 0x58ffffef], dl
pop rdx
add byte [rax], al
mov cl, 0xef
js 0x40cf44
add byte [rax], al
out dx, al
out dx, eax
lcall [rax + 0x2a00005a]
inc eax
pop rdx
add byte [rax], al
push rax
jmp rax
pop rdx
add byte [rax], al
jbe 0x40cef6
inc dword [rax]
pop rbx
add byte [rax], al
xchg eax, edx
jmp qword [rax]
pop rbx
add byte [rax], al
scasb al, byte [rdi]
inc dword [rax + 0x5b]
add byte [rax], al
cwde
int1
ljmp [rax + 0x5b]
add byte [rax], al
mov dh, 0xf1
dec dword [rax - 0x3dffffa5]
int1
ljmp [rax - 0x32ffffa5]
int1
dec eax
pop rbx
add byte [rax], al
clc
int1
call 0x2240cfa0
dec dword [rax]
pop rsp
add byte [rax], al
push rax
ljmp [rax]
pop rsp
add byte [rax], al
dec dword [rax + 0x5c]
add byte [rax], al
jb 0x40cf50
ljmp [rax + 0x5c]
add byte [rax], al
jle 0x40cf58
dec dword [rax - 0x43ffffa4]
ljmp [rax - 0x37ffffa4]
dec eax
pop rsp
add byte [rax], al
in al, 0xf2
call 0x1640cfe1
dec dword [rax]
pop rbp
add byte [rax], al
xor al, 0xf3
ljmp [rax]
pop rbp
add byte [rax], al
outsb dx, byte [rsi]
dec dword [rax + 0x5d]
add byte [rax], al
mov edx, 0x68fffff3
pop rbp
add byte [rax], al
fdivrp st(3)
dec dword [rax + 0x400005d]
hlt
ljmp [rax + 0x1e00005d]
hlt
dec eax
pop rbp
add byte [rax], al
insb byte [rdi], dx
hlt
push rax
pop rbp
add byte [rax], al
xor ah, 0xff
call qword [rax]
pop rsi
add byte [rax], al
hlt
push qword [rax]
pop rsi
add byte [rax], al
mov eax, 0x50fffff4
pop rsi
add byte [rax], al
hlt
push qword [rax + 0x5e]
add byte [rax], al
add ch, dh
call qword [rax + 0x4e00005e]
cmc
push qword [rax - 0x75ffffa2]
cmc
call rax
pop rsi
add byte [rax], al
mov al, 0xf5
call qword [rax]
pop rdi
add byte [rax], al
cld
cmc
push qword [rax]
pop rdi
add byte [rax], al
and dh, dh
call qword [rax + 0x5f]
add byte [rax], al
idiv bh
js 0x40d079
add byte [rax], al
idiv bh
lcall [rax + 0x2c00005f]
idiv edi
mov eax, 0x4c00005f
idiv edi
fcomp dword [rdi]
add byte [rax + 0xfffff7], dl
add byte [rax], al
stosb byte [rdi], al
idiv edi
jmp qword [rax]
add byte [rax], al
sal bh, 1
inc dword [rax + 0x60]
add byte [rax], al
clc
jmp qword [rax + 0x60]
add byte [rax], al
and al, 0xf8
inc dword [rax + 0x4a000060]
clc
jmp qword [rax + 0x64000060]
clc
inc eax
add byte [rax], al
jle 0x40d066
jmp rax
add byte [rax], al
mov al, 0xf8
jmp qword [rax]
add byte [rax], al
and cl, bh
ljmp [rax + 0x61]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x40d0a7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push 0x2affff47
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x40d0d7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
clc
push qword [rax]
add eax, dword [rax]
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add bl, al
push rcx
cmp eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jbe 0x40d11f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add dh, bl
push rcx
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
rcl byte [rcx - 1], 1
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rsi + 0x16ffff47], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rdi + rax*2 + 0x25ffff], bl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
movabs eax, dword [0x2fffff47]
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 1
add byte [rax], al
mov al, 0x47
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
mov edi, 0x1affff47
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rcx + 0x2affff47], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword fs:[rax], eax
add bl, al
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x40d23f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], al
add byte [rax], al
loopne 0x40d292
jmp qword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add byte [rcx], ah
push rcx
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], eax
add byte [rbx], ch
push rcx
lcall [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 1
add byte [rax], al
and edx, dword [rcx - 1]
lcall [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 2
add byte [rax], al
and byte [rcx - 1], dl
call qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 2
add byte [rax], al
push rcx
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rax], ah
push rcx
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insd dword [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rdx], dh
push rcx
jmp qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
push rcx
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rcx + rdx*2], bh
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x51], dh
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 2
add byte [rax], al
jo 0x40d3f3
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 3
add byte [rax], al
insb byte [rdi], dx
push rcx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x40d3df
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
mov word [rcx - 1], ss
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8d, dword [rax]
add byte [rdx + 0x2effff51], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
add eax, dword fs:[rax]
add byte [rax + 0x1bffff51], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], al
add byte [rax], al
out 0x45, al
dec dword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add dl, dl
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add cl, al
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40d49f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 3
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 4
add byte [rax], al
in eax, 0x45
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 4
add byte [rax], al
cld
push rax
dec dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0
add byte [rdx], ch
push rcx
call qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0
add byte [rax + 0x51], ah
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], al
add byte [rax + 0x51], ch
call qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, 0
add byte [rdi + 0x51], bl
call qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rsi + 0x51], dl
call qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 4
add byte [rax], al
push rcx
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 5
add byte [rax], al
push rcx
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 5
add byte [rax], al
push rcx
call rdi
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
int 0xc
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add rax, 0x51ee0000
ljmp [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
add eax, 0x52360000
cmp eax, 0
adc byte [rsi + 0x60d4302], al
js 0x40d647
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x40d661
add esp, dword [rax + 0x17]
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
xor al, 0x52
push qword [rdi]
add byte [rax], al
add byte [rsp + rsi], al
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
jb 0x40d68b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rdx + rdx*2 - 1], al
cmp eax, dword [rcx]
add byte [rax], al
add al, 0x38
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
xor dword [rcx], eax
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add eax, 0x53580000
dec dword [rdx]
adc byte [rsi + 0x60d4302], al
add al, byte [rbp + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
sbb al, 6
add byte [rax], al
ret 0xff53
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 6
add byte [rax], al
push rbx
fadd qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, bh
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
add byte [rax], al
mov edx, 0x3bffff54
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add esi, dword [rsi]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40d73c
add byte [rax], al
push rbp
inc dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x40d757
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
clc
push rbp
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xfe000006
push rbp
dec dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rsi]
add byte [rax], al
push rsi
dec dword [rcx + 1]
adc byte [rsi + 0x60d4302], al
add eax, dword [rcx + rax + 0x8070c]
and al, 0
add byte [rax], al
cld
add byte [rax], al
cwde
push rdi
call qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 7
add byte [rax], al
ret 0xff57
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
clc
push rdi
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
or byte [rax - 1], bl
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], al
add byte [rax], al
pop rax
push qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jno 0x40d85f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
and al, 0x58
dec dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
pop rax
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
add byte [rax], al
jb 0x40d902
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 8
add byte [rax], al
movabs al, byte [0x3bffff58]
adc byte [rsi + 0x60d4302], al
jbe 0x40d8e7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rax + rbx*2 + 0x69ffff], bh
add byte [rax], al
add al, 0x47
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
or byte [rax], al
add dh, bh
pop rax
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40d936
add byte [rax], al
add al, 0x59
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or byte [rax], al
add byte [rax], bl
pop rcx
cmp al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jne 0x40d96f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 3
add byte [rax], al
xor bl, byte [rcx - 1]
inc dword [rdi]
add byte [rax], al
add al, 0x4b
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fmul qword [rax]
add byte [rax], al
push rdx
pop rcx
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or byte [rax], al
add byte [rax + 0x59], bl
push qword [rcx]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ebp, dword [rcx + rax]
or al, 7
or byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 9
add byte [rax], al
push 0x5a
jp 0x40d9de
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 9
add byte [rax], al
pop rdx
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or dword [rax], eax
add dh, cl
pop rdx
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
add eax, dword [rax]
add dl, cl
pop rdx
ljmp [rbx]
add byte [rax], al
add al, 0x4f
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
or al, 7
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sbb al, 4
add byte [rax], al
call qword [rbx + 0x4000000]
imul ebx, dword [rdi], 0x41
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
and al, 0
add byte [rax], al
add al, 0
add byte [rbx], ch
lcall [rbp + 1]
add byte [rax], al
add al, 0x7c
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x51
add dword [rdi + rax], ecx
or byte [rax + rax], bl
add byte [rax], al
hlt
or dword [rax], eax
add byte [rax + 0x41], ah
inc dword [rax]
adc byte [rsi + 0x60d4302], al
add bh, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov word [rax + rax], es
add al, al
call rdx
add dword [rax], eax
add byte [rdx*4 + 0x4100411f], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rax + rax], 0
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 4
add byte [rax], al
push 0x43
jmp qword [rbx]
add dword [rax], eax
add byte [rdx + rsi*4], al
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rax + rax], 0
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rax + rax]
add byte [rbp + 0x44], ah
dec dword [rbp + 0x4000002]
leave
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], -0x7f
add cl, byte [rdi + rax]
or byte [rax + rax], bl
add byte [rax], al
mov word [rdx], cs
add byte [rax], al
jns 0x40dbab
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or al, byte [rax]
add byte [rdi + 0x61], ah
jnp 0x40db6e
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
or al, byte [rax]
add dl, al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
or al, byte [rax]
add ah, cl
push qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jb 0x40dbc7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 0xb
add byte [rax], al
jrcxz 0x40dc2b
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xb
add byte [rax], al
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40dc0f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
or eax, dword [rax]
add byte [rdx], bl
jmp qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40dc41
add byte [rax], al
pop rbx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or eax, dword [rax]
add byte [rcx + 0x62], cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x4300000b
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rbx]
add byte [rax], al
cmp eax, 0x1affff62
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
or eax, dword [rax]
add byte [rax], bh
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xc
add byte [rax], al
push 0x62
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0
add byte [rax + 0x62], bl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0
add byte [rdx + 0x62], dl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], cl
add byte [rdx - 1], cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or al, 0
add byte [rsi + 0x62], al
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
or al, 0
add byte [rax + 0x62], bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
or al, 0
add byte [rsi + 0x62], ah
push qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x64
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xd
add byte [rax], al
scasb al, byte [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0xd
add byte [rax], al
pushfq
ljmp [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x62
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or eax, 0x62e20000
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40de43
add byte [rax], al
in al, dx
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or eax, 0x62f70000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xe500000d
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fmul qword [rip + 0x62d30000]
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xe
add byte [rax], al
add esp, dword [rbx - 1]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xe
add byte [rax], al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
fisub word [rdx - 1]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
fisub dword [rdx - 1]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rsi], cl
add byte [rax], al
ljmp [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
loop 0x40dfc4
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
fsub qword [rdx - 1]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xe
add byte [rax], al
fsub dword [rdx - 1]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
jl 0x40dfc7
add byte [rax], al
ljmp [rdx]
add byte [rax], al
add al, 0xfa
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or dword [rax], eax
add byte [rsi], dl
movsxd rdi, edi
inc dword [rax + rax]
add byte [rdx + rcx], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
jg 0x40e00b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
sldt word [rax]
xor ah, byte [rbx - 1]
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
or dword [rax], eax
add byte [rdx], dh
movsxd rdi, edi
lcall [rbx]
add byte [rax], al
add byte [rsi + rcx], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0xa
add byte [rax], al
movsxd rdi, edi
inc dword [rax + rax]
add byte [rdx + rdx], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
jg 0x40e07b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
movsxd rdi, edi
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
pop rsp
or al, byte [rax]
add byte [rax], dh
movsxd rdi, edi
dec dword [rdx + 0x4000000]
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x51
adc byte cs:[rbp + 0xc], ch
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 0x10
add byte [rax], al
mov ah, byte [rbx - 1]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0x10
add byte [rax], al
js 0x40e155
inc dword [rcx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x75
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc byte [rax], al
add dl, dl
movsxd rdi, edi
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40e146
add byte [rax], al
int3
movsxd rdi, edi
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pushfq
adc byte [rax], al
add dh, al
movsxd rdi, edi
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x49
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc byte [rax], al
add ah, dh
movsxd rdi, edi
dec dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc byte [rax], al
add byte [rsi], dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x11
add byte [rax], al
add al, 0x64
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x11
add byte [rax], al
movsxd rdi, edi
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc qword [rax], r8
add dl, dh
movsxd rdi, edi
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc dword [rax], eax
add byte [rsp], al
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], ss
add byte [rax], al
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
lodsb al, byte [rsi]
adc dword [rax], eax
add byte [rdx + 0x64], al
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc dword [rax], eax
add byte [rax + 0x64], ch
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
adc dword [rax], eax
add byte [rbp + 0xeffff64], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x12
add byte [rax], al
and dword [rdi + rdi*8 - 1], 0x1a
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x12
add byte [rax], al
jge 0x40e356
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
adc al, byte [rax]
add byte [rdi + 0x64], dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x40e340
add byte [rax], al
jb 0x40e396
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0xd
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
lcall [rbx]
add byte [rax], al
add byte [rdx], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, byte [rax]
add byte [rdi + 0xeffff64], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x12
add byte [rax], al
test dword [rdi + rdi*8 - 1], esp
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x13
add byte [rax], al
jae 0x40e426
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 0x13
add byte [rax], al
ljmp [rbp]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c9f02
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc r8, qword [rax]
add dh, ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc eax, dword [rax]
add ah, dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rbx], ss
add byte [rax], al
ret 0xff64
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc eax, dword [rax]
add dl, al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc eax, dword [rax]
add ah, dl
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc eax, dword [rax]
add dh, bl
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
or al, 0x14
add byte [rax], al
adc ah, byte [rbp - 1]
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x14
add byte [rax], al
cmp byte [rbp - 1], ah
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
adc al, 0
add byte [rbp + 0x65], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40e542
add byte [rax], al
push rbx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
adc al, 0
add byte [rbp + 0x65], cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x14
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0
add byte [rdx + 0x65], al
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc al, 0
add byte [rbp - 1], dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x15
add byte [rax], al
outsb dx, byte [rsi]
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x15
add byte [rax], al
outsb dx, byte [rsi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc eax, 0x65680000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40e64b
add byte [rax], al
push rsi
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc eax, 0x65440000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x32000015
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fcom qword [rip + 0x65200000]
ljmp [rcx]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c9b02
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x16
add byte [rax], al
movabs eax, dword [0x28ffff65]
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x16
add byte [rax], al
test eax, 0xeffff65
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
xchg eax, edi
call qword [rbx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
add ah, byte [rsi - 1]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rsi], ss
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
fisub word [rbp - 1]
call qword [rbx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0x17
add byte [rax], al
and eax, 0x93ffff66
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0x17
add byte [rax], al
nop
lcall [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
lcall [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], ss
add byte [rax], al
clc
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
dec dword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0x8070c]
add byte [rax + rax], ah
add byte [rax], al
adc al, byte fs:[rax]
add byte [rdx + 0x67], dh
lcall [rbx]
add byte [rax], al
add byte [rsi], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rdx], ss
add byte [rax], al
inc dword [rax + rax]
add byte [rdx + rbp], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
jg 0x40e8f3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x18
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb byte [rax], al
add byte [rax + 0x67], dh
inc dword [rdx]
adc byte [rsi + 0x60d4302], al
add bh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x40e94e
add byte [rax], al
shl byte [rdi - 1], cl
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
sbb byte [rax], al
add dl, bh
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x26000018
push 0x3cffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
fcomp qword [rax]
add byte [rax], al
push 0x20ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sbb byte [rax], al
add byte [rdx + 0x68], al
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x19
add byte [rax], al
xor ebp, dword [rax - 1]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0x19
add byte [rax], al
and dword [rax - 1], ebp
call qword [rbx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x79
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb dword fs:[rax], eax
add byte [rax + rbp*2 + 0x7bffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rcx], bl
add byte [rax], al
out 0x68, eax
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sbb dword [rax], eax
add cl, ah
push 0x58ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb dword [rax], eax
add byte [rcx], dl
imul edi, edi, 0x1aff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb dword [rax], eax
add byte [rbx], cl
imul edi, edi, 0x3dff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
js 0x40eac7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1a
add byte [rax], al
sub byte [rcx - 1], ch
dec dword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1a
add byte [rax], al
adc ch, byte [rcx - 1]
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb r8b, byte [rax]
add byte [rip + 0xeffff69], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb al, byte [rax]
add byte [rbx], dl
imul edi, edi, 0x1aff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdx], ds
add byte [rax], al
or eax, 0x1affff69
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb al, byte [rax]
add byte [rdi], al
imul edi, edi, 0x1aff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb al, byte [rax]
add byte [rdx], al
imul edi, edi, 0x1aff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb al, byte [rax]
add ah, bh
push 0x32ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x68
or al, 7
or byte [rax + rax], bl
add byte [rax], al
or al, 0x1b
add byte [rax], al
imul edi, edi, 0xeff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1b
add byte [rax], al
cld
push 0x1affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb r8, qword [rax]
add dh, dh
push 0x1affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb eax, dword [rax]
add al, dh
push 0x1affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rbx], ds
add byte [rax], al
push 0x1affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb eax, dword [rax]
add ah, ah
push 0x31ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb eax, dword [rax]
add dh, dh
push 0x66ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
sbb eax, dword [rax]
add byte [rcx + rbp*2], bh
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
ja 0x40ecc7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1c
add byte [rax], al
pop rax
imul edi, edi, 0x24ff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1c
add byte [rax], al
pop rsp
imul edi, edi, 0x66ff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0
add byte [rdx + 0xeffff69], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb al, 0
add byte [rax + 0x31ffff69], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], ds
add byte [rdx + 0x31ffff69], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb al, 0
add byte [rcx + rbp*2 + 0x5effff], dh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
sbb al, 0
add dl, dh
imul edi, edi, 0xeff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb al, 0
add al, ah
imul edi, edi, 0x1aff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1d
add byte [rax], al
fisubr dword [rcx - 1]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1d
add byte [rax], al
imul edi, edi, 0x1aff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb rax, 0x69ce0000
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb eax, 0x69cc0000
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rip + 0x69b80000], ds
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb eax, 0x69a40000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb byte [rax], r8b
add byte [rax + 0x5effff69], ah
add byte [rax], al
add byte [rsi + rbp], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
sbb byte [rax], al
add dh, dl
imul edi, edi, 0x50ff
add byte [rdx + rdi], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0x1e
add byte [rax], al
imul edi, edi, 0x48ff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0x1e
add byte [rax], al
push -1
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
adc al, 0x6a
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40ef54
add byte [rax], al
push -1
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
sbb ch, byte [rdx - 1]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0x19
add byte [rax], al
push -1
call qword [rax]
add byte [rax], al
add al, 0x3e
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 0x1e
add byte [rax], al
push -1
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x1f
add byte [rax], al
sub al, 0x6a
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x1f
add byte [rax], al
push -1
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
push -1
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
jo 0x40f08c
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rdi], bl
add byte [rax], al
pushfq
push -1
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x78
or al, 7
or byte [rax + rax], ah
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
mov esi, 0xadffff6a
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x8070c], eax
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
imul edi, r15d, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add byte [rax], al
xor dword [rbx - 1], ebp
fiadd dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x32
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x20
add byte [rax], al
in al, 0x6b
jmp qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0x20
add byte [rax], al
sub byte [rdi + rdi*8 - 1], ch
add byte [r8], r8b
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
push rsp
and byte [rax], al
add byte [rbp + 0x6c], dl
push qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x6a
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
sbb al, byte [rax]
add byte [rsp + rbp*2 + 0x3affff], ah
add byte [rax], al
add al, 0x42
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
jne 0x40f15b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
and byte [rax], al
add byte [rsi + 0x4cffff6c], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and byte [rax], al
add dl, ah
insb byte [rdi], dx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x20
add byte [rax], al
shr byte [rdi + rdi*8 - 1], 1
sbb al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x21
add byte [rax], al
retf -0x94
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x21
add byte [rax], al
insb byte [rdi], dx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and dword [rax], r8d
add byte [rsi + 0x1affff6c], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and dword fs:[rax], eax
add byte [rax + 0x31ffff6c], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], ah
add byte [rax], al
retf -0x94
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
and dword [rax], eax
add dh, al
insb byte [rdi], dx
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0x1c
add byte [rax], al
ret 0xff6c
call qword [rax]
add byte [rax], al
add al, 0x46
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
and dword [rax], eax
add dl, ch
insb byte [rdi], dx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 0x22
add byte [rax], al
fsubr dword [rdi + rdi*8 - 1]
pop qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x7d
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x22
add byte [rax], al
insd dword [rdi], dx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
and al, byte [rax]
add byte [rip + 0x1affff6d], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40f350
add byte [rax], al
insd dword [rdi], dx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
and al, byte [rax]
add byte [rcx], ah
insd dword [rdi], dx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x22
add byte [rax], al
sbb al, 0x6d
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
insd dword [rdi], dx
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
and al, byte [rax]
add byte [rdx], ch
insd dword [rdi], dx
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x68
or al, 7
or byte [rax + rax], bl
add byte [rax], al
adc al, 0x23
add byte [rax], al
cmp al, 0x6d
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x23
add byte [rax], al
sub ch, byte [rbp - 1]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
and eax, dword [rax]
add byte [rbp*2 + 0x1affff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40f451
add byte [rax], al
insd dword [rdi], dx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
and eax, dword [rax]
add byte [rax], bl
insd dword [rdi], dx
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x23
add byte [rax], al
adc eax, 0xeffff6d
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and eax, dword [rax]
add byte [rbx], al
insd dword [rdi], dx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
and eax, dword [rax]
add ch, bh
insb byte [rdi], dx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x24
add byte [rax], al
imul dword [rdi + rdi*8 - 1]
sbb al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x24
add byte [rax], al
repne insb byte [rdi], dx
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
and al, 0
add al, dh
insb byte [rdi], dx
dec dword [rbp]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x7f
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
jl 0x40f55a
add byte [rax], al
push rbp
insd dword [rdi], dx
inc dword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x78
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
and al, 0
add byte [rdx + 0x78ffff6d], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
and al, 0
add byte [rdx], al
outsb dx, byte [rsi]
js 0x40f58e
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
and al, 0
add byte [rdx + 0x6e], dl
js 0x40f5b6
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x25
add byte [rax], al
movabs byte [0xeffff6e], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x25
add byte [rax], al
nop
outsb dx, byte [rsi]
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
and eax, 0x6ee50000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40f65b
add byte [rax], al
shr dword [rsi - 1], cl
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
and eax, 0x6f280000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x16000025
outsd dx, dword [rsi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fsub qword [rip + 0x6f100000]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
and eax, 0x6f0a0000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x26
add byte [rax], al
add al, 0x6f
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x26
add byte [rax], al
add ch, byte [rdi - 1]
lcall [rdi]
adc byte [rsi + 0x60d4302], al
add bl, byte [rdx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
pop rsp
add byte es:[rax], al
outsd dx, dword [rsi]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
and byte [rax], al
add byte [rax + 0x6ffff6f], cl
add al, byte [rax]
add byte [rsp + rcx*2], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
cld
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sbb al, 0x21
add byte [rax], al
jno 0x40f762
inc dword [rbp]
add byte [rax], al
add al, 0x74
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
add byte es:[rax], al
test byte [rcx - 1], dh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte es:[rax], al
xor byte [rcx - 1], 0xff
sbb eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rcx], ah
add byte [rax], al
jl 0x40f83b
call qword [rax]
add byte [rax], al
add al, 0x78
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0x27
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
jno 0x40f7f2
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add byte [rax], al
xchg eax, edx
jno 0x40f812
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40f855
add byte [rax], al
pushfq
jno 0x40f832
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40f84f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 0x22
add byte [rax], al
mov dh, 0x71
add dword [rax], eax
add byte [rsp + rdi*2], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
loopne 0x40f86c
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x78000027
jae 0x40f87a
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fsub qword [rdi]
add byte [rax], al
jbe 0x40f90d
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add byte [rax], al
jae 0x40f8ba
js 0x40f8be
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x28
add byte [rax], al
mov ah, 0x73
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
sub byte [rax], r8b
add cl, al
jae 0x40f902
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub byte fs:[rax], al
add byte [rdi + 0x31ffff73], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], ch
add byte [rax], al
sal byte [rbx - 1], 0xff
push rbx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sub byte [rax], al
add bl, dh
jae 0x40f962
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sub byte [rax], al
add byte [rax], bl
je 0x40f98a
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
sub byte [rax], al
add byte [rsp + rsi*2 - 1], cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x29
add byte [rax], al
je 0x40f9ca
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x29
add byte [rax], al
jo 0x40fa5e
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub qword [rax], r8
add byte [rdx + 0x35ffff74], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jo 0x40fa27
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sub dword [rax], eax
add byte [rdi + 0x31ffff74], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], gs
add byte [rax], al
sal byte [rdi + rdi*8 - 1], 1
add byte es:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sub dword [rax], eax
add dh, dl
je 0x40fa6a
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40fa87
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sub dword [rax], eax
add ah, dh
je 0x40fa8a
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sub dword [rax], eax
add al, dh
je 0x40faaa
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40fac7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x2a
add byte [rax], al
add eax, 0x26ffff75
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x2a
add byte [rax], al
or esi, dword [rbp - 1]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub r8b, byte [rax]
add dl, bh
je 0x40fb0a
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
sub al, byte [rax]
add byte [rsi], ah
jne 0x40fb2a
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdx], gs
add byte [rax], al
and esi, dword [rbp - 1]
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
sub al, byte [rax]
add byte [rbp + rsi*2 - 1], cl
call qword [rip + 1]
adc byte [rsi + 0x60d4302], al
add edx, dword [rax]
add dword [rdi + rax], ecx
or byte [rax], al
and al, 0
add byte [rax], al
int3
sub al, byte [rax]
add byte [rcx + 0x76], al
call qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
and eax, 0x766c0000
inc byte [rcx]
add byte [rax], al
add al, 0xa4
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], -0xe
add dword [rdi + rax], ecx
or byte [rax + rax], bl
add byte [rax], al
sbb al, 0x2b
add byte [rax], al
js 0x40fbda
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0x2b
add byte [rax], al
mov byte [rax - 1], bh
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sub eax, dword [rax]
add byte [rcx + 0x78], bh
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], bl
add byte [rax], al
jl 0x40fc61
add byte [rax], al
pushfq
js 0x40fc3a
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], ah
add byte [rax], al
pushfq
sub eax, dword [rax]
add ch, al
js 0x40fc5a
inc dword [rax + 1]
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
jbe 0x40fc70
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub eax, dword [rax]
add byte [rsi], bl
jp 0x40fc82
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 0x2b
add byte [rax], al
push rdx
jp 0x40fca2
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x2c
add byte [rax], al
xchg byte [rdx - 1], bh
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
and al, 0x2c
add byte [rax], al
movabs byte [0x11ffff7a], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0
add byte [rdx + rdi*2 + 0x20ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0
add byte [rdx + rdi*2 + 0xe9ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fisttp word [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], gs
add byte [rbp + 0x7b], dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sub al, 0
add byte [rbx + rdi*2 - 1], bl
push qword [rdi + 2]
adc byte [rsi + 0x60d4302], al
add esi, dword [rdx + 0x8070c02]
add byte [rax + rax], bl
add byte [rax], al
int3
sub al, 0
add ah, dh
jge 0x40fd8a
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40fda7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sub al, 0
add byte [rdx], dl
jle 0x40fdaa
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x2d
add byte [rax], al
jle 0x40fdca
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40fde7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0x2d
add byte [rax], al
and al, 0x7e
push qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
sub eax, 0x7e720000
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x40fe2f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x40fe5b
add byte [rax], al
xchg eax, edx
jle 0x40fe32
js 0x40fe36
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sub eax, 0x7ee20000
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x1e00002d
jg 0x40fe7a
lcall [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fsubr qword [rip + 0x7f5c0000]
jmp qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
sub eax, 0x7fa00000
push qword [rsi]
adc byte [rsi + 0x60d4302], al
add dh, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0x2e
add byte [rax], al
cmp bh, 0xff
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x2e
add byte [rax], al
and al, 0x80
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
add byte cs:[rax], al
cmp bh, 0xff
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x40ff3b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rsi], ch
add byte [rax], al
cmp bh, 0xff
xor eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte cs:[rax], al
add eax, 0x54ffff81
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte cs:[rax], al
xor dword [rcx + 0x2affff], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte cs:[rax], al
cmp al, 0x81
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40ffc7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x2f
add byte [rax], al
pop rdx
cmp edi, 0x1bff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x2f
add byte [rax], al
push rsi
cmp edi, 0x35ff
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jo 0x410007
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
imul eax, dword [rcx + 0x26ffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
in al, 0x29
add byte [rax], al
jb 0x40ffab
push qword [rbx]
add byte [rax], al
add al, 0xcc
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6502
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pushfq
add byte [rax], al
mov dh, 0x81
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x41007b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
jp 0x410004
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x2f
add byte [rax], al
mov es, word [rdx + 0x26ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0x30
add byte [rax], al
xchg eax, esp
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x30
add byte [rax], al
rol byte [rdx + 0x26ffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor byte [rax], r8b
add dh, al
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
xor byte [rax], al
add dh, dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor byte [rax], al
add ah, bl
call qword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
xor byte [rax], al
add byte [rip + 0x1affff83], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
xor byte [rax], al
add byte [rdi], al
cmp edi, -1
pop rax
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
xor byte [rax], al
add byte [rax], bh
cmp edi, -1
xor al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x31
add byte [rax], al
cmp rdi, -1
push rcx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0x31
add byte [rax], al
jle 0x410175
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
xor dword [rax], eax
add byte [rbx + rax*4 + 0x33ffff], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x41025f
add byte [rax], al
xchg eax, edi
cmp edi, -1
add byte cs:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
xchg eax, esp
xor dword [rax], eax
add byte [rbp + 0x31ffff83], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x31
add byte [rax], al
mov dh, 0x83
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor dword [rax], eax
add byte [rsi + 0x1bffff83], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
xor dword [rax], eax
add byte [rdx + 0xbffff83], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x32
add byte [rax], al
lea eax, [rbx + 0x2effff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
xor al, 0x32
add byte [rax], al
wait
cmp edi, -1
sldt word [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
xor al, byte [rax]
add byte [rdx + 0x54ffff83], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x410360
add byte [rax], al
mov esi, 0x5cffff83
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
xor al, byte [rax]
add dl, bh
cmp edi, -1
or eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x32
add byte [rax], al
out 0x83, al
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
xor al, byte [rax]
add byte [rax], ch
test bh, bh
add al, byte [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x33
add cl, byte [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
xor al, byte [rax]
add byte [rax - 0x7a], al
inc dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jg 0x4103d7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0x33
add byte [rax], al
xchg bh, bh
jmp qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x5b
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor r8d, dword [rax]
add byte [rsi + rax*4 + 0xecffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x410423
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
xor eax, dword [rax]
add byte [rax - 0x79], ch
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor eax, dword [rax]
add byte [rdi + rax*4 - 1], bh
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
xor eax, dword [rax]
add byte [rdx + 0x54ffff87], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor eax, dword [rax]
add byte [rsi + 0xeffff87], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
xor eax, dword [rax]
add byte [rdi + rax*4 + 0xbffff], bl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x34
add byte [rax], al
mov byte [rdi + 0x38ffff], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x4104ef
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x34
add byte [rax], al
movabs al, byte [0x47ffff87]
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
xor al, 0
add al, cl
xchg edi, edi
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x410562
add byte [rax], al
mov byte [rdi + 0xeffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
xor al, 0
add byte [rdi + rax*4 + 0xfffff], dh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x34
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
xchg edi, edi
call qword [rdi]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add edx, dword [rdx]
add dword [rdi + rax], ecx
or byte [rax], al
and al, 0
add byte [rax], al
xor al, 0
add byte [rbx + 0x4dffff88], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
xor al, 0
add al, al
mov bh, bh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x35
add byte [rax], al
mov esp, 0xbffff88
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x35
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
mov bh, bh
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
pop rsp
xor eax, 0x88b60000
lcall [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x41066b
add byte [rax], al
hlt
mov bh, bh
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
xor eax, 0x893a0000
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x76000035
mov edi, edi
fiadd word [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, cl
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fdiv qword [rip - 0x75cc0000]
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
xor eax, 0x8a3e0000
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x36
add byte [rax], al
mov dil, dil
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x36
add byte [rax], al
mov dil, r15b
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte ss:[rax], al
push rbp
mov bh, bh
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x41076c
add byte [rax], al
jge 0x4106c4
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte ss:[rax], al
mov cs, word [rdx + 0x26ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x94000036
mov bh, bh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fdiv qword [rsi]
add byte [rax], al
nop
mov bh, bh
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte ss:[rax], al
jnp 0x410744
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
sbb al, 0x37
add byte [rax], al
mov dword [rdx + 0x38ffff], ecx
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x4107f7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x37
add byte [rax], al
movabs byte [0x1fffff8a], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
movabs byte [0x1bffff8a], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
xor dword [rax], eax
add byte [rsi - 0x17000076], bl
add byte [rax], al
add byte [rax + rbx*8], al
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fimul word [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
pop rsi
mov edi, edi
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
mov edi, edi
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x37
add byte [rax], al
push -0x75
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x38
add byte [rax], al
xchg eax, edx
mov edi, edi
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x38
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
mov edi, edi
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp byte [rax], r8b
add byte [rbx + 0xeffff8b], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp byte fs:[rax], al
add byte [rcx + 0x1affff8b], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], bh
add byte [rax], al
mov ecx, dword [rbx + 0x31ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
cmp byte [rax], al
add byte [rbx + rcx*4 + 0xa5ffff], bl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
cmp byte [rax], al
add byte [rdx], ah
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x38
add byte [rax], al
adc dword [rdi + rdi*8 + 0x2aff], ecx
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x39
add byte [rax], al
sbb al, 0x8c
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x39
add byte [rax], al
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp dword [rax], r8d
add byte [rsp + rcx*4], ch
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp dword fs:[rax], eax
add byte [rax], bl
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], bh
add byte [rax], al
sbb al, 0x8c
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
cmp dword [rax], eax
add byte [rdx], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp dword [rax], eax
add byte [rax], dl
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
in al, 0x39
add byte [rax], al
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x3a
add byte [rax], al
mov cl, byte [rdi + rdi*8 + 0x49ff]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sub al, 0x3a
add byte [rax], al
mov ah, 0x8c
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp r8b, byte [rax]
add byte [rsi + 0x2affff8c], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
cmp al, byte [rax]
add al, al
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, byte [rax]
add al, ch
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
cmp al, byte [rax]
add cl, bh
jmp qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
cmp al, byte [rax]
add byte [rcx], bh
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
cmp al, byte [rax]
add byte [rsi], bh
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x3b
add byte [rax], al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x3b
add byte [rax], al
xor al, 0x8d
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp r8, qword [rax]
add byte [rax], bh
in eax, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ch, al
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
cmp eax, dword [rax]
add byte [rip + 0x45ffff8e], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp eax, dword [rax]
add byte [rdx], ch
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
cmp eax, dword [rax]
add byte [rsi + rcx*4], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
cmp eax, dword [rax]
add byte [rdx], dl
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x410ca7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
cmp eax, dword [rax]
add byte [rsi + rcx*4], dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x3c
add byte [rax], al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x3c
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x410d07
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0
add byte [rax - 0x72], bl
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
cmp al, 0
add byte [rsi + rcx*4 - 1], al
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0
add byte [rdi - 0x72], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
cmp al, 0
add byte [rip + 0x1bffff8e], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
cmp al, 0
add byte [rax], dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
cmp al, 0
add byte [rsi], bl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x3d
add byte [rax], al
sbb byte [rsi + 0xeffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x3d
add byte [rax], al
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp rax, -0x71f00000
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x410e27
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
cmp eax, 0x8e2a0000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp eax, 0x8e300000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
cmp eax, 0x8e360000
jmp qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
cmp eax, 0x8e7d0000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
cmp eax, 0x8e6c0000
lcall [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0x3e
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x3e
add byte [rax], al
xchg eax, esi
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte ds:[rax], al
cmpsd dword [rsi], dword ptr [rdi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte ds:[rax], al
movabs byte [0xeffff8e], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte ds:[rax], al
nop
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x410f67
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte ds:[rax], al
mov dl, 0x8e
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte ds:[rax], al
lodsb al, byte [rsi]
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte ds:[rax], al
mov esi, 0xc1ffff8e
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bh, byte [rsp + rcx + 0x807]
sbb al, 0
add byte [rax], al
or al, 0x3f
add byte [rax], al
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x410fe7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x3f
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x411007
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
mov dword [rdi + 0x1affff], ecx
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
test byte [rdi + 0xeffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
jb 0x410ff9
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x411087
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
xchg eax, esp
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
mov cs, word [rdi + 0x31ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x40
add byte [rax], al
lahf
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x40
add byte [rax], al
lea ecx, [rdi + 0x2dffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 0x3a
add byte [rax], al
mov cs, word [rdi + 0xadffff]
add byte [rax], al
add al, 0xec
and byte [rcx], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
xchg eax, esp
add byte [rax], al
adc edx, dword [rax + 0x1bffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x40
add byte [rax], al
nop
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
cld
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
nop
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x41
add byte [rax], al
and byte [rax + 0x31ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
cmp eax, dword [rax]
add byte [rcx], dh
nop
lcall [rax + 0x4000000]
or byte [rcx], ah
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov cs, word [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [r8], al
movabs byte [0x16ffff90], al
adc byte [rsi + 0x60d4302], al
push rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x411277
add byte [rax], al
cwde
nop
call qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
add byte [r8], al
rcl byte [rax + 0x14ffff], 1
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0x3c
add byte [rax], al
nop
ljmp [rbp + 0x4000000]
sbb byte [rcx], ah
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
in al, 0x41
add byte [rax], al
xchg rax, rcx
call 0x4112a9
adc byte [rsi + 0x60d4302], al
add ah, bl
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x42
add byte [rax], al
adc dl, byte [rdx + 0x14ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x42
add byte [rax], al
xchg eax, edx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x4bffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte fs:[rax], al
sub al, 0x92
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
cmp al, 0
add byte [rax], ah
xchg eax, edx
ljmp [rbp + 0x4000000]
xor al, 0x21
add byte [r9 + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
xchg eax, edx
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
scasb al, byte [rdi]
xchg eax, edx
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
scasb al, byte [rdi]
xchg eax, edx
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x43
add byte [rax], al
lahf
xchg eax, edx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x43
add byte [rax], al
lea edx, [rdx + 0x49ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
add byte [r8], al
mov dh, 0x92
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [r8], al
mov dl, 0x92
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rbx], es
add byte [rbp + 0x6dffff92], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x43
add byte [rax], al
xchg eax, edx
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [r8], al
add eax, 0x28ffff93
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [r8], al
xchg eax, ebx
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x44
add byte [rax], al
xchg eax, ebx
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x44
add byte [rax], al
call qword [rdx + 0xeffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add byte [rax], r8b
in eax, dx
xchg eax, edx
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
je 0x411572
add byte [rax], al
xchg eax, ebx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], r8b
add al, 0x93
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x44
add byte [rax], al
or al, 0x93
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
or al, 0x93
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], r8b
cli
xchg eax, edx
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x45
add byte [rax], al
jmp 0x411564
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0x45
add byte [rax], al
fst dword [rdx + 0x4fffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [r8], r8b
add byte [rbx + 0x39ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
jl 0x41167b
add byte [rax], al
sbb dl, byte [rbx + 0xbffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [r8], r8b
xchg eax, ebx
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xf2000045
xchg eax, edx
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7d
or al, 7
or byte [rax + rax], bl
add byte [rax], al
fadd qword [rbp]
add byte [rcx], bl
xchg eax, ebx
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
cld
add byte [r8], r8b
xor dl, byte [rbx + 0x39ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sbb al, 0x46
add byte [rax], al
xchg rax, rbx
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0x46
add byte [rax], al
xchg eax, ebx
jmp qword [rbp]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
wait
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], r8b
mov esp, 0x11ffff93
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rsi], al
add byte [rsi + 0x11ffff93], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], r8b
lahf
xchg eax, ebx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
cmp al, 0x41
add byte [rax], al
mov ss, word [rbx + 0x175ffff]
add byte [rax], al
add al, 0x50
and dword [rcx], eax
adc byte [rsi + 0x60d4302], al
mov es, word [r11]
lea eax, [rsp + rcx*4]
add eax, 0x65030683
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add byte [rax], r8b
xchg eax, esp
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 0x47
add byte [rax], al
std
xchg eax, esp
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0x47
add byte [rax], al
xchg eax, ebp
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add byte [r8], r8b
xchg eax, ebp
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x411875
add byte [rax], al
xor dword [rbp + 0x3dffff], edx
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
js 0x41184f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 0x42
add byte [rax], al
xchg rax, rbp
cmp eax, dword [rax]
add byte [rax], al
add al, 0x69
and dword [rcx], eax
adc byte [rsi + 0x60d4302], al
jbe 0x411873
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x62000047
xchg eax, ebp
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rdi]
add byte [rax - 0x6b], ch
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [r8], r8b
outsb dx, byte [rsi]
xchg eax, ebp
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x48
add byte [rax], al
push -0x6b
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 0x42
add byte [rax], al
xchg ax, bp
jmp 0x4411901
insd dword [rdi], dx
and dword [rcx], eax
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fisttp word [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
sub byte [rsi + 0x1effff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], cl
add byte [rsi], ah
xchg eax, esi
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
adc dl, byte [rsi + 0xbffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
std
xchg eax, ebp
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x48
add byte [rax], al
or byte [rsi + 0x2affff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x49
add byte [rax], al
adc dl, byte [rsi + 0x2effff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
and al, 0x49
add byte [rax], al
and byte [rsi + 0x12ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [r8], al
adc dl, byte [rsi + 0xfffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[r8], al
add dl, byte [rsi + 0xbffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], cl
add dh, ch
xchg eax, ebp
cmp eax, 0
adc byte [rsi + 0x60d4302], al
js 0x411a5f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [r8], al
or al, 0x96
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [r8], al
clc
xchg eax, ebp
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x49
add byte [rax], al
hlt
xchg eax, ebp
push qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insd dword [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x4a
add byte [rax], al
xchg eax, esi
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x4a
add byte [rax], al
add al, 0x96
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x411aff
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
xchg eax, esi
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte fs:[rax], al
xchg rax, rsi
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], cl
add byte [rsi - 0x6a], cl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
push rsp
xchg eax, esi
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
xchg rax, rsi
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
je 0x411b40
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x4b
add byte [rax], al
push 0xeffff96
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x4b
add byte [rax], al
push rsi
xchg eax, esi
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [r8], al
xchg eax, esi
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [r8], al
pop rsp
xchg eax, esi
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rbx], cs
add byte [rax - 0x6a], ch
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
add byte [r8], al
xchg eax, esi
xchg eax, esi
cmp eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jbe 0x411c87
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [r8], al
mov dl, 0x96
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [r8], al
push 5
lcall [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
or al, 0x4c
add byte [rax], al
cwde
xchg eax, esi
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x4c
add byte [rax], al
xchg eax, esi
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], r8b
retf -0x6a
add byte [rax], al
add byte [rsp + rdi*2], al
and dword [rcx], eax
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x75
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x411d7a
add byte [rax], al
loop 0x411cc8
dec dword [rdi]
adc byte [rsi + 0x60d4302], al
add cl, byte [rdx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
add byte [rax], r8b
push rdx
xchg eax, edi
cmp al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jne 0x411d6f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x4c
add byte [rax], al
insb byte [rdi], dx
xchg eax, edi
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [r8], r8b
insb byte [rdi], dx
xchg eax, edi
inc dword [rax + rax]
add byte [rax + rax*4], al
and dword [rcx], eax
adc byte [rsi + 0x60d4302], al
jg 0x411db3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], r8b
mov byte [rdi + 0x1affff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x4d
add byte [rax], al
xchg eax, edi
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x4d
add byte [rax], al
mov byte [rdi + 0x46ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
add byte [r8], r8b
scasb al, byte [rdi]
xchg eax, edi
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x411e83
add byte [rax], al
pushfq
xchg eax, edi
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [r8], r8b
movabs byte [0x1affff97], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x9c00004d
xchg eax, edi
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rbp]
add byte [rsi + 0x27ffff97], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [r8], r8b
test byte [rbx], 0xff
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rsi + rcx*2], bl
add byte [rax], al
mov byte [rdi + 0x65ffff], dl
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x411f12
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
add byte fs:[rax], r8b
mov al, 0x97
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or esp, esi
add dword [rip - 0x55fffd6b], eax
add al, byte [rip - 0x10000]
add dword [rax], eax
inc dword [rcx]
add bh, bh
inc dword [rcx]
sbb byte [rsi + rax + 0xdcb05], dl
mov al, byte [rdi]
add eax, 0xc7000de5
mov cl, 5
test byte [rip + 0x680db400], 0
add bh, bh
inc dword [rcx]
or eax, 0x6a0526
add eax, 0x185005a
add eax, 0xffff0000
add dword [rip + 0x731f], edx
cwde
add dword [rip - 0x44fffd61], eax
add dword [rbx], esp
mov ch, 2
add byte [rax + 0x1f02], dh
inc dword [rcx]
sbb dword [rax], esi
add eax, 0x53b0000
xchg eax, ecx
add eax, dword [rax]
imul ebx, dword [rcx], -0x48
add eax, dword [rax]
rol dword [rcx], 0x75
cmpsd dword [rsi], dword ptr [rdi]
add eax, dword [rax]
add edx, dword [rax]
add bh, bh
inc dword [rcx]
adc esi, dword [rax]
add eax, 0x53b0000
add dword [rax], eax
imul edi, dword [rcx], -0x77
add al, byte [rax]
in al, 1
add byte [rax], al
inc dword [rcx]
sub eax, 0x51f
add eax, 0x460004a3
add eax, 0x5560000
mov ecx, 0x56d0004
add byte [rax], al
xchg dword [rcx], eax
add eax, 0xd50004cf
add dword [rdx], ebx
add byte [rax], al
movabs eax, dword [0x4b40004e501de02]
add byte [r8], al
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rbp + rax + 0x67], bl
add byte [rbp + rax], bh
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add byte [rax], al
add bh, bh
add esp, dword [rip + 0x54601a01]
add byte [rax], al
in eax, 1
sub esp, dword [rbp + 0x2b80103]
cmp al, byte [rax]
add dl, cl
add esp, dword [rcx]
jmp 0x412068
add cl, bh
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x1c221a01]
add byte [rax], al
add dword [rdi], esi
xlatb
add al, byte [rcx]
out 1, al
cmp al, byte [rax]
add byte [rbx + 0x3d04503], cl
add dh, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add esp, dword [rip + 0x1c281a01]
add byte [rax], al
enter 0x501, -0x16
add al, byte [rcx]
cli
add dword [rdx], edi
add byte [rax], al
popfq
add eax, dword [rbp - 0x1e]
add eax, dword [rax]
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
or byte [rdi + 5], al
add byte [rdx + 5], r12b
add byte [rax], al
inc dword [rcx]
cmovne ebx, dword [rax + rax]
add byte [rdi + 0x1b60501], al
add bh, dl
add dword [rip - 0x1000000], eax
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x1890173]
or dl, byte [rbx + 0x1a10001]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or dword [rbp + rax + 0x72], ecx
add byte [rdi + 0x501], al
add byte [rax], al
add bh, bh
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x1890173]
or dl, byte [rbx + 0x1a10001]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rbx]
sbb dword [rcx], eax
movntps xmmword [rip + 0x18e0173], xmm0
add eax, 0xa1000193
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
adc eax, 0x2c9055a
add byte [rsi + 5], ah
mov eax, 0x1c20002
add eax, 0xde000299
add al, byte [rip - 0x10000]
add dword [rax], eax
inc dword [rcx]
or ebx, dword [rbp + 0x1a40501]
add cl, cl
add dword [rip - 0x10000], eax
add dword [rax], eax
inc dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x412df2
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4022], ch
add byte [rax], al
add al, al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x412e26
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x14
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add ah, dl
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
sub eax, 0x61
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x418fb2
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 8], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rip]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rcx], ah
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 4
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400f], bl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x14, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
push rsi
adc eax, 0x40
add byte [rax], al
adc ax, 0x40
add byte [rax], al
add byte [rax], al
jbe 0x413077
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4015], al
add byte [rax], al
add byte [rsi + 0x4015], dl
add byte [rax], al
add byte [rsi + 0x4015], ah
add byte [rax], al
add byte [rsi + 0x4015], dh
add byte [rax], al
add dh, al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
out 0x15, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4016], al
add byte [rax], al
add byte [rsi + 0x4016], dl
add byte [rax], al
add byte [rsi + 0x4016], ah
add byte [rax], al
add byte [rsi + 0x4016], dh
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4017], al
add byte [rax], al
add byte [rsi + 0x4017], dl
add byte [rax], al
add byte [rsi + 0x4017], ah
add byte [rax], al
add byte [rsi + 0x4017], dh
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x413230
je 0x413239
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x413247
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x413244
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002e000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 8], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rax + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x400f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, bh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
test al, 0x14
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
rcl byte [rax + rax*2], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40180000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], dl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
lldt sp
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add al, ah
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + 0x40bd], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x40d0], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rdi + rbx], dh
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
fsubr dword [rip + 0x61]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, 0x612de800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add al, dh
sub eax, 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, bh
sub eax, 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb byte [rax], al
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
xor byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, byte [rax]
test al, 0x31
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, al
xor dword [rcx], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add al, dh
sub eax, 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x18], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4018], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x6132], cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x612de800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, ah
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
fsubr dword [rip + 0x61]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], dh
add byte [rax], dl
add byte [rax], al
mov bh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rsi], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add al, cl
mov eax, 0x40
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x2000001
add byte [rsi], cl
add byte [rcx + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rcx + rax], ch
add byte [rax], al
add al, byte [rax]
add byte [rcx + 0x19], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x19], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2000001], al
add byte [rsi], cl
add byte [rdi + 0x4019], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2000001], ch
add byte [rsi], cl
add byte [rcx + 0x4019], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add bl, ah
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], cl
add byte [rax], al
add dword [rax], eax
sbb eax, dword [rax]
or byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rcx], al
mov bh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdx], al
mov bh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000002], bh
add byte [rax], dl
add byte [rdi + rsi*4], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte fs:[rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax], cl
mov bh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], dh
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
or dword [rdi + 0x40], esi
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rdx], eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
or dh, byte [rdi + 0x40]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rsi*4], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x1000100001000002], eax
mov bh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000002], ch
add byte [rax], dl
add byte [rax], bl
mov bh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000002], dh
add byte [rax], dl
add byte [rax], ah
mov bh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdx], 0
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rsi*4], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax - 0x48], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x40b8], ah
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rdx], ah
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax], ah
mov ecx, 0x40
add byte [rax], al
sub eax, 0
add byte [rax], al
add byte [rax + 3], dl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
loopne 0x41379a
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2000003], al
add byte [rsi], cl
add byte [rdx], dl
and al, byte [rax]
add byte [rax], al
add byte [rax], al
pushfq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2000003], dh
add byte [rsi], cl
add byte [rsi + 0x4022], ch
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
add eax, dword [rax]
add byte [rcx], al
add byte [rdx], dl
add byte [rax], dh
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add eax, dword [rax]
add byte [rcx], al
add byte [rsi], dl
add al, dh
sub eax, 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add eax, dword [rax]
add byte [rax], al
add byte [rcx], dl
add byte [rax + 0x40bd], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
add eax, dword [rax]
add byte [rcx], al
add byte [rdi], dl
add al, bh
sub eax, 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 4
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x4199ea
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 4], dl
add byte [rax + rax], dl
fsubr dword [rip + 0x61]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rax + rax], al
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
xor byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rax*2 + 0x40], cl
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 4], bl
add byte [rax], al
and al, byte [rax]
add dl, al
add byte gs:[rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x40af], ch
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 5], bl
add byte [rax], al
and al, byte [rax]
add byte [rcx + rcx*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000005], cl
add byte [rsi], cl
add byte [rsi + rax*2], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
add eax, 0x220000
add bh, dh
cmp eax, 0x40
add byte [rax], al
xor eax, 0
add byte [rax], al
add al, ah
add eax, 0x220000
add byte [rdx], ch
add byte es:[rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
add eax, 0x220000
add byte [rbx + 0x4061], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 6], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 6], bl
add byte [rax], al
and al, byte [rax]
add dh, ch
wait
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000006], cl
add byte [rsi], cl
add byte [rcx + 0x4074], dl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4049], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add ch, dl
add byte ds:[rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000007], ch
add byte [rsi], cl
add byte [rax + 0x2d], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x77], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x5d], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4023], ch
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx + 0x220000], dl
add byte [rbx + 0x41], ch
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x413ab3
add byte [rax], al
and al, byte [rax]
add cl, al
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000009], dh
add byte [rsi], cl
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x413ae3
add byte [rax], al
and al, byte [rax]
add dh, cl
mov es, word [rax]
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], dl
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x408e], bl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000a], bh
add byte [rsi], cl
add ah, cl
nop
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x24], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax - 0x5b], ah
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rdi + 0x2200000b], cl
add byte [rsi], cl
add byte [rdi + rcx*4], ch
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x2200000b
add byte [rsi], cl
add byte [rbx + rbx*4 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add al, bl
mov word [rax], es
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rsi + 0xc], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4063], cl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
int1
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
add dword [rax], 0
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x220000
add dh, cl
add dword [rax], 0
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xd], al
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x4d], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 0xd
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
push rax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
or eax, 0x220000
add byte [rax], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
or eax, 0x220000
add byte [rbp - 0x5a], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
add byte [rax], al
and al, byte [rax]
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fimul dword [rsi]
add byte [rax], al
and al, byte [rax]
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
sldt word [rax]
and al, byte [rax]
add ch, dh
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
sldt word [rax]
and dword [rax], eax
adc byte [rax], al
cmp byte [rax + rax*2], 0
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
sldt word [rax]
and al, byte [rax]
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
sldt word [rax]
and al, byte [rax]
add byte [rdx + rdx*4], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sldt word [rax]
and al, byte [rax]
add byte [rsi - 0x79], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [r8], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
sahf
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], ch
add byte [rax], al
and al, byte [rax]
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], ah
wait
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x5a], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4076], bl
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x413da3
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3f], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x40a7], dl
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi - 0x63], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12], bl
add byte [rax], al
and al, byte [rax]
add dh, al
sub eax, 0x40
add byte [rax], al
mov dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x413e04
add byte [rax], al
and al, byte [rax]
add dh, al
mov ch, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, ah
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add bh, al
test dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x13], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x407b], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000013], dl
add byte [rsi], cl
add byte [rsi], ch
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add al, dl
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x54], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000014], ch
add byte [rsi], cl
add byte [rax], dl
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
mov al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2d], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul edx, dword [rax + rax], 0
and al, byte [rax]
add dh, ah
cwde
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000014], dl
add byte [rsi], cl
add byte [rdx + 0x50], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdi + 0x40], cl
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor edx, dword [rip + 0x220000]
add byte [rsi], ah
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000015], cl
add byte [rsi], cl
add byte [rsi], ah
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
adc eax, 0x220000
add byte [rip + 0x4060], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x72], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x16], ah
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
pushfq
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000016], cl
add byte [rsi], cl
add byte [rdi + 0x409d], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000016], bh
add byte [rsi], cl
add byte [rsp + 0x40], bl
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
mov eax, 0x6131
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x74], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x17], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4b], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000017], bl
add byte [rsi], cl
add byte [rbx + rdi*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
and al, byte [rax]
add byte [rax + rsi*4 + 0x40], dl
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x414032
add byte [rax], al
and al, byte [rax]
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000018], ah
add byte [rsi], cl
add byte [rbx + 0x41], ch
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x414063
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4046], ch
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x2200001a
add byte [rsi], cl
add byte [rsi + rdx*4 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1a], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, ch
wait
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200001a], cl
add byte [rsi], cl
add byte [rax], ch
imul eax, dword [rax], 0
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0x1a
add byte [rax], al
and al, byte [rax]
add dl, bh
add byte gs:[rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add ah, bl
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbx], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40a6], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1b], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x405e], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, ah
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbp*4 + 0x40], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rsi + 0x40], ah
add byte [rax], al
imul eax, dword [rax], 0
add byte [rax], al
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx - 0x7a], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1c], dh
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x403d], ch
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200001c], cl
add byte [rsi], cl
add byte [rdx], dl
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
sbb al, 0
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x46], bh
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, al
js 0x41422b
add byte [rax], al
add byte [rax], al
add byte [rdi + 2], dh
add byte [rax], al
add byte [rcx], ah
sbb eax, 0x220000
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1d], ah
add byte [rax], al
and al, byte [rax]
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax + 0x2200001d], bh
add byte [rsi], cl
add byte [rdx + 0x409f], ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
sbb eax, 0x220000
add byte [rcx + 0x4023], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
sbb eax, 0x220000
add byte [rbx + rcx*2], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
stosd dword [rdi], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4065], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x409a], bl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
add byte [rax], al
and al, byte [rax]
add dh, bl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbx + 0x220000], bl
add byte [rdx + 0x408f], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x40a8], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
stosb byte [rdi], al
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
test al, 0x31
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x40a9], dh
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000020], ah
add byte [rsi], cl
add ah, ah
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rax*2], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x21], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40a7], bh
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rdx], ah
add byte [rsi], cl
add ah, dl
je 0x4143c3
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add ah, cl
lahf
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], bl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4075], bl
add byte [rax], al
add byte [rax + 1], al
add byte [rax], al
add byte [rcx + 0x11000022], bh
add byte [rax], dl
add al, ah
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x22, 0
and al, byte [rax]
add byte [rcx + rax*2], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, ah
push rbp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rbx], esp
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x61], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x40], cl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0x24
add byte [rax], al
and al, byte [rax]
add byte [rdx], cl
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x24], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x41], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
and eax, 0x220000
add byte [rax], dh
cwde
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x25], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0x25
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4064], cl
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x2241450a
add byte [rsi], cl
add byte [rdx + rcx*4], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ah, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4092], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x26], dh
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
and eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
add byte es:[rax], al
and dword [rax], eax
adc byte [rax], al
and byte [rbp + 0x40], bh
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisub word [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4060], ah
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
add byte es:[rax], al
and al, byte [rax]
add byte [rsi + rdx*4], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000027], bl
add byte [rsi], cl
add byte [rdx - 0x64], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
and al, byte [rax]
add ch, cl
lodsb al, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbp*2 + 0x40], dl
add byte [rax], al
sub eax, 0
add byte [rax], al
add al, ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add cl, dh
add byte [rax], al
and al, byte [rax]
add al, dh
imul eax, dword [rax], 0
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbx], bh
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbp*2], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x28], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000028], dh
add byte [rsi], cl
add byte [rdx], dl
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx + 0x29], cl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
jo 0x41460e
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbp], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x55], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
loop 0x4146a3
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
and eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x61], ch
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rsi + 0x2a], cl
add byte [rax], al
and al, byte [rax]
add ah, bh
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rdi + 0x2a], dh
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x4b], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp], bl
add byte [rax], al
and al, byte [rax]
add byte [rbx], dh
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2b], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x414765
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4065], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
sub eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4081], bl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdx*2], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
xor eax, 0x40
add byte [rax], al
sub eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x4147de
add byte [rax], al
and al, byte [rax]
add dh, cl
mov es, word [rax]
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2d], dl
add byte [rax], al
and al, byte [rax]
add dl, ch
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2d], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4050], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rbx + 0x2200002d], ah
add byte [rsi], cl
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
sub eax, 0x220000
add byte [rbx], cl
add byte gs:[rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or ebp, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x4e], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte cs:[rax], al
and al, byte [rax]
add byte [rsi + 0x4049], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov gs, word [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdx*2 + 0x40], ah
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x1200002e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
add byte cs:[rax], al
and al, byte [rax]
add byte [rcx + 0x53], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte cs:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x2f
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
lahf
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp ch, byte [rdi]
add byte [rax], al
and al, byte [rax]
add cl, bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbp], dh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bh
mov word [rax], es
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
and al, byte [rax]
add dh, ah
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [r8], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
add byte fs:[rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sal dword [rax], 0
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x41], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x44], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x31], dh
add byte [rax], al
and al, byte [rax]
add ah, ah
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11000031], bh
add byte [rbx], bl
add byte [rax + 0x6132], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000031], bh
add byte [rsi], cl
add byte [rsi], bh
mov dl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dh
imul eax, dword [rax], 0
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbp + 0x32], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x42], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x32], ah
add byte [rax], al
adc al, byte [rax]
add byte [rbp + 0x401f], al
add byte [rax], al
add byte [rbp + 2], cl
add byte [rax], al
add byte [rdi + 0x32], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4096], dl
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rdx], dh
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
in al, dx
xor ah, byte [rcx]
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x405f], ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add ch, bh
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x40a0], dh
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rdi + 0x22000033], al
add byte [rsi], cl
add byte [rdi + rdx*2 + 0x40], bh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
xor eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x59], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rsi*4 + 0x40], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx - 0x4b], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rsi + 0x220000], ch
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rsi*2 + 0x40], dh
add byte [rax], al
adc eax, 1
add byte [rax], al
add byte [rbx + 0x35], bh
add byte [rax], al
and al, byte [rax]
add bh, cl
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000035], ah
add byte [rsi], cl
add byte [rbp + 0x47], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte ss:[rax], al
and al, byte [rax]
add byte [rcx + 0x409f], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x36], al
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
loopne 0x414b35
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x36], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx], cl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add byte ss:[rax], al
and al, byte [rax]
add dh, ah
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
add byte ss:[rax], al
and al, byte [rax]
add byte [rax + 0x4057], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x405f], ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rsi + 0x22000037], dl
add byte [rsi], cl
add byte [rbx], ch
mov es, word [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000037], dh
add byte [rsi], cl
add byte [rbp - 0x7c], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
pop rax
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x38
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4086], bl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x38], dl
add byte [rax], al
and al, byte [rax]
add bh, bh
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdx + 0x22000038], bl
add byte [rsi], cl
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
cmp byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rdx*4], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
cmp byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add bh, al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x39], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x57], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x21000039], dh
add byte [rax], dl
add al, dl
mov edx, 0x40
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, bh
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rcx*4], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200003a], dl
add byte [rsi], cl
add ah, cl
imul eax, dword [rax], 0
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fidivr word [rdx]
add byte [rax], al
and al, byte [rax]
add dl, al
jl 0x414d9b
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x414da5
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
push rdi
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add bl, dl
cmp eax, dword [rax]
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x6131], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdx*2 + 0x40], bh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4084], cl
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x414e1e
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200003c], ah
add byte [rsi], cl
add byte [rdx + 0x34], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, 0x2200003c
add byte [rsi], cl
add al, dh
movabs eax, dword [0x31000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, dx
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
add byte es:[rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
cmp eax, 0x210000
adc byte [rax], al
nop
mov edx, 0x40
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rip + 0x220000], edi
add byte [rdx - 0x57], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x220000
add byte [rsi + 0x403f], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x210000
adc byte [rax], al
cmp byte [rax + rax*2], bh
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
cmp eax, 0x220000
add dl, ch
movabs dword [0xe8000000000040], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
or bh, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rbx - 0x5f], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x3e], dl
add byte [rax], al
and al, byte [rax]
add ah, bl
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200003e], al
add byte [rsi], cl
add byte [rbp + 0x409b], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200003e], bl
add byte [rsi], cl
add byte [rax], bl
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200003e], dh
add byte [rsi], cl
add byte [rdx + 0x3f], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add byte ds:[rax], al
and al, byte [rax]
add byte [rsi + 0x409c], bl
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
jo 0x414f67
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x3f], bl
add byte [rax], al
and al, byte [rax]
add dh, bh
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200003f], bh
add byte [rsi], cl
add byte [rbp + 0x47], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4061], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax*2 + 0x220000], al
add byte [rsi - 0x53], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
add byte [rax], al
and al, byte [rax]
add byte [rax + rbx*2], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax*2], ch
add byte [rax], al
and al, byte [rax]
add ah, ah
add byte [rax], 0
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax*2], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbx*4], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [r8], al
and al, byte [rax]
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000042], cl
add byte [rsi], cl
add byte [rsi + 0x43], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
and al, byte [rax]
add ch, bh
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4032], ah
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x4150ac
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x57], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x42, al
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x64], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [r8], al
and dword [rax], eax
adc byte [rax], al
add byte [rdx + 0x40], bh
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rbx], 0
and al, byte [rax]
add ah, bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x21000043], bh
add byte [rax], dl
add al, bh
mov esp, 0x40
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
add byte [r8], al
and al, byte [rax]
add byte [rdx + 0x43], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], r8b
and al, byte [rax]
add byte [rdx], bl
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], r8b
and al, byte [rax]
add byte [rdx], bl
push rax
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x44], bl
add byte [rax], al
and al, byte [rax]
add dh, dl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x44], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x40], cl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x44
add byte [rax], al
and al, byte [rax]
add dh, cl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], r8b
and al, byte [rax]
add byte [rax + 0x31], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
add byte [rax], r8b
and al, byte [rax]
add ch, dh
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
add byte [r8], r8b
and al, byte [rax]
add byte [rcx], bl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rbp + rax*2 + 0x220000], dh
add byte [rsi + 0x61], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax*2], bl
add byte [rax], al
and al, byte [rax]
add ah, bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x46], ch
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4053], dh
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add al, dl
add byte [rax], r8b
and al, byte [rax]
add byte [rcx + 0x40], cl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
add byte [rax], r8b
and al, byte [rax]
add byte [rdx + 0x64], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [r8], r8b
and al, byte [rax]
add byte [rdx + 0x4092], bl
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000047], bl
add byte [rsi], cl
add ah, bl
mov ah, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add byte [r8], r8b
adc al, byte [rax]
add byte [rdx], dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add bh, bl
add byte [r8], r8b
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cli
add byte [r8], r8b
and al, byte [rax]
add byte [rax*2 + 0x40], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
movabs al, byte [0x38000000000040b9]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000048], bh
add byte [rsi], cl
add byte [rsi], dl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [r8], al
and al, byte [rax]
add byte [rbp + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [r8], al
and al, byte [rax]
add byte [rdx + 0x405e], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000049], dl
add byte [rsi], cl
add byte [rax - 0x67], al
add byte [rax], al
add byte [rax], al
add ch, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [r8], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror dword [rcx], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x46], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0x4a
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x4f], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
add byte [rax], al
adc al, byte [rax]
add byte [rcx + 0x1a], al
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add bh, cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
add byte [rax], al
and al, byte [rax]
add dl, bh
mov ch, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [r8], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
adc dword [rax], eax
sbb eax, dword [rax]
movabs al, byte [0x800000000006132]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4b], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x40a2], bh
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200004b], ah
add byte [rsi], cl
add byte [rax], ah
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200004b], bh
add byte [rsi], cl
add dl, dl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmp eax, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add byte [r8], al
and al, byte [rax]
add byte [rsi], al
push 0x40
add byte [rax], al
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], r8b
and al, byte [rax]
add byte [rax + 0x42], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], r8b
and al, byte [rax]
add byte [rdx + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4c], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x405a], dl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200004c], cl
add byte [rsi], cl
add ch, cl
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200004c], ch
add byte [rsi], cl
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], r8b
and al, byte [rax]
add byte [rsi + 0x4065], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x4d], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [r8], r8b
and dword [rax], eax
sbb eax, dword [rax]
sal byte [rcx], 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0x4d
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp - 0x5a], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rsi], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rsi + 0x40], ah
add byte [rax], al
imul eax, dword [rax], 0
add byte [rax], al
sub al, 0x4e
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jl 0x4155c8
add byte [rax], al
and al, byte [rax]
add ah, bh
mov ah, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
fld qword [rax]
add byte [rdx], dl
add byte [rdi], cl
add ah, dl
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [rax], r8b
and al, byte [rax]
add byte [rbx + 0x4094], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add byte [rax], r8b
and al, byte [rax]
add byte [rsi + 0x4060], ah
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [r8], r8b
and al, byte [rax]
add dh, bh
mov dl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200004f], dh
add byte [rsi], cl
add byte [rdx + 0x51], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x4f], bl
add byte [rax], al
and al, byte [rax]
add dl, dl
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [r8], r8b
and al, byte [rax]
add byte [rbx + 0x404a], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
jge 0x415683
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000050], ah
add byte [rsi], cl
add byte [rdi + rbp*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx*2 + 0x220000], bh
add byte [rdx + 0x40a8], ch
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
push rax
add byte [rax], al
and al, byte [rax]
add ah, bl
stosb byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000051], cl
add byte [rsi], cl
add byte [rbx + 0x404a], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x51], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x62], ah
add byte [rax], al
add byte [rax], al
add cl, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000051], al
add byte [rsi], cl
add byte [rsi + 0x7f], al
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
push rcx
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx], edx
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rax*2], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x52], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx + rsi*4 + 0x40], ch
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000052], bh
add byte [rsi], cl
add ah, bl
and eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add cl, bl
push rdx
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbx*2 + 0x40], ah
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
movabs al, byte [0x31000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rbx], ss
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4054], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
push rbx
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
mov dl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
push rsp
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x54], bl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
test al, 0x32
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x54], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x31], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdx*2], bh
add byte [rdx], ah
add byte [rsi], cl
add bl, cl
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000054], ah
add byte [rsi], cl
add byte [rsi + 0x70], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add bl, dh
push rsp
add byte [rax], al
and al, byte [rax]
add ah, ah
push rbp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
push rbp
add byte [rax], al
and al, byte [rax]
add dh, cl
add dword [rax], 0
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000055], ah
add byte [rsi], cl
add al, dh
movabs eax, dword [0x31000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fcom dword [rbp]
add byte [rdx], ah
add byte [rsi], cl
add al, dh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
push rsi
add byte [rax], al
and al, byte [rax]
add ch, dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rbx + 0x56], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4f], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x404b], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
push rdi
add byte [rax], al
and al, byte [rax]
add byte [rcx + rsi*4 + 0x40], dh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
push rdi
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
push rdi
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
add dword [rax], 0
xor eax, 0
add byte [rax], al
add byte [rsi], al
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x407b], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x58], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4049], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x57], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
pop rax
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
cwde
mov esp, 0x40
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
pop rax
add byte [rax], al
and al, byte [rax]
add dh, dh
nop
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x59], cl
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x54], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000059], dh
add byte [rsi], cl
add ah, dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
pop rcx
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x6d], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add al, ch
pop rcx
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x70], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop r10
add byte [rax], al
and al, byte [rax]
add byte [rdi - 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rbx*2 + 0x220000], dl
add byte [rdx + 0x59], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
pop rdx
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
mov dl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
pop rbx
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdi*2], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x415acd
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
push rax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200005b], dl
add byte [rsi], cl
add byte [rbp + 0x4091], dh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
pop rsp
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4061], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx*2], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rdx*2 + 0x40], ch
add byte [rax], al
jnp 0x415aca
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr dword [rax + rax], 0x22
add byte [rsi], cl
add byte [rax], bl
pushfq
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
pop rsp
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4086], bl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200005d], ah
add byte [rsi], cl
add byte [rdx + 0x1e], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rcx*4 + 0x40], dl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5d], ah
add byte [rax], al
and al, byte [rax]
add dh, al
push 0x40
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add al, al
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
stosb byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rdx + 0x5e], dl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4086], cl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200005e], cl
add byte [rsi], cl
add byte [rsi + 0x407d], dl
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4094], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x5f], bl
add byte [rax], al
and al, byte [rax]
add al, dh
add byte ds:[rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
pop rdi
add byte [rax], al
and al, byte [rax]
add byte [rdx + rax*2 + 0x40], dl
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x2200005f
add byte [rsi], cl
add byte [rbp + 0x4078], bl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
pop rdi
add byte [rax], al
and al, byte [rax]
add dh, ch
stosb byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x403e], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rdx], ah
add byte [rsi], cl
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], esp
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000060], dh
add byte [rsi], cl
add byte [rax], bl
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
and al, byte [rax]
add bh, cl
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp esp, dword [rcx]
add byte [rdx], ah
add byte [rsi], cl
add al, ch
test byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x402a], bl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
and al, byte [rax]
add ah, dh
push rdi
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x62], al
add byte [rax], al
and al, byte [rax]
add byte [rax + rbp*4 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x62], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
mov ah, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add dh, dh
add byte [rax], al
and al, byte [rax]
add dl, ch
push rsi
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x63], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbp*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x415da5
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x63], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
movsxd rax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4093], bh
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x5e], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x64], cl
add byte [rax], al
and al, byte [rax]
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000064], dl
add byte [rsi], cl
add byte [rdx - 0x57], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0x65
add byte [rax], al
and al, byte [rax]
add dl, ch
push rsi
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x65], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x32], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000065], ch
add byte [rsi], cl
add byte [rdx + 0x4047], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0x65
add byte [rax], al
and al, byte [rax]
add cl, cl
jno 0x415e4b
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ah, byte [rsi]
add byte [rdx], ah
add byte [rsi], cl
add dh, ch
add byte es:[rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x66], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsi + rsi*4], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000066], bh
add byte [rsi], cl
add byte [rsi + 0x40ad], bl
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x67], cl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
mov eax, 0x40bb
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x67], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx - 0x68], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
add byte [eax], al
and al, byte [rax]
add dh, dl
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [eax], al
and al, byte [rax]
add byte [rdx + rsi*4], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
push 0x220000
add dh, bh
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000068], dh
add byte [rsi], cl
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
push 0x220000
add byte [rsi], al
push 0x40
add byte [rax], al
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx + rbp*2], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000069], bh
add byte [rsi], cl
add byte [rsi], cl
stosd dword [rdi], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
push 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rdx*4], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200006a], al
add byte [rsi], cl
add byte [rax], ch
xor byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rdx + 0x2200006a], bl
add byte [rsi], cl
add byte [rdx + 0x5f], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
push 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dl
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
js 0x415faa
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
imul eax, dword [rax], 0
and al, byte [rax]
add byte [rdx - 0x64], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x6b], dh
add byte [rax], al
and al, byte [rax]
add dl, al
jl 0x416013
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc ebp, dword [rax + rax]
and al, byte [rax]
add byte [rdi + rdx*2], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4077], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
insb byte [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x409d], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
insd dword [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x408b], dl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x6d], bl
add byte [rax], al
and al, byte [rax]
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1200006d], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
outsb dx, byte [rsi]
add byte [rax], al
and al, byte [rax]
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
outsb dx, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x404f], cl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
insd dword [rdi], dx
outsb dx, byte [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], dl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp*2 + 0x220000], dh
add byte [rdx + 0x4092], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
outsb dx, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x64], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200006f], dl
add byte [rsi], cl
add cl, cl
jno 0x416133
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x416189
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x79], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200006f], bh
add byte [rsi], cl
add byte [rax - 0x65], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
outsd dx, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x404a], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x70], al
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x52], bl
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
jo 0x41617b
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, byte [rcx]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
jno 0x4161ab
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rsi*2], bl
add byte [rax], al
add byte [rax], al
add dh, bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000071], ah
add byte [rsi], cl
add byte [rsi + 0x4059], cl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
jno 0x4161db
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
jo 0x416223
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add dh, bh
jno 0x4161f3
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x40ba], ch
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
jb 0x41620b
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x72], al
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x6c], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000072], bl
add byte [rsi], cl
add byte [rsi + 0x407d], dl
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x416253
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rcx*4 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
stosb byte [rdi], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], dl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x4162f5
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x408f], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rsp + rsi*2], cl
add byte [rax], al
and al, byte [rax]
add byte [rbp + rax*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0x74
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x3f], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000074], cl
add byte [rsi], cl
add ah, bl
add byte gs:[rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add bl, cl
je 0x4162e3
add byte [rdx], ah
add byte [rsi], cl
add ah, dh
jge 0x41632b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
jne 0x4162fb
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
mov ch, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x75], ch
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbp*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
jne 0x41632b
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4065], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
jne 0x416343
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x46], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
jbe 0x41635b
add byte [rdx], ah
add byte [rsi], cl
add ah, dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul esi, dword [rsi], 0
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x416400
add byte [rax], al
and al, byte [rax]
add byte [rdi + rdx*2], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
jbe 0x4163a3
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
ja 0x4163bb
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x404b], bh
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rdi + 0x22000077], dh
add byte [rsi], cl
add byte [rsi + 0x40a1], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
ja 0x4163eb
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x404a], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x78], al
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
movabs dword [0x14000000000040], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x416492
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4063], cl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rcx], edi
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbp*4 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
jns 0x41644b
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdi*2], ch
add byte [rdx], ah
add byte [rsi], cl
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0x79
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x40b2], dh
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x79, eax
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
jp 0x4164ab
add byte [rdx], ah
add byte [rsi], cl
add bl, dh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x7a], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x28], bl
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rbp + 0x7a], dh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
enter 0x40bc, 0
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ecx
jp 0x4164f3
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x3d], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
jp 0x41650b
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x403f], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x2200007b
add byte [rsi], cl
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x7b], cl
add byte [rax], al
and al, byte [rax]
add ah, ah
add byte [rax], 0
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200007b], al
add byte [rsi], cl
add byte [rdx + 0x43], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200007b], ah
add byte [rsi], cl
add byte [rdi + 0x54], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
jl 0x416583
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi - 0x53], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200007c], al
add byte [rsi], cl
add dh, bh
add dword [rax], 0
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdi*2 + 0x220000], bh
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
jl 0x4165cb
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x4165e3
add byte [rdx], ah
add byte [rsi], cl
add dh, dh
mov word [rax], es
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rdi*2], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x405e], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rdi*2 + 0x220000], ch
add byte [rsi + 0x46], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x2200007e
add byte [rsi], cl
add byte [rax + 0x4065], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x7e], ch
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
movabs al, byte [0x18000000000040bb]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdi*2 + 0x220000], al
add byte [rsi + 0x4d], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add ch, dl
jle 0x416673
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx - 0x6f], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
jg 0x41668b
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x409c], bl
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdi], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
push rax
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200007f], ch
add byte [rsi], cl
add byte [rbp + 0x47], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
jg 0x4166d3
add byte [rdx], ah
add byte [rsi], cl
add bh, ch
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], 0
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rax + 0x220000], eax
add byte [rax], dl
cdq
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000080], dl
add byte [rsi], cl
add byte [rsi], dh
stosb byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rdx], ah
add dword [rax], 0xe002200
add byte [rdx], cl
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000081], al
add byte [rsi], cl
add byte [rsi], ch
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rsi + 0x21000081], dl
add byte [rax], dl
add byte [rax], dl
mov esp, 0x40
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x22000081
add byte [rsi], cl
add byte [rcx + 0x40], cl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], 0xe002200
add ch, bh
add byte fs:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x404a], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x7e], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
jge 0x41680b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x51], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x7d], ah
add byte [rax], al
and al, byte [rax]
add cl, al
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000083], al
add byte [rsi], cl
add byte [rbp - 0x51], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
test byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x40a1], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x7c], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000084], cl
add byte [rsi], cl
add byte [rcx + 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
test byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx - 0x79], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax*4 + 0x220000], dh
add byte [rdx + 0x4057], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000085], bl
add byte [rsi], cl
add byte [rax - 0x51], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
xchg byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx*4 + 0x40], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x7a], ah
add byte [rax], al
and al, byte [rax]
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add dh, al
xchg byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
xchg byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x59], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax*4], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
add dword [rax], 0
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
rol byte [rax], 0
adc al, byte [rax]
or eax, dword [rax]
test al, 0x14
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x79], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x79], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x59], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000087], ah
add byte [rsi], cl
add al, dh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
xchg dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x406d], ah
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x78], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40b1], cl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000088], ah
add byte [rsi], cl
add byte [rsi + 0x4058], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
push rsp
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
mov dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rdx*4 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
mov dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
mov dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, dh
movabs eax, dword [0x31000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea ecx, [rcx + 0x220000]
add byte [rax + rsi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
mov dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rcx*4 + 0x40], ah
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
mov al, byte [rax]
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x6131], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200008a], bl
add byte [rsi], cl
add byte [rax + rbp + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
mov al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4f], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x76], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x407c], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
mov al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi - 0x52], bl
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x75], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x416a7d
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4083], ch
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200008b], ch
add byte [rsi], cl
add byte [rax], dl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret
mov eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dh
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
fadd qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisttp word [rbx + 0x220000]
add dl, ch
push rsi
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
mov word [rax], es
add byte [rdx], ah
add byte [rsi], cl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x416af6
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4056], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
mov word [rax], es
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x403e], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
lea eax, [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi - 0x5f], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x73], dh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
or byte [rbx + 0x40], bh
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0x8d
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
lea eax, [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200008e], cl
add byte [rsi], cl
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
mov es, word [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x72], ah
add byte [rax], al
and al, byte [rax]
add dh, cl
mov cl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rsi + 0x220000], 1
add byte [rax + rsi*4 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
mov es, word [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x44], ah
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
pop qword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dh
add byte [rax], 0
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x71], ch
add byte [rax], al
and al, byte [rax]
add bl, al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200008f], bh
add byte [rsi], cl
add byte [rdx - 0x57], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
nop
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x64], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000090], ah
add byte [rsi], cl
add byte [rsi + 0x43], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x70], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x28], bl
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rsi - 0x70], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx*4 + 0x220000], ah
add byte [rdx + 0x4081], bl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
nop
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x403e], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
xchg eax, ecx
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
pop rax
mov ebp, 0x40
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
xchg eax, ecx
add byte [rax], al
and al, byte [rax]
add dh, bl
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x6f], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4056], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
xchg eax, ecx
add byte [rax], al
and al, byte [rax]
add cl, bl
pop rbx
add byte [rax], al
add byte [rax], al
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x6e], al
add byte [rax], al
and al, byte [rax]
add byte [rbx + rax*4 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000092], dl
add byte [rsi], cl
add dl, bh
push rbx
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
xchg eax, edx
add byte [rax], al
and al, byte [rax]
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x66], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0x93
add byte [rax], al
and al, byte [rax]
add byte [rbp + rax*4 + 0x40], dl
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
xchg eax, ebx
add byte [rax], al
and al, byte [rax]
add dl, bl
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000093], bl
add byte [rsi], cl
add al, ch
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x22416ee8
add byte [rsi], cl
add byte [rax], bl
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x6c], dl
add byte [rax], al
and al, byte [rax]
add byte [rbx + rdi*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdx*4 + 0x220000], dh
add byte [rdx + 0x409f], ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
xchg eax, esp
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x404c], dl
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rbx], al
xchg eax, ebp
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
xchg eax, ebp
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rdx*4], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add bh, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000095], al
add byte [rsi], cl
add byte [rcx + 0x4053], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
xchg eax, ebp
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
xor ah, byte [rcx]
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
add byte [rax], al
and al, byte [rax]
add al, dl
movabs byte [0x57000000000040], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
xchg eax, esi
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4050], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rsi + 0x22000096], dl
add byte [rsi], cl
add byte [rax + 0x404b], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
xchg eax, esi
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4061], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdx*4], bl
add byte [rax], al
and al, byte [rax]
add al, bl
popfq
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
xchg eax, edi
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000097], dl
add byte [rsi], cl
add byte [rdx + 0x4092], bl
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
xchg eax, edi
add byte [rax], al
and al, byte [rax]
add byte [rbx + rcx*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x68], ah
add byte [rax], al
and al, byte [rax]
add byte [rdi - 0x63], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
cwde
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x403e], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
cdq
add byte [rax], al
and al, byte [rax]
add byte [rdx + rax*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
cdq
add byte [rax], al
and al, byte [rax]
add dh, dh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
cdq
add byte [rax], al
and al, byte [rax]
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
cdq
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
sal byte [rdx], 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000099], ah
add byte [rsi], cl
add byte [rax + 0x32], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
cdq
add byte [rax], al
and al, byte [rax]
add al, bl
mov word [rax], es
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rip + 0x2200009a], bh
add byte [rsi], cl
add dh, dl
jnp 0x4170f3
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rbx + 0x2200009a], ah
add byte [rsi], cl
add byte [rax], ah
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add byte [rax], al
and al, byte [rax]
add al, al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
wait
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rbx + 0x220000], bl
add byte [rdx - 0x52], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add byte [rax], al
and al, byte [rax]
add ch, dl
add byte ds:[rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x64], ah
add byte [rax], al
and dword [rax], eax
sbb eax, dword [rax]
sbb byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
pushfq
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
pushfq
add byte [rax], al
and al, byte [rax]
add dl, dl
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add byte [rax], al
and al, byte [rax]
add al, bl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
popfq
add byte [rax], al
and al, byte [rax]
add byte [rbp + rdx*2 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x63], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4095], ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x63], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr dword [rbp + 0x220000], cl
add byte [rax], ch
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
popfq
add byte [rax], al
and al, byte [rax]
add dh, bh
mov dl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
sahf
add byte [rax], al
and al, byte [rax]
add bl, al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
add byte [rax], al
and al, byte [rax]
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200009e], al
add byte [rsi], cl
add byte [rax + rbp*4 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200009e], ch
add byte [rsi], cl
add byte [rax + rbp + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200009e], bh
add byte [rsi], cl
add byte [rsp + rbp*2], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x48], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rcx - 0x61], cl
add byte [rax], al
and al, byte [rax]
add dl, bl
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add dl, bl
lahf
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
push rax
mov edx, 0x40
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
lahf
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x24], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x50], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x60], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x404c], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000a0], cl
add byte [rsi], cl
add byte [rdx + 0x4046], ch
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xbd80001000210000]
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
movabs eax, dword [0x9c18000e00220000]
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
movabs eax, dword [0xae5e000e00220000]
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000a1], dh
add byte [rsi], cl
add byte [rdx - 0x69], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte es:[0xa221000e00220000], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rdx + 0x220000], al
add dh, ch
pop qword [rax]
add byte [rax], al
add byte [rax], al
fiadd word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 0xa2
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4080], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x46], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword gs:[0xa636000e00220000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000a3], dh
add byte [rsi], cl
add ah, ch
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
movabs dword [0xab0e000e00220000], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x4173de
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
nop
mov ebx, 0x40
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4046], ch
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x41740e
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x404b], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp - 0x6f], ch
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x7b], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x6e], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul esp, dword [rsi + 0x220000], 0xe
add byte [rdi + rdi + 0x40], cl
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
and al, byte [rax]
add al, dl
movabs byte [0x57000000000040], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x7a], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000a7], al
add byte [rsi], cl
add byte [rsi - 0x5a], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
xor byte [rdx], 0x61
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
test al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi - 0x51], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000a8], cl
add byte [rsi], cl
add dl, al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
test al, 0
add byte [rdx], ah
add byte [rsi], cl
add bh, ah
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
test eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x220000
add byte [rdi + rbp*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x57], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3f], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
test eax, 0x220000
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
test eax, 0x220000
add byte [rsp + rbx*2 + 0x40], dh
add byte [rax], al
add byte fs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x100000aa], bl
add byte [rdx], bl
add byte [rax + 0x6131], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
stosb byte [rdi], al
add byte [rax], al
and al, byte [rax]
add al, ah
wait
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x56], ah
add byte [rax], al
and al, byte [rax]
add dl, dh
jbe 0x4176c3
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x120000aa], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000aa], bh
add byte [rsi], cl
add byte [rdi + 0x4047], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
stosd dword [rdi], eax
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
sub eax, 0x40
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x55], al
add byte [rax], al
and al, byte [rax]
add al, dh
movabs eax, dword [0x31000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x41769d
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4047], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
stosd dword [rdi], eax
add byte [rax], al
and al, byte [rax]
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add al, 0
add byte [rax], dl
add byte [rbx], bl
add byte [rax], dl
xor esp, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ebp, dword [rax + rax + 0x1200]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x54], cl
add byte [rax], al
and al, byte [rax]
add ah, bh
mov ah, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000ac], bl
add byte [rsi], cl
add byte [rsi], al
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
lodsd eax, dword [rsi]
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
loopne 0x417746
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000ad], dh
add byte [rsi], cl
add ch, bh
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
and eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx], al
jo 0x417813
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000ad], bh
add byte [rsi], cl
add byte [rsi + 0x70], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdx], cl
scasb al, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rbx], cl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp*4], al
add byte [rdx], ah
add byte [rsi], cl
add dh, al
wait
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x52], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x406f], bl
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rsi + 0x220000ae], ch
add byte [rsi], cl
add byte [rax + 0x44], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdi + rbp*4], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi - 0x7b], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbp*4], bl
add byte [rax], al
and al, byte [rax]
add al, al
and eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rdi + 0x220000], ebp
add ch, dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rsi - 0x51], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasd eax, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdx*4 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbp*4 + 0x220000], bl
add dl, al
add byte gs:[rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000b0], al
add byte [rsi], cl
add al, bh
mov dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000b0], ah
add byte [rsi], cl
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x50], ah
add byte [rax], al
and al, byte [rax]
add dl, bl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x220000b0], ch
add byte [rsi], cl
add dh, dl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
mov al, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
mov cl, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], bh
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x4f], bl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4061], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000b1], dl
add byte [rsi], cl
add dh, al
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
mov dl, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x40b4], ah
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000b2], ah
add byte [rsi], cl
add byte [rsi - 0x52], bl
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000b3], ah
add byte [rsi], cl
add byte [rsi - 0x57], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x4d], dh
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x47], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
mov bl, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4096], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 0
add byte [rdx], ah
add byte [rsi], cl
add al, dh
push rbx
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x4c], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x30], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rsi*4], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp - 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdi + 0x220000b4], bh
add byte [rsi], cl
add byte [rdx + 0x4046], ch
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rbp + 0x220000], esi
add byte [rsi + 0x4d], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rdx - 0x4b], bl
add byte [rax], al
and al, byte [rax]
add byte [0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x4b], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4045], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000b5], bh
add byte [rsi], cl
add dl, ch
mov eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
mov dh, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rsi + 0x220000], esi
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rsi*4], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rcx*4 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x120000b6], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
mov dh, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
mov bh, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, dh
push rdi
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
mov bh, 0
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x49], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40ad], bl
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
mov bh, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rcx
mov eax, 0x220000
add byte [rcx + rbp*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000b8], cl
add byte [rsi], cl
add byte [rsi], bh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
mov eax, 0x220000
add byte [rdi + 0x404c], dl
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add ch, ah
mov eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
mov eax, 0x220000
add ah, dl
mov ch, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x47], dl
add byte [rax], al
and al, byte [rax]
add dl, ch
test eax, 0x40
add byte [rax], al
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rcx + 0x220000], bh
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000b9], bl
add byte [rsi], cl
add dh, ch
xchg byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
mov ecx, 0x220000
add cl, al
cwde
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rdi], al
mov edx, 0x220000
add byte [rax + 0x4026], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
mov edx, 0x220000
add byte [rdx], ah
add dword [rax], 0
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x220000
add byte [rdx], dl
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
js 0x417cd2
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
mov edx, 0x220000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax - 0x45], al
add byte [rax], al
and al, byte [rax]
add byte [rdi - 0x5a], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000bb], ah
add byte [rsi], cl
add bl, al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0xbb
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
idiv dword [rbx + 0x100000]
sbb eax, dword [rax]
mov eax, 0x6131
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
mov esp, 0x110000
sbb eax, dword [rax]
call 0x41de8f
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x220000bc
add byte [rsi], cl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs r12, 0x8e78000e00220000
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000bc], cl
add byte [rsi], cl
add byte [rsi + 0x4049], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x417d6e
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x3f], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rdi*4], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rsi + 0x40], bh
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
mov ebp, 0x220000
add byte [rip + 0x4054], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rdi*4 + 0x220000], ah
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or bh, byte [rsi + 0x220000]
add dh, cl
mov cl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x417de8
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
fdivr dword [rcx + 0x40]
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
mov esi, 0x220000
add byte [rdx - 0x61], ch
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
mov esi, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x417e30
add byte [rax], al
and al, byte [rax]
add byte [rax + rsi*4 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
mov edi, 0x220000
add byte [rdi + 0x4047], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*4], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbp*2], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*4 + 0x220000], dh
add byte [rax + 0x40b5], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x220000
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax*8], dl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4a], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x40], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x24], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
rol byte [rax], 0
and al, byte [rax]
add byte [rsi + rbx*2 + 0x40], ah
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret
rol byte [rax], 0
adc al, byte [rax]
add byte [rax - 0x4a], ah
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol eax, cl
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rsi], cl
rol dword [rax], 0
and al, byte [rax]
add byte [rax + 0x5e], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x3f], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax*8], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rax*4], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol cl, cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40a6], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
ret 0
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0
and al, byte [rax]
add dl, bl
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x3e], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000c2], dl
add byte [rsi], cl
add byte [rax + 0x408c], dl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
ret 0
and al, byte [rax]
add byte [rax + 0x409b], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
ret 0
and al, byte [rax]
add byte [rcx + 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
ret
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
test al, 0xbc
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x3d], cl
add byte [rax], al
and al, byte [rax]
add dh, bh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
ret
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x403e], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000c3], bl
add byte [rsi], cl
add byte [rax], ch
imul eax, dword [rax], 0
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
ret
add byte [rax], al
and al, byte [rax]
add byte [rdi + rdx*2], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add ah, cl
imul eax, dword [rax], 0
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ecx
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4062], cl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
sbb ebp, eax
add byte [rax], al
and al, byte [rax]
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x3b], dl
add byte [rax], al
and al, byte [rax]
add byte [rbp - 0x80], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x44], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rcx], ch
mov byte [rax], 0
and al, byte [rax]
add byte [rdx - 0x51], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000c6], dh
add byte [rsi], cl
add dh, ah
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
mov byte [rax], 0
and al, byte [rax]
add dl, cl
popfq
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
mov dword [rax], 0xe002200
add byte [rax], bl
pushfq
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x39], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x55], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x22418284
add byte [rsi], cl
add byte [rax - 0x50], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
enter 0, 0x22
add byte [rsi], cl
add byte [rdx - 0x52], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x120000c8], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
enter 0, 0x22
add byte [rsi], cl
add byte [rdx + rsi*4 + 0x40], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x224182e5
add byte [rsi], cl
add byte [rax + 0x40af], ch
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x37], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi], bl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rbp + 0x220000c9], bh
add byte [rsi], cl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
leave
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0xca
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40b1], cl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x36], ah
add byte [rax], al
and al, byte [rax]
add dl, bl
lahf
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
retf 0
and al, byte [rax]
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
retf 0
and al, byte [rax]
add byte [rdx + rax*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
retf 0
and al, byte [rax]
add byte [rdx + 0x3d], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000cb], ch
add byte [rsi], cl
add ah, dh
jge 0x41833b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x120000cb], cl
add byte [rax], al
add byte [rax + 0x17], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
add eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rsi], ah
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
retf
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x40b2], dh
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 0xcb
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
int3
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
sahf
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x34], al
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4060], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000cc], al
add byte [rsi], cl
add byte [rax + 0x4057], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
int3
add byte [rax], al
and al, byte [rax]
add byte [rax], al
jo 0x4183d1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
int3
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x5e], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x33], al
add byte [rax], al
and al, byte [rax]
add byte [rax + rax*2 + 0x40], cl
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rcx*8], bl
add byte [rcx], ah
add byte [rax], dl
add byte [rax], ch
mov esp, 0x40
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x33], ch
add byte [rax], al
and al, byte [rax]
add byte [rbp - 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add dl, al
int 0
add byte [rdx], ah
add byte [rsi], cl
add al, dh
add byte ds:[rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
int 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbx*4 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx*8], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rax - 0x4d], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fcmove st(0), st(6)
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbx*4], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
iretd
add byte [rax], al
and al, byte [rax]
add byte [rsi + rsi*4], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x31], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + rsi*2], bl
add byte [rax], al
add byte [rax], al
add dh, bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000cf], ch
add byte [rsi], cl
add byte [rdi + 0x4026], bh
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
iretd
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4095], ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
iretd
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4097], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
rol byte [rax], 1
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
mov bl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x30], bl
add byte [rax], al
and al, byte [rax]
add byte [rbx], bh
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000d0], ah
add byte [rsi], cl
add bh, al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
rol dword [rax], 1
add byte [rcx], ah
add byte [rax], dl
add byte [rax], ch
mov edx, 0x40
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol dword [rax], 1
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x40a1], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx*8], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x40], cl
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg ecx, edx
add byte [rax], al
and al, byte [rax]
add byte [rdx + rax*2 + 0x40], dl
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0xd1
add byte [rax], al
and al, byte [rax]
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
rol dword [rax], 1
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x40bc], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
rol byte [rax], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbp*4], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x2e], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + rdx*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
rol byte [rax], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x402f], ah
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 0xd2
add byte [rax], al
and al, byte [rax]
add byte [rsi], bl
mov cl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol qword [rax], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x418625
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0x36000e00220000d3], al
stosb byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rsp + rdx*8], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4058], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
and al, byte [rax]
add byte [rdx], al
add byte fs:[rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, 0x220000d4
add byte [rsi], cl
add byte [rdx], cl
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or ebp, edx
add byte [rax], al
adc al, byte [rax]
add byte [rbx + 0x401a], dh
add byte [rax], al
add byte [rbp + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dl, ch
add byte [rax], al
and al, byte [rax]
add ah, dh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x2b], al
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x66], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000d5], ah
add byte [rsi], cl
add dl, bh
push rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add byte [rax], al
and al, byte [rax]
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x2a], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
add byte [rax], al
and al, byte [rax]
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
add byte [rax], al
and al, byte [rax]
add dh, ah
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x220000d7], ch
add byte [rsi], cl
add byte [rsi], cl
sub eax, 0x40
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x29], al
add byte [rax], al
and al, byte [rax]
add ch, dh
test dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x4187a9
add byte [rax], al
and al, byte [rax]
add byte [rbp + rdi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000d7], bl
add byte [rsi], cl
add byte [rsi + rcx*4 + 0x40], dl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
xlatb
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4087], bh
add byte [rax], al
add byte [rdi], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 0x220000d8], ch
add byte [rsi], cl
add dl, dl
mov bl, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
fld dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x40a0], ah
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg ecx, ebx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4059], cl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0xd9
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
fld dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, al
mov eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
fld dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rbp + 0x401a], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
fiadd dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbx*2], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
fiadd dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x26], al
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x401c], dl
add byte [rax], al
add dl, dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x26], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4056], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000da], ah
add byte [rsi], cl
add byte [rcx - 0x6e], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
fiadd dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
fild dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x25], bl
add byte [rax], al
and al, byte [rax]
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000db], al
add byte [rsi], cl
add byte [rdi + rdi*2], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
fild dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
je 0x4189e3
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0xdc
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x51], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
fadd qword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x40a2], bh
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
fadd qword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rdi*2], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld qword fs:[rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x405f], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x220000dd], bl
add byte [rsi], cl
add byte [rdi + rsi*2 + 0x40], dl
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x418a07
add byte [rax], al
adc al, byte [rax]
add al, dl
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
fld qword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rsi], ch
fiadd word [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x406e], dh
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rbp - 0x22], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
fiadd word [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rbp + 0x220000df], al
add byte [rsi], cl
add al, ah
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000df], bl
add byte [rsi], cl
add byte [rdi + rdx*4 + 0x40], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild word [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx - 0x57], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
loopne 0x418aeb
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x5f], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul esp, eax, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bl
test eax, 0x40
add byte [rax], al
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x418b1b
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
cdq
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
loope 0x418b33
add byte [rdx], ah
add byte [rsi], cl
add al, ah
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx - 0x1f], dl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x1f], dh
add byte [rax], al
and al, byte [rax]
add byte [rdi], ah
push rbx
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000e1], dh
add byte [rsi], cl
add byte [rcx + rcx*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
loope 0x418b93
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x404b], bh
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rsi + 0x220000e2], cl
add byte [rsi], cl
add byte [rcx + 0x4c], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
loop 0x418bc3
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x409a], ch
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdi
jrcxz 0x418bdb
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4066], bl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000e3], ch
add byte [rsi], cl
add byte [rdx - 0x59], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
jrcxz 0x418c0b
add byte [rdx], ah
add byte [rsi], cl
add dh, al
wait
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
in al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x1c], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4b], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000e4], ah
add byte [rsi], cl
add byte [rdx + 0x4057], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
in eax, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x409b], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
in eax, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x1b], cl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x404a], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000e5], ch
add byte [rsi], cl
add byte [rax], ah
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0
add byte [rdx], ah
add byte [rsi], cl
add bl, cl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
out 0, al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbp*2], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4056], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
out 0, al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x47], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x19], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + rsi*4 + 0x40], dl
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
out 0, eax
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
call 0x638d76
add ah, ah
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000e8], ah
add byte [rsi], cl
add byte [rcx - 0x53], ah
add byte [rax], al
add byte [rax], al
add byte [rip], bh
add byte [rax], al
add byte [rdi - 0x17], cl
add byte [rax], al
and al, byte [rax]
add byte [rax*4 + 0x40], bl
add byte [rax], al
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbp*8 + 0x220000], cl
add byte [rsi + 0x40a1], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000e9], dh
add byte [rsi], cl
add bh, bh
stosb byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rbp*8], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ebp, edx
add byte [rax], al
and al, byte [rax]
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x418e04
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
pop rax
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
jmp 0x418e4b
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bh
xchg eax, esi
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0x15], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x43], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000eb], dl
add byte [rsi], cl
add byte [rax + 0x4074], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
jmp 0x418e93
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
in al, dx
add byte [rax], al
and al, byte [rax]
add byte [rbx*4 + 0x40], dl
add byte [rax], al
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x14], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x220000ec], cl
add byte [rsi], cl
add byte [rax + 0x404e], cl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
in al, dx
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, dx
add byte [rax], al
and al, byte [rax]
add byte [rax + rbx*2], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
in eax, dx
add byte [rax], al
and al, byte [rax]
add byte [rdx - 0x57], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x418f27
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4025], dl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000ed], cl
add byte [rsi], cl
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
in eax, dx
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
rcl byte [rdi], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
out dx, al
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
out dx, al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, al
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rdi - 0x12], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4069], ah
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000ee], cl
add byte [rsi], cl
add byte [rcx], ah
movabs byte [0x98000000000040], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x224190eb
add byte [rsi], cl
add byte [rcx + 0x48], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rbx], cl
out dx, eax
add byte [rax], al
and al, byte [rax]
add cl, cl
test al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp bh, ch
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x419031
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x406d], ah
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add ch, cl
out dx, eax
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4095], dh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
out dx, eax
add byte [rax], al
and al, byte [rax]
add bh, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
lock add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
stosb byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add cl, al
lock add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4056], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
int1
add byte [rax], al
adc al, byte [rax]
add byte [rsi + 0x1a], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
int1
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x65], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0xf], bl
add byte [rax], al
and al, byte [rax]
add cl, cl
test al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
int1
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
and byte [rbx + 0x40], bh
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
int1
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4026], ch
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
and al, byte [rax]
add byte [rbp + rax*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rbp - 0x7a], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x220000f2], cl
add byte [rsi], cl
add byte [rax + 0x2f], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0xf2
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add byte [rax], al
and al, byte [rax]
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rbx + rsi*8], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi - 0x58], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx - 0xd], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4051], bl
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0xf3, 0
and al, byte [rax]
add byte [rdx + 0x4032], ah
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fdivrp st(3)
add byte [rax], al
and al, byte [rax]
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4048], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
hlt
add byte [rax], al
and al, byte [rax]
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000f4], dl
add byte [rsi], cl
add byte [rbx - 0x7f], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x220000f4], dh
add byte [rsi], cl
add byte [rip + 0x40a6], cl
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
cmc
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x4e], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
cmc
add byte [rax], al
and al, byte [rax]
add dl, ch
push rsi
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x210000f5], bl
add byte [rax], dl
add byte [rax - 0x44], dl
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rdx + 0x220000f5], ch
add byte [rsi], cl
add byte [rbp + 0x54], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
test byte [rax], 0
and al, byte [rax]
add byte [rsi], cl
jg 0x41932b
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi - 0xa], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + rcx*4 + 0x40], dl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rax], 0
and al, byte [rax]
add byte [rax - 0x64], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
test byte [rax], 0
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
test dword [rax], 0xe002200
add byte [rdi + rsi*2 + 0x40], dh
add byte [rax], al
jmp 0x419355
add byte [rax], al
add byte [rsi + 0x220000f7], bl
add byte [rsi], cl
add byte [rax + 0x7e], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add cl, cl
test dword [rax], 0xe002200
add byte [rsi], cl
stosd dword [rdi], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x419400
je 0x419404
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4193b6
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x419434
jb 0x41943a
pop rdi
jne 0x419443
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x41943d
je 0x419439
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x419459
jb 0x41945f
pop rdi
jne 0x419468
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x41946b
jns 0x41945b
outsb dx, byte gs:[rsi]
je 0x419472
jns 0x419402
jb 0x419466
insd dword [rdi], dx
pop rdi
jne 0x419478
insd dword [rdi], dx
jns 0x41940e
pop rdi
pop rdi
jb 0x419474
insd dword [rdi], dx
pop rdi
jne 0x419486
insd dword [rdi], dx
jns 0x41947b
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x419486
jns 0x419486
outsb dx, byte gs:[rsi]
je 0x41949d
jns 0x41942d
jae 0x41949e
jne 0x4194a3
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x419489
xor dword [rcx], edi
jo 0x4194aa
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4194c2
jb 0x4194c5
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
xor qword [rax], r15
pop rdi
pop rdi
je 0x4194c5
jb 0x4194c4
pop rdi
movsxd rsi, dword [rcx + rbp*2 + 0x76]
pop rdi
jo 0x4194e1
add byte [rdi + 0x5a], bl
pop rdx
xor qword [rax], r15
pop rdi
pop rdi
je 0x4194df
jb 0x4194de
pop rdi
movsxd rsi, dword [rcx + rbp*2 + 0x76]
pop rdi
jo 0x4194fb
xor r14b, byte [r8]
pop rdi
pop rdi
je 0x4194f5
jb 0x4194f4
pop rdi
movsxd rsi, dword [rcx + rbp*2 + 0x76]
pop rdi
jo 0x41950f
jb 0x41949d
pop rdi
pop rdx
xor qword [rip + 0x74675f5f], r14
push 0x64616572
pop rdi
jno 0x419524
insb byte [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor r14b, byte [rax]
pop rdi
pop rdi
je 0x419526
jb 0x419525
pop rdi
insd dword [rdi], dx
jne 0x41953a
js 0x419528
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x50]
xor dword [rip + 0x72687470], esi
pop rdi
insd dword [rdi], dx
jne 0x41954f
js 0x41953d
je 0x4194e0
pop rdi
pop rdx
xor r14b, byte [rdx]
pop rdi
pop rdi
je 0x419552
jb 0x419551
pop rdi
insd dword [rdi], dx
jne 0x419566
js 0x419554
jne 0x419565
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x50]
xor dword [rip + 0x72687470], esi
pop rdi
insd dword [rdi], dx
jne 0x41957d
js 0x41956b
je 0x41950e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419577
movsxd rdi, dword [rax + 0x78]
xor qword [rax], r15
pop rdi
pop rdi
js 0x419586
push 0x65676e61
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rsi
imul ebp, dword [rcx], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x41959f
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rip + 0x78655f5f]
movsxd rbp, dword [rax + 0x61]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
pop rdi
jae 0x4195c4
outsb dx, byte [rsi]
insb byte [edi], dx
push r8
imul ebp, dword [rcx], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x4195cd
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rdi]
pop rdi
pop rdi
js 0x4195dc
push 0x65676e61
pop rdi
outsb dx, byte [rsi]
pop rdi
pop rdi
imul esi, dword fs:[rbx + 0x70], 0x68637461
push r8
imul ebp, dword [rcx], 0x74535a5f
cmp byte [rdi + 0x5f], r11b
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x4195f4
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x419613
jb 0x41961e
add byte [rdi + 0x5a], bl
push rbx
je 0x419609
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41962e
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x419649
je 0x41963e
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419655
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x41963d
xor dword [rax], esi
jb 0x419658
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x41964f
xor dword [rcx], esi
je 0x419679
jns 0x419668
je 0x41967a
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x419662
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x419691
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
xor r9, qword [rcx + 0x4e]
add byte [rdi + 0x5a], r11b
pop rdi
add byte [rdi + 0x5a], r11b
xor r14b, byte [rax + 0x69]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
push rbp
push r10
pop rdi
push rbx
pop r10
add byte [r15 + 0x5a], r11b
xor qword [rax], r14
pop r8
pop rdi
push r12
add byte [rdi + 0x5a], bl
pop rdx
jae 0x4196c9
je 0x4196a8
jae 0x4196ce
push 0x45
xor dword [rcx], edi
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor dword [rdx], esi
jae 0x4196ed
je 0x4196da
jb 0x4196f1
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x3931456a
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x72
push rdx
imul edx, dword [rbx + 0x30], 0x7645455f
jo 0x41970e
push rsp
pop rdi
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x72
push rdx
xor dword [r9], esi
xor dword [rdi + 0x78], ebx
push rdx
imul eax, dword [rbp + 0x45], 0x4f704476
push rsp
pop rdi
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x419786
je 0x41977e
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x41978c
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x4197a2
jb 0x4197a5
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x4197ba
pop rdi
pop r15
pop rdi
pop rdx
cmp byte [rbx + 0x65], dh
je 0x4197a7
imul esp, dword [rsp + rsi*2 + 0x68], 0x5f5f006a
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4197f8
jns 0x4197f8
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x419809
jns 0x419809
jae 0x419820
jb 0x419823
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5a], bl
xor al, 0x72
push r10
xor dword [r9], esi
xor dword [rdi + 0x78], ebx
push rdx
imul eax, dword [rbp + 0x45], 0x4f704476
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419819
je 0x419833
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41986a
je 0x41983d
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x419870
je 0x419865
insb byte [rdi], dx
je 0x419871
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41984a
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x419871
pop rax
push rsp
pop rdi
push r11
je 0x419864
je 0x4198a6
jo 0x41989f
jo 0x41988d
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4198b2
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x419881
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x4198d3
jb 0x4198aa
push rbx
push r11
je 0x419899
xor ebx, dword [rdi + 0x53]
jo 0x4198cb
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4198d7
pop rdi
jo 0x4198ea
jb 0x4198d7
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4198ba
je 0x4198ee
jb 0x4198ed
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4198c5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41990c
push rax
jbe 0x41991d
jbe 0x4198ef
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41991c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x419939
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x52]
push rbx
pop rdi
push rax
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x419917
xor byte [rdi + 0x48], bl
pop rdi
jae 0x419956
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x419940
jae 0x419965
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419949
xor byte [rdi + 0x48], bl
pop rdi
jae 0x419988
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x4199a2
jo 0x4199a5
je 0x419976
jbe 0x41999e
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419984
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
movsxd rbp, dword [rdx + 0x63]
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x4199e6
je 0x4199b7
jbe 0x4199df
movsxd rsp, dword [rbp + 0x38]
outsb dx, byte [rsi]
js 0x4199f1
push 0x76457261
add byte [rdi + 0x5a], bl
push rbx
je 0x4199bb
xor dword [rdi + 0x54], ebx
jne 0x4199ff
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x419a16
jo 0x419a19
je 0x4199ec
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x419a1f
je 0x419a14
insb byte [rdi], dx
je 0x419a20
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x419a4d
jo 0x419a50
je 0x419a23
imul ebp, dword [rbp + 0x44], 0x764530
pop rdi
pop rdx
push rbx
je 0x419a1c
xor byte [rdi + 0x48], bl
pop rdi
jae 0x419a5b
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x419a75
xor byte [rbp + 0x45], al
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419a7a
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x70347453
imul esi, dword [rdx + 0x49], 0x53456964
je 0x419a66
jbe 0x419a97
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x419abc
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x419acf
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x419ae9
jo 0x419ad7
push r10
push r11
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419ab3
xor dword [rdi + 0x54], ebx
jne 0x419af7
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x419ade
jae 0x419b03
push rbx
je 0x419ad2
xor al, 0x64
jne 0x419b14
je 0x419b09
insb byte [rdi], dx
je 0x419b15
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x419b0a
push r12
pop rdi
jo 0x419b1b
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x419b08
je 0x419b22
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x419b59
je 0x419b2c
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x419b5f
je 0x419b54
insb byte [rdi], dx
je 0x419b60
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x419b38
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x419b5f
pop rax
push rsp
pop rdi
push r11
je 0x419b52
je 0x419b94
jo 0x419b8d
jo 0x419b7b
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x419ba0
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x419bb3
jo 0x419bb6
je 0x419b87
jbe 0x419baf
movsxd rsp, dword [rbp + 0x44]
xor byte [rbp + 0x76], al
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419bb6
movsxd rdi, dword [rax + 0x78]
jno 0x419ba6
push rax
push r11
je 0x419b96
jo 0x419bc5
imul esi, dword [rdx + 0x49], 0x53456964
je 0x419ba3
jbe 0x419bd4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x419bfc
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419be3
jo 0x419c1c
jo 0x419c0e
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419c1b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x419c34
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x419c0b
jo 0x419c3a
imul esi, dword [rdx + 0x49], 0x53456964
je 0x419c18
jbe 0x419c49
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r11
je 0x419c30
jb 0x419c61
je 0x419c64
jb 0x419c4a
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x419c5c
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x419c4a
imul esi, dword [rbx + 0x6e], 0x646e61
pop rdi
pop rdx
push rbx
je 0x419c55
imul ebp, dword [rsi + 0x64], 0x32745349
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x419c95
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x419ca9
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x49], 0x36327453
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x419ccc
outsb dx, byte gs:[rsi]
je 0x419cc4
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
push rbx
je 0x419cb7
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6c65685f
jo 0x419cf7
jb 0x419cdd
pop rax
jae 0x419d09
push rbx
je 0x419ccf
pop rdi
pop rdi
outsd dx, dword [rsi]
jb 0x419cfe
push r11
je 0x419cd5
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push rbx
je 0x419cea
movsxd rsp, dword gs:[rcx + 0x79]
push r12
pop rdi
xor al, 0x74
jns 0x419d32
push r11
je 0x419cff
imul esi, dword [rbx + 0x5f], 0x6d756e65
push r11
pop r15
xor eax, 0x756c6176
push r11
cmp byte [rdi + 0x49], bl
jo 0x419d38
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x419d5c
push r11
cmp byte [rdi + 0x44], bl
jo 0x419d44
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419d32
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x419d67
push r10
push rbx
je 0x419d3e
je 0x419d72
jb 0x419d71
xor ch, byte fs:[rcx + 0x64]
push rbx
je 0x419d49
jb 0x419d80
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x419d84
pop rdi
jb 0x419d87
jb 0x419d8b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x419da1
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x419d6f
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x419d93
cmp byte [rbp + 0x73], dl
je 0x419d93
jae 0x419db8
push rbx
je 0x419d87
xor al, 0x64
jne 0x419dc9
je 0x419dbe
insb byte [rdi], dx
je 0x419dca
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x50], eax
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x419def
jo 0x419df2
je 0x419dc3
jbe 0x419deb
movsxd rsp, dword [rbp + 0x35]
ja 0x419df9
imul esi, dword [rbp + 0x49], 0x5f394152
movsxd rsp, dword [r11 + 0x49]
push rbx
je 0x419dd3
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x419ddb
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x419e23
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x419e0f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x419e48
je 0x419e5d
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x419e2e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419e6d
movsxd rbx, dword [rdi + 0x73]
je 0x419e7b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419e76
je 0x419e8b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
push rax
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x419e77
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x419ec8
je 0x419ebd
outsb dx, byte [rsi]
push r8
push rbx
je 0x419e9c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x419edb
movsxd rbx, dword [rdi + 0x73]
je 0x419ee9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x419ee4
je 0x419ef9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insd dword [rdi], dx
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x419edc
je 0x419f10
jb 0x419f0f
xor al, 0x73
ja 0x419f11
jo 0x419ef7
push rdx
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x419eee
xor byte [rdi + 0x5f], bl
jne 0x419f2f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x419f4a
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x419f4b
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x419f5f
push r11
je 0x419f1b
xor ebp, dword [rbp + 0x6f]
jbe 0x419f54
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x419f31
jo 0x419f60
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x419f93
jo 0x419f96
je 0x419f67
jbe 0x419f8f
movsxd rsp, dword [rbp + 0x31]
xor al, 0x77
jb 0x419f96
je 0x419f94
push rbx
imul esp, dword [rdi + 0x6e], 0x6e496465
je 0x419f82
imul eax, dword [rbp + 0x45], 0x5f546350
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419fad
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x419fb6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x419faa
push rbx
je 0x419f9a
je 0x419fce
jb 0x419fcd
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x419fba
je 0x419fee
jb 0x419fed
xor al, byte fs:[r13 + 0x4f]
push rbx
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x419ffa
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41a013
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x419feb
jo 0x41a01a
imul esi, dword [rdx + 0x49], 0x53456964
je 0x419ff8
jbe 0x41a029
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41a05a
jo 0x41a05d
je 0x41a02e
jbe 0x41a056
movsxd rsp, dword [rbp + 0x35]
ja 0x41a064
imul esi, dword [rbp + 0x49], 0x31314152
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x41a039
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a078
movsxd rbx, dword [rdi + 0x73]
je 0x41a086
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a081
je 0x41a096
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rax, dword [rbp + 0x45]
push rbx
je 0x41a074
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41a07c
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41a0c4
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x41a0b8
je 0x41a0ec
jb 0x41a0eb
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41a0c5
pop rdi
push rbx
jo 0x41a0f8
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a104
pop rdi
jae 0x41a10a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a10e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a12b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41a101
xor ebx, dword [rdi + 0x53]
jo 0x41a133
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a13f
pop rdi
jo 0x41a152
jb 0x41a13f
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41a122
je 0x41a156
jb 0x41a155
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a12d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a174
push rax
jbe 0x41a185
jbe 0x41a157
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a184
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a1a1
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41a17b
jbe 0x41a1ac
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41a185
je 0x41a1b9
jb 0x41a1b8
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41a19e
je 0x41a1d2
jb 0x41a1d1
xor dword fs:[r13 + 0x4f], eax
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a1ab
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41a1f5
jb 0x41a1f8
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x41a1c1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a200
movsxd rbx, dword [rdi + 0x73]
je 0x41a20e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a209
je 0x41a21e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x41a216
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41a208
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a247
movsxd rbx, dword [rdi + 0x73]
je 0x41a255
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a250
je 0x41a265
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x41a274
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41a258
je 0x41a29a
jo 0x41a293
push r8
cmp byte [rbp + 0x73], dl
je 0x41a274
jae 0x41a299
push rbx
je 0x41a268
xor al, 0x64
jne 0x41a2aa
je 0x41a29f
insb byte [rdi], dx
je 0x41a2ab
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41a299
xor dword [rdi + 0x54], ebx
jne 0x41a2dd
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41a2ae
xor al, 0x64
jne 0x41a2f0
je 0x41a2e5
insb byte [rdi], dx
je 0x41a2f1
xor qword [r10], rsi
jne 0x41a306
jo 0x41a309
je 0x41a2da
jbe 0x41a302
movsxd rsp, dword [rbp + 0x45]
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a2e0
xor eax, 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
pop rdi
jae 0x41a323
jb 0x41a323
push rbx
je 0x41a2fa
je 0x41a32e
jb 0x41a32d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a305
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a34c
push rax
jbe 0x41a35d
jbe 0x41a32f
push r11
push r11
pop rdi
push r11
pop rdi
push r11
je 0x41a32e
xor byte [rbx + 0x68], dh
jb 0x41a368
pop rdi
jo 0x41a37b
jb 0x41a352
push rsp
pop rdi
push r10
push r12
xor byte [rdi + 0x44], bl
jo 0x41a363
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
cmp qword [r9 + 0x6e], rcx
jo 0x41a396
je 0x41a369
imul ebp, dword [rbp], 0x534e5a5f
je 0x41a35f
xor bl, byte [rdi + 0x4d]
jns 0x41a395
pop rdi
je 0x41a398
jb 0x41a3a0
jae 0x41a3b2
insb byte [rdi], dx
je 0x41a39f
je 0x41a3bb
jo 0x41a3a9
push r11
je 0x41a37a
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41a3b4
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41a3c8
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x76], 0x45324345
jbe 0x41a36b
pop rdi
pop rdx
push rbx
push r11
je 0x41a3aa
je 0x41a3de
jb 0x41a3dd
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41a3ea
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41a403
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41a3da
jo 0x41a409
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41a3e7
jbe 0x41a418
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x41a432
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41a400
xor ebp, dword [rbp + 0x6f]
jbe 0x41a439
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41a418
je 0x41a44c
jb 0x41a44b
xor al, byte fs:[r13 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41a426
xor bl, byte [rdi + 0x5f]
je 0x41a45b
push 0x65706c65
jb 0x41a44c
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41a451
jae 0x41a476
push r11
je 0x41a446
xor al, 0x64
jne 0x41a488
je 0x41a47d
insb byte [rdi], dx
je 0x41a489
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41a466
xor dword [rdi + 0x54], ebx
jne 0x41a4aa
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x41a4a1
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41a489
xor bl, byte [rdi + 0x44]
jae 0x41a4d2
jb 0x41a4cf
jns 0x41a4c1
jne 0x41a4dd
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x41a4e6
jb 0x41a4e3
jns 0x41a4bf
push rax
push rbx
je 0x41a4b2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a4f1
movsxd rbx, dword [rdi + 0x73]
je 0x41a4ff
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a4fa
je 0x41a50f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41a503
pop rdi
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41a4f0
jbe 0x41a521
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41a4f8
jo 0x41a527
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x41a4dd
pop rdi
pop rdx
push r11
je 0x41a51a
jbe 0x41a54b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41a522
jo 0x41a551
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x41a507
pop rdi
pop rdx
push rbx
je 0x41a53e
xor dword [rdi + 0x54], ebx
jne 0x41a582
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x41a599
jo 0x41a59c
je 0x41a56f
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41a5a2
je 0x41a597
insb byte [rdi], dx
je 0x41a5a3
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41a5c6
push r8
push rbx
je 0x41a594
je 0x41a5c8
jb 0x41a5c7
push rdx
push r11
je 0x41a59c
xor ebp, dword [rbp + 0x6f]
jbe 0x41a5d5
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41a5b8
xor byte [rbx + 0x68], dh
jb 0x41a5f2
pop rdi
jo 0x41a605
jb 0x41a5dc
push rbx
je 0x41a5cd
je 0x41a601
jb 0x41a600
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41a610
pop rdi
jae 0x41a60e
xor dword [r9 + 0x4e], ecx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x41a624
push r11
je 0x41a5ed
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a634
push rax
jbe 0x41a645
jbe 0x41a617
jbe 0x41a61c
push r11
pop rdi
push r12
pop rdi
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x41a65c
jo 0x41a65f
je 0x41a630
jbe 0x41a658
movsxd rsp, dword [rbp + 0x31]
xor dword [rdi + 0x72], esi
imul esi, dword [rbp + 0x53], 0x6e697274
push r8
movsxd rbp, dword [r13 + 0x62]
add byte [rdi + 0x5a], bl
push rbx
je 0x41a63c
xor al, 0x5f
push rbx
jo 0x41a66f
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x41a664
imul r14, qword [rax], 0x49615345
push rbx
je 0x41a65c
je 0x41a690
jb 0x41a68f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a667
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a6ae
push rax
jbe 0x41a6bf
jbe 0x41a691
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
je 0x41a6a2
push rdx
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41a699
xor dword [rdi + 0x54], ebx
jne 0x41a6dd
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41a6ae
xor al, 0x64
jne 0x41a6f0
je 0x41a6e5
insb byte [rdi], dx
je 0x41a6f1
xor qword [r8], rsi
jne 0x41a706
jo 0x41a709
je 0x41a6dc
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41a6e1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41a71a
je 0x41a72f
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x41a71e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a75d
movsxd rbx, dword [rdi + 0x73]
je 0x41a76b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a766
je 0x41a77b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41a754
pop rdi
push rbx
jo 0x41a787
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41a793
pop rdi
jae 0x41a799
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41a79d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41a7ba
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41a78e
xor bl, byte [rdi + 0x5f]
je 0x41a7c3
push 0x65706c65
jb 0x41a7b4
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41a7a3
xor al, 0x64
jne 0x41a7e5
je 0x41a7da
insb byte [rdi], dx
je 0x41a7e6
cmp qword [r9 + 0x6e], rcx
jo 0x41a7fc
je 0x41a7cf
imul ebp, dword [rbp + 0x45], 0x52454549
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41a7c9
xor dword [rdi + 0x54], ebx
jne 0x41a80d
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x41a804
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x41a831
jo 0x41a834
je 0x41a805
jbe 0x41a82d
movsxd rsp, dword [rbp + 0x31]
xor byte [rsi + 0x6c], ah
jne 0x41a83f
push 0x6279614d
jbe 0x41a7d5
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41a851
jo 0x41a854
je 0x41a825
jbe 0x41a84d
movsxd rsp, dword [rbp + 0x39]
ja 0x41a85b
imul esi, dword [rbp + 0x43], 0x45726168
movsxd rax, dword [rax]
pop rdi
pop rdx
push r11
je 0x41a831
jb 0x41a862
je 0x41a865
jb 0x41a84b
push rbx
je 0x41a839
jo 0x41a868
imul esi, dword [rdx + 0x49], 0x45456964
movsxd rbp, dword [rbp + rax*2 + 0x52]
push r11
xor dword [rdi + 0x53], ebx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41a856
outsw dx, word [rsi]
jb 0x41a89a
jb 0x41a88a
push r10
jbe 0x41a8a1
push r12
pop rdi
push rdx
push rbx
je 0x41a866
jb 0x41a89d
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41a8a1
pop rdi
jb 0x41a8a4
jb 0x41a8a8
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x41a8bf
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41a88a
je 0x41a8a4
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x41a8da
jo 0x41a8dd
je 0x41a8b0
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41a8e3
je 0x41a8d8
insb byte [rdi], dx
je 0x41a8e4
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41a8bc
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41a8e3
pop rax
push rsp
pop rdi
push r11
je 0x41a8d6
je 0x41a918
jo 0x41a911
jo 0x41a8ff
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41a924
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41a8f2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41a933
push rbx
je 0x41a90a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41a949
movsxd rbx, dword [rdi + 0x73]
je 0x41a957
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41a952
je 0x41a967
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41a947
xor al, 0x5f
push rbx
jo 0x41a97a
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x41a96f
imul r14, qword [rax], 0x49615345
push rbx
je 0x41a967
je 0x41a99b
jb 0x41a99a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41a972
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41a9b9
push rax
jbe 0x41a9ca
jbe 0x41a99c
xor dword [rbp + 0x45], eax
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41a99c
xor dword [rdi + 0x54], ebx
jne 0x41a9e0
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41a9b1
xor al, 0x64
jne 0x41a9f3
je 0x41a9e8
insb byte [rdi], dx
je 0x41a9f4
cmp byte [r13 + 0x73], dl
je 0x41a9d9
jae 0x41a9fe
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push rbx
je 0x41a9eb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41aa2a
movsxd rbx, dword [rdi + 0x73]
je 0x41aa38
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41aa33
je 0x41aa48
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41aa21
xor dword [rdi + 0x54], ebx
jne 0x41aa65
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x41aa7c
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41aa48
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41aa81
je 0x41aa96
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41aa65
je 0x41aa99
jb 0x41aa98
cmp byte fs:[r13 + 0x61], r13b
js 0x41aa9b
jae 0x41aaa7
jp 0x41aaa5
push r10
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x41aa84
je 0x41aab8
jb 0x41aab7
cmp byte fs:[rdx + 0x6f], ch
imul ebp, dword [rsi + 0x61], 0x45656c62
jbe 0x41aa60
pop rdi
je 0x41aac7
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41aad0
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x41aaac
xor al, 0x5f
je 0x41aae5
jb 0x41aae1
movsxd rbp, dword [rdi + 0x6d]
jo 0x41aae6
jbe 0x41aaea
insb byte [rdi], dx
push r11
je 0x41aac5
jb 0x41aaf6
je 0x41aaf9
jb 0x41aadf
push rbx
je 0x41aacd
jo 0x41aafc
imul esi, dword [rdx + 0x49], 0x45456964
movsxd r13, dword [r9 + rcx*2 + 0x4e]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41ab1e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
xor al, 0x5f
push rbx
je 0x41aafa
jbe 0x41ab2b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
xor al, 0x5f
push rsp
pop rdi
push rdx
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x41ab1d
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41ab41
xor dword [rax], esi
jne 0x41ab71
jo 0x41ab74
je 0x41ab47
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41ab7a
je 0x41ab6f
insb byte [rdi], dx
je 0x41ab7b
push r11
xor byte [rdi + 0x45], bl
jo 0x41ab92
jbe 0x41ab21
pop rdi
pop rdx
push rbx
je 0x41ab58
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41ab99
push rbx
je 0x41ab70
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41abaf
movsxd rbx, dword [rdi + 0x73]
je 0x41abbd
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41abb8
je 0x41abcd
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x41ab84
pop rdi
pop rdx
push rbx
je 0x41abbc
xor ebx, dword [rdi + 0x53]
jo 0x41abee
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41abfa
pop rdi
jo 0x41ac0d
jb 0x41abfa
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41abdd
je 0x41ac11
jb 0x41ac10
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41abe8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ac2f
push rax
jbe 0x41ac40
jbe 0x41ac12
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ac3f
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41ac5c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor dword [r13 + 0x53], eax
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41ac3a
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41ac74
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41ac88
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x43], 0x69694531
add byte [rdi + 0x5a], bl
push rbx
je 0x41ac63
imul ebp, dword [rsi + 0x64], 0x32745349
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41aca3
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41acb7
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x4a], 0x36327453
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41acda
outsb dx, byte gs:[rsi]
je 0x41acd2
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
push rbx
je 0x41acc5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6c65685f
jo 0x41ad05
jb 0x41aceb
pop rax
jae 0x41ad17
push rbx
je 0x41acdd
pop rdi
pop rdi
outsd dx, dword [rsi]
jb 0x41ad0c
push rbx
je 0x41ace3
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push rbx
je 0x41acf8
movsxd rsp, dword gs:[rcx + 0x79]
push r12
pop rdi
xor al, 0x74
jns 0x41ad40
push r11
je 0x41ad0d
imul esi, dword [rbx + 0x5f], 0x6d756e65
push r11
pop r15
xor eax, 0x756c6176
push r11
cmp byte [rdi + 0x4a], bl
jo 0x41ad46
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41ad6a
push r11
cmp byte [rdi + 0x44], bl
jo 0x41ad52
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41ad3d
xor bl, byte [rdi + 0x5f]
je 0x41ad72
push 0x65706c65
jb 0x41ad63
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41ad52
xor al, 0x64
jne 0x41ad94
je 0x41ad89
insb byte [rdi], dx
je 0x41ad95
cmp byte [r13 + 0x73], dl
je 0x41ad7a
jae 0x41ad9f
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41ad77
xor dword [rdi + 0x54], ebx
jne 0x41adbb
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x41adb2
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41ad9e
je 0x41ade0
jo 0x41add9
push rax
xor dword [rdx], esi
jne 0x41adea
jo 0x41aded
je 0x41adbe
jbe 0x41ade6
movsxd rsp, dword [rbp + 0x53]
je 0x41adb3
xor al, 0x64
jne 0x41adf5
je 0x41adea
insb byte [rdi], dx
je 0x41adf6
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x41adea
jo 0x41ae19
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41ae06
je 0x41ae34
jb 0x41ae3e
imul ebp, dword [rsi + 0x61], 0x40766574
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x41ae1c
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41ae5b
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x41ae75
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41ae48
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41ae89
push r11
je 0x41ae5e
je 0x41ae92
jb 0x41ae91
push rbx
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41aeb9
je 0x41ae8a
jbe 0x41aeb2
movsxd rsp, dword [rbp + 0x31]
xor esi, dword [rdx + 0x65]
push rbx
imul esp, dword [rdi + 0x6e], 0x6e496465
je 0x41aea4
imul eax, dword [rbp + 0x45], 0x5f545262
movsxd rax, dword [rax]
pop rdi
pop rdx
push r11
je 0x41ae9c
xor al, 0x70
jb 0x41aed8
outsd dx, dword [rsi]
jb 0x41aedb
je 0x41aeed
pop rdi
jno 0x41aeec
jne 0x41aedf
push r11
je 0x41aeb2
jo 0x41aee1
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41aebf
jbe 0x41aef0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x41aed5
jb 0x41af06
je 0x41af09
jb 0x41aeef
push rbx
xor dword [rdi + 0x45], ebx
xor eax, 0x74706d65
jns 0x41aef7
jbe 0x41aeb4
pop rdi
pop rdx
push rbx
push rbx
je 0x41aef4
je 0x41af28
jb 0x41af27
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41aeff
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41af46
push rax
jbe 0x41af57
jbe 0x41af29
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41af23
xor bl, byte [rdi + 0x5f]
je 0x41af58
push 0x65706c65
jb 0x41af49
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41af38
xor al, 0x64
jne 0x41af7a
je 0x41af6f
insb byte [rdi], dx
je 0x41af7b
xor qword [r10], rsi
jne 0x41af90
jo 0x41af93
je 0x41af64
jbe 0x41af8c
movsxd rsp, dword [rbp + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41af62
xor dword [rdi + 0x54], ebx
jne 0x41afa6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x41af9d
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41af8a
je 0x41afbe
jb 0x41afbd
xor ch, byte fs:[rcx + 0x64]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x41af9a
xor al, 0x5f
pop rdi
jae 0x41afd6
jb 0x41afd6
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41afc2
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41afe1
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41affe
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rdi + rbx*2], esi
pop r15
je 0x41afff
insb byte [rdi], dx
je 0x41b00b
jb 0x41afed
push rdx
push r11
je 0x41afe6
je 0x41b028
jo 0x41b016
pop rdi
imul ebp, dword [rsi + 0x66], 0x5a5f006f
xor qword [rax], r14
jne 0x41b033
jo 0x41b036
je 0x41b009
imul ebp, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b034
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41b03d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b031
push rbx
je 0x41b01f
jo 0x41b04e
imul esi, dword [rdx + 0x49], 0x45456964
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41b032
movsxd rbp, dword [rdi + 0x70]
jns 0x41b04c
push rax
movsxd rdx, dword [rbx + 0x30]
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b07e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41b087
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b07b
push rbx
je 0x41b06c
je 0x41b0a0
jb 0x41b09f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b077
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b0be
push rax
jbe 0x41b0cf
jbe 0x41b0a1
xor al, byte [r13 + 0x52]
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rsp
push rsi
cmp dword [rcx + 0x6e], ecx
jo 0x41b0e7
je 0x41b0ba
imul ebp, dword [rbp], 0x314e5a5f
xor cl, byte [rdi + 0x75]
je 0x41b0f1
jne 0x41b0f7
jbe 0x41b0f0
movsxd rsp, dword [rbp + 0x31]
cmp byte [rdi + 0x72], dh
imul esi, dword [rbp + 0x46], 0x74616f6c
imul ebp, dword [rsi + 0x67], 0x6e696f50
je 0x41b0e7
push r8
movsxd rdx, dword [rdi + rbx*2 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41b0e0
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41b11f
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41b0f3
xor al, 0x64
jne 0x41b135
je 0x41b12a
insb byte [rdi], dx
je 0x41b136
cmp byte [r13 + 0x73], dl
je 0x41b11b
jae 0x41b140
xor dword [rbp + 0x45], eax
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b124
xor al, 0x70
jb 0x41b160
outsd dx, dword [rsi]
jb 0x41b163
je 0x41b175
pop rdi
jno 0x41b174
jne 0x41b167
push r11
je 0x41b13a
jo 0x41b169
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41b147
jbe 0x41b178
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x41b15d
jb 0x41b18e
je 0x41b191
jb 0x41b177
push rbx
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
pop rdi
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b1a9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41b1b2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b1a6
push rbx
je 0x41b194
jo 0x41b1c3
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41b1ac
imul esi, dword [rbx + 0x69], 0x64666e
pop rdi
pop rdx
push r11
je 0x41b1b6
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41b1da
cmp byte [rbp + 0x73], dl
je 0x41b1da
jae 0x41b1ff
push rbx
je 0x41b1ce
xor al, 0x64
jne 0x41b210
je 0x41b205
insb byte [rdi], dx
je 0x41b211
push r11
xor byte [rdi + 0x45], bl
jo 0x41b228
jbe 0x41b1b7
pop rdi
pop rdx
push rbx
je 0x41b1ee
xor al, 0x5f
pop rdi
jae 0x41b22a
jb 0x41b22a
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41b216
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b235
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41b252
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4e]
push rbx
je 0x41b228
je 0x41b25c
jb 0x41b25b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b233
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b27a
push rax
jbe 0x41b28b
jbe 0x41b25d
push r11
push r11
pop rdi
push r11
pop r15
push r11
je 0x41b25d
cmp dword [rdi + 0x53], ebx
jo 0x41b290
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41b2a0
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x41b29a
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41b286
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41b2c5
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x41b2e0
je 0x41b2b3
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b2ed
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41b2f6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b2ea
push rbx
je 0x41b2dc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b31b
movsxd rbx, dword [rdi + 0x73]
je 0x41b329
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b324
je 0x41b339
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x41b2e5
pop rdi
pop rdx
push rbx
je 0x41b31c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41b35d
push r11
je 0x41b330
jo 0x41b35f
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x41b374
push rsp
jo 0x41b377
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b367
jbe 0x41b324
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41b3a0
jo 0x41b3a3
je 0x41b374
jbe 0x41b39c
movsxd rsp, dword [rbp + 0x35]
ja 0x41b3aa
imul esi, dword [rbp + 0x49], 0x534e4b52
je 0x41b379
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b3b8
movsxd rbx, dword [rdi + 0x73]
je 0x41b3c6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b3c1
je 0x41b3d6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x4b]
movsxd rcx, dword [rcx + 0x45]
push rbx
je 0x41b3b9
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41b3c1
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41b409
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41b3fa
outsw dx, word [rsi]
jb 0x41b43e
jb 0x41b42e
push r11
je 0x41b402
jo 0x41b431
imul esi, dword [rdx + 0x49], 0x45456964
push r12
pop rdi
push rdx
push rbx
je 0x41b410
jb 0x41b447
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41b44b
pop rdi
jb 0x41b44e
jb 0x41b452
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x41b469
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41b466
jno 0x41b44c
push rax
push rbx
je 0x41b43d
je 0x41b471
jb 0x41b470
push rdx
push r11
je 0x41b445
xor ebp, dword [rbp + 0x6f]
jbe 0x41b47e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b461
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b49a
je 0x41b4af
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x41b47f
je 0x41b4b3
jb 0x41b4b2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41b48a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41b4d1
push rax
jbe 0x41b4e2
jbe 0x41b4b4
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41b4ee
jb 0x41b4f1
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push rbx
pop rdi
jbe 0x41b4dd
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x41b4e3
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41b4cf
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41b50e
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x41b528
jo 0x41b52b
je 0x41b4fc
jbe 0x41b524
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b506
xor ebp, dword [rbp + 0x6f]
jbe 0x41b53f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41b51e
je 0x41b552
jb 0x41b551
jo 0x41b561
jbe 0x41b4f4
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b55d
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x41b539
xor eax, 0x74695f5f
jb 0x41b56f
movsxd rbp, dword [rdi + 0x6d]
jo 0x41b574
jbe 0x41b578
insb byte [rdi], dx
push r11
je 0x41b553
jb 0x41b584
je 0x41b587
jb 0x41b56d
push rbx
je 0x41b55b
jo 0x41b58a
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor byte [rdi + 0x31], bl
xor al, 0x5f
je 0x41b5a1
jb 0x41b59d
movsxd rbp, dword [rdi + 0x6d]
jo 0x41b5a2
jbe 0x41b5a6
insb byte [rdi], dx
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x41b587
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41b5c8
push r11
je 0x41b59b
jo 0x41b5ca
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x41b5df
push rsp
jo 0x41b5e2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b5d2
jbe 0x41b58f
pop rdi
pop rdx
ja 0x41b606
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [rip + 0x64634b5f], esi
jbe 0x41b5eb
jo 0x41b5f8
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b5e2
xor dword [rdi + 0x5f], ebx
jo 0x41b62b
jae 0x41b620
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b625
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41b63e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41b615
jo 0x41b644
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41b622
jbe 0x41b653
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insb byte [rdi], dx
push rbx
xor ebx, dword [rdi + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x41b681
xor dword [rdi + rbx*2], esi
je 0x41b679
jb 0x41b675
movsxd rbp, dword [rdi + 0x6d]
jo 0x41b67a
jbe 0x41b67e
insb byte [rdi], dx
push r11
je 0x41b659
jb 0x41b68a
je 0x41b68d
jb 0x41b673
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41b687
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop rdi
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop r15
jae 0x41b6bb
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x41b688
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41b6d9
outsb dx, byte gs:[rsi]
je 0x41b6d1
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x69]
jbe 0x41b6d8
push r10
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41b716
je 0x41b6e7
jbe 0x41b70f
movsxd rsp, dword [rbp + 0x34]
jb 0x41b710
push r8
js 0x41b71a
push rbx
je 0x41b6f2
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x41b6fa
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
jae 0x41b753
push rbx
je 0x41b715
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
xor byte [rdi + 0x45], bl
xor eax, 0x756c6176
xor al, 0x74
jns 0x41b772
push r11
xor al, 0x5f
push rbx
pop rdi
jo 0x41b75c
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41b749
je 0x41b763
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41b769
jae 0x41b78e
push rbx
je 0x41b75d
xor al, 0x64
jne 0x41b79f
je 0x41b794
insb byte [rdi], dx
je 0x41b7a0
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41b779
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41b7a0
pop rax
push rsp
pop rdi
push r11
je 0x41b793
je 0x41b7d5
jo 0x41b7ce
jo 0x41b7bc
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41b7e1
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41b7b0
xor dword [rdi + 0x54], ebx
jne 0x41b7f4
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x41b80b
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b7db
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41b81c
push rbx
je 0x41b7f3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41b832
movsxd rbx, dword [rdi + 0x73]
je 0x41b840
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41b83b
je 0x41b850
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x41b807
pop rdi
pop rdx
push rbx
je 0x41b83d
pop rdi
pop rdi
je 0x41b879
jb 0x41b882
ja 0x41b874
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x41b869
outsw dx, word [rsi]
jb 0x41b8ad
jb 0x41b89d
push r11
je 0x41b86f
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41b8c0
outsb dx, byte gs:[rsi]
je 0x41b8b8
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
push r12
pop rdi
push rdx
push rbx
je 0x41b8ae
jb 0x41b8e5
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41b8e9
pop rdi
jb 0x41b8ec
jb 0x41b8f0
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x41b907
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41b8d1
xor bl, byte [rdi + 0x5f]
jne 0x41b912
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41b92d
pop rdi
push r11
je 0x41b8eb
xor ebp, dword [rbp + 0x6f]
jbe 0x41b924
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41b901
jo 0x41b930
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x6153525f
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x41b928
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41b967
insd dword [rdi], dx
xor byte [rbp + 0x53], al
je 0x41b93c
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41b98d
outsb dx, byte gs:[rsi]
je 0x41b985
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor byte [rbp + 0x45], al
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41b98b
jae 0x41b9d0
jo 0x41b9a5
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41b9d7
je 0x41b9aa
imul ebp, dword [rbp + 0x45], 0x5f545276
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41b9d9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41b9e2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41b9d6
push rbx
je 0x41b9c4
jo 0x41b9f3
imul esi, dword [rdx + 0x49], 0x45456964
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x41ba13
jb 0x41ba16
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x49]
push rdx
push rdx
imul eax, dword [rbp + 0x45], 0x54507645
pop rdi
jo 0x41ba05
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41b9f1
xor byte [rbx + 0x68], dh
jb 0x41ba2b
pop rdi
jo 0x41ba3e
jb 0x41ba15
push rbx
je 0x41ba06
je 0x41ba3a
jb 0x41ba39
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ba11
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ba58
push rax
jbe 0x41ba69
jbe 0x41ba3b
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41ba36
xor byte [rbx + 0x68], dh
jb 0x41ba70
pop rdi
jo 0x41ba83
jb 0x41ba5a
push rbx
je 0x41ba4b
je 0x41ba7f
jb 0x41ba7e
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41ba8e
pop rdi
jae 0x41ba8c
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x41ba66
pop rdi
push rbx
jo 0x41ba99
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41baa5
pop rdi
jae 0x41baab
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41baaf
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41bacc
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41bab2
jae 0x41bad7
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41bae0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41bae9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41badd
push rbx
je 0x41bacb
jo 0x41bafa
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41bae0
je 0x41bb22
jo 0x41bb1b
push r8
jbe 0x41bb2c
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41baf9
xor bl, byte [rdi + 0x5f]
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
jae 0x41bb3a
jb 0x41bb3a
pop rdi
jb 0x41bb49
insd dword [rdi], dx
pop rdi
je 0x41bb46
imul esi, dword [rbx + 0x5f], 0x706c6568
jb 0x41bb31
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41bb50
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41bb6d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
jbe 0x41bb5a
push r11
je 0x41bb3d
xor al, 0x5f
pop rdi
jae 0x41bb79
jb 0x41bb79
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41bb65
pop rax
push rsp
pop rdi
jp 0x41bb23
pop rdi
pop rdx
push rbx
je 0x41bb5a
pop rdi
push rbx
jo 0x41bb8d
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41bb99
pop rdi
jae 0x41bb9f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41bba3
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41bbc0
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x41bbd6
jb 0x41bbd3
jns 0x41bbab
jbe 0x41bb68
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41bbb4
jae 0x41bbd9
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41bbe2
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41bbfb
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41bbd4
je 0x41bc08
jb 0x41bc07
push rbx
je 0x41bbdd
jbe 0x41bc0e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41bbfa
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41bc3b
push r11
je 0x41bc10
je 0x41bc44
jb 0x41bc43
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x41bbfb
pop rdi
pop rdx
push rbx
je 0x41bc32
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41bc71
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41bc45
xor al, 0x64
jne 0x41bc87
je 0x41bc7c
insb byte [rdi], dx
je 0x41bc88
cmp byte [r13 + 0x73], dl
je 0x41bc6d
jae 0x41bc92
xor dword [rbp + 0x45], eax
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41bca8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41bcb1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41bca5
push rbx
je 0x41bc96
je 0x41bcca
jb 0x41bcc9
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41bca1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41bce8
push rax
jbe 0x41bcf9
jbe 0x41bccb
xor dword [r13 + 0x52], eax
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x41bccb
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41bcef
xor dword [rax], esi
jne 0x41bd1f
jo 0x41bd22
je 0x41bcf5
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41bd28
je 0x41bd1d
insb byte [rdi], dx
je 0x41bd29
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x41bd14
jbe 0x41bcd1
pop rdi
pop rdx
push rsp
push rbx
xor dword [rdx], esi
jne 0x41bd4e
jo 0x41bd51
je 0x41bd22
jbe 0x41bd4a
movsxd rsp, dword [rbp]
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41bd62
je 0x41bd33
jbe 0x41bd5b
movsxd rsp, dword [rbp + 0x34]
jb 0x41bd5c
push r10
imul edx, dword [rbx + 0x31], 0x4545495f
push rbx
je 0x41bd40
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x41bd8a
jb 0x41bd4a
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x41bda5
jb 0x41bd87
je 0x41bd67
xor al, 0x69
jae 0x41bd99
movsxd rbp, dword [rdi + 0x6e]
jbe 0x41bda4
jb 0x41bdb5
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x41bdb0
insb byte [rdi], dx
jne 0x41bdb7
xor al, 0x74
jns 0x41bdc9
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x41bdb5
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x41bda7
jo 0x41bdd6
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41bdff
je 0x41bdd0
jbe 0x41bdf8
movsxd rsp, dword [rbp + 0x43]
xor al, byte [rbp + 0x50]
movsxd rdx, dword [r11 + 0x31]
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x41bdd3
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41bdf7
cmp byte [rbp + 0x73], dl
je 0x41bdf7
jae 0x41be1c
push rbx
je 0x41bdeb
xor al, 0x64
jne 0x41be2d
je 0x41be22
insb byte [rdi], dx
je 0x41be2e
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x41be19
jbe 0x41bdd6
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41be54
je 0x41be25
jbe 0x41be4d
movsxd rsp, dword [rbp + 0x31]
xor esi, dword [rdx + 0x65]
push rbx
imul esp, dword [rdi + 0x6e], 0x6e496465
je 0x41be3f
js 0x41be3d
push rdx
push rsp
pop rdi
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x41be37
xor ebx, dword [rdi + 0x53]
jo 0x41be69
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41be75
pop rdi
jo 0x41be88
jb 0x41be75
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41be58
je 0x41be8c
jb 0x41be8b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41be63
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41beaa
push rax
jbe 0x41bebb
jbe 0x41be8d
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41beba
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41bed7
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
cmp byte [rdi + 0x4d], bl
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rax, dword [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41bebe
je 0x41bef2
jb 0x41bef1
xor cl, byte fs:[r9 + 0x52]
jbe 0x41bf0b
push r12
pop rdi
jo 0x41beef
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41bedb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41bf14
je 0x41bf29
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41bef8
je 0x41bf2c
jb 0x41bf2b
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor dword [rdi + 0x50], ebx
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x41bf36
xor dword [rdi + 0x54], ebx
jne 0x41bf7a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41bf92
je 0x41bf65
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41bf98
je 0x41bf8d
insb byte [rdi], dx
je 0x41bf99
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push r11
je 0x41bf88
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41bfc7
movsxd rbx, dword [rdi + 0x73]
je 0x41bfd5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41bfd0
je 0x41bfe5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x74735f63
jb 0x41bfcc
jbe 0x41bfc9
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c002
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41c00b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41bfff
push rbx
je 0x41bfef
je 0x41c023
jb 0x41c022
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41c03a
jb 0x41c03d
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x49], ebx
push rdx
jbe 0x41c049
jbe 0x41c029
push rsp
pop rdi
jo 0x41c02d
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c01d
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x41c067
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x41c076
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41c094
outsb dx, byte gs:[rsi]
je 0x41c08c
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x49], ecx
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x41c0aa
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41c0aa
jae 0x41c0cf
xor eax, 0x766c6f73
jbe 0x41c073
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41c0ef
jo 0x41c0f2
je 0x41c0c3
jbe 0x41c0eb
movsxd rsp, dword [rbp + 0x35]
ja 0x41c0f9
imul esi, dword [rbp + 0x49], 0x5f394152
movsxd rsp, dword [r11 + 0x4a]
push rbx
je 0x41c0d3
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41c0db
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41c123
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41c154
jo 0x41c157
je 0x41c137
je 0x41c158
imul ebp, dword [rsi + 0x67], 0x76453044
add byte [rdi + 0x5a], bl
push rbx
je 0x41c12a
jbe 0x41c15b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41c134
je 0x41c168
jb 0x41c167
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x41c17e
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r10
jbe 0x41c196
jbe 0x41c16a
jo 0x41c177
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c162
xor dword [rdi + 0x54], ebx
jne 0x41c1a6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41c177
xor al, 0x64
jne 0x41c1b9
je 0x41c1ae
insb byte [rdi], dx
je 0x41c1ba
xor qword [r10], rsi
jne 0x41c1cf
jo 0x41c1d2
je 0x41c1a3
jbe 0x41c1cb
movsxd rsp, dword [rbp + 0x45]
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c1ac
jae 0x41c1f1
jo 0x41c1c6
push rax
xor dword [rax], esi
jne 0x41c1f7
jo 0x41c1fa
je 0x41c1cd
imul ebp, dword [rbp + 0x45], 0x5f545276
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41c1ca
xor byte [rbx + 0x68], dh
jb 0x41c204
pop rdi
jo 0x41c217
jb 0x41c1ee
push rbx
je 0x41c1df
je 0x41c213
jb 0x41c212
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41c222
pop rdi
jae 0x41c220
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41c1f9
xor dword [rdi + 0x54], ebx
jne 0x41c23d
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41c224
jae 0x41c249
push rbx
je 0x41c218
xor al, 0x64
jne 0x41c25a
je 0x41c24f
insb byte [rdi], dx
je 0x41c25b
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41c250
push r12
pop rdi
jo 0x41c261
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x41c24e
xor al, 0x64
jne 0x41c290
je 0x41c285
insb byte [rdi], dx
je 0x41c291
cmp qword [r9 + 0x6e], rcx
jo 0x41c2a7
je 0x41c27a
imul ebp, dword [rbp + 0x45], 0x50456c63
push rbx
xor byte [rdi], bl
jae 0x41c2b6
jb 0x41c2b0
outsb dx, byte gs:[rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x41c28a
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x41c2c0
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c2ca
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x50], al
movsxd rdx, dword [rbx + 0x30]
pop rdi
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
insd dword [rdi], dx
insd dword [rdi], dx
movsxd rbp, dword [rbp + 0x70]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x41c2fd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41c306
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41c2fa
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x41c2c2
pop rdi
pop rdx
push rbx
je 0x41c2fe
outsw dx, word [rsi]
jb 0x41c342
jb 0x41c332
push r10
xor dword [r15 + rbx*2], esi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41c310
jb 0x41c347
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c34b
pop rdi
jb 0x41c34e
jb 0x41c352
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41c369
add byte gs:[r15 + 0x5a], r11b
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41c366
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41c37f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41c356
jo 0x41c385
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41c363
jbe 0x41c394
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x62
jae 0x41c3aa
jbe 0x41c348
pop rdi
pop rdx
push rbx
je 0x41c37f
xor al, 0x70
jb 0x41c3bb
outsd dx, dword [rsi]
jb 0x41c3be
je 0x41c3d0
pop rdi
jno 0x41c3cf
jne 0x41c3c2
push r11
je 0x41c395
jo 0x41c3c4
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41c3a2
jbe 0x41c3d3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x41c3b8
jb 0x41c3e9
je 0x41c3ec
jb 0x41c3d2
push rbx
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41c3ca
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41c3ee
cmp byte [rbp + 0x73], dl
je 0x41c3ee
jae 0x41c413
push rbx
je 0x41c3e2
xor al, 0x64
jne 0x41c424
je 0x41c419
insb byte [rdi], dx
je 0x41c425
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x41c408
jo 0x41c437
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41c45e
jo 0x41c461
je 0x41c432
jbe 0x41c45a
movsxd rsp, dword [rbp + 0x35]
ja 0x41c468
imul esi, dword [rbp + 0x49], 0x34314152
pop rdi
movsxd rsp, dword [r9 + r9*2 + 0x63]
push rbx
je 0x41c444
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41c44c
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41c494
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41c481
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41c4bb
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41c4cf
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x43], 0x69694532
add byte [rdi + 0x5a], bl
push rbx
je 0x41c4ad
outsw dx, word [rsi]
jb 0x41c4f1
jb 0x41c4e1
push r11
je 0x41c4b3
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41c4ed
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41c501
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x525f544f
push rbx
je 0x41c4d7
jb 0x41c50e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c512
pop rdi
jb 0x41c515
jb 0x41c519
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x41c530
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41c4ff
outsw dx, word [rsi]
jb 0x41c543
jb 0x41c533
push r10
push r12
pop rdi
push rdx
push rbx
je 0x41c50c
jb 0x41c543
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c547
pop rdi
jb 0x41c54a
jb 0x41c54e
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x41c565
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41c52f
xor dword [rdi + 0x54], ebx
jne 0x41c573
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41c544
xor al, 0x64
jne 0x41c586
je 0x41c57b
insb byte [rdi], dx
je 0x41c587
xor qword [r8], rsi
jne 0x41c59c
jo 0x41c59f
je 0x41c572
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
insb byte [rdi], dx
outsd dx, dword [rsi]
jae 0x41c545
pop rdi
pop rdx
push rbx
je 0x41c57c
xor bl, byte [rdi + 0x5f]
jae 0x41c5b8
jb 0x41c5b8
pop rdi
jo 0x41c5cb
jb 0x41c5a2
push rbx
je 0x41c593
je 0x41c5c7
jb 0x41c5c6
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41c5d6
pop rdi
jae 0x41c5d4
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c5d8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41c5f5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c5fc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41c615
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41c5ee
je 0x41c622
jb 0x41c621
push rbx
je 0x41c5f7
jbe 0x41c628
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rbp + 0x61], ch
imul ebp, dword [rsi], 0x74535a5f
xor al, 0x73
ja 0x41c658
jo 0x41c642
push rax
push rbx
je 0x41c631
jo 0x41c660
imul esi, dword [rdx + 0x49], 0x45456964
jbe 0x41c65a
push rsp
pop rdi
push rbx
xor al, 0x5f
add byte [rbp + 0x73], dh
je 0x41c656
outsd dx, dword [rsi]
jne 0x41c684
je 0x41c618
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41c694
jo 0x41c697
je 0x41c668
jbe 0x41c690
movsxd rsp, dword [rbp + 0x35]
ja 0x41c69e
imul esi, dword [rbp + 0x49], 0x5f364152
movsxd rbp, dword [r9 + 0x4a]
push rdx
cmp dword [r15 + 0x53], ebx
xor dword [rdi + 0x63], ebx
push rbx
je 0x41c680
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41c688
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
cmp byte [rdi + 0x4f], bl
push rsp
xor byte [rdi + 0x44], bl
jo 0x41c6d0
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41c6bd
xor byte [rdi + 0x5f], bl
jne 0x41c6fe
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41c719
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x41c71a
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x41c72e
push r11
je 0x41c6ea
xor ebp, dword [rbp + 0x6f]
jbe 0x41c723
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41c704
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41c743
movsxd rbx, dword [rdi + 0x73]
je 0x41c751
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41c74c
je 0x41c761
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c747
je 0x41c761
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x41c797
jo 0x41c79a
je 0x41c76b
jbe 0x41c793
movsxd rsp, dword [rbp + 0x53]
je 0x41c760
xor al, 0x64
jne 0x41c7a2
je 0x41c797
insb byte [rdi], dx
je 0x41c7a3
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41c77c
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41c7a3
pop rax
push rsp
pop rdi
push r11
je 0x41c796
je 0x41c7d8
jo 0x41c7d1
jo 0x41c7bf
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41c7e4
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c7b3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41c7f4
push r11
je 0x41c7c7
jo 0x41c7f6
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x41c7b6
pop rdi
pop rdx
push rbx
je 0x41c7f2
je 0x41c826
jb 0x41c825
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41c835
pop rdi
jae 0x41c833
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41c80a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41c843
je 0x41c858
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x41c828
je 0x41c85c
jb 0x41c85b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41c833
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41c87a
push rax
jbe 0x41c88b
jbe 0x41c85d
jae 0x41c896
jb 0x41c893
jns 0x41c86f
push rbx
pop rdi
jbe 0x41c87f
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c86b
xor dword [rdi + 0x54], ebx
jne 0x41c8af
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41c880
xor al, 0x64
jne 0x41c8c2
je 0x41c8b7
insb byte [rdi], dx
je 0x41c8c3
cmp byte [r13 + 0x73], dl
je 0x41c8a8
jae 0x41c8cd
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41c8ad
xor dword [rdi + 0x5f], ebx
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x41c8d2
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41c8f0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41c909
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41c8e0
jo 0x41c90f
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41c8ed
jbe 0x41c91e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x41c948
xor dword [rip + 0x6574495f], esi
jb 0x41c93c
movsxd rbp, dword [rdi + 0x6d]
jo 0x41c941
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x41c952
je 0x41c955
jb 0x41c93b
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41c94f
pop rdi
push rbx
pop r15
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41c939
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x41c96f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41c979
pop rdi
xor byte [rbp + 0x50], al
movsxd rdx, dword [rbx + 0x30]
pop rdi
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41c964
xor bl, byte [rdi + 0x5f]
je 0x41c999
push 0x65706c65
jb 0x41c98a
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x41c9bf
jo 0x41c9c2
je 0x41c993
jbe 0x41c9bb
movsxd rsp, dword [rbp + 0x49]
push rbx
je 0x41c989
xor al, 0x64
jne 0x41c9cb
je 0x41c9c0
insb byte [rdi], dx
je 0x41c9cc
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41c9a7
xor dword [rdi + 0x54], ebx
jne 0x41c9eb
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x41c9e2
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41c9ca
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ca03
je 0x41ca18
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41c9e5
jo 0x41ca14
imul esi, dword [rdx + 0x49], 0x45456964
cmp byte [r13 + 0x61], r13b
js 0x41ca1f
jae 0x41ca2b
jp 0x41ca29
push r10
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x41ca09
je 0x41ca3d
jb 0x41ca3c
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ca14
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41ca5b
push rax
jbe 0x41ca6c
jbe 0x41ca3e
add byte [r15 + 0x5a], r11b
push rbx
je 0x41ca39
jbe 0x41ca6a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41ca43
je 0x41ca77
jb 0x41ca76
push rbx
push r11
xor byte [rdi + 0x45], bl
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x41ca24
pop rdi
pop rdx
push rbx
je 0x41ca5a
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x41ca6f
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41cad4
jo 0x41cac2
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41ca99
xor dword [rdi + 0x54], ebx
jne 0x41cadd
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x41caf4
jo 0x41caf7
je 0x41cac8
jbe 0x41caf0
movsxd rsp, dword [rbp + 0x53]
je 0x41cabd
xor al, 0x64
jne 0x41caff
je 0x41caf4
insb byte [rdi], dx
je 0x41cb00
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41cb2d
jo 0x41cb30
je 0x41cb01
jbe 0x41cb29
movsxd rsp, dword [rbp + 0x35]
ja 0x41cb37
imul esi, dword [rbp + 0x49], 0x5f364152
movsxd rbp, dword [r9 + 0x49]
push rdx
cmp dword [r15 + 0x53], ebx
xor dword [rdi + 0x63], ebx
push rbx
je 0x41cb19
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41cb21
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
cmp byte [rdi + 0x4f], bl
push rsp
xor byte [rdi + 0x44], bl
jo 0x41cb69
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41cb57
imul bp, word [rsp + rbp*2 + 0x49], 0x6350
movsxd rax, dword [rbp + 0x76]
push rsp
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41cb6e
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [r13 + 0x4e]
push rbx
je 0x41cb84
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41cbe9
jo 0x41cbd7
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41cbae
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41cbef
push rbx
xor dword fs:[r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41cbd3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41cc14
push r11
je 0x41cbe7
jo 0x41cc16
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41cc11
xor bl, byte [rdi + 0x5f]
jne 0x41cc52
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor dword [rbp + 0x45], eax
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41cc59
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41cc98
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x41cc82
jae 0x41cca7
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x41cc95
je 0x41ccc9
jb 0x41ccc8
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41cca2
xor byte [rdi + 0x5f], bl
je 0x41ccdd
jb 0x41cce6
ja 0x41ccd8
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41cce7
pop rdi
jb 0x41ccf5
outsd dx, dword [rsi]
jb 0x41ccd6
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x41ccce
je 0x41cce8
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x41cd1e
jo 0x41cd21
je 0x41ccf4
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41cd27
je 0x41cd1c
insb byte [rdi], dx
je 0x41cd28
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41cd01
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41cd28
pop rax
push rsp
pop rdi
push r11
je 0x41cd1b
je 0x41cd5d
jo 0x41cd56
jo 0x41cd44
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41cd69
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41cd38
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41cd77
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x41cd91
jo 0x41cd94
je 0x41cd65
jbe 0x41cd8d
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rsp
push rsi
push rbx
je 0x41cd72
pop rdi
push rbx
jo 0x41cda5
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41cdb1
pop rdi
jae 0x41cdb7
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41cdbb
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41cdd8
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x41cdac
jo 0x41cddb
imul esi, dword [rdx + 0x49], 0x43456964
xor cl, byte [rcx + 0x52]
push rdx
imul esi, dword [rsi + 0x45], 0x5f544f45
push r12
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41cdfb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41ce04
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41cdf8
push rbx
je 0x41cde6
jo 0x41ce15
imul esi, dword [rdx + 0x49], 0x45456964
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x41ce35
jb 0x41ce38
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x4a]
push rdx
push rdx
imul eax, dword [rbp + 0x45], 0x54507645
pop rdi
jo 0x41ce27
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41ce18
outsw dx, word [rsi]
jb 0x41ce5c
jb 0x41ce4c
push r10
push rax
cmp byte [rbp + 0x73], dl
je 0x41ce34
jae 0x41ce59
push r12
pop rdi
push rdx
push rbx
je 0x41ce2e
jb 0x41ce65
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41ce69
pop rdi
jb 0x41ce6c
jb 0x41ce70
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41ce87
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41ce51
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ce8a
je 0x41ce9f
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41ce6e
je 0x41cea2
jb 0x41cea1
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41ceba
jb 0x41cebd
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor byte [rdi + 0x49], bl
push rdx
jbe 0x41cec9
jbe 0x41ceab
push rbx
xor dword [rdi + 0x50], ebx
push rsp
pop rdi
jo 0x41ceb1
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41cee2
jo 0x41cee5
je 0x41ceb6
jbe 0x41cede
movsxd rsp, dword [rbp + 0x35]
ja 0x41ceec
imul esi, dword [rbp + 0x49], 0x5f334152
movsxd rdx, dword [r10 + 0x4b]
push rbx
je 0x41cec1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41cf00
movsxd rbx, dword [rdi + 0x73]
je 0x41cf0e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41cf09
je 0x41cf1e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x41cf02
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41cf0a
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41cf52
push rsp
xor dword [rdi], ebx
insd dword [rdi], dx
insd dword [rdi], dx
jae 0x41cf71
je 0x41cf4e
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x41cf53
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41cf77
xor dword [rdx], esi
jne 0x41cfa7
jo 0x41cfaa
je 0x41cf7b
jbe 0x41cfa3
movsxd rsp, dword [rbp + 0x53]
je 0x41cf70
xor al, 0x64
jne 0x41cfb2
je 0x41cfa7
insb byte [rdi], dx
je 0x41cfb3
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x41cf9e
jbe 0x41cf5b
pop rdi
pop rdi
jae 0x41cfcf
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x41cfa0
je 0x41cfba
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x41cff0
jo 0x41cff3
je 0x41cfc4
jbe 0x41cfec
movsxd rsp, dword [rbp + 0x53]
je 0x41cfb9
xor al, 0x64
jne 0x41cffb
je 0x41cff0
insb byte [rdi], dx
je 0x41cffc
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41cfd5
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41cffc
pop rax
push rsp
pop rdi
push r11
je 0x41cfef
je 0x41d031
jo 0x41d02a
jo 0x41d018
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41d03d
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d00b
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x41d041
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41d04b
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x50], al
movsxd rdx, dword [r8 + 0x63]
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41d038
xor ebp, dword [rbp + 0x6f]
jbe 0x41d071
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41d04e
jo 0x41d07d
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x53], eax
xor bl, byte [rdi]
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41d076
jae 0x41d09b
cmp byte [rdi + 0x65], ah
outsb dx, byte [rsi]
jb 0x41d09e
je 0x41d0a4
imul eax, dword [rax], 0x534e5a5f
je 0x41d07a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d0c1
push rax
jbe 0x41d0d2
jbe 0x41d0a4
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x4a], ebx
push r12
pop rdi
jo 0x41d0bf
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41d0f2
je 0x41d0c3
jbe 0x41d0eb
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x4c], 0x7265776f
movsxd r8, dword [r8]
pop rdi
pop rdx
push rsp
push rsi
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x41d10e
je 0x41d0df
jbe 0x41d107
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x41d0d8
xor byte [rbx + 0x68], dh
jb 0x41d112
pop rdi
jo 0x41d125
jb 0x41d0fc
push rbx
je 0x41d0ed
je 0x41d121
jb 0x41d120
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d0f8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d13f
push rax
jbe 0x41d150
jbe 0x41d122
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x41d126
cmp dword [rdi + 0x53], ebx
jo 0x41d159
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41d169
push rdx
push r12
pop rdi
jo 0x41d15f
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d14b
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41d16f
xor dword [rax], esi
jne 0x41d19f
jo 0x41d1a2
je 0x41d175
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41d1a8
je 0x41d19d
insb byte [rdi], dx
je 0x41d1a9
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r8], rsi
jne 0x41d1cc
jo 0x41d1cf
je 0x41d1a2
imul ebp, dword [rbp], 0x314e5a5f
xor dword [rcx + 0x6e], ecx
jo 0x41d1de
je 0x41d1af
jbe 0x41d1d7
movsxd rsp, dword [rbp + 0x32]
xor dh, byte [rdx + 0x65]
push rbp
outsb dx, byte [rsi]
jae 0x41d1e3
outsb dx, byte [esi]
outsb dx, byte fs:[rsi]
je 0x41d1c9
outsb dx, byte gs:[rsi]
jb 0x41d1e8
insb byte [rdi], dx
jns 0x41d1d0
imul r10d, dword [r10 + 0x54], 0x5f00635f
pop rdx
push rbx
je 0x41d1cf
pop rdi
jae 0x41d210
jb 0x41d20d
jns 0x41d1e9
push rbx
je 0x41d1db
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d21a
movsxd rbx, dword [rdi + 0x73]
je 0x41d228
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d223
je 0x41d238
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x41d227
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d243
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41d24c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d240
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41d247
pop rdi
jae 0x41d288
jb 0x41d285
jns 0x41d261
push rbx
je 0x41d251
je 0x41d285
jb 0x41d284
jbe 0x41d274
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41d264
pop rdi
jae 0x41d2a5
jb 0x41d2a2
jns 0x41d27e
push rax
jbe 0x41d28e
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41d276
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41d2b5
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41d2cf
jo 0x41d2d2
je 0x41d2a5
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41d2ab
xor ebx, dword [rdi + 0x5f]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d2f3
push r10
jbe 0x41d303
push rbx
je 0x41d2c6
cmp dword [rdi + 0x42], ebx
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d30d
pop rdi
push 0x65706c65
jb 0x41d2f3
push rsp
pop rdi
jo 0x41d304
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x41d332
jo 0x41d320
push r11
xor ebx, dword [rdi + 0x44]
jo 0x41d312
push rbx
xor al, 0x5f
add byte [rax + 0x74], dh
push 0x64616572
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x41d33a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x41d319
xor bl, byte [rdi + 0x5f]
je 0x41d34e
push 0x65706c65
jb 0x41d33f
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41d32e
xor al, 0x64
jne 0x41d370
je 0x41d365
insb byte [rdi], dx
je 0x41d371
xor qword [r8], rsi
jne 0x41d386
jo 0x41d389
je 0x41d35c
imul ebp, dword [rbp + 0x45], 0x52454549
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41d356
xor dword [rdi + 0x54], ebx
jne 0x41d39a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor ebx, dword [rdi + 0x44]
jo 0x41d391
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41d378
xor bl, byte [rdi + 0x5f]
je 0x41d3ad
push 0x65706c65
jb 0x41d39e
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x41d3d3
jo 0x41d3d6
je 0x41d3a7
jbe 0x41d3cf
movsxd rsp, dword [rbp + 0x4a]
push rbx
je 0x41d39d
xor al, 0x64
jne 0x41d3df
je 0x41d3d4
insb byte [rdi], dx
je 0x41d3e0
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41d3bb
xor dword [rdi + 0x54], ebx
jne 0x41d3ff
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41d3f6
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41d3dd
xor bl, byte [rdi + 0x5f]
je 0x41d412
push 0x65706c65
jb 0x41d403
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41d438
jo 0x41d43b
je 0x41d40e
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x41d442
je 0x41d437
insb byte [rdi], dx
je 0x41d443
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41d420
xor dword [rdi + 0x54], ebx
jne 0x41d464
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x41d45b
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
push r11
je 0x41d447
xor ebx, dword [rdi + 0x53]
jo 0x41d479
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41d485
pop rdi
jo 0x41d498
jb 0x41d485
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41d468
je 0x41d49c
jb 0x41d49b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d473
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d4ba
push rax
jbe 0x41d4cb
jbe 0x41d49d
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d4ca
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41d4e7
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41d4bd
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41d4fe
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x41d4b4
pop rdi
pop rdx
push rbx
je 0x41d4eb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41d52c
push r11
je 0x41d501
je 0x41d535
jb 0x41d534
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x41d4ec
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d555
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41d55e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41d552
push rbx
je 0x41d544
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d583
movsxd rbx, dword [rdi + 0x73]
je 0x41d591
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d58c
je 0x41d5a1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41d589
xor bl, byte [rdi + 0x4d]
jns 0x41d5bf
pop rdi
je 0x41d5c2
jb 0x41d5ca
jae 0x41d5dc
insb byte [rdi], dx
je 0x41d5c9
je 0x41d5e5
jo 0x41d5d3
push r11
je 0x41d5a4
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x41d5de
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x41d5f2
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x76], 0x45314345
jbe 0x41d595
pop rdi
pop rdx
push rbx
je 0x41d5d1
jbe 0x41d602
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41d5d9
jo 0x41d608
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41d5f0
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41d63a
jb 0x41d63d
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x41d604
je 0x41d638
jb 0x41d637
push r11
xor byte [rdi + 0x45], bl
jbe 0x41d62c
push rsp
pop rdi
jo 0x41d630
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41d661
jo 0x41d664
je 0x41d644
je 0x41d665
imul ebp, dword [rsi + 0x67], 0x76453244
add byte [rdi + 0x5a], bl
push rbx
je 0x41d632
xor byte [rbx + 0x68], dh
jb 0x41d66c
pop rdi
jo 0x41d67f
jb 0x41d656
push rbx
je 0x41d647
je 0x41d67b
jb 0x41d67a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d652
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d699
push rax
jbe 0x41d6aa
jbe 0x41d67c
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x41d680
cmp dword [rdi + 0x53], ebx
jo 0x41d6b3
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41d6c3
push rdx
push r12
pop rdi
jo 0x41d6b9
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d6a5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d6ec
push rax
jbe 0x41d6fd
jbe 0x41d6cf
xor al, byte [r13 + 0x4f]
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x41d710
jo 0x41d713
je 0x41d6f3
je 0x41d714
imul ebp, dword [rsi + 0x67], 0x4e5a5f00
push rbx
je 0x41d6e3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d722
movsxd rbx, dword [rdi + 0x73]
je 0x41d730
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d72b
je 0x41d740
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41d72a
xor ebp, dword [rbp + 0x6f]
jbe 0x41d763
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41d744
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d783
movsxd rbx, dword [rdi + 0x73]
je 0x41d791
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d78c
je 0x41d7a1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x53]
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push r11
je 0x41d77d
pop rdi
push rbx
jo 0x41d7b0
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41d7bc
pop rdi
jae 0x41d7c2
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41d7c6
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41d7e3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x41d7b9
jbe 0x41d7ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41d7c1
jo 0x41d7f0
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x41d81e
jo 0x41d821
je 0x41d7f4
imul ebp, dword [rbp + 0x43], 0x38504532
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41d7fc
jbe 0x41d82d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41d806
je 0x41d83a
jb 0x41d839
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41d81f
je 0x41d853
jb 0x41d852
xor cl, byte fs:[r9 + 0x52]
jbe 0x41d86c
push r12
pop rdi
jo 0x41d850
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d83c
xor dword [rdi + 0x54], ebx
jne 0x41d880
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x41d897
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x41d8ac
jo 0x41d8af
je 0x41d882
imul ebp, dword [rbp + 0x31], 0x69727733
je 0x41d8ab
push rsp
outsd dx, dword [rsi]
jbe 0x41d8b5
movsxd rsp, dword [rbp + 0x45]
push 0
pop rdi
pop rdx
xor qword [rax], r14
jne 0x41d8cd
jo 0x41d8d0
je 0x41d8a3
imul ebp, dword [rbp + 0x43], 0x4b504532
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x41d89d
xor eax, 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
pop rdi
jae 0x41d8e0
jb 0x41d8e0
push rbx
je 0x41d8b7
je 0x41d8eb
jb 0x41d8ea
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41d8c2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41d909
push rax
jbe 0x41d91a
jbe 0x41d8ec
push r11
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x41d8eb
xor byte [rbx + 0x68], dh
jb 0x41d925
pop rdi
jo 0x41d938
jb 0x41d90f
push rsp
pop rdi
push r10
push r12
xor byte [rdi + 0x44], bl
jo 0x41d920
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41d912
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41d951
movsxd rbx, dword [rdi + 0x73]
je 0x41d95f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41d95a
je 0x41d96f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
ja 0x41d996
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [rip + 0x64634b5f], esi
jbe 0x41d97b
jo 0x41d988
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41d974
je 0x41d98e
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41d994
jae 0x41d9b9
push rbx
je 0x41d988
xor al, 0x64
jne 0x41d9ca
je 0x41d9bf
insb byte [rdi], dx
je 0x41d9cb
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41d9a4
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41d9cb
pop rax
push rsp
pop rdi
push r11
je 0x41d9be
je 0x41da00
jo 0x41d9f9
jo 0x41d9e7
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41da0c
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41d9db
xor ebp, dword [rbp + 0x6f]
jbe 0x41da14
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41d9f5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41da34
movsxd rbx, dword [rdi + 0x73]
je 0x41da42
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41da3d
je 0x41da52
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x53], eax
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41da2c
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push 0x63
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41da71
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x41da62
pop rdi
pop rdi
imul esi, dword [rbx + 0x5f], 0x65747962
push r12
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
jbe 0x41da9d
insb byte [rdi], dx
jne 0x41daa4
push r8
push rbx
xor ebx, dword [rdi + 0x45]
pop rdi
pop rdi
je 0x41dac3
jo 0x41dab1
push r11
xor eax, 0x525f545f
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41da8f
xor dword [rdi + 0x54], ebx
jne 0x41dad3
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x41daea
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41dabc
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41daf1
push r10
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41db09
je 0x41dadc
imul ebp, dword [rbp + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x41db07
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41db0b
pop rdi
jb 0x41db0e
jb 0x41db12
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x41db28
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x41daf6
xor bl, byte [rdi + 0x5f]
jae 0x41db32
jb 0x41db32
pop rdi
jo 0x41db45
jb 0x41db1c
push rbx
je 0x41db0d
je 0x41db41
jb 0x41db40
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41db18
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41db5f
push rax
jbe 0x41db70
jbe 0x41db42
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41db68
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41db85
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41db5f
je 0x41db93
jb 0x41db92
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41db6a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41dbb1
push rax
jbe 0x41dbc2
jbe 0x41db94
pop rdi
pop r15
jb 0x41dbcc
outsb dx, byte [rsi]
jbe 0x41db5b
pop rdi
pop rdx
jae 0x41dbc5
je 0x41dba8
imul ebp, dword [rsp + rbp*2 + 0x63], 0x615f5f00
jae 0x41dbdf
jb 0x41dbe3
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x41dbba
xor al, 0x70
jb 0x41dbf6
outsd dx, dword [rsi]
jb 0x41dbf9
je 0x41dc0b
pop rdi
jno 0x41dc0a
jne 0x41dbfd
push r11
je 0x41dbd0
jo 0x41dbff
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41dbdd
jbe 0x41dc0e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x41dbf3
jb 0x41dc24
je 0x41dc27
jb 0x41dc0d
push rbx
xor dword [rdi + 0x45], ebx
xor r14d, dword [r15 + rbp*2 + 0x70]
jbe 0x41dbd0
pop rdi
pop rdx
push rsp
push rsi
push rbx
je 0x41dc09
xor ebx, dword [rdi + 0x53]
jo 0x41dc3b
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41dc47
pop rdi
jo 0x41dc5a
jb 0x41dc47
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41dc2a
je 0x41dc5e
jb 0x41dc5d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41dc35
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41dc7c
push rax
jbe 0x41dc8d
jbe 0x41dc5f
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41dc8c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41dca9
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41dcbf
jo 0x41dcc2
je 0x41dc93
jbe 0x41dcbb
movsxd rsp, dword [rbp + 0x35]
ja 0x41dcc9
imul esi, dword [rbp + 0x49], 0x4e454564
push rbx
je 0x41dc9b
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x41dca3
imul esi, dword [rbx + 0x5f], 0x616f6c66
je 0x41dce5
outsb dx, byte [rsi]
pop rdi
jo 0x41dcf0
imul ebp, dword [rsi + 0x74], 0x455f5449
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41dcd7
je 0x41dd0b
jb 0x41dd0a
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41dd1a
pop rdi
jae 0x41dd18
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
push rbx
je 0x41dcee
xor bl, byte [rdi + 0x5f]
je 0x41dd23
push 0x65706c65
jb 0x41dd14
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41dd03
xor al, 0x64
jne 0x41dd45
je 0x41dd3a
insb byte [rdi], dx
je 0x41dd46
xor qword [r10], rsi
jne 0x41dd5b
jo 0x41dd5e
je 0x41dd2f
jbe 0x41dd57
movsxd rsp, dword [rbp + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41dd2d
xor dword [rdi + 0x54], ebx
jne 0x41dd71
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x41dd68
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x41dd95
jo 0x41dd98
je 0x41dd69
jbe 0x41dd91
movsxd rsp, dword [rbp + 0x31]
ja 0x41dda0
imul esi, dword [rbp + 0x55], 0x6769736e
outsb dx, byte [rsi]
outsb dx, byte fs:[rsi]
je 0x41dd86
push 0x45
push r8
movsxd rdx, dword [rdi + rbx*2 + 0x53]
xor dword [rdi], ebx
movsxd rbp, dword [rdi + rbp*2 + 0x63]
imul eax, dword [rax + 0x40], 0x47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41dd92
xor dword [rdi + 0x54], ebx
jne 0x41ddd6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x41dded
jo 0x41ddf0
je 0x41ddc1
jbe 0x41dde9
movsxd rsp, dword [rbp + 0x53]
je 0x41ddb6
xor al, 0x64
jne 0x41ddf8
je 0x41dded
insb byte [rdi], dx
je 0x41ddf9
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41ddee
push r12
pop rdi
jo 0x41ddff
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41de1d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41de26
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41de1a
push rbx
je 0x41de06
xor ebx, dword [rdi + 0x53]
jo 0x41de38
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41de44
pop rdi
jo 0x41de57
jb 0x41de44
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41de27
je 0x41de5b
jb 0x41de5a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41de32
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41de79
push rax
jbe 0x41de8a
jbe 0x41de5c
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41de9e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
pop r15
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
jae 0x41deb5
je 0x41de94
jae 0x41deba
push 0
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41ded3
jo 0x41ded6
je 0x41deb6
je 0x41ded7
imul ebp, dword [rsi + 0x67], 0x72773331
imul esi, dword [rbp + 0x54], 0x7665446f
imul esp, dword [rbx + 0x65], 0x5f006a45
pop rdx
push rbx
je 0x41deb0
xor bl, byte [rdi + 0x5f]
je 0x41dee5
push 0x65706c65
jb 0x41ded6
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x41df0b
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41ded2
xor dword [rdi + 0x54], ebx
jne 0x41df16
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor bl, byte [rdi + 0x44]
jo 0x41df0d
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41def5
xor byte [rdi + 0x5f], bl
je 0x41df30
jb 0x41df39
ja 0x41df2b
jae 0x41df47
jae 0x41df44
insd dword [rdi], dx
pop rdi
jb 0x41df48
outsd dx, dword [rsi]
jb 0x41df42
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rcx + 0x6e], ch
jo 0x41df63
je 0x41def0
pop rdi
pop rdx
push rbx
je 0x41df27
xor al, 0x5f
pop rdi
jae 0x41df63
jb 0x41df63
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41df4f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41df6e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41df8b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x41df69
je 0x41dfab
jo 0x41df99
pop rdi
imul ebp, dword [rsi + 0x66], 0x4571656f
push rdx
push r11
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41dfbd
jo 0x41dfc0
je 0x41df91
jbe 0x41dfb9
movsxd rsp, dword [rbp + 0x39]
ja 0x41dfc7
imul esi, dword [rbp + 0x46], 0x456c6c69
push 0
pop rdi
pop rdx
push rbx
je 0x41df9b
jbe 0x41dfcc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41dfa5
je 0x41dfd9
jb 0x41dfd8
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x41dff2
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x41e00a
push rdx
jbe 0x41e00e
jbe 0x41dfe2
jo 0x41dfef
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x41dfe8
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41e00c
xor dword [rdx], esi
jne 0x41e03c
jo 0x41e03f
je 0x41e010
jbe 0x41e038
movsxd rsp, dword [rbp + 0x53]
je 0x41e005
xor al, 0x64
jne 0x41e047
je 0x41e03c
insb byte [rdi], dx
je 0x41e048
push r11
xor byte [rdi + 0x45], bl
jo 0x41e05f
jbe 0x41dfee
pop rdi
pop rdx
push rbx
je 0x41e02a
jbe 0x41e05b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41e032
jo 0x41e061
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor r12d, dword [r13 + 0x6e]
jbe 0x41e015
pop rdi
pop rdx
push rbx
je 0x41e052
pop rdi
jae 0x41e093
jb 0x41e090
jns 0x41e06c
push rax
push rbx
je 0x41e05b
jo 0x41e08a
imul esi, dword [rdx + 0x49], 0x45456964
jbe 0x41e086
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41e06e
xor dword [rdi + 0x54], ebx
jne 0x41e0b2
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x41e083
xor al, 0x64
jne 0x41e0c5
je 0x41e0ba
insb byte [rdi], dx
je 0x41e0c6
xor qword [r10], rsi
jne 0x41e0db
jo 0x41e0de
je 0x41e0af
jbe 0x41e0d7
movsxd rsp, dword [rbp + 0x45]
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e0b6
xor dword [rdi + 0x54], ebx
jne 0x41e0fa
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41e112
je 0x41e0e5
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41e118
je 0x41e10d
insb byte [rdi], dx
je 0x41e119
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push r11
je 0x41e108
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e147
movsxd rbx, dword [rdi + 0x73]
je 0x41e155
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e150
je 0x41e165
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rsp
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3731
movsxd rbp, dword [rcx + 0x73]
jae 0x41e192
je 0x41e1ae
jo 0x41e19c
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x41e180
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41e1ca
jb 0x41e1cd
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x41e196
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e1d5
movsxd rbx, dword [rdi + 0x73]
je 0x41e1e3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e1de
je 0x41e1f3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x41e1eb
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rax], r14
jne 0x41e21c
jo 0x41e21f
je 0x41e1f2
imul ebp, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
je 0x41e1f1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e230
movsxd rbx, dword [rdi + 0x73]
je 0x41e23e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e239
je 0x41e24e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x41e24e
jo 0x41e234
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41e240
jbe 0x41e271
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41e24c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e28b
movsxd rbx, dword [rdi + 0x73]
je 0x41e299
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e294
je 0x41e2a9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41e289
xor byte [rdi + 0x49], bl
je 0x41e2c2
jb 0x41e2be
jae 0x41e2c8
push r8
movsxd rcx, dword [r10 + r12*2 + 0x30]
pop rdi
push rbx
pop rdi
jae 0x41e2d9
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x41e2c5
jae 0x41e2ea
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41e2c6
je 0x41e2fa
jb 0x41e2f9
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e2d1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e318
push rax
jbe 0x41e329
jbe 0x41e2fb
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41e2f9
jbe 0x41e32a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41e303
je 0x41e337
jb 0x41e336
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r13 + 0x6e]
jbe 0x41e2e2
pop rdi
pop rdx
push rbx
je 0x41e319
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41e352
je 0x41e367
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41e332
xor ebx, dword [rdi + 0x53]
jo 0x41e364
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41e370
pop rdi
jo 0x41e383
jb 0x41e370
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41e353
je 0x41e387
jb 0x41e386
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e35e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e3a5
push rax
jbe 0x41e3b6
jbe 0x41e388
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e3b5
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e3d2
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
push rax
push rbx
pop r15
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x41e3bb
xor dword [rdi + 0x54], ebx
jne 0x41e3ff
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41e3e6
jae 0x41e40b
push rbx
je 0x41e3da
xor al, 0x64
jne 0x41e41c
je 0x41e411
insb byte [rdi], dx
je 0x41e41d
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41e449
jo 0x41e44c
je 0x41e41d
jbe 0x41e445
movsxd rsp, dword [rbp + 0x35]
ja 0x41e453
imul esi, dword [rbp + 0x49], 0x45496369
push rbx
je 0x41e428
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41e430
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x41e478
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x41e46a
jo 0x41e499
imul esi, dword [rdx + 0x49], 0x45456964
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x41e47c
xor ebp, dword [rbp + 0x6f]
jbe 0x41e4b5
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e492
jo 0x41e4c1
imul esi, dword [rdx + 0x49], 0x45456964
jbe 0x41e46c
pop rdi
pop rdx
push r11
je 0x41e4a4
xor ebp, dword [rbp + 0x6f]
jbe 0x41e4dd
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e4bc
je 0x41e4f0
jb 0x41e4ef
xor al, 0x62
jae 0x41e4f7
jbe 0x41e495
pop rdi
pop rdx
push rbx
je 0x41e4cc
xor dword [rdi + 0x54], ebx
jne 0x41e510
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41e4f7
jae 0x41e51c
push rbx
je 0x41e4eb
xor al, 0x64
jne 0x41e52d
je 0x41e522
insb byte [rdi], dx
je 0x41e52e
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41e55c
je 0x41e52d
jbe 0x41e555
movsxd rsp, dword [rbp + 0x31]
xor eax, 0x64616572
push rbp
outsb dx, byte [rsi]
jae 0x41e561
outsb dx, byte [esi]
outsb dx, byte fs:[rsi]
je 0x41e549
jns 0x41e547
imul r10d, dword [r10 + 0x54], 0x5f00635f
pop rdx
push r11
je 0x41e546
jbe 0x41e577
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41e552
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41e591
movsxd rbx, dword [rdi + 0x73]
je 0x41e59f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41e59a
je 0x41e5af
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x4d]
pop rdi
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
jo 0x41e5dd
push 0x64616572
pop rdi
insd dword [rdi], dx
jne 0x41e5e6
js 0x41e5d4
jne 0x41e5e5
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x41e5c1
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41e612
outsb dx, byte gs:[rsi]
je 0x41e60a
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x69], ecx
jbe 0x41e611
push r10
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e609
xor ebx, dword [rdi + 0x53]
jo 0x41e63b
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41e647
pop rdi
jo 0x41e65a
jb 0x41e647
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41e62a
je 0x41e65e
jb 0x41e65d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e635
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e67c
push rax
jbe 0x41e68d
jbe 0x41e65f
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e68c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e6a9
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41e6c5
je 0x41e696
jbe 0x41e6be
movsxd rsp, dword [rbp + 0x43]
xor dword [rbp + 0x50], eax
movsxd rdx, dword [r11 + 0x31]
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41e699
je 0x41e6b3
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
xor dword [rdx], esi
jne 0x41e6e9
jo 0x41e6ec
je 0x41e6bd
jbe 0x41e6e5
movsxd rsp, dword [rbp + 0x53]
je 0x41e6b2
xor al, 0x64
jne 0x41e6f4
je 0x41e6e9
insb byte [rdi], dx
je 0x41e6f5
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41e6cd
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41e6f4
pop rax
push rsp
pop rdi
push r11
je 0x41e6e7
je 0x41e729
jo 0x41e722
jo 0x41e710
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41e735
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41e702
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41e75d
push r11
je 0x41e719
xor ebp, dword [rbp + 0x6f]
jbe 0x41e752
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e72f
jo 0x41e75e
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor ebx, dword [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x41e74b
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41e76f
cmp dword [rcx + 0x6e], ecx
jo 0x41e7a0
je 0x41e773
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41e7a6
je 0x41e79b
insb byte [rdi], dx
je 0x41e7a7
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x41e7ad
insb byte [rdi], dx
je 0x41e7b9
jb 0x41e79b
jbe 0x41e758
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e7c1
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x41e7da
jb 0x41e7c1
push rbx
je 0x41e7b2
je 0x41e7e6
jb 0x41e7e5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41e7bd
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e804
push rax
jbe 0x41e815
jbe 0x41e7e7
pop rdi
pop r15
jb 0x41e7f4
jbe 0x41e7b1
pop rdi
pop rdx
push rbx
je 0x41e7e8
xor dword [rdi + 0x4d], ebx
jne 0x41e830
js 0x41e81e
jae 0x41e828
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e82c
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e849
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x75], ch
je 0x41e85b
jne 0x41e861
add byte [rdi + 0x5a], bl
xor qword [rax], r14
jne 0x41e86a
jo 0x41e86d
je 0x41e840
imul ebp, dword [rbp + 0x43], 0x4b504531
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x41e83a
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x41e870
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41e87a
pop rdi
xor byte [rbp + 0x50], al
movsxd rdx, dword [r8 + 0x63]
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e898
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41e8b1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41e888
jo 0x41e8b7
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41e895
jbe 0x41e8c6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41e8f9
je 0x41e8ca
jbe 0x41e8f2
movsxd rsp, dword [rbp + 0x34]
jb 0x41e8f3
push r8
js 0x41e8fd
push rbx
je 0x41e8d5
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x41e8dd
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
jae 0x41e936
push rbx
je 0x41e8f8
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
xor byte [rdi + 0x45], bl
xor eax, 0x756c6176
xor al, 0x74
jns 0x41e955
push r11
xor al, 0x5f
push rbx
pop rdi
jo 0x41e93f
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41e92b
pop rdi
push rbx
jo 0x41e95e
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41e96a
pop rdi
jae 0x41e970
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e974
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41e991
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41e966
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41e9ad
push rax
jbe 0x41e9be
jbe 0x41e990
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x49], ebx
push r12
pop rdi
jo 0x41e9ab
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41e997
xor bl, byte [rdi + 0x5f]
jae 0x41e9d3
jb 0x41e9d3
pop rdi
jo 0x41e9e6
jb 0x41e9bd
push rbx
je 0x41e9ae
je 0x41e9e2
jb 0x41e9e1
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41e9f1
pop rdi
jae 0x41e9ef
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41e9f3
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41ea10
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
ja 0x41ea25
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [r15 + rbx*2], esi
movsxd rsp, dword [r13 + r8*2 + 0x45]
jbe 0x41ea0a
jo 0x41ea17
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x72
push rdx
imul edx, dword [rbx + 0x30], 0x7645455f
jo 0x41ea2e
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41ea60
je 0x41ea31
jbe 0x41ea59
movsxd rsp, dword [rbp + 0x34]
jb 0x41ea5a
imul rax, qword fs:[r13 + 0x45], 0x3974534e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x41ea62
je 0x41ea42
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x41ea9b
push rbx
je 0x41ea65
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
xor al, 0x74
jns 0x41eab7
push r10
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41ea8a
outsw dx, word [rsi]
jb 0x41eace
jb 0x41eabe
push r10
xor bl, byte [r15 + 0x4b]
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41ea9b
jb 0x41ead2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41ead6
pop rdi
jb 0x41ead9
jb 0x41eadd
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41eaf4
add byte gs:[r15 + 0x5a], r11b
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41eb05
je 0x41ead6
jbe 0x41eafe
movsxd rsp, dword [rbp + 0x34]
jb 0x41eaff
jbe 0x41ea9f
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41eb08
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x41eb21
jb 0x41eb08
push rbx
je 0x41eaf9
je 0x41eb2d
jb 0x41eb2c
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41eb04
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41eb4b
push rax
jbe 0x41eb5c
jbe 0x41eb2e
pop rdi
pop r15
jo 0x41eb67
jb 0x41eb3a
jbe 0x41eaf7
pop rdi
pop rdx
push rbx
je 0x41eb2d
xor bl, byte [rdi + 0x5f]
je 0x41eb62
push 0x65706c65
jb 0x41eb53
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41eb42
xor al, 0x64
jne 0x41eb84
je 0x41eb79
insb byte [rdi], dx
je 0x41eb85
cmp byte [r13 + 0x73], dl
je 0x41eb6a
jae 0x41eb8f
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41eb67
xor dword [rdi + 0x54], ebx
jne 0x41ebab
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x41eba2
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41eb8a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41ebcb
push r11
je 0x41eba0
je 0x41ebd4
jb 0x41ebd3
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x41ebcf
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ec0e
movsxd rbx, dword [rdi + 0x73]
je 0x41ec1c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ec17
je 0x41ec2c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41ec05
xor dword [rdi + 0x54], ebx
jne 0x41ec49
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x41ec30
jae 0x41ec55
push rbx
je 0x41ec24
xor al, 0x64
jne 0x41ec66
je 0x41ec5b
insb byte [rdi], dx
je 0x41ec67
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41ec5c
push r12
pop rdi
jo 0x41ec6d
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41ec8b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41ec94
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41ec88
push rbx
je 0x41ec79
je 0x41ecad
jb 0x41ecac
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41ec84
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41eccb
push rax
jbe 0x41ecdc
jbe 0x41ecae
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push rbx
cmp dword [rcx + 0x6e], ecx
jo 0x41ecf0
je 0x41ecc3
imul ebp, dword [rbp], 0x4b4e5a5f
push rbx
je 0x41ecbe
jbe 0x41ecef
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41ecca
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ed09
movsxd rbx, dword [rdi + 0x73]
je 0x41ed17
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ed12
je 0x41ed27
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3845455f
insd dword [rdi], dx
js 0x41ed2f
jae 0x41ed3b
jp 0x41ed39
jbe 0x41ecd7
pop rdi
pop rdx
push rbx
je 0x41ed0f
je 0x41ed29
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41ed60
je 0x41ed33
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41ed66
je 0x41ed5b
insb byte [rdi], dx
je 0x41ed67
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41ed3f
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41ed66
pop rax
push rsp
pop rdi
push r11
je 0x41ed59
je 0x41ed9b
jo 0x41ed94
jo 0x41ed82
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41eda7
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41edba
jo 0x41edbd
je 0x41ed8e
jbe 0x41edb6
movsxd rsp, dword [rbp + 0x43]
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41ed8d
movsxd rbp, dword [rdi + 0x70]
jns 0x41eda7
push rax
movsxd rdx, dword [r8 + 0x63]
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41edd9
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x41edb5
pop rdi
pop rdi
imul esi, dword [rbp + 0x72], 0x6d6f635f
jo 0x41edf0
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x41ee01
je 0x41ee04
jb 0x41edea
push rbx
je 0x41edd8
jo 0x41ee07
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x41ee1a
movsxd rbp, dword [rdi + 0x6d]
jo 0x41ee1f
imul esi, dword [rbp + 0x72], 0x455f5449
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41ee03
xor dword [rdi + 0x5f], ebx
jb 0x41ee3f
jae 0x41ee4f
outsd dx, dword [rsi]
push rbx
je 0x41ee1a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ee59
movsxd rbx, dword [rdi + 0x73]
je 0x41ee67
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ee62
je 0x41ee77
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r8
push rsp
pop rdi
push rdx
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41ee53
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41ee94
push r11
je 0x41ee67
jo 0x41ee96
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41ee7f
xor bl, byte [rdi + 0x5f]
jae 0x41eebb
jb 0x41eebb
pop rdi
jo 0x41eece
jb 0x41eea5
push rbx
je 0x41ee96
je 0x41eeca
jb 0x41eec9
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41eed9
pop rdi
jae 0x41eed7
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41eedb
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41eef8
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41ef12
jo 0x41ef15
je 0x41eee6
jbe 0x41ef0e
movsxd rsp, dword [rbp + 0x35]
ja 0x41ef1c
imul esi, dword [rbp + 0x49], 0x39415269
pop rdi
movsxd rcx, dword [r10 + 0x63]
push rbx
je 0x41eef7
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41eeff
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41ef47
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41ef38
jbe 0x41ef69
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41ef42
je 0x41ef76
jb 0x41ef75
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41ef56
xor bl, byte [rdi + 0x5f]
jne 0x41ef97
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41efb2
pop rdi
push r11
je 0x41ef70
xor ebp, dword [rbp + 0x6f]
jbe 0x41efa9
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41ef8a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41efc9
movsxd rbx, dword [rdi + 0x73]
je 0x41efd7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41efd2
je 0x41efe7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push rbx
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x41efd5
xor bl, byte [rdi + 0x5f]
je 0x41f00a
push 0x65706c65
jb 0x41effb
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x41f030
jo 0x41f033
je 0x41f006
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x41f03a
je 0x41f02f
insb byte [rdi], dx
je 0x41f03b
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x41f018
xor dword [rdi + 0x54], ebx
jne 0x41f05c
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x41f053
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41f03b
pop rdi
push rbx
jo 0x41f06e
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41f07a
pop rdi
jae 0x41f080
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f084
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41f0a1
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jb 0x41f0a6
insb byte [rdi], dx
jae 0x41f0ab
jbe 0x41f049
pop rdi
pop rdx
push rbx
je 0x41f080
xor dword [rdi + 0x54], ebx
jne 0x41f0c4
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x41f0db
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41f0a7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41f0e8
push r11
je 0x41f0bb
jo 0x41f0ea
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
insd dword [rdi], dx
js 0x41f108
jae 0x41f12b
jbe 0x41f0b9
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41f135
jo 0x41f138
je 0x41f109
jbe 0x41f131
movsxd rsp, dword [rbp + 0x31]
ja 0x41f140
imul esi, dword [rbp + 0x55], 0x6769736e
outsb dx, byte [rsi]
outsb dx, byte fs:[rsi]
je 0x41f126
jns 0x41f124
push r8
movsxd rdx, dword [rdi + rbx*2 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41f124
jbe 0x41f155
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x41f130
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f16f
movsxd rbx, dword [rdi + 0x73]
je 0x41f17d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f178
je 0x41f18d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor eax, 0x655f4d5f
jb 0x41f19a
jae 0x41f1a0
pop rdi
je 0x41f19e
outsb dx, byte gs:[rsi]
push r8
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x41f17f
xor bl, byte [rdi + 0x5f]
jae 0x41f1bb
jb 0x41f1bb
pop rdi
jo 0x41f1ce
jb 0x41f1a5
push rbx
je 0x41f196
je 0x41f1ca
jb 0x41f1c9
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f1a1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f1e8
push rax
jbe 0x41f1f9
jbe 0x41f1cb
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f1f1
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41f20e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push r11
pop rdi
push r11
je 0x41f1ec
cmp dword [rdi + 0x53], ebx
jo 0x41f21f
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41f22f
push rdx
push r12
pop rdi
jo 0x41f225
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f211
xor bl, byte [rdi + 0x44]
jae 0x41f25a
jb 0x41f257
jns 0x41f249
jne 0x41f265
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x41f26e
jb 0x41f26b
jns 0x41f247
push rax
push rbx
je 0x41f236
jo 0x41f265
imul esi, dword [rdx + 0x49], 0x45456964
jbe 0x41f262
pop rdi
push rbx
xor eax, 0x5a5f005f
xor qword [rdx], r14
jne 0x41f28f
jo 0x41f292
je 0x41f263
jbe 0x41f28b
movsxd rsp, dword [rbp + 0x35]
ja 0x41f299
imul esi, dword [rbp + 0x49], 0x74534e52
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f2a6
movsxd rbx, dword [rdi + 0x73]
je 0x41f2b4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f2af
je 0x41f2c4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r9, dword [r10 + 0x45]
push rbx
je 0x41f2a2
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41f2aa
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41f2f2
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41f2dd
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [r13 + 0x4e]
push rbx
je 0x41f2f3
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41f358
jo 0x41f346
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41f31d
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41f341
cmp dword [rcx + 0x6e], ecx
jo 0x41f372
je 0x41f345
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41f378
je 0x41f36d
insb byte [rdi], dx
je 0x41f379
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41f35b
jbe 0x41f38c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x6d], eax
push rdx
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f377
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41f3b0
je 0x41f3c5
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41f392
jo 0x41f3c1
imul esi, dword [rdx + 0x49], 0x45456964
jae 0x41f3e1
jb 0x41f3de
jns 0x41f3ba
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41f3ca
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x41f3b7
xor ebp, dword [rbp + 0x6f]
jbe 0x41f3f0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41f3cd
jo 0x41f3fc
imul esi, dword [rdx + 0x49], 0x45456964
xor al, 0x62
jae 0x41f40c
jbe 0x41f3aa
pop rdi
pop rdx
push rbx
je 0x41f3e1
xor dword [rdi + 0x54], ebx
jne 0x41f425
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x41f43d
je 0x41f410
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41f443
je 0x41f438
insb byte [rdi], dx
je 0x41f444
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x41f471
je 0x41f444
imul ebp, dword [rbp + 0x43], 0x38504532
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x41f44d
jbe 0x41f47e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41f455
jo 0x41f484
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x4f], eax
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41f471
je 0x41f48b
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
xor dword [rax], esi
jne 0x41f4c1
jo 0x41f4c4
je 0x41f497
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x41f4ca
je 0x41f4bf
insb byte [rdi], dx
je 0x41f4cb
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x41f4a3
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41f4ca
pop rax
push rsp
pop rdi
push r11
je 0x41f4bd
je 0x41f4ff
jo 0x41f4f8
jo 0x41f4e6
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41f50b
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f4db
jae 0x41f520
jo 0x41f4f5
push rbx
je 0x41f4e6
je 0x41f51a
jb 0x41f519
xor ch, byte fs:[rcx + 0x64]
jbe 0x41f50f
push rsp
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41f541
je 0x41f512
jbe 0x41f53a
movsxd rsp, dword [rbp + 0x34]
jb 0x41f53b
js 0x41f520
push rbx
je 0x41f519
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x41f543
je 0x41f523
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x41f57c
push rbx
je 0x41f546
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
xor al, 0x74
jns 0x41f598
push r10
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41f566
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41f5a7
push rbx
je 0x41f57e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f5bd
movsxd rbx, dword [rdi + 0x73]
je 0x41f5cb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f5c6
je 0x41f5db
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41f600
jo 0x41f603
je 0x41f5d4
jbe 0x41f5fc
movsxd rsp, dword [rbp + 0x31]
movsxd rbp, dword ss:[rdi + 0x6d]
jo 0x41f611
je 0x41f603
jae 0x41f607
push rax
outsd dx, dword [rsi]
ja 0x41f60b
jb 0x41f5ed
jbe 0x41f5aa
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f613
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41f61c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41f610
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41f641
push r8
push rbx
je 0x41f60d
jo 0x41f63c
imul esi, dword [rdx + 0x49], 0x45456964
push rdx
push r11
je 0x41f619
xor ebp, dword [rbp + 0x6f]
jbe 0x41f652
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41f636
xor ebx, dword [rdi + 0x53]
jo 0x41f668
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41f674
pop rdi
jo 0x41f687
jb 0x41f674
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41f657
je 0x41f68b
jb 0x41f68a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f662
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f6a9
push rax
jbe 0x41f6ba
jbe 0x41f68c
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41f6b9
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41f6d6
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x41f6ec
jb 0x41f6e9
jns 0x41f6c1
jbe 0x41f67e
pop rdi
pop rdx
push rbx
je 0x41f6b9
je 0x41f6fb
jo 0x41f6f4
push r11
je 0x41f6c0
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41f711
outsb dx, byte gs:[rsi]
je 0x41f709
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41f716
jo 0x41f724
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41f70f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41f750
push r11
je 0x41f725
je 0x41f759
jb 0x41f758
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41f739
xor byte [rbx + 0x68], dh
jb 0x41f773
pop rdi
jo 0x41f786
jb 0x41f75d
push rbx
je 0x41f74e
je 0x41f782
jb 0x41f781
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x41f791
pop rdi
jae 0x41f78f
xor cl, byte [r9 + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x41f7a5
push r11
je 0x41f76e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f7b5
push rax
jbe 0x41f7c6
jbe 0x41f798
jbe 0x41f79d
push r11
pop rdi
push r12
pop rdi
add byte [r15 + 0x5a], r11b
push r11
je 0x41f79e
jbe 0x41f7cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41f7a8
je 0x41f7dc
jb 0x41f7db
push rbx
push r11
xor byte [rdi + 0x45], bl
cmp byte [r13 + 0x61], r13b
js 0x41f7e4
jae 0x41f7f0
jp 0x41f7ee
jbe 0x41f78c
pop rdi
pop rdx
push rbx
je 0x41f7c3
xor dword [rdi + 0x54], ebx
jne 0x41f807
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x41f7d8
xor al, 0x64
jne 0x41f81a
je 0x41f80f
insb byte [rdi], dx
je 0x41f81b
xor qword [r10], rsi
jne 0x41f830
jo 0x41f833
je 0x41f804
jbe 0x41f82c
movsxd rsp, dword [rbp + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41f80e
xor bl, byte [rdi + 0x57]
imul ebx, dword [rdi + 0x72], 0x65
jae 0x41f85c
insb byte [rdi], dx
je 0x41f849
je 0x41f865
jo 0x41f853
pop rdi
imul ebp, dword [rbp + 0x70], 0x7453496c
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x41f86c
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x41f87b
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x45], 0x76453243
add byte [rdi + 0x5a], bl
push rbx
je 0x41f850
xor byte [rbx + 0x68], dh
jb 0x41f88a
pop rdi
jo 0x41f89d
jb 0x41f874
push rbx
je 0x41f865
je 0x41f899
jb 0x41f898
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41f870
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41f8b7
push rax
jbe 0x41f8c8
jbe 0x41f89a
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push r11
pop rdi
push r11
je 0x41f89e
cmp dword [rdi + 0x53], ebx
jo 0x41f8d1
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41f8e1
push rdx
push r12
pop rdi
jo 0x41f8d7
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41f8c7
je 0x41f909
jo 0x41f902
push rbx
je 0x41f8ce
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x41f91f
outsb dx, byte gs:[rsi]
je 0x41f917
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x4a], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41f924
jo 0x41f932
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41f962
jo 0x41f965
je 0x41f945
je 0x41f966
imul ebp, dword [rsi + 0x67], 0x52453243
push rbx
je 0x41f936
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41f975
movsxd rbx, dword [rdi + 0x73]
je 0x41f983
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41f97e
je 0x41f993
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x41f967
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x41f98b
xor dword [rdx], esi
jne 0x41f9bb
jo 0x41f9be
je 0x41f98f
jbe 0x41f9b7
movsxd rsp, dword [rbp + 0x53]
je 0x41f984
xor al, 0x64
jne 0x41f9c6
je 0x41f9bb
insb byte [rdi], dx
je 0x41f9c7
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41f9a4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41f9dd
je 0x41f9f2
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41f9bf
jo 0x41f9ee
imul esi, dword [rdx + 0x49], 0x45456964
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41fa0f
jb 0x41fa12
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x4a], ebx
push rdx
push rdx
imul eax, dword [rbp + 0x45], 0x53527645
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x41fa05
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x41fa38
je 0x41fa09
jbe 0x41fa31
movsxd rsp, dword [rbp + 0x31]
xor al, 0x73
imul ebp, dword [rcx + 0x70], 0x43
push 0x63617261
je 0x41fa3d
jb 0x41fa4d
jbe 0x41f9dd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x41fa4b
js 0x41fa51
je 0x41fa2a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x41fa2f
je 0x41fa49
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
jbe 0x41fa7f
push r10
push rbx
je 0x41fa42
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41fa69
pop rax
push rsp
pop rdi
push r11
je 0x41fa5c
je 0x41fa9e
jo 0x41fa97
jo 0x41fa85
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41faaa
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41fa78
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x41faca
jb 0x41faa1
push rbx
push r11
je 0x41fa90
xor ebx, dword [rdi + 0x53]
jo 0x41fac2
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41face
pop rdi
jo 0x41fae1
jb 0x41face
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41fab1
je 0x41fae5
jb 0x41fae4
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41fabc
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fb03
push rax
jbe 0x41fb14
jbe 0x41fae6
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fb13
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41fb30
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rsp
push rbx
je 0x41fb0e
je 0x41fb42
jb 0x41fb41
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41fb19
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fb60
push rax
jbe 0x41fb71
jbe 0x41fb43
add byte [r15 + 0x5a], r11b
push rbx
je 0x41fb73
je 0x41fb52
imul eax, dword fs:[rbp + 0x62], 0x74534b52
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor eax, 0x5a5f005f
push rbx
je 0x41fb5d
jbe 0x41fb8e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
add byte fs:[rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41fbb9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41fbc2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41fbb6
push rbx
je 0x41fba2
xor ebx, dword [rdi + 0x53]
jo 0x41fbd4
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41fbe0
pop rdi
jo 0x41fbf3
jb 0x41fbe0
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41fbc3
je 0x41fbf7
jb 0x41fbf6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41fbce
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fc15
push rax
jbe 0x41fc26
jbe 0x41fbf8
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41fc3a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
cmp byte [r13 + 0x61], r13b
js 0x41fc38
jae 0x41fc44
jp 0x41fc42
jbe 0x41fbe0
pop rdi
pop rdx
push rbx
je 0x41fc16
xor bl, byte [rdi + 0x5f]
je 0x41fc4b
push 0x65706c65
jb 0x41fc3c
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x41fc2b
xor al, 0x64
jne 0x41fc6d
je 0x41fc62
insb byte [rdi], dx
je 0x41fc6e
xor qword [r8], rsi
jne 0x41fc83
jo 0x41fc86
je 0x41fc59
imul ebp, dword [rbp + 0x45], 0x5245454a
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x41fc53
xor dword [rdi + 0x54], ebx
jne 0x41fc97
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x41fc8e
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41fc7b
outsw dx, word [rsi]
jb 0x41fcbf
jb 0x41fcaf
push r10
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41fc8c
jb 0x41fcc3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41fcc7
pop rdi
jb 0x41fcca
jb 0x41fcce
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x41fce5
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41fcb4
jbe 0x41fce5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41fcbe
je 0x41fcf2
jb 0x41fcf1
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x41fd0b
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x41fd23
push r10
jbe 0x41fd27
jbe 0x41fcfb
jo 0x41fd08
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x41fcf7
xor ebx, dword [rdi + 0x53]
jo 0x41fd29
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41fd35
pop rdi
jo 0x41fd48
jb 0x41fd35
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x41fd18
je 0x41fd4c
jb 0x41fd4b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41fd23
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fd6a
push rax
jbe 0x41fd7b
jbe 0x41fd4d
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fd7a
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41fd97
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x53], ecx
pop rdi
push r10
push r11
push r12
pop rdi
add byte [r15 + 0x5a], r11b
push rbx
je 0x41fd79
xor al, 0x5f
pop rdi
jae 0x41fdb5
jb 0x41fdb5
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x41fda1
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fdc0
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x41fddd
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4e], ecx
push rbx
je 0x41fdb3
je 0x41fde7
jb 0x41fde6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x41fdbe
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x41fe05
push rax
jbe 0x41fe16
jbe 0x41fde8
push r11
push r11
pop rdi
push rbx
pop r15
push r11
je 0x41fde8
cmp dword [rdi + 0x53], ebx
jo 0x41fe1b
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x41fe2b
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x41fe25
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41fe43
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41fe4c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41fe40
push rbx
je 0x41fe2e
jo 0x41fe5d
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41fe84
jo 0x41fe87
je 0x41fe58
jbe 0x41fe80
movsxd rsp, dword [rbp + 0x35]
ja 0x41fe8e
imul esi, dword [rbp + 0x45], 0x5a5f0063
push rbx
je 0x41fe59
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41fe9a
push rbx
je 0x41fe71
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41feb0
movsxd rbx, dword [rdi + 0x73]
je 0x41febe
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41feb9
je 0x41fece
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x41fef3
jo 0x41fef6
je 0x41fec7
jbe 0x41feef
movsxd rsp, dword [rbp + 0x35]
ja 0x41fefd
imul esi, dword [rbp + 0x49], 0x36314152
pop rdi
movsxd rbp, dword [r9 + 0x4a]
movsxd rax, dword [rbp + 0x45]
push rbx
je 0x41fed9
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41fee1
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x41ff29
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41ff19
je 0x41ff5b
jo 0x41ff54
push rax
jbe 0x41ff65
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x41ff76
jo 0x41ff79
je 0x41ff4a
jbe 0x41ff72
movsxd rsp, dword [rbp + 0x35]
ja 0x41ff80
imul esi, dword [rbp + 0x49], 0x5f334152
movsxd rdx, dword [r10 + 0x4b]
push rbx
je 0x41ff55
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41ff94
movsxd rbx, dword [rdi + 0x73]
je 0x41ffa2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41ff9d
je 0x41ffb2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x41ff96
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x41ff9e
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x41ffe6
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41ffd6
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x420020
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x42002f
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x42004d
outsb dx, byte gs:[rsi]
je 0x420045
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x420063
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x420081
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x42009a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x420072
jo 0x4200a1
imul esi, dword [rdx + 0x49], 0x53456964
je 0x42007f
jbe 0x4200b0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jbe 0x420061
pop rdi
pop rdx
push rbx
je 0x42009d
outsw dx, word [rsi]
jb 0x4200e1
jb 0x4200d1
push r11
je 0x4200a2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4200e9
push rax
jbe 0x4200fa
jbe 0x4200cc
push r12
pop rdi
push rdx
push rbx
je 0x4200c2
jb 0x4200f9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4200fd
pop rdi
jb 0x420100
jb 0x420104
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x42011b
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4200e5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x420126
push r11
je 0x4200f9
jo 0x420128
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x420121
outsw dx, word [rsi]
jb 0x420165
jb 0x420155
push r11
je 0x420126
xor al, 0x64
jne 0x420168
je 0x42015d
insb byte [rdi], dx
je 0x420169
cmp byte [r13 + 0x73], dl
je 0x42014e
jae 0x420173
push r12
pop rdi
push rdx
push rbx
je 0x420149
jb 0x420180
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x420184
pop rdi
jb 0x420187
jb 0x42018b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x4201a2
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x420171
je 0x4201a5
jb 0x4201a4
xor dword fs:[rip + 0x735f4d5f], esi
je 0x4201aa
jb 0x4201bf
pop rdi
je 0x4201b6
jb 0x4201b5
push r11
je 0x420187
xor byte [rbx + 0x68], dh
jb 0x4201c1
pop rdi
jo 0x4201d4
jb 0x4201ab
push rbx
pop rdi
xor dword [rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4201d8
pop rdi
jae 0x4201d6
push r8
jbe 0x4201ed
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4201c5
jbe 0x4201f6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4201de
jbe 0x42020f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x4201ea
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x420229
movsxd rbx, dword [rdi + 0x73]
je 0x420237
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x420232
je 0x420247
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3645455f
jb 0x420253
jae 0x420259
jp 0x420257
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor dword [rcx], esi
ja 0x42026d
imul esi, dword [rbp + 0x41], 0x6577736e
jb 0x42026e
push rdx
push rbx
je 0x420242
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x420281
movsxd rbx, dword [rdi + 0x73]
je 0x42028f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42028a
je 0x42029f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x420273
xor byte [rbx + 0x68], dh
jb 0x4202ad
pop rdi
jo 0x4202c0
jb 0x420297
push rbx
je 0x420288
je 0x4202bc
jb 0x4202bb
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420293
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4202da
push rax
jbe 0x4202eb
jbe 0x4202bd
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4202bc
je 0x4202fe
jo 0x4202f7
push r8
jbe 0x420308
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4202d4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42030d
je 0x420322
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4202ef
jo 0x42031e
imul esi, dword [rdx + 0x49], 0x45456964
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x42033f
jb 0x420342
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x49], ebx
push rdx
push rdx
imul eax, dword [rbp + 0x45], 0x53527645
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x420335
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x420331
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x420367
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x420343
xor eax, 0x6574495f
jb 0x420378
movsxd rbp, dword [rdi + 0x6d]
jo 0x42037d
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x42038e
je 0x420391
jb 0x420377
push rbx
je 0x420365
jo 0x420394
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x53]
xor eax, 0x5a5f005f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4203ab
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4203b4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4203a8
push rbx
je 0x420398
je 0x4203cc
jb 0x4203cb
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4203a4
xor bl, byte [rdi + 0x5f]
je 0x4203d9
push 0x65706c65
jb 0x4203ca
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x4203cf
jae 0x4203f4
push rbx
je 0x4203c4
xor al, 0x64
jne 0x420406
je 0x4203fb
insb byte [rdi], dx
je 0x420407
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x4203e2
xor dword [rdi + 0x54], ebx
jne 0x420426
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x42041d
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x420406
xor ebx, dword [rdi + 0x53]
jo 0x420438
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x420444
pop rdi
jo 0x420457
jb 0x420444
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x420427
je 0x42045b
jb 0x42045a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420432
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x420479
push rax
jbe 0x42048a
jbe 0x42045c
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x420489
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4204a6
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x49]
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x42049e
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x420489
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4204ad
cmp byte [rbp + 0x73], dl
je 0x4204ad
jae 0x4204d2
push rbx
je 0x4204a1
xor al, 0x64
jne 0x4204e3
je 0x4204d8
insb byte [rdi], dx
je 0x4204e4
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4204c7
pop rdi
pop rdi
imul bp, word [rsp + rbp*2 + 0x5f], 0x4961
movsxd rax, dword [rbp + 0x4e]
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x420501
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4204f2
pop rdi
pop rdi
imul esi, dword [rbx + 0x5f], 0x65747962
push r12
pop rdi
pop rdi
pop rdi
jbe 0x42052c
insb byte [rdi], dx
jne 0x420533
jbe 0x420516
pop rdi
pop rdi
je 0x42054f
jo 0x42053d
push r8
push rbx
xor ebx, dword [rdi + 0x53]
pop rdi
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x420522
jbe 0x420553
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x42052a
jo 0x420559
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x42057b
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x420593
push rdx
push rdx
imul eax, dword [rbp + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x420562
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4205a3
push r11
je 0x420576
jo 0x4205a5
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x42058e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4205cf
push r11
je 0x4205a2
jo 0x4205d1
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x4f]
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rsp
push rsi
push rbx
je 0x4205c4
je 0x4205f8
jb 0x4205f7
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x420607
pop rdi
jae 0x420605
add byte [r15 + 0x5a], r11b
push rbx
je 0x4205de
jbe 0x42060f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4205e6
jo 0x420615
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
cmp byte [r8 + 0x6f], r14b
jo 0x420626
movsxd rbp, dword [rbx + 0x45]
jbe 0x4205ce
pop rdi
pop rdx
push rbx
je 0x420605
xor bl, byte [rdi + 0x5f]
jne 0x420646
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x420661
pop rdi
push r11
je 0x42061f
xor ebp, dword [rbp + 0x6f]
jbe 0x420658
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x420637
je 0x42066b
jb 0x42066a
push r11
xor bl, byte [rdi + 0x53]
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
push rdx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x42069f
jo 0x4206a2
je 0x420673
jbe 0x42069b
movsxd rsp, dword [rbp + 0x35]
ja 0x4206a9
imul esi, dword [rbp + 0x49], 0x74534e52
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4206b6
movsxd rbx, dword [rdi + 0x73]
je 0x4206c4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4206bf
je 0x4206d4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r9, dword [r9 + 0x45]
push rbx
je 0x4206b2
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x4206ba
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x420702
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x420720
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4206fc
xor al, 0x5f
je 0x420735
jb 0x420731
movsxd rbp, dword [rdi + 0x6d]
jo 0x420736
jbe 0x42073a
insb byte [rdi], dx
push r11
je 0x420715
jb 0x420746
je 0x420749
jb 0x42072f
push rbx
je 0x42071d
jo 0x42074c
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x53], eax
xor eax, 0x5a5f005f
xor qword [rdx], r14
jne 0x420776
jo 0x420779
je 0x42074a
jbe 0x420772
movsxd rsp, dword [rbp + 0x35]
ja 0x420780
imul esi, dword [rbp + 0x49], 0x534e4b52
je 0x42074f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42078e
movsxd rbx, dword [rdi + 0x73]
je 0x42079c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x420797
je 0x4207ac
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x4b]
movsxd rcx, dword [rdx + 0x45]
push rbx
je 0x42078f
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x420797
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x4207df
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x4207e0
jae 0x420805
xor eax, 0x74697277
push rdx
imul r8d, dword fs:[r8 + rsi*2 + 0x4f], 0x5f005f54
pop rdx
push rbx
je 0x4207ea
xor bl, byte [rdi + 0x5f]
je 0x42081f
push 0x65706c65
jb 0x420810
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x420845
jo 0x420848
je 0x42081b
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x42084f
je 0x420844
insb byte [rdi], dx
je 0x420850
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x42082b
xor dword [rdi + 0x54], ebx
jne 0x42086f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x420866
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push r11
je 0x42084f
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x420873
cmp dword [rcx + 0x6e], ecx
jo 0x4208a4
je 0x420877
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4208aa
je 0x42089f
insb byte [rdi], dx
je 0x4208ab
push r11
xor byte [rdi + 0x45], bl
xor r12d, dword [r15 + 0x65]
je 0x420896
jbe 0x420853
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4208cf
jo 0x4208d2
je 0x4208a3
jbe 0x4208cb
movsxd rsp, dword [rbp + 0x35]
ja 0x4208d9
imul esi, dword [rbp + 0x49], 0x45496364
push rbx
je 0x4208ae
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x4208b6
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x4208fe
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4208e9
xor bl, byte [rdi + 0x5f]
je 0x42091e
push 0x65706c65
jb 0x42090f
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x420944
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x42090b
xor dword [rdi + 0x54], ebx
jne 0x42094f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor bl, byte [rdi + 0x44]
jo 0x420946
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x42092e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x42096f
push r11
je 0x420944
je 0x420978
jb 0x420977
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x420957
xor bl, byte [rdi + 0x5f]
je 0x42098c
push 0x65706c65
jb 0x42097d
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x4209b3
je 0x420986
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x4209ba
je 0x4209af
insb byte [rdi], dx
je 0x4209bb
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x420998
xor dword [rdi + 0x54], ebx
jne 0x4209dc
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x4209d3
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4209bb
xor dword [rdi + 0x54], ebx
jne 0x4209ff
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x420a16
jo 0x420a19
je 0x4209ea
jbe 0x420a12
movsxd rsp, dword [rbp + 0x53]
je 0x4209df
xor al, 0x64
jne 0x420a21
je 0x420a16
insb byte [rdi], dx
je 0x420a22
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x420a17
push r12
pop rdi
jo 0x420a28
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x420a59
jo 0x420a5c
je 0x420a2d
jbe 0x420a55
movsxd rsp, dword [rbp + 0x43]
xor al, byte [rbp + 0x76]
add byte [rsi + 0x63], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
jae 0x420a5e
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x420a42
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x420a8c
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x420a9b
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x420ab9
outsb dx, byte gs:[rsi]
je 0x420ab1
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x4a], ecx
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x420acf
push rsp
pop rdi
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x420af5
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x420b12
jo 0x420b15
je 0x420ae6
jbe 0x420b0e
movsxd rsp, dword [rbp + 0x35]
ja 0x420b1c
imul esi, dword [rbp + 0x49], 0x5f374152
movsxd rbp, dword [r9 + 0x4a]
push rdx
xor ebx, dword [r15 + 0x53]
xor dword [rdi + 0x52], ebx
push rbx
je 0x420afa
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x420b39
movsxd rbx, dword [rdi + 0x73]
je 0x420b47
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x420b42
je 0x420b57
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x420b3a
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x420b42
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x420b8a
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x420b7a
je 0x420bbc
jo 0x420bb5
push rax
jbe 0x420bc6
xor dword [r9 + 0x4a], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x420ba2
jo 0x420bb0
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x420b9c
je 0x420bb6
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x420bbc
jae 0x420be1
push rbx
je 0x420bb0
xor al, 0x64
jne 0x420bf2
je 0x420be7
insb byte [rdi], dx
je 0x420bf3
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x420bcb
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x420bf2
pop rax
push rsp
pop rdi
push r11
je 0x420be5
je 0x420c27
jo 0x420c20
jo 0x420c0e
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x420c33
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x420c34
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x420c3d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x420c31
push rbx
je 0x420c21
je 0x420c55
jb 0x420c54
cmp byte fs:[r13 + 0x61], r13b
js 0x420c56
jae 0x420c62
jp 0x420c60
jbe 0x420bfe
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x420c7a
jo 0x420c7d
je 0x420c4e
jbe 0x420c76
movsxd rsp, dword [rbp + 0x35]
ja 0x420c84
imul esi, dword [rbp + 0x49], 0x31314152
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x420c59
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x420c98
movsxd rbx, dword [rdi + 0x73]
je 0x420ca6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x420ca1
je 0x420cb6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x420c94
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x420c9c
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x420ce4
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x420ccf
xor dword [rdi + 0x5f], ebx
jb 0x420d0b
jae 0x420d1b
outsd dx, dword [rsi]
push r11
je 0x420ce2
jo 0x420d11
imul esi, dword [rdx + 0x49], 0x45456964
push rax
push rsp
pop rdi
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x420cf6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x420d37
push r11
je 0x420d0c
je 0x420d40
jb 0x420d3f
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x420d2f
je 0x420d71
jo 0x420d6a
push rax
cmp byte [rbp + 0x73], dl
je 0x420d4b
jae 0x420d70
push rbx
je 0x420d3f
xor al, 0x64
jne 0x420d81
je 0x420d76
insb byte [rdi], dx
je 0x420d82
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x420d75
je 0x420da9
jb 0x420da8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420d80
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x420dc7
push rax
jbe 0x420dd8
jbe 0x420daa
xor al, byte [r13 + 0x4f]
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x420dab
outsw dx, word [rsi]
jb 0x420def
jb 0x420ddf
push r10
xor dword [r9], esi
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x420dbd
jb 0x420df4
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x420df8
pop rdi
jb 0x420dfb
jb 0x420dff
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x420e16
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x420de2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x420e17
push r10
push rbx
push r11
je 0x420dee
jo 0x420e1d
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
je 0x420dfa
jb 0x420e31
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x420e35
pop rdi
jb 0x420e38
jb 0x420e3c
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x420e52
push r11
xor eax, 0x5a5f005f
cmp qword [rcx + 0x6e], r9
jo 0x420e66
je 0x420e39
imul ebp, dword [rbp + 0x43], 0x4b504531
movsxd rax, dword [rax]
pop rdi
pop rdx
push rsp
push rbx
je 0x420e3b
je 0x420e6f
jb 0x420e6e
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x420e7e
pop rdi
jae 0x420e7c
add byte [r15 + 0x5a], r11b
push rbx
je 0x420e50
xor al, 0x5f
pop rdi
jae 0x420e8c
jb 0x420e8c
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x420e78
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x420e97
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x420eb4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x420e89
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x420ead
xor dword [rax], esi
jne 0x420edd
jo 0x420ee0
je 0x420eb3
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x420ee6
je 0x420edb
insb byte [rdi], dx
je 0x420ee7
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x420ec4
xor dword [rdi + 0x54], ebx
jne 0x420f08
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp byte [rbp + 0x73], dl
je 0x420eef
jae 0x420f14
push rbx
je 0x420ee3
xor al, 0x64
jne 0x420f25
je 0x420f1a
insb byte [rdi], dx
je 0x420f26
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x420f0e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x420f4f
push r11
je 0x420f24
je 0x420f58
jb 0x420f57
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x420f0f
pop rdi
pop rdx
push rbx
je 0x420f4b
jbe 0x420f7c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
imul r15d, dword fs:[r8 + 0x45], 0x5a5f006d
push rbx
je 0x420f60
je 0x420f7a
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x420fb1
je 0x420f84
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x420fb7
je 0x420fac
insb byte [rdi], dx
je 0x420fb8
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x420f90
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x420fb7
pop rax
push rsp
pop rdi
push r11
je 0x420faa
je 0x420fec
jo 0x420fe5
jo 0x420fd3
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x420ff8
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x420fca
xor ebx, dword [rdi + 0x53]
jo 0x420ffc
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x421008
pop rdi
jo 0x42101b
jb 0x421008
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x420feb
je 0x42101f
jb 0x42101e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x420ff6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42103d
push rax
jbe 0x42104e
jbe 0x421020
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x42104d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x42106a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x421040
pop rdi
push rbx
jo 0x421073
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42107f
pop rdi
jae 0x421085
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x421089
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4210a6
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
push rbx
je 0x42107b
xor ebp, dword [rbp + 0x6f]
jbe 0x4210b4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x421091
jo 0x4210c0
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4210a4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4210e5
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x421109
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x421122
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x4210fa
jo 0x421129
imul esi, dword [rdx + 0x49], 0x53456964
je 0x421107
jbe 0x421138
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x62
jae 0x42114e
jbe 0x4210ec
pop rdi
pop rdx
push rbx
je 0x421123
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x421147
xor dword [rdx], esi
jne 0x421177
jo 0x42117a
je 0x42114b
jbe 0x421173
movsxd rsp, dword [rbp + 0x53]
je 0x421140
xor al, 0x64
jne 0x421182
je 0x421177
insb byte [rdi], dx
je 0x421183
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x421189
insb byte [rdi], dx
je 0x421195
jb 0x421177
jbe 0x421134
pop rdi
pop rdx
push rbx
je 0x42116b
xor dword [rdi + 0x54], ebx
jne 0x4211af
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x4211c6
jo 0x4211c9
je 0x42119a
jbe 0x4211c2
movsxd rsp, dword [rbp + 0x53]
je 0x42118f
xor al, 0x64
jne 0x4211d1
je 0x4211c6
insb byte [rdi], dx
je 0x4211d2
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x49], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x4211c7
push r12
pop rdi
jo 0x4211d8
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4211c3
xor bl, byte [rdi + 0x5f]
je 0x4211f8
push 0x65706c65
jb 0x4211e9
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x42121f
je 0x4211f2
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x421226
je 0x42121b
insb byte [rdi], dx
je 0x421227
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x421204
xor dword [rdi + 0x54], ebx
jne 0x421248
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x42123f
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rsp
push rbx
push rbx
je 0x421228
cmp dword [rdi + 0x53], ebx
jo 0x42125b
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x42126b
add byte [edi + 0x5a], bl
ja 0x421283
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [r9], esi
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x42125b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42129a
movsxd rbx, dword [rdi + 0x73]
je 0x4212a8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4212a3
je 0x4212b8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x42129c
jo 0x4212a9
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x421294
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4212cd
je 0x4212e2
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x4212b3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4212f2
movsxd rbx, dword [rdi + 0x73]
je 0x421300
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4212fb
je 0x421310
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4212f4
xor ebx, dword [rdi + 0x5f]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42133c
push r10
jbe 0x42134c
push rbx
je 0x42130f
cmp dword [rdi + 0x42], ebx
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x421356
pop rdi
push 0x65706c65
jb 0x42133c
push rsp
pop rdi
jo 0x42134d
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x42137b
jo 0x421369
push r11
xor ebx, dword [rdi + 0x44]
jo 0x42135b
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x42134c
jbe 0x42137d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x421356
je 0x42138a
jb 0x421389
push rbx
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x42136a
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4213a9
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x4213c3
jo 0x4213c6
je 0x421397
jbe 0x4213bf
movsxd rsp, dword [rbp + 0x4c]
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4213a7
outsw dx, word [rsi]
jb 0x4213eb
jb 0x4213db
push r11
je 0x4213b1
je 0x4213e5
jb 0x4213e4
push r12
pop rdi
push rdx
push rbx
je 0x4213bb
jb 0x4213f2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4213f6
pop rdi
jb 0x4213f9
jb 0x4213fd
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x421414
add byte gs:[r15 + 0x5a], r11b
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x42142a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x421433
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x421427
push rbx
je 0x421419
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421458
movsxd rbx, dword [rdi + 0x73]
je 0x421466
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x421461
je 0x421476
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x42144f
xor bl, byte [rdi + 0x5f]
jae 0x42148b
jb 0x42148b
pop rdi
jo 0x42149e
jb 0x421475
push rbx
je 0x421466
je 0x42149a
jb 0x421499
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x421471
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4214b8
push rax
jbe 0x4214c9
jbe 0x42149b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4214c1
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4214de
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x4214bc
cmp dword [rdi + 0x53], ebx
jo 0x4214ef
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x4214ff
push rdx
push r12
pop rdi
jo 0x4214f5
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4214e1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x421522
push rbx
je 0x4214f9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421538
movsxd rbx, dword [rdi + 0x73]
je 0x421546
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x421541
je 0x421556
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x42150d
pop rdi
pop rdx
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x421559
jae 0x42157e
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x42159b
jo 0x42159e
je 0x42157e
je 0x42159f
imul ebp, dword [rsi + 0x67], 0x4e5a5f00
push rbx
je 0x421568
xor dword [rdi + 0x54], ebx
jne 0x4215ac
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x4215c3
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x421595
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4215ca
push r10
push rax
xor dword [rax], esi
jne 0x4215e1
jo 0x4215e4
je 0x4215b7
imul ebp, dword [rbp + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x4215e2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4215e6
pop rdi
jb 0x4215e9
jb 0x4215ed
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x421603
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4215d2
je 0x4215ec
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x4215f2
jae 0x421617
push rbx
je 0x4215e6
xor al, 0x64
jne 0x421628
je 0x42161d
insb byte [rdi], dx
je 0x421629
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x421601
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x421628
pop rax
push rsp
pop rdi
push r11
je 0x42161b
je 0x42165d
jo 0x421656
jo 0x421644
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x421669
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x42167c
jo 0x42167f
je 0x421650
jbe 0x421678
movsxd rsp, dword [rbp + 0x35]
ja 0x421686
imul esi, dword [rbp + 0x49], 0x454a6369
push rbx
je 0x42165b
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x421663
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x4216ab
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4216c9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4216d2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4216c6
push rbx
je 0x4216b2
xor ebx, dword [rdi + 0x53]
jo 0x4216e4
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4216f0
pop rdi
jo 0x421703
jb 0x4216f0
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4216d3
je 0x421707
jb 0x421706
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4216de
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x421725
push rax
jbe 0x421736
jbe 0x421708
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x42174a
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x421720
xor byte [rdi + 0x49], bl
je 0x421759
jb 0x421755
jae 0x42175f
push r8
movsxd rcx, dword [rdx + 0x30]
pop rdi
push rbx
pop rdi
jae 0x42176f
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x421746
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42177f
je 0x421794
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x42175f
xor ebx, dword [rdi + 0x53]
jo 0x421791
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42179d
pop rdi
jo 0x4217b0
jb 0x42179d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x421780
je 0x4217b4
jb 0x4217b3
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42178b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4217d2
push rax
jbe 0x4217e3
jbe 0x4217b5
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4217e2
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4217ff
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4217e5
je 0x421827
jo 0x421820
push rax
jbe 0x421831
xor cl, byte [r9 + 0x4a]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x42180d
jo 0x42181b
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x421806
xor dword [rdi + 0x54], ebx
jne 0x42184a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x42181b
xor al, 0x64
jne 0x42185d
je 0x421852
insb byte [rdi], dx
je 0x42185e
cmp byte [r13 + 0x73], dl
je 0x421843
jae 0x421868
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x42184a
je 0x421864
insd dword [rdi], dx
xor dword [rbp + 0x4a], eax
push rax
cmp byte [rbp + 0x73], dl
je 0x42186a
jae 0x42188f
push rbx
je 0x42185e
xor al, 0x64
jne 0x4218a0
je 0x421895
insb byte [rdi], dx
je 0x4218a1
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x421879
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4218a0
pop rax
push rsp
pop rdi
push r11
je 0x421893
je 0x4218d5
jo 0x4218ce
jo 0x4218bc
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4218e1
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4218e1
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4218bd
xor eax, 0x6574495f
jb 0x4218f2
movsxd rbp, dword [rdi + 0x6d]
jo 0x4218f7
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x421908
je 0x42190b
jb 0x4218f1
push rbx
je 0x4218df
jo 0x42190e
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x53], eax
xor eax, 0x5a5f005f
push rbx
je 0x4218f2
xor bl, byte [rdi + 0x5f]
je 0x421927
push 0x65706c65
jb 0x421918
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x42194d
jo 0x421950
je 0x421921
jbe 0x421949
movsxd rsp, dword [rbp + 0x4a]
push rbx
je 0x421917
xor al, 0x64
jne 0x421959
je 0x42194e
insb byte [rdi], dx
je 0x42195a
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x421937
xor dword [rdi + 0x54], ebx
jne 0x42197b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x421972
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x42195a
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x4219ac
jb 0x421983
push rbx
push r11
je 0x421972
xor ebx, dword [rdi + 0x53]
jo 0x4219a4
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4219b0
pop rdi
jo 0x4219c3
jb 0x4219b0
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x421993
je 0x4219c7
jb 0x4219c6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42199e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4219e5
push rax
jbe 0x4219f6
jbe 0x4219c8
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4219f5
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x421a12
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
push rbx
outsb dx, byte [rsi]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x421a1c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x421a25
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x421a19
push rbx
je 0x421a07
jo 0x421a36
imul esi, dword [rdx + 0x49], 0x45456964
jae 0x421a55
jb 0x421a52
jns 0x421a2e
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x421a3c
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x421a27
xor byte [rdi + 0x5f], bl
jne 0x421a68
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x421a83
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x421a84
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x421a98
push r11
je 0x421a54
xor ebp, dword [rbp + 0x6f]
jbe 0x421a8d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x421a6c
je 0x421aa0
jb 0x421a9f
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x421ac6
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x421aa1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x421ae2
push r11
je 0x421ab5
jo 0x421ae4
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x421aa4
pop rdi
pop rdx
push r11
je 0x421ae1
jbe 0x421b12
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x421aeb
je 0x421b1f
jb 0x421b1e
push rbx
push r11
xor byte [rdi + 0x45], bl
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x421b02
xor dword [rdi + 0x4d], ebx
jne 0x421b4a
js 0x421b38
jae 0x421b42
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x421b46
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x421b63
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x421b38
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x421b79
push r11
je 0x421b4c
jo 0x421b7b
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x421b64
xor bl, byte [rdi + 0x5f]
jae 0x421ba0
jb 0x421ba0
pop rdi
jo 0x421bb3
jb 0x421b8a
push rbx
je 0x421b7b
je 0x421baf
jb 0x421bae
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x421bbe
pop rdi
jae 0x421bbc
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x421bc0
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x421bdd
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x421bf9
je 0x421bca
jbe 0x421bf2
movsxd rsp, dword [rbp + 0x34]
jb 0x421bf3
push r8
js 0x421bdd
push rbx
je 0x421bd4
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x31727358
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
xor al, 0x74
jns 0x421c36
push r11
xor al, 0x5f
push rbx
xor al, 0x5f
jo 0x421c20
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x421c0c
xor al, 0x5f
push rbx
jo 0x421c3f
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x421c34
imul r14, qword [rax], 0x49615345
push rbx
je 0x421c2c
je 0x421c60
jb 0x421c5f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x421c37
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x421c7e
push rax
jbe 0x421c8f
jbe 0x421c61
xor dword [rbp + 0x45], eax
xor dword [r13 + 0x52], eax
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x421c65
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x421ca6
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x421c85
xor byte [rdi + 0x48], bl
pop rdi
jae 0x421cc4
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x421c98
xor al, 0x64
jne 0x421cda
je 0x421ccf
insb byte [rdi], dx
je 0x421cdb
xor qword [r8], rsi
jne 0x421cf0
jo 0x421cf3
je 0x421cc6
imul ebp, dword [rbp + 0x45], 0x4531624c
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x421cd4
jo 0x421d03
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x421ce9
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x421d2a
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x421d1b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x421d62
push rax
jbe 0x421d73
jbe 0x421d45
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x49], ebx
push r12
pop rdi
jo 0x421d60
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x421d91
jo 0x421d94
je 0x421d65
jbe 0x421d8d
movsxd rsp, dword [rbp + 0x35]
ja 0x421d9b
imul esi, dword [rbp + 0x45], 0x534e4b52
je 0x421d6a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x421da9
movsxd rbx, dword [rdi + 0x73]
je 0x421db7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x421db2
je 0x421dc7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push r11
je 0x421da1
jbe 0x421dd2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x421da9
jo 0x421dd8
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x421e22
je 0x421df5
imul ebp, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push r11
je 0x421def
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x421e13
cmp dword [rcx + 0x6e], ecx
jo 0x421e44
je 0x421e17
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x421e4a
je 0x421e3f
insb byte [rdi], dx
je 0x421e4b
push r11
xor byte [rdi + 0x45], bl
jo 0x421e62
jbe 0x421df1
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x421e6d
jo 0x421e70
je 0x421e41
jbe 0x421e69
movsxd rsp, dword [rbp + 0x35]
ja 0x421e77
imul esi, dword [rbp + 0x49], 0x4e454569
push rbx
je 0x421e49
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x421e73
je 0x421e53
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x421eac
push rbx
je 0x421e76
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x421e96
xor ebx, dword [rdi + 0x53]
jo 0x421ec8
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x421ed4
pop rdi
jo 0x421ee7
jb 0x421ed4
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x421eb7
je 0x421eeb
jb 0x421eea
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x421ec2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x421f09
push rax
jbe 0x421f1a
jbe 0x421eec
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x421f19
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x421f36
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4a]
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x421f2e
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x72
push r10
imul edx, dword [rbx + 0x30], 0x7645455f
jo 0x421f45
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x421f30
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x421f69
je 0x421f7e
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x421f4d
je 0x421f81
jb 0x421f80
jae 0x421f98
jb 0x421f95
jns 0x421f71
push rbx
xor byte [rdi + 0x45], bl
jbe 0x421f81
push rbx
xor dword [rdi + 0x50], ebx
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x421f82
jae 0x421fa7
xor eax, 0x75706e69
je 0x421f8e
jbe 0x421f4b
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x421fc7
jo 0x421fca
je 0x421f9b
jbe 0x421fc3
movsxd rsp, dword [rbp + 0x36]
ja 0x421fd1
imul esi, dword [rbp + 0x54], 0x635045
pop rdi
pop rdx
push rbx
je 0x421fa2
je 0x421fe4
jo 0x421fdd
push r11
je 0x421fa9
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x421ffa
outsb dx, byte gs:[rsi]
je 0x421ff2
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x49], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x421fff
jo 0x42200d
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x421ff8
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x42201c
xor dword [rdx], esi
jne 0x42204c
jo 0x42204f
je 0x422020
jbe 0x422048
movsxd rsp, dword [rbp + 0x53]
je 0x422015
xor al, 0x64
jne 0x422057
je 0x42204c
insb byte [rdi], dx
je 0x422058
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x50], eax
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x422038
xor dword [rdi + 0x54], ebx
jne 0x42207c
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rbx
je 0x42204e
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x42209f
outsb dx, byte gs:[rsi]
je 0x422097
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x422097
xor bl, byte [rdi + 0x5f]
je 0x4220cc
push 0x65706c65
jb 0x4220bd
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x4220f3
je 0x4220c6
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x4220fa
je 0x4220ef
insb byte [rdi], dx
je 0x4220fb
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x4220d6
xor dword [rdi + 0x54], ebx
jne 0x42211a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x422111
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4220fa
pop rdi
jns 0x422130
pop rdi
ja 0x422144
jo 0x422134
insd dword [rdi], dx
insd dword [rdi], dx
jb 0x42213b
jo 0x42214d
imul ebp, dword [rsi + 0x74], 0x50497265
jbe 0x42215e
cmp dword [r15 + 0x5f], r11d
outsd dx, dword fs:[rsi]
pop rdi
ja 0x422164
jo 0x42213a
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
push r11
je 0x422133
xor ebx, dword [rdi + 0x53]
jo 0x422165
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x422171
pop rdi
jo 0x422184
jb 0x422171
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x422154
je 0x422188
jb 0x422187
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42215f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4221a6
push rax
jbe 0x4221b7
jbe 0x422189
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4221b6
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4221d3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x4a], bl
jbe 0x4221d0
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x4221f1
jae 0x422181
insb byte [rdi], dx
jne 0x4221f9
push 0x4c474040
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x4221d0
je 0x422212
jo 0x42220b
push r8
cmp byte [rbp + 0x73], dl
je 0x4221ec
jae 0x422211
push rbx
je 0x4221e0
xor al, 0x64
jne 0x422222
je 0x422217
insb byte [rdi], dx
je 0x422223
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
outsw dx, word [rsi]
jo 0x422243
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x422256
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42225f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x422253
push rbx
je 0x422244
je 0x422278
jb 0x422277
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42224f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422296
push rax
jbe 0x4222a7
jbe 0x422279
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4222b2
jb 0x4222b5
movsxd rsi, dword [rcx + rcx*2 + 0x53]
cmp byte [rdi + 0x4a], bl
push rbx
pop rdi
jbe 0x42229f
push rsp
pop rdi
jo 0x4222a3
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42228f
xor eax, 0x67696c61
outsb dx, byte [rsi]
pop rdi
jae 0x4222dd
outsd dx, dword [rsi]
jb 0x4222cd
insd dword [edi], dx
xor esi, dword [rdx]
insd dword [rdi], dx
cmp byte [rbp + 0x45], al
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x4222fb
jo 0x4222fe
je 0x4222cf
jbe 0x4222f7
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x4222c8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x422309
push rbx
je 0x4222e0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42231f
movsxd rbx, dword [rdi + 0x73]
je 0x42232d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422328
je 0x42233d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor dword [rdi + 0x4d], ebx
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x42232a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x42235f
push r10
push rbx
je 0x422331
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x42236b
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x42237f
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x422389
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x42238d
pop rdi
jb 0x422390
jb 0x422394
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4223aa
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4223aa
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4223b3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4223a7
push rbx
je 0x422398
je 0x4223cc
jb 0x4223cb
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4223a3
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4223ea
push rax
jbe 0x4223fb
jbe 0x4223cd
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4223cc
je 0x42240e
jo 0x422407
push rax
jbe 0x422418
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4223e9
jbe 0x42241a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4223f1
jo 0x422420
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x42244f
je 0x422422
imul ebp, dword [rbp + 0x43], 0x4b504532
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x42241d
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x422441
xor dword [rax], esi
jne 0x422471
jo 0x422474
je 0x422447
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x42247a
je 0x42246f
insb byte [rdi], dx
je 0x42247b
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x422481
insb byte [rdi], dx
je 0x42248d
jb 0x42246f
jbe 0x42242c
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422495
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42249e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x422492
push rbx
je 0x422482
je 0x4224b6
jb 0x4224b5
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4224cd
jb 0x4224d0
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x4a], ebx
push rdx
jbe 0x4224dc
jbe 0x4224bc
push rsp
pop rdi
jo 0x4224c0
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4224ac
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4224eb
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x422506
je 0x4224d9
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rsp
push r11
je 0x4224e1
xor dword [rdi + 0x4d], ebx
jne 0x422529
js 0x422517
jae 0x422521
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422525
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x422542
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push r11
je 0x422514
xor ebp, dword [rbp + 0x6f]
jbe 0x42254d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x42252c
je 0x422560
jb 0x42255f
jbe 0x422502
pop rdi
pop rdx
push rbx
je 0x422539
xor dword [rdi + 0x54], ebx
jne 0x42257d
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rbx
je 0x42254f
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x4225a0
outsb dx, byte gs:[rsi]
je 0x422598
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4225a0
jo 0x4225de
jae 0x4225d3
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4225d8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4225f1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4225c8
jo 0x4225f7
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4225d5
jbe 0x422606
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r11
je 0x4225ed
jb 0x42261e
je 0x422621
jb 0x422607
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x422619
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x422605
xor al, 0x5f
pop rdi
jne 0x422645
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x42264c
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x422653
push r8
push rbx
je 0x422630
je 0x422664
jb 0x422663
push rbx
xor dword [rdi + 0x53], ebx
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x422658
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x422686
outsb dx, byte [rsi]
push r8
movsxd rbp, dword [r10 + 0x50]
movsxd rax, dword [rbp + 0x54]
xor dword [rdi + 0x54], ebx
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi + 0x53]
je 0x422670
jb 0x4226a2
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x4226bf
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4226b9
add byte [edi + 0x5a], bl
push rbx
je 0x422690
xor bl, byte [rdi + 0x5f]
je 0x4226c5
push 0x65706c65
jb 0x4226b6
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x4226bb
jae 0x4226e0
push rbx
je 0x4226b0
xor al, 0x64
jne 0x4226f2
je 0x4226e7
insb byte [rdi], dx
je 0x4226f3
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x4226d0
xor dword [rdi + 0x54], ebx
jne 0x422714
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x42270b
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4226f3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x422734
push rbx
xor dword fs:[r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x422727
je 0x42275b
jb 0x42275a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x422732
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422779
push rax
jbe 0x42278a
jbe 0x42275c
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x422758
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x422796
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x42279d
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x42277f
jo 0x4227ae
imul esi, dword [rdx + 0x49], 0x53456964
je 0x422787
xor ebp, dword [rbp + 0x6f]
jbe 0x4227c0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4227a8
je 0x4227c2
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
xor dword [rax], esi
jne 0x4227f8
jo 0x4227fb
je 0x4227ce
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x422801
je 0x4227f6
insb byte [rdi], dx
je 0x422802
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x4227da
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x422801
pop rax
push rsp
pop rdi
push r11
je 0x4227f4
je 0x422836
jo 0x42282f
jo 0x42281d
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x422842
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x422810
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x422851
push rbx
je 0x422828
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422867
movsxd rbx, dword [rdi + 0x73]
je 0x422875
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422870
je 0x422885
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x42283c
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4228a5
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4228ae
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4228a2
push rbx
je 0x422890
jo 0x4228bf
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
ja 0x4228e5
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [r14], esi
pop rdi
movsxd rbp, dword [r9 + 0x45]
jbe 0x4228ca
jo 0x4228d7
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4228c2
xor bl, byte [rdi + 0x44]
jae 0x42290b
jb 0x422908
jns 0x4228fa
jne 0x422916
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x42291f
jb 0x42291c
jns 0x4228f8
push rax
jbe 0x422909
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4228f1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x422932
push r11
je 0x422905
jo 0x422934
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x4228f4
pop rdi
pop rdx
cmp qword [rcx + 0x6e], r9
jo 0x422971
je 0x422944
imul ebp, dword [rbp + 0x39], 0x6c6c6966
outsb dx, byte [rsi]
jo 0x42297f
je 0x422951
jbe 0x42290e
pop rdi
pop rdx
push rbx
je 0x422944
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [rbp + 0x4e]
push rbx
je 0x422959
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4229be
jo 0x4229ac
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
outsb dx, byte [rsi]
jae 0x4229ca
jb 0x422998
xor eax, 0x31787863
xor dword [rax], eax
pop rdi
pop rdx
push rbx
je 0x422994
xor bl, byte [rdi + 0x5f]
jae 0x4229d0
jb 0x4229d0
pop rdi
jo 0x4229e3
jb 0x4229ba
push rbx
je 0x4229ab
je 0x4229df
jb 0x4229de
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4229ee
pop rdi
jae 0x4229ec
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4229f0
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x422a0d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4e], ecx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x422a1f
push r11
je 0x4229e8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422a2f
push rax
jbe 0x422a40
jbe 0x422a12
jbe 0x422a17
push r11
pop rdi
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x32]
add byte [r15 + 0x5a], r11b
push rbx
je 0x422a1d
jbe 0x422a4e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x422a27
je 0x422a5b
jb 0x422a5a
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x422a71
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rdx
jbe 0x422a89
jbe 0x422a5d
jo 0x422a6a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x422a5a
outsw dx, word [rsi]
jb 0x422a9e
jb 0x422a8e
push r10
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x422a6b
jb 0x422aa2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x422aa6
pop rdi
jb 0x422aa9
jb 0x422aad
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x422ac4
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x422a8e
xor dword [rdi + 0x54], ebx
jne 0x422ad2
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rax], esi
jne 0x422ae9
jo 0x422aec
je 0x422abf
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x422af2
je 0x422ae7
insb byte [rdi], dx
je 0x422af3
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422b0d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x422b16
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x422b0a
push rbx
je 0x422afa
je 0x422b2e
jb 0x422b2d
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x422ada
pop rdi
pop rdx
push rbx
je 0x422b11
xor dword [rdi + 0x54], ebx
jne 0x422b55
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x422b26
xor al, 0x64
jne 0x422b68
je 0x422b5d
insb byte [rdi], dx
je 0x422b69
cmp byte [r13 + 0x73], dl
je 0x422b4e
jae 0x422b73
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x422b54
xor bl, byte [rdi + 0x5f]
jae 0x422b90
jb 0x422b90
pop rdi
jo 0x422ba3
jb 0x422b7a
push rbx
je 0x422b6b
je 0x422b9f
jb 0x422b9e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x422b76
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422bbd
push rax
jbe 0x422bce
jbe 0x422ba0
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422bc6
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x422be3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x422bbd
outsw dx, word [rsi]
jb 0x422c01
jb 0x422bf1
push r10
push rbx
je 0x422bcb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422c0a
movsxd rbx, dword [rdi + 0x73]
je 0x422c18
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422c13
je 0x422c28
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x422bfe
jb 0x422c35
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x422c39
pop rdi
jb 0x422c3c
jb 0x422c40
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
cmp byte [rdi + 0x45], bl
xor al, 0x74
jns 0x422c57
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x422c23
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x422c58
push r10
push rbx
je 0x422c29
xor byte [rbx + 0x68], dh
jb 0x422c63
pop rdi
jo 0x422c76
jb 0x422c4d
push rbx
je 0x422c3e
je 0x422c72
jb 0x422c71
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x422c49
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422c90
push rax
jbe 0x422ca1
jbe 0x422c73
push rbx
je 0x422c69
jb 0x422ca0
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x422ca4
pop rdi
jb 0x422ca7
jb 0x422cab
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x422cc1
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x422c8e
xor bl, byte [rdi + 0x5f]
je 0x422cc3
push 0x65706c65
jb 0x422cb4
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp dword [rcx + 0x6e], ecx
jo 0x422cea
je 0x422cbd
imul ebp, dword [rbp + 0x49], 0x34317453
jne 0x422cf1
je 0x422ce6
insb byte [rdi], dx
je 0x422cf2
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x422ccd
xor dword [rdi + 0x54], ebx
jne 0x422d11
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x422d08
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x422d30
jno 0x422d1b
push rbx
je 0x422d06
je 0x422d3a
jb 0x422d39
xor ch, byte fs:[rcx + 0x64]
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x422d19
je 0x422d5b
jo 0x422d54
push rax
cmp byte [rbp + 0x73], dl
je 0x422d35
jae 0x422d5a
push rbx
je 0x422d29
xor al, 0x64
jne 0x422d6b
je 0x422d60
insb byte [rdi], dx
je 0x422d6c
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
imul ebp, dword [rsi + 0x70], 0x754d7475
je 0x422d91
js 0x422d2e
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x422daa
jo 0x422dad
je 0x422d8d
je 0x422dae
imul ebp, dword [rsi + 0x67], 0x52453143
push rbx
je 0x422d7e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422dbd
movsxd rbx, dword [rdi + 0x73]
je 0x422dcb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422dc6
je 0x422ddb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422de1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x422dfa
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x422dd2
jo 0x422e01
imul esi, dword [rdx + 0x49], 0x53456964
je 0x422ddf
jbe 0x422e10
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x422dfc
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x422e3d
push rbx
je 0x422e14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422e53
movsxd rbx, dword [rdi + 0x73]
je 0x422e61
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422e5c
je 0x422e71
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor ebx, dword [rdi + 0x4d]
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x422e63
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x422e9d
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x422eb1
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x31], 0x72617030
insd dword [rdi], dx
pop rdi
je 0x422ed0
jo 0x422ebe
xor al, byte [r13 + 0x69]
imul eax, dword [rax], 0x534e5a5f
je 0x422e9b
jbe 0x422ecc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x422ea7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422ee6
movsxd rbx, dword [rdi + 0x73]
je 0x422ef4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422eef
je 0x422f04
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
pop rdi
pop r15
jne 0x422f1f
je 0x422f14
jo 0x422f28
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push r11
je 0x422efc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x422f3b
movsxd rbx, dword [rdi + 0x73]
je 0x422f49
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x422f44
je 0x422f59
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x64
je 0x422f5a
jbe 0x422f3c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x422f44
xor ebx, dword [rdi + 0x53]
jo 0x422f76
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x422f82
pop rdi
jo 0x422f95
jb 0x422f82
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x422f65
je 0x422f99
jb 0x422f98
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x422f70
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x422fb7
push rax
jbe 0x422fc8
jbe 0x422f9a
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x422fc7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x422fe4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x422fc0
je 0x422fda
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x423011
je 0x422fe4
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x423017
je 0x42300c
insb byte [rdi], dx
je 0x423018
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x422ff0
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x423017
pop rax
push rsp
pop rdi
push r11
je 0x42300a
je 0x42304c
jo 0x423045
jo 0x423033
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x423058
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rsp
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3032
jae 0x42306f
pop rdi
movsxd rbp, dword [rcx + 0x73]
jae 0x42306c
je 0x423088
jo 0x423076
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x423060
jbe 0x423091
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x423068
jo 0x423097
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x4f]
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4230b6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4230bf
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4230b3
cmp byte fs:[r13 + 0x61], r13b
js 0x4230d0
jae 0x4230dc
jp 0x4230da
jbe 0x423078
pop rdi
pop rdx
push r11
je 0x4230b0
xor al, 0x64
jne 0x4230f2
je 0x4230e7
insb byte [rdi], dx
je 0x4230f3
xor qword [r10], rsi
jne 0x423108
jo 0x42310b
je 0x4230dc
jbe 0x423104
movsxd rsp, dword [rbp + 0x45]
movsxd rbp, dword [rbp + rax*2 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x4230de
xor al, 0x64
jne 0x423120
je 0x423115
insb byte [rdi], dx
je 0x423121
xor qword [r8], rsi
jne 0x423136
jo 0x423139
je 0x42310c
imul ebp, dword [rbp + 0x45], 0x50456c63
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x42313b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x423144
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x423138
xor dword fs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x423131
xor byte [rdi + 0x48], bl
pop rdi
jae 0x423170
insd dword [rdi], dx
xor byte [rbp + 0x53], al
je 0x423145
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x423196
outsb dx, byte gs:[rsi]
je 0x42318e
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor byte [rbp + 0x45], al
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4231c4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4231cd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4231c1
push rbx
je 0x4231b1
je 0x4231e5
jb 0x4231e4
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4231c3
je 0x4231f7
jb 0x4231f6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4231ce
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x423215
push rax
jbe 0x423226
jbe 0x4231f8
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4231f6
jae 0x42322a
outsb dx, byte [esi]
imul esi, dword [rsp], 0x534e5a5f
je 0x4231ff
xor byte [rdi + 0x48], bl
pop rdi
jae 0x42323e
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x423212
xor al, 0x64
jne 0x423254
je 0x423249
insb byte [rdi], dx
je 0x423255
cmp byte [r13 + 0x73], dl
je 0x42323a
jae 0x42325f
xor dword [rbp + 0x45], eax
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x423245
xor ebp, dword [rbp + 0x6f]
jbe 0x42327e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x42325b
jo 0x42328a
imul esi, dword [rdx + 0x49], 0x45456964
jo 0x4232a2
jbe 0x423235
pop rdi
pop rdx
cmp qword [rcx + 0x6e], r9
jo 0x4232b2
je 0x423285
imul ebp, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x4232c3
jo 0x4232c6
je 0x423297
jbe 0x4232bf
movsxd rsp, dword [rbp + 0x35]
ja 0x4232cd
imul esi, dword [rbp + 0x49], 0x35314152
pop rdi
movsxd rsp, dword [r9 + r9*2 + 0x63]
push rbx
je 0x4232a9
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x4232b1
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x4232f9
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
ja 0x423325
imul esi, dword [rbp + 0x6c], 0x524a496e
pop rdi
movsxd rbp, dword [r9 + 0x52]
cmp dword [r15 + 0x53], ebx
xor byte [rdi + 0x45], bl
jbe 0x423310
jo 0x42331d
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x423308
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x42335a
jb 0x423331
push rbx
push r11
je 0x423320
xor ebx, dword [rdi + 0x53]
jo 0x423352
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42335e
pop rdi
jo 0x423371
jb 0x42335e
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x423341
je 0x423375
jb 0x423374
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42334c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x423393
push rax
jbe 0x4233a4
jbe 0x423376
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4233a3
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4233c0
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r12d, dword [r15 + 0x65]
je 0x4233a5
jbe 0x423362
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x4233df
jo 0x4233e2
je 0x4233b3
jbe 0x4233db
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x4233b1
je 0x4233e5
jb 0x4233e4
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4233ef
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x423408
jb 0x4233ef
push rbx
je 0x4233e0
je 0x423414
jb 0x423413
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4233eb
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x423432
push rax
jbe 0x423443
jbe 0x423415
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x423415
outsw dx, word [rsi]
jb 0x423459
jb 0x423449
push r10
xor dword [r14], esi
pop rdi
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x423427
jb 0x42345e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x423462
pop rdi
jb 0x423465
jb 0x423469
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x423480
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x42344e
je 0x423490
jo 0x423489
push r8
xor dword [rdx], esi
jne 0x42349a
jo 0x42349d
je 0x42346e
jbe 0x423496
movsxd rsp, dword [rbp + 0x53]
je 0x423463
xor al, 0x64
jne 0x4234a5
je 0x42349a
insb byte [rdi], dx
je 0x4234a6
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x423495
xor dword [rdi + 0x4d], ebx
jne 0x4234dd
js 0x4234cb
jae 0x4234d5
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4234d9
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4234f6
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x4234c7
xor dword [rdi + 0x54], ebx
jne 0x42350b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x423522
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4234ef
xor ebx, dword [rdi + 0x53]
jo 0x423521
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42352d
pop rdi
jo 0x423540
jb 0x42352d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x423510
je 0x423544
jb 0x423543
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42351b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x423562
push rax
jbe 0x423573
jbe 0x423545
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x423572
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x42358f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x49], ecx
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x423587
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4235a4
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x423580
xor eax, 0x74695f5f
jb 0x4235b6
movsxd rbp, dword [rdi + 0x6d]
jo 0x4235bb
jbe 0x4235bf
insb byte [rdi], dx
push r11
je 0x42359a
jb 0x4235cb
je 0x4235ce
jb 0x4235b4
push rbx
je 0x4235a2
jo 0x4235d1
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor byte [rdi + 0x31], bl
xor al, 0x5f
je 0x4235e8
jb 0x4235e4
movsxd rbp, dword [rdi + 0x6d]
jo 0x4235e9
jbe 0x4235ed
insb byte [rdi], dx
push r12
pop rdi
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x4235fd
movsxd rbp, dword [rdi + 0x6d]
jo 0x423602
imul esi, dword [rbp + 0x72], 0x5f375349
add byte [r15 + 0x5a], r11b
push rbx
je 0x4235e4
xor dword [rbp + 0x61], ebp
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
push rbx
je 0x4235fa
je 0x42362e
jb 0x42362d
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x423605
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42364c
push rax
jbe 0x42365d
jbe 0x42362f
push r11
pop rdi
push r11
je 0x423627
xor byte [rbx + 0x68], dh
jb 0x423661
pop rdi
jo 0x423674
jb 0x42364b
push rsp
pop rdi
jo 0x423657
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x42368a
je 0x42365b
jbe 0x423683
movsxd rsp, dword [rbp + 0x32]
xor dh, byte [rdx + 0x65]
push rbp
outsb dx, byte [rsi]
jae 0x42368f
outsb dx, byte [esi]
outsb dx, byte fs:[rsi]
je 0x423675
outsb dx, byte gs:[rsi]
jb 0x423694
insb byte [rdi], dx
push 0x45
imul r10d, dword [r10 + 0x54], 0x5f00635f
pop rdx
push rbx
je 0x42367b
pop rdi
jae 0x4236bc
jb 0x4236b9
jns 0x423695
push rax
push rbx
je 0x423688
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4236c7
movsxd rbx, dword [rdi + 0x73]
je 0x4236d5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4236d0
je 0x4236e5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
xor eax, 0x5476455f
pop rdi
push rbx
pop rdi
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x4236cb
xor dword [rdi + 0x54], ebx
jne 0x42370f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x423726
jo 0x423729
je 0x4236fa
jbe 0x423722
movsxd rsp, dword [rbp + 0x53]
je 0x4236ef
xor al, 0x64
jne 0x423731
je 0x423726
insb byte [rdi], dx
je 0x423732
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x423727
push r12
pop rdi
jo 0x423738
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x423724
xor ebp, dword [rbp + 0x6f]
jbe 0x42375d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x42373e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42377d
movsxd rbx, dword [rdi + 0x73]
je 0x42378b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x423786
je 0x42379b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x4237aa
jbe 0x42373d
pop rdi
pop rdx
push rbx
je 0x42377a
pop rdi
jae 0x4237bb
jb 0x4237b8
jns 0x423794
push rax
push rbx
je 0x423783
jo 0x4237b2
imul esi, dword [rdx + 0x49], 0x53456964
xor dword [rdi + 0x45], ebx
jbe 0x4237b1
pop rdi
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x4237a1
xor al, 0x5f
pop rdi
jae 0x4237dd
jb 0x4237dd
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4237c9
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4237e8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x423805
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4e], ecx
push rbx
je 0x4237db
je 0x42380f
jb 0x42380e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4237e6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42382d
push rax
jbe 0x42383e
jbe 0x423810
push r11
push r11
pop rdi
push r11
pop r15
push r11
je 0x423810
cmp dword [rdi + 0x53], ebx
jo 0x423843
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x423853
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x42384d
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rsp
push r11
je 0x42383a
cmp dword [rdi + 0x53], ebx
jo 0x42386d
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x42387d
add byte [edi + 0x5a], bl
push rbx
je 0x423859
je 0x42389b
jo 0x423894
push r8
xor dword [rdx], esi
jne 0x4238a5
jo 0x4238a8
je 0x423879
jbe 0x4238a1
movsxd rsp, dword [rbp + 0x53]
je 0x42386e
xor al, 0x64
jne 0x4238b0
je 0x4238a5
insb byte [rdi], dx
je 0x4238b1
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42389f
xor dword [rdi + 0x54], ebx
jne 0x4238e3
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x4238b4
xor al, 0x64
jne 0x4238f6
je 0x4238eb
insb byte [rdi], dx
je 0x4238f7
cmp byte [r13 + 0x73], dl
je 0x4238dc
jae 0x423901
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4238e7
outsw dx, word [rsi]
jb 0x42392b
jb 0x42391b
push r10
xor ebx, dword [r15 + 0x4b]
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x4238f8
jb 0x42392f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x423933
pop rdi
jb 0x423936
jb 0x42393a
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x423951
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x42391c
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x42395a
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x423961
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x423947
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x423986
movsxd rbx, dword [rdi + 0x73]
je 0x423994
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42398f
je 0x4239a4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x423974
xor ebp, dword [rbp + 0x6f]
jbe 0x4239ad
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4239a4
xor al, 0x5f
push rbx
jo 0x4239d7
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x4239cc
imul r14, qword [rax], 0x49615345
push rbx
je 0x4239c4
je 0x4239f8
jb 0x4239f7
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4239cf
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x423a16
push rax
jbe 0x423a27
jbe 0x4239f9
xor dword [rbp + 0x45], eax
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4239f9
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x423a3a
push rbx
xor dword fs:[r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x423a4d
pop rdi
jae 0x423a5f
outsd dx, dword [rsi]
jb 0x423a4f
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x423a2b
je 0x423a45
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x423a7b
jo 0x423a7e
je 0x423a51
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x423a84
je 0x423a79
insb byte [rdi], dx
je 0x423a85
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x423a5d
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x423a84
pop rax
push rsp
pop rdi
push r11
je 0x423a77
je 0x423ab9
jo 0x423ab2
jo 0x423aa0
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x423ac5
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x423a93
xor bl, byte [rdi + 0x5f]
jae 0x423acf
jb 0x423acf
pop rdi
jo 0x423ae2
jb 0x423ab9
push rbx
je 0x423aaa
je 0x423ade
jb 0x423add
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x423aed
pop rdi
jae 0x423aeb
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x423aef
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x423b0c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
insd dword [rdi], dx
jo 0x423b1e
push r11
je 0x423ae7
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x423b2e
push rax
jbe 0x423b3f
jbe 0x423b11
jbe 0x423b16
push r11
pop rdi
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x32]
add byte [r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x423b49
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x423b52
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x423b46
push rbx
je 0x423b34
jo 0x423b63
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x423b46
xor ebp, dword [rbp + 0x6f]
jbe 0x423b7f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x423b60
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x423b9f
movsxd rbx, dword [rdi + 0x73]
je 0x423bad
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x423ba8
je 0x423bbd
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x423b5f
pop rdi
pop rdx
push rbx
je 0x423b97
insd dword [rdi], dx
js 0x423bb1
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
jae 0x423beb
jb 0x423bed
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x423bf2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x423bfb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x423bef
push rbx
je 0x423bdb
xor ebx, dword [rdi + 0x53]
jo 0x423c0d
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x423c19
pop rdi
jo 0x423c2c
jb 0x423c19
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x423bfc
je 0x423c30
jb 0x423c2f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x423c07
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x423c4e
push rax
jbe 0x423c5f
jbe 0x423c31
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x423c73
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x423c4b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x423c80
push r10
push rbx
je 0x423c56
jbe 0x423c87
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x423c5e
jo 0x423c8d
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x423c71
jb 0x423ca8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x423cac
pop rdi
jb 0x423caf
jb 0x423cb3
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x423cc9
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x423c97
xor al, 0x5f
pop rdi
jne 0x423cd8
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x423cd8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x423d17
movsxd rbx, dword [rdi + 0x73]
je 0x423d25
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x423d20
je 0x423d35
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x423d29
jo 0x423d58
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x423d3a
xor dword [rdi + 0x54], ebx
jne 0x423d7e
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x423d95
jo 0x423d98
je 0x423d6b
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x423d9e
je 0x423d93
insb byte [rdi], dx
je 0x423d9f
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x423dcb
jo 0x423dce
je 0x423d9f
jbe 0x423dc7
movsxd rsp, dword [rbp + 0x35]
ja 0x423dd5
imul esi, dword [rbp + 0x45], 0x6544364e
je 0x423dce
imul ebp, dword [rcx + rdi + 0x50], 0x69636572
jae 0x423de0
outsd dx, dword [rsi]
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
push r11
je 0x423db8
jbe 0x423de9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x423dc0
jo 0x423def
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x74706d65
jns 0x423de8
jbe 0x423da5
pop rdi
pop rdi
je 0x423e0c
pop rdi
jae 0x423e22
jb 0x423e25
add byte [rdi + 0x5a], bl
push rbx
je 0x423dee
outsw dx, word [rsi]
jb 0x423e32
jb 0x423e22
push r8
jbe 0x423e39
push r12
pop rdi
push rdx
push rbx
je 0x423dfe
jb 0x423e35
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x423e39
pop rdi
jb 0x423e3c
jb 0x423e40
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x423e57
add byte gs:[r15 + 0x5a], r11b
push r11
je 0x423e27
jbe 0x423e58
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x423e2f
jo 0x423e5e
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor r12d, dword [r13 + 0x6e]
jbe 0x423e12
pop rdi
pop rdx
push rbx
je 0x423e4e
je 0x423e82
jb 0x423e81
xor dh, byte fs:[rax]
push 0x77647261
jb 0x423e8d
pop rdi
movsxd rbp, dword [rdi + 0x6e]
movsxd rsi, dword [rbp + 0x72]
jb 0x423e96
outsb dx, byte [rsi]
movsxd rdi, dword [rcx + 0x45]
jbe 0x423e77
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rdi], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x423e7f
je 0x423e99
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x423ecf
jo 0x423ed2
je 0x423ea3
jbe 0x423ecb
movsxd rsp, dword [rbp + 0x53]
je 0x423e98
xor al, 0x64
jne 0x423eda
je 0x423ecf
insb byte [rdi], dx
je 0x423edb
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x423eb3
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x423eda
pop rax
push rsp
pop rdi
push r11
je 0x423ecd
je 0x423f0f
jo 0x423f08
jo 0x423ef6
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x423f1b
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x423f2e
jo 0x423f31
je 0x423f02
jbe 0x423f2a
movsxd rsp, dword [rbp + 0x44]
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x423eff
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x423f46
push rax
jbe 0x423f57
jbe 0x423f29
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x4a], ebx
push r12
pop rdi
jo 0x423f44
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x423f30
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x423f54
xor dword [rdx], esi
jne 0x423f84
jo 0x423f87
je 0x423f58
jbe 0x423f80
movsxd rsp, dword [rbp + 0x53]
je 0x423f4d
xor al, 0x64
jne 0x423f8f
je 0x423f84
insb byte [rdi], dx
je 0x423f90
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x423f72
outsw dx, word [rsi]
jb 0x423fb6
jb 0x423fa6
push r11
je 0x423f77
xor al, 0x64
jne 0x423fb9
je 0x423fae
insb byte [rdi], dx
je 0x423fba
xor qword [r10], rsi
jne 0x423fcf
jo 0x423fd2
je 0x423fa3
jbe 0x423fcb
movsxd rsp, dword [rbp + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x423f9f
jb 0x423fd6
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x423fda
pop rdi
jb 0x423fdd
jb 0x423fe1
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x423ff8
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x423fc8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x424007
movsxd rbx, dword [rdi + 0x73]
je 0x424015
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x424010
je 0x424025
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x424011
jbe 0x424042
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x42401d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42405c
movsxd rbx, dword [rdi + 0x73]
je 0x42406a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x424065
je 0x42407a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x42408c
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x424068
xor eax, 0x6574495f
jb 0x42409d
movsxd rbp, dword [rdi + 0x6d]
jo 0x4240a2
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x4240b3
je 0x4240b6
jb 0x42409c
push rbx
je 0x42408a
jo 0x4240b9
imul esi, dword [rdx + 0x49], 0x45456964
movsxd r13, dword [r9 + rcx*2 + 0x4e]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4240db
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
xor al, 0x5f
push rbx
je 0x4240b7
jbe 0x4240e8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop rdi
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x4240df
je 0x424113
jb 0x424112
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x424122
pop rdi
jae 0x424120
add byte [r15 + 0x5a], r11b
push rbx
je 0x4240f3
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x42413d
jb 0x424140
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x424107
je 0x42413b
jb 0x42413a
push rbx
xor byte [rdi + 0x45], bl
jbe 0x42412f
push rsp
pop rdi
jo 0x424133
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42411f
xor byte [rbx + 0x68], dh
jb 0x424159
pop rdi
jo 0x42416c
jb 0x424143
push rbx
je 0x424134
je 0x424168
jb 0x424167
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x424177
pop rdi
jae 0x424175
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x42414e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x42418f
push r11
je 0x424162
jo 0x424191
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x4f], eax
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4241af
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4241c8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x42419f
jo 0x4241ce
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4241ac
jbe 0x4241dd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4241ce
outsw dx, word [rsi]
jb 0x424212
jb 0x424202
push r10
xor dword [rip + 0x45634b5f], esi
push r12
pop rdi
push rdx
push rbx
je 0x4241e0
jb 0x424217
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x42421b
pop rdi
jb 0x42421e
jb 0x424222
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x424239
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x424203
xor dword [rdi + 0x54], ebx
jne 0x424247
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x42425e
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x424230
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x424271
push r11
je 0x424244
jo 0x424273
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x42426d
xor al, 0x70
jb 0x4242a9
outsd dx, dword [rsi]
jb 0x4242ac
je 0x4242be
pop rdi
jno 0x4242bd
jne 0x4242b0
push r11
je 0x424283
jo 0x4242b2
imul esi, dword [rdx + 0x49], 0x53456964
je 0x424290
jbe 0x4242c1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x4242a6
jb 0x4242d7
je 0x4242da
jb 0x4242c0
push rbx
xor dword [rdi + 0x45], ebx
insd dword [rdi], dx
jo 0x4242ed
movsxd rsp, dword [rbp + 0x49]
push r10
push rdx
imul eax, dword [rbp + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4242df
insd dword [rdi], dx
jne 0x424321
js 0x4242e6
jne 0x424320
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x45]
jbe 0x4242b9
pop rdi
pop rdx
ja 0x424330
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [r15 + rbx*2], esi
movsxd rsp, dword [r13 + r8*2 + 0x45]
jbe 0x424315
jo 0x424322
push rsp
pop rdi
add byte [rbx + 0x74], dh
jb 0x42433d
insd dword [rdi], dx
jo 0x42431d
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x424353
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42435c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x424350
push rbx
je 0x424340
je 0x424374
jb 0x424373
jae 0x42438a
jb 0x424387
jns 0x424363
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x424371
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x42435c
je 0x424376
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x4243ad
je 0x424380
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4243b3
je 0x4243a8
insb byte [rdi], dx
je 0x4243b4
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x42438d
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4243b4
pop rax
push rsp
pop rdi
push r11
je 0x4243a7
je 0x4243e9
jo 0x4243e2
jo 0x4243d0
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4243f5
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4243c7
jo 0x4243f6
imul esi, dword [rdx + 0x49], 0x43456964
xor dword [rcx + 0x52], ecx
push rdx
imul esi, dword [rsi + 0x45], 0x5f544f45
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push rbx
je 0x4243ed
je 0x424421
jb 0x424420
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4243f8
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42443f
push rax
jbe 0x424450
jbe 0x424422
xor dword [r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x424453
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x42446c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x424445
je 0x424479
jb 0x424478
push rbx
je 0x42444e
jbe 0x42447f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
jo 0x42449d
jbe 0x424430
pop rdi
pop rdx
push rbx
je 0x42446c
je 0x4244a0
jb 0x42449f
xor dword fs:[r9 + 0x52], ecx
jbe 0x4244b9
push r12
pop rdi
jo 0x42449d
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42448e
jbe 0x4244bf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x42449a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4244d9
movsxd rbx, dword [rdi + 0x73]
je 0x4244e7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4244e2
je 0x4244f7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4244d7
xor dword [rdi + 0x54], ebx
jne 0x42451b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x4244ec
xor al, 0x64
jne 0x42452e
je 0x424523
insb byte [rdi], dx
je 0x42452f
cmp qword [r9 + 0x6e], rcx
jo 0x424545
je 0x424518
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x42451d
xor byte [rdi + 0x48], bl
pop rdi
jae 0x42455c
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x424576
jo 0x424579
je 0x42454c
imul ebp, dword [rbp + 0x4c], 0x45453062
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x424555
xor ebx, dword [rdi + 0x53]
jo 0x424587
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x424593
pop rdi
jo 0x4245a6
jb 0x424593
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x424576
je 0x4245aa
jb 0x4245a9
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x424581
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4245c8
push rax
jbe 0x4245d9
jbe 0x4245ab
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4245d8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4245f5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
pop rdi
pop r15
jo 0x424608
jb 0x4245db
jbe 0x424598
pop rdi
pop rdx
push rbx
je 0x4245d0
xor ebx, dword [rdi + 0x53]
jo 0x424602
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42460e
pop rdi
jo 0x424621
jb 0x42460e
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4245f1
je 0x424625
jb 0x424624
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4245fc
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x424643
push rax
jbe 0x424654
jbe 0x424626
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x424653
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x424670
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rdi + rbx*2], esi
pop r15
je 0x424671
insb byte [rdi], dx
je 0x42467d
jb 0x42465f
push rdx
push r11
je 0x424658
je 0x42469a
jo 0x424688
pop rdi
imul ebp, dword [rsi + 0x66], 0x5a5f006f
push rbx
je 0x424661
xor ebx, dword [rdi + 0x53]
jo 0x424693
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42469f
pop rdi
jo 0x4246b2
jb 0x42469f
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x424682
je 0x4246b6
jb 0x4246b5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42468d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4246d4
push rax
jbe 0x4246e5
jbe 0x4246b7
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4246e4
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x424701
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x4a], ecx
push rbx
pop rdi
push r11
cmp byte [rdi + 0x44], bl
jo 0x4246f9
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x424716
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42471f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x424713
push rbx
je 0x424704
je 0x424738
jb 0x424737
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42470f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x424756
push rax
jbe 0x424767
jbe 0x424739
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x424734
xor dword [rdi + 0x54], ebx
jne 0x424778
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x42478f
jo 0x424792
je 0x424763
jbe 0x42478b
movsxd rsp, dword [rbp + 0x53]
je 0x424758
xor al, 0x64
jne 0x42479a
je 0x42478f
insb byte [rdi], dx
je 0x42479b
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x424784
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4247b9
push r10
push rax
push rbx
je 0x42478e
jo 0x4247bd
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
je 0x424799
jb 0x4247d0
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4247d4
pop rdi
jb 0x4247d7
jb 0x4247db
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4247f1
push r11
xor eax, 0x5a5f005f
push rbx
je 0x4247be
cmp dword [rdi + 0x5f], ebx
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword gs:[esi]
jb 0x42481a
push r8
movsxd rax, dword [r13 + 0x4e]
push rbx
je 0x4247db
xor eax, 0x72657469
je 0x424821
jb 0x424813
je 0x424828
imul esi, dword [rbx + rsi*2 + 0x49], 0x31455f54
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword gs:[esi]
jb 0x42484a
push r10
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x424854
jo 0x424857
je 0x424828
jbe 0x424850
movsxd rsp, dword [rbp + 0x35]
ja 0x42485e
imul esi, dword [rbp + 0x45], 0x634b50
pop rdi
pop rdx
push rbx
je 0x42482a
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x424874
jb 0x424877
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x424840
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42487f
movsxd rbx, dword [rdi + 0x73]
je 0x42488d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x424888
je 0x42489d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x42488e
push rsp
pop rdi
jo 0x424892
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x424882
je 0x4248c4
jo 0x4248bd
push rax
xor dword [rdx], esi
jne 0x4248ce
jo 0x4248d1
je 0x4248a2
jbe 0x4248ca
movsxd rsp, dword [rbp + 0x53]
je 0x424897
xor al, 0x64
jne 0x4248d9
je 0x4248ce
insb byte [rdi], dx
je 0x4248da
push r11
xor byte [rdi + 0x45], bl
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor ebx, dword [rdi + 0x76]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
ja 0x424908
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [r9], esi
pop rdi
movsxd rdx, dword [r10 + 0x4e]
push rbx
je 0x4248e0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42491f
movsxd rbx, dword [rdi + 0x73]
je 0x42492d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x424928
je 0x42493d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x424921
jo 0x42492e
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x42491e
je 0x424952
jb 0x424951
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x424961
pop rdi
jae 0x42495f
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x42493b
outsw dx, word [rsi]
jb 0x42497f
jb 0x42496f
push r10
push rax
xor dword [rdx], esi
jne 0x424987
jo 0x42498a
je 0x42495b
jbe 0x424983
movsxd rsp, dword [rbp + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x424956
jb 0x42498d
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x424991
pop rdi
jb 0x424994
jb 0x424998
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x4249af
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x42497a
xor al, 0x5f
pop rdi
jne 0x4249ba
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x4249c1
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4249c8
push r8
push rbx
je 0x4249a3
jo 0x4249d2
imul esi, dword [rdx + 0x49], 0x53456964
xor bl, byte [rdi + 0x53]
push r11
xor dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
push rdx
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4249cd
movsxd rbp, dword [rdi + 0x70]
jns 0x4249fb
outsb dx, byte [rsi]
push r8
movsxd rbp, dword [r10 + 0x50]
movsxd rax, dword [rbp + 0x54]
xor dword [rdi + 0x54], ebx
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4249e9
xor bl, byte [rdi + 0x57]
imul ebx, dword [rdi + 0x72], 0x65
jae 0x424a37
insb byte [rdi], dx
je 0x424a24
je 0x424a40
jo 0x424a2e
pop rdi
imul ebp, dword [rbp + 0x70], 0x7453496c
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x424a47
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x424a56
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x45], 0x76453143
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x424a5d
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x424a39
xor al, 0x5f
je 0x424a72
jb 0x424a6e
movsxd rbp, dword [rdi + 0x6d]
jo 0x424a73
jbe 0x424a77
insb byte [rdi], dx
push r11
je 0x424a52
jb 0x424a83
je 0x424a86
jb 0x424a6c
push rbx
je 0x424a5a
jo 0x424a89
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x53]
xor eax, 0x5f5f005f
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x424aa4
je 0x424aa9
jb 0x424ab2
ja 0x424a85
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x424abb
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x424ad4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x424aad
je 0x424ae1
jb 0x424ae0
push rbx
je 0x424ab6
jbe 0x424ae7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x62
jae 0x424afd
jbe 0x424a9b
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x424b04
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x424b0d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x424b01
xor al, byte fs:[r13 + 0x76]
add byte [rax + 0x74], dh
push 0x64616572
pop rdi
insd dword [rdi], dx
jne 0x424b3e
js 0x424b2c
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x424b16
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x424b68
jb 0x424b3f
push rbx
push r11
je 0x424b2e
xor ebx, dword [rdi + 0x53]
jo 0x424b60
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x424b6c
pop rdi
jo 0x424b7f
jb 0x424b6c
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x424b4f
je 0x424b83
jb 0x424b82
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x424b5a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x424ba1
push rax
jbe 0x424bb2
jbe 0x424b84
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x424bb1
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x424bce
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x424bac
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x424bc6
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x424be4
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x424bfd
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x424bd4
jo 0x424c03
imul esi, dword [rdx + 0x49], 0x53456964
je 0x424be1
jbe 0x424c12
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r11
je 0x424bf9
jb 0x424c2a
je 0x424c2d
jb 0x424c13
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x424c25
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x424c10
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x424c51
push r11
je 0x424c26
je 0x424c5a
jb 0x424c59
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
je 0x424c66
push rsp
jo 0x424c69
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x424c59
jbe 0x424c16
pop rdi
pop rdx
push rbx
je 0x424c4d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x424c8e
push r11
je 0x424c61
jo 0x424c90
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x424c50
pop rdi
pop rdx
ja 0x424cc7
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [r14], esi
pop rdi
movsxd rbp, dword [r9 + 0x45]
jbe 0x424cac
jo 0x424cb9
push rsp
pop rdi
add byte [rsi + 0x72], ah
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x424ce9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x424cf2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x424ce6
push rbx
je 0x424cd7
je 0x424d0b
jb 0x424d0a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x424ce2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x424d29
push rax
jbe 0x424d3a
jbe 0x424d0c
jae 0x424d44
jb 0x424d41
jns 0x424d1d
push rbx
cmp byte [rdi + 0x45], bl
jbe 0x424d2b
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x424d48
jno 0x424d2e
push rax
push rbx
je 0x424d1d
jo 0x424d4c
imul esi, dword [rdx + 0x49], 0x45456964
push rdx
push r11
je 0x424d29
xor ebp, dword [rbp + 0x6f]
jbe 0x424d62
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x424d4a
jbe 0x424d7b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x424d5e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x424d9f
push r11
je 0x424d72
jo 0x424da1
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x5f32316c
pop r15
jae 0x424dda
jo 0x424dc5
je 0x424dcb
push r10
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x424ddc
je 0x424dc0
imul eax, dword fs:[rbp + 0x62], 0x74534b52
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor eax, 0x5a5f005f
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x424e0d
je 0x424dde
jbe 0x424e06
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x53], 0x65636170
movsxd r8, dword [r8]
pop rdi
pop rdx
push rbx
push r11
je 0x424de9
je 0x424e1d
jb 0x424e1c
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x424e3b
jo 0x424e3e
je 0x424e0f
jbe 0x424e37
movsxd rsp, dword [rbp + 0x35]
ja 0x424e45
imul esi, dword [rbp + 0x49], 0x36314152
pop rdi
movsxd rbp, dword [r9 + 0x49]
movsxd rax, dword [rbp + 0x45]
push rbx
je 0x424e21
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x424e29
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x424e71
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x424ea2
jo 0x424ea5
je 0x424e76
jbe 0x424e9e
movsxd rsp, dword [rbp + 0x35]
ja 0x424eac
imul esi, dword [rbp + 0x49], 0x33415269
pop rdi
movsxd rcx, dword [r9 + 0x52]
push rbx
je 0x424e83
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x424ec2
movsxd rbx, dword [rdi + 0x73]
je 0x424ed0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x424ecb
je 0x424ee0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x424ec3
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x424ecb
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x424f13
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x424f04
outsw dx, word [rsi]
jb 0x424f48
jb 0x424f38
push rbx
je 0x424f10
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x424f4f
movsxd rbx, dword [rdi + 0x73]
je 0x424f5d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x424f58
je 0x424f6d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x424f43
jb 0x424f7a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x424f7e
pop rdi
jb 0x424f81
jb 0x424f85
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x424f9c
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x424f66
xor dword [rbx + 0x68], esp
jb 0x424f9a
je 0x424faf
imul esi, dword [rbx + rsi*2 + 0x49], 0x63374563
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x424fab
jb 0x424fb1
push r8
movsxd rdx, dword [r11 + 0x32]
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push r11
je 0x424f92
jbe 0x424fc3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x424f9a
jo 0x424fc9
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x6e6f7266
je 0x424fc2
jbe 0x424f7f
pop rdi
pop rdi
jae 0x424ff7
pop rdi
jae 0x424ffb
jb 0x424ffe
add byte [rbp + 0x73], dh
je 0x424fd9
outsb dx, byte [rsi]
js 0x424f95
pop rdi
pop rdx
push rbx
je 0x424fcc
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x424ff0
xor dword [rdx], esi
jne 0x425020
jo 0x425023
je 0x424ff4
jbe 0x42501c
movsxd rsp, dword [rbp + 0x53]
je 0x424fe9
xor al, 0x64
jne 0x42502b
je 0x425020
insb byte [rdi], dx
je 0x42502c
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push rbx
je 0x425016
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x425055
movsxd rbx, dword [rdi + 0x73]
je 0x425063
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42505e
je 0x425073
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x42504c
xor dword [rdi + 0x54], ebx
jne 0x425090
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x425077
jae 0x42509c
push rbx
je 0x42506b
xor al, 0x64
jne 0x4250ad
je 0x4250a2
insb byte [rdi], dx
je 0x4250ae
push r11
xor byte [rdi + 0x45], bl
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x4a], ebx
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x4250a3
push r12
pop rdi
jo 0x4250b4
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42509f
xor bl, byte [rdi + 0x5f]
je 0x4250d4
push 0x65706c65
jb 0x4250c5
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rax], esi
jne 0x4250fa
jo 0x4250fd
je 0x4250d0
imul ebp, dword [rbp + 0x4a], 0x34317453
jne 0x425104
je 0x4250f9
insb byte [rdi], dx
je 0x425105
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x4250e0
xor dword [rdi + 0x54], ebx
jne 0x425124
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor al, 0x5f
jo 0x42511b
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
cmp byte [rbp + r12*2 + 0x73], r10b
je 0x425118
jae 0x42513d
cmp dword [rbx + 0x6f], esi
insb byte [rdi], dx
jbe 0x425143
push rbx
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x425128
jbe 0x4250e5
pop rdi
pop rdx
push rbx
je 0x42511c
xor byte [rdi + 0x48], bl
pop rdi
jae 0x42515b
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x42512f
xor al, 0x64
jne 0x425171
je 0x425166
insb byte [rdi], dx
je 0x425172
cmp qword [r9 + 0x6e], rcx
jo 0x425188
je 0x42515b
imul ebp, dword [rbp + 0x45], 0x4531624c
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x425162
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
insd dword [rdi], dx
cmp qword fs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4251a9
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x425192
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x4251b7
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x4251d8
insb byte [rdi], dx
jne 0x4251df
push r12
pop rdi
pop rdi
pop rdi
je 0x4251fc
jo 0x4251ea
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4251fb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x425204
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4251f8
push rbx
je 0x4251e9
je 0x42521d
jb 0x42521c
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4251f4
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42523b
push rax
jbe 0x42524c
jbe 0x42521e
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x425257
jb 0x42525a
movsxd rsi, dword [rcx + rcx*2 + 0x53]
cmp byte [rdi + 0x49], bl
push rbx
pop rdi
jbe 0x425244
push rsp
pop rdi
jo 0x425248
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rsp
push rsi
push rbx
je 0x42523b
je 0x42526f
jb 0x42526e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x425246
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42528d
push rax
jbe 0x42529e
jbe 0x425270
add byte [r15 + 0x5a], r11b
push rbx
je 0x42526a
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x42528c
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4252aa
xor eax, 0x67696c61
outsb dx, byte [rsi]
pop rdi
jae 0x4252f8
outsd dx, dword [rsi]
jb 0x4252e8
insd dword [edi], dx
xor esi, dword [rdx]
insd dword [rdi], dx
cmp byte [rbp + 0x45], al
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4252d1
je 0x4252eb
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x425321
jo 0x425324
je 0x4252f5
jbe 0x42531d
movsxd rsp, dword [rbp + 0x53]
je 0x4252ea
xor al, 0x64
jne 0x42532c
je 0x425321
insb byte [rdi], dx
je 0x42532d
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x425305
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x42532c
pop rax
push rsp
pop rdi
push r11
je 0x42531f
je 0x425361
jo 0x42535a
jo 0x425348
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x42536d
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42533b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x42537c
push r11
je 0x425351
je 0x425385
jb 0x425384
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x42533c
pop rdi
pop rdx
push rbx
je 0x425373
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4253ba
push rax
jbe 0x4253cb
jbe 0x42539d
movsxd r13, dword [r13 + rax*2 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x425395
pop rdi
push rdi
imul ebx, dword [rdi + 0x72], 0x65
jae 0x4253e4
insb byte [rdi], dx
je 0x4253d1
je 0x4253ed
jo 0x4253db
push r11
je 0x4253ac
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x4253e6
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x4253fa
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x76453243
add byte [rdi + 0x5a], bl
push rbx
je 0x4253d3
xor byte [rdi + 0x48], bl
pop rdi
jae 0x425412
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x4253fc
jae 0x425421
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x42540b
je 0x42543f
jb 0x42543e
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x425418
je 0x425432
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
xor dword [rdx], esi
jne 0x425468
jo 0x42546b
je 0x42543c
jbe 0x425464
movsxd rsp, dword [rbp + 0x53]
je 0x425431
xor al, 0x64
jne 0x425473
je 0x425468
insb byte [rdi], dx
je 0x425474
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x42544c
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x425473
pop rax
push rsp
pop rdi
push r11
je 0x425466
je 0x4254a8
jo 0x4254a1
jo 0x42548f
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4254b4
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x425492
pop rdi
push rbx
jo 0x4254c5
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4254d1
pop rdi
jae 0x4254d7
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4254db
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4254f8
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4254cd
xor dword [rdi + 0x54], ebx
jne 0x425511
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x4254e2
xor al, 0x64
jne 0x425524
je 0x425519
insb byte [rdi], dx
je 0x425525
xor qword [r10], rsi
jne 0x42553a
jo 0x42553d
je 0x42550e
jbe 0x425536
movsxd rsp, dword [rbp + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x425549
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x425552
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x425546
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x42553b
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x425571
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x42557b
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x425554
jb 0x425586
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x4255a3
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x42559d
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x4255a5
insd dword [rdi], dx
movsxd rax, dword [r13 + 0x45]
push rax
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x42559a
je 0x4255ce
jb 0x4255cd
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4255a5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4255ec
push rax
jbe 0x4255fd
jbe 0x4255cf
xor dword [r13 + 0x76], eax
add byte [rsi + 0x67], ah
je 0x42560b
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
push rbx
je 0x4255e6
je 0x42561a
jb 0x425619
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4255f1
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x425638
push rax
jbe 0x425649
jbe 0x42561b
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x42561b
outsw dx, word [rsi]
jb 0x42565f
jb 0x42564f
push r10
xor dword [r9], esi
xor dword [rdi + 0x78], ebx
push r12
pop rdi
push rdx
push rbx
je 0x42562d
jb 0x425664
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x425668
pop rdi
jb 0x42566b
jb 0x42566f
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x425686
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x425653
jo 0x425682
imul esi, dword [rdx + 0x49], 0x61456964
push rbx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x425666
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4256a5
insd dword [rdi], dx
xor byte [rbp + 0x50], al
jbe 0x4256bf
xor byte [rbp + 0x45], al
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x425695
je 0x4256af
insd dword [rdi], dx
xor dword [rbp + 0x49], eax
push rax
cmp byte [rbp + 0x73], dl
je 0x4256b5
jae 0x4256da
push rbx
je 0x4256a9
xor al, 0x64
jne 0x4256eb
je 0x4256e0
insb byte [rdi], dx
je 0x4256ec
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x4256c4
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4256eb
pop rax
push rsp
pop rdi
push r11
je 0x4256de
je 0x425720
jo 0x425719
jo 0x425707
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x42572c
push r10
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rsp
xor qword [r9], rsi
outsb dx, byte [rsi]
jo 0x425742
je 0x425713
jbe 0x42573b
movsxd rsp, dword [rbp]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x425747
push rax
jbe 0x4256dd
pop rdi
pop rdx
push rbx
je 0x425714
xor dword [rdi + 0x54], ebx
jne 0x425758
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
cmp dword [rcx + 0x6e], ecx
jo 0x425770
je 0x425743
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x425776
je 0x42576b
insb byte [rdi], dx
je 0x425777
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x42575e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x42579f
push r11
je 0x425774
je 0x4257a8
jb 0x4257a7
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x42578c
pop rdi
imul ebp, dword [rsi + 0x64], 0x74534649
xor dh, byte [rsi*2 + 0x6f66696e]
jb 0x4257d6
pop rdi
imul ebp, dword [rsi + 0x74], 0x7369645f
je 0x4257e5
imul esp, dword [rdx + 0x75], 0x6e6f6974
imul rax, qword [r13 + 0x53], 0x6c363274
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x425803
outsb dx, byte gs:[rsi]
je 0x4257fb
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x4a]
push rbx
xor ebx, dword [rdi + 0x45]
push r11
xor dword [rdi + 0x44], ebx
jo 0x425819
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x425804
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42583d
je 0x425852
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x425821
je 0x425855
jb 0x425854
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x42586d
jb 0x425870
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor byte [rdi + 0x4a], bl
push rdx
jbe 0x42587c
jbe 0x42585e
push rbx
xor dword [rdi + 0x50], ebx
push rsp
pop rdi
jo 0x425864
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x425883
jno 0x425869
movsxd rax, dword [rbp + 0x4e]
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x425889
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x42587a
pop rdi
pop rdi
imul esi, dword [rbx + 0x5f], 0x72616863
push r12
pop rdi
pop rdi
pop rdi
jbe 0x4258b4
insb byte [rdi], dx
jne 0x4258bb
pop rdi
pop rdi
je 0x4258d7
jo 0x4258c5
push r10
push rbx
je 0x42589e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4258dd
movsxd rbx, dword [rdi + 0x73]
je 0x4258eb
imul ebp, dword [rsi + 0x67], 0x5f335349
push rbx
je 0x4258b4
xor dword [rbx + 0x68], esp
jb 0x4258e8
je 0x4258fd
imul esi, dword [rbx + rsi*2 + 0x49], 0x455f3353
push rbx
push r11
xor ebx, dword [rdi + 0x45]
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4258dd
outsw dx, word [rsi]
jb 0x425921
jb 0x425911
push r10
cmp dword [r15 + 0x4b], ebx
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x4258ee
jb 0x425925
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x425929
pop rdi
jb 0x42592c
jb 0x425930
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x425947
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x425912
xor al, 0x5f
pop rdi
jne 0x425952
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x425959
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x425960
push r8
push rbx
je 0x42593f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42597e
movsxd rbx, dword [rdi + 0x73]
je 0x42598c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x425987
je 0x42599c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push rbx
push r11
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp dword [rdi + 0x53], ebx
cmp byte [rdi + 0x52], bl
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x42598a
xor al, 0x70
jb 0x4259c6
outsd dx, dword [rsi]
jb 0x4259c9
je 0x4259db
pop rdi
jno 0x4259da
jne 0x4259cd
push r11
je 0x4259a0
jo 0x4259cf
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4259ad
jbe 0x4259de
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x4259c3
jb 0x4259f4
je 0x4259f7
jb 0x4259dd
push rbx
xor dword [rdi + 0x45], ebx
insd dword [rdi], dx
jo 0x425a0a
movsxd rsp, dword [rbp + 0x49]
push rdx
push rdx
imul eax, dword [rbp + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x425a1a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x425a23
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x425a17
push rbx
je 0x425a03
xor ebx, dword [rdi + 0x53]
jo 0x425a35
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x425a41
pop rdi
jo 0x425a54
jb 0x425a41
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x425a24
je 0x425a58
jb 0x425a57
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x425a2f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x425a76
push rax
jbe 0x425a87
jbe 0x425a59
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x425a9b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x425a77
pop rdi
jae 0x425ab8
jb 0x425ab5
jns 0x425a91
push rax
push rbx
je 0x425a84
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x425ac3
movsxd rbx, dword [rdi + 0x73]
je 0x425ad1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x425acc
je 0x425ae1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x425ad4
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x425abd
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x425afe
push r11
je 0x425ad3
je 0x425b07
jb 0x425b06
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
je 0x425b13
push rsp
jo 0x425b16
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x425b06
jbe 0x425ac3
pop rdi
pop rdx
push rbx
je 0x425afa
xor dword [rdi + 0x54], ebx
jne 0x425b3e
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
jbe 0x425b55
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x425b68
je 0x425b39
jbe 0x425b61
movsxd rsp, dword [rbp + 0x34]
jb 0x425b62
push r10
imul edx, dword [rbx + 0x31], 0x45454a5f
push rbx
je 0x425b46
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x6e616158
je 0x425b90
jb 0x425b50
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
outsb dx, byte gs:[rsi]
je 0x425bab
jb 0x425b8d
je 0x425b6d
xor al, 0x69
jae 0x425b9f
movsxd rbp, dword [rdi + 0x6e]
jbe 0x425baa
jb 0x425bbb
imul esp, dword [rdx + 0x6c], 0x34534965
pop rdi
push rax
movsxd rax, dword [rbp + 0x35]
jbe 0x425bb6
insb byte [rdi], dx
jne 0x425bbd
xor al, 0x74
jns 0x425bcf
push r11
xor al, 0x5f
push r12
xor byte [rdi + 0x44], bl
jo 0x425bbb
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x425bd9
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x625f6465
jne 0x425bf2
jb 0x425bd9
push rbx
je 0x425bca
je 0x425bfe
jb 0x425bfd
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x425bd5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x425c1c
push rax
jbe 0x425c2d
jbe 0x425bff
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x425bfb
xor ebx, dword [rdi + 0x53]
jo 0x425c2d
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x425c39
pop rdi
jo 0x425c4c
jb 0x425c39
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x425c1c
je 0x425c50
jb 0x425c4f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x425c27
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x425c6e
push rax
jbe 0x425c7f
jbe 0x425c51
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x425c7e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x425c9b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor r8b, byte [rbp + 0x76]
add byte [rbp + 0x65], ch
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x425cab
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x425c90
je 0x425cc4
jb 0x425cc3
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x425cd3
pop rdi
jae 0x425cd1
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x425ca8
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x425cfa
jb 0x425cd1
push rbx
push r11
je 0x425cc0
xor ebx, dword [rdi + 0x53]
jo 0x425cf2
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x425cfe
pop rdi
jo 0x425d11
jb 0x425cfe
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x425ce1
je 0x425d15
jb 0x425d14
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x425cec
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x425d33
push rax
jbe 0x425d44
jbe 0x425d16
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x425d43
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x425d60
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x52], eax
push rbx
pop rdi
push rax
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x425d43
jbe 0x425d74
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x425d4b
jo 0x425d7a
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x425d99
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r10
push rdx
imul eax, dword [rbp + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x425d82
jbe 0x425db3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x425d8c
je 0x425dc0
jb 0x425dbf
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x425dcb
xor al, 0x5f
push rbx
jo 0x425dfe
outsd dx, dword [rsi]
pop rdi
push 0x65706c65
jb 0x425df3
imul r14, qword [rax], 0x49615345
push rbx
je 0x425deb
je 0x425e1f
jb 0x425e1e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x425df6
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x425e3d
push rax
jbe 0x425e4e
jbe 0x425e20
xor dword [rbp + 0x45], eax
xor al, byte [r13 + 0x52]
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x425e56
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x425e5f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x425e53
push rbx
je 0x425e41
jo 0x425e70
imul esi, dword [rdx + 0x49], 0x45456964
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x425e25
pop rdi
pop rdx
push rbx
je 0x425e5c
xor dword [rdi + 0x54], ebx
jne 0x425ea0
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
cmp byte [rbp + 0x73], dl
je 0x425e87
jae 0x425eac
push rbx
je 0x425e7b
xor al, 0x64
jne 0x425ebd
je 0x425eb2
insb byte [rdi], dx
je 0x425ebe
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x425eb3
xor al, 0x5f
pop rdi
jae 0x425eef
jb 0x425eef
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x425edb
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x425efa
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x425f17
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x425f31
jo 0x425f34
je 0x425f05
jbe 0x425f2d
movsxd rsp, dword [rbp + 0x35]
ja 0x425f3b
imul esi, dword [rbp + 0x49], 0x454a6364
push rbx
je 0x425f10
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x425f18
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
xor ebx, dword [rdi + 0x4f]
push rsp
xor byte [rdi + 0x44], bl
jo 0x425f60
push rsp
xor dword [rdi], ebx
pop rdi
pop rdi
js 0x425f92
pop rdi
jo 0x425f82
jb 0x425f92
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x425f72
je 0x425fa6
jb 0x425fa5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x425f7d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x425fc4
push rax
jbe 0x425fd5
jbe 0x425fa7
xor dword [r13 + 0x4f], eax
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x425fa8
outsw dx, word [rsi]
jb 0x425fec
jb 0x425fdc
push r10
imul eax, dword [rbp + 0x4f], 0x4e525f54
push rbx
je 0x425fb5
jb 0x425fec
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x425ff0
pop rdi
jb 0x425ff3
jb 0x425ff7
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x42600e
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x425fd8
xor ebp, dword [rbp + 0x6f]
jbe 0x426011
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x425ff0
je 0x426024
jb 0x426023
xor dword fs:[r13 + 0x53], eax
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x425fff
xor dword [rdi + 0x54], ebx
jne 0x426043
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x426014
xor al, 0x64
jne 0x426056
je 0x42604b
insb byte [rdi], dx
je 0x426057
cmp byte [r13 + 0x73], dl
je 0x42603c
jae 0x426061
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x426044
xor dword [rdi + 0x54], ebx
jne 0x426088
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rax
xor dword [rdx], esi
jne 0x42609f
jo 0x4260a2
je 0x426073
jbe 0x42609b
movsxd rsp, dword [rbp + 0x53]
je 0x426068
xor al, 0x64
jne 0x4260aa
je 0x42609f
insb byte [rdi], dx
je 0x4260ab
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5f], bl
jo 0x4260d4
push 0x64616572
pop rdi
imul esp, dword [rbp + 0x79], 0x5f
movsxd rsi, dword [rdx + 0x65]
je 0x4260d5
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x4260b5
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4260f4
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x4260c8
xor al, 0x64
jne 0x42610a
je 0x4260ff
insb byte [rdi], dx
je 0x42610b
xor qword [r10], rsi
jne 0x426120
jo 0x426123
je 0x4260f4
jbe 0x42611c
movsxd rsp, dword [rbp + 0x45]
xor dword [rbp + 0x45], eax
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
xor al, 0x72
push rdx
xor dword [r9], esi
xor dword [rdi + 0x78], ebx
push rdx
imul eax, dword [rbp + 0x45], 0x4f704476
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push rbx
xor dword [rdx], esi
jne 0x426161
jo 0x426164
je 0x426144
je 0x426165
imul ebp, dword [rsi + 0x67], 0x535a5f00
je 0x42612d
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x426177
jb 0x42617a
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x426143
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x426182
movsxd rbx, dword [rdi + 0x73]
je 0x426190
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42618b
je 0x4261a0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x426191
push rsp
pop rdi
jo 0x426195
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x426181
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x4261a5
cmp dword [rcx + 0x6e], ecx
jo 0x4261d6
je 0x4261a9
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4261dc
je 0x4261d1
insb byte [rdi], dx
je 0x4261dd
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x4261bb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4261fc
push rbx
je 0x4261d3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x426212
movsxd rbx, dword [rdi + 0x73]
je 0x426220
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42621b
je 0x426230
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
je 0x42623c
push rsp
jo 0x42623f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42622f
jbe 0x4261ec
pop rdi
pop rdx
push rbx
je 0x426224
xor ebx, dword [rdi + 0x53]
jo 0x426256
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x426262
pop rdi
jo 0x426275
jb 0x426262
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x426245
je 0x426279
jb 0x426278
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x426250
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x426297
push rax
jbe 0x4262a8
jbe 0x42627a
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4262a7
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4262c4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x426298
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x4262f3
push r11
je 0x4262af
xor ebp, dword [rbp + 0x6f]
jbe 0x4262e8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4262c7
je 0x4262fb
jb 0x4262fa
push r11
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
add byte [rdi + 0x5a], bl
push rbx
je 0x4262e0
je 0x4262fa
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
jbe 0x426330
push r10
push rbx
je 0x4262f3
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x42631a
pop rax
push rsp
pop rdi
push r11
je 0x42630d
je 0x42634f
jo 0x426348
jo 0x426336
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x42635b
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x42632e
jbe 0x42635f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x426336
jo 0x426365
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x426387
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x42639f
push r10
push rdx
imul eax, dword [rbp + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x4263b5
je 0x426386
jbe 0x4263ae
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x55], 0x72657070
movsxd r8, dword [r8]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4263bb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4263c4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4263b8
xor al, byte fs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4263b1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4263ea
je 0x4263ff
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4263cc
jo 0x4263fb
imul esi, dword [rdx + 0x49], 0x45456964
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x4263ee
je 0x426422
jb 0x426421
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4263f9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x426440
push rax
jbe 0x426451
jbe 0x426423
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
push rbx
je 0x42641c
xor dword [rdi + 0x54], ebx
jne 0x426460
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x49], eax
push rbx
je 0x426431
xor al, 0x64
jne 0x426473
je 0x426468
insb byte [rdi], dx
je 0x426474
cmp qword [r9 + 0x6e], rcx
jo 0x42648a
je 0x42645d
imul ebp, dword [rbp + 0x45], 0x5f374545
pop r15
push 0x45646165
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x426463
je 0x42647d
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rax
xor dword [rax], esi
jne 0x4264b3
jo 0x4264b6
je 0x426489
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4264bc
je 0x4264b1
insb byte [rdi], dx
je 0x4264bd
push r11
xor byte [rdi + 0x45], bl
push r10
push rbx
je 0x426496
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4264bd
pop rax
push rsp
pop rdi
push r11
je 0x4264b0
je 0x4264f2
jo 0x4264eb
jo 0x4264d9
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4264fe
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rsp
push rsi
xor dword [rax], esi
jne 0x426513
jo 0x426516
je 0x4264e9
imul ebp, dword [rbp], 0x534e5a5f
je 0x4264e2
je 0x426524
jo 0x42651d
push r8
jbe 0x42652e
xor dword [r9 + 0x49], ecx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x42650a
jo 0x426518
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x426503
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x426527
cmp byte [rbp + 0x73], dl
je 0x426527
jae 0x42654c
push rbx
je 0x42651b
xor al, 0x64
jne 0x42655d
je 0x426552
insb byte [rdi], dx
je 0x42655e
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r14d
je 0x426564
insb byte [rdi], dx
je 0x426570
jb 0x426552
jbe 0x42650f
pop rdi
pop rdx
push rbx
je 0x42654b
jbe 0x42657c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x6d]
push rdx
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x426567
xor dword [rdi + 0x54], ebx
jne 0x4265ab
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor dword [rbp + 0x4a], eax
push rbx
je 0x42657c
xor al, 0x64
jne 0x4265be
je 0x4265b3
insb byte [rdi], dx
je 0x4265bf
xor qword [r10], rsi
jne 0x4265d4
jo 0x4265d7
je 0x4265a8
jbe 0x4265d0
movsxd rsp, dword [rbp + 0x45]
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push rbx
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x4265f7
je 0x4265c8
jbe 0x4265f0
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push r11
je 0x4265c2
xor ebp, dword [rbp + 0x6f]
jbe 0x4265fb
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4265dc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42661b
movsxd rbx, dword [rdi + 0x73]
je 0x426629
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x426624
je 0x426639
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
jae 0x426640
jbe 0x4265de
pop rdi
pop rdx
push rbx
je 0x426616
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x426667
outsb dx, byte gs:[rsi]
je 0x42665f
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor al, 0x73
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x42669f
jo 0x4266a2
je 0x426673
jbe 0x42669b
movsxd rsp, dword [rbp + 0x35]
insb byte [rdi], dx
jne 0x4266ac
push 0x5f007645
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4266a6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4266af
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4266a3
push rbx
je 0x42668f
xor ebx, dword [rdi + 0x53]
jo 0x4266c1
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4266cd
pop rdi
jo 0x4266e0
jb 0x4266cd
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x4266b0
je 0x4266e4
jb 0x4266e3
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4266bb
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x426702
push rax
jbe 0x426713
jbe 0x4266e5
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x426727
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4266d0
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x42673a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x426743
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x426737
push rbx
je 0x426725
jo 0x426754
imul esi, dword [rdx + 0x49], 0x45456964
cmp byte [rbp + 0x61], ch
js 0x42675e
jae 0x42676a
jp 0x426768
jbe 0x426706
pop rdi
pop rdx
push rbx
je 0x426742
je 0x426776
jb 0x426775
xor al, 0x6a
outsd dx, dword [rsi]
imul ebp, dword [rsi + 0x45], 0x47404076
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x426761
xor bl, byte [rdi + 0x5f]
jae 0x42679d
jb 0x42679d
pop rdi
jo 0x4267b0
jb 0x426787
push rbx
je 0x426778
je 0x4267ac
jb 0x4267ab
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x426783
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4267ca
push rax
jbe 0x4267db
jbe 0x4267ad
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4267d3
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4267f0
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push r11
pop rdi
push r11
je 0x4267ce
cmp dword [rdi + 0x53], ebx
jo 0x426801
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x426811
push rdx
push r12
pop rdi
jo 0x426807
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4267f3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x426834
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x426858
jo 0x42685b
je 0x42682c
jbe 0x426854
movsxd rsp, dword [rbp + 0x35]
ja 0x426862
imul esi, dword [rbp + 0x49], 0x34314152
pop rdi
movsxd rsp, dword [r10 + r9*2 + 0x63]
push rbx
je 0x42683e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x426846
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x42688e
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x42687b
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x4268b9
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4268c0
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4268a4
je 0x4268d8
jb 0x4268d7
push rbx
je 0x4268a8
xor ebp, dword [rbp + 0x6f]
jbe 0x4268e1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x77
outsd dx, dword [rsi]
jb 0x426903
jbe 0x42689a
pop rdi
pop rdx
push rbx
je 0x4268d8
pop rdi
pop rdi
je 0x426907
imul ebp, dword [rbp + rsi + 0x5f], 0x646f6d5f
insd dword [rdi], dx
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
insd dword [rdi], dx
xor dword [rbp + 0x4c], eax
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r12
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x426904
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42693d
je 0x426952
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x426923
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x426962
movsxd rbx, dword [rdi + 0x73]
je 0x426970
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42696b
je 0x426980
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x426982
jae 0x42698e
jp 0x42698c
push r10
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x426998
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4269b1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x42698a
je 0x4269be
jb 0x4269bd
push rbx
je 0x426993
jbe 0x4269c4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
jbe 0x426975
pop rdi
pop rdx
push rbx
je 0x4269ac
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4269eb
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x4269bf
xor al, 0x64
jne 0x426a01
je 0x4269f6
insb byte [rdi], dx
je 0x426a02
xor qword [r10], rsi
jne 0x426a17
jo 0x426a1a
je 0x4269eb
jbe 0x426a13
movsxd rsp, dword [rbp + 0x45]
xor dword [rbp + 0x45], eax
xor cl, byte [r9 + 0x53]
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4269f5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x426a3c
push rax
jbe 0x426a4d
jbe 0x426a1f
cmp dword [r15 + 0x4d], r11d
pop rdi
imul ebp, dword [rsi + 0x76], 0x49656b6f
jbe 0x426a3f
je 0x426a1f
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x426a55
je 0x426a6d
jo 0x426a66
pop r8
jae 0x426a70
push rsp
pop rdi
add byte [r8 + 0x74], r14b
push 0x64616572
pop rdi
jno 0x426a86
insb byte [rdi], dx
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x426a58
xor byte [rdi + 0x48], bl
pop rdi
jae 0x426a97
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x426a6b
xor al, 0x64
jne 0x426aad
je 0x426aa2
insb byte [rdi], dx
je 0x426aae
xor qword [r10], rsi
jne 0x426ac3
jo 0x426ac6
je 0x426a97
jbe 0x426abf
movsxd rsp, dword [rbp + 0x45]
xor dword [rbp + 0x45], eax
xor dword [r9 + 0x53], ecx
xor bl, byte [rdi + 0x45]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x426aa1
xor al, 0x70
jb 0x426add
outsd dx, dword [rsi]
jb 0x426ae0
je 0x426af2
pop rdi
jno 0x426af1
jne 0x426ae4
push r11
je 0x426ab7
jo 0x426ae6
imul esi, dword [rdx + 0x49], 0x53456964
je 0x426ac4
jbe 0x426af5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x426ada
jb 0x426b0b
je 0x426b0e
jb 0x426af4
push rbx
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x426b31
jo 0x426b34
je 0x426b05
jbe 0x426b2d
movsxd rsp, dword [rbp + 0x44]
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x426b02
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x426b77
je 0x426b48
jbe 0x426b70
movsxd rsp, dword [rbp + 0x31]
xor al, 0x73
imul ebp, dword [rcx + 0x70], 0x43
push 0x63617261
je 0x426b7c
jb 0x426b8c
push r8
movsxd rax, dword [rbp + 0x45]
movsxd r10, dword [r15 + rbx*2]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x426b8e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x426b97
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x426b8b
push rbx
je 0x426b7d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x426bbc
movsxd rbx, dword [rdi + 0x73]
je 0x426bca
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x426bc5
je 0x426bda
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x426bea
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x426bce
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x426c1a
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x426c13
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x426c2c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x426c03
jo 0x426c32
imul esi, dword [rdx + 0x49], 0x53456964
je 0x426c10
jbe 0x426c41
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insb byte [rdi], dx
push rbx
xor ebx, dword [rdi + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x426c6f
xor dword [rip + 0x6574495f], esi
jb 0x426c63
movsxd rbp, dword [rdi + 0x6d]
jo 0x426c68
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x426c79
je 0x426c7c
jb 0x426c62
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x426c76
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop rdi
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x426c68
xor ebx, dword [rdi + 0x53]
jo 0x426c9a
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x426ca6
pop rdi
jo 0x426cb9
jb 0x426ca6
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x426c89
je 0x426cbd
jb 0x426cbc
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x426c94
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x426cdb
push rax
jbe 0x426cec
jbe 0x426cbe
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x426ceb
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x426d08
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
imul esi, dword fs:[rbx + 0x70], 0x4565736f
jbe 0x426cb0
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x426d1a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x426d23
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x426d17
push rbx
je 0x426d09
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x426d48
movsxd rbx, dword [rdi + 0x73]
je 0x426d56
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x426d51
je 0x426d66
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x426d67
jae 0x426d73
jp 0x426d71
jbe 0x426d0f
pop rdi
pop rdx
push rbx
je 0x426d46
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x426d87
push r11
je 0x426d5a
jo 0x426d89
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x55], bl
outsb dx, byte [rsi]
ja 0x426da9
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x426dbc
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push r11
je 0x426d90
jbe 0x426dc1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x426d98
jo 0x426dc7
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
xor dword [rdx], esi
jae 0x426de7
je 0x426dc8
insb byte [rdi], dx
imul ebp, dword [rbp + 0x69], 0x50726574
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x426dcd
pop rdi
jae 0x426e0e
jb 0x426e0b
jns 0x426de7
push rax
jbe 0x426df8
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor dword [rax], esi
jb 0x426e32
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
push rsp
jae 0x426e4d
jbe 0x426ddb
pop rdi
pop rdx
push rbx
je 0x426e13
pop rdi
jns 0x426e49
pop rdi
ja 0x426e5d
jo 0x426e4d
insd dword [rdi], dx
insd dword [rdi], dx
jb 0x426e54
jo 0x426e66
imul ebp, dword [rsi + 0x74], 0x53497265
je 0x426e32
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x426e6c
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x426e80
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x645f5f39
outsd dx, dword [rsi]
pop rdi
ja 0x426e97
jo 0x426e6d
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x426e64
xor bl, byte [rdi + 0x44]
jae 0x426ead
jb 0x426eaa
jns 0x426e9c
jne 0x426eb8
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x426ec1
jb 0x426ebe
jns 0x426e9a
push rax
push rbx
je 0x426e8b
je 0x426ebf
jb 0x426ebe
jbe 0x426eb3
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x426ea0
jbe 0x426ed1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x426eac
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x426eeb
movsxd rbx, dword [rdi + 0x73]
je 0x426ef9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x426ef4
je 0x426f09
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x426ee9
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x426f2a
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x426f35
push rsp
jo 0x426f38
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x426f28
jbe 0x426ee5
pop rdi
pop rdx
push r11
je 0x426f1d
xor al, 0x64
jne 0x426f5f
je 0x426f54
insb byte [rdi], dx
je 0x426f60
cmp byte [r13 + 0x73], dl
je 0x426f45
jae 0x426f6a
movsxd r13, dword [r13 + rax*2 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x426f45
pop rdi
pop rdi
jne 0x426f86
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x426f96
je 0x426f8b
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x426f6c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x426fab
movsxd rbx, dword [rdi + 0x73]
je 0x426fb9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x426fb4
je 0x426fc9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insd dword [rdi], dx
push rbx
xor eax, 0x5f54455f
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x426fe5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x426ffe
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x426fd5
jo 0x427004
imul esi, dword [rdx + 0x49], 0x53456964
je 0x426fe2
jbe 0x427013
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
imul eax, dword [rbp + 0x6c], 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x42702d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x427036
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42702a
push rbx
je 0x427016
xor ebx, dword [rdi + 0x53]
jo 0x427048
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x427054
pop rdi
jo 0x427067
jb 0x427054
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x427037
je 0x42706b
jb 0x42706a
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x427042
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x427089
push rax
jbe 0x42709a
jbe 0x42706c
push r11
push r11
cmp dword [rdi + 0x45], ebx
push rbx
pop rdi
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4270ae
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x427084
xor al, 0x5f
pop rdi
jae 0x4270c0
jb 0x4270c0
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x4270ac
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4270cb
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4270e8
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x427102
jo 0x427105
je 0x4270d6
jbe 0x4270fe
movsxd rsp, dword [rbp + 0x35]
ja 0x42710c
imul esi, dword [rbp + 0x49], 0x39415269
pop rdi
movsxd rcx, dword [r9 + 0x63]
push rbx
je 0x4270e7
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x4270ef
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x427137
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x427128
outsw dx, word [rsi]
jb 0x42716c
jb 0x42715c
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x427134
jb 0x42716b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x42716f
pop rdi
jb 0x427172
jb 0x427176
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x42718d
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x427189
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4271a2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x427179
jo 0x4271a8
imul esi, dword [rdx + 0x49], 0x53456964
je 0x427186
jbe 0x4271b7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
jbe 0x427168
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x4271b4
jbe 0x4271e5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4271bc
jo 0x4271eb
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x42720a
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rdx
push rdx
imul eax, dword [rbp + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4271ed
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x42722e
push rbx
xor dword fs:[r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x427220
xor ebx, dword [rdi + 0x53]
jo 0x427252
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42725e
pop rdi
jo 0x427271
jb 0x42725e
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x427241
je 0x427275
jb 0x427274
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x42724c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x427293
push rax
jbe 0x4272a4
jbe 0x427276
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4272a3
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4272c0
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x53]
pop rdi
push r10
push r11
push r12
pop rdi
add byte [r15 + 0x5a], r11b
xor qword [rdx], r14
jne 0x4272e7
jo 0x4272ea
je 0x4272bb
jbe 0x4272e3
movsxd rsp, dword [rbp + 0x35]
ja 0x4272f1
imul esi, dword [rbp + 0x49], 0x33415269
pop rdi
movsxd rcx, dword [r10 + 0x52]
push rbx
je 0x4272c8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x427307
movsxd rbx, dword [rdi + 0x73]
je 0x427315
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x427310
je 0x427325
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x427308
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x427310
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x427358
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x427349
je 0x42737d
jb 0x42737c
xor ch, byte fs:[rcx + 0x64]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x42735e
jbe 0x42738f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x427366
jo 0x427395
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
cmp byte [r13 + 0x61], r13b
js 0x4273a6
jae 0x4273b2
jp 0x4273b0
jbe 0x42734e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4273b7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4273c0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4273b4
push rbx
je 0x4273a5
je 0x4273d9
jb 0x4273d8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4273b0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4273f7
push rax
jbe 0x427408
jbe 0x4273da
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4273d5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x427416
push rbx
je 0x4273ed
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42742c
movsxd rbx, dword [rdi + 0x73]
je 0x42743a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x427435
je 0x42744a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x42745d
jno 0x427443
push rax
push rbx
je 0x427436
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x427475
movsxd rbx, dword [rdi + 0x73]
je 0x427483
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42747e
je 0x427493
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x427467
xor ebp, dword [rbp + 0x6f]
jbe 0x4274a0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4274b5
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4274be
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4274b2
push rbx
je 0x4274a4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4274e3
movsxd rbx, dword [rdi + 0x73]
je 0x4274f1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4274ec
je 0x427501
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4274da
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x427513
je 0x427528
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4274f7
je 0x42752b
jb 0x42752a
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x427542
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42754b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42753f
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x427533
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
movsxd rax, dword [rbp + 0x4e]
push rbx
je 0x427548
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4275ad
jo 0x42759b
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x427572
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4275b1
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x42759b
jae 0x4275c0
xor byte [rbp + 0x45], al
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x4275e9
jo 0x4275ec
je 0x4275bd
jbe 0x4275e5
movsxd rsp, dword [rbp + 0x35]
ja 0x4275f3
imul esi, dword [rbp + 0x49], 0x5f374152
movsxd rbp, dword [r9 + 0x49]
push rdx
xor ebx, dword [r15 + 0x53]
xor dword [rdi + 0x52], ebx
push rbx
je 0x4275d1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x427610
movsxd rbx, dword [rdi + 0x73]
je 0x42761e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x427619
je 0x42762e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
xor bl, byte [r15 + 0x53]
xor dword [rdi + 0x45], ebx
push rbx
je 0x427611
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x427619
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop r15
push r12
xor byte [rdi + 0x44], bl
jo 0x427661
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x427689
movsxd rdx, dword gs:[r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x427686
je 0x42769b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x427674
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4276b3
movsxd rbx, dword [rdi + 0x73]
je 0x4276c1
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x427699
pop rdi
pop rdi
jne 0x4276da
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x4276ea
je 0x4276df
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor byte [rbp + 0x45], al
xor dword [rax], edi
pop rdi
pop rdi
jne 0x4276fd
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x427706
je 0x4276fb
outsb dx, byte [rsi]
push r8
push rbx
je 0x4276da
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x427719
movsxd rbx, dword [rdi + 0x73]
je 0x427727
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x427722
je 0x427737
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insd dword [rdi], dx
push r12
pop rdi
push rbx
cmp dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x42771c
jbe 0x42774d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x427728
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x427767
movsxd rbx, dword [rdi + 0x73]
je 0x427775
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x427770
je 0x427785
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3445455f
jae 0x427795
jp 0x427793
jbe 0x427731
pop rdi
pop rdx
push rbx
je 0x427768
xor al, 0x5f
pop rdi
jae 0x4277a4
jb 0x4277a4
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x427790
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4277af
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4277cc
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
pop rdi
pop r15
jae 0x4277e2
jo 0x4277b3
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4277aa
xor dword [rdi + 0x54], ebx
jne 0x4277ee
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
jbe 0x427805
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push rbx
je 0x4277e0
je 0x427814
jb 0x427813
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4277eb
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x427832
push rax
jbe 0x427843
jbe 0x427815
xor al, byte [r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x427819
jbe 0x42784a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x427825
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x427864
movsxd rbx, dword [rdi + 0x73]
je 0x427872
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x42786d
je 0x427882
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x6945455f
js 0x42786e
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x427861
xor bl, byte [rdi + 0x5f]
je 0x427896
push 0x65706c65
jb 0x427887
insd dword [rdi], dx
xor byte [rbp + 0x50], al
xor dword [rdx], esi
jne 0x4278bc
jo 0x4278bf
je 0x427890
jbe 0x4278b8
movsxd rsp, dword [rbp + 0x49]
push rbx
je 0x427886
xor al, 0x64
jne 0x4278c8
je 0x4278bd
insb byte [rdi], dx
je 0x4278c9
push r11
xor byte [rdi + 0x45], bl
push r10
push r12
xor byte [rdi + 0x52], bl
push r11
je 0x4278a6
xor dword [rdi + 0x54], ebx
jne 0x4278ea
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x4278e1
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4278c8
xor dword [rdi + 0x5f], ebx
jb 0x427904
jae 0x427914
outsd dx, dword [rsi]
push r11
je 0x4278dd
je 0x427911
jb 0x427910
push r8
push rsp
pop rdi
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4278f2
je 0x427926
jb 0x427925
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x427935
pop rdi
jae 0x427933
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x427909
xor bl, byte [rdi + 0x5f]
je 0x42793e
push 0x65706c65
jb 0x42792f
insd dword [rdi], dx
xor byte [rbp + 0x50], al
cmp byte [rbp + 0x73], dl
je 0x427934
jae 0x427959
push r11
je 0x427929
xor al, 0x64
jne 0x42796b
je 0x427960
insb byte [rdi], dx
je 0x42796c
push r11
xor byte [rdi + 0x45], bl
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x427947
xor dword [rdi + 0x54], ebx
jne 0x42798b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor al, 0x5f
jo 0x427982
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x42796b
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x4279a5
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x4279b9
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x31], 0x72617030
insd dword [rdi], dx
pop rdi
je 0x4279d8
jo 0x4279c6
xor dword [r13 + 0x69], eax
imul eax, dword [rax], 0x74535a5f
xor al, 0x6d
outsd dx, dword [rsi]
jbe 0x4279d5
push r10
push rbx
je 0x4279a9
jo 0x4279d8
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
je 0x4279b4
jb 0x4279eb
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4279ef
pop rdi
jb 0x4279f2
jb 0x4279f6
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x427a0c
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x427a1f
jo 0x427a22
je 0x4279f3
jbe 0x427a1b
movsxd rsp, dword [rbp + 0x35]
ja 0x427a29
imul esi, dword [rbp + 0x49], 0x35314152
pop rdi
movsxd rsp, dword [r10 + r9*2 + 0x63]
push rbx
je 0x427a05
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73746e58
jb 0x427a0d
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
imul r8d, dword gs:[r13 + 0x34], 0x65707974
push r11
pop rdi
push r12
xor byte [rdi + 0x44], bl
jo 0x427a55
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x427a41
xor dword [rdi + 0x54], ebx
jne 0x427a85
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rbx
je 0x427a57
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x427aa8
outsb dx, byte gs:[rsi]
je 0x427aa0
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x53]
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x427aa1
xor al, 0x70
jb 0x427add
outsd dx, dword [rsi]
jb 0x427ae0
je 0x427af2
pop rdi
jno 0x427af1
jne 0x427ae4
push r11
je 0x427ab7
jo 0x427ae6
imul esi, dword [rdx + 0x49], 0x53456964
je 0x427ac4
jbe 0x427af5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x427ada
jb 0x427b0b
je 0x427b0e
jb 0x427af4
push rbx
xor dword [rdi + 0x45], ebx
xor r14d, dword [r8 + 0x6f]
jo 0x427afa
jbe 0x427ab7
pop rdi
pop rdx
push rbx
je 0x427aee
xor dword [rdi + 0x54], ebx
jne 0x427b32
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rax
xor dword [rdx], esi
jne 0x427b49
jo 0x427b4c
je 0x427b1d
jbe 0x427b45
movsxd rsp, dword [rbp + 0x53]
je 0x427b12
xor al, 0x64
jne 0x427b54
je 0x427b49
insb byte [rdi], dx
je 0x427b55
push r11
xor byte [rdi + 0x45], bl
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x427b3d
xor ebx, dword [rdi + 0x53]
jo 0x427b6f
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x427b7b
pop rdi
jo 0x427b8e
jb 0x427b7b
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x427b5e
je 0x427b92
jb 0x427b91
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x427b69
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x427bb0
push rax
jbe 0x427bc1
jbe 0x427b93
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x427bc0
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x427bdd
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor eax, 0x706d495f
insb byte [rdi], dx
xor al, byte [r13 + 0x53]
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x427bba
pop rdi
push rdi
imul ebx, dword [rdi + 0x72], 0x65
jae 0x427c09
insb byte [rdi], dx
je 0x427bf6
je 0x427c12
jo 0x427c00
push r11
je 0x427bd1
xor al, 0x75
outsb dx, byte [rsi]
imul esp, dword [rsi + 0x6f], 0x695f6d72
outsb dx, byte [rsi]
je 0x427c0b
imul esi, dword fs:[rbx + 0x74], 0x75626972
je 0x427c1f
outsd dx, dword [rsi]
outsb dx, byte [rsi]
imul rax, qword [r13 + 0x45], 0x76453143
add byte [rdi + 0x5a], bl
push rbx
je 0x427bf8
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x427c31
je 0x427c46
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x427c16
je 0x427c4a
jb 0x427c49
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x427c21
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x427c68
push rax
jbe 0x427c79
jbe 0x427c4b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x427c85
jb 0x427c88
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push r11
pop rdi
jbe 0x427c74
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x427c7a
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x427c65
cmp byte [rdi + 0x5f], bl
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jne 0x427ca4
jb 0x427ca9
push r11
push r11
je 0x427c80
xor ebx, dword [rdi + 0x53]
jo 0x427cb2
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x427cbe
pop rdi
jo 0x427cd1
jb 0x427cbe
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x427ca1
je 0x427cd5
jb 0x427cd4
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x427cac
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x427cf3
push rax
jbe 0x427d04
jbe 0x427cd6
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x427d03
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x427d20
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
push r11
je 0x427cef
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x427d41
jb 0x427d18
push rsp
pop rdi
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x427d15
pop rdi
pop rdi
je 0x427d44
imul ebp, dword [rsp + rsi + 0x5f], 0x49646f4d
insd dword [rdi], dx
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
insd dword [rdi], dx
xor dword [rbp + 0x4c], eax
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x45], eax
pop rdi
pop rdi
movsxd rsp, dword [rcx + 0x6c]
movsxd rax, dword [rbp + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x427d4f
je 0x427d91
jo 0x427d8a
push r8
jbe 0x427d9b
xor cl, byte [r9 + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x427d77
jo 0x427d85
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x427d72
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x427da7
push r10
push r11
push rbx
je 0x427d82
je 0x427db6
jb 0x427db5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x427d8d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x427dd4
push rax
jbe 0x427de5
jbe 0x427db7
push rbx
je 0x427dad
jb 0x427de4
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x427de8
pop rdi
jb 0x427deb
jb 0x427def
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x427e05
push r11
pop r15
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x427e1c
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x427df2
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x427e16
xor dword [rax], esi
jne 0x427e46
jo 0x427e49
je 0x427e1c
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x427e4f
je 0x427e44
insb byte [rdi], dx
je 0x427e50
push r11
xor byte [rdi + 0x45], bl
xor eax, 0x65736572
je 0x427e3d
push rax
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x427e34
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x427e75
push rbx
xor al, byte fs:[r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x427e59
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
jo 0x427eab
jb 0x427e82
push rbx
push r11
je 0x427e71
xor ebx, dword [rdi + 0x53]
jo 0x427ea3
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x427eaf
pop rdi
jo 0x427ec2
jb 0x427eaf
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x427e92
je 0x427ec6
jb 0x427ec5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x427e9d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x427ee4
push rax
jbe 0x427ef5
jbe 0x427ec7
push r11
push r11
cmp byte [rdi + 0x45], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x427ef4
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x427f11
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r8], r14d
pop rdi
push rbx
pop rdi
jb 0x427f14
ja 0x427f14
jo 0x427f2b
jb 0x427efe
push rax
push rbx
pop r15
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x427f27
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x427f30
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x427f24
push rbx
je 0x427f12
jo 0x427f41
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x427f36
jbe 0x427f67
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x427f3e
jo 0x427f6d
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x427f89
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x427fa2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x427f79
jo 0x427fa8
imul esi, dword [rdx + 0x49], 0x53456964
je 0x427f86
jbe 0x427fb7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jbe 0x427f68
pop rdi
pop rdx
push rbx
je 0x427fa4
je 0x427fd8
jb 0x427fd7
xor dword fs:[r9 + 0x52], ecx
jbe 0x427ff1
push r12
pop rdi
jo 0x427fd5
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x427fc6
je 0x427ffa
jb 0x427ff9
xor dword fs:[rip + 0x6d5f4d5f], esi
imul esp, dword [rbp + 0x5f], 0x72
outsd dx, dword [rsi]
jne 0x428018
imul ebp, dword [rsi + 0x65], 0x31745349
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x428023
push rax
jbe 0x428034
jbe 0x428006
push r11
je 0x427ff8
xor byte [rbx + 0x68], dh
jb 0x428032
pop rdi
jo 0x428045
jb 0x42801c
push rbx
pop rdi
xor eax, 0x706d495f
insb byte [rdi], dx
push r12
pop rdi
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x428050
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x428059
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x42804d
push rbx
je 0x42803d
je 0x428071
jb 0x428070
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x42804a
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x42806e
cmp dword [rcx + 0x6e], ecx
jo 0x42809f
je 0x428072
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x4280a5
je 0x42809a
insb byte [rdi], dx
je 0x4280a6
push r11
xor byte [rdi + 0x45], bl
xor eax, 0x65736572
je 0x428093
push rax
push rbx
xor byte [rdi], bl
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4280d0
jb 0x4280d3
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x428099
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4280da
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x428090
pop rdi
pop rdx
push rbx
je 0x4280c7
xor byte [rbx + 0x68], dh
jb 0x428101
pop rdi
jo 0x428114
jb 0x4280eb
push rbx
je 0x4280dc
je 0x428110
jb 0x42810f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4280e7
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x42812e
push rax
jbe 0x42813f
jbe 0x428111
xor cl, byte [r9 + 0x53]
push r11
pop rdi
push r11
pop rdi
push r11
je 0x428115
cmp dword [rdi + 0x53], ebx
jo 0x428148
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x428158
push rdx
push r12
pop rdi
jo 0x42814e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42813e
insd dword [rdi], dx
jne 0x428180
js 0x428143
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x45]
jbe 0x428116
pop rdi
pop rdx
push rbx
je 0x42814c
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x4281a7
push r11
je 0x428163
xor ebp, dword [rbp + 0x6f]
jbe 0x42819c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x42817d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4281bc
movsxd rbx, dword [rdi + 0x73]
je 0x4281ca
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4281c5
je 0x4281da
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jo 0x428204
jb 0x4281f6
pop rdi
jbe 0x4281fd
jb 0x42820a
jne 0x4281f9
insb byte [rdi], dx
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x428200
pop rdi
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x42821b
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
xor qword [rax], r14
jne 0x428245
jo 0x428248
je 0x42821b
imul ebp, dword [rbp + 0x43], 0x38504531
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x428224
pop rdi
jae 0x428265
jb 0x428262
jns 0x42823e
push rax
push rbx
je 0x42822f
je 0x428263
jb 0x428262
push rbx
xor byte [rdi + 0x45], bl
jbe 0x428259
pop rdi
push rbx
xor bl, byte [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x428248
xor dword [rbp + 0x61], ebp
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
push rbx
je 0x42825e
je 0x428292
jb 0x428291
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x428269
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4282b0
push rax
jbe 0x4282c1
jbe 0x428293
push rbx
pop rdi
push r11
je 0x42828b
xor byte [rbx + 0x68], dh
jb 0x4282c5
pop rdi
jo 0x4282d8
jb 0x4282af
push rsp
pop rdi
jo 0x4282bb
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
ja 0x4282e7
imul esi, dword [rbp + 0x6c], 0x5249496e
pop rdi
movsxd rbp, dword [r9 + 0x52]
cmp dword [r15 + 0x53], ebx
xor byte [rdi + 0x45], bl
jbe 0x4282d2
jo 0x4282df
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4282c9
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x428313
jb 0x428316
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x4282db
jo 0x42830a
imul esi, dword [rdx + 0x49], 0x4a456964
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x428307
push rsp
pop rdi
jo 0x42830b
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4282f7
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x42831b
cmp byte [rbp + 0x73], dl
je 0x42831b
jae 0x428340
push rbx
je 0x42830f
xor al, 0x64
jne 0x428351
je 0x428346
insb byte [rdi], dx
je 0x428352
push r11
xor byte [rdi + 0x45], bl
xor al, byte [r13 + 0x50]
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x428379
je 0x42834a
jbe 0x428372
movsxd rsp, dword [rbp + 0x34]
jb 0x428373
push r8
js 0x42835e
push rbx
je 0x428354
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x31727358
xor dword [rcx + 0x73], ebp
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor eax, 0x756c6176
xor al, 0x74
jns 0x4283b6
push r11
xor al, 0x5f
push rbx
xor al, 0x5f
jo 0x4283a0
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x42838c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4283c5
je 0x4283da
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x4283bf
outsw dx, word [rsi]
jb 0x428403
jb 0x4283f3
push r12
pop rdi
push rdx
push rbx
je 0x4283cb
jb 0x428402
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x428406
pop rdi
jb 0x428409
jb 0x42840d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x428424
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4283ee
xor bl, byte [rdi + 0x5f]
jae 0x42842a
jb 0x42842a
pop rdi
jo 0x42843d
jb 0x428414
push rbx
je 0x428405
je 0x428439
jb 0x428438
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x428410
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x428457
push rax
jbe 0x428468
jbe 0x42843a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x428460
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x42847d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [r9 + 0x53], ecx
push r11
pop rdi
push rbx
pop rdi
push r11
je 0x42845b
cmp dword [rdi + 0x53], ebx
jo 0x42848e
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x42849e
push rdx
push r12
pop rdi
jo 0x428494
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x428480
xor dword [rdi + 0x54], ebx
jne 0x4284c4
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rbx
je 0x428496
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x4284e7
outsb dx, byte gs:[rsi]
je 0x4284df
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor dword [r9 + 0x53], ecx
xor dword [rdi + 0x45], ebx
push r12
pop rdi
add byte [rdi + 0x5a], bl
xor dword [rdx], esi
jae 0x428514
je 0x428501
jb 0x428518
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x5a5f006a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x428524
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x42852d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x428521
push rbx
je 0x428511
je 0x428545
jb 0x428544
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x42851d
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x428567
jb 0x42856a
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x42852f
jo 0x42855e
imul esi, dword [rdx + 0x49], 0x49456964
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x42855b
push rsp
pop rdi
jo 0x42855f
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x42854d
xor ebx, dword [rdi + 0x53]
jo 0x42857f
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x42858b
pop rdi
jo 0x42859e
jb 0x42858b
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x42856e
je 0x4285a2
jb 0x4285a1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x428579
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4285c0
push rax
jbe 0x4285d1
jbe 0x4285a3
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4285d0
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4285ed
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x428605
je 0x4285d6
jbe 0x4285fe
movsxd rsp, dword [rbp + 0x37]
imul esi, dword [rbx + 0x44], 0x74696769
movsxd r8, dword [r8]
ja 0x428617
imul esi, dword [rbp + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp byte [rbp + 0x73], dl
je 0x428602
jae 0x428627
xor eax, 0x74697277
push r10
imul r8d, dword fs:[r8 + rsi*2 + 0x4f], 0x5f005f54
pop rdx
push rbx
je 0x42860d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x428646
je 0x42865b
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x428628
jo 0x428657
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x50]
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x428691
jo 0x428694
je 0x428665
jbe 0x42868d
movsxd rsp, dword [rbp + 0x31]
xor al, 0x77
jb 0x428694
je 0x428692
insb byte [rdi], dx
imul ebp, dword [rbp + 0x69], 0x45726574
jbe 0x428639
pop rdi
pop rdx
push rbx
je 0x428670
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4286b7
push rax
jbe 0x4286c8
jbe 0x42869a
cmp dword [r15 + 0x4d], r11d
pop rdi
imul ebp, dword [rsi + 0x76], 0x49656b6f
jbe 0x4286ba
je 0x42869a
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x4286d0
je 0x4286e8
jo 0x4286e1
pop rax
jae 0x4286eb
push rsp
pop rdi
add byte [r15 + 0x5a], r11b
push rbx
je 0x4286b8
xor al, 0x70
jb 0x4286f4
outsd dx, dword [rsi]
jb 0x4286f7
je 0x428709
pop rdi
jno 0x428708
jne 0x4286fb
push r11
je 0x4286ce
jo 0x4286fd
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4286db
jbe 0x42870c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x4286f1
jb 0x428722
je 0x428725
jb 0x42870b
push rbx
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
pop rdi
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x42870b
xor byte [rdi + 0x49], bl
je 0x428744
jb 0x428740
jae 0x42874a
push r8
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x42875a
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x428763
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
push rbx
je 0x428744
je 0x428778
jb 0x428777
push rbx
je 0x42874d
jbe 0x42877e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4287a6
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x4287cc
jo 0x4287cf
je 0x4287af
je 0x4287d0
imul ebp, dword [rsi + 0x67], 0x76453144
add byte [rdi + 0x5a], bl
cmp qword [rcx + 0x6e], r9
jo 0x4287e3
je 0x4287b6
imul ebp, dword [rbp + 0x43], 0x38504531
pop rdi
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4287bf
outsw dx, word [rsi]
jb 0x428803
jb 0x4287f3
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x4287cb
jb 0x428802
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x428806
pop rdi
jb 0x428809
jb 0x42880d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x428824
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4287f3
outsw dx, word [rsi]
jb 0x428837
jb 0x428827
push r10
push rbx
je 0x428800
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x42883f
movsxd rbx, dword [rdi + 0x73]
je 0x42884d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x428848
je 0x42885d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x428833
jb 0x42886a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x42886e
pop rdi
jb 0x428871
jb 0x428875
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x42888c
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x42885c
pop rdi
jae 0x42889d
jb 0x42889a
jns 0x428876
push rax
push rbx
je 0x428867
je 0x42889b
jb 0x42889a
jbe 0x42888e
pop rdi
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4288b2
push r8
push rbx
je 0x428882
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4288c1
movsxd rbx, dword [rdi + 0x73]
je 0x4288cf
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4288ca
je 0x4288df
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x4288b3
xor ebp, dword [rbp + 0x6f]
jbe 0x4288ec
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4288cf
xor byte [rbx + 0x68], dh
jb 0x428909
pop rdi
jo 0x42891c
jb 0x4288f3
push rbx
je 0x4288e4
je 0x428918
jb 0x428917
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x428927
pop rdi
jae 0x428925
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x428902
je 0x428944
jo 0x42893d
push rbx
je 0x428909
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x635f7261
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jb 0x42895a
outsb dx, byte gs:[rsi]
je 0x428952
insb byte [rdi], dx
pop rdi
outsb dx, byte gs:[rsi]
imul ebp, dword [esi + 0x65], 0x6d4c6d49
xor dword [rsi], esi
cmp byte [rax], dh
insd dword [rdi], dx
xor byte [rbp + 0x4c], al
insd dword [rdi], dx
xor dh, byte [rcx]
xor al, 0x37
xor al, 0x38
xor esi, dword [rsi]
xor al, 0x37
xor cl, byte [r9 + 0x4a]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x42895f
jo 0x42896d
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rsp
push rbx
xor dword [rax], esi
jne 0x42899e
jo 0x4289a1
je 0x428974
imul ebp, dword [rbp], 0x74535a5f
xor dword [rdx], esi
pop rdi
pop rdi
je 0x42899d
push 0x65706c65
jb 0x42898e
insd dword [rdi], dx
xor dword [rbp + 0x53], eax
je 0x42897d
xor al, 0x64
jne 0x4289bf
je 0x4289b4
insb byte [rdi], dx
je 0x4289c0
cmp qword [r9 + 0x6e], rcx
jo 0x4289d6
je 0x4289a9
imul ebp, dword [rbp + 0x45], 0x5245454a
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x4289a3
xor dword [rdi + 0x54], ebx
jne 0x4289e7
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor ebx, dword [rdi + 0x44]
jo 0x4289de
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4289c6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x428a07
push rbx
je 0x4289de
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x428a1d
movsxd rbx, dword [rdi + 0x73]
je 0x428a2b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x428a26
je 0x428a3b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
je 0x428a47
push rsp
jo 0x428a4a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x428a3a
jbe 0x4289f7
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x428a60
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x428a69
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x428a5d
push rbx
je 0x428a4f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x428a8e
movsxd rbx, dword [rdi + 0x73]
je 0x428a9c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x428a97
je 0x428aac
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x428a85
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x428acc
push rax
jbe 0x428add
jbe 0x428aaf
xor dword [r13 + 0x4f], eax
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x428ab1
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x428ace
xor byte [rdi + 0x5f], bl
jo 0x428b11
jo 0x428b03
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x428b10
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x428b29
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x428b00
jo 0x428b2f
imul esi, dword [rdx + 0x49], 0x53456964
je 0x428b0d
jbe 0x428b3e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x428b68
xor dword [rip + 0x6574495f], esi
jb 0x428b5c
movsxd rbp, dword [rdi + 0x6d]
jo 0x428b61
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x428b72
je 0x428b75
jb 0x428b5b
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x428b6f
pop rdi
push rbx
pop r15
push rbx
pop r15
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x428ba4
je 0x428b75
jbe 0x428b9d
movsxd rsp, dword [rbp + 0x31]
xor eax, 0x64616572
push rbp
outsb dx, byte [rsi]
jae 0x428ba9
outsb dx, byte [esi]
outsb dx, byte fs:[rsi]
je 0x428b91
push 0x45
imul r10d, dword [r10 + 0x54], 0x5f00635f
pop rdx
push rbx
je 0x428b88
xor al, 0x5f
pop rdi
jae 0x428bc4
jb 0x428bc4
pop rdi
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x428bb0
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x428bcf
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x428bec
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor cl, byte [r9 + 0x4e]
push rbx
je 0x428bc2
je 0x428bf6
jb 0x428bf5
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x428bcd
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x428c14
push rax
jbe 0x428c25
jbe 0x428bf7
push r11
push r11
pop rdi
push rbx
pop r15
push r11
je 0x428bf7
cmp dword [rdi + 0x53], ebx
jo 0x428c2a
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x428c3a
push rax
push rsp
pop rdi
push rdx
push r12
xor byte [rdi + 0x44], bl
jo 0x428c34
push rsp
xor dword [rdi], ebx
add byte [rsi], ch
jae 0x428c66
insd dword [rdi], dx
je 0x428c51
add byte [rsi], ch
jae 0x428c69
jb 0x428c6b
add byte [rsi], ch
jae 0x428c65
jae 0x428c73
jb 0x428c75
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x428c76
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x428c84
outsb dx, byte cs:[esi]
jne 0x428c52
jne 0x428c90
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x428c60
push 0x687361
jns 0x428ca9
jae 0x428cb6
insd dword [rdi], dx
add byte [rsi], ch
jns 0x428cb1
jae 0x428cb9
jb 0x428c47
outsb dx, byte cs:[esi]
jne 0x428c7a
jbe 0x428cb3
jb 0x428cc3
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x428c87
jbe 0x428cc0
jb 0x428cd0
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x428ccb
insb byte [rdi], dx
jns 0x428cda
add byte [rsi], ch
jb 0x428cd5
insb byte [rdi], dx
jo 0x428ce1
je 0x428c77
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x428cb0
outsd dx, dword [esi]
je 0x428c86
je 0x428cee
js 0x428cff
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x428d04
je 0x428cfa
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x428d1d
jo 0x428d31
pop rdi
je 0x428d21
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x428d2f
jns 0x428cd0
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x428d4b
jns 0x428cdc
push 0x63
jb 0x428ce1
jns 0x428d53
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x428d5d
je 0x428cf3
je 0x428d59
add byte [rsi], ch
jae 0x428d70
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x428d07
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x428e5c
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 5], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
or byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
or byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x428eea
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x428f4a
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cwde
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
clc
sldt word [rax]
add byte [rax], al
add byte [rax], al
mov al, 4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4014], ch
add byte [rax], al
add byte [rax + 0x14], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add al, dl
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0x9e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add ah, dl
mov dh, 0
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
mov dh, 0x40
add byte [rax], al
add byte [rax], al
add al, ah
mov dh, 0
add byte [rax], al
add byte [rax], al
add bh, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0xbd
add byte [rax], al
add byte [rax], al
add byte [rax + 0xbd], dh
add byte [rax], al
add ah, dl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40d0], cl
add byte [rax], al
add byte [rax + 0xd0], cl
add byte [rax], al
add byte [rsi + rcx*2], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbx], dh
add byte [r8], al
add byte [rax], al
add byte [rdi + rbx], dh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
push rax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
sub eax, 0x61
add byte [rax], al
fsubr dword [rip + 1]
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x61
add byte [rax], al
call 0x429392
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
sub eax, 0x61
add byte [rax], al
sub eax, 1
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x61
add byte [rax], al
clc
sub eax, 1
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x6131], ch
add byte [rax], al
add byte [rax + 0x131], ch
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
xor dword [rcx], esp
add byte [rax], al
add byte [rax], al
mov eax, 0x131
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x131], bh
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x4296f0
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
xor dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 0x61], bl
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rbx + 1], dl
add byte [rax], al
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
