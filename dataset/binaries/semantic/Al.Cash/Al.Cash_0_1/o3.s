xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60915f
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x4018f0
mov eax, 0
test rax, rax
je 0x4018f0
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401938
mov eax, 0
test rax, rax
je 0x401938
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x2078e1], 0
jne 0x40195a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x2078ce], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401970
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40196b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
nop word cs:[rax + rax]
mov eax, edi
ret
nop dword [rax]
nop word cs:[rax + rax]
mov eax, edi
ret
nop dword [rax]
nop word cs:[rax + rax]
lea eax, [rdi - 2]
cmp eax, 0x22
ja 0x4019bb
mov eax, edi
ret
push rax
mov ecx, str.Detail::Base_setBase_uint_
mov edx, 0x5f
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_0_1_source.cpp
mov edi, str.2____value____value____36
call sym.imp.__assert_fail
nop
nop word cs:[rax + rax]
cmp edi, 0x7f
ja 0x4019e8
mov eax, edi
ret
push rax
mov ecx, str.Detail::Precision_setPrecision_uint_
mov edx, 0x60
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_0_1_source.cpp
mov edi, str.value___MAX_LENGTH
call sym.imp.__assert_fail
nop dword [rax]
nop word cs:[rax + rax]
mov rax, rdi
ret
nop
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
lea r13d, [rdi + 1]
push rbp
push rbx
mov rbp, rsi
sub rsp, 0x28
mov r12, qword [rip + 0x207854]
mov r15d, dword [r12 + 0x109c]
mov byte [r12 + 0x1098], 0
cmp r15d, 6
ja 0x401da0
mov r14, qword [r12 + 0x1088]
lea rbx, [r12 + 0x1008]
lea rax, [r14 + 0x86]
cmp qword [r12 + 0x1090], rax
jbe 0x402180
mov edx, 0x2320
mov dword [r14], 0x65736143
add r14, 6
mov word [r14 - 2], dx
mov qword [r12 + 0x1088], r14
test r13d, r13d
mov rsi, qword [r12 + 0x1090]
mov ecx, r13d
js 0x401f90
je 0x402300
mov r8d, dword [r12 + 0x10a4]
mov edi, 0xcccccccd
cmp r8d, 0xa
jne 0x401ca0
nop word [rax + rax]
mov eax, ecx
sub rsi, 1
mul edi
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
test edx, edx
mov byte [rsi], cl
mov ecx, edx
jne 0x401ad0
mov r15, rsi
cmp byte [r12 + 0x1098], 0
jne 0x401df8
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
mov edx, dword [r12 + 0x109c]
mov r13, rax
mov byte [r12 + 0x1098], 1
sub r13, r15
cmp r13d, edx
jb 0x402080
xor eax, eax
test r13, r13
je 0x401b4a
mov rdi, rcx
mov rdx, r13
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
mov rax, r13
add rcx, rax
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x402040
mov r13d, dword [r12 + 0x109c]
mov byte [r12 + 0x1098], 0
cmp r13d, 2
ja 0x401d50
lea rax, [rcx + 0x82]
cmp qword [r12 + 0x1090], rax
jbe 0x402250
mov eax, 0x203a
add rcx, 2
mov word [rcx - 2], ax
mov qword [r12 + 0x1088], rcx
mov r13, qword [rbp + 8]
mov r8d, dword [r12 + 0x109c]
mov r15, qword [rbp]
mov byte [r12 + 0x1098], 0
cmp r13d, r8d
mov r14d, r13d
jb 0x401d00
mov ebp, r13d
mov rax, qword [r12 + 0x1090]
lea rdx, [rcx + rbp + 0x80]
cmp rax, rdx
jbe 0x4020d8
cmp r13d, 1
je 0x402010
test r13d, r13d
jne 0x401cd8
add rcx, rbp
mov qword [r12 + 0x1088], rcx
mov ebp, dword [r12 + 0x109c]
mov byte [r12 + 0x1098], 0
cmp ebp, 1
ja 0x401e60
lea rdx, [rcx + 0x81]
cmp rax, rdx
jbe 0x401eb8
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
mov byte [rcx], 0xa
mov rbx, qword [rip + 0x20764e]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x401f58
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word [rax + rax]
mov eax, ecx
xor edx, edx
sub rsi, 1
div r8d
lea eax, [rdx + 0x30]
lea edi, [rdx + 0x37]
cmp edx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov r8d, dword [r12 + 0x10a4]
mov eax, ecx
div r8d
test eax, eax
mov ecx, eax
jne 0x401ca0
jmp 0x401aed
nop dword [rax + rax]
mov rdi, rcx
mov rdx, rbp
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
mov rax, qword [r12 + 0x1090]
jmp 0x401bf7
nop word cs:[rax + rax]
sub r8d, r13d
mov edx, r8d
lea rax, [rcx + rdx + 0x80]
cmp qword [r12 + 0x1090], rax
mov rbp, rdx
jbe 0x40262b
cmp edx, 1
je 0x4023a0
movzx esi, byte [r12 + 0x10a0]
lea rbp, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [r12 + 0x1088], rbp
mov rcx, rbp
jmp 0x401bc8
nop dword [rax]
lea edx, [r13 - 2]
lea rax, [rcx + rdx + 0x80]
cmp qword [r12 + 0x1090], rax
mov r13, rdx
jbe 0x4026e5
cmp edx, 1
je 0x40237c
movzx esi, byte [r12 + 0x10a0]
lea r13, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [r12 + 0x1088], r13
mov rcx, r13
jmp 0x401b79
nop dword [rax + rax]
mov rdi, qword [r12 + 0x1088]
lea edx, [r15 - 6]
mov r15, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [r12 + 0x1090], rax
jbe 0x40243b
cmp edx, 1
je 0x402334
movzx esi, byte [r12 + 0x10a0]
lea r14, [rdi + rdx]
lea rbx, [r12 + 0x1008]
call sym.imp.memset
mov qword [r12 + 0x1088], r14
jmp 0x401a67
nop dword [rax]
mov rdx, qword [r12 + 0x10c0]
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
mov r9, qword [r12 + 0x10b8]
mov byte [r12 + 0x1098], 0
mov r13d, edx
mov r14d, edx
lea rsi, [rcx + r13 + 0x80]
cmp rax, rsi
jbe 0x40257c
cmp edx, 1
je 0x40230d
test edx, edx
jne 0x401f68
add rcx, r13
mov qword [r12 + 0x1088], rcx
jmp 0x401b0f
nop dword [rax]
lea edx, [rbp - 1]
lea rsi, [rcx + rdx + 0x80]
mov rbp, rdx
cmp rax, rsi
jbe 0x4024ec
cmp edx, 1
je 0x402350
movzx esi, byte [r12 + 0x10a0]
lea rbp, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov rax, qword [r12 + 0x1090]
mov rcx, rbp
mov qword [r12 + 0x1088], rbp
lea rdx, [rcx + 0x81]
cmp rax, rdx
ja 0x401c2c
mov eax, ebx
mov ebp, 1
mov r15d, 0x407d83
sub eax, ecx
lea r13, [r12 + 8]
jmp 0x401efb
nop
test eax, eax
mov r14d, eax
jne 0x4028f1
add rcx, r14
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x401f25
test ebp, ebp
je 0x401c3b
add r15, r14
mov eax, 0x1000
cmp ebp, eax
jae 0x401ed0
mov r14d, ebp
xor ebp, ebp
mov rdi, rcx
mov rdx, r14
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r14
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jb 0x401eeb
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x4023c4
add rcx, r13
mov qword [r12 + 0x1088], rcx
jmp 0x401eeb
nop dword [rax + rax]
mov rdi, rbx
call rax
jmp 0x401c84
nop word [rax + rax]
mov rdi, rcx
mov rdx, r13
mov rsi, r9
call sym.imp.memmove
mov rcx, rax
mov rax, qword [r12 + 0x1090]
jmp 0x401e49
nop word cs:[rax + rax]
mov edi, r13d
neg edi
je 0x40276c
mov r8d, dword [r12 + 0x10a4]
mov ecx, 0xcccccccd
cmp r8d, 0xa
jne 0x401fe0
nop
mov eax, edi
sub rsi, 1
mul ecx
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub edi, eax
add edi, 0x30
test edx, edx
mov byte [rsi], dil
mov edi, edx
jne 0x401fb0
mov byte [rsi - 1], 0x2d
lea r15, [rsi - 1]
jmp 0x401af0
nop dword [rax + rax]
mov eax, edi
xor edx, edx
sub rsi, 1
div r8d
lea eax, [rdx + 0x30]
lea ecx, [rdx + 0x37]
cmp edx, 9
cmova eax, ecx
xor edx, edx
mov byte [rsi], al
mov r8d, dword [r12 + 0x10a4]
mov eax, edi
div r8d
test eax, eax
mov edi, eax
jne 0x401fe0
jmp 0x401fce
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r15]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
jmp 0x401c02
nop word [rax + rax]
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
xor r13d, r13d
call qword [rax]
mov rax, qword [r12 + 0x1088]
lea rcx, [r12 + 8]
sub rax, rbx
jne 0x4026cc
add rcx, r13
mov qword [r12 + 0x1088], rcx
jmp 0x401b5e
nop word [rax + rax]
sub edx, r13d
mov edx, edx
lea rsi, [rcx + rdx + 0x80]
mov r14, rdx
cmp rax, rsi
jbe 0x40279d
cmp edx, 1
je 0x402779
movzx esi, byte [r12 + 0x10a0]
lea r13, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [r12 + 0x1088], r13
mov rcx, r13
mov r13, qword [r12 + 0x1090]
sub r13, r15
jmp 0x401b2f
nop word [rax + rax]
lea rax, [r12 + 8]
mov ebp, ebx
sub ebp, ecx
mov qword [rsp], rax
jmp 0x40210d
nop word [rax + rax]
add rcx, r13
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x40213c
sub r14d, ebp
je 0x402170
add r15, r13
mov ebp, 0x1000
cmp r14d, ebp
cmovbe ebp, r14d
test ebp, ebp
mov r13d, ebp
je 0x4020f0
mov rdi, rcx
mov rdx, r13
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r13
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jb 0x402100
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x40241d
add rcx, qword [rsp]
sub r14d, ebp
mov qword [r12 + 0x1088], rcx
jne 0x402105
nop
mov rax, qword [r12 + 0x1090]
jmp 0x401c02
nop dword [rax]
lea rdi, [r12 + 8]
mov eax, ebx
mov ecx, 6
sub eax, r14d
mov r15d, str.Case__
mov qword [rsp + 0x10], rdi
jmp 0x4021cb
nop dword [rax]
test eax, eax
mov r8d, eax
jne 0x402900
add r14, r8
cmp r14, rbx
mov qword [r12 + 0x1088], r14
jae 0x402202
test ecx, ecx
je 0x401a99
add r15, r8
mov eax, 0x1000
cmp ecx, eax
jae 0x4021a0
mov r8d, ecx
xor ecx, ecx
mov rdx, r8
mov rdi, r14
mov rsi, r15
mov dword [rsp + 8], ecx
mov qword [rsp], r8
call sym.imp.memmove
mov r8, qword [rsp]
mov ecx, dword [rsp + 8]
add r14, r8
cmp r14, rbx
mov qword [r12 + 0x1088], r14
jb 0x4021bb
mov rax, qword [r12]
mov qword [rsp + 8], r8
mov esi, 0x1000
mov dword [rsp], ecx
mov rdi, r12
xor r14d, r14d
call qword [rax]
mov rax, qword [r12 + 0x1088]
mov ecx, dword [rsp]
mov r8, qword [rsp + 8]
sub rax, rbx
jne 0x4023fd
add r14, qword [rsp + 0x10]
mov qword [r12 + 0x1088], r14
jmp 0x4021bb
nop word cs:[rax + rax]
lea rdi, [r12 + 8]
mov eax, ebx
mov r13d, 2
sub eax, ecx
mov r14d, 0x407dd0
mov qword [rsp], rdi
jmp 0x40229c
nop dword [rax + rax]
test eax, eax
mov r15d, eax
jne 0x4028f8
add rcx, r15
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x4022c8
test r13d, r13d
je 0x401ba3
add r14, r15
mov eax, 0x1000
cmp r13d, eax
jae 0x402270
mov r15d, r13d
xor r13d, r13d
mov rdi, rcx
mov rdx, r15
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
add rcx, r15
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jb 0x40228b
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x4023df
add rcx, qword [rsp]
mov qword [r12 + 0x1088], rcx
jmp 0x40228b
nop word [rax + rax]
mov byte [rsi - 1], 0x30
lea r15, [rsi - 1]
jmp 0x401af0
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r9]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
jmp 0x401b0f
lea rax, [rdi + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rdi], al
jmp 0x401a57
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
jmp 0x401c1c
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
jmp 0x401b79
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
jmp 0x401bc8
mov rdx, rax
mov rsi, rbx
mov rdi, r13
mov qword [rsp], rax
call sym.imp.memmove
mov rcx, qword [rsp]
jmp 0x401f46
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x4022e9
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov r14, rax
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov ecx, dword [rsp]
jmp 0x402234
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x40215d
lea rbx, [r12 + 0x1008]
mov r14, rdi
mov eax, ebx
sub eax, edi
lea rdi, [r12 + 8]
mov qword [rsp + 0x10], rdi
jmp 0x40247e
nop word cs:[rax + rax]
cmp rbx, r8
mov qword [r12 + 0x1088], r8
mov r14, r8
jbe 0x4024b5
sub r15d, ecx
mov eax, 0x1000
je 0x401a67
cmp r15d, eax
cmovbe eax, r15d
mov edx, eax
test edx, edx
mov rcx, rdx
lea r8, [r14 + rdx]
je 0x402460
movzx esi, byte [r12 + 0x10a0]
mov rdi, r14
mov qword [rsp], r8
mov dword [rsp + 8], edx
call sym.imp.memset
mov ecx, dword [rsp + 8]
mov r8, qword [rsp]
jmp 0x402460
mov rax, qword [r12]
mov dword [rsp], ecx
mov esi, 0x1000
mov rdi, r12
xor r14d, r14d
call qword [rax]
mov rax, qword [r12 + 0x1088]
mov ecx, dword [rsp]
sub rax, rbx
jne 0x40282d
add r14, qword [rsp + 0x10]
mov qword [r12 + 0x1088], r14
jmp 0x402470
mov eax, ebx
lea r14, [r12 + 8]
sub eax, ecx
jmp 0x40251a
nop word [rax + rax]
cmp r15, rbx
mov qword [r12 + 0x1088], r15
mov rcx, r15
jae 0x40253f
sub ebp, r13d
mov eax, 0x1000
je 0x40256f
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r13, rdx
lea r15, [rcx + rdx]
je 0x402500
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
call sym.imp.memset
jmp 0x402500
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
xor r15d, r15d
call qword [rax]
mov rax, qword [r12 + 0x1088]
sub rax, rbx
jne 0x4028be
lea rcx, [r14 + r15]
mov qword [r12 + 0x1088], rcx
jmp 0x402510
mov rax, qword [r12 + 0x1090]
jmp 0x401c1c
lea rax, [r12 + 8]
mov r13d, ebx
sub r13d, ecx
mov qword [rsp + 0x10], rax
jmp 0x4025b2
nop
add rcx, r10
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x4025e6
sub r14d, r13d
je 0x401b07
add r9, r10
mov r13d, 0x1000
cmp r14d, r13d
cmovbe r13d, r14d
test r13d, r13d
mov r10d, r13d
je 0x402590
mov rdx, r10
mov rsi, r9
mov rdi, rcx
mov qword [rsp + 8], r10
mov qword [rsp], r9
call sym.imp.memmove
mov r10, qword [rsp + 8]
mov r9, qword [rsp]
mov rcx, rax
jmp 0x402590
mov rax, qword [r12]
mov qword [rsp + 8], r9
mov esi, 0x1000
mov qword [rsp], r10
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
mov r10, qword [rsp]
mov r9, qword [rsp + 8]
sub rax, rbx
jne 0x402848
add rcx, qword [rsp + 0x10]
mov qword [r12 + 0x1088], rcx
jmp 0x4025a0
lea rdi, [r12 + 8]
mov eax, ebx
sub eax, ecx
mov qword [rsp + 0x10], rdi
jmp 0x40265e
nop dword [rax + rax]
cmp r9, rbx
mov qword [r12 + 0x1088], r9
mov rcx, r9
jae 0x402694
sub ebp, r10d
mov eax, 0x1000
je 0x401bc8
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r10, rdx
lea r9, [rcx + rdx]
je 0x402640
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
mov qword [rsp + 8], r9
mov dword [rsp], edx
call sym.imp.memset
mov r9, qword [rsp + 8]
mov r10d, dword [rsp]
jmp 0x402640
mov rax, qword [r12]
mov dword [rsp], r10d
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
mov r10d, dword [rsp]
sub rax, rbx
jne 0x402879
add rcx, qword [rsp + 0x10]
mov qword [r12 + 0x1088], rcx
jmp 0x402650
mov rdi, rcx
mov rdx, rax
mov rsi, rbx
mov r13, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x402067
lea rdi, [r12 + 8]
mov eax, ebx
sub eax, ecx
mov qword [rsp], rdi
jmp 0x402716
nop dword [rax]
cmp r14, rbx
mov qword [r12 + 0x1088], r14
mov rcx, r14
jae 0x40273d
sub r13d, r15d
mov eax, 0x1000
je 0x401b79
cmp r13d, eax
cmovbe eax, r13d
mov edx, eax
test edx, edx
mov r15, rdx
lea r14, [rcx + rdx]
je 0x4026f8
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
call sym.imp.memset
jmp 0x4026f8
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x4028a0
add rcx, qword [rsp]
mov qword [r12 + 0x1088], rcx
jmp 0x402708
mov byte [rsi - 1], 0x30
sub rsi, 1
jmp 0x401fce
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
jmp 0x4020c2
lea rdi, [r12 + 8]
mov eax, ebx
sub eax, ecx
mov qword [rsp + 8], rdi
jmp 0x4027ce
nop dword [rax]
cmp r9, rbx
mov qword [r12 + 0x1088], r9
mov rcx, r9
jae 0x4027fd
sub r14d, r13d
mov eax, 0x1000
je 0x4020c2
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
test edx, edx
mov r13, rdx
lea r9, [rcx + rdx]
je 0x4027b0
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
mov qword [rsp], r9
call sym.imp.memset
mov r9, qword [rsp]
jmp 0x4027b0
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x4028d4
add rcx, qword [rsp + 8]
mov qword [r12 + 0x1088], rcx
jmp 0x4027c0
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov r14, rax
call sym.imp.memmove
mov ecx, dword [rsp]
jmp 0x4024dd
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 0x18], r9
mov qword [rsp + 8], r10
mov qword [rsp], rax
call sym.imp.memmove
mov r9, qword [rsp + 0x18]
mov r10, qword [rsp + 8]
mov rcx, qword [rsp]
jmp 0x402619
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov dword [rsp + 8], r10d
mov qword [rsp], rax
call sym.imp.memmove
mov r10d, dword [rsp + 8]
mov rcx, qword [rsp]
jmp 0x4026bd
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x40275e
mov rdx, rax
mov rsi, rbx
mov rdi, r14
mov r15, rax
call sym.imp.memmove
jmp 0x402561
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, rbx
mov qword [rsp], rax
call sym.imp.memmove
mov rcx, qword [rsp]
jmp 0x40281e
sub ebp, eax
jmp 0x401f04
sub r13d, eax
jmp 0x4022a7
sub ecx, eax
jmp 0x4021d4
nop word [rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x48
mov rax, qword fs:[0x28]
mov qword [rsp + 0x38], rax
xor eax, eax
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x40294a
mov edi, obj.inputMutex
call sym.imp.pthread_mutex_lock
test eax, eax
jne 0x404122
movsxd r15, dword [rip + 0x20690b]
cmp r15d, dword [rip + 0x206900]
jge 0x403f16
mov rbx, qword [rip + 0x206923]
lea r13d, [r15 + 1]
mov dword [rip + 0x2068ec], r13d
mov eax, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
cmp eax, 5
ja 0x403627
mov rbp, qword [rbx + 0x1088]
lea r14, [rbx + 0x1008]
lea rax, [rbp + 0x85]
cmp qword [rbx + 0x1090], rax
jbe 0x403684
mov dword [rbp], 0x65736143
mov byte [rbp + 4], 0x20
add rbp, 5
mov qword [rbx + 0x1088], rbp
test r13d, r13d
mov rsi, qword [rbx + 0x1090]
mov ecx, r13d
js 0x4038a0
je 0x403ae2
mov r8d, dword [rbx + 0x10a4]
mov edi, 0xcccccccd
cmp r8d, 0xa
jne 0x402c9e
nop dword [rax]
mov eax, ecx
sub rsi, 1
mul edi
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
test edx, edx
mov byte [rsi], cl
mov ecx, edx
jne 0x4029f0
mov r12, rsi
cmp byte [rbx + 0x1098], 0
jne 0x4035b4
mov r13, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
mov ebp, dword [rbx + 0x109c]
mov rax, rsi
mov byte [rbx + 0x1098], 1
sub rax, r12
cmp eax, ebp
jb 0x403a97
xor ebp, ebp
test rax, rax
je 0x402a5e
mov rdx, rax
mov rsi, r12
mov rdi, r13
mov rbp, rax
call sym.imp.memmove
add rbp, r13
cmp rbp, r14
mov qword [rbx + 0x1088], rbp
jae 0x403a55
mov eax, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
cmp eax, 8
ja 0x4034af
lea rax, [rbp + 0x88]
cmp qword [rbx + 0x1090], rax
jbe 0x403505
movabs rax, 0x6465747261747320
add rbp, 8
mov qword [rbp - 8], rax
lea rax, [rbp + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rax
mov byte [rbp], 0xa
cmp qword [rbx + 0x1088], r14
jae 0x403a13
mov rbx, qword [rip + 0x2067b1]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x403896
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
mov edi, 0x22e8
call sym.operatornew
lea rbx, [rax + 0x22d0]
mov qword [rax + 0x22c8], 0
mov byte [rax + 0x22d0], 0
mov edi, 0x10e0
mov r13, rax
mov qword [rax + 0x22c0], rbx
call sym.operatornew
lea rdx, [rax + 8]
mov rbx, qword [rip + 0x206736]
mov byte [rax + 0x1098], 0
mov dword [rax + 0x109c], 0
mov byte [rax + 0x10a0], 0x20
mov qword [rax + 0x1088], rdx
lea rdx, [rax + 0x1088]
mov dword [rax + 0x10a4], 0xa
mov dword [rax + 0x10a8], 9
mov byte [rax + 0x10c8], 0x20
mov qword [rax + 0x1090], rdx
lea rdx, [rax + 0x10c8]
mov qword [rax + 0x10c0], 1
mov byte [rax + 0x10c9], 0
mov qword [rax + 0x10b0], 0x3b9aca00
mov qword [rax + 0x10b8], rdx
lea rdx, [r13 + 0x22c0]
mov qword [rax], 0x408208
mov qword [r13 + 0x22e0], rax
mov qword [rsp + 0x30], r13
mov qword [rax + 0x10d8], rdx
mov rax, qword [rbx + 8]
nop word [rax + rax]
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x402dda
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov edi, r12d
cmp dl, 4
jbe 0x402c00
cmp r12b, 0x20
je 0x402c00
cmp r12b, 0x2d
movsx ecx, r12b
je 0x403743
mov esi, dword [rbx + 0x18]
xor r14d, r14d
xor ebp, ebp
cmp esi, 0xa
ja 0x402cfb
lea edx, [rdi - 0x30]
xor r14d, r14d
xor ebp, ebp
movzx edx, dl
cmp esi, edx
ja 0x402c79
jmp 0x402d1f
nop
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx ecx, byte [rdx]
lea edx, [rcx - 0x30]
movzx edx, dl
cmp edx, esi
jae 0x402d1f
imul ebp, esi
add r14d, 1
cmp qword [rbx + 0x10], rax
mov rdx, rax
lea ebp, [rbp + rcx - 0x30]
ja 0x402c60
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402c60
mov eax, ecx
xor edx, edx
sub rsi, 1
div r8d
lea eax, [rdx + 0x30]
lea edi, [rdx + 0x37]
cmp edx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov r8d, dword [rbx + 0x10a4]
mov eax, ecx
div r8d
test eax, eax
mov ecx, eax
jne 0x402c9e
jmp 0x402a0d
lea edx, [rcx - 0x37]
movsx edx, dl
cmp edx, esi
jae 0x402d1f
imul ebp, esi
add r14d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x4039ff
lea rdx, [rax + 1]
mov qword [rbx + 8], rdx
movzx ecx, byte [rax]
mov rax, rdx
lea edx, [rcx - 0x30]
cmp dl, 9
jbe 0x402cd3
lea edx, [rcx - 0x41]
cmp dl, 0x19
jbe 0x402cd0
lea edi, [rcx - 0x61]
lea edx, [rcx - 0x57]
cmp dil, 0x19
cmova edx, esi
movsx edx, dl
cmp edx, esi
jb 0x402cda
sub rax, 1
test r14d, r14d
mov qword [rbx + 8], rax
je 0x402f20
mov edx, ebp
neg edx
cmp r12b, 0x2d
cmove ebp, edx
mov dword [r13], ebp
nop
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x402f39
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x402d40
cmp r12b, 0x20
je 0x402d40
cmp r12b, 0x2d
movsx edx, r12b
je 0x40392a
mov esi, dword [rbx + 0x18]
xor r14d, r14d
xor ebp, ebp
cmp esi, 0xa
ja 0x402e15
sub ecx, 0x30
xor r14d, r14d
xor ebp, ebp
movzx ecx, cl
cmp ecx, esi
jb 0x402db5
jmp 0x402e33
nop
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x402e33
imul ebp, esi
add r14d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x402da0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402da0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402c0d
mov edx, ecx
movsx edx, dl
cmp edx, esi
jae 0x402e33
imul ebp, esi
add r14d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x403b7c
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x402deb
lea ecx, [rdx - 0x41]
cmp cl, 0x19
ja 0x403919
sub edx, 0x37
movsx edx, dl
cmp edx, esi
jb 0x402df4
sub rax, 1
test r14d, r14d
mov qword [rbx + 8], rax
je 0x402f20
mov eax, ebp
neg eax
cmp r12b, 0x2d
cmove ebp, eax
test ebp, ebp
mov dword [r13 + 4], ebp
jle 0x403107
lea eax, [rbp - 1]
lea r14, [r13 + 0x1164]
lea rax, [r13 + rax*4 + 0x1168]
mov qword [rsp + 8], rax
mov rbx, qword [rip + 0x20641f]
mov rax, qword [rbx + 8]
nop dword [rax]
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x403070
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x402e80
cmp r12b, 0x20
je 0x402e80
cmp r12b, 0x2d
movsx edx, r12b
je 0x4032f8
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x402f7b
sub ecx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx ecx, cl
cmp ecx, esi
jb 0x402ef9
jmp 0x402fa0
nop
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x402fa0
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x402ee0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402ee0
nop
mov ecx, str.void_read_Ts___...___with_Ts____int___int___
mov edx, 0x240
mov esi, str.sorted_code_semantic_Al.Cash_Al.Cash_0_1_source.cpp
mov edi, str.input__read_forward_Ts__args_..._
call sym.imp.__assert_fail
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402d4d
nop word [rax + rax]
lea ecx, [rdx - 0x37]
movsx edx, cl
cmp edx, esi
jae 0x402fa0
imul ebp, esi
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x403336
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x402f53
lea ecx, [rdx - 0x41]
cmp cl, 0x19
jbe 0x402f50
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
mov ecx, edx
cmova ecx, esi
movsx edx, cl
cmp edx, esi
jb 0x402f5a
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x402f20
mov edx, ebp
neg edx
cmp r12b, 0x2d
cmove ebp, edx
mov dword [r14 - 0x115c], ebp
nop dword [rax + rax]
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x4032e0
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x402fc8
cmp r12b, 0x20
je 0x402fc8
cmp r12b, 0x2d
movsx edx, r12b
je 0x403317
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x4030ac
sub ecx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx ecx, cl
cmp esi, ecx
ja 0x403049
jmp 0x4030d8
nop word [rax + rax]
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x4030d8
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x403030
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x403030
nop
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402e8d
lea ecx, [rdx - 0x37]
movsx edx, cl
cmp edx, esi
jae 0x4030d8
imul ebp, esi
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x40341c
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x403084
lea ecx, [rdx - 0x41]
cmp cl, 0x19
jbe 0x403081
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
mov ecx, edx
cmova ecx, esi
movsx edx, cl
cmp edx, esi
jb 0x40308b
nop dword [rax]
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x402f20
mov eax, ebp
neg eax
cmp r12b, 0x2d
cmove ebp, eax
add r14, 4
mov dword [r14 - 4], ebp
cmp r14, qword [rsp + 8]
jne 0x402e72
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x40311b
mov edi, obj.inputMutex
call sym.imp.pthread_mutex_unlock
mov r12, qword [rsp + 0x30]
mov eax, dword [r12 + 4]
mov ecx, dword [r12]
test eax, eax
jle 0x404108
sub eax, 1
pxor xmm1, xmm1
lea rdx, [r12 + 8]
lea rsi, [r12 + rax*4 + 0xc]
nop word [rax + rax]
mov eax, ecx
sub eax, dword [rdx]
add rdx, 4
pxor xmm0, xmm0
pxor xmm2, xmm2
cvtsi2sd xmm0, eax
cvtsi2sd xmm2, dword [rdx + 0x1158]
cmp rsi, rdx
divsd xmm0, xmm2
maxsd xmm0, xmm1
movapd xmm1, xmm0
jne 0x403148
pxor xmm0, xmm0
mov rbp, qword [r12 + 0x22e0]
cvtsi2sd xmm0, ecx
mov rsi, qword [rbp + 0x1090]
divsd xmm0, xmm1
movmskpd r14d, xmm0
and r14d, 1
je 0x4031a3
xorpd xmm0, xmmword [rip + 0x50dd]
ucomisd xmm0, xmm0
jp 0x4039a7
movapd xmm1, xmm0
andpd xmm1, xmmword [rip + 0x50d7]
ucomisd xmm1, qword [rip + 0x50df]
jbe 0x40334a
lea rbx, [rsi - 3]
mov byte [rsi - 1], 0x66
mov byte [rsi - 2], 0x6e
mov byte [rsi - 3], 0x49
test r14d, r14d
je 0x4031e4
mov byte [rbx - 1], 0x2d
sub rbx, 1
cmp byte [rbp + 0x1098], 0
jne 0x403430
mov r8, qword [rbp + 0x1088]
mov rcx, qword [rbp + 0x1090]
lea r13, [rbp + 0x1008]
mov r14d, dword [rbp + 0x109c]
mov rax, rcx
mov byte [rbp + 0x1098], 1
sub rax, rbx
cmp eax, r14d
jb 0x40395a
xor r14d, r14d
test rax, rax
je 0x40323f
mov rdi, r8
mov rdx, rax
mov rsi, rbx
mov r14, rax
call sym.imp.memmove
mov r8, rax
lea rax, [r8 + r14]
cmp rax, r13
mov qword [rbp + 0x1088], rax
jae 0x4039bc
mov rbx, qword [r12 + 0x22e0]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea rbp, [rbx + 8]
mov rdi, rbx
sub rsi, rbp
call qword [rax]
mov rax, qword [rsp + 0x30]
shl r15, 5
mov qword [rbx + 0x1088], rbp
mov rdi, r15
add rdi, qword [rip + 0x205fb5]
lea rsi, [rax + 0x22c0]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rbx, qword [rsp + 0x30]
test rbx, rbx
je 0x40292e
mov rdi, qword [rbx + 0x22e0]
test rdi, rdi
je 0x4032b7
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x22c0]
lea rax, [rbx + 0x22d0]
cmp rdi, rax
je 0x4032cf
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
jmp 0x40292e
nop dword [rax]
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402fd5
nop dword [rax]
cmp rax, qword [rbx + 0x10]
jae 0x403762
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x402eba
cmp rax, qword [rbx + 0x10]
jae 0x403949
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x403002
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402f6d
ucomisd xmm0, qword [rip + 0x4f56]
jae 0x40381e
cvttsd2si r13, xmm0
mov rdx, qword [rbp + 0x10b0]
test r13, r13
js 0x40384c
pxor xmm1, xmm1
test rdx, rdx
cvtsi2sd xmm1, r13
subsd xmm0, xmm1
js 0x403875
pxor xmm1, xmm1
cvtsi2sd xmm1, rdx
mulsd xmm0, xmm1
addsd xmm0, qword [rip + 0x4f18]
ucomisd xmm0, qword [rip + 0x4f08]
jae 0x4037ff
cvttsd2si rcx, xmm0
cmp rdx, rcx
ja 0x403773
mov edx, dword [rbp + 0x10a8]
mov rbx, rsi
add r13, 1
sub rbx, rdx
test edx, edx
jne 0x404067
test r13, r13
je 0x4037f2
mov eax, dword [rbp + 0x10a4]
movabs rcx, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x403b90
nop
mov rax, r13
sub rbx, 1
mul rcx
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub r13, rax
add r13d, 0x30
test rdx, rdx
mov byte [rbx], r13b
mov r13, rdx
jne 0x4033f0
jmp 0x4031d7
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x40309e
mov rax, qword [rbp + 0x10c0]
mov r8, qword [rbp + 0x1088]
mov rcx, qword [rbp + 0x1090]
mov r13, qword [rbp + 0x10b8]
mov byte [rbp + 0x1098], 0
mov r9d, eax
mov r14d, eax
lea rdx, [r8 + r9 + 0x80]
cmp rcx, rdx
jbe 0x403bc8
cmp eax, 1
je 0x403b36
test eax, eax
je 0x403499
mov rdx, r9
mov rdi, r8
mov rsi, r13
mov qword [rsp + 8], r9
call sym.imp.memmove
mov rcx, qword [rbp + 0x1090]
mov r9, qword [rsp + 8]
mov r8, rax
add r8, r9
lea r13, [rbp + 0x1008]
mov qword [rbp + 0x1088], r8
jmp 0x403206
lea edx, [rax - 8]
lea rax, [rbp + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
mov r12, rdx
jbe 0x403db6
cmp edx, 1
je 0x403b15
movzx esi, byte [rbx + 0x10a0]
lea r12, [rbp + rdx]
mov rdi, rbp
mov rbp, r12
call sym.imp.memset
lea rax, [rbp + 0x88]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], r12
ja 0x402a9b
lea rdi, [rbx + 8]
mov eax, r14d
mov r13d, 8
sub eax, ebp
mov r12d, str.started
mov qword [rsp + 0x10], rdi
jmp 0x40354b
test eax, eax
mov ecx, eax
jne 0x404169
add rbp, rcx
cmp rbp, r14
mov qword [rbx + 0x1088], rbp
jae 0x40357d
test r13d, r13d
je 0x402aad
add r12, rcx
mov eax, 0x1000
cmp r13d, eax
jae 0x403521
mov ecx, r13d
xor r13d, r13d
mov rdx, rcx
mov rdi, rbp
mov rsi, r12
mov qword [rsp + 8], rcx
call sym.imp.memmove
mov rcx, qword [rsp + 8]
add rbp, rcx
cmp rbp, r14
mov qword [rbx + 0x1088], rbp
jb 0x40353a
mov rax, qword [rbx]
mov qword [rsp + 8], rcx
mov esi, 0x1000
mov rdi, rbx
xor ebp, ebp
call qword [rax]
mov rax, qword [rbx + 0x1088]
mov rcx, qword [rsp + 8]
sub rax, r14
jne 0x403c9d
add rbp, qword [rsp + 0x10]
mov qword [rbx + 0x1088], rbp
jmp 0x40353a
mov rax, qword [rbx + 0x10c0]
mov r13, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
mov r9, qword [rbx + 0x10b8]
mov byte [rbx + 0x1098], 0
mov ecx, eax
mov ebp, eax
lea rdx, [r13 + rcx + 0x80]
cmp rsi, rdx
jbe 0x403e4d
cmp eax, 1
je 0x403aef
test eax, eax
je 0x403618
mov rdx, rcx
mov rsi, r9
mov rdi, r13
mov qword [rsp + 8], rcx
call sym.imp.memmove
mov rsi, qword [rbx + 0x1090]
mov rcx, qword [rsp + 8]
add r13, rcx
mov qword [rbx + 0x1088], r13
jmp 0x402a2b
mov rdi, qword [rbx + 0x1088]
lea edx, [rax - 5]
mov r8, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x403ced
cmp edx, 1
je 0x403b63
movzx esi, byte [rbx + 0x10a0]
lea rbp, [rdi + rdx]
lea r14, [rbx + 0x1008]
call sym.imp.memset
lea rax, [rbp + 0x85]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rbp
ja 0x4029a8
lea rdi, [rbx + 8]
mov eax, r14d
mov ecx, 5
sub eax, ebp
mov r12d, str.Case
mov qword [rsp + 0x18], rdi
jmp 0x4036c9
test eax, eax
mov r8d, eax
jne 0x404162
add rbp, r8
cmp rbp, r14
mov qword [rbx + 0x1088], rbp
jae 0x403701
test ecx, ecx
je 0x4029be
add r12, r8
mov eax, 0x1000
cmp ecx, eax
jae 0x40369f
mov r8d, ecx
xor ecx, ecx
mov rdx, r8
mov rdi, rbp
mov rsi, r12
mov dword [rsp + 0x10], ecx
mov qword [rsp + 8], r8
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov ecx, dword [rsp + 0x10]
add rbp, r8
cmp rbp, r14
mov qword [rbx + 0x1088], rbp
jb 0x4036b9
mov rax, qword [rbx]
mov qword [rsp + 0x10], r8
mov esi, 0x1000
mov dword [rsp + 8], ecx
mov rdi, rbx
xor ebp, ebp
call qword [rax]
mov rax, qword [rbx + 0x1088]
mov ecx, dword [rsp + 8]
mov r8, qword [rsp + 0x10]
sub rax, r14
jne 0x403ccc
add rbp, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rbp
jmp 0x4036b9
cmp rax, qword [rbx + 0x10]
jae 0x403c8c
lea rdx, [rax + 1]
mov qword [rbx + 8], rdx
movsx ecx, byte [rax]
mov rax, rdx
mov edi, ecx
jmp 0x402c3a
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x403302
mov edx, dword [rbp + 0x10a8]
mov rbx, rsi
sub rbx, rdx
test edx, edx
je 0x4033cc
test rcx, rcx
je 0x404067
mov eax, dword [rbp + 0x10a4]
movabs rdi, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x403fa5
nop dword [rax]
mov rax, rcx
sub rsi, 1
mul rdi
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rcx, rax
test rdx, rdx
lea eax, [rcx + 0x30]
mov rcx, rdx
mov byte [rsi], al
jne 0x4037b0
sub rsi, rbx
mov rdx, rsi
jne 0x403cba
mov byte [rbx - 1], 0x2e
sub rbx, 1
test r13, r13
jne 0x4033d5
mov byte [rbx - 1], 0x30
sub rbx, 1
jmp 0x4031d7
subsd xmm0, qword [rip + 0x4aa1]
movabs rax, 0x8000000000000000
cvttsd2si rcx, xmm0
xor rcx, rax
jmp 0x4033ab
movapd xmm1, xmm0
movabs rax, 0x8000000000000000
mov rdx, qword [rbp + 0x10b0]
subsd xmm1, qword [rip + 0x4a6d]
cvttsd2si r13, xmm1
xor r13, rax
test r13, r13
jns 0x40336d
mov rax, r13
mov rcx, r13
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
test rdx, rdx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
subsd xmm0, xmm1
jns 0x403383
mov rax, rdx
mov rcx, rdx
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x40338c
mov rdi, rbx
call rax
jmp 0x402b19
neg ecx
je 0x403f6e
mov r8d, dword [rbx + 0x10a4]
mov edi, 0xcccccccd
cmp r8d, 0xa
jne 0x4038ea
nop word [rax + rax]
mov eax, ecx
sub rsi, 1
mul edi
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub ecx, eax
test edx, edx
lea eax, [rcx + 0x30]
mov ecx, edx
mov byte [rsi], al
jne 0x4038c0
mov byte [rsi - 1], 0x2d
lea r12, [rsi - 1]
jmp 0x402a10
mov eax, ecx
xor edx, edx
sub rsi, 1
div r8d
lea eax, [rdx + 0x30]
lea edi, [rdx + 0x37]
cmp edx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov r8d, dword [rbx + 0x10a4]
mov eax, ecx
div r8d
test eax, eax
mov ecx, eax
jne 0x4038ea
jmp 0x4038dd
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
cmova edx, esi
jmp 0x402ded
cmp rax, qword [rbx + 0x10]
jae 0x404111
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x402d7a
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x403321
sub r14d, eax
mov edx, r14d
lea rax, [r8 + rdx + 0x80]
cmp rcx, rax
jbe 0x404074
cmp r14d, 1
je 0x403f4d
movzx esi, byte [rbp + 0x10a0]
lea r14, [r8 + rdx]
mov rdi, r8
call sym.imp.memset
mov qword [rbp + 0x1088], r14
mov r8, r14
mov rax, qword [rbp + 0x1090]
sub rax, rbx
jmp 0x403223
mov byte [rsi - 1], 0x4e
mov byte [rsi - 2], 0x61
lea rbx, [rsi - 3]
mov byte [rsi - 3], 0x4e
jmp 0x4031d7
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ebx, ebx
lea rcx, [rbp + 8]
sub rax, r13
je 0x4039f0
mov rdi, rcx
mov rdx, rax
mov rsi, r13
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
add rbx, rcx
mov qword [rbp + 0x1088], rbx
jmp 0x403253
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402ced
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
xor ebp, ebp
call qword [rax]
mov rax, qword [rbx + 0x1088]
lea rcx, [rbx + 8]
sub rax, r14
je 0x403a46
mov rdi, rcx
mov rdx, rax
mov rsi, r14
mov rbp, rax
call sym.imp.memmove
mov rcx, rax
add rbp, rcx
mov qword [rbx + 0x1088], rbp
jmp 0x402ad0
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
xor ebp, ebp
call qword [rax]
mov rax, qword [rbx + 0x1088]
lea rcx, [rbx + 8]
sub rax, r14
je 0x403a88
mov rdi, rcx
mov rdx, rax
mov rsi, r14
mov rbp, rax
call sym.imp.memmove
mov rcx, rax
add rbp, rcx
mov qword [rbx + 0x1088], rbp
jmp 0x402a71
sub ebp, eax
mov edx, ebp
lea rax, [r13 + rdx + 0x80]
cmp rsi, rax
jbe 0x403fdd
cmp ebp, 1
je 0x403f83
movzx esi, byte [rbx + 0x10a0]
lea rbp, [r13 + rdx]
mov rdi, r13
mov r13, rbp
call sym.imp.memset
mov qword [rbx + 0x1088], rbp
mov rax, qword [rbx + 0x1090]
sub rax, r12
jmp 0x402a46
mov byte [rsi - 1], 0x30
lea r12, [rsi - 1]
jmp 0x402a10
lea rax, [r13 + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [r9]
mov byte [r13], al
mov r13, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
jmp 0x402a2b
lea rax, [rbp + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rbp], al
mov rbp, qword [rbx + 0x1088]
jmp 0x402a87
lea rax, [r8 + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r13]
lea r13, [rbp + 0x1008]
mov byte [r8], al
mov r8, qword [rbp + 0x1088]
mov rcx, qword [rbp + 0x1090]
jmp 0x403206
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x402986
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402e07
mov ecx, eax
mov rax, r13
xor edx, edx
sub rbx, 1
div rcx
lea ecx, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, ecx
xor edx, edx
mov byte [rbx], al
mov ecx, dword [rbp + 0x10a4]
mov rax, r13
div rcx
test rax, rax
mov r13, rax
jne 0x403b92
jmp 0x4031d7
lea rax, [rbp + 0x1008]
lea rdi, [rbp + 8]
mov qword [rsp + 0x10], rax
mov qword [rsp + 0x20], rdi
sub eax, r8d
jmp 0x403c06
add r8, qword [rsp + 8]
cmp qword [rsp + 0x10], r8
mov qword [rbp + 0x1088], r8
jbe 0x403c40
sub r14d, dword [rsp + 0x18]
je 0x403c2f
add r13, qword [rsp + 8]
mov eax, 0x1000
cmp r14d, eax
cmovbe eax, r14d
mov edi, eax
test eax, eax
mov dword [rsp + 0x18], eax
mov qword [rsp + 8], rdi
je 0x403be2
mov rdx, rdi
mov rsi, r13
mov rdi, r8
call sym.imp.memmove
mov r8, rax
jmp 0x403be2
mov rcx, qword [rbp + 0x1090]
mov r13, qword [rsp + 0x10]
jmp 0x403206
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
xor r8d, r8d
mov rax, qword [rbp + 0x1088]
sub rax, qword [rsp + 0x10]
je 0x403c7b
mov rsi, qword [rsp + 0x10]
mov rdi, qword [rsp + 0x20]
mov rdx, rax
mov qword [rsp + 0x28], rax
call sym.imp.memmove
mov r8, qword [rsp + 0x28]
add r8, qword [rsp + 0x20]
mov qword [rbp + 0x1088], r8
jmp 0x403bf5
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x40374d
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, r14
mov rbp, rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x4035a6
mov esi, 0x30
mov rdi, rbx
call sym.imp.memset
jmp 0x4037e1
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, r14
mov rbp, rax
call sym.imp.memmove
mov r8, qword [rsp + 0x10]
mov ecx, dword [rsp + 8]
jmp 0x403732
lea r12, [rbx + 0x1008]
lea rsi, [rbx + 8]
mov eax, r12d
mov qword [rsp + 8], rsi
sub eax, edi
jmp 0x403d21
cmp r12, rbp
mov qword [rbx + 0x1088], rbp
jbe 0x403d57
sub r8d, r14d
mov eax, 0x1000
je 0x403dae
mov rdi, rbp
cmp r8d, eax
cmovbe eax, r8d
mov edx, eax
test edx, edx
mov r14, rdx
lea rbp, [rdi + rdx]
je 0x403d04
movzx esi, byte [rbx + 0x10a0]
mov dword [rsp + 0x10], r8d
call sym.imp.memset
cmp r12, rbp
mov r8d, dword [rsp + 0x10]
mov qword [rbx + 0x1088], rbp
ja 0x403d10
mov rax, qword [rbx]
mov dword [rsp + 0x10], r8d
mov esi, 0x1000
mov rdi, rbx
xor ebp, ebp
call qword [rax]
mov rax, qword [rbx + 0x1088]
mov r8d, dword [rsp + 0x10]
sub rax, r12
je 0x403d94
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r12
mov rbp, rax
call sym.imp.memmove
mov r8d, dword [rsp + 0x10]
add rbp, qword [rsp + 8]
sub r8d, r14d
mov eax, 0x1000
mov qword [rbx + 0x1088], rbp
jne 0x403d1e
mov r14, r12
jmp 0x402994
lea rsi, [rbx + 8]
mov eax, r14d
mov rdi, rbp
sub eax, ebp
mov qword [rsp + 8], rsi
jmp 0x403de6
cmp rbp, r14
mov qword [rbx + 0x1088], rbp
jae 0x403e11
sub r12d, r13d
mov eax, 0x1000
je 0x402a87
mov rdi, rbp
cmp r12d, eax
cmovbe eax, r12d
mov edx, eax
add rbp, rdx
test edx, edx
mov r13, rdx
je 0x403dc9
movzx esi, byte [rbx + 0x10a0]
call sym.imp.memset
cmp rbp, r14
mov qword [rbx + 0x1088], rbp
jb 0x403dd5
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
xor ebp, ebp
call qword [rax]
mov rax, qword [rbx + 0x1088]
sub rax, r14
je 0x403e3f
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r14
mov rbp, rax
call sym.imp.memmove
add rbp, qword [rsp + 8]
mov qword [rbx + 0x1088], rbp
jmp 0x403dd5
lea rdi, [rbx + 8]
mov eax, r14d
sub eax, r13d
mov qword [rsp + 0x10], rdi
jmp 0x403e82
add r13, qword [rsp + 8]
cmp r13, r14
mov qword [rbx + 0x1088], r13
jae 0x403eb8
sub ebp, r10d
je 0x402a24
add r9, qword [rsp + 8]
mov eax, 0x1000
cmp ebp, eax
cmovbe eax, ebp
mov eax, eax
test eax, eax
mov r10, rax
mov qword [rsp + 8], rax
je 0x403e5e
mov rsi, r9
mov rdx, rax
mov rdi, r13
mov qword [rsp + 0x18], r9
mov dword [rsp + 0x20], eax
call sym.imp.memmove
mov r10d, dword [rsp + 0x20]
mov r9, qword [rsp + 0x18]
jmp 0x403e5e
mov rax, qword [rbx]
mov qword [rsp + 0x20], r9
mov esi, 0x1000
mov dword [rsp + 0x18], r10d
mov rdi, rbx
xor r13d, r13d
call qword [rax]
mov rax, qword [rbx + 0x1088]
mov r10d, dword [rsp + 0x18]
mov r9, qword [rsp + 0x20]
sub rax, r14
je 0x403f05
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, r14
mov r13, rax
call sym.imp.memmove
mov r9, qword [rsp + 0x20]
mov r10d, dword [rsp + 0x18]
add r13, qword [rsp + 0x10]
mov qword [rbx + 0x1088], r13
jmp 0x403e6f
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x403f2a
mov edi, obj.inputMutex
call sym.imp.pthread_mutex_unlock
mov rax, qword [rsp + 0x38]
xor rax, qword fs:[0x28]
jne 0x40415d
add rsp, 0x48
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
lea rax, [r8 + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [r8], al
mov r8, qword [rbp + 0x1088]
jmp 0x403998
mov byte [rsi - 1], 0x30
sub rsi, 1
mov byte [rsi - 1], 0x2d
lea r12, [rsi - 1]
jmp 0x402a10
lea rax, [r13 + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [r13], al
mov r13, qword [rbx + 0x1088]
jmp 0x403ad3
mov edi, eax
mov rax, rcx
xor edx, edx
sub rsi, 1
div rdi
lea edi, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov edi, dword [rbp + 0x10a4]
mov rax, rcx
div rdi
test rax, rax
mov rcx, rax
jne 0x403fa7
jmp 0x4037d5
lea rsi, [rbx + 8]
mov eax, r14d
mov rdi, r13
sub eax, r13d
mov qword [rsp + 8], rsi
jmp 0x40400f
cmp r13, r14
mov qword [rbx + 0x1088], r13
jae 0x404039
sub ebp, dword [rsp + 0x10]
mov eax, 0x1000
je 0x403ad3
mov rdi, r13
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
mov dword [rsp + 0x10], eax
add r13, rdx
test eax, eax
je 0x403ff1
movzx esi, byte [rbx + 0x10a0]
call sym.imp.memset
cmp r13, r14
mov qword [rbx + 0x1088], r13
jb 0x403ffd
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
xor r13d, r13d
call qword [rax]
mov rax, qword [rbx + 0x1088]
sub rax, r14
jne 0x404145
add r13, qword [rsp + 8]
mov qword [rbx + 0x1088], r13
jmp 0x403ffd
mov byte [rsi - 1], 0x30
sub rsi, 1
jmp 0x4037d5
lea rsi, [rbp + 8]
mov eax, r13d
mov rdi, r8
sub eax, r8d
mov qword [rsp + 8], rsi
jmp 0x4040a7
cmp r8, r13
mov qword [rbp + 0x1088], r8
jae 0x4040dd
sub r14d, dword [rsp + 0x10]
mov eax, 0x1000
je 0x403998
mov rdi, r8
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
mov dword [rsp + 0x10], eax
add r8, rdx
test eax, eax
je 0x404088
movzx esi, byte [rbp + 0x10a0]
mov qword [rsp + 0x18], r8
call sym.imp.memset
mov r8, qword [rsp + 0x18]
cmp r8, r13
mov qword [rbp + 0x1088], r8
jb 0x404094
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor r8d, r8d
sub rax, r13
jne 0x404129
add r8, qword [rsp + 8]
mov qword [rbp + 0x1088], r8
jmp 0x404094
pxor xmm1, xmm1
jmp 0x403175
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x403934
mov edi, eax
call sym.std::__throw_system_error
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 0x18], rax
call sym.imp.memmove
mov r8, qword [rsp + 0x18]
jmp 0x4040fa
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r14
mov r13, rax
call sym.imp.memmove
jmp 0x404059
call sym.imp.__stack_chk_fail
sub ecx, eax
jmp 0x4036d2
sub r13d, eax
jmp 0x403556
lea rdi, [rsp + 0x30]
mov rbx, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rdi, qword [r13 + 0x22c0]
mov rbp, rax
cmp rbx, rdi
je 0x40419a
call sym.operatordelete
mov rdi, r13
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
nop word [rax + rax]
push r15
push r14
push r13
push r12
xor r13d, r13d
push rbp
push rbx
sub rsp, 0x48
mov rax, qword fs:[0x28]
mov qword [rsp + 0x38], rax
xor eax, eax
nop dword [rax]
mov edi, 0x22e8
call sym.operatornew
lea rbx, [rax + 0x22d0]
mov qword [rax + 0x22c8], 0
mov byte [rax + 0x22d0], 0
mov edi, 0x10e0
mov r12, rax
mov qword [rax + 0x22c0], rbx
call sym.operatornew
lea r14, [rax + 8]
lea rdi, [rax + 0x1088]
mov rbx, rax
mov byte [rax + 0x1098], 0
mov dword [rax + 0x109c], 0
lea rax, [rax + 0x10c8]
mov qword [rax - 0x40], r14
mov qword [rax - 0x38], rdi
mov byte [rax - 0x28], 0x20
mov dword [rax - 0x24], 0xa
mov dword [rax - 0x20], 9
mov qword [rbx + 0x10b8], rax
lea rax, [r12 + 0x22c0]
mov byte [rbx + 0x10c8], 0x20
mov qword [rbx + 0x10c0], 1
mov qword [rbx + 0x10d8], rax
mov eax, dword [r12 + 4]
mov byte [rbx + 0x10c9], 0
mov qword [rbx + 0x10b0], 0x3b9aca00
mov qword [rbx], 0x408208
mov qword [r12 + 0x22e0], rbx
test eax, eax
mov qword [rsp + 0x30], r12
mov ecx, dword [r12]
jle 0x404994
sub eax, 1
pxor xmm1, xmm1
lea rdx, [r12 + 8]
lea rsi, [r12 + rax*4 + 0xc]
nop
mov eax, ecx
sub eax, dword [rdx]
add rdx, 4
pxor xmm0, xmm0
pxor xmm2, xmm2
cvtsi2sd xmm0, eax
cvtsi2sd xmm2, dword [rdx + 0x1158]
cmp rsi, rdx
divsd xmm0, xmm2
maxsd xmm0, xmm1
movapd xmm1, xmm0
jne 0x4042c0
pxor xmm0, xmm0
cvtsi2sd xmm0, ecx
divsd xmm0, xmm1
movmskpd ecx, xmm0
and ecx, 1
je 0x40430a
xorpd xmm0, xmmword [rip + 0x3f76]
ucomisd xmm0, xmm0
jp 0x404710
movapd xmm1, xmm0
andpd xmm1, xmmword [rip + 0x3f70]
ucomisd xmm1, qword [rip + 0x3f78]
jbe 0x40447e
lea rbp, [rbx + 0x1085]
mov byte [rbx + 0x1087], 0x66
mov byte [rbx + 0x1086], 0x6e
mov byte [rbx + 0x1085], 0x49
test ecx, ecx
je 0x404356
mov byte [rbp - 1], 0x2d
sub rbp, 1
cmp byte [rbx + 0x1098], 0
jne 0x40456d
mov rcx, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
lea r15, [rbx + 0x1008]
mov edx, dword [rbx + 0x109c]
mov rax, rsi
mov byte [rbx + 0x1098], 1
sub rax, rbp
cmp eax, edx
jb 0x404731
xor r8d, r8d
test rax, rax
je 0x4043b6
mov rdi, rcx
mov rdx, rax
mov rsi, rbp
mov qword [rsp + 8], rax
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov rcx, rax
add rcx, r8
cmp rcx, r15
mov qword [rbx + 0x1088], rcx
jae 0x404787
mov rbx, qword [r12 + 0x22e0]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea rbp, [rbx + 8]
mov rdi, rbx
sub rsi, rbp
call qword [rax]
mov qword [rbx + 0x1088], rbp
mov rax, qword [rsp + 0x30]
mov edi, r13d
lea rsi, [rax + 0x22c0]
call sym.writeAnswer
mov rbx, qword [rsp + 0x30]
test rbx, rbx
je 0x40443e
mov rdi, qword [rbx + 0x22e0]
test rdi, rdi
je 0x40441e
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x22c0]
lea rax, [rbx + 0x22d0]
cmp rdi, rax
je 0x404436
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
add r13d, 1
cmp r13d, 0x64
jne 0x4041d8
call sym.imp.clock
pxor xmm0, xmm0
lea rsi, [rsp + 0x30]
mov edi, str._n_nTest_time:
cvtsi2sd xmm0, rax
divsd xmm0, qword [rip + 0x3e4c]
movsd qword [rsp + 0x30], xmm0
call sym.writeln_charconst____15__double_
xor edi, edi
call sym.imp.exit
ucomisd xmm0, qword [rip + 0x3e22]
jae 0x404698
cvttsd2si r15, xmm0
mov rdx, qword [rbx + 0x10b0]
test r15, r15
js 0x4046c6
pxor xmm1, xmm1
test rdx, rdx
cvtsi2sd xmm1, r15
subsd xmm0, xmm1
js 0x4046ef
pxor xmm1, xmm1
cvtsi2sd xmm1, rdx
mulsd xmm0, xmm1
addsd xmm0, qword [rip + 0x3de4]
ucomisd xmm0, qword [rip + 0x3dd4]
jae 0x404679
cvttsd2si rsi, xmm0
cmp rdx, rsi
ja 0x4045f1
lea r8, [rbx + 0x107f]
add r15, 1
lea rdi, [rbx + 0x1087]
mov byte [rbx + 0x1087], 0x30
sub rdi, r8
mov rdx, rdi
jne 0x404641
test r15, r15
lea rbp, [r8 - 1]
mov byte [r8 - 1], 0x2e
je 0x40466b
mov eax, dword [rbx + 0x10a4]
movabs rsi, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x4047df
nop dword [rax + rax]
mov rax, r15
sub rbp, 1
mul rsi
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub r15, rax
add r15d, 0x30
test rdx, rdx
mov byte [rbp], r15b
mov r15, rdx
jne 0x404540
jmp 0x40434a
mov rax, qword [rbx + 0x10c0]
mov rcx, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
mov rdi, qword [rbx + 0x10b8]
mov byte [rbx + 0x1098], 0
mov r8d, eax
mov r15d, eax
lea rdx, [rcx + r8 + 0x80]
mov qword [rsp + 0x18], rdi
cmp rsi, rdx
jbe 0x404818
cmp eax, 1
je 0x4047b5
test eax, eax
je 0x4045db
mov rsi, rdi
mov rdx, r8
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memmove
mov rsi, qword [rbx + 0x1090]
mov r8, qword [rsp + 8]
mov rcx, rax
add rcx, r8
lea r15, [rbx + 0x1008]
mov qword [rbx + 0x1088], rcx
jmp 0x404378
test rsi, rsi
lea r8, [rbx + 0x107f]
je 0x4044f3
movabs r9, 0xcccccccccccccccd
nop dword [rax + rax]
mov rax, rsi
sub rdi, 1
mul r9
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rsi, rax
test rdx, rdx
lea eax, [rsi + 0x30]
mov rsi, rdx
mov byte [rdi], al
jne 0x404610
sub rdi, r8
mov rdx, rdi
je 0x40450d
mov rdi, r8
mov esi, 0x30
mov dword [rsp + 8], ecx
call sym.imp.memset
test r15, r15
mov r8, rax
mov ecx, dword [rsp + 8]
lea rbp, [r8 - 1]
mov byte [r8 - 1], 0x2e
jne 0x40451f
lea rbp, [r8 - 2]
mov byte [r8 - 2], 0x30
jmp 0x40434a
subsd xmm0, qword [rip + 0x3c27]
movabs rax, 0x8000000000000000
cvttsd2si rsi, xmm0
xor rsi, rax
jmp 0x4044df
movapd xmm1, xmm0
movabs rax, 0x8000000000000000
mov rdx, qword [rbx + 0x10b0]
subsd xmm1, qword [rip + 0x3bf3]
cvttsd2si r15, xmm1
xor r15, rax
test r15, r15
jns 0x4044a1
mov rax, r15
mov rsi, r15
pxor xmm1, xmm1
shr rax, 1
and esi, 1
or rax, rsi
test rdx, rdx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
subsd xmm0, xmm1
jns 0x4044b7
mov rax, rdx
mov rsi, rdx
pxor xmm1, xmm1
shr rax, 1
and esi, 1
or rax, rsi
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x4044c0
mov byte [rbx + 0x1087], 0x4e
mov byte [rbx + 0x1086], 0x61
lea rbp, [rbx + 0x1085]
mov byte [rbx + 0x1085], 0x4e
jmp 0x40434a
sub edx, eax
lea rax, [rcx + rdx + 0x80]
mov dword [rsp + 8], edx
cmp rsi, rax
jbe 0x404909
cmp edx, 1
je 0x4048e9
movzx esi, byte [rbx + 0x10a0]
lea r8, [rcx + rdx]
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memset
mov r8, qword [rsp + 8]
mov qword [rbx + 0x1088], r8
mov rcx, r8
mov rax, qword [rbx + 0x1090]
sub rax, rbp
jmp 0x404393
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ebp, ebp
sub rax, r15
jne 0x40487c
add rbp, r14
mov qword [rbx + 0x1088], rbp
jmp 0x4043c9
lea rax, [rcx + 1]
lea r15, [rbx + 0x1008]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rdi]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
jmp 0x404378
mov esi, eax
mov rax, r15
xor edx, edx
sub rbp, 1
div rsi
lea esi, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, esi
xor edx, edx
mov byte [rbp], al
mov esi, dword [rbx + 0x10a4]
mov rax, r15
div rsi
test rax, rax
mov r15, rax
jne 0x4047e1
jmp 0x40434a
lea rax, [rbx + 0x1008]
mov qword [rsp + 0x10], rax
sub eax, ecx
jmp 0x404851
add rcx, qword [rsp + 8]
cmp qword [rsp + 0x10], rcx
mov qword [rbx + 0x1088], rcx
jbe 0x4048a3
sub r15d, dword [rsp + 0x24]
je 0x404892
mov rdi, qword [rsp + 8]
add qword [rsp + 0x18], rdi
mov eax, 0x1000
cmp r15d, eax
cmovbe eax, r15d
mov edi, eax
test eax, eax
mov dword [rsp + 0x24], eax
mov qword [rsp + 8], rdi
je 0x404828
mov rsi, qword [rsp + 0x18]
mov rdx, rdi
mov rdi, rcx
call sym.imp.memmove
mov rcx, rax
jmp 0x404828
mov rdx, rax
mov rsi, r15
mov rdi, r14
mov rbp, rax
call sym.imp.memmove
jmp 0x4047a6
mov rsi, qword [rbx + 0x1090]
mov r15, qword [rsp + 0x10]
jmp 0x404378
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
xor ecx, ecx
mov rax, qword [rbx + 0x1088]
sub rax, qword [rsp + 0x10]
je 0x4048da
mov rsi, qword [rsp + 0x10]
mov rdx, rax
mov rdi, r14
mov qword [rsp + 0x28], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
add rcx, r14
mov qword [rbx + 0x1088], rcx
jmp 0x40483b
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x404778
mov eax, r15d
mov rdi, rcx
sub eax, ecx
jmp 0x404935
cmp rcx, r15
mov qword [rbx + 0x1088], rcx
jae 0x40496d
mov esi, dword [rsp + 0x10]
sub dword [rsp + 8], esi
mov eax, 0x1000
je 0x404778
mov rdi, rcx
mov esi, dword [rsp + 8]
cmp esi, eax
cmovbe eax, esi
mov edx, eax
mov dword [rsp + 0x10], eax
add rcx, rdx
test eax, eax
je 0x404913
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
cmp rcx, r15
mov qword [rbx + 0x1088], rcx
jb 0x40491f
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, r15
jne 0x4049d7
add rcx, r14
mov qword [rbx + 0x1088], rcx
jmp 0x40491f
pxor xmm1, xmm1
jmp 0x4042ed
mov rdi, qword [r12 + 0x22c0]
mov rbp, rax
cmp rbx, rdi
je 0x4049b2
call sym.operatordelete
mov rdi, r12
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
lea rdi, [rsp + 0x30]
mov rbx, rax
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rdx, rax
mov rsi, r15
mov rdi, r14
mov qword [rsp + 0x18], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x18]
jmp 0x404988
nop dword [rax + rax]
nop word cs:[rax + rax]
push r15
push r14
mov r14d, 1
push r13
push r12
push rbp
push rbx
sub rsp, 0x78
mov rax, qword fs:[0x28]
mov qword [rsp + 0x68], rax
xor eax, eax
lea rax, [rsp + 0x50]
mov qword [rsp], rax
nop dword [rax]
mov edi, 0x22e8
call sym.operatornew
lea rbx, [rax + 0x22d0]
mov qword [rax + 0x22c8], 0
mov byte [rax + 0x22d0], 0
mov edi, 0x10e0
mov r12, rax
mov qword [rax + 0x22c0], rbx
call sym.operatornew
lea r15, [rax + 8]
lea rdi, [rax + 0x1088]
mov rbx, rax
mov byte [rax + 0x1098], 0
mov dword [rax + 0x109c], 0
lea rax, [rax + 0x10c8]
mov qword [rax - 0x40], r15
mov qword [rax - 0x38], rdi
mov byte [rax - 0x28], 0x20
mov dword [rax - 0x24], 0xa
mov dword [rax - 0x20], 9
mov qword [rbx + 0x10b8], rax
lea rax, [r12 + 0x22c0]
mov byte [rbx + 0x10c8], 0x20
mov qword [rbx + 0x10c0], 1
mov qword [rbx + 0x10d8], rax
mov eax, dword [r12 + 4]
mov byte [rbx + 0x10c9], 0
mov qword [rbx + 0x10b0], 0x3b9aca00
mov qword [rbx], 0x408208
mov qword [r12 + 0x22e0], rbx
test eax, eax
mov qword [rsp + 0x30], r12
mov ecx, dword [r12]
jle 0x406095
sub eax, 1
pxor xmm1, xmm1
lea rdx, [r12 + 8]
lea rsi, [r12 + rax*4 + 0xc]
nop word [rax + rax]
mov eax, ecx
sub eax, dword [rdx]
add rdx, 4
pxor xmm0, xmm0
pxor xmm2, xmm2
cvtsi2sd xmm0, eax
cvtsi2sd xmm2, dword [rdx + 0x1158]
cmp rdx, rsi
divsd xmm0, xmm2
maxsd xmm0, xmm1
movapd xmm1, xmm0
jne 0x404b20
pxor xmm0, xmm0
cvtsi2sd xmm0, ecx
divsd xmm0, xmm1
movmskpd ecx, xmm0
and ecx, 1
je 0x404b6a
xorpd xmm0, xmmword [rip + 0x3716]
ucomisd xmm0, xmm0
jp 0x405446
movapd xmm1, xmm0
andpd xmm1, xmmword [rip + 0x3710]
ucomisd xmm1, qword [rip + 0x3718]
jbe 0x405162
lea rbp, [rbx + 0x1085]
mov byte [rbx + 0x1087], 0x66
mov byte [rbx + 0x1086], 0x6e
mov byte [rbx + 0x1085], 0x49
test ecx, ecx
je 0x404bb6
mov byte [rbp - 1], 0x2d
sub rbp, 1
cmp byte [rbx + 0x1098], 0
jne 0x405280
mov rcx, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
lea r13, [rbx + 0x1008]
mov edx, dword [rbx + 0x109c]
mov rax, rsi
mov byte [rbx + 0x1098], 1
sub rax, rbp
cmp eax, edx
jb 0x405467
xor r8d, r8d
test rax, rax
je 0x404c16
mov rdi, rcx
mov rdx, rax
mov rsi, rbp
mov qword [rsp + 8], rax
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov rcx, rax
add rcx, r8
cmp rcx, r13
mov qword [rbx + 0x1088], rcx
jae 0x405418
mov rbx, qword [r12 + 0x22e0]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea rbp, [rbx + 8]
mov rdi, rbx
sub rsi, rbp
call qword [rax]
mov rax, qword [rsp]
mov qword [rbx + 0x1088], rbp
lea rdi, [rsp + 0x40]
mov qword [rsp + 0x48], 0
mov byte [rsp + 0x50], 0
mov qword [rsp + 0x40], rax
mov rax, qword [rsp + 0x30]
lea rsi, [rax + 0x22c0]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rax, qword [rsp + 0x30]
mov rbx, qword [rax + 0x22e0]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea rbp, [rbx + 8]
mov rdi, rbx
sub rsi, rbp
call qword [rax]
mov qword [rbx + 0x1088], rbp
mov rax, qword [rsp + 0x30]
mov rdx, qword [rax + 0x22c8]
cmp rdx, qword [rsp + 0x48]
je 0x40524d
mov rbx, qword [rip + 0x2045c6]
mov r12d, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
cmp r12d, 0xf
ja 0x405639
mov rcx, qword [rbx + 0x1088]
lea rbp, [rbx + 0x1008]
lea rax, [rcx + 0x8f]
cmp qword [rbx + 0x1090], rax
jbe 0x4056a2
movabs rax, 0x6e6f20726f727245
mov esi, 0x2074
mov dword [rcx + 8], 0x73657420
mov qword [rcx], rax
mov word [rcx + 0xc], si
add rcx, 0xf
mov byte [rcx - 1], 0x23
mov qword [rbx + 0x1088], rcx
mov ecx, dword [rbx + 0x10a4]
mov r12, qword [rbx + 0x1090]
cmp ecx, 0xa
jne 0x405c5c
mov ecx, r14d
mov esi, 0xcccccccd
nop word cs:[rax + rax]
mov eax, ecx
sub r12, 1
mul esi
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
test edx, edx
mov byte [r12], cl
mov ecx, edx
jne 0x404d50
cmp byte [rbx + 0x1098], 0
jne 0x4057b5
mov r15, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
mov r13d, dword [rbx + 0x109c]
mov rax, rsi
mov byte [rbx + 0x1098], 1
sub rax, r12
cmp eax, r13d
jb 0x405a8c
xor r13d, r13d
test rax, rax
je 0x404dc0
mov rdx, rax
mov rsi, r12
mov rdi, r15
mov r13, rax
call sym.imp.memmove
lea rcx, [r15 + r13]
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jae 0x405a50
lea rax, [rcx + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rax
mov byte [rcx], 0xa
cmp qword [rbx + 0x1088], rbp
jae 0x405d61
mov rbx, qword [rip + 0x20448b]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x40595c
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
mov rbx, qword [rip + 0x20443b]
mov rax, qword [rsp + 0x30]
mov r12d, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
mov qword [rsp + 8], rax
cmp r12d, 0xa
ja 0x40582b
mov rcx, qword [rbx + 0x1088]
lea rbp, [rbx + 0x1008]
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
jbe 0x405894
movabs rax, 0x6465746365707845
mov edx, 0xa3a
add rcx, 0xa
mov qword [rcx - 0xa], rax
mov word [rcx - 2], dx
mov qword [rbx + 0x1088], rcx
mov rax, qword [rsp + 8]
mov r12, qword [rax + 0x22c8]
mov r15, qword [rax + 0x22c0]
mov eax, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
mov r13d, r12d
cmp r12d, eax
jb 0x405760
mov r8d, r12d
lea rax, [rcx + r8 + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x405ad9
cmp r12d, 1
je 0x40598d
test r12d, r12d
je 0x404f21
mov rdx, r8
mov rdi, rcx
mov rsi, r15
mov qword [rsp + 8], r8
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov rcx, rax
add rcx, r8
lea rax, [rcx + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rax
mov byte [rcx], 0xa
cmp qword [rbx + 0x1088], rbp
jae 0x4059d4
mov rbx, qword [rip + 0x20433b]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x405952
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
mov rbx, qword [rip + 0x2042eb]
mov r12d, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
cmp r12d, 0xa
ja 0x405512
mov rcx, qword [rbx + 0x1088]
lea rbp, [rbx + 0x1008]
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
jbe 0x40557b
movabs rax, 0x6465766965636552
add rcx, 0xa
mov qword [rcx - 0xa], rax
mov eax, 0xa3a
mov word [rcx - 2], ax
mov qword [rbx + 0x1088], rcx
mov r12, qword [rsp + 0x48]
mov eax, dword [rbx + 0x109c]
mov r15, qword [rsp + 0x40]
mov byte [rbx + 0x1098], 0
cmp r12d, eax
mov r13d, r12d
jb 0x4054bd
mov r8d, r12d
lea rax, [rcx + r8 + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x405bbc
cmp r12d, 1
je 0x405970
test r12d, r12d
je 0x40505e
mov rdx, r8
mov rdi, rcx
mov rsi, r15
mov qword [rsp + 8], r8
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov rcx, rax
add rcx, r8
lea rax, [rcx + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rax
mov byte [rcx], 0xa
cmp qword [rbx + 0x1088], rbp
jae 0x405b79
mov rbx, qword [rip + 0x2041fe]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x405966
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
mov rbx, qword [rsp + 0x40]
cmp rbx, qword [rsp]
je 0x4050e6
mov rdi, rbx
call sym.operatordelete
mov rbx, qword [rsp + 0x30]
test rbx, rbx
je 0x405122
mov rdi, qword [rbx + 0x22e0]
test rdi, rdi
je 0x405102
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x22c0]
lea rax, [rbx + 0x22d0]
cmp rdi, rax
je 0x40511a
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
add r14d, 1
cmp r14d, 0x65
jne 0x404a30
call sym.imp.clock
pxor xmm0, xmm0
lea rsi, [rsp + 0x30]
mov edi, str._n_nTest_time:
cvtsi2sd xmm0, rax
divsd xmm0, qword [rip + 0x3168]
movsd qword [rsp + 0x30], xmm0
call sym.writeln_charconst____15__double_
xor edi, edi
call sym.imp.exit
movsd xmm2, qword [rip + 0x313e]
ucomisd xmm0, xmm2
jae 0x4053a4
cvttsd2si r13, xmm0
mov rdx, qword [rbx + 0x10b0]
test r13, r13
js 0x4053ce
pxor xmm1, xmm1
test rdx, rdx
cvtsi2sd xmm1, r13
subsd xmm0, xmm1
js 0x4053f7
pxor xmm1, xmm1
cvtsi2sd xmm1, rdx
mulsd xmm0, xmm1
addsd xmm0, qword [rip + 0x30fc]
ucomisd xmm0, xmm2
jae 0x405389
cvttsd2si rsi, xmm0
cmp rdx, rsi
ja 0x405304
lea r8, [rbx + 0x107f]
add r13, 1
lea rdi, [rbx + 0x1087]
mov byte [rbx + 0x1087], 0x30
sub rdi, r8
mov rdx, rdi
jne 0x405351
test r13, r13
lea rbp, [r8 - 1]
mov byte [r8 - 1], 0x2e
je 0x40537b
mov eax, dword [rbx + 0x10a4]
movabs rsi, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x405a17
nop dword [rax]
mov rax, r13
sub rbp, 1
mul rsi
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub r13, rax
add r13d, 0x30
test rdx, rdx
mov byte [rbp], r13b
mov r13, rdx
jne 0x405220
jmp 0x404baa
test rdx, rdx
mov rbx, qword [rsp + 0x40]
je 0x4050d8
mov rdi, qword [rax + 0x22c0]
mov rsi, rbx
call sym.imp.memcmp
test eax, eax
jne 0x404cbb
jmp 0x4050d8
nop word [rax + rax]
mov rax, qword [rbx + 0x10c0]
mov rcx, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
mov rdi, qword [rbx + 0x10b8]
mov byte [rbx + 0x1098], 0
mov r8d, eax
mov r13d, eax
lea rdx, [rcx + r8 + 0x80]
mov qword [rsp + 0x18], rdi
cmp rsi, rdx
jbe 0x405c90
cmp eax, 1
je 0x4059aa
test eax, eax
je 0x4052ee
mov rsi, rdi
mov rdx, r8
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memmove
mov rsi, qword [rbx + 0x1090]
mov r8, qword [rsp + 8]
mov rcx, rax
add rcx, r8
lea r13, [rbx + 0x1008]
mov qword [rbx + 0x1088], rcx
jmp 0x404bd8
test rsi, rsi
lea r8, [rbx + 0x107f]
je 0x4051d7
movabs r9, 0xcccccccccccccccd
nop
mov rax, rsi
sub rdi, 1
mul r9
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rsi, rax
test rdx, rdx
lea eax, [rsi + 0x30]
mov rsi, rdx
mov byte [rdi], al
jne 0x405320
sub rdi, r8
mov rdx, rdi
je 0x4051f1
mov rdi, r8
mov esi, 0x30
mov dword [rsp + 8], ecx
call sym.imp.memset
test r13, r13
mov r8, rax
mov ecx, dword [rsp + 8]
lea rbp, [r8 - 1]
mov byte [r8 - 1], 0x2e
jne 0x405203
lea rbp, [r8 - 2]
mov byte [r8 - 2], 0x30
jmp 0x404baa
subsd xmm0, xmm2
movabs rax, 0x8000000000000000
cvttsd2si rsi, xmm0
xor rsi, rax
jmp 0x4051c3
movapd xmm1, xmm0
movabs rax, 0x8000000000000000
mov rdx, qword [rbx + 0x10b0]
subsd xmm1, xmm2
cvttsd2si r13, xmm1
xor r13, rax
test r13, r13
jns 0x405189
mov rax, r13
mov rsi, r13
pxor xmm1, xmm1
shr rax, 1
and esi, 1
or rax, rsi
test rdx, rdx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
subsd xmm0, xmm1
jns 0x40519f
mov rax, rdx
mov rsi, rdx
pxor xmm1, xmm1
shr rax, 1
and esi, 1
or rax, rsi
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x4051a8
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ebp, ebp
sub rax, r13
jne 0x405d4b
add rbp, r15
mov qword [rbx + 0x1088], rbp
jmp 0x404c29
mov byte [rbx + 0x1087], 0x4e
mov byte [rbx + 0x1086], 0x61
lea rbp, [rbx + 0x1085]
mov byte [rbx + 0x1085], 0x4e
jmp 0x404baa
sub edx, eax
lea rax, [rcx + rdx + 0x80]
mov dword [rsp + 8], edx
cmp rsi, rax
jbe 0x406142
cmp edx, 1
je 0x405da4
movzx esi, byte [rbx + 0x10a0]
lea r8, [rcx + rdx]
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memset
mov r8, qword [rsp + 8]
mov qword [rbx + 0x1088], r8
mov rcx, r8
mov rax, qword [rbx + 0x1090]
sub rax, rbp
jmp 0x404bf3
sub eax, r12d
mov edx, eax
mov edi, eax
mov dword [rsp + 8], eax
lea rax, [rcx + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x406008
cmp edi, 1
je 0x405dea
movzx esi, byte [rbx + 0x10a0]
lea r8, [rcx + rdx]
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memset
mov r8, qword [rsp + 8]
mov qword [rbx + 0x1088], r8
mov rcx, r8
jmp 0x40501c
mov rdi, qword [rbx + 0x1088]
lea edx, [r12 - 0xa]
mov r12, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x405e75
cmp edx, 1
je 0x405e5c
movzx esi, byte [rbx + 0x10a0]
lea rcx, [rdi + rdx]
lea rbp, [rbx + 0x1008]
mov qword [rsp + 8], rcx
call sym.imp.memset
mov rcx, qword [rsp + 8]
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rcx
ja 0x404fd7
lea rax, [rbx + 8]
mov r12d, ebp
mov r13d, 0xa
sub r12d, ecx
mov qword [rsp + 8], str.Received:_n
mov qword [rsp + 0x10], rax
jmp 0x4055c6
test r12d, r12d
mov r15d, r12d
jne 0x4055d1
add rcx, r15
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jae 0x4055f3
sub r13d, r12d
je 0x404ff9
add qword [rsp + 8], r15
mov r12d, 0x1000
cmp r13d, r12d
jae 0x40559b
mov r15d, r13d
mov r12d, r13d
mov rsi, qword [rsp + 8]
mov rdi, rcx
mov rdx, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r15
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jb 0x4055b2
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
je 0x405628
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbp
mov qword [rsp + 0x18], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x18]
add rcx, qword [rsp + 0x10]
mov qword [rbx + 0x1088], rcx
jmp 0x4055b2
mov rdi, qword [rbx + 0x1088]
lea edx, [r12 - 0xf]
mov r12, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x405ef8
cmp edx, 1
je 0x405e23
movzx esi, byte [rbx + 0x10a0]
lea rcx, [rdi + rdx]
lea rbp, [rbx + 0x1008]
mov qword [rsp + 8], rcx
call sym.imp.memset
mov rcx, qword [rsp + 8]
lea rax, [rcx + 0x8f]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rcx
ja 0x404cfc
lea rax, [rbx + 8]
mov r12d, ebp
mov r13d, 0xf
sub r12d, ecx
mov qword [rsp + 8], str.Error_on_test__
mov qword [rsp + 0x10], rax
jmp 0x4056ed
test r12d, r12d
mov r15d, r12d
jne 0x4056f8
add rcx, r15
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jae 0x40571a
sub r13d, r12d
je 0x404d28
add qword [rsp + 8], r15
mov r12d, 0x1000
cmp r13d, r12d
jae 0x4056c2
mov r15d, r13d
mov r12d, r13d
mov rsi, qword [rsp + 8]
mov rdi, rcx
mov rdx, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r15
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jb 0x4056d9
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
je 0x40574f
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbp
mov qword [rsp + 0x18], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x18]
add rcx, qword [rsp + 0x10]
mov qword [rbx + 0x1088], rcx
jmp 0x4056d9
sub eax, r12d
mov edx, eax
mov edi, eax
mov dword [rsp + 8], eax
lea rax, [rcx + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x405f7b
cmp edi, 1
je 0x405e3c
movzx esi, byte [rbx + 0x10a0]
lea r8, [rcx + rdx]
mov rdi, rcx
mov qword [rsp + 8], r8
call sym.imp.memset
mov r8, qword [rsp + 8]
mov qword [rbx + 0x1088], r8
mov rcx, r8
jmp 0x404edf
mov rax, qword [rbx + 0x10c0]
mov r15, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
mov r13, qword [rbx + 0x10b8]
mov byte [rbx + 0x1098], 0
mov r8d, eax
mov dword [rsp + 0x10], eax
lea rdx, [r15 + r8 + 0x80]
cmp rsi, rdx
jbe 0x4061d1
cmp eax, 1
je 0x405dc4
test eax, eax
je 0x40581c
mov rdx, r8
mov rsi, r13
mov rdi, r15
mov qword [rsp + 8], r8
call sym.imp.memmove
mov rsi, qword [rbx + 0x1090]
mov r8, qword [rsp + 8]
add r15, r8
mov qword [rbx + 0x1088], r15
jmp 0x404d8a
mov rdi, qword [rbx + 0x1088]
lea edx, [r12 - 0xa]
mov r12, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x4060bf
cmp edx, 1
je 0x405e0a
movzx esi, byte [rbx + 0x10a0]
lea rcx, [rdi + rdx]
lea rbp, [rbx + 0x1008]
mov qword [rsp + 0x10], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x10]
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rcx
ja 0x404e91
lea rax, [rbx + 8]
mov r12d, ebp
mov r13d, 0xa
sub r12d, ecx
mov qword [rsp + 0x10], str.Expected:_n
mov qword [rsp + 0x18], rax
jmp 0x4058df
test r12d, r12d
mov r15d, r12d
jne 0x4058ea
add rcx, r15
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jae 0x40590c
sub r13d, r12d
je 0x404eb3
add qword [rsp + 0x10], r15
mov r12d, 0x1000
cmp r13d, r12d
jae 0x4058b4
mov r15d, r13d
mov r12d, r13d
mov rsi, qword [rsp + 0x10]
mov rdi, rcx
mov rdx, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r15
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jb 0x4058cb
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
je 0x405941
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, rbp
mov qword [rsp + 0x20], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x20]
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x4058cb
mov rdi, rbx
call rax
jmp 0x404f8f
mov rdi, rbx
call rax
jmp 0x404e3f
mov rdi, rbx
call rax
jmp 0x4050cc
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [r15]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x405061
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [r15]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x404f24
lea rax, [rcx + 1]
lea r13, [rbx + 0x1008]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rdi]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
jmp 0x404bd8
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor r12d, r12d
lea rcx, [rbx + 8]
sub rax, rbp
je 0x405a08
mov rdi, rcx
mov rdx, rax
mov rsi, rbp
mov r12, rax
call sym.imp.memmove
mov rcx, rax
add r12, rcx
mov qword [rbx + 0x1088], r12
jmp 0x404f46
mov esi, eax
mov rax, r13
xor edx, edx
sub rbp, 1
div rsi
lea esi, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, esi
xor edx, edx
mov byte [rbp], al
mov esi, dword [rbx + 0x10a4]
mov rax, r13
div rsi
test rax, rax
mov r13, rax
jne 0x405a19
jmp 0x404baa
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor r12d, r12d
lea rcx, [rbx + 8]
sub rax, rbp
je 0x405a84
mov rdi, rcx
mov rdx, rax
mov rsi, rbp
mov r12, rax
call sym.imp.memmove
mov rcx, rax
add rcx, r12
jmp 0x404dd4
sub r13d, eax
mov edx, r13d
lea rax, [r15 + rdx + 0x80]
cmp rsi, rax
jbe 0x40625e
cmp r13d, 1
je 0x40609e
movzx esi, byte [rbx + 0x10a0]
lea r13, [r15 + rdx]
mov rdi, r15
mov r15, r13
call sym.imp.memset
mov qword [rbx + 0x1088], r13
mov rax, qword [rbx + 0x1090]
sub rax, r12
jmp 0x404da7
lea rax, [rbx + 8]
mov r12d, ebp
sub r12d, ecx
mov qword [rsp + 0x10], rax
jmp 0x405b0f
add rcx, qword [rsp + 8]
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jae 0x405b36
sub r13d, r12d
je 0x404f24
add r15, qword [rsp + 8]
mov r12d, 0x1000
cmp r13d, r12d
cmovbe r12d, r13d
mov eax, r12d
test r12d, r12d
mov qword [rsp + 8], rax
je 0x405aea
mov rdi, rcx
mov edx, r12d
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
jmp 0x405aea
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
je 0x405b6b
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbp
mov qword [rsp + 0x18], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x18]
add rcx, qword [rsp + 0x10]
mov qword [rbx + 0x1088], rcx
jmp 0x405afb
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor r12d, r12d
lea rcx, [rbx + 8]
sub rax, rbp
je 0x405bad
mov rdi, rcx
mov rdx, rax
mov rsi, rbp
mov r12, rax
call sym.imp.memmove
mov rcx, rax
add r12, rcx
mov qword [rbx + 0x1088], r12
jmp 0x405083
lea rax, [rbx + 8]
mov r12d, ebp
sub r12d, ecx
mov qword [rsp + 0x10], rax
jmp 0x405bf2
add rcx, qword [rsp + 8]
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jae 0x405c19
sub r13d, r12d
je 0x405061
add r15, qword [rsp + 8]
mov r12d, 0x1000
cmp r13d, r12d
cmovbe r12d, r13d
mov eax, r12d
test r12d, r12d
mov qword [rsp + 8], rax
je 0x405bcd
mov rdi, rcx
mov edx, r12d
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
jmp 0x405bcd
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
je 0x405c4e
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbp
mov qword [rsp + 0x18], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x18]
add rcx, qword [rsp + 0x10]
mov qword [rbx + 0x1088], rcx
jmp 0x405bde
mov esi, r14d
mov eax, esi
xor edx, edx
sub r12, 1
div ecx
lea ecx, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp edx, 9
cmova eax, ecx
xor edx, edx
mov byte [r12], al
mov ecx, dword [rbx + 0x10a4]
mov eax, esi
div ecx
test eax, eax
mov esi, eax
jne 0x405c5f
jmp 0x404d6f
lea rax, [rbx + 0x1008]
mov qword [rsp + 0x10], rax
sub eax, ecx
jmp 0x405cc9
add rcx, qword [rsp + 8]
cmp qword [rsp + 0x10], rcx
mov qword [rbx + 0x1088], rcx
jbe 0x405d05
sub r13d, dword [rsp + 0x20]
je 0x405cf4
mov rdi, qword [rsp + 8]
add qword [rsp + 0x18], rdi
mov eax, 0x1000
cmp r13d, eax
cmovbe eax, r13d
mov edi, eax
test eax, eax
mov dword [rsp + 0x20], eax
mov qword [rsp + 8], rdi
je 0x405ca0
mov rsi, qword [rsp + 0x18]
mov rdx, rdi
mov rdi, rcx
call sym.imp.memmove
mov rcx, rax
jmp 0x405ca0
mov rsi, qword [rbx + 0x1090]
mov r13, qword [rsp + 0x10]
jmp 0x404bd8
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
xor ecx, ecx
mov rax, qword [rbx + 0x1088]
sub rax, qword [rsp + 0x10]
je 0x405d3c
mov rsi, qword [rsp + 0x10]
mov rdx, rax
mov rdi, r15
mov qword [rsp + 0x28], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
add rcx, r15
mov qword [rbx + 0x1088], rcx
jmp 0x405cb3
mov rdx, rax
mov rsi, r13
mov rdi, r15
mov rbp, rax
call sym.imp.memmove
jmp 0x405437
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor r12d, r12d
lea rcx, [rbx + 8]
sub rax, rbp
je 0x405d95
mov rdi, rcx
mov rdx, rax
mov rsi, rbp
mov r12, rax
call sym.imp.memmove
mov rcx, rax
add r12, rcx
mov qword [rbx + 0x1088], r12
jmp 0x404df6
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x4054ae
lea rax, [r15 + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [r13]
mov byte [r15], al
mov r15, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
jmp 0x404d8a
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x40501c
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x404e6f
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x404cda
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x404edf
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x404fb5
lea rbp, [rbx + 0x1008]
lea r15, [rbx + 8]
mov eax, ebp
sub eax, edi
jmp 0x405e97
sub r12d, r13d
mov eax, 0x1000
je 0x404fc3
mov rdi, rcx
cmp r12d, eax
cmovbe eax, r12d
mov edx, eax
test edx, edx
mov r13, rdx
lea rcx, [rdi + rdx]
je 0x405ec1
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 8], rcx
call sym.imp.memset
mov rcx, qword [rsp + 8]
cmp rbp, rcx
mov qword [rbx + 0x1088], rcx
ja 0x405e86
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
jne 0x406359
add rcx, r15
mov qword [rbx + 0x1088], rcx
jmp 0x405e86
lea rbp, [rbx + 0x1008]
lea r15, [rbx + 8]
mov eax, ebp
sub eax, edi
jmp 0x405f1a
sub r12d, r13d
mov eax, 0x1000
je 0x404ce8
mov rdi, rcx
cmp r12d, eax
cmovbe eax, r12d
mov edx, eax
test edx, edx
mov r13, rdx
lea rcx, [rdi + rdx]
je 0x405f44
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 8], rcx
call sym.imp.memset
mov rcx, qword [rsp + 8]
cmp rbp, rcx
mov qword [rbx + 0x1088], rcx
ja 0x405f09
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
jne 0x406376
add rcx, r15
mov qword [rbx + 0x1088], rcx
jmp 0x405f09
lea rsi, [rbx + 8]
mov eax, ebp
mov rdi, rcx
sub eax, ecx
mov qword [rsp + 0x10], rsi
jmp 0x405fa3
mov esi, dword [rsp + 0x18]
sub dword [rsp + 8], esi
mov eax, 0x1000
je 0x404edf
mov rdi, rcx
mov esi, dword [rsp + 8]
cmp esi, eax
cmovbe eax, esi
mov edx, eax
mov dword [rsp + 0x18], eax
add rcx, rdx
test eax, eax
je 0x405fcf
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x20], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x20]
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jb 0x405f8d
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
jne 0x4062f4
add rcx, qword [rsp + 0x10]
mov qword [rbx + 0x1088], rcx
jmp 0x405f8d
lea rsi, [rbx + 8]
mov eax, ebp
mov rdi, rcx
sub eax, ecx
mov qword [rsp + 0x10], rsi
jmp 0x406030
mov esi, dword [rsp + 0x18]
sub dword [rsp + 8], esi
mov eax, 0x1000
je 0x40501c
mov rdi, rcx
mov esi, dword [rsp + 8]
cmp esi, eax
cmovbe eax, esi
mov edx, eax
mov dword [rsp + 0x18], eax
add rcx, rdx
test eax, eax
je 0x40605c
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x20], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x20]
cmp rcx, rbp
mov qword [rbx + 0x1088], rcx
jb 0x40601a
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
jne 0x4063b8
add rcx, qword [rsp + 0x10]
mov qword [rbx + 0x1088], rcx
jmp 0x40601a
pxor xmm1, xmm1
jmp 0x404b4d
lea rax, [r15 + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [r15], al
mov r15, qword [rbx + 0x1088]
jmp 0x405aca
lea rbp, [rbx + 0x1008]
lea r15, [rbx + 8]
mov eax, ebp
sub eax, edi
jmp 0x4060e1
sub r12d, r13d
mov eax, 0x1000
je 0x404e7d
mov rdi, rcx
cmp r12d, eax
cmovbe eax, r12d
mov edx, eax
test edx, edx
mov r13, rdx
lea rcx, [rdi + rdx]
je 0x40610b
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x10], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x10]
cmp rbp, rcx
mov qword [rbx + 0x1088], rcx
ja 0x4060d0
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, rbp
jne 0x4063d7
add rcx, r15
mov qword [rbx + 0x1088], rcx
jmp 0x4060d0
mov eax, r13d
mov rdi, rcx
sub eax, ecx
jmp 0x40616e
cmp rcx, r13
mov qword [rbx + 0x1088], rcx
jae 0x4061a6
mov esi, dword [rsp + 0x10]
sub dword [rsp + 8], esi
mov eax, 0x1000
je 0x4054ae
mov rdi, rcx
mov esi, dword [rsp + 8]
cmp esi, eax
cmovbe eax, esi
mov edx, eax
mov dword [rsp + 0x10], eax
add rcx, rdx
test eax, eax
je 0x40614c
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
cmp rcx, r13
mov qword [rbx + 0x1088], rcx
jb 0x406158
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, r13
jne 0x4063f4
add rcx, r15
mov qword [rbx + 0x1088], rcx
jmp 0x406158
lea rdi, [rbx + 8]
mov eax, ebp
sub eax, r15d
mov qword [rsp + 0x18], rdi
jmp 0x4061f9
mov edi, dword [rsp + 0x20]
sub dword [rsp + 0x10], edi
je 0x404d83
add r13, qword [rsp + 8]
mov eax, 0x1000
mov edi, dword [rsp + 0x10]
cmp edi, eax
cmovbe eax, edi
mov edi, eax
test eax, eax
mov dword [rsp + 0x20], eax
mov qword [rsp + 8], rdi
je 0x40621f
mov rdx, rdi
mov rsi, r13
mov rdi, r15
call sym.imp.memmove
add r15, qword [rsp + 8]
cmp r15, rbp
mov qword [rbx + 0x1088], r15
jb 0x4061e1
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor r15d, r15d
sub rax, rbp
jne 0x406313
add r15, qword [rsp + 0x18]
mov qword [rbx + 0x1088], r15
jmp 0x4061e1
lea rsi, [rbx + 8]
mov eax, ebp
mov rdi, r15
sub eax, r15d
mov qword [rsp + 8], rsi
jmp 0x40628b
nop dword [rax]
sub r13d, dword [rsp + 0x10]
mov eax, 0x1000
je 0x405aca
mov rdi, r15
cmp r13d, eax
cmovbe eax, r13d
mov edx, eax
mov dword [rsp + 0x10], eax
add r15, rdx
test eax, eax
je 0x4062ab
movzx esi, byte [rbx + 0x10a0]
call sym.imp.memset
cmp r15, rbp
mov qword [rbx + 0x1088], r15
jb 0x406278
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor r15d, r15d
sub rax, rbp
je 0x4062e6
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, rbp
mov r15, rax
call sym.imp.memmove
add r15, qword [rsp + 8]
mov qword [rbx + 0x1088], r15
jmp 0x406278
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbp
mov qword [rsp + 0x20], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x20]
jmp 0x405ffa
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, rbp
mov r15, rax
call sym.imp.memmove
jmp 0x406250
mov rbx, rax
lea rdi, [rsp + 0x30]
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rdi, qword [rsp + 0x40]
mov rbx, rax
lea rax, [rsp + 0x50]
cmp rdi, rax
je 0x40632e
call sym.operatordelete
jmp 0x40632e
mov rdx, rax
mov rsi, rbp
mov rdi, r15
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x405eec
mov rdx, rax
mov rsi, rbp
mov rdi, r15
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x405f6f
mov rdi, qword [r12 + 0x22c0]
mov rbp, rax
cmp rbx, rdi
je 0x4063a8
call sym.operatordelete
mov rdi, r12
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbp
mov qword [rsp + 0x20], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x20]
jmp 0x406087
mov rdx, rax
mov rsi, rbp
mov rdi, r15
mov qword [rsp + 0x10], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x10]
jmp 0x406136
mov rdx, rax
mov rsi, r13
mov rdi, r15
mov qword [rsp + 0x18], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x18]
jmp 0x4061c5
nop word cs:[rax + rax]
nop dword [rax + rax]
ret
nop word cs:[rax + rax]
nop dword [rax]
mov rax, rdi
lea rdi, [rdi + 0x10]
mov rax, qword [rax + 0x10]
jmp qword [rax]
nop dword [rax]
jmp qword [rdi + 0x18]
nop word cs:[rax + rax]
nop dword [rax]
push r12
push rbp
push rbx
mov rbp, qword [rdi + 8]
mov rbx, qword [rdi]
cmp rbp, rbx
je 0x406486
mov r12, rdi
nop dword [rax + rax]
mov rdi, qword [rbx]
lea rax, [rbx + 0x10]
cmp rdi, rax
je 0x406479
call sym.operatordelete
add rbx, 0x20
cmp rbp, rbx
jne 0x406468
mov rbp, qword [r12]
test rbp, rbp
je 0x4064a0
pop rbx
mov rdi, rbp
pop rbp
pop r12
jmp sym.operatordelete
nop word [rax + rax]
pop rbx
pop rbp
pop r12
ret
nop word cs:[rax + rax]
nop
jmp sym.operatordelete
nop word cs:[rax + rax]
nop
jmp sym.operatordelete
nop word cs:[rax + rax]
nop
push rbx
mov rcx, qword [rdi + 0x10d8]
mov rbx, rdi
lea rdi, [rdi + 8]
mov edx, esi
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
pop rbx
jmp sym.imp.fflush
nop dword [rax + rax]
push rbp
push rbx
lea rbp, [rdi + 0x2a]
mov rbx, rdi
sub rsp, 8
cmp byte [rdi + 0x28], 0
mov qword [rdi + 8], rbp
mov byte [rdi + 0x2a], 0
jne 0x406540
mov rcx, qword [rdi + 0x20]
mov edx, 0x1000
mov rdi, rbp
mov esi, 1
call sym.imp.fread
add rbp, rax
mov qword [rbx + 0x10], rbp
add rsp, 8
pop rbx
pop rbp
ret
nop
mov rdx, qword [rdi + 0x20]
mov qword [rdi + 0x10], rbp
mov esi, 0x1000
mov rdi, rbp
call sym.imp.fgets
test rax, rax
je 0x406538
mov rax, qword [rbx + 0x10]
cmp byte [rax], 0
je 0x406538
nop dword [rax + rax]
add rax, 1
mov qword [rbx + 0x10], rax
cmp byte [rax], 0
jne 0x406568
jmp 0x406538
nop word [rax + rax]
mov rsi, qword [rsi + 8]
mov rdx, rdi
cmp rsi, str.St19_Sp_make_shared_tag
je 0x4065a5
xor eax, eax
cmp byte [rsi], 0x2a
je 0x4065a9
mov edi, str.St19_Sp_make_shared_tag
mov ecx, 0x18
repe cmpsb byte [rsi], byte ptr [rdi]
jne 0x4065a9
lea rax, [rdx + 0x10]
ret
nop dword [rax + rax]
test rdi, rdi
je 0x4065d0
mov rax, qword [rdi]
mov rax, qword [rax + 8]
cmp rax, sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::__Sp_counted_ptr_inplace
jne 0x4065d8
jmp sym.operatordelete
nop dword [rax]
ret
nop word [rax + rax]
jmp rax
nop word [rax + rax]
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
movabs rax, 0x7fffffffffffffff
sub rsp, 8
mov qword [rdi], 0x408208
mov rdx, qword [rdi + 0x1088]
mov rdi, qword [rdi + 0x10d8]
sub edx, ebp
sub rax, qword [rdi + 8]
cmp rdx, rax
ja 0x406657
mov rsi, rbp
add rbx, 0x10c8
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rdi, qword [rbx - 0x10]
mov qword [rbx - 0x40], rbp
mov qword [rbx - 0x10c8], 0x4081b8
cmp rdi, rbx
je 0x406650
add rsp, 8
pop rbx
pop rbp
jmp sym.operatordelete
nop dword [rax]
add rsp, 8
pop rbx
pop rbp
ret
mov edi, str.basic_string::append
call sym.std::__throw_length_error
nop word cs:[rax + rax]
nop dword [rax + rax]
push rbx
mov rbx, qword [rdi]
test rbx, rbx
je 0x4066a8
cmp byte [rbx + 0x29], 0
mov qword [rbx], 0x4081a0
jne 0x406690
mov rdi, rbx
pop rbx
jmp sym.operatordelete
nop
mov rdi, qword [rbx + 0x20]
call sym.imp.fclose
mov rdi, rbx
pop rbx
jmp sym.operatordelete
nop word [rax + rax]
pop rbx
ret
nop word [rax + rax]
mov edx, esi
lea rsi, [rdi + 8]
mov rdi, qword [rdi + 0x10d8]
movabs rax, 0x7fffffffffffffff
sub rax, qword [rdi + 8]
cmp rdx, rax
ja 0x4066d5
jmp sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
push rax
mov edi, str.basic_string::append
call sym.std::__throw_length_error
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
movabs rax, 0x7fffffffffffffff
sub rsp, 8
mov qword [rdi], 0x408208
mov rdx, qword [rdi + 0x1088]
mov rdi, qword [rdi + 0x10d8]
sub edx, ebp
sub rax, qword [rdi + 8]
cmp rdx, rax
ja 0x406753
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rdi, qword [rbx + 0x10b8]
lea rax, [rbx + 0x10c8]
mov qword [rbx + 0x1088], rbp
mov qword [rbx], 0x4081b8
cmp rdi, rax
je 0x406745
call sym.operatordelete
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp sym.operatordelete
mov edi, str.basic_string::append
call sym.std::__throw_length_error
nop dword [rax]
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
mov esi, 1
sub rsp, 8
mov rdx, qword [rdi + 0x1088]
mov rcx, qword [rdi + 0x10d8]
mov qword [rdi], 0x4081e0
mov rdi, rbp
sub edx, ebp
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
cmp byte [rbx + 0x10e0], 0
mov qword [rbx + 0x1088], rbp
jne 0x4067e0
mov rdi, qword [rbx + 0x10b8]
lea rax, [rbx + 0x10c8]
mov qword [rbx], 0x4081b8
cmp rdi, rax
je 0x4067cc
call sym.operatordelete
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp sym.operatordelete
nop word [rax + rax]
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fclose
jmp 0x4067ad
nop
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
mov esi, 1
sub rsp, 8
mov rdx, qword [rdi + 0x1088]
mov rcx, qword [rdi + 0x10d8]
mov qword [rdi], 0x4081e0
mov rdi, rbp
sub edx, ebp
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
cmp byte [rbx + 0x10e0], 0
mov qword [rbx + 0x1088], rbp
jne 0x406868
mov rdi, qword [rbx + 0x10b8]
mov qword [rbx], 0x4081b8
add rbx, 0x10c8
cmp rdi, rbx
je 0x406880
add rsp, 8
pop rbx
pop rbp
jmp sym.operatordelete
nop word [rax + rax]
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fclose
jmp 0x40683d
nop word cs:[rax + rax]
add rsp, 8
pop rbx
pop rbp
ret
nop word [rax + rax]
push rbp
push rbx
sub rsp, 8
mov rbx, qword [rdi]
test rbx, rbx
je 0x406930
mov rax, qword [rbx]
mov rax, qword [rax + 0x10]
cmp rax, 0x406760
jne 0x406950
mov rdx, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rcx, qword [rbx + 0x10d8]
mov esi, 1
mov qword [rbx], 0x4081e0
mov rdi, rbp
sub edx, ebp
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
cmp byte [rbx + 0x10e0], 0
mov qword [rbx + 0x1088], rbp
jne 0x406940
mov rdi, qword [rbx + 0x10b8]
lea rax, [rbx + 0x10c8]
mov qword [rbx], 0x4081b8
cmp rdi, rax
je 0x406918
call sym.operatordelete
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp sym.operatordelete
nop word cs:[rax + rax]
add rsp, 8
pop rbx
pop rbp
ret
nop word [rax + rax]
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fclose
jmp 0x4068f9
nop
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp rax
nop dword [rax + rax]
push rbx
mov rbx, qword [rdi + 0x10]
mov qword [rdi], 0x408178
test rbx, rbx
je 0x406982
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x406988
lock sub dword [rbx + 8], 1
je 0x4069b0
pop rbx
ret
nop dword [rax]
mov eax, dword [rbx + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [rbx + 8], edx
jne 0x406982
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, dword [rbx + 0xc]
lea edx, [rax - 1]
mov dword [rbx + 0xc], edx
jmp 0x4069c3
nop word [rax + rax]
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [rbx + 0xc], eax
cmp eax, 1
jne 0x406982
mov rax, qword [rbx]
mov rdi, rbx
pop rbx
mov rax, qword [rax + 0x18]
jmp rax
nop word cs:[rax + rax]
nop
push rbp
push rbx
mov rbp, rdi
sub rsp, 8
mov rbx, qword [rdi + 0x10]
mov qword [rdi], 0x408178
test rbx, rbx
je 0x406a0a
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x406a20
lock sub dword [rbx + 8], 1
je 0x406a48
add rsp, 8
mov rdi, rbp
pop rbx
pop rbp
jmp sym.operatordelete
nop dword [rax + rax]
mov eax, dword [rbx + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [rbx + 8], edx
jne 0x406a0a
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, dword [rbx + 0xc]
lea edx, [rax - 1]
mov dword [rbx + 0xc], edx
jmp 0x406a5b
nop word [rax + rax]
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [rbx + 0xc], eax
cmp eax, 1
jne 0x406a0a
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x18]
jmp 0x406a0a
nop dword [rax + rax]
push rbx
mov rbx, qword [rdi]
test rbx, rbx
je 0x406ab0
mov rdi, qword [rbx + 0x22e0]
test rdi, rdi
je 0x406a8b
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x22c0]
lea rax, [rbx + 0x22d0]
cmp rdi, rax
je 0x406aa3
call sym.operatordelete
mov rdi, rbx
pop rbx
jmp sym.operatordelete
nop dword [rax]
pop rbx
ret
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
push r13
push r12
mov r12, rsi
push rbp
push rbx
mov rbx, rdi
sub rsp, 8
mov rdx, qword [rdi + 8]
jmp 0x406b03
nop word [rax + rax]
lea rdx, [rax + 1]
mov qword [rbx + 8], rdx
movzx ebp, byte [rax]
lea eax, [rbp - 9]
mov esi, ebp
cmp al, 4
setbe cl
cmp bpl, 0x20
sete al
or cl, al
mov r15d, ecx
je 0x406b20
cmp qword [rbx + 0x10], rdx
mov rax, rdx
ja 0x406ae0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x406ae0
nop word [rax + rax]
cmp bpl, 0x2d
mov ecx, ebp
je 0x406c40
mov edi, dword [rbx + 0x18]
xor r13d, r13d
xor r14d, r14d
cmp edi, 0xa
ja 0x406bda
sub esi, 0x30
xor r13d, r13d
xor r14d, r14d
movzx esi, sil
cmp esi, edi
jb 0x406b72
jmp 0x406c00
nop dword [rax]
lea rdx, [rcx + 1]
mov qword [rbx + 8], rdx
movzx ecx, byte [rcx]
lea esi, [rcx - 0x30]
movzx esi, sil
cmp esi, edi
jae 0x406c00
imul r14d, edi
add r13d, 1
cmp qword [rbx + 0x10], rdx
movsx esi, cl
mov rcx, rdx
lea r14d, [r14 + rsi - 0x30]
ja 0x406b58
mov rdx, qword [rbx]
mov rdi, rbx
call qword [rdx]
mov rcx, qword [rbx + 8]
mov edi, dword [rbx + 0x18]
jmp 0x406b58
nop dword [rax]
lea esi, [rcx - 0x61]
sub ecx, 0x57
cmp sil, 0x19
mov esi, ecx
cmova esi, edi
movsx ecx, sil
cmp edi, ecx
jbe 0x406c00
imul r14d, edi
add r13d, 1
add r14d, ecx
cmp qword [rbx + 0x10], rdx
jbe 0x406c5b
lea rsi, [rdx + 1]
mov qword [rbx + 8], rsi
movzx ecx, byte [rdx]
mov rdx, rsi
lea esi, [rcx - 0x30]
cmp sil, 9
jbe 0x406baf
lea esi, [rcx - 0x41]
cmp sil, 0x19
ja 0x406ba0
lea esi, [rcx - 0x37]
movsx ecx, sil
cmp edi, ecx
ja 0x406bb7
nop word [rax + rax]
sub rdx, 1
test r13d, r13d
mov qword [rbx + 8], rdx
je 0x406c24
mov eax, r14d
mov r15d, 1
neg eax
cmp bpl, 0x2d
cmove r14d, eax
mov dword [r12], r14d
add rsp, 8
mov eax, r15d
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
cmp qword [rbx + 0x10], rdx
jbe 0x406c6f
lea rdi, [rdx + 1]
mov qword [rbx + 8], rdi
movzx ecx, byte [rdx]
mov rdx, rdi
mov esi, ecx
jmp 0x406b2c
mov rdx, qword [rbx]
mov rdi, rbx
call qword [rdx]
mov rdx, qword [rbx + 8]
mov edi, dword [rbx + 0x18]
jmp 0x406bcc
mov rdx, qword [rbx]
mov rdi, rbx
call qword [rdx]
mov rdx, qword [rbx + 8]
jmp 0x406c46
nop dword [rax]
sub rsp, 8
mov rdx, qword [rdi + 8]
mov rdi, qword [rdi]
cmp rdx, rdi
je 0x406caf
cmp qword [rdi], 0
jne 0x406cc5
mov rax, rdi
jmp 0x406ca6
nop dword [rax + rax]
cmp qword [rax], 0
jne 0x406cc5
add rax, 8
cmp rdx, rax
jne 0x406ca0
test rdi, rdi
je 0x406cc0
add rsp, 8
jmp sym.operatordelete
nop dword [rax]
add rsp, 8
ret
call sym.std::terminate
nop word [rax + rax]
push r15
push r14
mov r14, rdi
push r13
push r12
mov r12, rsi
push rbp
push rbx
sub rsp, 0x28
mov rbp, qword [rip + 0x20259d]
call sym.imp.strlen
mov r15, rax
mov r8d, eax
mov ebx, dword [rbp + 0x109c]
mov byte [rbp + 0x1098], 0
cmp eax, ebx
jb 0x406ff8
mov rcx, qword [rbp + 0x1088]
lea r13, [rbp + 0x1008]
mov ebx, r15d
mov rsi, qword [rbp + 0x1090]
lea rax, [rcx + rbx + 0x80]
cmp rsi, rax
jbe 0x407228
cmp r15d, 1
je 0x407150
test r15d, r15d
jne 0x406f78
add rbx, rcx
mov qword [rbp + 0x1088], rbx
movsd xmm0, qword [r12]
movmskpd r14d, xmm0
and r14d, 1
je 0x406d6e
movsd xmm1, qword [rip + 0x1516]
xorpd xmm0, xmm1
ucomisd xmm0, xmm0
jp 0x4072e0
movsd xmm1, qword [rip + 0x1510]
andpd xmm1, xmm0
ucomisd xmm1, qword [rip + 0x1514]
jbe 0x406ea0
lea r12, [rsi - 3]
mov byte [rsi - 1], 0x66
mov byte [rsi - 2], 0x6e
mov byte [rsi - 3], 0x49
test r14d, r14d
je 0x406db1
mov byte [r12 - 1], 0x2d
sub r12, 1
cmp byte [rbp + 0x1098], 0
jne 0x406f98
mov rcx, qword [rbp + 0x1088]
mov rax, qword [rbp + 0x1090]
mov edx, dword [rbp + 0x109c]
mov rbx, rax
mov byte [rbp + 0x1098], 1
sub rbx, r12
cmp ebx, edx
jb 0x4071d8
xor edi, edi
test rbx, rbx
je 0x406e02
mov rdi, rcx
mov rdx, rbx
mov rsi, r12
call sym.imp.memmove
mov rdi, rbx
mov rcx, rax
add rdi, rcx
cmp rdi, r13
mov qword [rbp + 0x1088], rdi
jae 0x4071a8
lea rax, [rdi + 1]
mov byte [rbp + 0x1098], 0
mov qword [rbp + 0x1088], rax
mov byte [rdi], 0xa
cmp qword [rbp + 0x1088], r13
jae 0x407170
mov rbx, qword [rip + 0x20244a]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x407120
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
movsd xmm2, qword [rip + 0x1400]
ucomisd xmm0, xmm2
jae 0x407100
cvttsd2si rbx, xmm0
test rbx, rbx
mov rdx, qword [rbp + 0x10b0]
js 0x4072f8
pxor xmm1, xmm1
cvtsi2sd xmm1, rbx
test rdx, rdx
subsd xmm0, xmm1
js 0x407320
pxor xmm1, xmm1
cvtsi2sd xmm1, rdx
mulsd xmm0, xmm1
addsd xmm0, qword [rip + 0x13be]
ucomisd xmm0, xmm2
jae 0x4070e0
cvttsd2si rcx, xmm0
cmp rdx, rcx
ja 0x407060
mov edx, dword [rbp + 0x10a8]
mov r12, rsi
add rbx, 1
sub r12, rdx
test edx, edx
jne 0x4075c7
test rbx, rbx
je 0x407390
mov eax, dword [rbp + 0x10a4]
movabs rcx, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x4073b1
nop dword [rax]
mov rax, rbx
sub r12, 1
mul rcx
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rbx, rax
add ebx, 0x30
test rdx, rdx
mov byte [r12], bl
mov rbx, rdx
jne 0x406f48
jmp 0x406da2
nop dword [rax]
mov rsi, r14
mov rdi, rcx
mov rdx, rbx
call sym.imp.memmove
mov rsi, qword [rbp + 0x1090]
mov rcx, rax
jmp 0x406d47
nop dword [rax]
mov rdx, qword [rbp + 0x10c0]
mov rcx, qword [rbp + 0x1088]
mov rax, qword [rbp + 0x1090]
mov r14, qword [rbp + 0x10b8]
mov byte [rbp + 0x1098], 0
mov ebx, edx
mov r15d, edx
lea rsi, [rcx + rbx + 0x80]
cmp rax, rsi
jbe 0x407417
cmp edx, 1
je 0x407368
test edx, edx
jne 0x407130
add rcx, rbx
mov qword [rbp + 0x1088], rcx
jmp 0x406dcc
nop dword [rax]
mov rdi, qword [rbp + 0x1088]
sub ebx, eax
mov edx, ebx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x4074e1
cmp ebx, 1
je 0x407348
movzx esi, byte [rbp + 0x10a0]
lea rcx, [rdi + rdx]
mov dword [rsp + 8], r15d
lea r13, [rbp + 0x1008]
mov qword [rsp], rcx
call sym.imp.memset
mov rcx, qword [rsp]
mov r8d, dword [rsp + 8]
mov qword [rbp + 0x1088], rcx
jmp 0x406d19
nop word cs:[rax + rax]
mov edx, dword [rbp + 0x10a8]
mov r12, rsi
sub r12, rdx
test edx, edx
je 0x406f22
test rcx, rcx
je 0x4075c7
mov eax, dword [rbp + 0x10a4]
movabs rdi, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x4075d4
nop word cs:[rax + rax]
mov rax, rcx
sub rsi, 1
mul rdi
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rcx, rax
add ecx, 0x30
test rdx, rdx
mov byte [rsi], cl
mov rcx, rdx
jne 0x4070a0
sub rsi, r12
mov rdx, rsi
jne 0x40739f
mov byte [r12 - 1], 0x2e
sub r12, 1
jmp 0x406f22
subsd xmm0, xmm2
movabs rax, 0x8000000000000000
cvttsd2si rcx, xmm0
xor rcx, rax
jmp 0x406f01
nop dword [rax + rax]
movapd xmm1, xmm0
movabs rax, 0x8000000000000000
subsd xmm1, xmm2
cvttsd2si rbx, xmm1
xor rbx, rax
jmp 0x406eb7
nop
mov rdi, rbx
call rax
jmp 0x406e80
nop word [rax + rax]
mov rdi, rcx
mov rdx, rbx
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
mov rax, qword [rbp + 0x1090]
jmp 0x406fe2
nop dword [rax]
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r14]
mov byte [rcx], al
mov rsi, qword [rbp + 0x1090]
jmp 0x406d51
nop dword [rax]
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor ebx, ebx
call qword [rax]
mov rax, qword [rbp + 0x1088]
lea rcx, [rbp + 8]
sub rax, r13
jne 0x4074c8
add rbx, rcx
mov qword [rbp + 0x1088], rbx
jmp 0x406e37
nop dword [rax + rax]
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor ebx, ebx
call qword [rax]
mov rax, qword [rbp + 0x1088]
lea rcx, [rbp + 8]
sub rax, r13
jne 0x4074af
lea rdi, [rcx + rbx]
jmp 0x406e15
nop dword [rax]
sub edx, ebx
mov edx, edx
lea rsi, [rcx + rdx + 0x80]
mov rbx, rdx
cmp rax, rsi
jbe 0x407616
cmp edx, 1
je 0x4075a7
movzx esi, byte [rbp + 0x10a0]
lea rbx, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [rbp + 0x1088], rbx
mov rcx, rbx
mov rbx, qword [rbp + 0x1090]
sub rbx, r12
jmp 0x406de7
nop dword [rax]
lea rax, [rbp + 8]
mov ebx, r13d
mov r15, r14
sub ebx, ecx
mov qword [rsp + 8], rax
jmp 0x40725c
nop dword [rax + rax]
add rcx, r14
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jae 0x407292
sub r8d, ebx
je 0x4072d0
add r15, r14
mov ebx, 0x1000
cmp r8d, ebx
cmovbe ebx, r8d
test ebx, ebx
mov r14d, ebx
je 0x407240
mov rdi, rcx
mov rdx, r14
mov rsi, r15
mov dword [rsp], r8d
call sym.imp.memmove
mov rcx, rax
mov r8d, dword [rsp]
add rcx, r14
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jb 0x40724f
mov rax, qword [rbp]
mov dword [rsp], r8d
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
mov r8d, dword [rsp]
sub rax, r13
jne 0x4073f0
add rcx, qword [rsp + 8]
sub r8d, ebx
mov qword [rbp + 0x1088], rcx
jne 0x407254
nop dword [rax + rax]
mov rsi, qword [rbp + 0x1090]
jmp 0x406d51
nop dword [rax]
mov byte [rsi - 1], 0x4e
mov byte [rsi - 2], 0x61
lea r12, [rsi - 3]
mov byte [rsi - 3], 0x4e
jmp 0x406da2
nop dword [rax]
mov rax, rbx
mov rcx, rbx
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x406ed0
nop dword [rax]
mov rax, rdx
mov rcx, rdx
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x406ee6
nop dword [rax]
lea rax, [rdi + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rdi], al
jmp 0x406d0b
nop dword [rax]
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r14]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
mov rax, qword [rbp + 0x1090]
jmp 0x406dcc
nop dword [rax]
mov byte [r12 - 1], 0x30
sub r12, 1
jmp 0x406da2
mov esi, 0x30
mov rdi, r12
call sym.imp.memset
jmp 0x4070d1
mov ecx, eax
nop dword [rax + rax]
mov rax, rbx
xor edx, edx
sub r12, 1
div rcx
lea ecx, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, ecx
xor edx, edx
mov byte [r12], al
mov ecx, dword [rbp + 0x10a4]
mov rax, rbx
div rcx
test rax, rax
mov rbx, rax
jne 0x4073b8
jmp 0x406da2
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r13
mov dword [rsp + 0x10], r8d
mov qword [rsp], rax
call sym.imp.memmove
mov r8d, dword [rsp + 0x10]
mov rcx, qword [rsp]
jmp 0x4072ba
lea rax, [rbp + 8]
mov ebx, r13d
sub ebx, ecx
mov qword [rsp + 8], rax
jmp 0x407450
nop word [rax + rax]
add rcx, r9
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jae 0x407479
sub r15d, ebx
je 0x406dc5
add r14, r9
mov ebx, 0x1000
cmp r15d, ebx
cmovbe ebx, r15d
test ebx, ebx
mov r9d, ebx
je 0x407430
mov rdx, r9
mov rdi, rcx
mov rsi, r14
mov qword [rsp], r9
call sym.imp.memmove
mov r9, qword [rsp]
mov rcx, rax
jmp 0x407430
mov rax, qword [rbp]
mov qword [rsp], r9
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
mov r9, qword [rsp]
sub rax, r13
jne 0x407691
add rcx, qword [rsp + 8]
mov qword [rbp + 0x1088], rcx
jmp 0x40743f
mov rdi, rcx
mov rdx, rax
mov rsi, r13
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x4071cc
mov rdi, rcx
mov rdx, rax
mov rsi, r13
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x407194
lea r10, [rbp + 0x1008]
mov rcx, rdi
mov eax, r10d
sub eax, edi
lea rdi, [rbp + 8]
mov qword [rsp + 0x18], rdi
jmp 0x40751d
nop dword [rax + rax]
cmp r10, r11
mov qword [rbp + 0x1088], r11
mov rcx, r11
jbe 0x40755c
sub ebx, r13d
mov eax, 0x1000
je 0x40759f
cmp ebx, eax
cmovbe eax, ebx
mov edx, eax
test edx, edx
mov r13, rdx
lea r11, [rcx + rdx]
je 0x407500
movzx esi, byte [rbp + 0x10a0]
mov rdi, rcx
mov qword [rsp + 0x10], r11
mov qword [rsp + 8], r10
mov dword [rsp], r8d
call sym.imp.memset
mov r11, qword [rsp + 0x10]
mov r10, qword [rsp + 8]
mov r8d, dword [rsp]
jmp 0x407500
mov rax, qword [rbp]
mov qword [rsp + 8], r10
mov esi, 0x1000
mov dword [rsp], r8d
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
mov r10, qword [rsp + 8]
xor ecx, ecx
mov r8d, dword [rsp]
sub rax, r10
jne 0x4076b8
add rcx, qword [rsp + 0x18]
mov qword [rbp + 0x1088], rcx
jmp 0x40750f
mov r13, r10
jmp 0x406d19
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
jmp 0x407216
mov byte [rsi - 1], 0x30
sub rsi, 1
jmp 0x4070c5
mov edi, eax
nop word cs:[rax + rax]
mov rax, rcx
xor edx, edx
sub rsi, 1
div rdi
lea edi, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov edi, dword [rbp + 0x10a4]
mov rax, rcx
div rdi
test rax, rax
mov rcx, rax
jne 0x4075e0
jmp 0x4070c5
lea rdi, [rbp + 8]
mov eax, r13d
sub eax, ecx
mov qword [rsp], rdi
jmp 0x407645
nop dword [rax]
cmp r14, r13
mov qword [rbp + 0x1088], r14
mov rcx, r14
jae 0x407668
sub ebx, r15d
mov eax, 0x1000
je 0x407216
cmp ebx, eax
cmovbe eax, ebx
mov edx, eax
test edx, edx
mov r15, rdx
lea r14, [rcx + rdx]
je 0x407628
movzx esi, byte [rbp + 0x10a0]
mov rdi, rcx
call sym.imp.memset
jmp 0x407628
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
sub rax, r13
jne 0x4076e9
add rcx, qword [rsp]
mov qword [rbp + 0x1088], rcx
jmp 0x407637
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 0x10], r9
mov qword [rsp], rax
call sym.imp.memmove
mov r9, qword [rsp + 0x10]
mov rcx, qword [rsp]
jmp 0x4074a1
mov rdi, qword [rsp + 0x18]
mov rsi, r10
mov rdx, rax
mov dword [rsp + 0x10], r8d
mov qword [rsp], r10
mov qword [rsp + 8], rax
call sym.imp.memmove
mov r8d, dword [rsp + 0x10]
mov rcx, qword [rsp + 8]
mov r10, qword [rsp]
jmp 0x40758e
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x407684
nop word cs:[rax + rax]
nop
mov eax, sym.imp.__pthread_key_create
push rbx
mov rbx, rdi
test rax, rax
je 0x407730
lock sub dword [rdi + 8], 1
je 0x407750
pop rbx
ret
nop word [rax + rax]
mov eax, dword [rdi + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [rdi + 8], edx
jne 0x407725
mov rax, qword [rdi]
call qword [rax + 0x10]
mov eax, dword [rbx + 0xc]
lea edx, [rax - 1]
mov dword [rbx + 0xc], edx
jmp 0x407760
nop
mov rax, qword [rdi]
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [rbx + 0xc], eax
cmp eax, 1
jne 0x407725
mov rax, qword [rbx]
mov rdi, rbx
pop rbx
mov rax, qword [rax + 0x18]
jmp rax
nop word cs:[rax + rax]
nop dword [rax]
test rsi, rsi
je 0x40796c
mov r8, qword [rdi + 8]
mov rax, qword [rdi + 0x10]
sub rax, r8
sar rax, 5
cmp rsi, rax
ja 0x4077e0
mov rdx, rsi
mov rax, r8
nop dword [rax + rax]
test rax, rax
je 0x4077c0
lea rcx, [rax + 0x10]
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
mov qword [rax], rcx
add rax, 0x20
sub rdx, 1
jne 0x4077a8
shl rsi, 5
add rsi, r8
mov qword [rdi + 8], rsi
ret
nop word cs:[rax + rax]
push r15
push r14
mov rax, r8
push r13
push r12
movabs rcx, 0x7ffffffffffffff
push rbp
push rbx
mov rdx, rcx
mov r14, rsi
mov rbx, rdi
sub rsp, 8
mov r15, qword [rdi]
sub rax, r15
sar rax, 5
sub rdx, rax
cmp rsi, rdx
ja 0x4079ab
cmp rsi, rax
mov rdx, rax
cmovae rdx, rsi
add rax, rdx
jb 0x407970
cmp rax, rcx
ja 0x407970
xor r12d, r12d
xor ebp, ebp
test rax, rax
mov rsi, r8
jne 0x407991
nop word [rax + rax]
cmp rsi, r15
je 0x4079a0
lea rdx, [r15 + 0x20]
lea rax, [r15 + 0x10]
sub rsi, rdx
mov rdx, rbp
mov rdi, rsi
lea rsi, [r15 + rsi + 0x30]
shr rdi, 5
jmp 0x4078a6
nop dword [rax]
mov qword [rdx], rcx
mov rcx, qword [rax]
mov qword [rdx + 0x10], rcx
mov rcx, qword [rax - 8]
mov qword [rdx + 8], rcx
mov qword [rax - 0x10], rax
mov qword [rax - 8], 0
mov byte [rax], 0
add rax, 0x20
add rdx, 0x20
cmp rax, rsi
je 0x4078d0
test rdx, rdx
je 0x407899
lea rcx, [rdx + 0x10]
mov qword [rdx], rcx
mov rcx, qword [rax - 0x10]
cmp rcx, rax
jne 0x407878
mov r9, qword [rax]
mov r10, qword [rax + 8]
mov qword [rdx + 0x10], r9
mov qword [rdx + 0x18], r10
jmp 0x407882
nop dword [rax]
add rdi, 1
mov r15, qword [rbx + 8]
mov r13, qword [rbx]
shl rdi, 5
add rdi, rbp
mov rax, rdi
mov rdx, r14
nop dword [rax + rax]
test rax, rax
je 0x407908
lea rcx, [rax + 0x10]
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
mov qword [rax], rcx
add rax, 0x20
sub rdx, 1
jne 0x4078f0
mov rsi, r14
shl rsi, 5
cmp r13, r15
lea r14, [rdi + rsi]
je 0x407946
nop word [rax + rax]
mov rdi, qword [r13]
lea rax, [r13 + 0x10]
cmp rdi, rax
je 0x40793a
call sym.operatordelete
add r13, 0x20
cmp r13, r15
jne 0x407928
mov r15, qword [rbx]
test r15, r15
je 0x407953
mov rdi, r15
call sym.operatordelete
mov qword [rbx], rbp
mov qword [rbx + 8], r14
mov qword [rbx + 0x10], r12
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
mov r12, -0x20
mov rdi, r12
call sym.operatornew
mov rsi, qword [rbx + 8]
mov rbp, rax
mov r15, qword [rbx]
add r12, rax
jmp 0x407850
shl rax, 5
mov r12, rax
jmp 0x407977
nop word [rax + rax]
mov r13, r15
mov rdi, rbp
jmp 0x4078e2
mov edi, str.vector::_M_default_append
call sym.std::__throw_length_error
nop word cs:[rax + rax]
nop
push r14
push r13
mov r14, rsi
push r12
push rbp
push rbx
mov rbx, rdi
sub rsp, 0x20
mov rcx, qword [rbx + 8]
mov rdi, qword [rdi]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x18], rax
xor eax, eax
mov r13, rcx
sub r13, rdi
mov r12, r13
sar r12, 3
test r12, r12
je 0x407b70
lea rax, [r12 + r12]
cmp r12, rax
jbe 0x407c26
mov r12, -8
mov rdi, r12
call sym.operatornew
mov rcx, qword [rbx + 8]
mov rdi, qword [rbx]
mov rbp, rax
mov r13, rcx
sub r13, rdi
add r13, rbp
je 0x407abf
mov qword [r13], 0
mov edi, 0x30
call sym.operatornew
lea rdx, [rax + 0x10]
mov dword [rax + 8], 1
mov dword [rax + 0xc], 1
mov qword [rax], 0x408258
mov qword [rax + 0x18], 0
mov rsi, rsp
mov qword [rsp], rdx
mov qword [rax + 0x20], 0
mov edx, sym.imp.pthread_create
mov qword [rax + 0x10], 0x408230
mov qword [rax + 0x28], r14
mov rdi, r13
mov qword [rsp + 8], rax
call sym.std::thread::_M_start_thread
mov r13, qword [rsp + 8]
test r13, r13
je 0x407ab8
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x407ba8
lock sub dword [r13 + 8], 1
je 0x407b7b
mov rcx, qword [rbx + 8]
mov rdi, qword [rbx]
cmp rcx, rdi
je 0x407bd3
mov rdx, rbp
mov rax, rdi
nop
test rdx, rdx
je 0x407ae9
mov qword [rdx], 0
mov rsi, qword [rax]
mov qword [rdx], rsi
mov qword [rax], 0
add rax, 8
add rdx, 8
cmp rax, rcx
jne 0x407ad0
lea rax, [rdi + 8]
mov rsi, rcx
sub rsi, rax
mov rax, rsi
shr rax, 3
cmp qword [rdi], 0
lea r13, [rbp + rax*8 + 0x10]
jne 0x407be9
mov rax, rdi
jmp 0x407b2a
nop dword [rax + rax]
cmp qword [rax], 0
jne 0x407be9
add rax, 8
cmp rax, rcx
jne 0x407b20
test rdi, rdi
je 0x407b3d
call sym.operatordelete
mov qword [rbx], rbp
add rbp, r12
mov qword [rbx + 8], r13
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
mov qword [rbx + 0x10], rbp
jne 0x407bf3
add rsp, 0x20
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax]
mov r12d, 8
jmp 0x407a13
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [r13 + 0xc], eax
cmp eax, 1
jne 0x407ab8
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x18]
jmp 0x407ab8
mov eax, dword [r13 + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [r13 + 8], edx
jne 0x407ab8
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x10]
mov eax, dword [r13 + 0xc]
lea edx, [rax - 1]
mov dword [r13 + 0xc], edx
jmp 0x407b90
lea r13, [rbp + 8]
jmp 0x407b33
mov rax, qword [rbx + 8]
sub rax, qword [rbx]
cmp qword [rax], 0
je 0x407c1f
call sym.std::terminate
mov r12, rax
jmp 0x407bf8
call sym.imp.__stack_chk_fail
mov rdi, qword [rsp + 8]
test rdi, rdi
je 0x407c07
call sym.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_::_M_release
mov rax, r12
mov rdi, rax
call sym.imp.__cxa_begin_catch
test rbp, rbp
je 0x407bdc
mov rdi, rbp
call sym.operatordelete
call sym.imp.__cxa_rethrow
jmp 0x407c0a
movabs rdx, 0x1fffffffffffffff
cmp rax, rdx
ja 0x407a0c
test rax, rax
jne 0x407c4d
xor r12d, r12d
xor ebp, ebp
jmp 0x407a2b
mov rbx, rax
jmp 0x407c56
shl r12, 4
jmp 0x407a13
call sym.imp.__cxa_end_catch
mov rdi, rbx
call sym.imp._Unwind_Resume
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201156]
push rbp
lea rbp, [rip + 0x20115e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x407cc6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x407cb0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
jae 0x407d71
movsxd rbx, dword [rdi + 0x73]
je 0x407d7f
imul ebp, dword [rsi + 0x67], 0x70613a3a
jo 0x407d7b
outsb dx, byte [rsi]
add byte fs:[rdx], dh
xor ah, byte [rax]
cmp al, 0x3d
and byte [rsi + 0x61], dh
insb byte [rdi], dx
jne 0x407d88
and byte [rsi], ah
and byte es:[rsi + 0x61], dh
insb byte [rdi], dx
jne 0x407d91
and byte [rdi + 0x363320], bh
jbe 0x407d96
insb byte [rdi], dx
jne 0x407d9d
and byte [rax], bh
pop r8
pop rdi
push r12
add byte [rbx + 0x61], al
jae 0x407daf
and byte [rbx], ah
add byte [rbx + 0x61], al
jae 0x407db6
and byte [rax], al
and byte [rbx + 0x74], dh
jb 0x407dcd
add byte fs:[rdx], cl
or cl, byte [rdx]
push rsp
jae 0x407dd6
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rbp + 0x72], al
jb 0x407ddf
outsd dx, dword [rsi]
jb str.vector::_M_default_append
outsd dx, dword [rsi]
outsb dx, byte [rsi]
and byte [rbp + 0x73], dh
je 0x407d98
and eax, dword [rax]
js 0x407ded
movsxd rsi, dword gs:[rbp + 0x64]
cmp cl, byte [rdx]
add byte [rdx + 0x65], dl
push rdx
movsxd rsp, dword gs:[rbp + 0x69]
jbe 0x407df1
cmp cl, byte fs:[rdx]
add byte [rsi + 0x65], dh
jbe 0x407df7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x407e0d
je 0x407e02
jo 0x407e16
outsb dx, byte gs:[rsi]
add byte fs:[rdx], dh
sub eax, 0x6772616c
imul ebp, dword cs:[rsi], 0x756f0077
outsd dx, dword [rsi]
jne 0x407e30
jo 0x407e33
je 0x407dee
je 0x407e3a
je str._n_nTotal_time:
or cl, byte [rdx]
push rsp
outsd dx, dword [rsi]
je 0x407e2b
insb byte [rdi], dx
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x407e49
jb 0x407e50
pop rdi
movsxd rbp, dword [rdi + 0x64]
jae 0x407e4b
insd dword [rdi], dx
outsb dx, byte [rsi]
je 0x407e54
movsxd rbp, dword [rdi]
insb byte [rdi], dx
jae 0x407e5c
insb byte [rdi], dx
jae 0x407e64
pop rdi
xor byte [rdi + 0x31], bl
jae 0x407e72
jne 0x407e77
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x6e], ch
imul ebp, dword [rsi + 0x70], 0x3e2d7475
jb 0x407e7e
sub byte fs:[rsi + 0x6f], ah
jb 0x407e97
jb 0x407e87
cmp al, 0x54
jae 0x407e65
sub byte [rcx + 0x72], ah
jae 0x407e56
sub dword cs:[rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x407eb1
imul esp, dword [rax + 0x72], 0x28646165
push rsp
jae 0x407e73
and byte es:[rsi], ch
sub dword cs:[rax], esp
pop rbx
ja 0x407ec0
je 0x407ec1
and byte [rbx + rsi*2 + 0x20], dl
cmp eax, 0x6e697b20
je 0x407e8a
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x5d7d26
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x74], al
je 0x407ee5
imul ebp, dword [rdx + rdi + 0x3a], 0x63657250
imul esi, dword [rbx + 0x69], 0x73206e6f
je 0x407ee6
jb 0x407efd
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x6e697528
je 0x407ecd
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x407f15
imul ebp, dword [rdx + rdi + 0x3a], 0x65736142
and byte [rbx + 0x65], dh
je 0x407f03
jae 0x407f29
sub byte [rbp + 0x69], dh
outsb dx, byte [rsi]
je 0x407ef3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
je 0x407f14
xor dword [rdi + 0x4d], ebx
jne 0x407f5c
js 0x407f4a
jae 0x407f54
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne obj.typeinfoforstd::_Sp_counted_base____gnu_cxx::_Lock_policy_2_
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x407f75
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
jo 0x407ea3
add byte [rax], al
add byte [rax], al
add al, ah
jle 0x407f5b
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x407f54
pop rdi
push rbx
jo 0x407f87
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x407f93
pop rdi
jae 0x407f99
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407f9d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x407fba
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
add byte [rax], al
add al, cl
enter 0x6091, 0
add byte [rax], al
add byte [rax], al
and byte [rdi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
jg 0x407fab
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x407faa
je 0x407fde
jb 0x407fdd
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x407fed
pop rdi
jae 0x407feb
add byte [r8 - 0x6f], r14b
jo 0x407f1b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x7f], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x408013
je 0x407fe4
jbe 0x40800c
movsxd rsp, dword [rbp]
add byte [rax], al
jo 0x407f3b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x407f], bl
add byte [rax], al
add byte [rcx], bh
cmp dword [rcx + 0x6e], ecx
jo 0x408032
je 0x408005
imul ebp, dword [rbp], 0
add al, cl
enter 0x6091, 0
add byte [rax], al
add byte [rax], al
mov eax, 0x407f
add byte [rax], al
add byte [rax + 0x407f], ch
add byte [rax], al
add byte [rcx], dh
xor dword [rdx], esi
jne 0x408059
jo 0x40805c
je 0x40802d
jbe 0x408055
movsxd rsp, dword [rbp]
add byte [rax - 0x6f], dh
jo 0x407f83
add byte [rax], al
add byte [rax], al
add al, ah
jg 0x40803b
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rax], esi
jne 0x408079
jo 0x40807c
je 0x40804f
imul ebp, dword [rbp], 0xc8000000
enter 0x6091, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], al
add byte [rax], al
jg 0x408063
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rdx], esi
jne 0x4080a1
jo 0x4080a4
je 0x408084
je 0x4080a5
imul ebp, dword [rsi + 0x67], 0x91c80000
enter 0x6091, 0
add byte [rax], al
add byte [rax], al
sub byte [rax + 0x40], al
add byte [rax], al
jg 0x40808b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x40809a
je 0x4080ce
jb 0x4080cd
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4080a5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4080ec
push rax
jbe 0x4080fd
jbe 0x4080cf
add byte [r8], r8b
add al, cl
enter 0x6091, 0
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax + 0x407f], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x4080e4
cmp dword [rdi + 0x53], ebx
jo 0x408117
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x408127
add byte [eax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x408115
xor ebx, dword [rdi + 0x53]
jo 0x408147
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x408153
pop rdi
jo 0x408166
jb 0x408153
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x408136
je 0x40816a
jb 0x408169
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x408141
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x408188
push rax
jbe 0x408199
jbe 0x40816b
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408198
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4081b5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
enter 0x6091, 0
add byte [rax], al
add byte [rax], al
loopne 0x4080da
add byte [rax], al
add byte [rax], al
add byte [rax + 0x7f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x407f, 0
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x4081f3
add byte [rax], al
add byte [rax], al
add al, dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax + 0x40], al
add byte [rax], al
shl byte [rax + rax*2], 1
add byte [rax], al
add byte [rax], al
lock add byte [eax], al
add byte [rax], al
add byte [rax + 0x67], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax + 0x40], al
add byte [rax], al
mov al, 0x66
add byte [rax], al
add byte [rax], al
add al, ah
add byte gs:[rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], 0
add byte [rax], al
add byte [rax + 0x69], ah
add byte [rax], al
add byte [rax], al
add al, ah
imul eax, dword [rax], 0
add byte fs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add dword [rax], 0
and byte [rax + rax*2], ah
add byte [rax], al
add byte [rax], al
mov al, 0x64
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte fs:[rax], al
add byte [rax], al
add al, al
add byte fs:[rax], al
add byte [rax], al
add byte [rax + 0x4065], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x408299
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
out dx, eax
jg 0x4082a9
add byte [rax], al
add byte [rax], al
add al, ah
add byte [r8], al
add byte [rax], al
add byte [rax], al
loopne 0x4082f7
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp + 0x31b0141], 0x3b
add dword [rbx], ebx
add edi, dword [rbx]
push rsp
add dword [rax], eax
add byte [rcx], ch
add byte [rax], al
add al, al
jmp qword [rax + 0x40000001]
nop
dec dword [rax]
or byte [rax], al
add byte [rax], dh
xchg eax, ebp
inc dword [rax + 8]
add byte [rax], al
rcl byte [rbp + 0x170ffff], 1
add byte [rax], al
rcl byte [rsi + 0x4d0ffff], 1
add byte [rax], al
loopne 0x40828c
call 0xfffffffff0408301
xchg eax, esi
inc dword [rax]
add eax, 0x97200000
lcall [rax]
add eax, 0x97500000
push qword [rax]
add eax, 0x97600000
dec dword [rax + 5]
add byte [rax], al
push rax
cmpsb byte [rsi], byte ptr [rdi]
mov eax, 0xf0000005
mov esi, 0x6d0ffff
add byte [rax], al
dec dword [rax]
add byte [rax], al
loope 0x408336
dec eax
add dword [rax], eax
add byte [rax - 0x1f], dh
jmp rax
add dword [rax], eax
add byte [rax - 0x700001f], al
add dword [rax], eax
add byte [rax + 0x10ffffe1], dl
add al, byte [rax]
add al, dh
loope 0x408356
dec dword [rax + 2]
add byte [rax], al
add dl, ah
jmp qword [rax + 2]
add byte [rax], al
adc dl, ah
js 0x40836c
add byte [rax], al
loop 0x40836e
lcall [rax - 0x3ffffffe]
loop 0x408376
dec eax
add al, byte [rax]
add al, dh
loop 0x40837e
jmp rax
add al, byte [rax]
add byte [rax], ah
jrcxz 0x408386
lcall [rax]
add eax, dword [rax]
add byte [rax + 0x58ffffe3], dh
add eax, dword [rax]
add al, dh
jrcxz 0x408396
dec dword [rax + 0x20000003]
in al, 0xff
jmp qword [rax - 0x5ffffffd]
in al, 0xff
call rax
add eax, dword [rax]
add byte [rax], dh
in eax, 0xff
inc dword [rax]
add al, 0
add al, dl
in eax, 0xff
cmp byte [rax + rax], al
add byte [rax - 0x7f00001a], ah
add al, 0
add byte [rax], ah
out 0xff, eax
jmp qword [rax - 0x4ffffffc]
out 0xff, eax
lcall [rax + 5]
call 0x65183d9
add byte [rax], al
shr cl, 0xff
jmp qword [rax + 6]
add byte [rax], al
adc dl, ch
inc dword [rax + 0x50000006]
hlt
inc dword [rax + 7]
add byte [rax], al
sal ah, 0xff
jmp qword [rax + 7]
add byte [rax], al
add bh, dh
inc eax
add byte [rax], al
mov al, 0xf9
lcall [rax + 8]
add byte [rax], al
and dl, bh
jmp qword [rax + 8]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x408437
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rax
xchg eax, esp
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x408467
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb byte [rdi + rdi*8 + 0x270ff], cl
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rax + 0x2ffffdf], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
pop rsp
add byte [rax], al
add byte [rax + 0xdffffdf], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
je 0x4084be
add byte [rax], al
sbb bh, 0xff
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
mov word [rax], es
add byte [rax], al
js 0x4084b9
call qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rcx + 0xe]
and byte [rbx + 0xe0a7804], al
sbb byte [rsi + rcx + 0x10], al
or byte [rsi + 0xb], cl
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5ffffdf], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
fadd qword [rax]
add byte [rax], al
cwde
inc dword [rip]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add byte [rax], al
add byte [rax + 0x28ffffdf], dl
add byte [rax], al
add byte [rax], al
adc byte [rbx + 0x80e6202], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
adc al, 1
add byte [rax], al
movabs al, byte [0x77ffffdf]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x4b
and byte [rdi + 0xa], ch
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rdx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add dword [rax], r8d
add al, dh
ljmp [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
pop rsp
add dword [rax], eax
add byte [rax], cl
loopne 0x4085aa
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4085d9
add esp, dword [rax + 0x3004012]
sbb ecx, dword [rdi + rax]
or byte [rax + 0x3c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add al, ah
inc dword [rcx + 0x4000000]
jl 0x408576
add byte [rcx + 0xe], al
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x55
and byte [rdx], al
or cl, byte [r14]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rbx + rcx + 0x44], cl
or cl, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte fs:[rax], al
add byte [rax - 0x20], dl
cmp al, byte [rax]
add byte [rax], al
add al, 0x80
mov eax, dword [rax]
adc byte [rbx + 0xe0a5902], al
or byte [rsi + 0xb], al
or r9b, byte [r14]
or byte [rbx + 0xb], cl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add al, 2
add byte [rax], al
loopne 0x408652
push qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
add byte [rax - 0x20], bh
jge 0x40866e
add byte [rax], al
add al, 0x84
mov eax, dword [rax]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x55
and byte [rdx], al
push rdx
or cl, byte [rsi]
sbb byte [rsi + rcx + 0x10], al
or byte [rbp + 0xb], al
add byte [rax + rax], ch
add byte [rax], al
fadd qword [rax]
add byte [rax], al
enter -0x20, -1
mov es, word [rax]
add byte [rax], al
add al, 0x88
mov eax, dword [rax]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x50
and byte [rdx], al
pop rsi
or cl, byte [rsi]
sbb byte [rsi + rcx + 0x10], al
or byte [rbx + 0xb], cl
add byte [rax + rax], dh
add byte [rax], al
or al, 1
add byte [rax], al
sub cl, ah
call qword [rdi + 0x4000000]
mov word [rbx + 0xe410040], cs
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x50
and byte [rdx], al
pop rcx
or cl, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rbx + 0xb], cl
pop rsp
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rax + rax], al
add byte [rcx + rax], al
add byte [rax - 0x3400001f], dl
add byte [rax], al
add byte [rax + rdx*4], al
mov eax, dword [rax]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x44
and byte [rdx], al
xchg byte [rdx], cl
sbb byte [rsi + rcx + 0x10], al
or byte [rdi + 0xb], cl
or r9b, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rdx + 0xb], cl
push rsp
sbb byte [rsi + rcx + 0x10], al
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add al, byte [rax]
add byte [rax], bl
loop 0x40874a
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rbx + 0xe0a6202], al
or byte [rbp + 0xb], al
add al, byte [rdi + 0xe]
or byte [rax + rax], ch
add byte [rax], al
sbb al, 3
add byte [rax], al
js 0x40874c
dec dword [rbx]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x47
and byte [rbp + 0xa], ah
sbb byte [rsi + rcx + 0x10], al
or byte [rbp + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add r8, qword [rax]
add al, bh
xchg eax, ecx
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add eax, dword fs:[rax]
add al, dh
xchg eax, ecx
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
jl 0x4087c9
add byte [rax], al
call 0x2640875e
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add byte [rax], al
xchg eax, edx
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
lodsb al, byte [rsi]
add eax, dword [rax]
add byte [rax], bl
xchg eax, edx
inc dword [rax + rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, al
add eax, dword [rax]
add byte [rax], dl
xchg eax, edx
jmp rdi
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bb], es
cmp byte [rbx + 0x600e4707], al
add ebx, dword [rdx + 2]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdi + 0xb], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
adc dl, ah
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rbx + 0xe0a7602], al
or byte [rcx + 0xb], cl
or byte [rax], al
push rsp
add byte [rax], al
add ah, al
add al, byte [rax]
add byte [rax - 0x65000060], dl
sbb byte [rax], al
add byte [rsp + rdx*4], al
mov eax, dword [rax]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x7ff1bbf9], al
add dword [rbx], eax
and al, 0x16
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rsp + rax - 0x1e180000], cl
mov ebp, 1
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x400e4707], al
add edx, dword [rcx + rax + 0xa]
cmp byte [rsi + rcx + 0x30], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rax + rax]
add byte [rax - 0x1d], bl
dec dword [rdx]
add byte [rax], al
add byte [rsi + rcx + 0x10], al
je 0x408940
or byte [rax + 0xb], cl
or r9b, byte [rsi]
or byte [rcx + 0xb], al
add byte [rax], r8b
add ah, bh
add al, 0
add byte [rax + 0x34ffffe3], cl
or al, byte [rax]
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x600e4407], al
add esp, dword [rdi + 0x380e0a01]
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
sbb byte [rax + 0x841ffff], bh
add byte [rax], al
add al, 0xe0
mov eax, dword [rax]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx - 0x7ff1bbf9], al
add dword [rax], eax
xor al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
xor al, al
call qword [rcx]
sbb al, byte [rax]
add byte [rsp + rax], al
mov word [rax], es
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x4ff1bbf9], al
add dword [rax], eax
sbb al, 0
add byte [rax], al
mov esp, 0x8000005
in eax, dx
jmp qword [rdx]
add byte [rax], al
add byte [rsi + 0xe], al
adc byte [rbx + 0xe0a5002], al
or byte [rdx + 0xb], cl
jl 0x408a2c
or byte [rax], al
pop rsp
add byte [rax], al
add ah, bl
add eax, 0xed580000
push qword [rip + 2]
add ah, byte [rdx + 0xe]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b5], es
cmp byte [rbx + 0x400e4d07], al
add ebx, dword [rsi + 1]
cmp byte [rcx - 0x3d], al
xor byte [rcx - 0x3a], al
sub byte [rdx - 0x34], al
and byte [rdx - 0x33], al
sbb byte [rdx - 0x32], al
adc byte [rdx - 0x31], al
or byte [rsi + rcx + 0x40], al
add dword [rdi], -0x7a
mov word [rip + 0x38e048d], es
pop qword [rdx]
add byte [rax + rax], al
add ah, cl
add al, 0
add byte [rax], bh
out dx, eax
jmp qword [rbx + 0x4000002]
push rax
mov word [rax], es
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e41
push rax
add edx, dword [rcx + 0x300e0a01]
sub byte [rcx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbp + 0xb], al
xor al, 0
add byte [rax], al
adc al, 5
add byte [rax], al
xor byte [rax + 0x4f0ffff], cl
add byte [rax], al
add al, 0x78
mov word [rax], es
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rsi + 0xe]
and byte [rbx + 0x500e4404], al
add edi, dword [rbx + 4]
or cl, byte [rsi]
and byte [rcx + 0xe], al
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
adc al, 0
add byte [rax], al
mov esp, 0xe8000006
call qword [rdi]
adc byte [rdx], al
mov cs, word [rsi]
or byte [rax + rax], al
add ah, dl
add byte [rax], al
push rax
int1
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x408b5a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
sbb al, 7
add byte [rax], al
js 0x408b5b
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
clc
add esp, dword [rdx]
add byte [rax], al
ret 0x504
div byte [rax]
add byte [rbx - 0x1ef06ef9], al
xor byte [rax], al
lcall [rax]
mov al, byte [rbx]
add byte [rax], al
fcomp dword [rdx + rax]
loope 0x408be5
add byte [rcx + 0x21f], cl
mov edi, 0xe101b820
xor byte [rax], al
nop
and al, byte [rax + rax]
and al, 0x92
add ah, cl
xor byte [rax], al
fldcw word [rax]
loopne 0x408bd7
add byte [rax], al
fldcw word [rdi]
xor cl, ah
xor byte [rax], al
xchg eax, esp
xor byte [rsi - 0xffffff], al
inc dword [rcx]
and byte [rip + 0x5a000005], ch
add eax, 0xb5000fed
add al, 0x1d
xchg eax, edx
adc byte [rax], al
ret 0x505
add byte [rax], al
loop 0x408c05
call 0x511e02
lea edx, [rax]
sbb al, byte [rax]
add bh, bh
inc dword [rcx]
xor eax, 0x62000005
add eax, 0xc5003393
add al, 2
stosd dword [rdi], eax
xor al, byte [rax]
wait
add eax, 0x32c008b1
add dh, dl
add eax, 0x14a30000
add ch, byte [rbx + 0x17fe0032]
test al, 0xc
sal byte [rdx], 0
nop
add ch, byte es:[rbx + 0x26ec0032]
mov eax, 0x32c007
mov cl, 0x2f
add ch, byte [rbx + 0x30bb0032]
mov dword [rcx], eax
sal byte [rdx], 0
mov ebx, 0x7d32
add bh, bh
add esp, dword [rip + 0x5561b01]
add byte [rax], al
add dword [rcx], 0x104e405
iretd
add dword [rip - 0x20fcfb52], eax
add al, 5
mov byte [rip + 0x5059e00], al
add byte [rax], al
add dword [rax], eax
add byte [rbp], bh
add byte [rax], al
add bh, bh
inc dword [rcx]
sbb eax, 0x2f000005
add eax, 0x8c0009ad
add dword [rip + 0x19e0000], eax
add eax, 0xcd0009c0
add dh, dl
add dword [rax], eax
add byte [rdx + 0x9e60506], cl
add ah, bl
add eax, 0xe20009c2
xchg byte [rcx], al
out 9, al
add byte [rbp + 0x509], dl
mov ebx, 0x2b09
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x19], ah
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x19], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0
add byte [rax], al
add ah, ah
jl 0x408e93
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
lea esp, [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x40ef12
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 4
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 3], dl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x400b], ah
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rsi], bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
lea esp, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
adc byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
adc byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 0x10
add byte [rax], al
add byte [rax], al
add dh, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x10, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword es:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword ss:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], r8d
add byte [rax], al
add byte [rax], al
push rsi
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc word [rax], ax
add byte [rax], al
add byte [rax], al
jbe 0x40909b
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4011], al
add byte [rax], al
add byte [rsi + 0x4011], dl
add byte [rax], al
add byte [rsi + 0x4011], ah
add byte [rax], al
add byte [rsi + 0x4011], dh
add byte [rax], al
add dh, al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
out 0x11, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte es:[rax]
add byte [rax], al
add byte [rax], al
adc al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40911c
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4012], al
add byte [rax], al
add byte [rsi + 0x4012], dl
add byte [rax], al
add byte [rsi + 0x4012], ah
add byte [rax], al
add byte [rsi + 0x4012], dh
add byte [rax], al
add dh, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0x12, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4091d0
je 0x4091d9
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x4091e7
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x4091e4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002e000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rsi], bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
movabs al, byte [0x400b]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0x10], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
adc byte [rax], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x4012f000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
verr sp
jl 0x409343
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax], al
jge 0x40935b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax], bl
test byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, dword [rax]
jl 0x4092ed
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
fmul dword [rbp + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, 0x608de800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add al, dh
lea esp, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, bh
lea esp, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb byte [rax], al
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax - 0x6f], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax - 0x6f], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add al, dh
lea esp, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add al, byte [rax]
add al, al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x19], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax], ch
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x608de800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x19], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
fmul dword [rbp + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], dh
add byte [rax], dl
add byte [rax + 0x407e], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x407e], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add ah, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x7e], al
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdx], ch
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rsi + 1], al
add byte [rax], al
add dword [rax], eax
sbb eax, dword [rax]
movabs al, byte [0x100000000006092]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dl
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
js 0x40955d
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], ah
add byte [rax], al
add dword [rax], eax
add al, dh
lea esp, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], ch
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
rol byte [rdx + 0x40], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1000001], al
add byte [rcx], bl
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax + rax], dl
call 0x40f6da
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], ch
add byte [rax + rax], dl
fmul dword [rbp + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x1000001
add byte [rdi], dl
add al, bh
lea esp, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 9, eax
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
xchg rax, rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
add dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add ch, dl
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, dh
add byte [eax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add cl, ch
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x64], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 2], ah
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
test al, 0x81
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 2], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4065], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x6a], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword ds:[rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 3], dl
add byte [rax], al
and al, byte [rax]
add al, ah
imul eax, dword [rax], 0
mov eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rbx], eax
add byte [rax], al
adc al, byte [rax]
add al, ah
jl 0x4097c3
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000003], dl
add byte [rsi], cl
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x4097b3
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x4018], dl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000003], ch
add byte [rsi], cl
add byte [rax + 0x4068], dl
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add eax, dword [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], bl
add byte [rax], al
and al, byte [rax]
add al, al
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], bh
add byte [rax], al
add byte [rax + 0x12000004], cl
add byte [rsi], cl
add byte [rax], ah
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0xe, eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
add al, 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add al, 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add eax, 0x210000
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000005], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000007], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000005], ah
add byte [rsi], cl
add byte [rax + 0x4066], dh
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x4098e7
add byte [rax], al
and al, byte [rax]
add al, ah
add byte gs:[rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdi + 0x12000003], cl
add byte [rdi], cl
add ah, ah
jl 0x409943
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rsi], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x64], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rsi], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x22000006
add byte [rsi], cl
add byte [rax + 0x66], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x69], ah
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 7
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
loopne 0x409a40
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 7], dl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
adc byte [rax + 0x40], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x22000007
add byte [rsi], cl
add byte [rax + 0x406c], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, dword [rdi]
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
cmp byte [rax + 0x40], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x22000007
add byte [rsi], cl
add byte [rax], ah
add byte fs:[rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
or byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
or byte [rax], al
add byte [rcx], ah
add byte [rax], dl
add al, bh
add dword [rax], 0
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 8], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
or byte [rax], al
add byte [rcx], ah
add byte [rax], dl
add al, dh
jg 0x409af3
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12000008], ah
add byte [rax], al
add byte [rax + 0x11], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
or byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x66], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
or dword [rax], eax
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x7f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 9], dl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
nop
add dword [rax], 0
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or word [rax], ax
add byte [rcx], dl
add byte [rax], dl
add byte [rax], al
jge 0x409b83
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x409b5b
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
rol byte [rcx + 0x40], 1
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rcx], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x67], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rdx + 0x12000009], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x21000009], ch
add byte [rax], dl
add byte [rax], ch
add byte [rax], 0
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
or dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rdx + rdx*4 + 0x60], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
or dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
or dword [rax], eax
add byte [rax], dl
add byte [rdx], bl
add byte [rax - 0x6f], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0x4011], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
or al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x7f], ch
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
or al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add al, cl
jg 0x409c73
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
or al, byte [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax - 0x6e], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [r8]
add byte [rcx], ah
add byte [rax], dl
add byte [rax], dl
jg 0x409ca3
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], dl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, byte [rdx]
add byte [rax], al
and dword [rax], eax
sbb eax, dword [rax]
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x2200000a
add byte [rsi], cl
add al, al
jns 0x409ceb
add byte [rax], al
add byte [rax], al
add byte [rbx + 2], ah
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x6092], bl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
or eax, dword [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x80], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
or eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax - 0x6e], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xb], al
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
mov eax, 0x407f
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xb], dl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
and byte [rdi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, byte [rbx]
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
nop
add byte [rax], 0
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx + 0x2110000], bh
sbb al, byte [rax]
pop rax
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], al
add byte [rax], al
and al, byte [rax]
add al, dl
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xc], bh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
push rax
add dword [rax], 0
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
or al, 0
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax - 0x6f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
or al, 0
add byte [rcx], ah
add byte [rax], dl
add al, ah
jg 0x409e3b
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200000d], cl
add byte [rsi], cl
add byte [rax + 0x7c], dh
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x2100000d
add byte [rax], dl
add al, ah
add byte [rax], 0
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x409e5f
add byte [rax], al
and al, byte [rax]
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rip + 0x210000], 0x10
add byte [rax + 0x4080], dh
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x69], ah
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
rcl byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx], ah
add byte [rdx], ah
add byte [rsi], cl
add al, ah
add byte gs:[rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx + 0xe], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
ja 0x409f13
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1200000e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0xe, eax
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x4019], ah
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
add byte [rax], al
and al, byte [rax]
add al, dh
add byte [eax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rdi], al
sldt word [rax]
adc al, byte [rax]
add byte [rax + 0x4019], dh
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rbx], dl
sldt word [rax]
adc byte [rax], al
sbb eax, dword [rax]
pop rax
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor cl, byte [rdi]
add byte [rax], al
and dword [rax], eax
sbb eax, dword [rax]
mov eax, 0x6091
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [eax]
and dword [rax], eax
adc byte [rax], al
mov byte [rdi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000f], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2100000f], bl
add byte [rax], dl
add byte [rax + 0x7f], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2100000f], bh
add byte [rax], dl
add byte [rax + 0x407f], ch
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
sldt word [rax]
and al, byte [rax]
add byte [rax + 0x4068], dl
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx], bl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
add byte [rax + 0x40], al
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rip + 0x12000010], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000010], al
add byte [rsi], cl
add byte [rax], dh
add byte fs:[rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rcx + rax + 0x100000], ah
sbb eax, dword [rax]
test al, 0x92
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
adc dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
adc dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x4041], dh
add byte [rax], al
add byte [rcx + 8], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dl, byte [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x6a], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
adc dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x6092], dl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x11], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x40a11b
add byte [rax], al
and al, byte [rax]
add al, dl
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ah
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000011], ch
add byte [rsi], cl
add al, ah
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rcx], 0
add byte [rdx], ah
add byte [rsi], cl
add al, dl
add byte fs:[rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
adc dword [rax], eax
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x407f], bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
adc dword [rax], eax
add byte [rdx], ah
add byte [rax], al
add byte [rax + 0x12], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000012], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
add byte fs:[rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000012], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000012], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x406c], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
and al, byte [rax]
add al, al
add byte fs:[rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 0x10000013], al
add byte [rdx], bl
add byte [rax - 0x6f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000013], al
add byte [rax], al
add byte [rax + 0x4012], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000013], ch
add byte [rsi], cl
add al, al
jns 0x40a2a3
add byte [rax], al
add byte [rax], al
add byte [rbx + 2], ah
add byte [rax], al
add ah, ch
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4077], al
add byte [rax], al
add byte [rip + 2], dh
add byte [rax], al
add byte [rbx + 0x14], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x64], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x4019], dl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000014], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000014], ch
add byte [rsi], cl
add byte [rax + 0x4064], dh
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx + 0x110000], ah
sbb eax, dword [rax]
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000015], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x15], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4065], dh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rdx + 0x120000], bl
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
or eax, 0x120000
or eax, dword [rax]
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0x12000015]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x11000015], dh
add byte [rbx], bl
add byte [rax + 0x6092], cl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x40a422
jne 0x40a416
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40a3d6
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40a454
jb 0x40a45a
pop rdi
jne 0x40a463
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x40a45d
je 0x40a459
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40a479
jb 0x40a47f
pop rdi
jne 0x40a488
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40a48b
jns 0x40a47b
outsb dx, byte gs:[rsi]
je 0x40a492
jns 0x40a422
jb 0x40a486
insd dword [rdi], dx
pop rdi
jne 0x40a498
insd dword [rdi], dx
jns 0x40a42e
pop rdi
pop rdi
jb 0x40a494
insd dword [rdi], dx
pop rdi
jne 0x40a4a6
insd dword [rdi], dx
jns 0x40a49b
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40a4a6
jns 0x40a4a6
outsb dx, byte gs:[rsi]
je 0x40a4bd
jns 0x40a44d
jae 0x40a4be
jne 0x40a4c3
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
pop rdx
jae 0x40a4c3
je 0x40a4a2
jae 0x40a4c8
push 0x45
xor dword [rcx], edi
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor dword [rdx], esi
jae 0x40a4e7
je 0x40a4d4
jb 0x40a4eb
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x3931456a
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x72
push rdx
imul edx, dword [rbx + 0x30], 0x7645455f
jo 0x40a508
push rsp
pop rdi
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x40a552
pop rdi
pop r15
pop rdi
pop rdx
cmp byte [rbx + 0x65], dh
je 0x40a53f
imul esp, dword [rsp + rsi*2 + 0x68], 0x5a5f006a
push rbx
je 0x40a53f
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40a5ac
jns 0x40a5ac
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40a5bd
jns 0x40a5bd
jae 0x40a5d4
jb 0x40a5d7
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
xor dword [rax], esi
jb 0x40a5d4
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
push rsp
jae 0x40a5ef
jbe 0x40a57d
pop rdi
pop rdx
xor qword [rax], r14
jne 0x40a5f9
jo 0x40a5fc
je 0x40a5cf
imul ebp, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
je 0x40a5cd
jbe 0x40a5fe
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40a5d9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a618
movsxd rbx, dword [rdi + 0x73]
je 0x40a626
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a621
je 0x40a636
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40a616
xor byte [rdi + 0x5f], bl
je 0x40a651
jb 0x40a65a
ja 0x40a64c
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40a65b
pop rdi
jb 0x40a669
outsd dx, dword [rsi]
jb 0x40a64a
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x40a687
jo 0x40a68a
je 0x40a65b
jbe 0x40a683
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40a655
xor ebx, dword [rdi + 0x53]
jo 0x40a687
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40a693
pop rdi
jo 0x40a6a6
jb 0x40a693
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40a676
je 0x40a6aa
jb 0x40a6a9
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40a681
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40a6c8
push rax
jbe 0x40a6d9
jbe 0x40a6ab
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a6d8
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40a6f5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rdi + rbx*2], esi
pop r15
je 0x40a6f6
insb byte [rdi], dx
je 0x40a702
jb 0x40a6e4
push rdx
push r11
je 0x40a6dd
je 0x40a71f
jo 0x40a70d
pop rdi
imul ebp, dword [rsi + 0x66], 0x5a5f006f
push rbx
je 0x40a6e5
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40a709
cmp byte [rbp + 0x73], dl
je 0x40a709
jae 0x40a72e
push rbx
je 0x40a6fd
xor al, 0x64
jne 0x40a73f
je 0x40a734
insb byte [rdi], dx
je 0x40a740
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rbp + 0x65], ch
insd dword [rdi], dx
jae 0x40a750
je 0x40a72d
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40a736
je 0x40a76a
jb 0x40a769
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40a741
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40a788
push rax
jbe 0x40a799
jbe 0x40a76b
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rcx + 0x6e], r9
jo 0x40a7ba
je 0x40a78d
imul ebp, dword [rbp + 0x39], 0x6c6c6966
outsb dx, byte [rsi]
jo 0x40a7c8
je 0x40a79a
jbe 0x40a757
pop rdi
pop rdx
push rbx
je 0x40a78e
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40a7b2
xor dword [rax], esi
jne 0x40a7e2
jo 0x40a7e5
je 0x40a7b8
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40a7eb
je 0x40a7e0
insb byte [rdi], dx
je 0x40a7ec
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push rsi
push rbx
je 0x40a7d0
je 0x40a804
jb 0x40a803
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40a7db
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40a822
push rax
jbe 0x40a833
jbe 0x40a805
add byte [r15 + 0x5a], r11b
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x40a842
je 0x40a813
jbe 0x40a83b
movsxd rsp, dword [rbp + 0x34]
jb 0x40a83c
imul rax, qword fs:[r13 + 0x45], 0x3974534e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x40a844
je 0x40a824
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x40a87d
push rbx
je 0x40a847
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
xor al, 0x74
jns 0x40a899
push r10
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
xor dword [rcx], esi
ja 0x40a8a8
imul esi, dword [rbp + 0x41], 0x6577736e
jb 0x40a8a9
push rdx
push rbx
je 0x40a87d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a8bc
movsxd rbx, dword [rdi + 0x73]
je 0x40a8ca
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a8c5
je 0x40a8da
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5f], r11b
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40a8f4
jb 0x40a8f7
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40a8e9
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40a90a
jae 0x40a89a
pop rdi
pop rdx
push rbx
je 0x40a8d1
xor byte [rdi + 0x5f], bl
je 0x40a90c
jb 0x40a915
ja 0x40a907
jae 0x40a923
jae 0x40a920
insd dword [rdi], dx
pop rdi
jb 0x40a924
outsd dx, dword [rsi]
jb 0x40a91e
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rsp
push rsi
push rbx
je 0x40a8ff
xor ebx, dword [rdi + 0x53]
jo 0x40a931
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40a93d
pop rdi
jo 0x40a950
jb 0x40a93d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40a920
je 0x40a954
jb 0x40a953
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40a92b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40a972
push rax
jbe 0x40a983
jbe 0x40a955
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a982
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40a99f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x40a980
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x40a9c9
jo 0x40a9cc
je 0x40a9ac
je 0x40a9cd
imul ebp, dword [rsi + 0x67], 0x72773331
imul esi, dword [rbp + 0x54], 0x7665446f
imul esp, dword [rbx + 0x65], 0x5f006a45
pop rdi
jae 0x40a9e8
jb 0x40a9ec
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
xor dword [rdx], esi
jne 0x40aa07
jo 0x40aa0a
je 0x40a9ea
je 0x40aa0b
imul ebp, dword [rsi + 0x67], 0x76453144
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x40aa0e
je 0x40aa13
jb 0x40aa1c
ja 0x40a9ef
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40a9f9
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40aa1c
jbe 0x40aa4d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40aa28
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40aa67
movsxd rbx, dword [rdi + 0x73]
je 0x40aa75
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40aa70
je 0x40aa85
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rsi + 0x6f], ah
jo 0x40aa97
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6c5f5f00
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x40aac1
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40aa97
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40aabb
cmp dword [rcx + 0x6e], ecx
jo 0x40aaec
je 0x40aabf
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40aaf2
je 0x40aae7
insb byte [rdi], dx
je 0x40aaf3
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40aad5
je 0x40ab09
jb 0x40ab08
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40aae0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40ab27
push rax
jbe 0x40ab38
jbe 0x40ab0a
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x40ab04
xor dword [rdi + 0x4d], ebx
jne 0x40ab4c
js 0x40ab3a
jae 0x40ab44
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ab48
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40ab65
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rsp
xor qword [r8], rsi
jne 0x40ab7c
jo 0x40ab7f
je 0x40ab52
imul ebp, dword [rbp], 0x534e5a5f
je 0x40ab4c
jbe 0x40ab7d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40ab56
je 0x40ab8a
jb 0x40ab89
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x40abb0
jo 0x40abb3
je 0x40ab93
je 0x40abb4
imul ebp, dword [rsi + 0x67], 0x635f5f00
js 0x40abac
pop rdi
je 0x40abb4
js 0x40abba
je 0x40ab93
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40ab98
xor ebx, dword [rdi + 0x53]
jo 0x40abca
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40abd6
pop rdi
jo 0x40abe9
jb 0x40abd6
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40abb9
je 0x40abed
jb 0x40abec
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40abc4
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40ac0b
push rax
jbe 0x40ac1c
jbe 0x40abee
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ac1b
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40ac38
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor al, 0x77
outsd dx, dword [rsi]
jb 0x40ac48
jbe 0x40abdf
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x40ac5c
jo 0x40ac5f
je 0x40ac3f
je 0x40ac60
imul ebp, dword [rsi + 0x67], 0x65676600
je 0x40ac6a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40ac41
je 0x40ac75
jb 0x40ac74
xor dh, byte fs:[rax]
push 0x77647261
jb 0x40ac80
pop rdi
movsxd rbp, dword [rdi + 0x6e]
movsxd rsi, dword [rbp + 0x72]
jb 0x40ac89
outsb dx, byte [rsi]
movsxd rdi, dword [rcx + 0x45]
jbe 0x40ac6a
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rdi], esi
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x40acb7
jo 0x40acba
je 0x40ac8b
jbe 0x40acb3
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40ac8b
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x40ace0
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x40acc5
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40ace9
cmp dword [rcx + 0x6e], ecx
jo 0x40ad1a
je 0x40aced
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40ad20
je 0x40ad15
insb byte [rdi], dx
je 0x40ad21
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push r11
je 0x40acff
pop rdi
push rbx
jo 0x40ad32
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40ad3e
pop rdi
jae 0x40ad44
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ad48
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40ad65
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rsp
push rsi
cmp dword [rcx + 0x6e], ecx
jo 0x40ad7d
je 0x40ad50
imul ebp, dword [rbp], 0x5f4f495f
jae 0x40ad88
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rsp
push rsi
xor dword [rax], esi
jne 0x40ad9a
jo 0x40ad9d
je 0x40ad70
imul ebp, dword [rbp], 0x314e5a5f
xor byte [rdi + 0x75], cl
je 0x40ada7
jne 0x40adad
imul r13d, dword [rbp + r12*2 + 0x44], 0x764530
jae 0x40adb8
jb 0x40adb2
outsb dx, byte gs:[rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rbx
xor dword [rdx], esi
jne 0x40add3
jo 0x40add6
je 0x40adb6
je 0x40add7
imul ebp, dword [rsi + 0x67], 0x73657400
je 0x40adb7
outsb dx, byte [rsi]
js 0x40ad73
pop rdi
push r12
pop r15
jb 0x40addf
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x40adf4
pop rdi
jae 0x40ae0a
jb 0x40ae0d
add byte [rax + 0x74], dh
push 0x64616572
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x40ae0d
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rsi
push rbx
je 0x40adf4
je 0x40ae28
jb 0x40ae27
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40ae37
pop rdi
jae 0x40ae35
add byte [r15 + 0x5a], r11b
push rsp
cmp qword [r9 + 0x6e], rcx
jo 0x40ae50
je 0x40ae23
imul ebp, dword [rbp], 0x74736574
outsd dx, dword [rsi]
jne 0x40ae57
je 0x40adeb
pop rdi
pop rdx
push rsp
push r11
je 0x40ae23
xor dword [rdi + 0x4d], ebx
jne 0x40ae6b
js 0x40ae59
jae 0x40ae63
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ae67
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40ae84
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor dword [rdx], esi
jae 0x40ae89
je 0x40ae6a
insb byte [rdi], dx
imul ebp, dword [rbp + 0x69], 0x50726574
movsxd rax, dword [r8]
pop rdi
pop rdx
push rsp
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3731
movsxd rbp, dword [rcx + 0x73]
jae 0x40aeac
je 0x40aec8
jo 0x40aeb6
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40aea0
jbe 0x40aed1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40aeaa
je 0x40aede
jb 0x40aedd
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40aef7
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40af0f
push rdx
jbe 0x40af13
jbe 0x40aee7
jo 0x40aef4
push rsp
pop rdi
add byte [rcx + 0x6e], ch
jo 0x40af21
je 0x40aeae
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x40aeec
je 0x40af20
jb 0x40af1f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40aef7
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40af3e
push rax
jbe 0x40af4f
jbe 0x40af21
add byte [r9 + 0x6e], r13b
jo 0x40af59
je 0x40af33
jne 0x40af5c
js 0x40aeeb
pop rdi
pop rdx
push rsp
push rbx
cmp dword [rcx + 0x6e], ecx
jo 0x40af69
je 0x40af3c
imul ebp, dword [rbp], 0x53545a5f
push rbx
je 0x40af32
pop rdi
push rbx
jo 0x40af65
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40af71
pop rdi
jae 0x40af77
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40af7b
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40af98
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rsp
push rbx
je 0x40af70
je 0x40afa4
jb 0x40afa3
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40af7b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40afc2
push rax
jbe 0x40afd3
jbe 0x40afa5
add byte [r15 + 0x5f], r11b
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40afac
je 0x40afe0
jb 0x40afdf
xor al, 0x6a
outsd dx, dword [rsi]
imul ebp, dword [rsi + 0x45], 0x47404076
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x40afd0
je 0x40b004
jb 0x40b003
xor dword fs:[rip + 0x735f4d5f], esi
je 0x40b009
jb 0x40b01e
pop rdi
je 0x40b015
jb 0x40b014
push r11
je 0x40afe6
xor byte [rbx + 0x68], dh
jb 0x40b020
pop rdi
jo 0x40b033
jb 0x40b00a
push rbx
pop rdi
xor dword [rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40b037
pop rdi
jae 0x40b035
push r8
jbe 0x40b04c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
ja 0x40b05f
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [rip + 0x64634b5f], esi
jbe 0x40b044
jo 0x40b051
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b043
je 0x40b071
jb 0x40b07b
imul ebp, dword [rsi + 0x61], 0x40766574
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rsp
push r11
je 0x40b05b
xor ebx, dword [rdi + 0x53]
jo 0x40b08d
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40b099
pop rdi
jo 0x40b0ac
jb 0x40b099
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40b07c
je 0x40b0b0
jb 0x40b0af
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b087
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b0ce
push rax
jbe 0x40b0df
jbe 0x40b0b1
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b0de
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40b0fb
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5f], bl
jae 0x40b109
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rsp
push rbx
xor dword [rdx], esi
jne 0x40b11f
jo 0x40b122
je 0x40b0f3
jbe 0x40b11b
movsxd rsp, dword [rbp]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rsp
push rbx
push rbx
je 0x40b0fe
xor ebx, dword [rdi + 0x53]
jo 0x40b130
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40b13c
pop rdi
jo 0x40b14f
jb 0x40b13c
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40b11f
je 0x40b153
jb 0x40b152
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b12a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b171
push rax
jbe 0x40b182
jbe 0x40b154
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b181
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40b19e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x40b175
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b1b4
movsxd rbx, dword [rdi + 0x73]
je 0x40b1c2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b1bd
je 0x40b1d2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x40b1d2
jo 0x40b1b8
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x40b204
jo 0x40b207
je 0x40b1e7
je 0x40b208
imul ebp, dword [rsi + 0x67], 0x76453044
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x40b1d6
cmp dword [rdi + 0x53], ebx
jo 0x40b209
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x40b219
add byte [edi + 0x5a], bl
push rbx
je 0x40b1f6
je 0x40b22a
jb 0x40b229
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b201
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b248
push rax
jbe 0x40b259
jbe 0x40b22b
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jo 0x40b26a
jb 0x40b25c
pop rdi
jbe 0x40b263
jb 0x40b270
jne 0x40b25f
insb byte [rdi], dx
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x40b288
jo 0x40b28b
je 0x40b26b
je 0x40b28c
imul ebp, dword [rsi + 0x67], 0x76453244
add byte [rdi + 0x5a], bl
push rbx
je 0x40b259
pop rdi
push rbx
jo 0x40b28c
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40b298
pop rdi
jae 0x40b29e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b2a2
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40b2bf
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jb 0x40b2c4
insb byte [rdi], dx
jae 0x40b2c9
jbe 0x40b267
insd dword [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b2d3
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x65726600
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x375a5f00
jae 0x40b2f9
je 0x40b2dc
imul ebp, dword [rsp + rbp*2 + 0x63], 0x4e5a5f00
xor dword [rax], esi
jne 0x40b317
jo 0x40b31a
je 0x40b2ed
imul ebp, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
jae 0x40b319
je 0x40b2f8
jae 0x40b31e
push 0
pop rdi
pop rdi
jae 0x40b333
pop rdi
jae 0x40b337
jb 0x40b33a
add byte [rbx + 0x6c], ah
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3032
jae 0x40b35a
pop rdi
movsxd rbp, dword [rcx + 0x73]
jae 0x40b357
je 0x40b373
jo 0x40b361
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rsp
push rbx
je 0x40b34d
je 0x40b381
jb 0x40b380
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40b390
pop rdi
jae 0x40b38e
add byte [r15 + 0x5f], r11b
jae 0x40b3a3
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x40b385
je 0x40b3b9
jb 0x40b3b8
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40b3c8
pop rdi
jae 0x40b3c6
add byte [r15 + 0x5a], r11b
push rsp
xor qword [r9], rsi
outsb dx, byte [rsi]
jo 0x40b3e2
je 0x40b3b3
jbe 0x40b3db
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40b3ac
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40b3d0
xor dword [rax], esi
jne 0x40b400
jo 0x40b403
je 0x40b3d6
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40b409
je 0x40b3fe
insb byte [rdi], dx
je 0x40b40a
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rbp + 0x65], ch
insd dword [rdi], dx
movsxd rbp, dword [rbp + 0x70]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rbx
xor dword [rax], esi
jne 0x40b441
jo 0x40b444
je 0x40b417
imul ebp, dword [rbp], 0x534e5a5f
je 0x40b412
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b451
movsxd rbx, dword [rdi + 0x73]
je 0x40b45f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b45a
je 0x40b46f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
jo 0x40b481
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b462
xor ebx, dword [rdi + 0x53]
jo 0x40b494
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40b4a0
pop rdi
jo 0x40b4b3
jb 0x40b4a0
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40b483
je 0x40b4b7
jb 0x40b4b6
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b48e
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b4d5
push rax
jbe 0x40b4e6
jbe 0x40b4b8
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b4e5
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40b502
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
imul esi, dword fs:[rbx + 0x70], 0x4565736f
jbe 0x40b4aa
movsxd rbp, dword [rdi + rbp*2 + 0x73]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x375a5f00
insd dword [rdi], dx
js 0x40b519
jae 0x40b53c
jbe 0x40b4ca
pop rdi
pop rdx
push rbx
je 0x40b501
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40b525
cmp byte [rbp + 0x73], dl
je 0x40b525
jae 0x40b54a
push rbx
je 0x40b519
xor al, 0x64
jne 0x40b55b
je 0x40b550
insb byte [rdi], dx
je 0x40b55c
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x75], ch
je 0x40b576
jne 0x40b57c
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
ja 0x40b59c
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [rip + 0x64634b5f], esi
jbe 0x40b581
jo 0x40b58e
push rsp
pop rdi
add byte [rbx + 0x74], dh
jb 0x40b5ba
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x315a5f00
xor dh, byte [rbx + 0x65]
je 0x40b5ae
jb 0x40b5c5
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x5a5f006a
xor qword [rax], r14
jne 0x40b5e4
jo 0x40b5e7
je 0x40b5ba
imul ebp, dword [rbp + 0x31], 0x69727733
je 0x40b5e3
push rsp
outsd dx, dword [rsi]
jbe 0x40b5ed
movsxd rsp, dword [rbp + 0x45]
push 0
pop rdi
pop rdx
push rsp
push rbx
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x40b608
je 0x40b5d9
jbe 0x40b601
movsxd rsp, dword [rbp]
pop rdi
pop rdi
jo 0x40b613
push 0x64616572
pop rdi
imul esp, dword [rbp + 0x79], 0x5f
movsxd rsi, dword [rdx + 0x65]
je 0x40b614
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x635f5f00
js 0x40b623
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40b613
xor ebx, dword [rdi + 0x53]
jo 0x40b645
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40b651
pop rdi
jo 0x40b664
jb 0x40b651
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40b634
je 0x40b668
jb 0x40b667
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b63f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b686
push rax
jbe 0x40b697
jbe 0x40b669
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b696
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40b6b3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rsi + 0x77], ah
jb 0x40b6be
je 0x40b6bc
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x68747000
jb 0x40b6cf
pop rdi
insd dword [rdi], dx
jne 0x40b6e4
js 0x40b6d2
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40b6c1
jbe 0x40b6f2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40b6cb
je 0x40b6ff
jb 0x40b6fe
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40b6e0
xor ebx, dword [rdi + 0x53]
jo 0x40b712
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40b71e
pop rdi
jo 0x40b731
jb 0x40b71e
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40b701
je 0x40b735
jb 0x40b734
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b70c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b753
push rax
jbe 0x40b764
jbe 0x40b736
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b763
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40b780
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x40b796
jb 0x40b793
jns 0x40b76b
jbe 0x40b728
pop rdi
je 0x40b78f
add byte [rdi + 0x5f], bl
js 0x40b7ac
pop rdi
jo 0x40b79c
jb 0x40b7ac
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40b78c
jbe 0x40b7bd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40b796
je 0x40b7ca
jb 0x40b7c9
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40b7e3
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40b7fb
push r10
jbe 0x40b7ff
jbe 0x40b7d3
jo 0x40b7e0
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b7d0
jbe 0x40b801
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40b7dc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b81b
movsxd rbx, dword [rdi + 0x73]
je 0x40b829
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b824
je 0x40b839
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
pop rdi
pop r15
jne 0x40b854
je 0x40b849
jo 0x40b85d
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x40b865
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40b842
je 0x40b876
jb 0x40b875
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b84d
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b894
push rax
jbe 0x40b8a5
jbe 0x40b877
pop rdi
pop r15
jb 0x40b8af
outsb dx, byte [rsi]
jbe 0x40b83e
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40b8ac
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40b8bf
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40b88e
xor ebx, dword [rdi + 0x53]
jo 0x40b8c0
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40b8cc
pop rdi
jo 0x40b8df
jb 0x40b8cc
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40b8af
je 0x40b8e3
jb 0x40b8e2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40b8ba
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40b901
push rax
jbe 0x40b912
jbe 0x40b8e4
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b911
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40b92e
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
jae 0x40b94a
jb 0x40b918
xor eax, 0x31787863
xor dword [rax], eax
jo 0x40b953
push 0x64616572
pop rdi
insd dword [rdi], dx
jne 0x40b95c
js 0x40b94a
jne 0x40b95b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40b936
pop rdi
push rbx
jo 0x40b969
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40b975
pop rdi
jae 0x40b97b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b97f
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40b99c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x40b9b2
jb 0x40b9af
jns 0x40b987
jbe 0x40b944
insd dword [rdi], dx
imul ebp, dword [rsi], 0x756c6666
jae 0x40b9b7
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x676f6c00
jae 0x40b962
add byte [rsi], ch
jae 0x40b9df
insd dword [rdi], dx
je 0x40b9ca
add byte [rsi], ch
jae 0x40b9e2
jb 0x40b9e4
add byte [rsi], ch
jae 0x40b9de
jae 0x40b9ec
jb 0x40b9ee
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40b9ef
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40b9fd
outsb dx, byte cs:[esi]
jne 0x40b9cb
jne 0x40ba09
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40b9d9
push 0x687361
jns 0x40ba22
jae 0x40ba2f
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40ba2a
jae 0x40ba32
jb 0x40b9c0
outsb dx, byte cs:[esi]
jne 0x40b9f3
jbe 0x40ba2c
jb 0x40ba3c
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40ba00
jbe 0x40ba39
jb 0x40ba49
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40ba44
insb byte [rdi], dx
jns 0x40ba53
add byte [rsi], ch
jb 0x40ba4e
insb byte [rdi], dx
jo 0x40ba5a
je 0x40b9f0
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40ba29
outsd dx, dword [esi]
je 0x40b9ff
je 0x40ba67
js 0x40ba78
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40ba7d
je 0x40ba73
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40ba96
jo 0x40baaa
pop rdi
je 0x40ba9a
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40baa8
jns 0x40ba49
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40bac4
jns 0x40ba55
push 0x63
jb 0x40ba5a
jns 0x40bacc
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40bad6
je 0x40ba6c
je 0x40bad2
add byte [rsi], ch
jae 0x40bae9
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40ba80
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40bbd4
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 4], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword ds:[rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400b], ah
add byte [rax], al
add byte [rax + 0xb], ah
add byte [rax], al
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x40bcc2
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x40bcde
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add al, dl
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 3], dl
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4010], al
add byte [rax], al
add byte [rax + 0x10], al
add byte [rax], al
add byte [rax + 2], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loop 0x40be8b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
jl 0x40be93
add byte [rax], al
add byte [rax], al
add ah, ah
jl 0x40be5b
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x40bed3
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x40be9b
add byte [rax], al
add byte [rax], al
add al, al
add eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx + 0x40], 0
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
test byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax + rax], al
add byte [rdi + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx*4 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx*4], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
lea esp, [rax]
add byte [rax], al
add byte [rax], al
fmul dword [rbp]
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
lea esp, [rax]
add byte [rax], al
add byte [rax], al
call 0x40c06a
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
lea esp, [rax]
add byte [rax], al
add byte [rax], al
lea eax, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
lea esp, [rax]
add byte [rax], al
add byte [rax], al
clc
lea eax, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
pop qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add qword [rax], rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x6f], cl
add byte [rax], al
add byte [rax], al
add byte [rax - 0x6f], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rax - 0x6f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add qword [rax], rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x6f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x91], dl
add byte [rax], al
add byte [rax], bl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rip + 0x8000000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa3], ch
add byte [rax], al
add byte [rdx + 0x15], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
