xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6050f7
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x400e90
mov eax, 0
test rax, rax
je 0x400e90
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400ed8
mov eax, 0
test rax, rax
je 0x400ed8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x204219], 0
jne 0x400efa
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x204206], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400f10
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400f0b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 8], 1
mov ecx, 0x3b9aca07
mov rax, qword [rbp - 0x18]
cqo
idiv rcx
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x20], 0
jns 0x400f70
mov ecx, str.ll_powmod_ll__ll_
mov edx, 0x17
mov esi, str.sorted_code_control_apiapiapiad_apiapiapiad_1_1_B.cpp
mov edi, str.b__0
call sym.imp.__assert_fail
cmp qword [rbp - 0x20], 0
je 0x40102a
mov rax, qword [rbp - 0x20]
and eax, 1
test rax, rax
je 0x400fd4
mov rax, qword [rbp - 8]
imul rax, qword [rbp - 0x18]
mov rcx, rax
movabs rdx, 0x89705f3112a28fe5
mov rax, rcx
imul rdx
lea rax, [rdx + rcx]
sar rax, 0x1d
mov rdx, rax
mov rax, rcx
sar rax, 0x3f
sub rdx, rax
mov rax, rdx
mov qword [rbp - 8], rax
mov rax, qword [rbp - 8]
imul rax, rax, 0x3b9aca07
sub rcx, rax
mov rax, rcx
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x18]
imul rax, qword [rbp - 0x18]
mov rcx, rax
movabs rdx, 0x89705f3112a28fe5
mov rax, rcx
imul rdx
lea rax, [rdx + rcx]
sar rax, 0x1d
mov rdx, rax
mov rax, rcx
sar rax, 0x3f
sub rdx, rax
mov rax, rdx
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
imul rax, rax, 0x3b9aca07
sub rcx, rax
mov rax, rcx
mov qword [rbp - 0x18], rax
sar qword [rbp - 0x20], 1
jmp 0x400f70
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x88
mov qword [rbp - 0x78], rdi
mov dword [rbp - 0x7c], esi
mov dword [rbp - 0x80], edx
mov dword [rbp - 0x84], ecx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x401f14
mov dword [rbp - 0x20], 0
mov eax, dword [rbp - 0x7c]
movsxd rsi, eax
lea rcx, [rbp - 0x30]
lea rdx, [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::vector
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_int_::_allocator
mov eax, dword [rbp - 0x7c]
mov dword [rbp - 0x6c], eax
mov dword [rbp - 0x68], 0
mov eax, dword [rbp - 0x68]
cmp eax, dword [rbp - 0x80]
jge 0x4012c5
cmp dword [rbp - 0x6c], 0
jne 0x4011ba
mov dword [rbp - 0x64], 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x64]
setg al
test al, al
je 0x4012bc
mov eax, dword [rbp - 0x64]
movsxd rdx, eax
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, 1
je 0x401134
mov eax, dword [rbp - 0x64]
add eax, 1
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, 1
je 0x401134
mov eax, 1
jmp 0x401139
mov eax, 0
test al, al
je 0x4011b1
mov dword [rbp - 0x70], 1
mov eax, dword [rbp - 0x64]
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call 0x402088
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x402088
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator_int__
lea rdx, [rbp - 0x70]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::insert
jmp 0x4012bc
add dword [rbp - 0x64], 1
jmp 0x4010be
mov dword [rbp - 0x60], 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x60]
setg al
test al, al
je 0x4012b8
mov eax, dword [rbp - 0x60]
movsxd rdx, eax
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jne 0x401235
mov eax, dword [rbp - 0x60]
add eax, 1
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jne 0x401235
mov eax, 1
jmp 0x40123a
mov eax, 0
test al, al
je 0x4012af
mov dword [rbp - 0x70], 1
mov eax, dword [rbp - 0x60]
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call 0x402088
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x402088
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator_int__
lea rdx, [rbp - 0x70]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::insert
jmp 0x4012b8
add dword [rbp - 0x60], 1
jmp 0x4011c1
sub dword [rbp - 0x6c], 1
add dword [rbp - 0x68], 1
jmp 0x4010a1
mov dword [rbp - 0x5c], 0
mov eax, dword [rbp - 0x5c]
cmp eax, dword [rbp - 0x84]
jge 0x401527
cmp dword [rbp - 0x6c], 0
jne 0x4013e8
mov dword [rbp - 0x58], 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x58]
setg al
test al, al
je 0x4014ea
mov eax, dword [rbp - 0x58]
movsxd rdx, eax
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, 2
je 0x401362
mov eax, dword [rbp - 0x58]
add eax, 1
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, 2
je 0x401362
mov eax, 1
jmp 0x401367
mov eax, 0
test al, al
je 0x4013df
mov dword [rbp - 0x70], 2
mov eax, dword [rbp - 0x58]
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call 0x402088
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x402088
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator_int__
lea rdx, [rbp - 0x70]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::insert
jmp 0x4014ea
add dword [rbp - 0x58], 1
jmp 0x4012ec
mov dword [rbp - 0x54], 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x54]
setg al
test al, al
je 0x4014e6
mov eax, dword [rbp - 0x54]
movsxd rdx, eax
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jne 0x401463
mov eax, dword [rbp - 0x54]
add eax, 1
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jne 0x401463
mov eax, 1
jmp 0x401468
mov eax, 0
test al, al
je 0x4014dd
mov dword [rbp - 0x70], 2
mov eax, dword [rbp - 0x54]
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call 0x402088
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x402088
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator_int__
lea rdx, [rbp - 0x70]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::insert
jmp 0x4014e6
add dword [rbp - 0x54], 1
jmp 0x4013ef
sub dword [rbp - 0x6c], 1
add dword [rbp - 0x5c], 1
jmp 0x4012cc
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_int_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
mov rax, qword [rbp - 0x78]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401540
call sym.imp.__stack_chk_fail
add rsp, 0x88
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edx, dword [rip + 0x203bc8]
mov eax, dword [rip + 0x203bca]
cmp edx, eax
jg 0x401592
mov edx, dword [rip + 0x203bb4]
mov eax, dword [rip + 0x203bb6]
cmp edx, eax
jg 0x401592
mov edx, dword [rip + 0x203ba0]
mov eax, dword [rip + 0x203bae]
cmp edx, eax
jle 0x40159c
mov ebx, 0
jmp 0x401a6e
mov esi, 0x40352b
mov edi, obj.ret_abi:cxx11_
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov edx, dword [rip + 0x203b7f]
mov eax, dword [rip + 0x203b81]
cmp edx, eax
jne 0x401628
mov eax, dword [rip + 0x203b77]
test eax, eax
jle 0x401628
mov eax, dword [rip + 0x203b5d]
test eax, eax
jne 0x4015ed
mov eax, dword [rip + 0x203b57]
test eax, eax
jne 0x4015ed
mov eax, dword [rip + 0x203b55]
test eax, eax
jne 0x4015ed
mov eax, dword [rip + 0x203b53]
test eax, eax
je 0x4015f7
mov ebx, 0
jmp 0x401a6e
mov dword [rbp - 0x58], 0
mov eax, dword [rip + 0x203b34]
cmp dword [rbp - 0x58], eax
jge 0x40161e
mov esi, 0x40352c
mov edi, obj.ret_abi:cxx11_
call 0x400d10
add dword [rbp - 0x58], 1
jmp 0x4015fe
mov ebx, 1
jmp 0x401a6e
mov edx, dword [rip + 0x203afe]
mov eax, dword [rip + 0x203b00]
cmp edx, eax
jne 0x4016a5
mov eax, dword [rip + 0x203af6]
test eax, eax
jle 0x4016a5
mov eax, dword [rip + 0x203ae0]
test eax, eax
jne 0x40166a
mov eax, dword [rip + 0x203ade]
test eax, eax
jne 0x40166a
mov eax, dword [rip + 0x203adc]
test eax, eax
jne 0x40166a
mov eax, dword [rip + 0x203ad6]
test eax, eax
je 0x401674
mov ebx, 0
jmp 0x401a6e
mov dword [rbp - 0x54], 0
mov eax, dword [rip + 0x203aab]
cmp dword [rbp - 0x54], eax
jge 0x40169b
mov esi, 0x40352f
mov edi, obj.ret_abi:cxx11_
call 0x400d10
add dword [rbp - 0x54], 1
jmp 0x40167b
mov ebx, 1
jmp 0x401a6e
mov edx, dword [rip + 0x203a7d]
mov eax, dword [rip + 0x203a8b]
cmp edx, eax
jne 0x401722
mov eax, dword [rip + 0x203a81]
test eax, eax
jle 0x401722
mov eax, dword [rip + 0x203a67]
test eax, eax
jne 0x4016e7
mov eax, dword [rip + 0x203a61]
test eax, eax
jne 0x4016e7
mov eax, dword [rip + 0x203a5b]
test eax, eax
jne 0x4016e7
mov eax, dword [rip + 0x203a55]
test eax, eax
je 0x4016f1
mov ebx, 0
jmp 0x401a6e
mov dword [rbp - 0x50], 0
mov eax, dword [rip + 0x203a2a]
cmp dword [rbp - 0x50], eax
jge 0x401718
mov esi, 0x403532
mov edi, obj.ret_abi:cxx11_
call 0x400d10
add dword [rbp - 0x50], 1
jmp 0x4016f8
mov ebx, 1
jmp 0x401a6e
mov edx, dword [rip + 0x203a14]
mov eax, dword [rip + 0x2039fa]
sub edx, eax
mov eax, edx
mov dword [rip + 0x203a04], eax
mov edx, dword [rip + 0x2039f6]
mov eax, dword [rip + 0x2039e8]
sub edx, eax
mov eax, edx
mov dword [rip + 0x2039e6], eax
mov edx, dword [rip + 0x2039e4]
mov eax, dword [rip + 0x2039d6]
sub edx, eax
mov eax, edx
mov dword [rip + 0x2039d4], eax
mov edx, dword [rip + 0x2039ca]
mov eax, dword [rip + 0x2039c8]
add edx, eax
mov eax, dword [rip + 0x2039c4]
add eax, edx
mov dword [rbp - 0x34], eax
mov eax, dword [rip + 0x2039b1]
add eax, eax
cmp eax, dword [rbp - 0x34]
jg 0x4017a4
mov eax, dword [rip + 0x2039a8]
add eax, eax
cmp eax, dword [rbp - 0x34]
jg 0x4017a4
mov eax, dword [rip + 0x20399f]
add eax, eax
cmp eax, dword [rbp - 0x34]
jle 0x4017ae
mov ebx, 0
jmp 0x401a6e
mov eax, dword [rip + 0x203980]
mov dword [rip + 0x2039a6], eax
mov eax, dword [rip + 0x203978]
mov dword [rip + 0x20399e], eax
mov eax, dword [rip + 0x203970]
mov dword [rip + 0x203996], eax
mov byte [rip + 0x20396f], 0x52
mov byte [rip + 0x203969], 0x59
mov byte [rip + 0x203963], 0x42
mov dword [rbp - 0x4c], 0
cmp dword [rbp - 0x4c], 2
jg 0x40187e
mov eax, dword [rbp - 0x4c]
add eax, 1
mov dword [rbp - 0x48], eax
cmp dword [rbp - 0x48], 2
jg 0x401875
mov eax, dword [rbp - 0x4c]
cdqe
mov edx, dword [rax*4 + obj.cnt]
mov eax, dword [rbp - 0x48]
cdqe
mov eax, dword [rax*4 + obj.cnt]
cmp edx, eax
jge 0x40186f
mov eax, dword [rbp - 0x48]
cdqe
shl rax, 2
lea rdx, [rax + obj.cnt]
mov eax, dword [rbp - 0x4c]
cdqe
shl rax, 2
add rax, obj.cnt
mov rsi, rdx
mov rdi, rax
call sym.std::swap_int_
mov eax, dword [rbp - 0x48]
cdqe
lea rdx, [rax + obj.s]
mov eax, dword [rbp - 0x4c]
cdqe
add rax, obj.s
mov rsi, rdx
mov rdi, rax
call sym.std::swap_char_
add dword [rbp - 0x48], 1
jmp 0x401801
add dword [rbp - 0x4c], 1
jmp 0x4017ee
mov ecx, dword [rip + 0x2038e4]
mov edx, dword [rip + 0x2038da]
mov esi, dword [rip + 0x2038d0]
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.construct
mov eax, dword [rip + 0x20388a]
test eax, eax
sete al
mov byte [rbp - 0x5b], al
mov eax, dword [rip + 0x203880]
test eax, eax
sete al
mov byte [rbp - 0x5a], al
mov eax, dword [rip + 0x20386a]
test eax, eax
sete al
mov byte [rbp - 0x59], al
mov dword [rbp - 0x44], 0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x44]
setg al
test al, al
je 0x401a5d
mov eax, dword [rbp - 0x44]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cdqe
movzx eax, byte [rax + obj.s]
cmp al, 0x52
jne 0x40191d
movzx eax, byte [rbp - 0x5b]
xor eax, 1
test al, al
je 0x40191d
mov eax, 1
jmp 0x401922
mov eax, 0
test al, al
je 0x401951
mov dword [rbp - 0x40], 0
mov eax, dword [rip + 0x2037f9]
cmp dword [rbp - 0x40], eax
jge 0x40194d
mov esi, 0x40352f
mov edi, obj.ret_abi:cxx11_
call 0x400d10
add dword [rbp - 0x40], 1
jmp 0x40192d
mov byte [rbp - 0x5b], 1
mov eax, dword [rbp - 0x44]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cdqe
movzx eax, byte [rax + obj.s]
cmp al, 0x59
jne 0x401987
movzx eax, byte [rbp - 0x5a]
xor eax, 1
test al, al
je 0x401987
mov eax, 1
jmp 0x40198c
mov eax, 0
test al, al
je 0x4019bb
mov dword [rbp - 0x3c], 0
mov eax, dword [rip + 0x203793]
cmp dword [rbp - 0x3c], eax
jge 0x4019b7
mov esi, 0x40352c
mov edi, obj.ret_abi:cxx11_
call 0x400d10
add dword [rbp - 0x3c], 1
jmp 0x401997
mov byte [rbp - 0x5a], 1
mov eax, dword [rbp - 0x44]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cdqe
movzx eax, byte [rax + obj.s]
cmp al, 0x42
jne 0x4019f1
movzx eax, byte [rbp - 0x59]
xor eax, 1
test al, al
je 0x4019f1
mov eax, 1
jmp 0x4019f6
mov eax, 0
test al, al
je 0x401a25
mov dword [rbp - 0x38], 0
mov eax, dword [rip + 0x203721]
cmp dword [rbp - 0x38], eax
jge 0x401a21
mov esi, 0x403532
mov edi, obj.ret_abi:cxx11_
call 0x400d10
add dword [rbp - 0x38], 1
jmp 0x401a01
mov byte [rbp - 0x59], 1
mov eax, dword [rbp - 0x44]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cdqe
movzx eax, byte [rax + obj.s]
movsx eax, al
mov esi, eax
mov edi, obj.ret_abi:cxx11_
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add dword [rbp - 0x44], 1
jmp 0x4018cd
mov ebx, 1
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401aa0
jmp 0x401a9b
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x58
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
cmp dword [rbp - 4], 0x52
jne 0x401ac3
mov eax, dword [rip + 0x2036a6]
add eax, 1
mov dword [rip + 0x20369d], eax
cmp dword [rbp - 4], 0x4f
jne 0x401ae7
mov eax, dword [rip + 0x203691]
add eax, 1
mov dword [rip + 0x203688], eax
mov eax, dword [rip + 0x203686]
add eax, 1
mov dword [rip + 0x20367d], eax
cmp dword [rbp - 4], 0x59
jne 0x401afc
mov eax, dword [rip + 0x203671]
add eax, 1
mov dword [rip + 0x203668], eax
cmp dword [rbp - 4], 0x47
jne 0x401b20
mov eax, dword [rip + 0x20365c]
add eax, 1
mov dword [rip + 0x203653], eax
mov eax, dword [rip + 0x203651]
add eax, 1
mov dword [rip + 0x203648], eax
cmp dword [rbp - 4], 0x42
jne 0x401b35
mov eax, dword [rip + 0x20363c]
add eax, 1
mov dword [rip + 0x203633], eax
cmp dword [rbp - 4], 0x56
jne 0x401b59
mov eax, dword [rip + 0x203627]
add eax, 1
mov dword [rip + 0x20361e], eax
mov eax, dword [rip + 0x203610]
add eax, 1
mov dword [rip + 0x203607], eax
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov esi, obj._
mov edi, 0x403535
mov eax, 0
call sym.imp.scanf
mov eax, dword [rip + 0x2035a2]
test eax, eax
je 0x401ea8
mov esi, obj.n
mov edi, 0x403535
mov eax, 0
call sym.imp.scanf
sub rsp, 8
push obj.v
mov r9d, obj.b
mov r8d, obj.g
mov ecx, obj.y
mov edx, obj.o
mov esi, obj.r
mov edi, str._d_d_d_d_d_d
mov eax, 0
call sym.imp.scanf
add rsp, 0x10
mov eax, dword [rip + 0x20355d]
mov dword [rbp - 0x20], eax
mov eax, dword [rip + 0x203548]
mov dword [rbp - 0x1c], eax
mov eax, dword [rip + 0x20354f]
mov dword [rbp - 0x18], eax
mov eax, dword [rip + 0x20353a]
mov dword [rbp - 0x14], eax
mov eax, dword [rip + 0x203541]
mov dword [rbp - 0x10], eax
mov eax, dword [rip + 0x20352c]
mov dword [rbp - 0xc], eax
mov eax, dword [rip + 0x203533]
add eax, 1
mov dword [rip + 0x20352a], eax
mov eax, dword [rip + 0x203524]
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
call sym.gao
test eax, eax
sete al
test al, al
je 0x401c4a
mov edi, str.IMPOSSIBLE
call sym.imp.puts
jmp 0x401e94
mov edi, obj.ret_abi:cxx11_
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rdi, rax
call sym.imp.puts
mov edi, obj.ret_abi:cxx11_
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov edx, eax
mov eax, dword [rip + 0x2034b6]
cmp edx, eax
je 0x401c8b
mov ecx, str.int_main__
mov edx, 0x82
mov esi, str.sorted_code_control_apiapiapiad_apiapiapiad_1_1_B.cpp
mov edi, str.SZ_ret___n
call sym.imp.__assert_fail
mov dword [rbp - 8], 0
mov edi, obj.ret_abi:cxx11_
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 8]
setg al
test al, al
je 0x401d7f
mov eax, dword [rbp - 8]
cdqe
mov rsi, rax
mov edi, obj.ret_abi:cxx11_
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x52
sete al
test al, al
je 0x401ccc
sub dword [rbp - 0x20], 1
mov eax, dword [rbp - 8]
cdqe
mov rsi, rax
mov edi, obj.ret_abi:cxx11_
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x4f
sete al
test al, al
je 0x401cee
sub dword [rbp - 0x1c], 1
mov eax, dword [rbp - 8]
cdqe
mov rsi, rax
mov edi, obj.ret_abi:cxx11_
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x59
sete al
test al, al
je 0x401d10
sub dword [rbp - 0x18], 1
mov eax, dword [rbp - 8]
cdqe
mov rsi, rax
mov edi, obj.ret_abi:cxx11_
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x47
sete al
test al, al
je 0x401d32
sub dword [rbp - 0x14], 1
mov eax, dword [rbp - 8]
cdqe
mov rsi, rax
mov edi, obj.ret_abi:cxx11_
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x42
sete al
test al, al
je 0x401d54
sub dword [rbp - 0x10], 1
mov eax, dword [rbp - 8]
cdqe
mov rsi, rax
mov edi, obj.ret_abi:cxx11_
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x56
sete al
test al, al
je 0x401d76
sub dword [rbp - 0xc], 1
add dword [rbp - 8], 1
jmp 0x401c92
cmp dword [rbp - 0x20], 0
jne 0x401da3
cmp dword [rbp - 0x1c], 0
jne 0x401da3
cmp dword [rbp - 0x18], 0
jne 0x401da3
cmp dword [rbp - 0x14], 0
jne 0x401da3
cmp dword [rbp - 0x10], 0
jne 0x401da3
cmp dword [rbp - 0xc], 0
je 0x401dbc
mov ecx, str.int_main__
mov edx, 0x8b
mov esi, str.sorted_code_control_apiapiapiad_apiapiapiad_1_1_B.cpp
mov edi, str.rr__0__oo__0__yy__0__gg__0__bb__0__vv__0
call sym.imp.__assert_fail
mov dword [rbp - 4], 0
mov edi, obj.ret_abi:cxx11_
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 4]
setg al
test al, al
je 0x401e94
mov eax, dword [rbp - 4]
cdqe
mov rsi, rax
mov edi, obj.ret_abi:cxx11_
call 0x400df0
movzx eax, byte [rax]
mov byte [rbp - 0x22], al
mov eax, dword [rbp - 4]
add eax, 1
mov ecx, dword [rip + 0x203325]
cdq
idiv ecx
mov eax, edx
cdqe
mov rsi, rax
mov edi, obj.ret_abi:cxx11_
call 0x400df0
movzx eax, byte [rax]
mov byte [rbp - 0x21], al
mov dword [rip + 0x203345], 0
mov eax, dword [rip + 0x20333f]
mov dword [rip + 0x203335], eax
mov eax, dword [rip + 0x20332f]
mov dword [rip + 0x203325], eax
movsx eax, byte [rbp - 0x22]
mov edi, eax
call sym.add
movsx eax, byte [rbp - 0x21]
mov edi, eax
call sym.add
mov eax, dword [rip + 0x203309]
cmp eax, 1
jg 0x401e72
mov eax, dword [rip + 0x203302]
cmp eax, 1
jg 0x401e72
mov eax, dword [rip + 0x2032fb]
cmp eax, 1
jle 0x401e8b
mov ecx, str.int_main__
mov edx, 0x90
mov esi, str.sorted_code_control_apiapiapiad_apiapiapiad_1_1_B.cpp
mov edi, str.cnt_0___1__cnt_1___1__cnt_2___1
call sym.imp.__assert_fail
add dword [rbp - 4], 1
jmp 0x401dc3
mov eax, dword [rip + 0x203286]
sub eax, 1
mov dword [rip + 0x20327d], eax
jmp 0x401b78
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x401eea
cmp dword [rbp - 8], 0xffff
jne 0x401eea
mov edi, obj.ret_abi:cxx11_
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
mov edx, obj.__dso_handle
mov esi, obj.ret_abi:cxx11_
mov edi, sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_fill_initialize
jmp 0x401faf
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402086
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 2
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4020e8
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::emplace_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
lea rax, [rbp - 0xc]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4021c7
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_char__
movzx eax, byte [rax]
mov byte [rbp - 9], al
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x18]
mov byte [rax], dl
lea rax, [rbp - 9]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x20]
mov byte [rax], dl
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x402247
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_int_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_create_storage
jmp 0x4022d5
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_int__unsignedlong_int_int_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_int__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__intconst__int__std::vector_int_std::allocator_int___
mov qword [rbp - 0x20], rax
mov ebx, 0
mov rax, qword [rbp - 0x58]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x58]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x402480
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::end
mov qword [rbp - 0x50], rax
mov ebx, 1
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___intconst__int__std::vector_int_std::allocator_int___
test al, al
je 0x402480
mov eax, 1
jmp 0x402485
mov eax, 0
test bl, bl
test al, al
je 0x4024c7
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::forward_int_
mov rdx, rax
mov rax, qword [rbp - 0x58]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::construct_int_int_
mov rax, qword [rbp - 0x58]
mov rax, qword [rax + 8]
lea rdx, [rax + 4]
mov rax, qword [rbp - 0x58]
mov qword [rax + 8], rdx
jmp 0x402530
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::forward_int_
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::cbegin
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__intconst__std::vector_int_std::allocator_int___
mov r12, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rsi, r12
mov rdi, rax
call 0x402088
mov rcx, rax
mov rax, qword [rbp - 0x58]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_insert_aux_int_
mov rax, qword [rbp - 0x58]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x20]
shl rdx, 2
add rax, rdx
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x40]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x402571
call sym.imp.__stack_chk_fail
add rsp, 0x60
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_int_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402650
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_int__
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 2
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402738
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int_
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::construct_int_int_
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402801
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 2
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x402920
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
sub rax, 4
mov rdi, rax
call sym.std::move_int__
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::construct_int_int_
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
lea rdx, [rax + 4]
mov rax, qword [rbp - 0x48]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
lea r12, [rax - 4]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
lea rbx, [rax - 8]
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::move_backward_int__int__
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::operator_
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_int_
mov eax, dword [rax]
mov dword [rbx], eax
jmp 0x402b4f
mov rax, qword [rbp - 0x48]
mov edx, str.vector::_M_insert_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_check_len
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x40], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__int__std::vector_int_std::allocator_int___
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_allocate
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_int_
mov rsi, rax
mov rax, qword [rbp - 0x28]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x20]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x48]
mov rdx, rsi
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::construct_int_int_
mov qword [rbp - 0x38], 0
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rsi, qword [rax]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x20]
mov rcx, rbx
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_int__int__std::allocator_int__
mov qword [rbp - 0x38], rax
add qword [rbp - 0x38], 4
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov r12, rax
mov rax, qword [rbp - 0x48]
mov rbx, qword [rax + 8]
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rdx, qword [rbp - 0x38]
mov rcx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_int__int__std::allocator_int__
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x20]
mov qword [rax], rdx
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x38]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x30]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x20]
add rdx, rax
mov rax, qword [rbp - 0x48]
mov qword [rax + 0x10], rdx
jmp 0x402b4f
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x38], 0
jne 0x402afe
mov rax, qword [rbp - 0x28]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x20]
add rdx, rax
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::destroy_int_
jmp 0x402b20
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402b63
call sym.imp.__stack_chk_fail
add rsp, 0x50
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_int_.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x402bbe
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::allocate
jmp 0x402bc3
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_true_::__uninit_fill_n_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int_
mov ebx, dword [rax]
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 4
call 0x401f02
test rax, rax
je 0x402c7d
mov dword [rax], ebx
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_int__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_backward_a2_true_int__int__
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x402d61
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp rax, qword [rbp - 0x20]
ja 0x402dc1
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x402dcf
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::max_size
jmp 0x402dd3
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x402de7
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 2
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_int__std::move_iterator_int___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_int__std::move_iterator_int___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_int___int__int_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::destroy_int_
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_int__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_int__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_backward_a_true_int__int__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x402fef
mov rax, qword [rbp - 0x10]
jmp 0x402ff3
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_int__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40303b
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_int___int__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x4030ae
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 2
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_int__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_backward_true_true_std::random_access_iterator_tag_::__copy_move_b_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::max_size
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy_std::move_iterator_int___int__
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x3fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x403217
mov rax, qword [rbp - 0x18]
mov edx, dword [rbp - 0xc]
mov dword [rax], edx
sub qword [rbp - 8], 1
add qword [rbp - 0x18], 4
jmp 0x4031fb
mov rax, qword [rbp - 0x18]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x40327e
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rax, qword [rbp - 8]
shl rax, 2
neg rax
mov rcx, rax
mov rax, qword [rbp - 0x28]
add rcx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov rdi, rcx
call sym.imp.memmove
mov rax, qword [rbp - 8]
shl rax, 2
neg rax
mov rdx, rax
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_std::move_iterator_int___int__
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_int___
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_int___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_true_int__int__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base_std::move_iterator_int___true_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_int__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_int__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_true_int__int__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_iterator_int__::base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_true_true_std::random_access_iterator_tag_::__copy_m_int_
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x40342d
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201986]
push rbp
lea rbp, [rip + 0x20198e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x4034a6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x403490
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0x3b9a
add byte [rax], al
add byte [rax], al
jae 0x403561
jb str.rr__0__oo__0__yy__0__gg__0__bb__0__vv__0
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x403573
outsd dx, dword [rsi]
insb byte [rdi], dx
jo 0x403570
jo 0x403573
jo 0x403576
jo 0x40357c
jo 0x40357f
jo 0x403582
pop rdi
xor dword [rdi + 0x31], ebx
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdx + 0x3e], ah
cmp eax, 0x59000030
push rsi
add byte [rdx + 0x47], dl
add byte [rdx + 0x4f], al
add byte [rip + 0x64250064], ah
and eax, 0x25642564
and eax, 0x25642564
add byte fs:[rbx + 0x61], al
jae 0x4035ae
and byte [rbx], ah
and eax, 0x203a64
push r8
push r11
push rbx
add byte [r11 + 0x5a], r10b
push rbx
pop rdx
sub byte [rdx + 0x65], dh
je 0x40358b
cmp eax, 0x6e3d
add byte [rdx + 0x72], dh
jb 0x4035dc
cmp eax, 0x2626303d
outsd dx, dword [rsi]
outsd dx, dword [rsi]
cmp eax, 0x2626303d
jns 0x4035f1
cmp eax, 0x2626303d
cmp eax, 0x2626303d
cmp eax, 0x2626303d
jbe 0x403603
cmp eax, 0x303d
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rbp, dword [rsi + 0x74]
pop rbx
xor byte [rbp + 0x3c], bl
cmp eax, 0x63262631
outsb dx, byte [rsi]
je 0x403602
xor dword [rbp + 0x3c], ebx
cmp eax, 0x63262631
outsb dx, byte [rsi]
je 0x40360d
xor bl, byte [rbp + 0x3c]
cmp eax, 0x65760031
jbe 0x40361f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
imul ebp, dword [rsi + 0x73], 0x5f747265
jne 0x403645
add byte [rax], al
add byte [rsp + rbp*2 + 0x20], ch
insb byte [rdi], dx
insb byte [rdi], dx
and byte [rax + 0x6f], dh
ja 0x403644
outsd dx, dword [rsi]
sub byte fs:[rsp + rbp*2 + 0x2c], ch
and byte [rsp + rbp*2 + 0x29], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x6e], ch
imul ebp, dword [rsi + 0x74], 0x69616d20
outsb dx, byte [rsi]
sub byte [rcx], ch
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
add byte [rbx], al
add byte [rax], al
pop rdi
add byte [rax], al
add byte [rsi + rdx*8 + 0x34cffff], cl
add byte [rax], al
cmp al, 0xd8
lcall [rbx + rax]
add byte [rax], al
xor bl, cl
call qword [rbx + rax - 0x25c40000]
call rsp
add eax, dword [rax]
add byte [rsi - 0x21], dl
cld
add eax, dword [rax]
add byte [rbx + 0x24ffffe4], dh
add al, 0
add byte [rax - 0x1b], ch
inc dword [rsp + rax]
add byte [rbx + 0x24ffffe8], bh
sldt word [rax]
stc
call 0xf853645
add byte [rax], al
jmp 0x3b5364d
add byte [rax], al
and cl, ch
jmp qword [rsp + rax]
add byte [rcx + rbp*8], bh
inc dword [rsp + rax - 0x16a80000]
jmp qword [rsp + rax - 0x163e0000]
dec esp
add al, 0
add byte [rsi], al
push rsp
add al, 0
add byte [rdx + rbp*8], ch
call qword [rax - 0x15b40000]
push qword [rax - 0x156c0000]
call qword [rbp + rax]
add dh, dh
push qword [rbp + rax]
add byte [rdi], bl
jmp 0x40369a
call qword [rbp + rax - 0x14d20000]
push qword [rbp + rax - 0x149a0000]
call rsp
add eax, 0xebd50000
push rsp
add eax, 0xebe30000
call qword [rsi + rax]
add byte [rax], al
push rsi
in al, dx
push qword [rsi + rax]
add byte [rax], al
in al, dx
call qword [rsi + rax]
add byte [rsi - 0x14], ch
push qword [rsi + rax]
add byte [rdx - 0x6b000014], cl
add byte [rax], al
call 0xffffffffbd4036d1
add byte [rax], al
cmp ch, ch
jmp rsp
add byte [rax], al
sub ch, 0xff
inc dword [rdi + rax]
add byte [rax], al
mov gs, ebp
jmp qword [rdi + rax]
add byte [rax], al
mov eax, 0x44ffffed
add byte [rax], al
in eax, dx
jmp qword [rdi + rax]
add ah, ah
in eax, dx
inc dword [rdi + rax - 0x120e0000]
jmp qword [rdi + rax - 0x107a0000]
dec esp
add byte [rax], al
shr bh, 1
in al, dx
add byte [rax], al
sub dh, al
dec dword [rax + rcx]
add byte [rax], al
pop rdi
ljmp [rax + rcx]
add byte [rax], al
nop
dec dword [rax + rcx]
add byte [rsi + 0x6cfffff0], dh
or byte [rax], al
add dl, bh
dec dword [rax + rcx - 0xeba0000]
ljmp [rax + rcx - 0xe7e0000]
dec esp
or byte [rax], al
add byte [rcx + rsi*8 + 0x8ecffff], bh
add byte [rax], al
pslld mm7, mm7
dec dword [rcx + rcx]
add byte [rax], al
push rdx
ljmp [rcx + rcx]
add byte [rax], al
js 0x403777
call qword [rcx + rcx]
add byte [rsi + 0x74fffff5], bl
or dword [rax], eax
add cl, dl
cmc
call qword [rcx + rcx - 0xa010000]
push qword [rcx + rcx - 0x9d00000]
call rsp
or dword [rax], eax
add byte [rax - 0xa], al
push rsp
or dword [rax], eax
add byte [rsi - 0xa], cl
call qword [rdx + rcx]
add byte [rax], al
xchg eax, edx
idiv bh
push qword [rdx + rcx]
add byte [rax], al
scasd eax, dword [rdi]
idiv bh
call qword [rdx + rcx]
add ah, bh
idiv bh
jl 0x4037d8
add byte [rax], al
idiv edi
lcall [rdx + rcx - 0x8060000]
inc esp
or al, byte [rax]
add byte [rip - 0x1b000008], bh
or al, byte [rax]
add byte [rcx + 0xcfffff8], dl
or eax, dword [rax]
add byte [rax + 0x2cfffff8], bh
or eax, dword [rax]
add bh, al
clc
dec dword [rbx + rcx]
add dl, dh
clc
ljmp [rbx + rcx]
add byte [rip - 0x73000007], dl
or eax, dword [rax]
add byte [rdx - 7], al
ljmp [rbx + rcx - 0x6a40000]
dec esp
or eax, dword [rax]
add byte [rcx + rdi*8 + 0xbf4ffff], dh
add byte [rax], al
stc
call qword [rsp + rcx]
add byte [rax], al
add edx, edi
push qword [rsp + rcx]
add byte [rax], al
cli
call qword [rsp + rcx]
add byte [rdx - 6], bh
push qword [rsp + rcx]
add byte [rdx - 0x6b000006], cl
or al, 0
add ah, cl
cli
push qword [rsp + rcx - 0x4fc0000]
call rsp
or al, 0
add byte [rdx], dl
sti
push rsp
or al, 0
add byte [rbx + rdi*8], ch
call qword [rcx - 0x4a30000]
push qword [rcx - 0x4880000]
call qword [rbp + rcx]
add byte [rsi + 0x74fffffb], al
or eax, 0xfba00000
call qword [rbp + rcx - 0x42e0000]
push qword [rbp + rcx - 0x41a0000]
call rsp
or eax, 0xfc290000
push rsp
or eax, 0xfca10000
call qword [rsi + rcx]
add byte [rax], al
cld
push qword [rsi + rcx]
add byte [rax], al
sbb bh, ch
lcall [rsi + rcx]
add byte [rdi*8 + 0xe7cffff], dh
add byte [rax], al
std
jmp qword [rsi + rcx - 0x25a0000]
inc esp
add byte [rax], al
fdivr st(5)
jmp rsp
add byte [rax], al
jmp 0x54038e2
sldt word [rax]
pop rsp
jmp qword [rdi + rcx]
add ah, cl
ljmp [rdi + rcx + 0x140000]
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403917
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb ch, dl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403947
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp bl, dl
jmp qword [rax + 1]
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rdx + 0x12ffffe5], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rsi + 0xaffffd5], dl
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add eax, dword [rip + 0x8070c01]
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4039c9
add eax, eax
or eax, 0x1b030040
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
lcall [rdx]
add eax, 0xbc040000
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
or eax, 0x8070c05
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rdx - 0x25], dl
lcall [rbp + 5]
add byte [rax], al
add al, 0xd1
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
push rbx
add eax, 0x8070c
add byte [rax + rax], bl
add byte [rax], al
hlt
add byte [rax], al
add byte [rdi - 0x4a000020], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
adc al, 1
add byte [rax], al
sbb al, 0xe1
call qword [rbx + 3]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ecx, dword [rsi + 3]
or al, 7
or byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 1
add byte [rax], al
mov ah, 0xe4
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add dword [rax], eax
add byte [rax + 0x1bffffe4], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
add byte [rax], al
add byte [rsp + 0x6affff], ch
add byte [rax], al
add al, 0xe6
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 1
add byte [rax], al
out dx, al
in al, 0xff
inc dword [rax + rax]
add byte [rsi + rsi*8], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x403aeb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], eax
add byte [rdx], cl
in eax, 0xff
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 1
add byte [rax], al
adc ch, ah
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 2
add byte [rax], al
adc ch, ah
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 2
add byte [rax], al
cmp ch, ah
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add r8b, byte [rax]
add byte [rdx - 0x1b], bh
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rbx + 0xeffffe5], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
jb 0x403b97
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x403bcf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rdx + 0x6fffffe5], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, byte [rax]
add cl, bl
in eax, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 2
add byte [rax], al
in eax, 0xff
push qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 3
add byte [rax], al
sbb ah, dh
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
out 0xff, al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8d, dword [rax]
add dl, dh
in eax, 0xff
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 2
add byte [rax], al
out dx, al
in eax, 0xff
lcall [rsi]
add byte [rax], al
add al, 0xfa
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 3
add byte [rax], al
and al, 0xe6
call qword [rax]
add byte [rax], al
add al, 6
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 3
add byte [rax], al
out 0xff, al
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add eax, dword [rax]
add byte [rsi - 1], dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add eax, dword [rax]
add byte [rdx - 0x1a], ah
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
insb byte [rdi], dx
out 0xff, al
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 4
add byte [rax], al
push -0x1a
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add al, 0
add byte [rax - 0x1a], bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x403da2
add byte [rax], al
out 0xff, al
call qword [rcx + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], -0x78
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
add al, 0
add byte [rdx + 0x49ffffe7], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xdc000004
out 0xff, eax
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rax + rax]
add byte [rsi], dl
call 0x763e0d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jo 0x403e27
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add al, 0
add byte [rbx], ch
call 0x723e2d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 5
add byte [rax], al
cmp al, 0xe8
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 5
add byte [rax], al
call 0x843e6d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], bl
add byte [rax], al
pop rsp
add eax, 0xe8660000
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x403eab
add byte [rax], al
xchg eax, edx
call 0x7d3ead
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
pushfq
add eax, 0xe8ae0000
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x403ee7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xc8000005
call 0x943eed
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rip - 0x17050000]
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], ah
add byte [rax], al
jl 0x403f2b
add byte [rax], al
jmp 0x3673f2d
add byte [rax], al
add al, 0xc
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x1a
add ecx, dword [rdi + rax]
or byte [rax + rax], bl
add byte [rax], al
and al, 6
add byte [rax], al
sbb al, 0xec
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
and ch, ah
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
xor eax, 0x2effffec
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
test byte [rsi], al
add byte [rax], al
in al, dx
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
push rsp
in al, dx
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
in al, dx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 6
add byte [rax], al
xor ch, ah
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], bl
add byte [rax], al
add al, 7
add byte [rax], al
push rsi
in al, dx
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 7
add byte [rax], al
push rbx
in al, dx
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
js 0x404066
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
push -0x14
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x4040bb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
in eax, dx
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], ah
add byte [rax], al
mov ah, 7
add byte [rax], al
push rcx
in eax, dx
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rdi]
add byte [rax], al
jge 0x4040f7
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
test ch, ch
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 8
add byte [rax], al
jae 0x404137
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 8
add byte [rax], al
jle 0x404157
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or byte [rax], al
add byte [rcx + 0x2dffffed], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x4041ae
add byte [rax], al
mov gs, ebp
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pushfq
or byte [rax], al
add byte [rax + 0x58ffffed], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte [rax], al
add byte [rax + 0x22ffffed], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 8
add byte [rax], al
mov edx, 0x2bffffed
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 9
add byte [rax], al
in eax, dx
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 9
add byte [rax], al
in eax, dx
in eax, dx
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword [rax], r8d
add dh, bh
in eax, dx
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword fs:[rax], eax
add dh, ch
in eax, dx
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x4042af
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], cl
add byte [rax], al
adc dh, ch
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x4042cf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or dword [rax], eax
add byte [rax], ch
out dx, al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword [rax], eax
add byte [rsi], dl
out dx, al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 9
add byte [rax], al
adc dh, ch
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xa
add byte [rax], al
and esi, ebp
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xa
add byte [rax], al
sbb al, 0xee
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or r8b, byte [rax]
add byte [rdx], cl
out dx, al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, byte fs:[rax]
add byte [rsi + rbp*8], al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], cl
add byte [rax], al
out dx, al
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or al, byte [rax]
add byte [rdx], cl
out dx, al
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x4043ef
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, byte [rax]
add byte [rip + 0x78ffffee], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 0xa
add byte [rax], al
test esi, ebp
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0xb
add byte [rax], al
xchg eax, edx
out dx, al
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xb
add byte [rax], al
mov dh, 0xee
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or r8, qword [rax]
add byte [rax + 0x58ffffee], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x4044a9
add byte [rax], al
loopne 0x404490
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or eax, dword [rax]
add dl, bl
out dx, al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xb
add byte [rax], al
in al, dx
out dx, al
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, dword [rax]
add ch, bl
out dx, al
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
or eax, dword [rax]
add byte [rdi + 0x3effffd9], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40453f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xc
add byte [rax], al
lodsd eax, dword [rsi]
fcos
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rsp + rcx], dh
add byte [rax], al
out dx, al
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x40459a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
jl 0x4045b2
add byte [rax], al
sbb bh, ch
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
adc dword [rbx + 5], edx
ret
or dword [rax], eax
test dword [rdx], 0x9dd06b4
add al, bl
or dword [rdi], ebx
add byte [rax], al
inc dword [rcx]
adc dword [rsi + rsi*8 + 5], ebx
add byte [rax], al
clc
xchg eax, edx
add dh, byte [rdi + 0xacc000a]
add eax, 0xffff0000
add dword [rbx + rbp], ecx
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add bh, bh
add esp, dword [rip + 0x1b11b01]
jge 0x404615
add byte [rsi + 0x5854603], ah
add dword [rsp + rax - 0x4effffc6], edx
add eax, 0x5f645
test byte [rsi], al
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add ch, ch
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add ah, al
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 0x4005], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 9], ah
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx], ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi + 0x60], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400c], dl
add byte [rax], al
add byte [rsi + 0x400c], ah
add byte [rax], al
add byte [rsi + 0x400c], dh
add byte [rax], al
add dh, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
push rsi
or eax, 0x40
add byte [rax], al
or ax, 0x40
add byte [rax], al
add byte [rax], al
jbe 0x405097
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400d], al
add byte [rax], al
add byte [rsi + 0x400d], dl
add byte [rax], al
add byte [rsi + 0x400d], ah
add byte [rax], al
add byte [rsi + 0x400d], dh
add byte [rax], al
add dh, al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
out 0xd, al
add byte [rax], al
add byte [rax], al
add dh, dh
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x405168
je 0x405171
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40517f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40517c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 0x4005], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rdx], ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or dword [rax], eax
lock or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, byte [rax]
or byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
or byte [rax + rax*2], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x400e2000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add ah, al
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add al, dl
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add ah, dh
xor eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, byte [rax]
clc
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, dword [rax]
mov esp, 0x4045
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40b362
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x604df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add al, ah
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], al
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0xe], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400e], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax], al
push rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x604df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
call 0x40b4fa
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add al, ah
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add cl, ah
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add dl, ah
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add al, ch
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add al, dl
xor eax, 0x40
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rcx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
call 0x40958a
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add byte [rdi + 0x401e], ch
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 1], ah
add byte [rax], al
add al, byte [rax]
add ch, ch
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], bh
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
mov eax, 0x4045
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000001], cl
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], dl
add byte [rcx], dl
add ah, dh
xor eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosb byte [rdi], al
add dword [rax], eax
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
call 0x40b692
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x20000009], bh
add byte [rdx], bl
add al, ah
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
push rcx
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
add byte cs:[rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 2], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rdx], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], dh
add byte cs:[rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add dh, bl
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add bh, dl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
jb 0x405722
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add al, al
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
or dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rbp + 0x40], ch
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
and al, byte [rax]
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 3], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x2c], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rbx], eax
add byte [rax], al
and al, byte [rax]
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x20000003], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x20000003], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
and dword [rax], eax
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x22000004
add byte [rsi], cl
add byte [rsi + 0x28], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx + 4], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rax + rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x22], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000004], ch
add byte [rsi], cl
add byte [rbx + rbp + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000004], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, ch
add byte es:[rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add ah, bh
add al, byte [rax]
add byte [rdx], dl
add byte [rdi], cl
add ah, al
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add eax, 0x220000
add dl, cl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 5], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4033], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000005], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000005], ch
add byte [rsi], cl
add ch, dh
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
add eax, 0x220000
add byte [rsi + 0x22], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4023], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x25], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rsi], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x22], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x4059b3
add byte [rax], al
adc al, byte [rax]
add byte [rsi], ah
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax + 0x120000], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x402f], ch
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 7], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x401f], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x26], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000007], bl
add byte [rsi], cl
add byte [rax + 0x4027], dh
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x22000007
add byte [rsi], cl
add byte [rdx + 0x22], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi], bl
add byte es:[rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdi], dh
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x11000008], al
add byte [rax], dl
add al, dl
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x402c], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdx], al
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or al, 0
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x51], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x22000009
add byte [rsi], cl
add byte [rsi], cl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or word [rax], ax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x2c], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0x20000009]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x10000009], bh
add byte [rdx], bl
add al, ah
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0xd], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ecx, dword [rdx], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x2f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0x24000e002200000a]
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x25], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rbx], ecx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x31], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
and al, byte [rax]
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x22], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4020], cl
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
and byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rcx], dl
add bl, byte [rdx]
add al, dh
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x31], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xc], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x110000], al
sbb eax, dword [rax]
cmp byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0xc
add byte [rax], al
adc al, byte [rax]
add byte [rdx + 0x15], cl
add byte [rax], al
add byte [rax], al
add byte [rbp + 5], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x405d36
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
call 0x40bd85
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xc], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add al, cl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x40], ch
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rsi], al
or eax, 0x220000
add byte [rip + 0x4030], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xd], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x20], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
or eax, 0x220000
add al, bh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rcx + 0x220000], dl
add byte [rsi + rbp + 0x40], ch
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rbp + rcx + 0x120000], bh
add byte [rax + 0x34], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
or eax, 0x220000
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
or eax, 0x220000
add byte [rsi + 0x402c], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rax], bl
add byte [rax], al
and al, byte [rax]
add byte [rdi + rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000e], ah
add byte [rsi], cl
add byte [rbx + 0x40], ch
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rbx + 0xe], ah
add byte [rax], al
and al, byte [rax]
add dl, ch
and byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x405e70
add byte [rax], al
and al, byte [rax]
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rdi], ecx
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word cs:[rax]
and al, byte [rax]
add byte [rbx + 0x402e], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x401f], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xf], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x27], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000f], dh
add byte [rsi], cl
add byte [rdi + 0x401a], ah
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rbx + 0x2200000f], bh
add byte [rsi], cl
add byte [rsi + 0x27], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
sldt word [rax]
and al, byte [rax]
add byte [rsp + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
adc byte [rax], al
add byte [rax], dl
add byte [rbx], bl
add al, dh
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx], al
add byte [rdx], ah
add byte [rsi], cl
add ah, al
and eax, 0x40
add byte [rax], al
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x10], dh
add byte [rax], al
and al, byte [rax]
add byte [rbx + rbp + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000010], al
add byte [rsi], cl
add cl, cl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000010], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
sub eax, 0x40
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], dl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc qword [r8], r8
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x402e], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000011], al
add byte [rsi], cl
add byte [rax], ah
and byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
adc dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rcx + rdx*2], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
and al, 0x51
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
adc dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rsi + 0x40], dl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x11000012
add byte [rbx], bl
add byte [rcx + rdx*2], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
xor byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, bl
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add ah, cl
add dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add al, al
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x31], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
adc eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x13], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000013], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ch, al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add al, bl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4026], ch
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
adc eax, 0x220000
add ch, bl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x15], dh
add byte [rax], al
and al, byte [rax]
add dl, al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000015], ah
add byte [rsi], cl
add byte [rcx + rsi + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
adc eax, 0x220000
add byte [rdi + rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
adc eax, 0x220000
add byte [rip + 0x4032], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
add byte [rax], al
and al, byte [rax]
add bl, dh
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rsi], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x22], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x11000016], dh
add byte [rbx], bl
add byte [rax + 0x6051], ah
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
add byte [rax], al
and al, byte [rax]
add ah, cl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0x16
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
ror byte [rip + 0x40], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000017], cl
add byte [rsi], cl
add byte [rdx + 0x402b], dl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x30], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x17], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x17], dh
add byte [rax], al
and al, byte [rax]
add dh, al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0x20000e0022000017]
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add dh, ah
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], dh
sbb byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x18], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x28], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000018], bl
add byte [rsi], cl
add byte [rsi + 0x22], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x22000018
add byte [rsi], cl
add byte [rdx + 0x4033], bl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
sbb byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x21], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x12000019
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x19], bl
add byte [rax], al
and al, byte [rax]
add dh, ah
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000019], bh
add byte [rsi], cl
add byte [rsi + 0x30], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x1240647e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], dl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
and byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor bl, byte [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x402c], ah
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add cl, bl
add byte [rax], al
add byte [rcx], dl
add byte [rbx], bl
add byte [rcx + rdx*2], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4032], dl
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdi + 0x2200001a], ch
add byte [rsi], cl
add byte [rsi], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
sbb al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rip]
add byte [rax], al
std
sbb al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rbx + rbx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx + 3], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x120000
or eax, dword [rax]
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x22], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
sbb eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1b], dh
add byte [rax], al
and al, byte [rax]
add dh, ch
sub eax, 0x40
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add bh, cl
sbb eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ch
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr dword [rbx], 1
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x40662a
jne 0x40661e
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4065de
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40665c
jb 0x406662
pop rdi
jne 0x40666b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x406665
je 0x406661
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x406681
jb 0x406687
pop rdi
jne 0x406690
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x406693
jns 0x406683
outsb dx, byte gs:[rsi]
je 0x40669a
jns 0x40662a
jb 0x40668e
insd dword [rdi], dx
pop rdi
jne 0x4066a0
insd dword [rdi], dx
jns 0x406636
pop rdi
pop rdi
jb 0x40669c
insd dword [rdi], dx
pop rdi
jne 0x4066ae
insd dword [rdi], dx
jns 0x4066a3
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4066ae
jns 0x4066ae
outsb dx, byte gs:[rsi]
je 0x4066c5
jns 0x406655
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x4066ac
xor dword [rcx], edi
jo 0x4066cd
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4066e5
jb 0x4066e8
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x4066c7
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4066e6
jb 0x4066f1
add byte [rdi + 0x5a], bl
push rbx
je 0x4066dc
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
xor r13, qword [rbp + 0x6f]
add byte fs:[rdi + 0x5a], bl
pop rdx
jo 0x406715
ja 0x406715
outsd dx, dword [rsi]
js 0x406724
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x6d
imul ebp, dword [rsi + 0x45], 0x5f5f3931
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x40675e
je 0x406756
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x406764
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x40677a
jb 0x40677d
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x406792
pop rdi
pop r15
pop rdi
pop rdx
jo 0x406795
ja 0x406795
outsd dx, dword [rsi]
js 0x4067a4
add byte [rdi + 0x5f], bl
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4067dc
jns 0x4067dc
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4067ed
jns 0x4067ed
jae 0x406804
jb 0x406807
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x4067d3
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [r13 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40684d
jo 0x40683b
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406844
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40684d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406841
imul eax, dword [rbp + 0x31], 0x61656430
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x74535a5f
xor dh, byte [rax]
pop rdi
pop rdi
je 0x40687d
jb 0x406886
ja 0x406878
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x406887
pop rdi
jb 0x406895
outsd dx, dword [rsi]
jb 0x406876
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
jo 0x4068aa
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x406882
xor al, 0x5f
pop rdi
jne 0x4068c2
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x4068c9
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4068d0
push r8
imul edx, dword [rbx + 0x30], 0x4961535f
imul eax, dword [rbp + 0x45], 0x545f3054
pop rdi
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4068c7
jae 0x40690c
jo 0x4068e1
movsxd rax, dword [rbp + 0x76]
push rdx
push rsp
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40691b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406924
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406918
imul eax, dword [rbp + 0x43], 0x4b524531
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x406911
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406952
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406963
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40696c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406960
imul eax, dword [rbp + 0x39], 0x736e6f63
je 0x406992
jne 0x406985
je 0x40696d
imul ecx, dword [rdx + 0x69], 0x76454545
push rax
push rsp
pop rdi
jo 0x406980
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x406972
jbe 0x4069a3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4069cf
jb 0x4069d2
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x4069c4
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x4069e5
jae 0x406975
jo 0x4069ec
je 0x4069ec
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x4069c3
jbe 0x4069f4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
imul ebp, dword ss:[rsi + 0x73], 0x45747265
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406a0a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406a23
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x31], 0x4f45455f
imul eax, dword [rax], 0x534e5a5f
je 0x406a09
jbe 0x406a3a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbx], esi
pop rdi
pop r15
imul ebp, dword [rsi + 0x73], 0x5f747265
jne 0x406a68
imul rax, qword [r13 + 0x45], 0x394e7645
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x406a5e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406a77
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x31], 0x4445455f
jo 0x406a6f
push rsp
pop rdi
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x406a6a
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406aa0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406aa9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406a9d
imul eax, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x4b524531
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x406ae3
jb 0x406ae7
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x406ac2
jbe 0x406af3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor esp, dword [rbp + 0x6e]
jbe 0x406aa1
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x764532
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x406b1b
je 0x406b20
jb 0x406b29
ja 0x406afc
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x406b32
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406b4b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x406b63
jb 0x406b3f
imul edx, dword [rbx + 0x61], 0x45456949
xor al, 0x62
jae 0x406b68
jbe 0x406b06
pop rdi
pop rdx
push rbx
je 0x406b3d
xor byte [rdi + 0x49], bl
je 0x406b76
jb 0x406b72
jae 0x406b7c
push r11
je 0x406b4c
xor ebp, dword [rbp + 0x6f]
jbe 0x406b85
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x4c], 0x45453162
pop rdi
push rbx
pop rdi
jae 0x406b9f
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x406bbf
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x406b96
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x406bd4
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x406bdb
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x6f6d3331
jbe 0x406bf4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406c0d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406c16
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406c0a
imul eax, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
push rbx
je 0x406c05
pop rdi
jae 0x406c46
jb 0x406c43
jns 0x406c1f
push rax
imul ebp, dword [rcx + 0x45], 0x535f5476
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x406c20
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406c61
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x406c52
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406c93
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x406c76
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x406cac
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406cb6
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x406cda
js 0x406ce0
je 0x406cb9
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6e5a5f00
ja 0x406cf8
push rax
jbe 0x406c8e
pop rdi
pop rdx
push rbx
je 0x406ccb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406d0a
movsxd rbx, dword [rdi + 0x73]
je 0x406d18
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406d13
je 0x406d28
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x406d11
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push r11
je 0x406d17
jbe 0x406d48
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
cmp byte [rbp + 0x61], ch
js 0x406d53
jae 0x406d5f
jp 0x406d5d
jbe 0x406cfb
pop rdi
pop rdx
push rbx
je 0x406d37
jbe 0x406d68
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x406d4b
xor al, 0x5f
pop rdi
jne 0x406d8c
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
imul ebp, dword [rbp + 0x69], 0x5f544569
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push r11
je 0x406d8c
jbe 0x406dbd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
movsxd rsp, dword ss:[rdx + 0x65]
imul ebp, dword [esi + 0x45], 0x5a5f0076
push rbx
je 0x406da5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406de6
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x406d9c
pop rdi
push r12
pop r15
jb 0x406e0a
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x406def
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406e30
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x534e5a5f
je 0x406e24
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406e63
movsxd rbx, dword [rdi + 0x73]
je 0x406e71
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406e6c
je 0x406e81
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x49], bl
pop r15
jae 0x406eab
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x406e77
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406eb8
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x406ec3
push rsp
jo 0x406ec6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406eb6
jbe 0x406e73
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406edc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406ef5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x406f0e
jb 0x406eea
imul edx, dword [rbx + 0x61], 0x45456949
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
jae 0x406f17
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x406efb
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x406f0c
xor ebp, dword [rbp + 0x6f]
jbe 0x406f45
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x45], 0x3174534e
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x406f88
jo 0x406f76
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406f7f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406f88
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406f7c
imul eax, dword [rbp + 0x39], 0x736e6f63
je 0x406fae
jne 0x406fa1
je 0x406f89
imul ecx, dword [rcx + 0x69], 0x76454545
push rax
push rsp
pop rdi
jo 0x406f9c
push rsp
xor byte [rdi], bl
pop rdi
push r12
pop r15
jb 0x406fbd
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x406fd2
pop rdi
jae 0x406fe8
jb 0x406feb
add byte [rdi + 0x5a], bl
push rbx
je 0x406fb5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406ff4
movsxd rbx, dword [rdi + 0x73]
je 0x407002
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406ffd
je 0x407012
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40702b
movsxd rdi, dword [rax + 0x78]
jno 0x40701b
push rax
imul rdx, qword [r8 + 0x69], 0x76367453
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407065
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor dword [rdi + 0x45], ebx
push r10
push rbx
pop rdi
push r12
xor byte [rdi + 0x53], bl
cmp dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x407052
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x407087
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407091
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x407099
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x407087
xor bl, byte [rdi + 0x44]
jae 0x4070d0
jb 0x4070cd
jns 0x4070bf
jne 0x4070db
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x4070e4
jb 0x4070e1
jns 0x4070bd
push rax
imul eax, dword [rbp + 0x45], 0x535f5476
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4070b6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4070f7
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4070e8
xor ebp, dword [rbp + 0x6f]
jbe 0x407121
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x43], 0x30534532
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x407107
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407148
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407159
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x407162
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407156
imul eax, dword [rbp + 0x43], 0x764531
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40717e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407197
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x4071af
jb 0x40718b
imul edx, dword [rbx + 0x61], 0x45456949
jo 0x4071b8
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4071b8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4071d1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x4071ea
jb 0x4071c6
imul edx, dword [rbx + 0x61], 0x45456949
xor cl, byte [r9 + 0x50]
imul eax, dword [rbp + 0x45], 0x534e4b52
xor byte [rdi + 0x49], bl
push rsp
pop rdi
push rbx
pop rdi
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4071dd
xor byte [rdi + 0x5f], bl
jb 0x407217
pop rdi
jae 0x407216
insd dword [rdi], dx
push r11
cmp dword [rdi + 0x53], ebx
cmp byte [rdi + 0x45], bl
pop rdi
pop rdi
jbe 0x407225
insb byte [rdi], dx
jne 0x40722c
push r11
xor eax, 0x5f36455f
pop rdi
je 0x40724a
jo 0x407238
add byte [r15 + 0x5f], r11b
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40721a
xor ebp, dword [rbp + 0x6f]
jbe 0x407253
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x43], 0x30534531
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40723f
pop rdi
jae 0x407280
jb 0x40727d
jns 0x407259
push rax
imul eax, dword [rbp + 0x76], 0x31535f54
pop rdi
add byte [rdi + 0x5a], bl
xor esp, dword [rdi + 0x61]
outsd dx, dword [rsi]
jbe 0x407222
pop rdi
pop rdi
jae 0x407296
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x407267
xor bl, byte [rdi + 0x5f]
jne 0x4072a8
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor dword [rbp + 0x45], eax
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x69], 0x5f544545
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4072e1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4072fa
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x407312
jb 0x4072ee
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4072ed
xor bl, byte [rdi + 0x5f]
jne 0x40732e
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x407349
pop rdi
push r11
je 0x407307
xor ebp, dword [rbp + 0x6f]
jbe 0x407340
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x45695f31
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40733d
jbe 0x40736e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x40731e
pop rdi
pop rdx
push rbx
je 0x407355
xor byte [rdi + 0x49], bl
je 0x40738e
jb 0x40738a
jae 0x407394
push r8
imul ecx, dword [rdx + 0x30], 0x5f374545
push rbx
pop rdi
jae 0x4073a4
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4073ad
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4073b6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4073aa
imul eax, dword [rbp + 0x43], 0x4b524532
push rbx
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
imul rax, qword [r13 + 0x44], 0x764532
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4073f2
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40740b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x407424
jb 0x407400
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x764531
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40743e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407457
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x40746f
jb 0x40744b
imul edx, dword [rbx + 0x61], 0x45456949
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40747c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407495
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x4074ae
jb 0x40748a
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [r9 + 0x50], ecx
imul eax, dword [rbp + 0x45], 0x534e4b52
xor byte [rdi + 0x49], bl
push rsp
pop rdi
push rbx
pop rdi
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4074a1
xor byte [rdi + 0x5f], bl
jb 0x4074db
pop rdi
jae 0x4074da
insd dword [rdi], dx
push r11
cmp dword [rdi + 0x53], ebx
cmp byte [rdi + 0x45], bl
pop rdi
pop rdi
jbe 0x4074e9
insb byte [rdi], dx
jne 0x4074f0
push r11
xor eax, 0x5f36455f
pop rdi
je 0x40750e
jo 0x4074fc
add byte [r15 + 0x5a], r11b
push rbx
je 0x4074d7
jbe 0x407508
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rax], edi
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
imul rax, qword [r8], 0x6d6d656d
outsd dx, dword [rsi]
jbe 0x407535
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x407515
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40754e
je 0x407563
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x407548
jbe 0x407579
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40755c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407595
je 0x4075aa
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4075bd
jb 0x4075c0
movsxd rsi, dword [rcx + rcx*2 + 0x69]
imul rax, qword [rbp + 0x45], 0x53527645
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x4075ae
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor esp, dword [rcx + 0x64]
imul eax, dword fs:[rax], 0x534e5a5f
je 0x4075a2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4075db
je 0x4075f0
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x407603
jb 0x407606
movsxd rsi, dword [rcx + rcx*2 + 0x69]
imul rax, qword [r13 + 0x45], 0x53527645
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x4075f4
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x407613
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40762c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x407645
jb 0x407621
imul edx, dword [rbx + 0x61], 0x45456949
xor al, 0x62
jae 0x40764a
jbe 0x4075e8
pop rdi
pop rdi
jae 0x407660
pop rdi
jae 0x407664
jb 0x407667
add byte [rdi + 0x5a], bl
push rbx
je 0x40762b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40766c
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdi], esi
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40767f
pop rdi
jae 0x407691
outsd dx, dword [rsi]
jb 0x407681
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x43], 0x4b524532
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40766e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4076a3
push r10
movsxd rax, dword [rbp + 0x4f]
push rbx
je 0x407678
jb 0x4076af
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4076b3
pop rdi
jb 0x4076b6
jb 0x4076ba
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4076d0
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
jae 0x4076df
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x4076c0
jbe 0x4076f1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x4076e5
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40771a
push r10
imul eax, dword [rbp + 0x4f], 0x3174534e
jb 0x407726
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40772a
pop rdi
jb 0x40772d
jb 0x407731
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x407747
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x407719
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x407734
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40776d
je 0x407782
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
jae 0x407794
jb 0x407791
jns 0x40776d
imul eax, dword [rbp + 0x45], 0x30535276
pop rdi
push rax
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40776c
jbe 0x40779d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
imul edi, dword [rax + 0x45], 0x62006d
pop rdi
pop rdx
push r11
je 0x407789
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4077c8
movsxd rbx, dword [rdi + 0x73]
je 0x4077d6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4077d1
je 0x4077e6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4077d1
insd dword [rdi], dx
js 0x4077eb
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4077e5
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x407840
push r11
je 0x4077fc
xor ebp, dword [rbp + 0x6f]
jbe 0x407835
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x54455f31
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
jb 0x4077ef
pop rdi
pop rdx
push rbx
je 0x40782b
jbe 0x40785c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x6d]
push rdx
imul rdx, qword [r10 + 0x4b], 0x5f3053
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40787a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407893
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x4078ab
jb 0x407887
imul edx, dword [rbx + 0x61], 0x45456949
jbe 0x40784b
pop rdi
pop rdx
push rbx
je 0x407881
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
imul ebp, dword [rbp + 0x69], 0x5f394e45
pop rdi
outsb dx, byte [esi]
jne 0x4078c8
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4078b1
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x4078d6
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x4078f7
insb byte [rdi], dx
jne 0x4078fe
push r12
pop rdi
pop rdi
pop rdi
je 0x40791b
jo 0x407909
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4078e8
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407921
je 0x407936
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp byte [r13 + 0x61], r13b
js 0x407933
jae 0x40793f
jp 0x40793d
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407964
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x7453694b
jbe 0x407978
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407999
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x4079ac
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x4079c6
jo 0x4079b4
push r10
push r11
cmp dword [rdi + 0x53], ebx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40798f
pop rdi
pop rdi
je 0x4079cb
jb 0x4079d4
ja 0x4079c6
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4079b6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4079ef
je 0x407a04
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
imul ebp, dword [rbp], 0x74535a5f
outsw dx, word [rsi]
jb 0x407a32
jb 0x407a22
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x4079fa
jb 0x407a31
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407a35
pop rdi
jb 0x407a38
jb 0x407a3c
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x407a53
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407a4f
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x6950694b
push rbx
je 0x407a34
jbe 0x407a65
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
push rsp
insd dword [rdi], dx
imul esp, dword [rbx + 0x6c], 0x70667464
pop rdi
xor al, 0x62
jae 0x407a83
movsxd r13, dword [r12 + 0x74]
jo 0x407a56
pop rdi
xor al, 0x62
jae 0x407a91
push r10
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407aa8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor dword [rdi + 0x45], ebx
push r10
push rbx
cmp byte [rdi + 0x49], bl
push rsp
xor byte [rdi + 0x53], bl
pop r15
add byte [r15 + 0x5a], r11b
push r11
je 0x407a9c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407adb
movsxd rbx, dword [rdi + 0x73]
je 0x407ae9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407ae4
je 0x407af9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x74735f63
jb 0x407ae0
jbe 0x407add
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x407b02
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x407b38
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407b42
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x407b1b
jb 0x407b4d
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x407b6a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x407b64
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x407b6c
insd dword [rdi], dx
imul rax, qword [r13 + 0x45], 0x505f5450
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x407b5a
movsxd rbp, dword [rdi + 0x70]
jns 0x407b74
push rbx
je 0x407b5f
xor ebp, dword [rbp + 0x6f]
jbe 0x407b98
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x54455f31
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push r11
je 0x407b88
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407bc9
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x407bd4
push rsp
jo 0x407bd7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407bc7
jbe 0x407b84
pop rdi
pop rdx
push rbx
je 0x407bc0
jbe 0x407bf1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x6d], eax
push rdx
imul rdx, qword [r10 + 0x4b], 0x5f3053
pop rdi
pop rdx
push rbx
je 0x407bdd
xor byte [rdi + 0x5f], bl
movsxd rbp, dword [rdi + 0x70]
jns 0x407c12
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407c1c
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x407c24
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x407bfe
jb 0x407c30
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x407c4d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x407c47
xor dword [r11d], r14d
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x407c50
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407c5a
pop rdi
imul rax, qword [r13 + 0x45], 0x505f5450
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x407c41
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x407c6f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407cb0
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x407c66
pop rdi
pop rdx
xor esi, dword [rdx + 0x65]
je 0x407caf
xor eax, 0x31787863
xor dword [rax], eax
pop rdi
pop rdx
push r11
je 0x407cac
xor ebp, dword [rbp + 0x6f]
jbe 0x407ce5
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x34], 0x65736162
jbe 0x407c95
pop rdi
je 0x407cfc
add byte [rdi + 0x5f], bl
js 0x407d19
pop rdi
jo 0x407d09
jb 0x407d19
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x407cf4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407d35
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407d51
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x407d5a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407d4e
imul eax, dword [rbp + 0x37], 0x74736564
jb 0x407d7d
jns 0x407d59
imul eax, dword [rbp + 0x45], 0x5f545076
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x44], 0x764531
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x407d8f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x407d98
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407d8c
imul eax, dword [rbp + 0x38], 0x5f78616d
jae 0x407db5
jp 0x407db3
jbe 0x407d51
pop rdi
pop rdx
push rbx
je 0x407d88
xor bl, byte [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x407dbd
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407dc7
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x407dcf
pop rdi
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x407dc1
jbe 0x407df2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
insd dword [rdi], dx
jo 0x407e0a
movsxd rsp, dword [rbp + 0x49]
imul rax, qword [r13 + 0x45], 0x5f394e45
pop rdi
outsb dx, byte [esi]
jne 0x407e0e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407e27
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x31], 0x4e45455f
push rbx
xor al, 0x5f
push r8
imul rdx, qword [r11 + 0x31], 0x4445455f
jo 0x407e2c
push rsp
pop rdi
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x407e52
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x407e2f
jbe 0x407e60
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbx], esi
pop rdi
pop r15
imul ebp, dword [rsi + 0x73], 0x5f747265
jne 0x407e8e
imul rax, qword [rbp + 0x45], 0x394e7645
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x407e84
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407e9d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x31], 0x4445455f
jo 0x407e95
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x407e80
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407ec1
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x407ea4
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x407eda
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407ee4
pop rdi
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x407f07
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x407f1a
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x407eea
jae 0x407f2f
jo 0x407f04
imul eax, dword [rbp + 0x76], 0x535f5452
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x407f02
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407f41
movsxd rbx, dword [rdi + 0x73]
je 0x407f4f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407f4a
je 0x407f5f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x407f4b
jbe 0x407f7c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
insd dword [rdi], dx
jo 0x407f94
movsxd rsp, dword [rbp + 0x49]
imul rax, qword [rbp + 0x45], 0x5f394e45
pop rdi
outsb dx, byte [esi]
jne 0x407f98
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407fb1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x31], 0x4e45455f
push rbx
xor al, 0x5f
push r8
imul rdx, qword [r11 + 0x31], 0x4445455f
jo 0x407fb6
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407fd3
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x407fdc
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407fd0
imul eax, dword [rbp + 0x38], 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x407f98
pop rdi
pop rdx
push rbx
je 0x407fd5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408014
movsxd rbx, dword [rdi + 0x73]
je 0x408022
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40801d
je 0x408032
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x40801b
movsxd r8, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x408018
xor ebp, dword [rbp + 0x6f]
jbe 0x408051
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x408059
push r8
imul edx, dword [rbx + 0x30], 0x3054455f
pop rdi
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408040
xor byte [rdi + 0x5f], bl
jne 0x408081
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40809c
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40809d
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x4080b1
push r11
je 0x40806d
xor ebp, dword [rbp + 0x6f]
jbe 0x4080a6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x45455f33
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x408095
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [rbp + r12*2 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40810f
jo 0x4080fd
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x408119
jb 0x40811c
movsxd rsi, dword [rcx + rbp*2 + 0x69]
imul eax, dword [rax], 0x6e69616d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40811b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408124
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408118
imul eax, dword [rbp + 0x43], 0x764532
pop rdi
pop rdx
push rbx
je 0x408113
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408152
movsxd rbx, dword [rdi + 0x73]
je 0x408160
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40815b
je 0x408170
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40818b
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x36745369
jbe 0x40819e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4081bf
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x4081d2
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x4081ec
jo 0x4081da
push r10
push r11
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi], ch
movsxd rbp, dword [rsi + 0x74]
add byte [rax], al
jae 0x408202
insd dword [rdi], dx
je 0x4081ed
add byte [rsi], ch
jae 0x408205
jb 0x408207
add byte [rsi], ch
jae 0x408201
jae 0x40820f
jb 0x408211
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x408212
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x408220
outsb dx, byte cs:[esi]
jne 0x4081ee
jne 0x40822c
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x4081fc
push 0x687361
jns 0x408245
jae 0x408252
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40824d
jae 0x408255
jb 0x4081e3
outsb dx, byte cs:[esi]
jne 0x408216
jbe 0x40824f
jb 0x40825f
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x408223
jbe 0x40825c
jb 0x40826c
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x408267
insb byte [rdi], dx
jns 0x408276
add byte [rsi], ch
jb 0x408271
insb byte [rdi], dx
jo 0x40827d
je 0x408213
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40824c
outsd dx, dword [esi]
je 0x408222
je 0x40828a
js 0x40829b
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x4082a0
je 0x408296
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x4082b9
jo 0x4082cd
pop rdi
je 0x4082bd
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4082cb
jns 0x40826c
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x4082e7
jns 0x408278
push 0x63
jb 0x40827d
jns 0x4082ef
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x4082f9
je 0x40828f
je 0x4082f5
add byte [rsi], ch
jae 0x40830c
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4082a3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add eax, 0x40
add byte [rax], al
nop
add eax, 0
add byte [rax], al
xchg eax, edx
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
and cl, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock or dword [rax], eax
add byte [rax], al
add byte [rax], al
lock or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], al
add byte [rax], al
add byte [rax + 0xc], al
add byte [rax], al
add byte [rax + 1], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
xor al, 0x40
add byte [rax], al
add byte [rax], al
add ah, al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
xor al, 0x40
add byte [rax], al
add byte [rax], al
add al, dl
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
xor eax, 0x40
add byte [rax], al
hlt
xor eax, 0
add byte [rax], al
add al, 3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
clc
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rax*2 + 0x40], bh
add byte [rax], al
mov esp, 0x45
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add al, ch
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40890a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40898a
add byte [rax], al
add byte [rax], al
add al, ah
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add al, dh
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x65], dh
add byte [rax], al
add ch, dl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
