xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6040b7
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x400a80
mov eax, 0
test rax, rax
je 0x400a80
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400ac8
mov eax, 0
test rax, rax
je 0x400ac8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x2035e9], 0
jne 0x400aea
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x2035d6], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400b00
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400afb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 8], 1
mov ecx, 0x3b9aca07
mov rax, qword [rbp - 0x18]
cqo
idiv rcx
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x20], 0
jns 0x400b60
mov ecx, str.ll_powmod_ll__ll_
mov edx, 0x17
mov esi, str.sorted_code_control_apiapiapiad_apiapiapiad_1_0_B.cpp
mov edi, str.b__0
call sym.imp.__assert_fail
cmp qword [rbp - 0x20], 0
je 0x400c1a
mov rax, qword [rbp - 0x20]
and eax, 1
test rax, rax
je 0x400bc4
mov rax, qword [rbp - 8]
imul rax, qword [rbp - 0x18]
mov rcx, rax
movabs rdx, 0x89705f3112a28fe5
mov rax, rcx
imul rdx
lea rax, [rdx + rcx]
sar rax, 0x1d
mov rdx, rax
mov rax, rcx
sar rax, 0x3f
sub rdx, rax
mov rax, rdx
mov qword [rbp - 8], rax
mov rax, qword [rbp - 8]
imul rax, rax, 0x3b9aca07
sub rcx, rax
mov rax, rcx
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x18]
imul rax, qword [rbp - 0x18]
mov rcx, rax
movabs rdx, 0x89705f3112a28fe5
mov rax, rcx
imul rdx
lea rax, [rdx + rcx]
sar rax, 0x1d
mov rdx, rax
mov rax, rcx
sar rax, 0x3f
sub rdx, rax
mov rax, rdx
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
imul rax, rax, 0x3b9aca07
sub rcx, rax
mov rax, rcx
mov qword [rbp - 0x18], rax
sar qword [rbp - 0x20], 1
jmp 0x400b60
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x88
mov qword [rbp - 0x78], rdi
mov dword [rbp - 0x7c], esi
mov dword [rbp - 0x80], edx
mov dword [rbp - 0x84], ecx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x40176c
mov dword [rbp - 0x20], 0
mov eax, dword [rbp - 0x7c]
movsxd rsi, eax
lea rcx, [rbp - 0x30]
lea rdx, [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::vector
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_int_::_allocator
mov eax, dword [rbp - 0x7c]
mov dword [rbp - 0x6c], eax
mov dword [rbp - 0x68], 0
mov eax, dword [rbp - 0x68]
cmp eax, dword [rbp - 0x80]
jge 0x400eb5
cmp dword [rbp - 0x6c], 0
jne 0x400daa
mov dword [rbp - 0x64], 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x64]
setg al
test al, al
je 0x400eac
mov eax, dword [rbp - 0x64]
movsxd rdx, eax
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, 1
je 0x400d24
mov eax, dword [rbp - 0x64]
add eax, 1
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, 1
je 0x400d24
mov eax, 1
jmp 0x400d29
mov eax, 0
test al, al
je 0x400da1
mov dword [rbp - 0x70], 1
mov eax, dword [rbp - 0x64]
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call 0x4018e0
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x4018e0
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator_int__
lea rdx, [rbp - 0x70]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::insert
jmp 0x400eac
add dword [rbp - 0x64], 1
jmp 0x400cae
mov dword [rbp - 0x60], 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x60]
setg al
test al, al
je 0x400ea8
mov eax, dword [rbp - 0x60]
movsxd rdx, eax
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jne 0x400e25
mov eax, dword [rbp - 0x60]
add eax, 1
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jne 0x400e25
mov eax, 1
jmp 0x400e2a
mov eax, 0
test al, al
je 0x400e9f
mov dword [rbp - 0x70], 1
mov eax, dword [rbp - 0x60]
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call 0x4018e0
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x4018e0
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator_int__
lea rdx, [rbp - 0x70]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::insert
jmp 0x400ea8
add dword [rbp - 0x60], 1
jmp 0x400db1
sub dword [rbp - 0x6c], 1
add dword [rbp - 0x68], 1
jmp 0x400c91
mov dword [rbp - 0x5c], 0
mov eax, dword [rbp - 0x5c]
cmp eax, dword [rbp - 0x84]
jge 0x401117
cmp dword [rbp - 0x6c], 0
jne 0x400fd8
mov dword [rbp - 0x58], 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x58]
setg al
test al, al
je 0x4010da
mov eax, dword [rbp - 0x58]
movsxd rdx, eax
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, 2
je 0x400f52
mov eax, dword [rbp - 0x58]
add eax, 1
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, 2
je 0x400f52
mov eax, 1
jmp 0x400f57
mov eax, 0
test al, al
je 0x400fcf
mov dword [rbp - 0x70], 2
mov eax, dword [rbp - 0x58]
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call 0x4018e0
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x4018e0
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator_int__
lea rdx, [rbp - 0x70]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::insert
jmp 0x4010da
add dword [rbp - 0x58], 1
jmp 0x400edc
mov dword [rbp - 0x54], 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x54]
setg al
test al, al
je 0x4010d6
mov eax, dword [rbp - 0x54]
movsxd rdx, eax
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jne 0x401053
mov eax, dword [rbp - 0x54]
add eax, 1
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jne 0x401053
mov eax, 1
jmp 0x401058
mov eax, 0
test al, al
je 0x4010cd
mov dword [rbp - 0x70], 2
mov eax, dword [rbp - 0x54]
movsxd rbx, eax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rsi, rbx
mov rdi, rax
call 0x4018e0
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x4018e0
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator_int__
lea rdx, [rbp - 0x70]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x78]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::insert
jmp 0x4010d6
add dword [rbp - 0x54], 1
jmp 0x400fdf
sub dword [rbp - 0x6c], 1
add dword [rbp - 0x5c], 1
jmp 0x400ebc
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_int_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
mov rax, qword [rbp - 0x78]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401130
call sym.imp.__stack_chk_fail
add rsp, 0x88
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edx, dword [rip + 0x202f98]
mov eax, dword [rip + 0x202f9a]
cmp edx, eax
jg 0x401182
mov edx, dword [rip + 0x202f84]
mov eax, dword [rip + 0x202f86]
cmp edx, eax
jg 0x401182
mov edx, dword [rip + 0x202f70]
mov eax, dword [rip + 0x202f7e]
cmp edx, eax
jle 0x40118c
mov ebx, 0
jmp 0x40164a
mov edx, dword [rip + 0x202f5e]
mov eax, dword [rip + 0x202f60]
cmp edx, eax
jne 0x401209
mov eax, dword [rip + 0x202f56]
test eax, eax
jle 0x401209
mov eax, dword [rip + 0x202f3c]
test eax, eax
jne 0x4011ce
mov eax, dword [rip + 0x202f36]
test eax, eax
jne 0x4011ce
mov eax, dword [rip + 0x202f34]
test eax, eax
jne 0x4011ce
mov eax, dword [rip + 0x202f32]
test eax, eax
je 0x4011d8
mov ebx, 0
jmp 0x40164a
mov dword [rbp - 0x58], 0
mov eax, dword [rip + 0x202f13]
cmp dword [rbp - 0x58], eax
jge 0x4011ff
mov edi, 0x402d7b
mov eax, 0
call sym.imp.printf
add dword [rbp - 0x58], 1
jmp 0x4011df
mov ebx, 1
jmp 0x40164a
mov edx, dword [rip + 0x202edd]
mov eax, dword [rip + 0x202edf]
cmp edx, eax
jne 0x401286
mov eax, dword [rip + 0x202ed5]
test eax, eax
jle 0x401286
mov eax, dword [rip + 0x202ebf]
test eax, eax
jne 0x40124b
mov eax, dword [rip + 0x202ebd]
test eax, eax
jne 0x40124b
mov eax, dword [rip + 0x202ebb]
test eax, eax
jne 0x40124b
mov eax, dword [rip + 0x202eb5]
test eax, eax
je 0x401255
mov ebx, 0
jmp 0x40164a
mov dword [rbp - 0x54], 0
mov eax, dword [rip + 0x202e8a]
cmp dword [rbp - 0x54], eax
jge 0x40127c
mov edi, 0x402d7e
mov eax, 0
call sym.imp.printf
add dword [rbp - 0x54], 1
jmp 0x40125c
mov ebx, 1
jmp 0x40164a
mov edx, dword [rip + 0x202e5c]
mov eax, dword [rip + 0x202e6a]
cmp edx, eax
jne 0x401303
mov eax, dword [rip + 0x202e60]
test eax, eax
jle 0x401303
mov eax, dword [rip + 0x202e46]
test eax, eax
jne 0x4012c8
mov eax, dword [rip + 0x202e40]
test eax, eax
jne 0x4012c8
mov eax, dword [rip + 0x202e3a]
test eax, eax
jne 0x4012c8
mov eax, dword [rip + 0x202e34]
test eax, eax
je 0x4012d2
mov ebx, 0
jmp 0x40164a
mov dword [rbp - 0x50], 0
mov eax, dword [rip + 0x202e09]
cmp dword [rbp - 0x50], eax
jge 0x4012f9
mov edi, 0x402d81
mov eax, 0
call sym.imp.printf
add dword [rbp - 0x50], 1
jmp 0x4012d9
mov ebx, 1
jmp 0x40164a
mov edx, dword [rip + 0x202df3]
mov eax, dword [rip + 0x202dd9]
sub edx, eax
mov eax, edx
mov dword [rip + 0x202de3], eax
mov edx, dword [rip + 0x202dd5]
mov eax, dword [rip + 0x202dc7]
sub edx, eax
mov eax, edx
mov dword [rip + 0x202dc5], eax
mov edx, dword [rip + 0x202dc3]
mov eax, dword [rip + 0x202db5]
sub edx, eax
mov eax, edx
mov dword [rip + 0x202db3], eax
mov edx, dword [rip + 0x202da9]
mov eax, dword [rip + 0x202da7]
add edx, eax
mov eax, dword [rip + 0x202da3]
add eax, edx
mov dword [rbp - 0x34], eax
mov eax, dword [rip + 0x202d90]
add eax, eax
cmp eax, dword [rbp - 0x34]
jg 0x401385
mov eax, dword [rip + 0x202d87]
add eax, eax
cmp eax, dword [rbp - 0x34]
jg 0x401385
mov eax, dword [rip + 0x202d7e]
add eax, eax
cmp eax, dword [rbp - 0x34]
jle 0x40138f
mov ebx, 0
jmp 0x40164a
mov eax, dword [rip + 0x202d5f]
mov dword [rip + 0x202d85], eax
mov eax, dword [rip + 0x202d57]
mov dword [rip + 0x202d7d], eax
mov eax, dword [rip + 0x202d4f]
mov dword [rip + 0x202d75], eax
mov byte [rip + 0x202d4e], 0x52
mov byte [rip + 0x202d48], 0x59
mov byte [rip + 0x202d42], 0x42
mov dword [rbp - 0x4c], 0
cmp dword [rbp - 0x4c], 2
jg 0x40145f
mov eax, dword [rbp - 0x4c]
add eax, 1
mov dword [rbp - 0x48], eax
cmp dword [rbp - 0x48], 2
jg 0x401456
mov eax, dword [rbp - 0x4c]
cdqe
mov edx, dword [rax*4 + obj.cnt]
mov eax, dword [rbp - 0x48]
cdqe
mov eax, dword [rax*4 + obj.cnt]
cmp edx, eax
jge 0x401450
mov eax, dword [rbp - 0x48]
cdqe
shl rax, 2
lea rdx, [rax + obj.cnt]
mov eax, dword [rbp - 0x4c]
cdqe
shl rax, 2
add rax, obj.cnt
mov rsi, rdx
mov rdi, rax
call sym.std::swap_int_
mov eax, dword [rbp - 0x48]
cdqe
lea rdx, [rax + obj.s]
mov eax, dword [rbp - 0x4c]
cdqe
add rax, obj.s
mov rsi, rdx
mov rdi, rax
call sym.std::swap_char_
add dword [rbp - 0x48], 1
jmp 0x4013e2
add dword [rbp - 0x4c], 1
jmp 0x4013cf
mov ecx, dword [rip + 0x202cc3]
mov edx, dword [rip + 0x202cb9]
mov esi, dword [rip + 0x202caf]
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.construct
mov eax, dword [rip + 0x202c69]
test eax, eax
sete al
mov byte [rbp - 0x5b], al
mov eax, dword [rip + 0x202c5f]
test eax, eax
sete al
mov byte [rbp - 0x5a], al
mov eax, dword [rip + 0x202c49]
test eax, eax
sete al
mov byte [rbp - 0x59], al
mov dword [rbp - 0x44], 0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp eax, dword [rbp - 0x44]
setg al
test al, al
je 0x401639
mov eax, dword [rbp - 0x44]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cdqe
movzx eax, byte [rax + obj.s]
cmp al, 0x52
jne 0x4014fe
movzx eax, byte [rbp - 0x5b]
xor eax, 1
test al, al
je 0x4014fe
mov eax, 1
jmp 0x401503
mov eax, 0
test al, al
je 0x401532
mov dword [rbp - 0x40], 0
mov eax, dword [rip + 0x202bd8]
cmp dword [rbp - 0x40], eax
jge 0x40152e
mov edi, 0x402d7e
mov eax, 0
call sym.imp.printf
add dword [rbp - 0x40], 1
jmp 0x40150e
mov byte [rbp - 0x5b], 1
mov eax, dword [rbp - 0x44]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cdqe
movzx eax, byte [rax + obj.s]
cmp al, 0x59
jne 0x401568
movzx eax, byte [rbp - 0x5a]
xor eax, 1
test al, al
je 0x401568
mov eax, 1
jmp 0x40156d
mov eax, 0
test al, al
je 0x40159c
mov dword [rbp - 0x3c], 0
mov eax, dword [rip + 0x202b72]
cmp dword [rbp - 0x3c], eax
jge 0x401598
mov edi, 0x402d7b
mov eax, 0
call sym.imp.printf
add dword [rbp - 0x3c], 1
jmp 0x401578
mov byte [rbp - 0x5a], 1
mov eax, dword [rbp - 0x44]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cdqe
movzx eax, byte [rax + obj.s]
cmp al, 0x42
jne 0x4015d2
movzx eax, byte [rbp - 0x59]
xor eax, 1
test al, al
je 0x4015d2
mov eax, 1
jmp 0x4015d7
mov eax, 0
test al, al
je 0x401606
mov dword [rbp - 0x38], 0
mov eax, dword [rip + 0x202b00]
cmp dword [rbp - 0x38], eax
jge 0x401602
mov edi, 0x402d81
mov eax, 0
call sym.imp.printf
add dword [rbp - 0x38], 1
jmp 0x4015e2
mov byte [rbp - 0x59], 1
mov eax, dword [rbp - 0x44]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cdqe
movzx eax, byte [rax + obj.s]
movsx eax, al
mov edi, eax
call sym.imp.putchar
add dword [rbp - 0x44], 1
jmp 0x4014ae
mov ebx, 1
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x40167c
jmp 0x401677
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x58
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov esi, obj._
mov edi, 0x402d84
mov eax, 0
call sym.imp.scanf
mov eax, dword [rip + 0x202a3f]
test eax, eax
je 0x401752
mov esi, obj.n
mov edi, 0x402d84
mov eax, 0
call sym.imp.scanf
sub rsp, 8
push obj.v
mov r9d, obj.b
mov r8d, obj.g
mov ecx, obj.y
mov edx, obj.o
mov esi, obj.r
mov edi, str._d_d_d_d_d_d
mov eax, 0
call sym.imp.scanf
add rsp, 0x10
mov eax, dword [rip + 0x202a06]
add eax, 1
mov dword [rip + 0x2029fd], eax
mov eax, dword [rip + 0x2029f7]
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
call sym.gao
test eax, eax
sete al
test al, al
je 0x401734
mov edi, str.IMPOSSIBLE
call sym.imp.puts
jmp 0x40173e
mov edi, 0x402daa
call sym.imp.puts
mov eax, dword [rip + 0x20299c]
sub eax, 1
mov dword [rip + 0x202993], eax
jmp 0x40169b
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_fill_initialize
jmp 0x401807
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4018de
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 2
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x401940
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::emplace_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
lea rax, [rbp - 0xc]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401a1f
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_char__
movzx eax, byte [rax]
mov byte [rbp - 9], al
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x18]
mov byte [rax], dl
lea rax, [rbp - 9]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x20]
mov byte [rax], dl
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401a9f
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_int_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_create_storage
jmp 0x401b2d
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_int__unsignedlong_int_int_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_int__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__intconst__int__std::vector_int_std::allocator_int___
mov qword [rbp - 0x20], rax
mov ebx, 0
mov rax, qword [rbp - 0x58]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x58]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x401cd8
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::end
mov qword [rbp - 0x50], rax
mov ebx, 1
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___intconst__int__std::vector_int_std::allocator_int___
test al, al
je 0x401cd8
mov eax, 1
jmp 0x401cdd
mov eax, 0
test bl, bl
test al, al
je 0x401d1f
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::forward_int_
mov rdx, rax
mov rax, qword [rbp - 0x58]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::construct_int_int_
mov rax, qword [rbp - 0x58]
mov rax, qword [rax + 8]
lea rdx, [rax + 4]
mov rax, qword [rbp - 0x58]
mov qword [rax + 8], rdx
jmp 0x401d88
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::forward_int_
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::cbegin
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__intconst__std::vector_int_std::allocator_int___
mov r12, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rsi, r12
mov rdi, rax
call 0x4018e0
mov rcx, rax
mov rax, qword [rbp - 0x58]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_insert_aux_int_
mov rax, qword [rbp - 0x58]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x20]
shl rdx, 2
add rax, rdx
mov qword [rbp - 0x30], rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x40]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401dc9
call sym.imp.__stack_chk_fail
add rsp, 0x60
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_int_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x401ea8
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_int__
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 2
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x401f90
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int_
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::construct_int_int_
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402059
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 2
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x402178
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
sub rax, 4
mov rdi, rax
call sym.std::move_int__
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::construct_int_int_
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
lea rdx, [rax + 4]
mov rax, qword [rbp - 0x48]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
lea r12, [rax - 4]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
lea rbx, [rax - 8]
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::move_backward_int__int__
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::operator_
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_int_
mov eax, dword [rax]
mov dword [rbx], eax
jmp 0x4023a7
mov rax, qword [rbp - 0x48]
mov edx, str.vector::_M_insert_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_check_len
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov qword [rbp - 0x40], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__int__std::vector_int_std::allocator_int___
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_allocate
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_int_
mov rsi, rax
mov rax, qword [rbp - 0x28]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x20]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x48]
mov rdx, rsi
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::construct_int_int_
mov qword [rbp - 0x38], 0
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rsi, qword [rax]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x20]
mov rcx, rbx
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_int__int__std::allocator_int__
mov qword [rbp - 0x38], rax
add qword [rbp - 0x38], 4
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov r12, rax
mov rax, qword [rbp - 0x48]
mov rbx, qword [rax + 8]
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rdx, qword [rbp - 0x38]
mov rcx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_int__int__std::allocator_int__
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x20]
mov qword [rax], rdx
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x38]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x30]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x20]
add rdx, rax
mov rax, qword [rbp - 0x48]
mov qword [rax + 0x10], rdx
jmp 0x4023a7
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x38], 0
jne 0x402356
mov rax, qword [rbp - 0x28]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x20]
add rdx, rax
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::destroy_int_
jmp 0x402378
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4023bb
call sym.imp.__stack_chk_fail
add rsp, 0x50
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_int_.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x402416
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::allocate
jmp 0x40241b
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_true_::__uninit_fill_n_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int_
mov ebx, dword [rax]
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 4
call 0x401759
test rax, rax
je 0x4024d5
mov dword [rax], ebx
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_int__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_backward_a2_true_int__int__
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x4025b9
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp rax, qword [rbp - 0x20]
ja 0x402619
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x402627
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::max_size
jmp 0x40262b
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x40263f
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 2
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_int__std::move_iterator_int___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_int__std::move_iterator_int___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_int___int__int_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::destroy_int_
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_int__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_int__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_backward_a_true_int__int__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x402847
mov rax, qword [rbp - 0x10]
jmp 0x40284b
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_int__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402893
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_int___int__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402906
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 2
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_int__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_backward_true_true_std::random_access_iterator_tag_::__copy_move_b_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::max_size
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy_std::move_iterator_int___int__
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x3fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x402a6f
mov rax, qword [rbp - 0x18]
mov edx, dword [rbp - 0xc]
mov dword [rax], edx
sub qword [rbp - 8], 1
add qword [rbp - 0x18], 4
jmp 0x402a53
mov rax, qword [rbp - 0x18]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x402ad6
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rax, qword [rbp - 8]
shl rax, 2
neg rax
mov rcx, rax
mov rax, qword [rbp - 0x28]
add rcx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov rdi, rcx
call sym.imp.memmove
mov rax, qword [rbp - 8]
shl rax, 2
neg rax
mov rdx, rax
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_std::move_iterator_int___int__
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_int___
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_int___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_true_int__int__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base_std::move_iterator_int___true_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_int__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_int__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_true_int__int__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_iterator_int__::base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_true_true_std::random_access_iterator_tag_::__copy_m_int_
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x402c85
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
nop word [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x20113e]
push rbp
lea rbp, [rip + 0x20113e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x402cf6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x402ce0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0x3b9a
add byte [rax], al
add byte [rax], al
jae 0x402db1
jb 0x402db8
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x402dc3
outsd dx, dword [rsi]
insb byte [rdi], dx
jo 0x402dc0
jo 0x402dc3
jo 0x402dc6
jo 0x402dcc
jo 0x402dcf
jo 0x402dd2
pop rdi
xor dword [rdi + 0x30], ebx
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdx + 0x3e], ah
cmp eax, 0x56590030
add byte [rdx + 0x47], dl
add byte [rdx + 0x4f], al
add byte [rip + 0x64250064], ah
and eax, 0x25642564
and eax, 0x25642564
add byte fs:[rbx + 0x61], al
jae 0x402dfd
and byte [rbx], ah
and eax, 0x203a64
push r8
push r11
push rbx
add byte [r8], r8b
jbe 0x402e12
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
imul ebp, dword [rsi + 0x73], 0x5f747265
jne 0x402e38
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
insb byte [rdi], dx
and byte [rax + 0x6f], dh
ja 0x402e44
outsd dx, dword [rsi]
sub byte fs:[rsp + rbp*2 + 0x2c], ch
and byte [rsp + rbp*2 + 0x29], ch
add byte [rax], al
add byte [rax], al
add dword [rbx], ebx
add edi, dword [rbx]
call 0x5c402def
add byte [rax], al
add byte [rbx + rbx*8], cl
push qword [rbx + rax]
add byte [rax], al
cmp al, 0xdc
inc dword [rbx + rax]
add byte [rax], al
xor bl, ch
jl 0x402e09
add byte [rax], al
cmp al, 0xde
mov esp, 0x56000003
jrcxz 0x402e12
jmp rsp
add eax, dword [rax]
add byte [rdi + 0xcffffe8], bl
add al, 0
add byte [rbp - 0x17], dh
lcall [rbx + rax]
add byte [rax + 0x2cffffe9], cl
add al, 0
add byte [rcx + rbp*8 + 0x44cffff], ah
add byte [rax], al
shr cl, 0xff
ljmp [rsp + rax]
add byte [rdx], ch
call qword [rsp + rax - 0x15920000]
mov esp, 0x94000004
fadd qword [rax + rax]
add byte [rdx + rbp*8 + 0x4fcffff], dh
add byte [rax], al
cld
lcall [rax - 0x14a20000]
cmp al, 5
add byte [rax], al
xchg ebx, ebp
lcall [rbp + rax]
add byte [rsi + 0x7cffffeb], dl
add eax, 0xebce0000
lcall [rbp + rax - 0x13c30000]
mov esp, 0x4b000005
in al, dx
fadd qword [rip - 0x13420000]
cld
add eax, 0xecca0000
lcall [rsi + rax]
add byte [rax], al
in al, dx
cmp al, 6
add byte [rax], al
in al, dx
lcall [rsi + rax]
add byte [rax - 0x13], dl
inc dword [rsi + rax - 0x12600000]
ljmp [rsi + rax - 0x12180000]
dec esp
add byte [rax], al
imul ch
in al, dx
add byte [rax], al
and dh, ch
dec dword [rdi + rax]
add byte [rax], al
out dx, al
ljmp [rdi + rax]
add byte [rax], al
out dx, al
dec dword [rdi + rax]
add byte [rdx - 0x12], bl
ljmp [rdi + rax]
add dh, ch
out dx, eax
call qword [rdi + rax - 0xfc80000]
push qword [rdi + rax - 0xf6e0000]
call rsp
add byte [rax], al
push rsp
add byte [rax], al
clc
call qword [rax + rcx]
add byte [rax], al
int1
push qword [rax + rcx]
add byte [rax], al
int1
call qword [rax + rcx]
add byte [rsi + 0x74fffff1], ch
or byte [rax], al
add dl, ch
int1
call qword [rax + rcx - 0xddc0000]
push qword [rax + rcx - 0xd890000]
call rsp
or byte [rax], al
add byte [rdx - 0xb00000e], bh
or byte [rax], al
add al, ah
cmc
lcall [rcx + rcx]
add byte [rax], al
idiv bh
cmp al, 9
add byte [rax], al
cmp esi, esi
lcall [rcx + rcx]
add byte [rdi - 0xa], ah
jl 0x402f7f
add byte [rax], al
cwde
idiv bh
lcall [rcx + rcx - 0x9580000]
mov esp, 0xb6000009
idiv bh
fmul qword [rcx]
add byte [rax], al
cli
idiv bh
cld
or dword [rax], eax
add byte [rdi], dl
idiv edi
lcall [rdx + rcx]
add byte [rax], al
idiv edi
inc dword [rdx + rcx]
add byte [rsi - 9], dh
jmp qword [rdx + rcx]
add byte [rdx - 8], ah
dec dword [rdx + rcx - 0x75b0000]
ljmp [rdx + rcx - 0x7070000]
call rsp
or al, byte [rax]
add byte [rax], ah
stc
push rsp
or al, byte [rax]
add byte [rdi], ch
stc
call qword [rbx + rcx]
add byte [rax], al
pop rdx
stc
push qword [rbx + rcx]
add byte [rax], al
jge 0x402fdb
call qword [rbx + rcx]
add byte [rdx + 0x74fffff9], ch
or eax, dword [rax]
add ah, al
stc
call qword [rbx + rcx - 0x5e40000]
mov esp, 0x3e00000b
cli
fmul qword [rbx]
add byte [rax], al
imul edi, edx, 0xbfcffff
add byte [rax], al
mov cl, 0xfa
lcall [rsp + rcx]
add byte [rax], al
loop 0x403014
cmp al, 0xc
add byte [rax], al
cli
lcall [rsp + rcx]
add byte [rbx + rdi*8], dh
jl 0x40303a
add byte [rax], al
insb byte [rdi], dx
sti
lcall [rsp + rcx - 0x4860000]
mov esp, 0x9400000c
sti
fmul qword [rax + rax]
add ch, al
sti
cld
or al, 0
add al, ah
sti
lcall [rcx - 0x4120000]
cmp al, 0xd
add byte [rax], al
or ah, bh
lcall [rbp + rcx]
add byte [rdx], bh
cld
jl 0x40307b
add byte [rax], al
cld
lcall [rbp + rcx - 0x36f0000]
mov esp, 0x900000d
std
fmul qword [rip - 0x2ca0000]
cld
or eax, 0xfd820000
jmp qword [rsi + rcx]
add byte [rax], al
pushfq
std
inc dword [rsi + rcx]
add ah, dh
std
ljmp [rsi + rcx]
add byte [rsi], cl
dec dword [rsi + rcx - 0x1c00000]
ljmp [rsi + rcx - 0x1af0000]
dec esp
add byte [rax], al
mov esp, 0xecfffffe
add byte [rax], al
sub al, 0xff
push qword [rdi + rcx]
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4030ef
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor cl, bl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x40311f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
rcl bh, 1
jmp qword [rax]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rcx], dl
out 0xff, al
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rsi + 0xaffffd9], ch
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add eax, dword [rip + 0x8070c01]
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4031a1
add esp, eax
or dword [rax], eax
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
js 0x403184
lcall [rdx]
add eax, 0x34040000
cmp eax, 0xe410040
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
or eax, 0x8070c05
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rdx - 0x21], ch
dec dword [rcx + 5]
add byte [rax], al
add al, 0x49
cmp eax, 0xe410040
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
add eax, 0x8070c
add byte [rax + rax], bl
add byte [rax], al
hlt
add byte [rax], al
add byte [rbx - 0x2900001c], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, cl
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 1
add byte [rax], al
push rsp
in eax, 0xff
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 1
add byte [rax], al
push rax
in eax, 0xff
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
add byte [rbp - 1], cl
ljmp [rdx]
add byte [rax], al
add al, 0x5f
cmp eax, 0xe410040
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add byte [rax], al
add byte [rsi + 0x44ffffe5], cl
add byte [rax], al
add byte [rdi + rbp*2], al
cmp eax, 0xe410040
adc byte [rsi + 0x60d4302], al
jg 0x4032a3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add byte [rdx + 0x26ffffe5], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], eax
add byte [rax + 0x20ffffe5], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 1
add byte [rax], al
mov al, 0xe5
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 2
add byte [rax], al
fsub st(5)
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 2
add byte [rax], al
sbb ah, dh
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rbx], ah
out 0xff, al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rdx], dl
out 0xff, al
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x403387
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
sub ah, dh
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rcx - 0x1a], bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte [rax]
add byte [rdi - 0x1a], ah
push qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 2
add byte [rax], al
mov edx, 0xbffffe6
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 3
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
out 0xff, al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
xchg eax, edx
out 0xff, al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, byte [rax]
add byte [rsi + 0x5effffe6], cl
add byte [rax], al
add byte [rbx + rsi*2], al
cmp eax, 0xe410040
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add al, byte [rax]
add ah, al
out 0xff, al
call qword [rax]
add byte [rax], al
add al, 0x7f
cmp eax, 0xe410040
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add ah, ch
out 0xff, al
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 3
add byte [rax], al
adc al, 0xe7
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rdx], al
out 0xff, eax
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add eax, dword [rax]
add byte [rdi], cl
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
or ah, bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 4
add byte [rax], al
clc
out 0xff, al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
add al, 0
add dh, ah
out 0xff, al
call qword [rcx + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], -0x78
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x403582
add byte [rax], al
push rdx
call 0x8a3585
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
add al, 0
add byte [rax + rbp*8 - 1], bh
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xb6000004
call 0x7635c5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jo 0x4035df
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rax + rax]
add bl, cl
call 0x7235e5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add al, 0
add ah, bl
call 0x673605
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 5
add byte [rax], al
loop 0x40360a
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], bl
add byte [rax], al
cmp al, 5
add byte [rax], al
jmp 0x8d3645
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
add eax, 0xe9320000
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
jl 0x403683
add byte [rax], al
jmp 0x7a3685
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40369f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add eax, 0xe9680000
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x9b000005
jmp 0x8436c5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], ah
add byte [rax], al
pop rsp
add eax, 0xe9be0000
jmp qword [rsi]
add eax, dword [rax]
add byte [rsp + rax*4], al
cmp eax, 0xe410040
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x1a
add ecx, dword [rdi + rax]
or byte [rax + rax], bl
add byte [rax], al
add al, 6
add byte [rax], al
mov esp, 0x26ffffec
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 6
add byte [rax], al
ret 0xffec
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
in al, dx
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
add byte [rax], al
jrcxz 0x403756
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rsi], al
add byte [rax], al
hlt
in al, dx
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
in al, 0xec
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
shr ah, cl
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], bl
add byte [rax], al
in al, 6
add byte [rax], al
imul ah
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 7
add byte [rax], al
in al, dx
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 7
add byte [rax], al
sbb ch, ch
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
or ch, ch
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x403873
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40387d
add byte [rax], al
in eax, dx
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], ah
add byte [rax], al
xchg eax, esp
add byte [rax], al
int1
in eax, dx
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x1d000007
out dx, al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rdi]
add byte [rax], al
and al, 0xee
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
adc ebp, esi
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 8
add byte [rax], al
out dx, al
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 8
add byte [rax], al
and esi, ebp
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or byte [rax], al
add byte [rsi], ch
out dx, al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
jl 0x403986
add byte [rax], al
sub dh, ch
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or byte [rax], al
add byte [rax - 0x12], bl
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte [rax], al
add byte [rdx - 0x12], bl
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 8
add byte [rax], al
out dx, al
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 9
add byte [rax], al
out dx, al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 9
add byte [rax], al
sahf
out dx, al
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword [rax], r8d
add byte [rsi + 0x42ffffee], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jge 0x403a67
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword fs:[rax], eax
add byte [rax + 0x38ffffee], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jae 0x403a87
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], cl
add byte [rax], al
enter -0x12, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or dword [rax], eax
add byte [rsi + 0x1affffee], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword [rax], eax
add byte [rax + 0x31ffffee], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 9
add byte [rax], al
shr esi, -1
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xa
add byte [rax], al
mov esp, 0xeffffee
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xa
add byte [rax], al
stosb byte [rdi], al
out dx, al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or r8b, byte [rax]
add byte [rsi + rbp*8 + 0x31ffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, byte fs:[rax]
add byte [rsi + 0x14ffffee], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], cl
add byte [rax], al
stosb byte [rdi], al
out dx, al
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x403ba7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or al, byte [rax]
add ch, cl
out dx, al
js 0x403bae
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, byte [rax]
add byte [rip + 0x2dffffef], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
and al, 0
add byte [rax], al
in al, 0xa
add byte [rax], al
xor ch, bh
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0xb
add byte [rax], al
push rsi
out dx, eax
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0xb
add byte [rax], al
push rax
out dx, eax
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or eax, dword [rax]
add byte [rax + 0x1affffef], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x403c81
add byte [rax], al
jp 0x403c69
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or eax, dword [rax]
add byte [rdi + rbp*8 + 0x11ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xb
add byte [rax], al
jge 0x403ca9
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], al
add ah, dl
or eax, dword [rax]
add al, cl
out dx, eax
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x403d12
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
sbb al, 0xc
add byte [rax], al
out dx, eax
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
adc dword [rbx + 5], edx
ret
or dword [rax], eax
test dword [rdx], 0x9dd06b4
add al, bl
or dword [rdi], ebx
add byte [rax], al
inc dword [rcx]
adc bh, byte [rdx + 0x58901]
add cl, ch
lea eax, [rdx]
movabs dword [0xff0000050ab8000a], eax
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add byte [rax], al
inc dword [rbx]
and eax, 0x1b11b01
jge 0x403d8d
add byte [rsi + 0x5854603], ah
add dword [rsp + rax - 0x4effffc6], edx
add eax, 0x5f645
test byte [rsi], al
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
ror byte [rdx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rbp + 0x40], dl
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
cmp eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add al, dl
add al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0xb00000000000001]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4006], ah
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx + 6], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or dword es:[rax], eax
add byte [rax], al
add byte [rax], al
or dword ss:[rax], eax
add byte [rax], al
add byte [rax], al
or dword [rax], r8d
add byte [rax], al
add byte [rax], al
push rsi
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or word [rax], ax
add byte [rax], al
add byte [rax], al
jbe 0x40405b
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4009], al
add byte [rax], al
add byte [rsi + 0x4009], dl
add byte [rax], al
add byte [rsi + 0x4009], ah
add byte [rax], al
add byte [rsi + 0x4009], dh
add byte [rax], al
add dh, al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
out 9, al
add byte [rax], al
add byte [rax], al
add dh, dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x404128
je 0x404131
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40413f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40413c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add al, dl
add al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rdx + 6], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax + 0x4006], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add al, dl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, 0
lock or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x400a1000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], ah
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
lldt word [rbp + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
and byte [rip + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc dword [rax], eax
in al, 0x2d
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add al, dl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, dword [rax]
xor al, 0x3d
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x6040], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0xa], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400a], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax], dh
sub eax, 0x40
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax], 0
add byte [rcx], al
add byte [rax], dl
add byte [rcx], dh
sub eax, 0x40
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
xor ch, byte [rip + 0x40]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x14044dd
add byte [rax], dl
add byte [rax], bh
sub eax, 0x40
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add al, dl
sub eax, 0x40
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rcx], al
add byte [rdx], dl
add byte [rax], dh
cmp eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 1], ch
add byte [rcx], dl
add ah, ah
sub eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], dl
add byte [rax], al
add byte [rax], al
adc al, 0
clc
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [eax], eax
add byte [rax], al
add byte [rax + rax], dl
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x4045cb
add byte [rax], al
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
or byte [rax], al
add byte [rax], ah
add byte [rdx], bl
add byte [rax + 0x6040], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
or byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000001], al
add byte [rsi], cl
add byte [rsi + 0x4027], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rdx], al
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4026], cl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], ch
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
jb 0x40469a
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdx], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], dl
sub eax, 0x40
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 8, 0
adc al, byte [rax]
add byte [rax], ah
or al, byte [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x404704
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4024], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x18], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add eax, dword [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 3], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 3], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x19], bh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000003], dh
add byte [rsi], cl
add byte [rsi + 0x4020], bl
add byte [rax], al
add byte [rsi], ah
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000004], bl
add byte [rsi], cl
add byte [rsi + 0x401a], ch
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 4], al
add byte [rax], al
and al, byte [rax]
add ah, al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 4], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1f], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000002], dl
add byte [rdi], cl
add byte [rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rax + rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax + 0x120000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add eax, 0x220000
add al, bl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, byte [rip + 0x120000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add eax, 0x220000
add byte [rbp + 0x28], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add eax, 0x220000
add byte [rsi + 0x401a], ch
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
add eax, 0x220000
add dl, bl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 5
add byte [rax], al
and al, byte [rax]
add dl, dl
sbb eax, 0x40
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
and al, byte [rax]
add dh, dl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
adc al, byte [rax]
add byte [rsi], dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x402b], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x404978
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x17], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 6], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000006], dh
add byte [rsi], cl
add byte [rbx + 0x401e], ch
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
and byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x401a], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x20000007], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 7], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x1e], dh
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rax + 0x11000007], cl
add byte [rax], dl
add byte [rax], ah
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
add byte [rax], al
and al, byte [rax]
add ah, cl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [rax], al
and al, byte [rax]
add dh, bl
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx], cl
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
or al, byte [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 8
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x2b], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 8], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4024], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 8
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 8
add byte [rax], dl
add byte [rdx], bl
add byte [rax + 0x6040], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x401f], dl
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rcx], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4027], ch
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx + 0x220000], cl
add dl, dl
sbb eax, 0x40
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000009], bh
add byte [rsi], cl
add dl, dl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisttp qword [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rbx + rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x401a], ah
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, ah
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x19], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
or al, byte [rax]
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x6040], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ud2
add byte [rax], al
and al, byte [rax]
add ah, bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x110000], al
sbb eax, dword [rax]
clc
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rdx], bh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add rax, 0
add byte [rax], al
or eax, dword [rax]
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x6040], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x27], ah
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rbp + 0x2200000b], al
add byte [rsi], cl
add byte [rsp + rbx], al
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add bl, al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4028], dl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4018], bl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub ecx, dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x29], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xc], dl
add byte [rax], al
and al, byte [rax]
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xc], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x402c], ah
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax + rax], ecx
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4017], cl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000c], dl
add byte [rsi], cl
add dh, bl
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add ch, dl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbx], al
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rax], ah
or eax, 0x220000
add byte [rdx + 0x19], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000d], ch
add byte [rsi], cl
add byte [rbx + rbx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x404dcf
add byte [rax], al
and al, byte [rax]
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
and al, byte [rax]
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], dh
add byte [rax], al
and al, byte [rax]
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000e], ch
add byte [rsi], cl
add byte [rsp + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub cl, byte [rdi]
add byte [rax], al
and al, byte [rax]
add ah, al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
sldt word [rax]
and al, byte [rax]
add byte [rcx], ah
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], ch
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000f], cl
add byte [rsi], cl
add byte [rdx + 0x25], bl
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000f], dh
add byte [rsi], cl
add byte [rbx + 0x19], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
sldt word [rax]
and al, byte [rax]
add byte [rax], bl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, byte [rax]
add byte [rax], al
and al, byte [rax]
add ch, bl
add byte es:[rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000010], dh
add byte [rsi], cl
add byte [rax + 0x18], bh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x10], cl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
cld
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x404f5a
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
in al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
adc byte [rax], al
add byte [rcx], dl
add byte [rbx], bl
add ah, dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdx + 0x40], ah
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x25], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or al, 0
add byte [rcx], dl
add byte [rbx], bl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, byte [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 1], ah
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], ch
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4029], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000011], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000011], dh
add byte [rsi], cl
add byte [rbx + 0x20], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rdx], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte ss:[rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4024], bl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000012], bl
add byte [rsi], cl
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x12000013
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x402c], dh
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rbx], edx
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000013], bh
add byte [rsi], cl
add ah, al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdx + 0x40], ah
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x22000014
add byte [rsi], cl
add byte [rbp + 0x2a], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x405166
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x24], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000014], ah
add byte [rsi], cl
add byte [rdx + 0x401a], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
adc al, 0
add byte [rax], dl
add byte [rdx], bl
add byte [rax + 0x6040], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
adc al, 0
add byte [rdx], dl
add byte [rax], al
add al, ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x220000
add dl, ch
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x220000
add dh, al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x15], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4017], cl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x15], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi], bl
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
adc eax, 0x220000
add byte [rax + 0x29], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
adc eax, 0x220000
add byte [rsi], bh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], dl
add byte [rax], al
cmp dl, byte [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4020], bl
add byte [rax], al
add byte [rsi], ah
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000016], ah
add byte [rsi], cl
add dh, dl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
and al, byte [rax]
add dl, dh
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or edx, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4019], dh
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], dl
add byte [rax], al
jp 0x405319
add byte [rax], al
and al, byte [rax]
add dh, dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1100000b], cl
add byte [rbx], bl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x17
add byte [rax], al
and al, byte [rax]
add bl, bh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add cl, bl
add byte [rax], al
add byte [rcx], dl
add byte [rbx], bl
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add ch, ch
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
sub eax, 0
add byte [rax], al
add byte [rip + 0x22000018], ah
add byte [rsi], cl
add byte [rsi + 0x29], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x18], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add eax, 0
add byte [rax], al
jae 0x4053c2
add byte [rax], al
adc al, byte [rax]
add byte [rbx + 0x4016], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000c], al
add byte [rbx], cl
add al, dl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x4053f2
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x401a], ah
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbx + 0x220000], bl
add byte [rsi + 0x26], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
sbb byte [rax], al
add byte [rcx], dl
add byte [rbx], bl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
sbb byte [rax], al
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x4054b2
jne 0x4054a6
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x405466
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4054e4
jb 0x4054ea
pop rdi
jne 0x4054f3
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x4054ed
je 0x4054e9
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x405509
jb 0x40550f
pop rdi
jne 0x405518
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40551b
jns 0x40550b
outsb dx, byte gs:[rsi]
je 0x405522
jns 0x4054b2
jb 0x405516
insd dword [rdi], dx
pop rdi
jne 0x405528
insd dword [rdi], dx
jns 0x4054be
pop rdi
pop rdi
jb 0x405524
insd dword [rdi], dx
pop rdi
jne 0x405536
insd dword [rdi], dx
jns 0x40552b
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405536
jns 0x405536
outsb dx, byte gs:[rsi]
je 0x40554d
jns 0x4054dd
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x405534
xor dword [rcx], edi
jo 0x405555
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40556d
jb 0x405570
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x40554f
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40556e
jb 0x405579
add byte [rdi + 0x5a], bl
push rbx
je 0x405564
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
xor r13, qword [rbp + 0x6f]
add byte fs:[rdi + 0x5a], bl
pop rdx
jo 0x40559d
ja 0x40559d
outsd dx, dword [rsi]
js 0x4055ac
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4055fa
jns 0x4055fa
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40560b
jns 0x40560b
jae 0x405622
jb 0x405625
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x4055f1
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [r13 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40566b
jo 0x405659
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405662
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40566b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40565f
imul eax, dword [rbp + 0x31], 0x61656430
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x74535a5f
xor dh, byte [rax]
pop rdi
pop rdi
je 0x40569b
jb 0x4056a4
ja 0x405696
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4056a5
pop rdi
jb 0x4056b3
outsd dx, dword [rsi]
jb 0x405694
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
jo 0x4056c8
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4056a0
xor al, 0x5f
pop rdi
jne 0x4056e0
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x4056e7
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4056ee
push r8
imul edx, dword [rbx + 0x30], 0x4961535f
imul eax, dword [rbp + 0x45], 0x545f3054
pop rdi
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4056e5
jae 0x40572a
jo 0x4056ff
movsxd rax, dword [rbp + 0x76]
push rdx
push rsp
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405739
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405742
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405736
imul eax, dword [rbp + 0x43], 0x4b524531
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40572f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405770
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405781
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40578a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40577e
imul eax, dword [rbp + 0x39], 0x736e6f63
je 0x4057b0
jne 0x4057a3
je 0x40578b
imul ecx, dword [rdx + 0x69], 0x76454545
push rax
push rsp
pop rdi
jo 0x40579e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x405790
jbe 0x4057c1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4057ed
jb 0x4057f0
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x4057e2
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x405803
jae 0x405793
jo 0x40580a
je 0x40580a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x4057e1
jbe 0x405812
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
imul ebp, dword ss:[rsi + 0x73], 0x45747265
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405828
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405841
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x31], 0x4f45455f
imul eax, dword [rax], 0x534e5a5f
je 0x405827
jbe 0x405858
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbx], esi
pop rdi
pop r15
imul ebp, dword [rsi + 0x73], 0x5f747265
jne 0x405886
imul rax, qword [r13 + 0x45], 0x394e7645
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x40587c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405895
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x31], 0x4445455f
jo 0x40588d
push rsp
pop rdi
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x405888
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4058be
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4058c7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4058bb
imul eax, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x4b524531
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x405901
jb 0x405905
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x4058e0
jbe 0x405911
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor esp, dword [rbp + 0x6e]
jbe 0x4058bf
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x764532
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x405939
je 0x40593e
jb 0x405947
ja 0x40591a
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
jo 0x40595d
je 0x40594d
push 0x40407261
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x405965
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40597e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x405996
jb 0x405972
imul edx, dword [rbx + 0x61], 0x45456949
xor al, 0x62
jae 0x40599b
jbe 0x405939
pop rdi
pop rdx
push rbx
je 0x405970
xor byte [rdi + 0x49], bl
je 0x4059a9
jb 0x4059a5
jae 0x4059af
push r11
je 0x40597f
xor ebp, dword [rbp + 0x6f]
jbe 0x4059b8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x4c], 0x45453162
pop rdi
push rbx
pop rdi
jae 0x4059d2
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x4059f2
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4059c9
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x405a07
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x405a0e
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x6f6d3331
jbe 0x405a27
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405a40
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405a49
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405a3d
imul eax, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
push rbx
je 0x405a38
pop rdi
jae 0x405a79
jb 0x405a76
jns 0x405a52
push rax
imul ebp, dword [rcx + 0x45], 0x535f5476
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x405a53
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405a94
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405a85
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405ac6
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
jo 0x405ae7
ja 0x405ae7
outsd dx, dword [rsi]
js 0x405af6
add byte [rdi + 0x5a], bl
push rbx
je 0x405ab5
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x405aeb
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405af5
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x405b1d
push rax
jbe 0x405ab3
pop rdi
pop rdx
push r11
je 0x405af0
jbe 0x405b21
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
cmp byte [rbp + 0x61], ch
js 0x405b2c
jae 0x405b38
jp 0x405b36
jbe 0x405ad4
pop rdi
pop rdx
push rbx
je 0x405b10
jbe 0x405b41
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x405b24
xor al, 0x5f
pop rdi
jne 0x405b65
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
imul ebp, dword [rbp + 0x69], 0x5f544569
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push r11
je 0x405b65
jbe 0x405b96
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
movsxd rsp, dword ss:[rdx + 0x65]
imul ebp, dword [esi + 0x45], 0x5a5f0076
push rbx
je 0x405b7e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405bbf
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x405b75
pop rdi
push r12
pop r15
jb 0x405be3
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x405bc8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405c09
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x5f4f495f
jae 0x405c3a
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x405c06
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405c47
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x405c52
push rsp
jo 0x405c55
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405c45
jbe 0x405c02
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405c6b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405c84
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x405c9d
jb 0x405c79
imul edx, dword [rbx + 0x61], 0x45456949
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
jae 0x405ca6
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x405c8a
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x405c9b
xor ebp, dword [rbp + 0x6f]
jbe 0x405cd4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x45], 0x3174534e
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x405d17
jo 0x405d05
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405d0e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405d17
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405d0b
imul eax, dword [rbp + 0x39], 0x736e6f63
je 0x405d3d
jne 0x405d30
je 0x405d18
imul ecx, dword [rcx + 0x69], 0x76454545
push rax
push rsp
pop rdi
jo 0x405d2b
push rsp
xor byte [rdi], bl
pop rdi
push r12
pop r15
jb 0x405d4c
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x405d61
pop rdi
jae 0x405d77
jb 0x405d7a
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405d70
movsxd rdi, dword [rax + 0x78]
jno 0x405d60
push rax
imul rdx, qword [r8 + 0x69], 0x76367453
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405daa
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor dword [rdi + 0x45], ebx
push r10
push rbx
pop rdi
push r12
xor byte [rdi + 0x53], bl
cmp dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x405d97
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x405dcc
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405dd6
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x405dde
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x405dcc
xor bl, byte [rdi + 0x44]
jae 0x405e15
jb 0x405e12
jns 0x405e04
jne 0x405e20
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x405e29
jb 0x405e26
jns 0x405e02
push rax
imul eax, dword [rbp + 0x45], 0x535f5476
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x405dfb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405e3c
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405e2d
xor ebp, dword [rbp + 0x6f]
jbe 0x405e66
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x43], 0x30534532
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405e4c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405e8d
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405e9e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405ea7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405e9b
imul eax, dword [rbp + 0x43], 0x764531
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x405ec3
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405edc
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x405ef4
jb 0x405ed0
imul edx, dword [rbx + 0x61], 0x45456949
jo 0x405efd
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405efd
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405f16
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x405f2f
jb 0x405f0b
imul edx, dword [rbx + 0x61], 0x45456949
xor cl, byte [r9 + 0x50]
imul eax, dword [rbp + 0x45], 0x534e4b52
xor byte [rdi + 0x49], bl
push rsp
pop rdi
push rbx
pop rdi
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x405f22
xor byte [rdi + 0x5f], bl
jb 0x405f5c
pop rdi
jae 0x405f5b
insd dword [rdi], dx
push r11
cmp dword [rdi + 0x53], ebx
cmp byte [rdi + 0x45], bl
pop rdi
pop rdi
jbe 0x405f6a
insb byte [rdi], dx
jne 0x405f71
push r11
xor eax, 0x5f36455f
pop rdi
je 0x405f8f
jo 0x405f7d
add byte [r15 + 0x5f], r11b
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405f5f
xor ebp, dword [rbp + 0x6f]
jbe 0x405f98
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x43], 0x30534531
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405f84
pop rdi
jae 0x405fc5
jb 0x405fc2
jns 0x405f9e
push rax
imul eax, dword [rbp + 0x76], 0x31535f54
pop rdi
add byte [rdi + 0x5a], bl
xor esp, dword [rdi + 0x61]
outsd dx, dword [rsi]
jbe 0x405f67
pop rdi
pop rdi
jae 0x405fdb
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x405fac
xor bl, byte [rdi + 0x5f]
jne 0x405fed
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor dword [rbp + 0x45], eax
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x69], 0x5f544545
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406026
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40603f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x406057
jb 0x406033
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x406032
xor bl, byte [rdi + 0x5f]
jne 0x406073
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40608e
pop rdi
push r11
je 0x40604c
xor ebp, dword [rbp + 0x6f]
jbe 0x406085
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x45695f31
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x406082
jbe 0x4060b3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x406063
pop rdi
pop rdx
push rbx
je 0x40609a
xor byte [rdi + 0x49], bl
je 0x4060d3
jb 0x4060cf
jae 0x4060d9
push r8
imul ecx, dword [rdx + 0x30], 0x5f374545
push rbx
pop rdi
jae 0x4060e9
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4060f2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4060fb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4060ef
imul eax, dword [rbp + 0x43], 0x4b524532
push rbx
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
imul rax, qword [r13 + 0x44], 0x764532
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406137
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406150
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x406169
jb 0x406145
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x764531
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406183
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40619c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x4061b4
jb 0x406190
imul edx, dword [rbx + 0x61], 0x45456949
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4061c1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4061da
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x4061f3
jb 0x4061cf
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [r9 + 0x50], ecx
imul eax, dword [rbp + 0x45], 0x534e4b52
xor byte [rdi + 0x49], bl
push rsp
pop rdi
push rbx
pop rdi
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4061e6
xor byte [rdi + 0x5f], bl
jb 0x406220
pop rdi
jae 0x40621f
insd dword [rdi], dx
push r11
cmp dword [rdi + 0x53], ebx
cmp byte [rdi + 0x45], bl
pop rdi
pop rdi
jbe 0x40622e
insb byte [rdi], dx
jne 0x406235
push r11
xor eax, 0x5f36455f
pop rdi
je 0x406253
jo 0x406241
add byte [r15 + 0x5a], r11b
push rbx
je 0x40621c
jbe 0x40624d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rax], edi
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
imul rax, qword [r8], 0x6d6d656d
outsd dx, dword [rsi]
jbe 0x40627a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40625a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406293
je 0x4062a8
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40628d
jbe 0x4062be
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4062a1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4062da
je 0x4062ef
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x406302
jb 0x406305
movsxd rsi, dword [rcx + rcx*2 + 0x69]
imul rax, qword [rbp + 0x45], 0x53527645
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x4062f3
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4062df
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406318
je 0x40632d
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x406340
jb 0x406343
movsxd rsi, dword [rcx + rcx*2 + 0x69]
imul rax, qword [r13 + 0x45], 0x53527645
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x406331
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x406350
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406369
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x406382
jb 0x40635e
imul edx, dword [rbx + 0x61], 0x45456949
xor al, 0x62
jae 0x406387
jbe 0x406325
pop rdi
pop rdi
jae 0x40639d
pop rdi
jae 0x4063a1
jb 0x4063a4
add byte [rdi + 0x5a], bl
push rbx
je 0x406368
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4063a9
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdi], esi
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x4063bc
pop rdi
jae 0x4063ce
outsd dx, dword [rsi]
jb 0x4063be
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x43], 0x4b524532
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4063ab
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4063e0
push r10
movsxd rax, dword [rbp + 0x4f]
push rbx
je 0x4063b5
jb 0x4063ec
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4063f0
pop rdi
jb 0x4063f3
jb 0x4063f7
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40640d
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
jae 0x40641c
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x4063fd
jbe 0x40642e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x406422
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406457
push r10
imul eax, dword [rbp + 0x4f], 0x3174534e
jb 0x406463
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406467
pop rdi
jb 0x40646a
jb 0x40646e
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x406484
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x406456
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x406471
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4064aa
je 0x4064bf
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
jae 0x4064d1
jb 0x4064ce
jns 0x4064aa
imul eax, dword [rbp + 0x45], 0x30535276
pop rdi
push rax
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4064a9
jbe 0x4064da
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
imul edi, dword [rax + 0x45], 0x62006d
pop rdi
pop rdx
push rbx
je 0x4064c0
insd dword [rdi], dx
js 0x4064da
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4064d4
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40652f
push r11
je 0x4064eb
xor ebp, dword [rbp + 0x6f]
jbe 0x406524
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x54455f31
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
jb 0x4064de
pop rdi
pop rdx
push rbx
je 0x40651a
jbe 0x40654b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x6d]
push rdx
imul rdx, qword [r10 + 0x4b], 0x5f3053
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x406569
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406582
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x40659a
jb 0x406576
imul edx, dword [rbx + 0x61], 0x45456949
jbe 0x40653a
pop rdi
pop rdx
push rbx
je 0x406570
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
imul ebp, dword [rbp + 0x69], 0x5f394e45
pop rdi
outsb dx, byte [esi]
jne 0x4065b7
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4065a0
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x4065c5
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x4065e6
insb byte [rdi], dx
jne 0x4065ed
push r12
pop rdi
pop rdi
pop rdi
je 0x40660a
jo 0x4065f8
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4065d7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406610
je 0x406625
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp byte [r13 + 0x61], r13b
js 0x406622
jae 0x40662e
jp 0x40662c
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406653
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x7453694b
jbe 0x406667
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406688
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x40669b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x4066b5
jo 0x4066a3
push r10
push r11
cmp dword [rdi + 0x53], ebx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40667e
pop rdi
pop rdi
je 0x4066ba
jb 0x4066c3
ja 0x4066b5
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4066a5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4066de
je 0x4066f3
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
imul ebp, dword [rbp], 0x74535a5f
outsw dx, word [rsi]
jb 0x406721
jb 0x406711
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x4066e9
jb 0x406720
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406724
pop rdi
jb 0x406727
jb 0x40672b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x406742
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40673e
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x6950694b
push rbx
je 0x406723
jbe 0x406754
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
push rsp
insd dword [rdi], dx
imul esp, dword [rbx + 0x6c], 0x70667464
pop rdi
xor al, 0x62
jae 0x406772
movsxd r13, dword [r12 + 0x74]
jo 0x406745
pop rdi
xor al, 0x62
jae 0x406780
push r10
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406797
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor dword [rdi + 0x45], ebx
push r10
push rbx
cmp byte [rdi + 0x49], bl
push rsp
xor byte [rdi + 0x53], bl
pop r15
add byte [r15 + 0x5f], r11b
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4067a2
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x4067d8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4067e2
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x4067bb
jb 0x4067ed
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40680a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x406804
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40680c
insd dword [rdi], dx
imul rax, qword [r13 + 0x45], 0x505f5450
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4067fa
movsxd rbp, dword [rdi + 0x70]
jns 0x406814
push rbx
je 0x4067ff
xor ebp, dword [rbp + 0x6f]
jbe 0x406838
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x54455f31
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push r11
je 0x406828
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406869
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x406874
push rsp
jo 0x406877
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406867
jbe 0x406824
pop rdi
pop rdx
push rbx
je 0x406860
jbe 0x406891
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x6d], eax
push rdx
imul rdx, qword [r10 + 0x4b], 0x5f3053
pop rdi
pop rdx
push rbx
je 0x40687d
xor byte [rdi + 0x5f], bl
movsxd rbp, dword [rdi + 0x70]
jns 0x4068b2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4068bc
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x4068c4
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x40689e
jb 0x4068d0
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x4068ed
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4068e7
xor dword [r11d], r14d
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4068f0
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4068fa
pop rdi
imul rax, qword [r13 + 0x45], 0x505f5450
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4068e1
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40690f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406950
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x406906
pop rdi
pop rdx
push r11
je 0x40693e
xor ebp, dword [rbp + 0x6f]
jbe 0x406977
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x34], 0x65736162
jbe 0x406927
pop rdi
je 0x40698e
add byte [rdi + 0x5f], bl
js 0x4069ab
pop rdi
jo 0x40699b
jb 0x4069ab
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x406986
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4069c7
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4069e3
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4069ec
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4069e0
imul eax, dword [rbp + 0x37], 0x74736564
jb 0x406a0f
jns 0x4069eb
imul eax, dword [rbp + 0x45], 0x5f545076
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x44], 0x764531
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x406a21
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406a2a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406a1e
imul eax, dword [rbp + 0x38], 0x5f78616d
jae 0x406a47
jp 0x406a45
jbe 0x4069e3
pop rdi
pop rdx
push rbx
je 0x406a1a
xor bl, byte [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x406a4f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406a59
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x406a61
pop rdi
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x406a53
jbe 0x406a84
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
insd dword [rdi], dx
jo 0x406a9c
movsxd rsp, dword [rbp + 0x49]
imul rax, qword [r13 + 0x45], 0x5f394e45
pop rdi
outsb dx, byte [esi]
jne 0x406aa0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406ab9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x31], 0x4e45455f
push rbx
xor al, 0x5f
push r8
imul rdx, qword [r11 + 0x31], 0x4445455f
jo 0x406abe
push rsp
pop rdi
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x406ae4
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x406ac1
jbe 0x406af2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbx], esi
pop rdi
pop r15
imul ebp, dword [rsi + 0x73], 0x5f747265
jne 0x406b20
imul rax, qword [rbp + 0x45], 0x394e7645
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x406b16
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406b2f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x31], 0x4445455f
jo 0x406b27
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x406b12
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406b53
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x406b36
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x406b6c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406b76
pop rdi
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x406b99
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x406bac
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x406b7c
jae 0x406bc1
jo 0x406b96
imul eax, dword [rbp + 0x76], 0x535f5452
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x406b93
jbe 0x406bc4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
insd dword [rdi], dx
jo 0x406bdc
movsxd rsp, dword [rbp + 0x49]
imul rax, qword [rbp + 0x45], 0x5f394e45
pop rdi
outsb dx, byte [esi]
jne 0x406be0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406bf9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x31], 0x4e45455f
push rbx
xor al, 0x5f
push r8
imul rdx, qword [r11 + 0x31], 0x4445455f
jo 0x406bfe
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406c1b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406c24
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406c18
imul eax, dword [rbp + 0x38], 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x406be0
pop rdi
pop rdx
push rbx
je 0x406c16
xor ebp, dword [rbp + 0x6f]
jbe 0x406c4f
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x406c57
push r8
imul edx, dword [rbx + 0x30], 0x3054455f
pop rdi
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x406c3e
xor byte [rdi + 0x5f], bl
jne 0x406c7f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x406c9a
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x406c9b
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x406caf
push r11
je 0x406c6b
xor ebp, dword [rbp + 0x6f]
jbe 0x406ca4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x45455f33
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x406c93
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [rbp + r12*2 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x406d0d
jo 0x406cfb
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x406d17
jb 0x406d1a
movsxd rsi, dword [rcx + rbp*2 + 0x69]
imul eax, dword [rax], 0x6e69616d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406d19
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406d22
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406d16
imul eax, dword [rbp + 0x43], 0x764532
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406d3d
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x36745369
jbe 0x406d50
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406d71
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x406d84
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x406d9e
jo 0x406d8c
push r10
push r11
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi], ch
movsxd rbp, dword [rsi + 0x74]
add byte [rax], al
jae 0x406db4
insd dword [rdi], dx
je 0x406d9f
add byte [rsi], ch
jae 0x406db7
jb 0x406db9
add byte [rsi], ch
jae 0x406db3
jae 0x406dc1
jb 0x406dc3
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x406dc4
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x406dd2
outsb dx, byte cs:[esi]
jne 0x406da0
jne 0x406dde
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x406dae
push 0x687361
jns 0x406df7
jae 0x406e04
insd dword [rdi], dx
add byte [rsi], ch
jns 0x406dff
jae 0x406e07
jb 0x406d95
outsb dx, byte cs:[esi]
jne 0x406dc8
jbe 0x406e01
jb 0x406e11
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x406dd5
jbe 0x406e0e
jb 0x406e1e
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x406e19
insb byte [rdi], dx
jns 0x406e28
add byte [rsi], ch
jb 0x406e23
insb byte [rdi], dx
jo 0x406e2f
je 0x406dc5
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x406dfe
outsd dx, dword [esi]
je 0x406dd4
je 0x406e3c
js 0x406e4d
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x406e52
je 0x406e48
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x406e6b
jo 0x406e7f
pop rdi
je 0x406e6f
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x406e7d
jns 0x406e1e
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x406e99
jns 0x406e2a
push 0x63
jb 0x406e2f
jns 0x406ea1
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x406eab
je 0x406e41
je 0x406ea7
add byte [rsi], ch
jae 0x406ebe
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x406e55
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax + rax*2], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 6], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + 6], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4006], ah
add byte [rax], al
add byte [rax + 6], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
or byte [rax], al
add byte [rax], al
add byte [rax], al
lock or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
adc byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or al, byte [rax]
add byte [rax], al
add byte [rax], al
and byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x40], dl
add byte [rax], al
adc al, 0x2d
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
sub eax, 0x40
add byte [rax], al
and byte [rip], ch
add byte [rax], al
ret 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
sub eax, 0x40
add byte [rax], al
in al, 0x2d
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, dx
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
sal byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x40], dh
add byte [rax], al
xor al, 0x3d
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x40733a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
cmp eax, 0x60
add byte [rax], al
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
clc
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x6040], ah
add byte [rax], al
add byte [rax + 0x40], ah
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], dh
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rip + 0x8000000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
lcall [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
