call 0x400e88
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400ca0
add ebx, ebx
je 0x400c56
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400c8e
cmp rbp, -4
ja 0x400c8e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400c76
add ecx, 4
mov dl, byte [rax]
je 0x400c9e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400c8e
ret
cld
pop r11
cmp r8b, 2
je 0x400cb6
jmp 0x400d33
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400cc6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400cae
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400cde
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400ccb
sub eax, 3
jb 0x400cfc
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400d33
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400d23
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400d21
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400d10
cmp rbp, -0xd00
adc ecx, eax
call 0x400c62
jmp 0x400cb6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400e0c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400daa
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400df6
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400dc9
push 0x3a707474
jne 0x400e22
js 0x400de2
jae 0x400e1c
outsb dx, byte cs:[rsi]
je 0x400ddb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400e49
jb 0x400e3b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400e66
jb 0x400e79
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211a44
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211a44
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400d44
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400e6f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400e1d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add eax, dword [rax]
jmp rbp
call 0x706f0f17
jb 0x400f2f
movsxd rbp, dword [rdi]
jae 0x400f29
insb byte [rdi], dx
js 0x400f2f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400f0f
cmp rsi, rcx
jae 0x400f17
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400ef6
cmp al, 0x8f
ja 0x400ef6
cmp byte [rsi - 2], 0xf
je 0x400efc
sub al, 0xe8
jg 0x400ef9
push rdi
cmp al, 1
ja 0x400ee4
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400ee7
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400f14
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400f6b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c13e9
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400faf
mov al, 0xa
jmp 0x400faf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400f8b
inc ebx
mov al, 0
jmp 0x400fb3
mov al, 2
jmp 0x400fb3
mov al, 3
jmp 0x400fb3
mov al, 0x3c
jmp 0x400fb3
push rcx
rcr ah, 1
fstp st(7)
jle 0x400ff4
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401006
jg 0x400ff8
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a677b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401052
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb61cf
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40105a
cmp esi, 0x21585055
jne 0x40105e
jge 0x401050
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401053
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401057
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401103
pop rcx
or al, 0x3b
jb 0x401109
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40107b
jmp 0x40107d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660fbe
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53206
in eax, dx
jg 0x4010b5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4010fb
mov bh, 0x2a
add edi, 0x10
jmp 0x4010f8
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401135
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401171
jne 0x401188
fstpnce st(6), st(0)
jle 0x401151
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401187
jrcxz 0x4011bb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b11f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40123a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4011fa
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582957cf
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40126d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401207
and ecx, 7
or al, 0xeb
jae 0x401272
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4012a7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4012e5
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40129e
push rax
call 0xffffffff868d0f8b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4012a8
std
cmp edi, esi
xchg eax, edi
jle 0x4012fd
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95889
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4012fb
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x4012e9
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401312
js 0x401352
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4013e4
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad261f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401405
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40140a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20ebc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401398
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
or dl, byte [rdx]
add byte [rax], al
add byte [rax], ah
add edi, edi
mov eax, 0x31000019
or byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4014be
je 0x4014c7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401490
mov dh, 0x7d
jbe 0x40148f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4014c8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x4c00006], bl
add byte [rsi + 7], bl
nop
nop
invd
add byte [rax - 0x3727fff7], cl
nop
or al, byte [rax]
or eax, dword [rax]
jo 0x4014bb
in al, 0x13
enter 0xc07, 0
nop
or eax, 0xf60aa000
or esp, esp
add ecx, dword [rsi]
add byte [rax + 0x13e4000f], dh
lahf
ror dl, 1
adc byte [rdi], dl
adc dword [rax], eax
sub byte [rdi + rcx*2], dl
and byte [rdi], bl
and byte [rdx], dl
add al, dl
adc eax, dword [rax]
clc
add esp, esp
add ecx, eax
sbb eax, 0x8001460
or esp, esp
or esp, esp
adc eax, 0x161000
sbb byte [rax], al
stc
add edx, esi
add al, bh
sbb byte [rax], al
add byte [rax], ah
add bh, byte [rcx + 2]
stc
sbb dword [rax], eax
cwde
sbb al, byte [rax]
shl byte [rdi + rbp*8], 0xa6
insb byte [rdi], dx
sbb edx, dword [rbx]
add dword [rdi], edx
add al, 0
int1
lcall [rdx]
scasb al, byte [rdi]
sub al, 0x76
or al, 0x1b
mov edi, 0xf2027f19
jnp 0x401541
imul esp, eax, 0xb201759
or eax, 0x2e1720c9
xchg eax, ecx
shr dword [rsi], -0x75
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdi], edx
push rbx
and al, 0x83
pop rbp
or dword [rdi + 0x7a], ecx
xor byte [r8 - 0x79cdded5], 0x97
movsd dword [rdi], dword ptr [rsi]
xlatb
insb byte [rdi], dx
sal byte [rcx - 0x7a], cl
stosd dword [rdi], eax
psubb mm6, qword [rdi - 0x65]
nop
wait
and byte [rbx - 0x2b], ah
sbb dword [rax + rcx*2 + 6], ebp
stc
cli
sbb byte [rax + rdx*4 + 0x21], ah
idiv esp
add al, 0x90
mov bl, 0x5f
push 0x171127bf
sahf
adc al, byte [rsi]
sbb dword [rax + rsi - 0x3b], esp
adc eax, 0x38dec297
xchg dword [rbx + 1], eax
lahf
nop
rol byte [rdx + 0x18], 0x67
push rcx
outsd dx, dword [rsi]
fcom dword [r13 - 0x4fa2c4ef]
push qword [rax + 0x47]
adc al, dh
scasb al, byte [rdi]
mov word [rdi - 0x7a], gs
adc edx, dword [rdi - 0x64cf6b28]
xchg eax, edi
jg 0x401550
sal byte [r8 - 0x51], 0x8c
out 0x10, eax
add al, 0x5a
mov bh, 0x76
mov dl, 0x69
sbb byte [rbx + 0x127c2207], dh
jbe 0x401622
int 0xc
fsub st(5), st(0)
add bl, dh
and byte [rbx], bl
out 0x10, eax
or al, byte [rdx]
cmpsb byte [rsi], byte ptr [rdi]
sahf
sbb al, 0xe4
in al, dx
mov esi, 0xe0121704
adc eax, dword [rdx]
add byte [rax + 0x144f3acb], dh
add al, 0x4f
sub cl, byte [rdi + 0x7279d97b]
and al, byte [rdx]
in al, dx
adc dword [rbx + 0x3c], ebp
add dh, byte [rdi + 6]
nop
out dx, al
add dl, byte [rdx - 0x6a5edfe9]
adc eax, 0x471c421b
scasd eax, dword [rdi]
or eax, 0xb5d84361
pop rdi
ficom dword [rdi]
stc
pushfq
mov ebp, 0x6aa78390
adc dl, byte [rbx]
add edx, dword [rdi]
fidiv word [rdx]
enter -0x7ce0, 0x28
sub cl, byte [rsi + rbp]
nop
or dword [rip + 0x3455f2f], 0x5f
ror byte [rsi], 0x49
ret
out dx, eax
test byte [rbx], al
xlatb
cmpsb byte [rsi], byte ptr [rdi]
or byte [rbx + 0x11e547a0], bh
movsxd rcx, dword [rax]
sbb edx, dword [rdx + 0xe47f4f0]
in al, 0xd9
add dword [rax + rdx + 0x6bf041b], esp
adc esp, dword [rdi]
sbb esp, ebp
or al, 0x17
adc dword [rsi], ecx
or ecx, edi
out 0x60, eax
ja 0x40169c
add al, 0x1a
add byte [0x72793c60], al
mov al, 0x49
add byte [rbx], ah
add byte [rdx], al
add dword [rax - 0x1f627c6d], edx
ja 0x401676
add cl, byte [rsi + 0x7b]
sbb esp, dword [rdx + rdx + 0x2b]
add ah, byte fs:[rdi + 0x6486c1c9]
test al, 0x70
pop rdi
and byte [rax + rcx*2], ch
lock and byte [rdx + 1], bh
jbe 0x401691
and dl, al
and dword [rcx], ebx
insb byte [rdi], dx
mov dl, 0x47
movabs al, byte [0x3b72431835af04bf]
fidiv dword [rdi + 0x21b06470]
adc dword [rdi + 0x4d305f65], -0x38
xchg dword [esi], esp
add eax, 0x61a6408f
sub al, 0x82
cmc
wait
ja 0x4016e2
jo 0x4016bf
xchg eax, edi
adc ebx, dword [rsi]
cdq
jmp 0xffffffffff1726dc
add byte [rdi + 5], cl
mov dl, 0xb4
nop
add byte [rdi], dl
add eax, 0xecf2760c
pop rax
add eax, 0x2e133dbf
outsb dx, byte [rsi]
in al, dx
adc byte [rsi], dh
test byte [rsi - 0x70fe6de9], al
and dword [rbx - 0x60971fb3], edx
sahf
mov ebp, 0x6240ec0
cmp al, 6
out dx, eax
and byte [rip + 0x42f3c94e], ah
sbb dword [rcx + 6], ecx
or byte [rbx], bl
xchg eax, edx
mov bl, 7
fisub dword [rbx + 0x5f]
sahf
jo 0x401698
xchg eax, edi
adc bl, al
call 0xffffffffe4dc6f1e
jmp qword [rbx + 0x72]
je 0x40178f
lodsd eax, dword [rsi]
std
fstp st(6), st(0)
xlatb
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax - 0x45], eax
lcall [rbx - 5]
jb 0x40179d
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401768
outsd dx, dword fs:[rsi]
fcmovnu st(0), st(3)
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4017b8
jne 0x4017d4
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4017cd
std
add eax, 0x2965b7f6
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0x7dbb
movabs dword [0x655f7961727208bf], eax
mov ch, 0x72
jns 0x401782
or ch, byte [rbp + 0x65]
and bl, ch
int3
jge 0x401801
insd dword [rdi], dx
insd dword [rdi], dx
jns 0x4017c2
or eax, 0x2a74295f
ljmp [rdi - 0x49]
or dword [rbx - 0x64], eax
jo 0x40180d
and al, 0x5a
push rbx
je 0x4017ee
xor dword [rcx], edi
jo 0x40180f
movsxd rsp, dword gs:[rbp - 0x27]
mov bh, 0xad
mov ch, 0x77
cdq
sub eax, 0x729f6e77
jne 0x401819
je 0x4017d2
imul eax, dword [rbx + 0x4538dbbd], 0x69
outsd dx, dword [rsi]
cmp ebp, dword [rcx]
xor edi, dword [rdi - 0x7c]
fcmovne st(0), st(7)
cmp dh, byte [rdi + 0x63]
or dword [rdi + 0x14], 0x6e676936
pcmpgtw mm2, mm6
out dx, al
ja 0x4017e6
xor al, 0x4d
pop r8
or byte [rcx + r14], r14b
fsubr qword [rbp - 0x14]
imul esp, dword [rbx + 0x78], 0x7a693569
or eax, 0x7f6f355b
mov bl, 0xed
outsb dx, byte [rsi]
xchg eax, ecx
wrmsr
imul ebp, dword [rcx + 0x2f], 0x774f4c47
out dx, eax
push rdx
out dx, al
xor r15b, byte [rbp + 0x5f]
mov esp, 0x4f415246
movabs eax, dword ss:[0xa444e455f454dfd]
or r8d, dword [rdi + 0x4e]
push rbp
fld dword [rbx + 0x4820482d]
push rdx
push rbx
wait
mov al, 0xf7
or esp, dword [rdi + 0x54]
sub r11b, r14b
adc byte fs:[rbx - 0x62f48a23], bh
jb 0x40181d
pop rcx
mov r10b, 0x50
sub byte [rbp + rbp*4 - 0x6fc736b2], dh
push rdi
scasb al, byte [rdi]
mov ch, 0xf6
mov dh, 5
xor al, 2
je 0x4018c9
adc r14b, r13b
mov ss, word [rdx]
test byte [rdi + 0x6d46dbfd], 0xd
insb byte [rdi], dx
jae 0x4018c7
xor byte [rdi + 0x28], bl
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x4018c0
jne 0x4018e4
mov dl, 0x56
dec dword [rcx + 0x42]
pop r8
pop rax
pop rdi
xor esp, dword [rcx]
imul esp, dword [rcx - 0x3f], 0xe8338edd
outsb dx, byte [rsi]
jbe 0x401910
add byte [rdx + 0xb], ah
or al, 0x87
or byte [rbp + 0x63], ch
loopne 0x401853
mov ebx, 0x60caec5b
pop rdi
sbb dword [rdi + 0x49], eax
movsxd rbx, dword [rbx]
xor dword [rbx - 0x11], esp
scasb al, byte [rdi]
xor eax, 0x286168c7
lodsd eax, dword [rsi]
mov ah, 0x10
push r10
pop rbx
push 0x549e7068
outsd dx, dword [rsi]
fmul qword gs:[rcx - 0x14]
mov dh, 0x8d
fstp qword [rdx + 0x5f36a893]
push rbx
mov ch, 0x70
and esp, dword [rsi + rax*4 - 0x3e]
movsxd rax, esi
pop rax
xchg dword [rbx], edi
insw word [rdi], dx
insd dword [rdi], dx
adc esi, esp
jbe 0x401949
push rdx
mov dword [rdi - 0x3e], eax
mov dh, 0xd
js 0x401966
out dx, al
jae 0x4018f7
mov rcx, qword [r13 + 0x432a0dec]
xor dword [rbp + 0x76], eax
mov dword [r15 - 0x4a], 0x6d3b587d
cwde
pop di
xor ch, byte [rsi]
add dword [rip - 0x7a97a92a], esi
jo 0x40198d
jbe 0x401906
add dh, byte [rsi - 0x5caf24f]
js 0x4018f1
push rdx
adc cl, byte [rax]
iretd
xor byte [rdx + 0x52], dl
or byte [rip + 0x591b6178], ch
fisttp dword [rdx]
lodsb al, byte [rsi]
movabs eax, dword [0x2992b0baa9658878]
sbb r9d, dword [rbp + 0x5f]
insd dword [rdi], dx
outsd dx, dword [rsi]
or al, 0x43
insd dword [rdi], dx
push rsp
push rsp
js 0x401950
ret 0x6310
movsxd rdx, dword [rax + rbp*2 + 0x38]
mov dl, 0x6f
xor eax, 0x634b505f
or ebp, dword fs:[rsi + rsi*4 + 0x5d]
add bl, byte [rdi + 0x75]
test byte [rdi + rbp*2 + 0x6d], ah
fmul qword [rip - 0x3a79949d]
jo 0x4019f1
xor dword [rdx], esi
jae 0x40190f
cmp al, 0x23
and byte [rax - 0x9909cf4], ch
in al, dx
push rdx
movabs eax, dword [0x676d3332756fcefe]
pushfq
jnp 0x401948
in eax, dx
js 0x401933
mov word [r11 + 0x32], ss
add dl, byte [rbp + 0x64]
je 0x4019a5
ja 0x401930
adc ah, byte [rsi + 0x64]
jne 0x4019bb
mov ebp, 0xc3600834
sahf
imul esp, dword [rsi - 0x42], 0xdd5b4de5
sub rax, 0x685f73a3
pushfq
insb byte [rdi], dx
sbb dword [rcx], esp
in al, 9
xchg eax, esp
mov qword [rsp + r11*2 + 0x734b29d8], -0x7161cb91
pop rbp
jb 0x401984
jae 0x401a41
cwde
xchg eax, ebp
movabs r15, 0x6b682a6b63072021
jb 0x4019ea
xchg eax, edi
mov al, 0x3c
insb byte [rdi], dx
cli
xor al, 9
test eax, 0x8312e815
imul edx, dword [rax], 0x11ca7b12
or byte [rcx], ch
cmovae eax, dword [rcx - 0x21e79ad4]
mov dh, 0x4e
enter 0x258, -0x70
outsd dx, dword [rsi]
mov ch, 0x78
mov cl, 0x1e
pop rsp
insd dword [rdi], dx
retf
xor esp, dword gs:[rsi]
sal byte [rbx + 0x6e61c816], cl
outsd dx, dword [rsi]
push rax
push r11
enter 0x6ba, -0x60
movabs qword [0x3a7973a009b68d76], rax
mov word [rdi], es
je 0x401a9f
jmp 0x401a97
ret
push 0x70af1e09
insb byte [rdi], dx
mov ebx, 0x6f6e72c0
cmp byte cs:[rcx + 0x2d], cl
adc eax, 0x85e10d67
adc ch, dl
jne 0x401a79
jne 0x4019d0
sub eax, 0xadeea369
mov ch, 0x58
or eax, 0x640938e7
jns 0x401acb
jbe 0x401a37
sbb dword [r14 + 0x44], r14d
int3
imul eax, dword [rip + 0x5f0c6137], 0x1b
and al, 0xb0
sub bh, al
and al, bl
or edx, edx
je 0x401aec
cmp dword [rax + 0x26], esi
mov bh, 0x3d
or ch, byte [rdi + rbp*2]
or cl, ah
add eax, 0x1dd63c18
and al, 0x6f
imul dword [rsi]
push -0x6933f644
cmp eax, 0xd726468
cmp al, al
lodsb al, byte [rsi]
mov bl, 0x31
or ebp, dword [rdx + 0x71]
insb byte [rdi], dx
not byte [rsi]
pop rdx
and al, 0x9c
add byte [rsi + 0x69], dl
xor al, 0xc7
pop rsp
add al, 0x4f
jmp 0x401a52
add al, bl
add byte [rax], al
add dword [rbp + 0x5e8cb109], edi
out dx, eax
or al, 0xc9
nop
pushfq
sbb al, 1
and ecx, eax
and byte [rbx], al
rol byte [rdi], cl
push rsp
push rsp
xor ah, byte [rbx + rax*2]
xor ah, byte [rax]
add al, 0x31
xor cl, al
and byte [rbx + 0x74], al
je 0x401b07
cmp esp, esp
fst qword [rax + 0x44]
jg 0x401ae0
ljmp [rdi - 0x68]
nop
cwde
xor byte [rip + 0x19219a40], al
or byte [rsi + 0xb], cl
sbb dword [rax + rcx*8 + 0x3f], ebp
enter 0x1f8, -5
nop
leave
sbb byte [rsi - 0x10], dl
xchg eax, edx
add esi, dword [rdi + 0x48bba407]
sahf
popfq
add bl, byte [rsi - 0x41]
lcall [rbp + rdi*4 + 0x7dfb119]
mov edi, 0xd90dd22a
nop
add al, byte [rdi]
imul edi, dword [rdi], -2
jns 0x401b18
add ecx, dword es:[rax + 0x50bf07]
sbb r8b, al
add bh, bh
jp 0x401b94
test dword [rcx - 0x27c09e37], edi
out 0x83, eax
pop rbp
fld dword [rdi + rdi + 0x423f84ff]
xor cl, al
and al, dh
lock add byte [rcx], 0x10
nop
sbb byte [r14 + 0x1466f013], cl
jg 0x401b6f
xchg eax, esp
pushfq
lcall [rdx]
mov dword [rdi], edi
nop
or edi, dword [rcx]
enter -0x6fe0, 0x10
add dword [rcx], edx
sbb esi, dword [rdx + 0x3f940710]
mov dl, 5
xchg byte [rbx + 0xf2f07cf], bl
jae 0x401b1d
and dword [rbx], edi
popfq
mov al, 7
jg 0x401bcb
insb byte [rdi], dx
cmp dword [rdx + rsi], 0x99a33f09
wait
add al, 0x21
outsd dx, dword [rsi]
dec dword [rax]
leave
or dword [rcx - 0x2331b541], ebp
or al, 0xbf
mov edi, 0x21109b38
sbb esi, dword [rcx + 0x64076f3f]
leave
cdq
jg 0x401b61
mov edi, 0x6e67923f
xor dl, al
jg 0x401b8b
add ah, byte [rax + 0x35]
or dword [rsi], ebp
leave
or esp, esi
loope 0x401c1f
mov byte [rdi - 0x5b4ed0f9], ah
mov ecx, 0xfd53fc8
and byte [rcx + rcx - 0x1e40f801], bh
nop
leave
adc byte [rax], dl
sbb dword [rax + 0x7fe6086e], edx
sbb cl, cl
leave
sbb al, ah
add dword [rsi], eax
sub byte [rbx + rax*4], ah
or al, 0x10
cwde
fsub dword [rdx]
jae 0x401c19
pop rdi
jg 0x401c11
sub dword [rdx + 0x76], eax
out dx, eax
and byte [rcx], ah
sbb dword [rdx - 0x32], ecx
cwde
clc
jo 0x401bb0
cwde
jg 0x401c1f
enter -0x6ce0, -0x33
adc edi, dword [rdi]
shr byte [rax + 0x3c848323], 0xa8
inc dword [rdx]
ud2
leave
jbe 0x401bbf
add eax, dword [rdi + 0x613f3017]
and dword [rsi + rcx], ecx
xor al, 0x7f
or dword [rdx + rsi*4 + 0x7b11d9], ebx
nop
xor dword [rdi + 0x6c], edi
sbb dword [rbx - 0x44fef31c], ecx
jg 0x401c07
jno 0x401c85
loopne 0x401c60
mov edi, 0x9a401b08
or dword ss:[rdi - 0x40], edi
and bh, byte [rcx + 0x72]
add byte [rbx], ch
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rcx], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x3a080216], ecx
pop rbx
xor byte [rdx - 0xe], dl
ret
pop rdx
fidivr dword [rax + 0x31000019]
or byte [rax], al
add byte [rax + 0x3a], ah
add byte [rax], al
add rax, qword [r8]
cmp esi, esp
add byte [rax], al
add bh, bh
