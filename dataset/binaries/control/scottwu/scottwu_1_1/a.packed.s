call 0x4018c8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x4016e0
add ebx, ebx
je 0x401696
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x4016ce
cmp rbp, -4
ja 0x4016ce
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4016b6
add ecx, 4
mov dl, byte [rax]
je 0x4016de
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x4016ce
ret
cld
pop r11
cmp r8b, 2
je 0x4016f6
jmp 0x401773
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401706
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x4016ee
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x40171e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x40170b
sub eax, 3
jb 0x40173c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401773
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401763
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401761
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401750
cmp rbp, -0xd00
adc ecx, eax
call 0x4016a2
jmp 0x4016f6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40184c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x4017ea
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401836
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401809
push 0x3a707474
jne 0x401862
js 0x401822
jae 0x40185c
outsb dx, byte cs:[rsi]
je 0x40181b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401889
jb 0x40187b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4018a6
jb 0x4018b9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x213c04
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x213c04
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401784
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x4018af
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40185d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1957
jb 0x40196f
movsxd rbp, dword [rdi]
jae 0x401969
insb byte [rdi], dx
js 0x40196f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40194f
cmp rsi, rcx
jae 0x401957
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401936
cmp al, 0x8f
ja 0x401936
cmp byte [rsi - 2], 0xf
je 0x40193c
sub al, 0xe8
jg 0x401939
push rdi
cmp al, 1
ja 0x401924
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401927
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401954
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4019ab
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1e29
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4019ef
mov al, 0xa
jmp 0x4019ef
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4019cb
inc ebx
mov al, 0
jmp 0x4019f3
mov al, 2
jmp 0x4019f3
mov al, 3
jmp 0x4019f3
mov al, 0x3c
jmp 0x4019f3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401a34
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401a46
jg 0x401a38
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a71bb
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401a92
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6c0f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401a9a
cmp esi, 0x21585055
jne 0x401a9e
jge 0x401a90
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401a93
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401a97
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401b43
pop rcx
or al, 0x3b
jb 0x401b49
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401abb
jmp 0x401abd
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36619fe
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53c46
in eax, dx
jg 0x401af5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401b3b
mov bh, 0x2a
add edi, 0x10
jmp 0x401b38
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401b75
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401bb1
jne 0x401bc8
fstpnce st(6), st(0)
jle 0x401b91
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401bc7
jrcxz 0x401bfb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1bb5f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401c7a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401c3a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829620f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401cad
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401c47
and ecx, 7
or al, 0xeb
jae 0x401cb2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401ce7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401d25
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401cde
push rax
call 0xffffffff868d19cb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401ce8
std
cmp edi, esi
xchg eax, edi
jle 0x401d3d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c962c9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401d3b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401d29
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401d52
js 0x401d92
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401e24
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad305f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401e45
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401e4a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc218fc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401dd8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
cld
add al, 0
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax - 0x60], al
sub dl, byte [rax]
add byte [rax], al
add byte [rax], ah
add edi, edi
jo 0x401ea4
add byte [rax], al
or rax, 0x20000
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401efe
je 0x401f07
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401ed0
mov dh, 0x7d
jbe 0x401ecf
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401f08
sahf
sahf
add al, 0
cwde
add eax, 0x3f2d000
cdq
add eax, 0xb0a0007
add al, 0xf2
add dword [rax], ecx
add byte [rax + 9], dl
add al, ah
stc
add al, 0xf2
add al, 0xa
add al, bh
or eax, dword [rax]
or byte [rsi], 0x7c
add bh, cl
add byte [rax + rax], cl
movabs al, byte [0x807c813e1060000d]
add byte [rax + 0xf], dh
add byte [rbp + rbp - 0x3fc6a7ed], dl
pop rdi
adc byte [rdi], dl
adc dword [rax], eax
loope 0x401f24
enter -0x2c00, 0x12
add al, cl
jg 0x401f13
add eax, dword [rbp + 0x14073813]
add al, ch
cmp eax, 0x65604f60
add byte [rip + 0x1617], dl
nop
seto byte [rsi]
add byte [rax], cl
sbb byte [rax], al
add esp, esp
enter 0x3ff8, 0x19
add byte [rax], al
add edx, esi
or esp, esp
sbb al, byte [rax]
sbb eax, dword [rax]
add byte [rcx + 0x48], al
fimul word [rbp - 0x27]
sbb al, 0x13
add dword [rdi], edx
add al, 0
int1
push qword [rsp + rbx*2]
pop rcx
in al, dx
or al, 0x1b
mov edi, 0xc9029719
shl byte [r8 - 0x441fe8e5], cl
nop
or dword [rsi + rbp], 0x20
adc dword [rdi + rbx*2 + 0x22], eax
sbb dword [rbp + 0x16], -0x59
add dword [rdi], edx
push rbx
mov ebx, 0x477a4f12
push rdi
xchg byte fs:[rdi - 0x5b26285b], dl
jrcxz 0x401f9c
stosd dword [rdi], eax
movsb byte [rdi], byte ptr [rsi]
ja 0x401f81
or al, 0x4a
mov al, 0x21
sbb dword [rbp - 0x1b59e816], esp
fld st(1)
xchg bh, dh
cmpsd dword [rsi], dword ptr [rdi]
scasb al, byte [rdi]
sbb dword [rdi], edx
test byte [rcx], al
cmp byte [rcx - 0xe], dil
add dword [rdx], esi
sbb edx, dword [rip - 0x1c8de881]
sbb al, 0x3a
add dword [rdi + 0x1483870], ebx
ret 0x1778
push rdi
scasb al, byte [rdi]
mov eax, ds
push rsp
jg 0x401fd2
xchg eax, r12d
xor byte [rsi + 0x65], dh
push rdi
jge 0x40200b
adc al, 0x7f
cmpsb byte [rsi], byte ptr [rdi]
test cl, bl
mov ss, word [rdi]
mov eax, dword [0x78d90047]
iretd
sub al, 9
lahf
and byte [rax + rdx*4 - 0x5a], ch
stosb byte [rdi], al
and cl, byte [rbp + 6]
sbb esi, esp
and bl, byte [rdx]
jb 0x401ff8
in al, 0xf
add ah, bl
sub dword [rsi], ecx
add dl, byte [rax + 0x3c4f2793]
sub cl, byte [rax]
add dword [rax - 0xe9be6fa], edx
sbb bl, ah
leave
shr dword [rsi - 0xcffb254], 0x2f
movabs al, byte [0x71772d8393c202c]
add ebp, dword [rdi]
and ch, byte [rdi - 0x261b0d8e]
add dword [rdi], ebp
add eax, edi
and ecx, dword [rsi - 0xe]
ror dword fs:[rbx + rax*4], cl
adc dl, byte [rax + 0x4100022d]
jb 0x401fe0
sub dword [rdx - 0xa], esi
mov dl, 0xce
xor byte [rcx], cl
fild qword [rdx]
add byte [rdi - 0x2d], bl
cmp dword [rax], ecx
or dword [rsp + rax*2], 0xffffff83
add al, 0x13
cmp dword ss:[rdx + 0x4f0448cb], edx
js 0x401ff0
sbb eax, 0x4845392
out dx, eax
fiadd dword [rsi + rcx*2]
js 0x40209b
cqo
and al, 0xe
add eax, 0x39d9b87f
test byte [rcx + 0x5c], al
mov dword [rip - 0x7bcf7800], 0x8d173b5d
jbe 0x402015
mov ebp, 0x54f9f12
lahf
adc ah, al
out dx, eax
test byte [rbx - 0x38], al
add ch, byte [rdi]
xlatb
test byte [rip + 0x720e4f37], 0xf2
xchg eax, ebx
adc byte [rbx + rax*4], bl
or al, 0x76
and dword [rdi + 0x17], esp
test byte [rax], ch
cmp al, 0x3b
enter 0x7e20, -0x4e
sbb esi, dword [rdi + 0x2f]
add byte [rax], cl
mov ebx, 0x6999e40
mov bl, 0x17
sbb dword [rbp + 0x47f66c1c], 0x35
xchg eax, edi
push rsp
cmp eax, ebx
leave
xchg eax, ebx
adc al, 0x1d
jle 0x40212e
scasb al, byte [rdi]
outsb dx, byte [rsi]
and byte ds:[rdi], cl
mov edi, 0x81971117
adc cl, dh
jae 0x4020c9
jg 0x402171
test byte [rdx], 0x7b
jmp 0x86eb00e
mov eax, 0x3d436224
add al, 0x36
enter -0x3e37, 0x27
or spl, r13b
mov ch, 0x5f
mov ebx, 0x8a20e40
out dx, eax
mov ebp, 0x60e40b29
cmpsd dword es:[rsi], dword ptr [rdi]
adc byte [rcx], cl
or dword [rdi], eax
nop
scasb al, byte [rdi]
sub bl, byte [rdi]
adc byte [rdi], dh
or dword [rdi], eax
xchg eax, edx
xor ecx, dword [rsi]
leave
push rax
or dword [rcx], 0x272047e7
sbb ebp, dword [rcx + 0x412b4417]
cmp dword [rcx], edi
enter -0x533e, 0x1c
or al, 0xd6
ror cl, cl
test al, 0x24
in al, dx
or dword [rbx + rdi*2], edi
and dword [rdi - 0x5c], ecx
sbb eax, dword [rdx + rcx]
xlatb
je 0x40216f
loope 0x4020f0
sub cl, byte [rdx]
in al, dx
leave
mov bl, 0x97
lock add dword ss:[rdi], edx
and byte [rcx + 8], al
add bl, byte [rdi - 0x50]
or edi, dword [rcx - 0xe]
or cl, ah
imul eax, dword [rdi - 0xf], 0x39
jnp 0x4021fc
rol byte [rbp + 0x4c], 4
outsb dx, byte [rsi]
add bl, byte [rdx]
and eax, 0xd6477ac7
and byte [rbp + 0x43], bh
jb 0x402211
adc byte [rdi], dh
or ah, byte [rax + 0x11]
xor ebx, dword [rsi - 0x38]
mov bl, 0xb
clc
or esp, edi
mov bl, 0x27
sbb eax, 0xb39e192
ja 0x4021d9
sub eax, 0x7272435f
nop
or rsi, qword gs:[r8 - 0x7b]
or dword ss:[rbx - 0x5740f44d], edx
mov byte [edi - 0x70], bl
ror dword [rsi + 0xe], 0x76
pop rax
jbe 0x40224d
test dword [rsi], esp
mov cl, 0x2f
adc eax, 0xe4f2f70c
leave
mov byte [r9], 0x6d
or al, 0xb
sub ah, byte [rax - 0x2f]
or al, 0x72
xor dword [rbx - 0x4c6f18f0], ebp
or dword [rip + 0x1d922fb7], 0xffffffa7
mov bh, 0x27
movsxd rsi, dword [rdx + 0x72]
or al, 0xd
and bh, 0xe
or eax, 0x9e42f19
xchg eax, edi
xchg eax, edx
sub al, 0x40
or eax, 0xe41c81ff
in al, 0xdc
pop rcx
xchg eax, edx
or eax, 0x760e4ec1
scasb al, byte [rdi]
push rbx
and dword [rcx + 0x6487275f], ecx
nop
call qword [rip + 0x53f0e31]
jb 0x4021c1
xchg eax, ebx
and al, 0x4c
or dword [rdx + rsi], 0xffffffd8
jnp 0x40226b
sub dword [rbx + 0x210d8438], edi
rcl dword [rdi], cl
mov dword [rcx], eax
cmp ecx, ebx
sub al, 0x4e
adc bh, ah
pop rdi
and cl, byte [rdi]
nop
sbb dword [rbp - 0x1bda5ec4], 0x47
outsb dx, byte [rsi]
xadd ecx, ecx
shr dword [rsi], -0x43
pop rcx
sbb esp, dword [rdi]
sbb eax, 0x5f839392
enter -0x74f1, -4
vmwrite rsi, rsi
sahf
mov edi, 0x103c2bec
xlatb
test dword [rbx], ebp
pop rsi
and byte [rdi], al
cmp dword [rsi - 0x54], esp
adc dl, bh
adc byte [rbx], ch
jmp 0x118b6345
movabs dword [0x176c2f1152d81761], eax
scasd eax, dword [rdi]
xchg dword [rax + 0x12f8d21], esi
adc dl, byte [rdi - 0x64]
or edi, dword [rcx + 0x5c]
adc dl, byte [r15 - 0x13f46f80]
nop
movsxd rdx, dword [rdx]
jnp 0x402233
or al, 0x72
jb 0x4022d7
sub al, 0x6f
fisub dword [rcx]
nop
xchg eax, ebx
cld
loopne 0x4022e7
iretd
js 0x402295
sub dl, byte [rbx]
cmpsd dword [rsi], dword ptr [rdi]
cmp dl, byte [rdi]
jno 0x4022cf
cmp dword [rsp + rbp*2], ebx
nop
xchg eax, ebx
adc edx, dword [rax + 0x133c4718]
jmp 0x4022e8
jbe 0x40225b
xchg byte [rdi], dl
scasb al, byte [rdi]
adc eax, dword [rdi]
jo 0x40232f
sahf
cmp al, 0xab
sbb byte [rbx], al
add dword [rbx - 0x70], eax
xor ebx, dword [rsi + 9]
fbstp tbyte [rbx - 0x2300ed]
loope 0x402349
or byte [rdx + 0x74], dh
jae 0x40236f
jne 0x402363
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
in eax, dx
push -1
push r10
pop rdi
push r11
push rsp
or dword [rax + 0x65], ecx
jb 0x402379
imul ebx, dword [edx], 0x6ffeef6f
pop rdi
je 0x40238c
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x402348
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
fistp qword [rsi - 5]
outsd dx, dword [rsi]
or dword [rdi + rbp*2 + 0x72], esi
jae 0x402398
jne 0x4023b4
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4023ad
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xd817f6ff
cmp byte [rip + 0x69665f24], dh
outsb dx, byte [rsi]
imul ecx, dword [rax], 0x79617272
pop rdi
outsb dx, byte gs:[rsi]
fdiv qword [rdi + 0x7274e35b]
jns 0x4023ac
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x40239e
wait
mov al, 0x6e
ror byte [rip + 0x2a74295f], 0x42
pushfq
pop rdx
sti
push qword [rsi + 0x70]
jo 0x4023a2
pop rdx
push rbx
je 0x4023ce
xor dword [rcx], edi
jo 0x4023ef
movsxd rsp, dword gs:[rbp + 0x77]
cdq
sub eax, 0xdb7d9dbb
ja 0x402400
lahf
jb 0x40240a
movsxd rsi, dword [rdx + rbx + 0x38]
imul r13d, dword [r15 + 0x3b], 0xd836b773
sub dword [rbx], esi
jg 0x402329
movsxd rsp, dword [rcx - 0x7f]
insd dword [rdi], dx
mov bh, 0xfd
lodsb al, byte [rsi]
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x340c650f
xor dword [rsi], ebp
out dx, al
jbe 0x402428
cmp eax, 0x6f63691d
imul ebp, dword [rcx + rbp*2], 0xd9bf0d7a
jbe 0x402436
push rdx
sub al, 0x6e
mov byte fs:[rbp + 0x59], ah
wrmsr
imul ebx, ebp, 0x69b7f77b
xor r14b, byte [rbp + 0x62]
pop rdi
int3
mov bl, 0x46
xchg eax, ebx
push 0x4d4152ff
pop r15
or r15b, byte [rbx]
or eax, dword [rdi + 0x4f]
mul byte [rax - 0x35]
push rbp
and byte [rax + 0x44], cl
push rdx
in al, dx
std
ret 0x4553
pop rsi
push rsp
sub r10b, r13b
outsb dx, byte fs:[rsi]
ja 0x4023f7
ret 0x9d10
jb 0x4023ea
pop rcx
mov r15b, 0xb7
lodsd eax, dword [rsi]
in al, dx
mov dl, 0x4e
cmp dword [rsi + 0x7878f775], edi
xor eax, 0x6b706f09
fnsave dword [rbx + 0x31]
imul esp, dword [rcx - 0x3d89a07f], 0xafb6c67f
jnp 0x40249b
xor byte [rdi + 0x15], bl
adc al, 0x6c
ret
jae 0x40246f
movabs eax, dword [0xfcc38fc3bf6dad0]
xchg eax, esp
cmp bh, dl
or ch, ch
insd dword [rdi], dx
xor al, 2
je 0x4024cb
adc byte [r9], r12b
sub byte [rdx], dl
fnstenv [rbx]
imul dword [rbp + 0x46]
insd dword [rdi], dx
or eax, 0x7367616c
cmp ch, byte [rax]
xor dword [rax], esi
jg 0x40245d
outsd dx, dword [rsi]
mov edi, 0xf50492b
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x624c4528
xor byte [rbp + 0x45], al
cmp dword [rbx + 0x5b], -0x14
pop rdi
push rbx
sbb dword [rax + 0x32], eax
fdivr dword [rdi + 0x70]
jne 0x402516
push 0x6165685f
jo 0x4024d9
insb byte [rdi], dx
push rbx
sbb dh, byte [rbx + rax*8 + 0x3457602f]
sahf
mov bl, 0x45
jbe 0x4024c8
cmp dword [rbx + rbx*8 + 0x36], ebp
jb 0x402511
pop rax
push rsp
push rsp
push rsp
xor cl, bh
or eax, 0x850a4330
in al, 0x73
ret 0xdb6b
mov dl, 0x4e
sbb eax, 0xecb453f
in al, dx
ret 0xd67f
cmp eax, 0x9c707974
xor al, 0xcc
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x40252a
imul eax, dword [rax + 0x40], 0xd885b97e
dec dword [rcx + 0x42]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x5e
add dh, byte [rdi - 0x55]
outsd dx, dword [rsi]
pop rsp
mov ebx, 0x3b52764b
movsb byte [rdi], byte ptr [rsi]
jb 0x402537
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40256e
pop rdx
movabs eax, dword [0xb24bf70ec90468d1]
test byte [rbp + 0x18], ch
out 0xbd, eax
je 0x402596
mov di, 0xb094
insd dword [rdi], dx
iretd
push rbx
add cl, byte ss:[rip - 0x2709c405]
pop rsp
insb byte [rdi], dx
je 0x40256a
push rdx
in eax, dx
movsxd rcx, dword [rbx + 0x535a6f3]
jp 0x40259d
movsxd rdx, dword [rcx + 0x20]
jl 0x4024d1
sbb bl, byte [rdx + 0x24]
mov dh, 0x4b
xor al, 0x2d
and eax, 0x4e560d33
jae 0x40252f
adc byte [rax + rdx*2 + 0x535c45ed], 0xcb
clc
jb 0x402590
jne 0x4025cf
jne 0x4025a5
int3
popfq
push rdx
mov cs, word [rax + 0x69]
retf
retf 0xcae
ret
retf 0x61c9
cmp dword [rdi - 0x33], ebx
xor byte [rax + rsi + 0x429cdf9d], cl
ret
or ah, bl
popfq
jae 0x402514
mov ch, 0x82
loope 0x402512
movsxd rbp, dword [rax + 0x61]
ror eax, 0x19
push 0x32
mov esp, 0x527f10cd
imul esp, ebx, -0x5b
outsd dx, dword [rsi]
out 0x86, eax
mov al, 0x61
xchg eax, ecx
insd dword [rdi], dx
cmp byte [rbx - 0x24a51f7a], dl
push rbx
retf 0x1670
movsxd rcx, dword [rsi]
fnsave dword [rbp - 0x7a]
in eax, dx
xchg eax, ebp
out 0x37, al
lodsw ax, word [rsi]
ja 0x4025bf
pop r11
test dh, dh
mov cl, 0x37
push rdx
cmp byte [rsi], dh
sub eax, 0xd16606e4
adc eax, 0x6ee15d5a
xor al, 0x42
push 0x1a3488c1
xor esi, ebx
sal dh, cl
xor dl, al
sal byte [rbx], 1
test al, 0x67
cmp ch, byte [rsi - 0x69]
xor esi, 0x764ae669
push rdx
and eax, dword [rbx - 0x46]
or byte [rbp - 0x2e31f9eb], ch
mov ebx, 0x59b85f76
movabs dword [0x7be1b9bac4cc051d], eax
sub byte [rip + 0x53e067d8], 0x61
in eax, 0x36
or al, 0xc2
test byte [rbp + 0x68741e5b], dh
shr dword [esi], -0x3c
wait
mov fs, word [rax + rdi*4 + 0x31431249]
outsb dx, byte [rsi]
mov ah, 0xc2
and al, 0x37
jmp 0x402672
xor eax, 0xc630d9da
ja 0x4026ad
push rbx
stosb byte [rdi], al
insd dword [rdi], dx
insb byte [rdi], dx
and al, 0xe3
not byte [rax]
sbb ebx, dword [rdi + 0x32]
push rbp
xor eax, 0x66b6b1ee
jo 0x4026ba
movabs al, byte [0x78c88460ea725a04]
cli
out dx, al
insb byte [rdi], dx
movabs dword [0x538030d6704f0ed0], eax
sbb dword [rsi], edx
mov al, 0x8d
in eax, dx
xor eax, 0x528c786d
iretd
xor byte [rax - 0x69], al
sar byte [rax + 0x52], 0x52
push rax
jae 0x4026d7
mov ss, word [rbp + 0x6109adb5]
js 0x4026e3
mov esp, 0x5e9182e
sbb byte [rip + 0x63645463], ch
adc cl, al
push rdx
retf 0x221b
test byte [rcx + rcx*2], dl
fisttp word [rcx]
imul esi, dword [rsi + 0x6f], 0xc2062874
stosb byte [rdi], al
test byte [rsi], dh
or dword [rdx + rdi*8 - 0x2c], ecx
or ah, byte [rax]
push rbx
div dword [rcx - 0x57]
add eax, 0xdf65da1
sbb al, 0x4d
pop rdi
in eax, dx
mov dh, 0x25
mov eax, 0x54b6430c
sub ecx, esp
add al, 9
xor eax, 0xa3374b50
jrcxz 0x4026fb
sal dword [rdx + rsi*2], cl
shr byte [rdi + 0x4f], cl
nop
adc esi, dword [rsi + 0x64a14842]
push rbp
xor eax, 0x31ad70f0
test byte [rsi + 0x6b], bh
and dword [rbx], ebp
xchg eax, ebp
or esp, ecx
or ch, byte [rcx + 0x14]
rcl byte [rdx], cl
push rcx
and al, 0x81
xchg eax, ebp
movabs al, byte fs:[0x26070242fb4f144f]
imul edi, esp, 0x9840b08c
sal byte [rax], 1
imul esp, dword ss:[rbx + 0x52618d59], 0x29662494
mov esi, 0x84d9d691
jno 0x4026c9
jbe 0x402790
movabs byte [0xb230b9c33e849621], al
add dword [rcx + 0x7732d43], eax
imul ebp, dword [rdx + rcx], 0x611c3304
push rbx
or al, 0x29
mov word [rdi], gs
xchg eax, esi
xchg eax, edx
insb byte [rdi], dx
cmp dword [rax + 0x55], esi
and dword [rax - 0x1c59f7b8], ebx
xchg dword [rdi], ebx
jo 0x4027bb
or dword [rdx + 0x75], 0x493f1cf7
push rdx
add eax, 0x20020702
pop r9
adc al, 0x1e
xchg al, al
push rsp
pop rax
mov eax, dword [rax]
adc cl, byte [rdi + 0x43306421]
push rdx
and eax, 0x3581022d
nop
xchg dword ss:[rcx + 0x18], esp
clc
xor al, 0x95
imul esp, dword [rsi - 0x2c], 0x9587697
sub edx, dword [rdx - 0x2a61821a]
push rcx
mov ecx, edx
add al, 0x6c
lahf
movabs rax, qword [0x5c845eb3b5421124]
fdiv dword [rbx + 0x6f]
jo 0x402814
pop rcx
insb byte [rdi], dx
mov ss, word [rbx]
or eax, 0x79db5033
test dword [rcx + rax*4 + 7], esi
mov bh, 0x49
movsxd rbp, dword [rbx - 0x45]
add esi, dword [rdx]
pushfq
sub edi, dword [rax + 0x33]
xchg eax, esi
push rsp
xor dword [rbp - 7], esp
cmp eax, 0x3e9a5830
xor dword [rax], esi
jo 0x40277a
and byte [rcx + 0x42], ah
xchg byte [rcx + rbx*2], bh
call 0xfffffffff200bec6
jns 0x402836
push -0x29
je 0x40275a
push rsi
add dl, byte ss:[rax + rbx*8 - 0x50]
add eax, 0x32e4add2
jrcxz 0x4027fe
xchg eax, edx
imul eax, dword [rcx], 0x2d
pop rcx
jg 0x40278b
movabs dword [0x6f762d6f1f2693ab], eax
test byte [r9], dl
mov dl, 0x6f
movsb byte [rdi], byte ptr [rsi]
xor ebp, dword [rcx]
mov byte [rcx - 0x21b1ff4f], 0x63
int 0xc0
adc eax, 0x3fbad22c
or edx, dword [rbp - 0x46408f10]
jl 0x4027f6
mov dh, 0xc2
adc eax, 0x66036830
insb byte [rdi], dx
in eax, dx
nop
test bl, cl
cld
xor al, 0x98
xchg eax, ecx
xchg eax, edi
retf 0x65b6
movsxd rbp, dword [rax + r14*8 + 0x69]
or byte [rbx], al
and dword [rbx], esi
mov esp, 0xca438cba
xor dword [rdi - 0x67], ecx
imul byte [rax + 0x65]
std
cmc
out 0xaf, eax
cdqe
movabs dword [0x1e0cb530355de854], eax
call 0x4a80c770
adc rax, -0x4d0220fb
jo 0x4028b0
mov es, word [rbx - 0x1e]
scasd eax, dword [rdi]
cld
lodsb al, byte [rsi]
xchg eax, esi
loop 0x4028d8
imul esp, dword [rbp - 0x50], 0x21
rcr byte [rdx + 0x619a6f98], 0x74
add r15b, byte [r11 + 0x6c]
insb byte [edi], dx
in eax, dx
shl byte [rcx + 4], 0x72
imul eax, dword [rax + 0x244848e4], 0x1347f9d
mov dl, 0x34
in al, dx
push rdx
int 0xcf
xor byte [rax - 0x20], bh
add dword [rdi + 0x72e32ecd], esp
loopne 0x40290a
pop rbx
sbb dword [rbx + rax + 0x5f], ecx
sbb ah, byte [rbx + 0x54]
adc eax, 0xa71240a0
mov sil, 0x67
lodsb al, byte [rsi]
test byte [rbp + rdi + 0x40374aeb], al
mov ch, byte [rsi + rcx]
or dword [rbp - 0x4a], eax
mov dl, 0x28
je 0x4028ca
or al, 0x20
popfq
and dword [rsi - 0x6a9accb0], edx
push rsp
xor bl, byte [rsi + 0x20]
cmpsd dword [rsi], dword ptr [rdi]
pop rdx
lodsd eax, dword [rsi]
push rbp
mov dh, 0x6b
sub esi, edi
and al, 0xbb
jbe 0x402947
cmpsb byte [rsi], byte ptr [rdi]
jbe 0x402935
cmc
jbe 0x402912
and dword [rip + 0x2b784241], ebx
add al, 0xf8
pop r15
xor dword [rsi], ebp
xor ecx, dword [rax]
push rcx
pop rax
imul eax, dword [rcx - 0x6c38f2fc], -0x32
lodsb al, byte [rsi]
mov ebp, 0x358a569e
loop 0x402943
mov ch, 0x41
jb 0x402917
lodsb al, byte [rsi]
insb byte [rdi], dx
insd dword [rdi], dx
mov dword [rsi], esp
push rsi
leave
sub r13b, byte [r14 + 0x29]
adc al, 0x60
jnp 0x402916
push rbp
outsb dx, byte [rsi]
ja 0x40289d
sub ebx, dword fs:[rcx - 0x7e]
sub rbp, qword [r13 - 0x3f]
xchg dword [r8], esi
loop 0x4028e7
imul edx, edi, 0xc08b0851
or ah, ch
cmp byte [rax + 0x45a7ab70], al
insd dword [rdi], dx
sub byte [rbx], dh
jb 0x402904
add dh, byte [rbx + rbp*4 + 0x5b786e61]
sub al, 0x58
leave
jo 0x402996
movsxd r13, dword [r9 - 0xff7f58f]
push rax
stosb byte [rdi], al
xchg eax, edx
add byte gs:[rbp - 0x1e6f36bf], 0x47
sbb eax, 0x2e009019
jae 0x4029df
test eax, 0x51aec9d8
fild word [rdi]
je 0x4029e1
push 0x75b96309
insd dword [rdi], dx
push 0x2c
jo 0x402980
outsb dx, byte [rsi]
outsd dx, dword [rsi]
movabs byte cs:[0x600db02da9982ee0], al
jne 0x40295f
movsd dword [rdi], dword ptr [rsi]
ficomp word [rbx - 0x996d29c]
or eax, 0x9b5938e9
mov ecx, 0x796409b7
outsb dx, byte [rsi]
sbb dword [r14 - 0x3e], r13d
int3
ret 0xc876
jae 0x4029b4
pop rdi
sbb ebx, dword [rsi]
in al, dx
xor eax, 0x281fbe1a
or dword [rax + 0x6c], esi
je 0x402a26
xor esi, esp
jb 0x402a04
or ch, byte [rdi + rbp*2]
or byte [rbp - 0x79], ch
jo 0x4029c8
cld
add eax, 0xd96f2414
vminsd xmm13, xmm11, qword [esi]
push 0x7264682b
or eax, 0x6e5b6ad8
pop rbp
pop rbp
pop rdi
jo 0x402a05
sub dword [rdi + rdx*2 + 0x13], ebx
mov ebp, 0x684a116c
mov cl, 0xf
wait
or ebp, dword [r10 + 0x63]
jb 0x402993
mov bl, 0xd9
pop rbx
add byte cs:[rax + 0x7b], ch
pop rsi
mov dh, 0xb5
xor al, 4
mov cl, 0x52
std
add byte [rax], al
sub byte [rdi], al
or eax, 0xf69b1b00
add ax, 0x7ec9
xor esp, dword [rbx + rax*2]
jb 0x402a36
add dword [rbx], esp
and byte [rbx + 0x5407480c], al
push rsp
leave
nop
or al, 0xc9
and byte [rcx + rsi], al
leave
and byte [rbx + 0x2474740c], al
in al, 0x90
ja 0x402a78
jg 0x402a2e
ljmp [rdi - 0x68]
nop
sbb dword [rax + 0x69010538], ebx
xchg byte [rax + rcx + 0x4e], ah
or edi, dword [rcx]
cmp ebp, dword [rax + rdx*4 - 0x30]
rcl byte [rax], 1
add edi, ebx
or word [rsi + rsi + 0x3f], 0x18
push rsi
and al, dl
cmp edx, dword [rax]
retf
xchg eax, edx
out dx, al
and bh, byte [rcx + 0x3a]
add eax, 0x9cffbf5e
mov ebp, 0x757c409
mov edi, 0xd90dd240
nop
add al, byte [rdi]
imul edi, dword [rdi], -2
jb 0x402a66
add edx, dword es:[rax + 7]
cmpsd dword [rsi], dword ptr [rdi]
nop
test byte [rcx], ch
wait
or al, 6
jp 0x402ae1
cwde
wait
sbb al, 0x16
loopne 0x402a9c
out 0xd8, eax
xchg eax, ebp
pop r8
inc dword [rdi + rdi + 0x320c8320]
clc
clc
add byte [rcx + 0x190288e4], bh
mov ss, word [rbx]
outsd dx, dword [rsi]
leave
or edi, edi
sbb cl, byte [rcx + 0xc83903f]
xor ah, byte [rax + 0x1101c0a0]
mov dl, 0x21
mov ebx, 0x3f940710
sbb byte [rsi + 6], ch
xchg r12b, r13b
enter -0x62f1, 0x3f
jo 0x402a8d
add eax, 0x7f07ccf2
and bl, byte [rip - 0x7bfa64c1]
in al, 0xa3
test dword [rdi], 0x99c94349
dec dword [rcx]
test eax, 0x8320c9bf
or eax, 0x33a03fa0
or al, 0x32
and al, 0x43
mov cl, 0xd4
xchg eax, edx
xor esp, 1
mov edi, 0x4449b827
sysret
lodsb al, byte [rsi]
enter -0x6dd2, 8
leave
and eax, 0x3749b967
jg 0x402b99
or dl, byte [rsi - 0x5924f2cc]
sub byte [rcx], bh
loope 0x402af9
pop rdi
mov edi, 0x90193710
outsb dx, byte [rsi]
out 0x3f, eax
psubb mm0, qword [rdi]
out 2, eax
add al, 0xff
add ch, byte [rdx + rdx - 0x78]
push rdi
wait
sub eax, 0x1f9bf8e9
or al, 0xc9
leave
xor edi, dword [rdi - 0x10]
add dword [rsi], eax
adc byte [rax - 0x677cde93], dl
mov edi, 0x8b90723f
or byte [rcx], al
add edx, ecx
lodsb al, byte es:[rsi]
js 0x402b60
jo 0x402b06
and dword [rcx], ebx
or dh, al
sub al, 0xe9
jg 0x402b8e
or al, cl
xchg eax, ebx
add byte [rdi + 0x41], bh
or dword [rsi], esi
fcom dword [rax + 0x7f15205c]
xor byte [rdi], dl
and dword [rbx + rax*8 + 0x3f343f42], ecx
pushfq
mov dl, 0xd9
adc dword [rbx], edi
sub al, 0x92
jg 0x402bc6
add dword [rbx - 0x350a61b2], edi
add byte [rax], bh
lcall [r8]
nop dword [rcx]
insb byte [rdi], dx
add byte [rcx + 0x36], ch
or dword [rdi], edi
mov esp, esp
leave
push rax
push rax
call qword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x8f7fdea], ecx
rcl dword [rsi + 0x6363cdfc], 1
pop rdi
jo 0x402c1a
add byte [rax], al
or rax, 0x6d700000
add byte [rax], al
add byte [r8], al
mov dh, 0xf4
add byte [rax], al
add bh, bh
