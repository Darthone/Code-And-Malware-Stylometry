xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x604107
push rbp
sub rax, obj.completed.7585
cmp rax, 0xe
mov rbp, rsp
jbe 0x4010d0
mov eax, 0
test rax, rax
je 0x4010d0
pop rbp
mov edi, obj.completed.7585
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.completed.7585
push rbp
sub rsi, obj.completed.7585
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401118
mov eax, 0
test rax, rax
je 0x401118
pop rbp
mov edi, obj.completed.7585
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x202fd9], 0
jne 0x40113a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x202fc6], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401150
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40114b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x98
mov qword [rbp - 0x98], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x80], 0
mov dword [rbp - 0x7c], 0
cmp dword [rbp - 0x7c], 2
jg 0x4011b1
mov eax, dword [rbp - 0x7c]
cdqe
mov eax, dword [rax*4 + obj.px]
add dword [rbp - 0x80], eax
add dword [rbp - 0x7c], 1
jmp 0x401196
mov dword [rbp - 0x78], 0
cmp dword [rbp - 0x78], 2
jg 0x401215
mov eax, dword [rbp - 0x78]
cdqe
mov eax, dword [rax*4 + obj.px]
add eax, eax
cmp eax, dword [rbp - 0x80]
jle 0x40120f
lea rax, [rbp - 0x81]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x81]
mov rax, qword [rbp - 0x98]
mov esi, 0x402da7
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x81]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401415
add dword [rbp - 0x78], 1
jmp 0x4011b8
mov qword [rbp - 0x60], 0
mov qword [rbp - 0x58], 0
mov qword [rbp - 0x50], 0
mov dword [rbp - 0x74], 0
cmp dword [rbp - 0x74], 2
jg 0x401273
mov eax, dword [rbp - 0x74]
cdqe
mov edx, dword [rax*4 + obj.px]
mov eax, dword [rbp - 0x74]
cdqe
mov dword [rbp + rax*8 - 0x60], edx
mov eax, dword [rbp - 0x74]
cdqe
mov rsi, rax
mov edi, obj.rval_abi:cxx11_
call 0x401030
movzx edx, byte [rax]
mov eax, dword [rbp - 0x74]
cdqe
mov byte [rbp + rax*8 - 0x5c], dl
add dword [rbp - 0x74], 1
jmp 0x401234
lea rax, [rbp - 0x60]
add rax, 0x18
lea rdx, [rbp - 0x60]
mov rsi, rax
mov rdi, rdx
call sym.std::sort_std::pair_int_char___
mov dword [rbp - 0x70], 0
mov dword [rbp - 0x6c], 0
mov eax, dword [rbp - 0x6c]
cmp eax, dword [rbp - 0x80]
jge 0x4012e3
mov eax, dword [rbp - 0x70]
cdqe
mov eax, dword [rbp + rax*8 - 0x60]
test eax, eax
jne 0x4012b3
add dword [rbp - 0x70], 1
jmp 0x4012a0
mov eax, dword [rbp - 0x70]
cdqe
movzx edx, byte [rbp + rax*8 - 0x5c]
mov eax, dword [rbp - 0x6c]
cdqe
mov byte [rax + obj.ch], dl
mov eax, dword [rbp - 0x70]
cdqe
mov eax, dword [rbp + rax*8 - 0x60]
lea edx, [rax - 1]
mov eax, dword [rbp - 0x70]
cdqe
mov dword [rbp + rax*8 - 0x60], edx
add dword [rbp - 0x6c], 2
jmp 0x401298
mov dword [rbp - 0x68], 1
mov eax, dword [rbp - 0x68]
cmp eax, dword [rbp - 0x80]
jge 0x401335
mov eax, dword [rbp - 0x70]
cdqe
mov eax, dword [rbp + rax*8 - 0x60]
test eax, eax
jne 0x401305
add dword [rbp - 0x70], 1
jmp 0x4012f2
mov eax, dword [rbp - 0x70]
cdqe
movzx edx, byte [rbp + rax*8 - 0x5c]
mov eax, dword [rbp - 0x68]
cdqe
mov byte [rax + obj.ch], dl
mov eax, dword [rbp - 0x70]
cdqe
mov eax, dword [rbp + rax*8 - 0x60]
lea edx, [rax - 1]
mov eax, dword [rbp - 0x70]
cdqe
mov dword [rbp + rax*8 - 0x60], edx
add dword [rbp - 0x68], 2
jmp 0x4012ea
lea rax, [rbp - 0x81]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x81]
lea rax, [rbp - 0x40]
mov esi, 0x402da9
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x81]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x64], 0
mov eax, dword [rbp - 0x64]
cmp eax, dword [rbp - 0x80]
jge 0x40139d
mov eax, dword [rbp - 0x64]
cdqe
movzx eax, byte [rax + obj.ch]
movsx edx, al
lea rax, [rbp - 0x40]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add dword [rbp - 0x64], 1
jmp 0x401372
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x98]
mov rsi, rdx
mov rdi, rax
call 0x400f40
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401415
mov rbx, rax
lea rax, [rbp - 0x81]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x81]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x98]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401430
call sym.imp.__stack_chk_fail
add rsp, 0x98
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x78
mov qword [rbp - 0x78], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov esi, obj.N
mov edi, obj.fin
call sym.std::istream::operator__
mov esi, obj.nx
mov rdi, rax
call sym.std::istream::operator__
mov esi, 0x6045a0
mov rdi, rax
call sym.std::istream::operator__
mov esi, 0x604598
mov rdi, rax
call sym.std::istream::operator__
mov esi, 0x60459c
mov rdi, rax
call sym.std::istream::operator__
mov esi, 0x604594
mov rdi, rax
call sym.std::istream::operator__
mov esi, 0x6045a4
mov rdi, rax
call sym.std::istream::operator__
mov dword [rbp - 0x68], 0
cmp dword [rbp - 0x68], 2
jg 0x40165d
mov eax, dword [rbp - 0x68]
cdqe
mov edx, dword [rax*4 + obj.nx]
mov eax, dword [rbp - 0x68]
add eax, 3
cdqe
mov eax, dword [rax*4 + obj.nx]
cmp edx, eax
jge 0x4014f9
mov rax, qword [rbp - 0x78]
mov esi, obj.imp_abi:cxx11_
mov rdi, rax
call 0x400fd0
jmp 0x40188c
mov eax, dword [rbp - 0x68]
cdqe
mov eax, dword [rax*4 + obj.nx]
test eax, eax
jle 0x40162b
mov eax, dword [rbp - 0x68]
cdqe
mov edx, dword [rax*4 + obj.nx]
mov eax, dword [rbp - 0x68]
add eax, 3
cdqe
mov eax, dword [rax*4 + obj.nx]
cmp edx, eax
jne 0x40162b
mov eax, dword [rbp - 0x68]
cdqe
mov edx, dword [rax*4 + obj.nx]
mov eax, dword [rbp - 0x68]
add eax, 3
cdqe
mov eax, dword [rax*4 + obj.nx]
add edx, eax
mov eax, dword [rip + 0x20302d]
cmp edx, eax
je 0x40156d
mov rax, qword [rbp - 0x78]
mov esi, obj.imp_abi:cxx11_
mov rdi, rax
call 0x400fd0
jmp 0x40188c
lea rax, [rbp - 0x69]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x69]
lea rax, [rbp - 0x40]
mov esi, 0x402da9
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x69]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x64], 0
mov eax, dword [rbp - 0x68]
cdqe
mov eax, dword [rax*4 + obj.nx]
cmp eax, dword [rbp - 0x64]
jle 0x401607
mov eax, dword [rbp - 0x68]
cdqe
mov rsi, rax
mov edi, obj.rval_abi:cxx11_
call 0x401030
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x40]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
mov eax, dword [rbp - 0x68]
add eax, 3
cdqe
mov rsi, rax
mov edi, obj.rval_abi:cxx11_
call 0x401030
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x40]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add dword [rbp - 0x64], 1
jmp 0x4015a1
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call 0x400f40
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40188c
mov eax, dword [rbp - 0x68]
cdqe
mov edx, dword [rax*4 + obj.nx]
mov eax, dword [rbp - 0x68]
add eax, 3
cdqe
mov eax, dword [rax*4 + obj.nx]
sub edx, eax
mov eax, dword [rbp - 0x68]
cdqe
mov dword [rax*4 + obj.px], edx
add dword [rbp - 0x68], 1
jmp 0x4014ba
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.get_sol_abi:cxx11_
lea rax, [rbp - 0x40]
mov esi, 0
mov rdi, rax
call 0x401030
movzx eax, byte [rax]
cmp al, 0x2d
sete al
test al, al
je 0x40169c
mov rax, qword [rbp - 0x78]
mov esi, obj.imp_abi:cxx11_
mov rdi, rax
call 0x400fd0
jmp 0x40181f
mov dword [rbp - 0x60], 0
cmp dword [rbp - 0x60], 2
jg 0x4016b9
mov eax, dword [rbp - 0x60]
cdqe
mov byte [rbp + rax - 0x50], 0
add dword [rbp - 0x60], 1
jmp 0x4016a3
mov dword [rbp - 0x5c], 0
mov eax, dword [rbp - 0x5c]
movsxd rbx, eax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::length
cmp rbx, rax
setb al
test al, al
je 0x4017f2
mov eax, dword [rbp - 0x5c]
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x401030
movzx eax, byte [rax]
movsx eax, al
mov esi, eax
mov edi, obj.fout
call 0x400f10
mov dword [rbp - 0x58], 0
cmp dword [rbp - 0x58], 2
jg 0x4017e9
mov eax, dword [rbp - 0x58]
cdqe
movzx eax, byte [rbp + rax - 0x50]
xor eax, 1
test al, al
je 0x401761
mov eax, dword [rbp - 0x5c]
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x401030
movzx ebx, byte [rax]
mov eax, dword [rbp - 0x58]
cdqe
mov rsi, rax
mov edi, obj.rval_abi:cxx11_
call 0x401030
movzx eax, byte [rax]
cmp bl, al
jne 0x401761
mov eax, 1
jmp 0x401766
mov eax, 0
test al, al
je 0x4017e0
mov eax, dword [rbp - 0x58]
cdqe
mov byte [rbp + rax - 0x50], 1
mov dword [rbp - 0x54], 0
mov eax, dword [rbp - 0x58]
add eax, 3
cdqe
mov eax, dword [rax*4 + obj.nx]
cmp eax, dword [rbp - 0x54]
jle 0x4017e0
mov eax, dword [rbp - 0x58]
add eax, 3
cdqe
mov rsi, rax
mov edi, obj.rval_abi:cxx11_
call 0x401030
movzx eax, byte [rax]
movsx eax, al
mov esi, eax
mov edi, obj.fout
call 0x400f10
mov eax, dword [rbp - 0x58]
cdqe
mov rsi, rax
mov edi, obj.rval_abi:cxx11_
call 0x401030
movzx eax, byte [rax]
movsx eax, al
mov esi, eax
mov edi, obj.fout
call 0x400f10
add dword [rbp - 0x54], 1
jmp 0x40177b
add dword [rbp - 0x58], 1
jmp 0x40170e
add dword [rbp - 0x5c], 1
jmp 0x4016c0
lea rax, [rbp - 0x69]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x69]
mov rax, qword [rbp - 0x78]
mov esi, 0x402da9
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x69]
mov rdi, rax
call sym.std::allocator_char_::_allocator
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40188c
mov rbx, rax
lea rax, [rbp - 0x69]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x69]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401875
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x78]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4018a4
call sym.imp.__stack_chk_fail
add rsp, 0x78
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edi, 7
call sym.std::setprecision
mov ebx, eax
mov esi, sym.std::fixed
mov edi, obj.fout
call sym.std::ostream::operator__
mov esi, ebx
mov rdi, rax
call sym.std::operator___char_std::char_traits_char__
lea rax, [rbp - 0x48]
mov rsi, rax
mov edi, obj.fin
call sym.std::istream::operator__
mov dword [rbp - 0x44], 1
mov eax, dword [rbp - 0x48]
cmp dword [rbp - 0x44], eax
jg 0x401972
mov esi, str.Case__
mov edi, obj.fout
call sym.std::operator___std::char_traits_char__
mov rdx, rax
mov eax, dword [rbp - 0x44]
mov esi, eax
mov rdi, rdx
call 0x400eb0
mov esi, 0x402db1
mov rdi, rax
call sym.std::operator___std::char_traits_char__
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.run_abi:cxx11_
lea rax, [rbp - 0x40]
mov rsi, rax
mov edi, obj.fout
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov esi, 0x402db4
mov edi, obj.fout
call sym.std::operator___std::char_traits_char__
add dword [rbp - 0x44], 1
jmp 0x401900
mov eax, 0
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4019a7
jmp 0x4019a2
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov dword [rbp - 0x24], edi
mov dword [rbp - 0x28], esi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
cmp dword [rbp - 0x24], 1
jne 0x401b17
cmp dword [rbp - 0x28], 0xffff
jne 0x401b17
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
mov edx, 8
mov esi, str.B.in
mov edi, obj.fin
call sym.std::basic_ifstream_char_std::char_traits_char__::basic_ifstream
mov edx, obj.__dso_handle
mov esi, obj.fin
mov edi, sym.std::basic_ifstream_char_std::char_traits_char__::_basic_ifstream
call sym.imp.__cxa_atexit
mov esi, 0x20
mov edi, 0x10
call 0x401c10
mov edx, eax
mov esi, str.B.out
mov edi, obj.fout
call sym.std::basic_ofstream_char_std::char_traits_char__::basic_ofstream
mov edx, obj.__dso_handle
mov esi, obj.fout
mov edi, sym.std::basic_ofstream_char_std::char_traits_char__::_basic_ofstream
call sym.imp.__cxa_atexit
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rax, [rbp - 0x19]
mov rdx, rax
mov esi, str.RBYGOV
mov edi, obj.rval_abi:cxx11_
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov edx, obj.__dso_handle
mov esi, obj.rval_abi:cxx11_
mov edi, sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
call sym.imp.__cxa_atexit
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rax, [rbp - 0x19]
mov rdx, rax
mov esi, str.IMPOSSIBLE
mov edi, obj.imp_abi:cxx11_
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov edx, obj.__dso_handle
mov esi, obj.imp_abi:cxx11_
mov edi, sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
call sym.imp.__cxa_atexit
jmp 0x401b17
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x401b2b
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov edx, 0x40
mov rax, qword [rbp - 8]
bsr rax, rax
xor rax, 0x3f
cdqe
sub rdx, rax
mov rax, rdx
sub rax, 1
pop rbp
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
mov eax, dword [rbp - 4]
and eax, dword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
mov eax, dword [rbp - 4]
or eax, dword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov eax, dword [rbp - 4]
not eax
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov rax, qword [rbp - 8]
mov eax, dword [rax]
mov edx, dword [rbp - 0xc]
mov esi, edx
mov edi, eax
call 0x401b92
mov edx, eax
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
mov rax, qword [rbp - 8]
mov eax, dword [rax]
mov edx, dword [rbp - 0xc]
mov esi, edx
mov edi, eax
call sym.std::operator_
mov edx, eax
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
mov eax, dword [rbp - 4]
or eax, dword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 0x1c], esi
mov dword [rbp - 0x20], edx
mov rax, qword [rbp - 0x18]
mov eax, dword [rax + 0x18]
mov dword [rbp - 4], eax
mov eax, dword [rbp - 0x20]
mov edi, eax
call 0x401ba4
mov edx, eax
mov rax, qword [rbp - 0x18]
add rax, 0x18
mov esi, edx
mov rdi, rax
call sym.std::operator__
mov edx, dword [rbp - 0x20]
mov eax, dword [rbp - 0x1c]
mov esi, edx
mov edi, eax
call sym.std::operator_
mov edx, eax
mov rax, qword [rbp - 0x18]
add rax, 0x18
mov esi, edx
mov rdi, rax
call 0x401bb2
mov eax, dword [rbp - 4]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov edx, 0x104
mov esi, 4
mov rdi, rax
call sym.std::ios_base::setf
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov eax, dword [rbp - 4]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
call sym.__gnu_cxx::__ops::__iter_less_iter
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x401d0e
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
cmp rax, qword [rbp - 0x20]
je 0x401d88
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdi, rax
call sym.std::__lg
lea rdx, [rax + rax]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push r12
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop_std::pair_int_char___long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__final_insertion_sort_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
sub rdx, rax
mov rax, rdx
cmp rax, 0x87
jle 0x401e3e
cmp qword [rbp - 0x48], 0
jne 0x401deb
mov rdx, qword [rbp - 0x40]
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
sub rsp, 8
push r13
mov rsi, rcx
mov rdi, rax
call sym.std::__partial_sort_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x401e3e
sub qword [rbp - 0x48], 1
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
sub rsp, 8
push r12
mov rsi, rdx
mov rdi, rax
call sym.std::__unguarded_partition_pivot_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov qword [rbp - 0x28], rax
mov rdx, qword [rbp - 0x48]
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop_std::pair_int_char___long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x40], rax
jmp 0x401dab
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
cmp rax, 0x87
jle 0x401eb9
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x80]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push r8
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 0x80]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rax
mov rdi, rdx
call sym.std::__unguarded_insertion_sort_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x401ed5
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rcx
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push r8
mov rsi, rcx
mov rdi, rax
call sym.std::__heap_select_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort_heap_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x30]
lea rcx, [rax - 8]
mov rax, qword [rbp - 0x28]
lea rsi, [rax + 8]
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
sub rsp, 8
push r8
mov rdi, rax
call sym.std::__move_median_to_first_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x28]
lea rcx, [rax + 8]
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rax
mov rdi, rcx
call sym.std::__unguarded_partition_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
cmp rax, qword [rbp - 0x40]
je 0x4020b8
mov rax, qword [rbp - 0x38]
add rax, 8
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
cmp rax, qword [rbp - 0x40]
je 0x4020b9
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x40208a
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x20]
lea rdx, [rax + 8]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::move_backward_std::pair_int_char___std::pair_int_char___
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_char_::operator_
jmp 0x4020ae
sub rsp, 8
push r12
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rdi, rax
call sym.std::__unguarded_linear_insert_std::pair_int_char_____gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
add qword [rbp - 0x20], 8
jmp 0x402016
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4020cd
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
cmp rax, qword [rbp - 0x40]
je 0x402135
sub rsp, 8
push r12
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rdi, rax
call sym.std::__unguarded_linear_insert_std::pair_int_char_____gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
add qword [rbp - 0x20], 8
jmp 0x402100
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40214a
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rcx
mov rsi, rdx
mov rdi, rax
call sym.std::__make_heap_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x30]
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
cmp rax, qword [rbp - 0x38]
jae 0x4021d5
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x4021ce
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
add qword [rbp - 0x18], 8
jmp 0x40218c
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
cmp rax, 0xf
jle 0x402228
sub qword [rbp - 0x20], 8
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap_std::pair_int_char_____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x4021ed
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x4022d4
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x40228f
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::pair_int_char___std::pair_int_char___
jmp 0x402341
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x4022bf
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::pair_int_char___std::pair_int_char___
jmp 0x402341
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::pair_int_char___std::pair_int_char___
jmp 0x402341
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x402301
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::pair_int_char___std::pair_int_char___
jmp 0x402341
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x40232e
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::pair_int_char___std::pair_int_char___
jmp 0x402341
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::pair_int_char___std::pair_int_char___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x402377
add qword [rbp - 8], 8
jmp 0x402358
sub qword [rbp - 0x10], 8
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 0x18]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x40239b
sub qword [rbp - 0x10], 8
jmp 0x40237c
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
jb 0x4023ab
mov rax, qword [rbp - 8]
jmp 0x4023c5
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::pair_int_char___std::pair_int_char___
add qword [rbp - 8], 8
jmp 0x402358
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov edx, dword [rax]
mov rax, qword [rbp - 0x10]
mov eax, dword [rax]
cmp edx, eax
jl 0x402407
mov rax, qword [rbp - 0x10]
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov eax, dword [rax]
cmp edx, eax
jl 0x40240e
mov rax, qword [rbp - 8]
movzx edx, byte [rax + 4]
mov rax, qword [rbp - 0x10]
movzx eax, byte [rax + 4]
cmp dl, al
jge 0x40240e
mov eax, 1
jmp 0x402413
mov eax, 0
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__int_char_
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_std::pair_int_char___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_backward_a2_true_std::pair_int_char___std::pair_int_char___
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x10]
add rax, 4
mov rdi, rax
call sym.std::forward_char_
movzx edx, byte [rax]
mov rax, qword [rbp - 8]
mov byte [rax + 4], dl
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x10], rax
sub qword [rbp - 0x10], 8
mov rdx, qword [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Val_less_iter::operator___std::pair_int_char__std::pair_int_char___
test al, al
je 0x40256c
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x10]
mov qword [rbp - 0x28], rax
sub qword [rbp - 0x10], 8
jmp 0x402527
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_char_::operator_
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40259f
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
sub rdx, rax
mov rax, rdx
cmp rax, 0xf
jle 0x402667
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x28]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x38]
add rax, rdx
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rcx, rax
mov rdx, qword [rbp - 0x20]
mov rsi, qword [rbp - 0x28]
mov rax, qword [rbp - 0x38]
sub rsp, 8
push rbx
mov rcx, qword [rcx]
mov rdi, rax
call sym.std::__adjust_heap_std::pair_int_char___long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
cmp qword [rbp - 0x28], 0
je 0x40266a
sub qword [rbp - 0x28], 1
jmp 0x402608
nop
jmp 0x40266b
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40267f
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_char_::operator_
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rcx, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rcx, qword [rcx]
mov esi, 0
mov rdi, rax
call sym.std::__adjust_heap_std::pair_int_char___long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402730
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_int_char_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_std::pair_int_char___false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_std::pair_int_char___
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_std::pair_int_char___
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_backward_a_true_std::pair_int_char___std::pair_int_char___
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__int_char_
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov qword [rbp - 0x50], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x48]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x28]
jle 0x4028e3
mov rax, qword [rbp - 0x28]
add rax, 1
add rax, rax
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x28]
shl rax, 3
lea rdx, [rax - 8]
mov rax, qword [rbp - 0x38]
add rdx, rax
mov rax, qword [rbp - 0x28]
lea rcx, [rax*8]
mov rax, qword [rbp - 0x38]
add rax, rcx
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::pair_int_char___std::pair_int_char___
test al, al
je 0x40289a
sub qword [rbp - 0x28], 1
mov rax, qword [rbp - 0x28]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x38]
add rax, rdx
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rcx, rax
mov rax, qword [rbp - 0x40]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x38]
add rax, rdx
mov rsi, rcx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x40], rax
jmp 0x402831
mov rax, qword [rbp - 0x48]
and eax, 1
test rax, rax
jne 0x402961
mov rax, qword [rbp - 0x48]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x28]
jne 0x402961
mov rax, qword [rbp - 0x28]
add rax, 1
add rax, rax
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x28]
shl rax, 3
lea rdx, [rax - 8]
mov rax, qword [rbp - 0x38]
add rax, rdx
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rcx, rax
mov rax, qword [rbp - 0x40]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x38]
add rax, rdx
mov rsi, rcx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x28]
sub rax, 1
mov qword [rbp - 0x40], rax
sub rsp, 8
push r12
call sym.__gnu_cxx::__ops::__iter_comp_val
add rsp, 0x10
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rcx, rax
mov rdx, qword [rbp - 0x20]
mov rsi, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
sub rsp, 8
push rbx
mov rcx, qword [rcx]
mov rdi, rax
call sym.std::__push_heap_std::pair_int_char___long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_val_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4029b4
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_char_::swap
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_std::pair_int_char___false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 0
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_backward_true_false_std::random_access_iterator_tag_::__copy_move_b_std::pair_int_char___std::pair_int_char___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x20]
cmp rax, qword [rbp - 0x28]
jle 0x402aa9
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
lea rax, [rbp - 0x30]
mov rdx, rax
mov rsi, rcx
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_val::operator___std::pair_int_char___std::pair_int_char__
test al, al
je 0x402aa9
mov eax, 1
jmp 0x402aae
mov eax, 0
test al, al
je 0x402b14
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rax, rdx
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rcx, rax
mov rax, qword [rbp - 0x20]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rax, rdx
mov rsi, rcx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 8]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 8], rax
jmp 0x402a6d
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rcx, rax
mov rax, qword [rbp - 0x20]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rax, rdx
mov rsi, rcx
mov rdi, rax
call sym.std::pair_int_char_::operator_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_int_
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 4]
mov rax, qword [rbp - 8]
add rax, 4
mov rsi, rdx
mov rdi, rax
call sym.std::swap_char_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
jle 0x402be5
sub qword [rbp - 0x20], 8
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rdx, rax
sub qword [rbp - 0x28], 8
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_char_::operator_
sub qword [rbp - 8], 1
jmp 0x402baf
mov rax, qword [rbp - 0x28]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__int_char_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
lea rax, [rbp - 0xc]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x402c90
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_char__
movzx eax, byte [rax]
mov byte [rbp - 9], al
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x18]
mov byte [rax], dl
lea rax, [rbp - 9]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x20]
mov byte [rax], dl
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x402d10
call sym.imp.__stack_chk_fail
leave
ret
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x2010b6]
push rbp
lea rbp, [rip + 0x2010be]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x402d76
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x402d60
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x61430000], ch
jae 0x402e13
and byte [rbx], ah
add byte [rdx], bh
and byte [rax], al
or al, byte [rax]
imul ebp, dword cs:[rsi], 0x756f2e42
outsd dx, dword cs:[rsi]
jne 0x402e34
add byte [rdx + 0x42], dl
push rdx
pop rcx
push r14
add byte [rcx + 0x4d], cl
push r8
push r11
push rbx
add byte [r8], r8b
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
lock add dword [rax], eax
add byte [rip - 0x34000000], bh
loopne 0x402de2
cmp al, 2
add byte [rax], al
pushfq
loop 0x402dea
dec dword [rdx + rax]
add byte [rax], al
xchg eax, edx
jrcxz 0x402df2
jmp qword [rsp + rax]
add byte [rax], al
out 0xff, al
dec dword [rsp + rax]
add bh, dl
push qword [rsp + rax]
add dl, bl
jmp 0x402e0a
push rsp
or dword [rax], eax
add byte [rsi - 0x13], bl
lcall [rdx + rcx]
add byte [rax], al
jae 0x402e07
jmp qword [rdx + rax]
add byte [rcx - 0x13], bh
inc dword [rdx + rax - 0x12810000]
jmp qword [rdx + rax - 0x127b0000]
inc esp
add al, byte [rax]
add byte [rbp + rbp*8 + 0x2e4ffff], ch
add byte [rax], al
mov esi, 0x4ffffed
add eax, dword [rax]
add al, dl
in eax, dx
jmp qword [rbx + rax]
add byte [rax], al
fsubp st(5)
inc dword [rbx + rax]
add byte [rip + 0x64ffffee], cl
add eax, dword [rax]
add byte [rsi + rbp*8], bh
inc dword [rbx + rax - 0x11b20000]
jmp qword [rbx + rax - 0x11500000]
inc esp
add eax, dword [rax]
add al, bl
out dx, al
jmp rsp
add eax, dword [rax]
add ah, ah
out dx, al
lcall [rsp + rax - 0x10c00000]
inc esp
add al, 0
add byte [rsi - 0x13000011], bh
add al, 0
add byte [rbp - 0x10], dh
call qword [rax - 0xef80000]
cmp al, 5
add byte [rax], al
int1
jmp qword [rbp + rax]
add al, bh
int1
dec dword [rbp + rax - 0xdfa0000]
ljmp [rbp + rax - 0xcfe0000]
call rsp
add eax, 0xf37f0000
cld
add eax, 0xf4080000
jmp qword [rsi + rax]
add byte [rax], al
pop rbx
hlt
dec dword [rsi + rax]
add byte [rax - 0xb], dh
ljmp [rsi + rax]
add bl, dh
cmc
dec dword [rsi + rax - 0x9be0000]
ljmp [rsi + rax - 0x9950000]
dec esp
add byte [rax], al
mov bh, 0xf6
push rsp
add byte [rax], al
idiv bh
call qword [rdi + rax]
add byte [rax], al
idiv bh
push qword [rdi + rax]
add byte [rax], al
sbb bh, dh
call qword [rdi + rax]
add ch, cl
idiv edi
push qword [rdi + rax]
add byte [rcx - 0x63000008], dh
add byte [rax], al
stc
inc esp
add byte [rax], al
mov cl, bh
jmp rsp
add byte [rax], al
movabs byte [0xfa00000804fffff9], al
stc
ljmp [rax + rcx]
add byte [rax], al
and edi, edx
dec dword [rax + rcx]
add cl, ch
sti
push qword [rax + rcx]
add byte [rdi], cl
cld
call qword [rax + rcx - 0x3e30000]
push qword [rax + rcx - 0x3c90000]
call rsp
or byte [rax], al
add byte [rax - 4], ch
push rsp
or byte [rax], al
add byte [rax - 3], dh
call qword [rcx + rcx]
add byte [rax], al
mov cl, 0xfd
push qword [rcx + rcx]
add byte [rax], al
sbb dh, bh
call qword [rcx + rcx]
add byte [rcx - 2], al
push qword [rcx + rcx]
add byte [rdi - 2], cl
call qword [rcx + rcx - 0x1420000]
push qword [rcx + rcx - 0x1340000]
call rsp
or dword [rax], eax
add byte [rdi + rdi*8 - 1], cl
cmp al, 0xa
add byte [rax], al
mov esp, 0x84ffffff
or al, byte [rax]
add byte [rax + rax], dl
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402fe7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov al, ah
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403017
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov dh, bl
inc eax
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rdi], al
jmp 0x403042
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add ch, ch
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
shr edx, cl
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rcx + 0x27ffffea], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add al, al
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
mov dl, 0xea
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 1
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
xchg eax, edx
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rcx + 0x2fffffea], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword fs:[rax], eax
add byte [rax + 0x12ffffea], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], al
add byte [rax], al
movabs byte [0x62ffffea], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add ah, ah
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], eax
add ah, ch
dec dword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4031f9
add eax, dword [rax]
adc byte [rax], al
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
call rsp
add al, byte [rax]
add byte [rsp + rsi*2], al
cmp byte [rax], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
mov dword [rdx], 0x8070c
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], r8b
add byte [rdx], dl
loop 0x40322a
push qword [rcx + 4]
add byte [rax], al
add al, 0x94
cmp byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
add al, 0xc
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
je 0x40324e
add byte [rax], al
pop rbx
out 0xff, al
inc dword [rbx]
add dword [rax], eax
add byte [rax + rax*8], al
cmp byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
stc
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
jl 0x403278
add byte [rax], al
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rdx + rbp*8 - 1], dh
jle 0x4032a6
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x72
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add al, byte [rax]
add dl, cl
push qword [rdi]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70ca902
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
add al, byte [rax]
add byte [rcx - 0x15], bl
call qword [rbx]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 3
add byte [rax], al
jmp 0x40331a
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add r8d, dword [rax]
add ch, dh
jmp 0x403342
call qword [rdi]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
lea ecx, [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add eax, dword [rax]
add byte [rsp + rbp*8 - 1], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rbx], es
add byte [rax], al
push rdx
in al, dx
cld
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x10
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 3
add byte [rax], al
in eax, dx
jge 0x4033b6
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x71
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
jnp 0x4033c7
dec dword [rcx]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
jg 0x4033fb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 4
add byte [rax], al
fsub st(5), st(0)
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 4
add byte [rax], al
out dx, al
call qword [rip + 1]
adc byte [rsi + 0x60d4302], al
add edx, dword [rax]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add ah, bh
out dx, al
inc dword [rbx]
adc byte [rsi + 0x60d4302], al
add bh, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
add al, 0
add byte [rdi - 0x11], bl
dec dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rax + rax], es
add byte [rsi + 0x29ffffef], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
add al, 0
add byte [rdi + 0x4cffffef], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rbx + 0xeffffef], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add al, 0
add byte [rcx + 0xeffffef], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 5
add byte [rax], al
cwde
out dx, eax
inc dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jg 0x40352f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 5
add byte [rax], al
mov esp, 0xb5ffffef
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0x8070c]
add byte [rax + rax], ah
add byte [rax], al
push rsp
add eax, 0xf0510000
jmp rsp
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fimul dword [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
jl 0x40357b
add byte [rax], al
or eax, 0xb1fffff1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
cmpsd dword [rsi], dword ptr [rdi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, 0xf1960000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, 0xf19c0000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 5
add byte [rax], al
xchg eax, esi
int1
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 6
add byte [rax], al
int1
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 6
add byte [rax], al
iretd
int1
inc esi
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], -0x46
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
add byte [rax], al
insd dword [rdi], dx
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x403674
add byte [rax], al
jae 0x403665
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 6
add byte [rax], al
pop rbx
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
dec dword [rax]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add eax, dword [rbx]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
push rsp
hlt
inc dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x40370f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 7
add byte [rax], al
jne 0x403706
jmp qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 7
add byte [rax], al
mov esp, 0x29fffff4
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add byte [rax], al
hlt
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x403775
add byte [rax], al
mov bl, 0xf4
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
add byte [rax], al
add dh, ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 7
add byte [rax], al
hlt
push qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
hlt
add eax, 0xe1de0000
inc dword [rcx + rax - 0x2cfc0000]
cmp byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
jp 0x4037ec
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add byte [rax], al
cmp ah, bl
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax + rcx], bl
add byte [rax], al
or ch, dh
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x403852
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
or byte fs:[rax], al
add byte [rax], dh
cmc
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
sbb al, 0x90
add dword [rip - 0x9fffb25], eax
add dword [rsi], ebp
add byte [rax], al
int1
add eax, dword [rip - 0x53fffb08]
add al, 5
xchg eax, ebp
add eax, 0x3c04f300
add byte [rax], al
inc dword [rcx]
sub byte [rsi], ah
mov byte [rdx], al
add byte [rax], al
iretd
add al, byte [rip - 0x7afff80d]
add eax, dword [rdx - 0x73]
or byte [rax], al
stosb byte [rdi], al
add al, 5
add byte [rax], al
mov ebx, 0xb802e504
or byte [rax], al
add eax, 0x880008a7
or byte [rdx], cl
add bh, bh
inc dword [rcx]
ucomiss xmm4, dword [rdi]
add byte [rcx + 0x1dd0501], ah
add byte [rcx + rax - 0xffffc5], bh
inc dword [rcx]
adc eax, 0x613a
int3
add dword [rip - 0x71fffd4b], eax
add al, byte [rip - 0x35fffd31]
add bl, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
xor bl, byte [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], ah
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], bh
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x409ea2
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add al, dl
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, byte [rip]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 2], cl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 0xb], dl
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx], cl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400e], dh
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
cmovo r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x404089
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400f], al
add byte [rax], al
add byte [rsi + 0x400f], dl
add byte [rax], al
add byte [rsi + 0x400f], ah
add byte [rax], al
add byte [rsi + 0x400f], dh
add byte [rax], al
add dh, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xf, al
add byte [rax], al
add byte [rax], al
add dh, dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte es:[rax], al
add byte [rax], al
add byte [rax], al
adc byte ss:[rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], r8b
add byte [rax], al
add byte [rax], al
push rsi
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x404178
je 0x404181
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40418f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40418c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add al, dl
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx], cl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
push rax
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or dword [rax], eax
loopne 0x404225
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
or byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
movabs al, byte [0x400e]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40106000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0x10], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
movabs al, byte [0x402d]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add ah, dl
sub eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, byte [rax]
enter 0x402f, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, dword [rax]
je 0x404342
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40a362
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x603df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4010], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, ah
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], ah
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x11], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40a4fa
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rbp + rbp + 0x40], ah
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax], 0
add byte [rcx], al
add byte [rbx], bl
add byte [rdx + rcx*2], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rbp + 0x402d], ah
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rsi + 0x402d], ah
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rsi + 0x4019], ch
add byte [rax], al
add byte [rcx + rax], al
add byte [rax], al
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add byte [rdx], dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add dword [rax], eax
add byte [rcx], al
add byte [rdx], dl
add byte [rax + 0x38], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], dl
add byte [rax], al
add byte [rcx], dl
add ah, dl
sub eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [eax], eax
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], bh
add byte [rax], al
add byte [rax], al
adc al, 0
clc
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov es, word [rcx]
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x40a662
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000001], ah
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx], ch
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000001], ch
add byte [rsi], cl
add byte [rbp + 0x1b], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
lar eax, word [rax]
add byte [rdx], ah
add byte [rsi], cl
add bl, ah
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x220000], dl
add cl, dh
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd qword [rdx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x402c], ah
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], ch
and al, byte [rax]
add byte [rax], al
add byte [rax], al
adc eax, 1
add byte [rax], al
add byte [rbx + rax], ah
add byte [rdx], ah
add byte [rsi], cl
add bh, al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000003], al
add byte [rsi], cl
add byte [rax + 0x402d], dl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000003], dl
add byte [rsi], cl
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x10], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rsi], ch
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x401b], dl
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 4], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x1b], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax + 0x120000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x4024], bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add eax, 0x220000
add byte [rax + 0x401c], bh
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x200000], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, dword [rip + 0x200000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea eax, [rbx]
add byte [rax], al
adc al, byte [rax]
lldt word [rbp + rbp + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add rax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x120000
add byte [rsi + 0x11], ah
add byte [rax], al
add byte [rax], al
add ah, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add bh, dl
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rip + 0x220000], 0xe
add byte [rcx + 0x1e], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rbp + 6], cl
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 6], ah
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbx + 0x40], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x404908
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x401b], dh
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000006], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000006], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x401f], dh
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rdi + rax], dl
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x40], dl
add byte [rax], al
jle 0x404972
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
and byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x11000007], bh
add byte [rbx], bl
add byte [rax + 0x45], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x124049cc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
or byte [rax], al
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x45], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x11000008], bh
add byte [rax], dl
add byte [rax + 0x402d], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], r8b
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rdx + 0x12000008], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4029], bh
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
or dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
or dword [rax], eax
add byte [rax], dl
add byte [rdx], bl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0xf], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000009], al
add byte [rsi], cl
add byte [rdi + 0x1b], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000009], ch
add byte [rsi], cl
add byte [rbx + rbp + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 9
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbx + 0x40], ch
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4024], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rbx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
or al, byte [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x43], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xa], ch
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
rol byte [rbp + 0x60], 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], ch
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
add byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xa], bh
add byte [rax], al
and al, byte [rax]
add dh, dl
and byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x404bb2
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0xf], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
or eax, dword [rax]
add byte [rcx], dl
add bl, byte [rdx]
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add cl, ah
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
or eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ah
sub eax, 0x40
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xb], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
jo 0x404c31
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1100000b], al
add byte [rbx], bl
add byte [rax + 0x6045], ch
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rbx], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x27], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4026], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rip + 0x2200000c], dl
add byte [rsi], cl
add bh, dh
add byte [rax], al
add byte [rax], al
add dh, al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xc], ch
add byte [rax], al
and al, byte [rax]
add byte [rbx], cl
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
or al, 0
add byte [rax], dl
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000c], dh
add byte [rsi], cl
add byte [rdx + 0x401d], dl
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rcx + 0x110000], cl
sbb eax, dword [rax]
add byte [rbp + 0x60], 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x220000
add byte [rdx + 0x402c], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], al
add byte [rax], al
and al, byte [rax]
add ah, bl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
or eax, 0x220000
add byte [rbx + 0x21], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add bh, bh
or eax, 0x220000
add byte [rip + 0x402c], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
and al, byte [rax]
add byte [rdi], bh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x404da8
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000e], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rcx], eax
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
adc byte [rdx + 0x60], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
sldt word [rax]
and al, byte [rax]
add byte [rcx + 0x4025], ah
add byte [rax], al
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xf], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0x2200000f
add byte [rsi], cl
add byte [rcx + 0x1b], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
sldt word [rax]
and al, byte [rax]
add byte [rbx + 0x4024], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
sldt word [rax]
and al, byte [rax]
add ah, ch
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0x10
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x402b], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x11], cl
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
add byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x11], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
adc dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea edx, [rcx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx], edx
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x401b], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x404f74
add byte [rax], al
and al, byte [rax]
add byte [rbx], ah
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, bl
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
adc al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
adc eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rdx], bh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx + 4], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rbx], edx
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
nop
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdx], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rbx], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
adc eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rbx + 0x4018], ch
add byte [rax], al
add byte [rbx], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xb], al
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
or byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000013], dh
add byte [rsi], cl
add ah, bl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x4050ca
jne 0x4050be
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40507e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4050fc
jb 0x405102
pop rdi
jne 0x40510b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x405105
je 0x405101
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x405121
jb 0x405127
pop rdi
jne 0x405130
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x405133
jns 0x405123
outsb dx, byte gs:[rsi]
je 0x40513a
jns 0x4050ca
jb 0x40512e
insd dword [rdi], dx
pop rdi
jne 0x405140
insd dword [rdi], dx
jns 0x4050d6
pop rdi
pop rdi
jb 0x40513c
insd dword [rdi], dx
pop rdi
jne 0x40514e
insd dword [rdi], dx
jns 0x405143
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40514e
jns 0x40514e
outsb dx, byte gs:[rsi]
je 0x405165
jns 0x4050f5
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x40514c
xor dword [rcx], edi
jo 0x40516d
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x405185
jb 0x405188
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x405167
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x405176
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405195
jb 0x4051a0
add byte [rdi + 0x5a], bl
push rbx
je 0x40518b
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
xor al, 0x31
pop rdi
pop rdi
jae 0x4051c3
je 0x4051bb
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x4051c9
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x4051df
jb 0x4051e2
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x4051f7
pop rdi
pop r15
imul bp, word [rsi], 0x5f5f
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405239
jns 0x405239
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40524a
jns 0x40524a
jae 0x405261
jb 0x405264
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405263
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40523f
xor eax, 0x74695f5f
jb 0x405275
movsxd rbp, dword [rdi + 0x6d]
jo 0x40527a
jbe 0x40527e
insb byte [rdi], dx
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x40528a
insb byte [rdi], dx
jae 0x4052a2
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
push rbx
je 0x405274
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x73
je 0x4052af
push r11
je 0x40527e
xor ebx, dword [rdi + 0x49]
outsd dx, dword [rsi]
jae 0x4052b2
insd dword [rdi], dx
je 0x4052bd
insb byte [rdi], dx
jae 0x4052af
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405296
xor byte [rdi + 0x49], bl
je 0x4052cf
jb 0x4052cb
jae 0x4052d5
push r8
push rbx
je 0x4052a9
jo 0x4052d8
imul esi, dword [rdx + 0x49], 0x4c456369
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x4052ef
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4052c5
xor dword [rdi + 0x5f], ebx
jo 0x40530e
jae 0x405303
pop rdi
push 0x49706165
push rax
push rbx
je 0x4052d9
jo 0x405308
imul esi, dword [rdx + 0x49], 0x6c456369
push rbx
xor dword [rdi + 0x4e], ebx
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x405318
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4052f4
xor al, 0x5f
je 0x40532d
jb 0x405329
insb byte [rdi], dx
jae 0x405341
pop rdi
jbe 0x405332
insb byte [rdi], dx
jbe 0x40532a
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop rdi
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40531a
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x40532f
jo 0x40535e
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
je 0x405339
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40539e
jo 0x40538c
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x405379
imul eax, dword [rax + 0x40], 0x42494c47
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40537c
jae 0x4053c1
jo 0x405396
movsxd rax, dword [rbp + 0x76]
push rdx
push rsp
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40538e
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4053c8
pop rdi
insd dword [rdi], dx
imul esp, dword fs:[rcx + 0x6e], 0x5f6f745f
imul si, word [rdx + 0x73], 0x4974
push rax
push rbx
je 0x4053ac
jo 0x4053db
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x4053e7
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4053c3
xor eax, 0x6574495f
jb 0x4053f8
insb byte [rdi], dx
jae 0x405410
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405425
je 0x405404
imul esp, dword [rbx + 0x45], 0x534b5262
je 0x4053f8
jo 0x405427
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor eax, 0x5f5f005f
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40544d
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405429
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x405475
pop rdi
imul esi, dword [rbp + 0x72], 0x53496c63
je 0x405441
jo 0x405470
imul esi, dword [rdx + 0x49], 0x50456369
push rbx
xor al, 0x5f
push rdx
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40545a
xor dword [rdi + 0x5f], ebx
jne 0x40549b
jne 0x405491
jb 0x405496
pop rdi
jo 0x405498
jb 0x4054ad
imul esi, dword [rcx + rbp*2 + 0x6f], 0x5350496e
je 0x405477
jo 0x4054a6
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x4054b2
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40548e
xor eax, 0x6574495f
jb 0x4054c3
insb byte [rdi], dx
jae 0x4054db
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4054f2
jb 0x4054d8
je 0x4054b8
xor ebx, dword [rdi + 0x49]
outsd dx, dword [rsi]
jae 0x4054ec
insd dword [rdi], dx
je 0x4054f7
insb byte [rdi], dx
jae 0x4054e9
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405501
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4054dd
xor eax, 0x61765f5f
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x405517
imul esi, dword [rbp + 0x72], 0x30534e45
pop rdi
xor dword [rip + 0x6574495f], esi
jb 0x405528
insb byte [rdi], dx
jae 0x405540
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
push rbx
je 0x405545
jae 0x405524
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405544
je 0x405559
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x405524
xor esp, dword [rdx + 0x61]
jae 0x405561
movsxd rbx, dword [rdi + 0x6f]
jae 0x405571
jb 0x405564
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rbx
je 0x40553f
xor ebx, dword [rdi + 0x53]
je 0x405584
jb 0x40557b
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x4c474040
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405566
outsw dx, word [rsi]
jb 0x4055aa
jb 0x40559a
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x405572
jb 0x4055a9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4055ad
pop rdi
jb 0x4055b0
jb 0x4055b4
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4055cb
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x405597
jae 0x4055d4
jb 0x4055db
push r8
push rbx
je 0x4055a0
jo 0x4055cf
imul esi, dword [rdx + 0x49], 0x45456369
jbe 0x4055cb
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4055f9
jb 0x4055fc
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x4055ee
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40560f
jae 0x40559f
pop rdi
pop rdx
push r11
je 0x4055dd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40561c
movsxd rbx, dword [rdi + 0x73]
je 0x40562a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405625
je 0x40563a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x405644
jbe 0x40561f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40562d
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
je 0x40567a
jae 0x40568c
insb byte [rdi], dx
xor eax, 0x31787863
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x4056a7
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x40567d
xor bl, byte [rdi + 0x5f]
imul bp, word [rsi + 0x61], 0x5f6c
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4056cf
jb 0x4056d6
push r8
push rbx
je 0x40569b
jo 0x4056ca
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x4056d6
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4056b2
xor eax, 0x6574495f
jb 0x4056e7
insb byte [rdi], dx
jae 0x4056ff
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405711
jb 0x4056f7
je 0x4056d7
xor ebx, dword [rdi + 0x49]
outsd dx, dword [rsi]
jae 0x40570b
jo 0x405714
outsb dx, byte [rsi]
insd dword [rdi], dx
outsd dx, dword [rsi]
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4056f1
imul di, word [rax + 0x65], 0x5264
push rbx
je 0x4056fd
imul ebp, dword [rdi + 0x73], 0x7361625f
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x405742
push rdx
push rdx
push rbx
je 0x405709
xor ebx, dword [rdi + 0x49]
outsd dx, dword [rsi]
jae 0x40573d
insd dword [rdi], dx
je 0x405748
insb byte [rdi], dx
jae 0x40573a
pop rdi
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x405757
js 0x40575d
je 0x405736
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x405774
jae 0x405753
push rbx
je 0x40573e
xor dword [rbx + 0x68], esp
jb 0x405772
je 0x405787
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x405752
xor esp, dword [rdx + 0x61]
jae 0x40578f
movsxd rbx, dword [rdi + 0x6f]
jae 0x40579f
jb 0x405792
insd dword [rdi], dx
movsxd rdx, dword [r15 + rbx*2 + 0x45]
push rbx
xor eax, 0x4040635f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40577d
pop rdi
pop rdi
jne 0x4057be
jne 0x4057b4
jb 0x4057b9
pop rdi
jo 0x4057bb
jb 0x4057d0
imul esi, dword [rcx + rbp*2 + 0x6f], 0x69705f6e
jbe 0x4057d5
je 0x4057b1
push rax
push rbx
je 0x4057a0
jo 0x4057cf
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x4057db
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4057b7
xor eax, 0x6574495f
jb 0x4057ec
insb byte [rdi], dx
jae 0x405804
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4057df
pop rdi
pop rdi
jae 0x40581c
jb 0x405823
push r8
push rbx
je 0x4057e8
jo 0x405817
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x405823
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4057ff
xor eax, 0x6574495f
jb 0x405834
insb byte [rdi], dx
jae 0x40584c
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405828
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor ebp, dword [rcx + 0x6d]
jo 0x405858
xor eax, 0x31787863
xor dword [rax], eax
pop rdi
push r12
pop r15
jb 0x40588b
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x4058aa
jae 0x405889
push rbx
je 0x405874
xor dword [rbx + 0x68], esp
jb 0x4058a8
je 0x4058bd
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x405888
xor esp, dword [rdx + 0x61]
jae 0x4058c5
movsxd rbx, dword [rdi + 0x6f]
jae 0x4058d5
jb 0x4058c8
insd dword [rdi], dx
movsxd rdx, dword [r15 + rbx*2 + 0x45]
push rbx
xor eax, 0x634b505f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor al, 0x72
jbe 0x4058e5
insb byte [rdi], dx
xor eax, 0x31787863
xor dword [rax], eax
pop rdi
pop r15
jae 0x405907
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x4058d3
xor eax, 0x6e755f5f
jne 0x40590a
jb 0x40590f
pop rdi
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x695f7261
outsb dx, byte [rsi]
jae 0x40591e
jb 0x40592f
push r8
push rbx
je 0x4058f4
jo 0x405923
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x40592f
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40590b
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x405957
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40592f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40596e
movsxd rbx, dword [rdi + 0x73]
je 0x40597c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405977
je 0x40598c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405978
jae 0x4059bd
jo 0x405992
imul esp, dword [rbx + 0x45], 0x74535276
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor al, 0x5f
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x4059cc
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x4059e1
pop rdi
jae 0x4059f7
jb 0x4059fa
add byte [rdi + 0x5a], bl
push rbx
je 0x4059c4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405a03
movsxd rbx, dword [rdi + 0x73]
je 0x405a11
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405a0c
je 0x405a21
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405a3a
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405a16
pop rdi
pop rdi
imul esi, dword [rbp + 0x72], 0x73656c5f
jae 0x405a51
imul esi, dword [rbp + 0x72], 0x5f007645
pop rdx
push rbx
je 0x405a33
jo 0x405a62
imul esi, dword [rdx + 0x49], 0x34456369
jae 0x405a81
jo 0x405a52
push rdx
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405a48
xor dh, byte [rbx + 0x65]
je 0x405a8c
jb 0x405a83
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x5a5f0069
push rbx
je 0x405a60
jo 0x405a8f
imul esi, dword [rdx + 0x49], 0x61456369
push rbx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405aa4
outsd dx, dword [rsi]
push rbx
je 0x405a76
xor ebx, dword [rdi + 0x49]
outsd dx, dword [rsi]
jae 0x405aaa
insd dword [rdi], dx
je 0x405ab5
insb byte [rdi], dx
jae 0x405a54
pop rdi
pop rdx
push rbx
je 0x405a92
imul esi, dword [rbp + 0x72], 0x6177735f
jo 0x405aac
push rax
push rbx
je 0x405a9b
jo 0x405aca
imul esi, dword [rdx + 0x49], 0x53456369
xor bl, byte [rdi + 0x45]
jbe 0x405ac9
pop rdi
push rsp
xor byte [rdi], bl
outsw dx, word [rsi]
jne 0x405af2
add byte [rdi + 0x5a], bl
push rbx
je 0x405ab8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405aed
push r10
push rbx
je 0x405ac1
jo 0x405af0
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
je 0x405acc
jb 0x405b03
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405b07
pop rdi
jb 0x405b0a
jb 0x405b0e
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x405b24
push r11
xor al, 0x5f
add byte [rbx + 0x68], ah
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405b01
pop rdi
pop rdi
jne 0x405b42
jne 0x405b38
jb 0x405b3d
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x405b57
jb 0x405b5e
push r8
push rbx
je 0x405b23
jo 0x405b52
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x405b5e
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405b3a
xor eax, 0x6574495f
jb 0x405b6f
insb byte [rdi], dx
jae 0x405b87
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405b5c
xor al, 0x62
jae 0x405b99
movsxd rbx, dword [rdi + 0x69]
jae 0x405baa
jb 0x405b9d
insd dword [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405ba4
je 0x405bb9
imul esi, dword [rbx + rsi*2 + 0x49], 0x44454563
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x405bd5
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x405bd4
push rdx
push rbx
je 0x405ba9
xor ebx, dword [rdi + 0x49]
outsd dx, dword [rsi]
jae 0x405bdd
insd dword [rdi], dx
je 0x405be8
insb byte [rdi], dx
jae 0x405bda
pop rdi
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x405bd0
xor al, 0x62
jae 0x405c0d
movsxd rbx, dword [rdi + 0x6f]
jae 0x405c1e
jb 0x405c11
insd dword [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405c18
je 0x405c2d
imul esi, dword [rbx + rsi*2 + 0x49], 0x44454563
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
jo 0x405c4f
add byte [rdi + 0x5a], bl
push rbx
je 0x405c0f
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x405c44
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405c4e
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x405c56
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
push rbx
je 0x405c32
jo 0x405c61
imul esi, dword [rdx + 0x49], 0x53456369
xor bl, byte [rdi + 0x45]
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x405c4d
xor byte [rdi + 0x5f], bl
jo 0x405c90
jo 0x405c82
push 0x49706165
push rax
push rbx
je 0x405c60
jo 0x405c8f
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x405c9b
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405c77
xor eax, 0x6574495f
jb 0x405cac
insb byte [rdi], dx
jae 0x405cc4
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405c9b
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x405ce7
pop rdi
push 0x49706165
push rax
push rbx
je 0x405cb1
jo 0x405ce0
imul esi, dword [rdx + 0x49], 0x6c456369
push rbx
xor dword [rdi + 0x4e], ebx
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x405cf0
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405ccc
xor eax, 0x6574495f
jb 0x405d01
insb byte [rdi], dx
jae 0x405d19
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop rdi
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405cf4
xor bl, byte [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x405d29
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405d33
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x405d3b
pop rdi
xor dword [rbp + 0x50], eax
push rbx
je 0x405d16
jo 0x405d45
imul esi, dword [rdx + 0x49], 0x53456369
xor bl, byte [rdi + 0x45]
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdi
jae 0x405d73
pop rdi
jae 0x405d77
jb 0x405d7a
add byte [rdi + 0x5a], bl
push rbx
je 0x405d3d
pop rdi
pop rdi
imul ebp, dword [rsi + 0x74], 0x6f736f72
jb 0x405d8c
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
outsd dx, dword [rsi]
jo 0x405d67
push rax
push rbx
je 0x405d56
jo 0x405d85
imul esi, dword [rdx + 0x49], 0x6c456369
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405d92
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405d6e
xor eax, 0x6574495f
jb 0x405da3
insb byte [rdi], dx
jae 0x405dbb
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi], ebx
add byte [rdi + 0x5a], r11b
push rbx
je 0x405d97
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405dcc
push r10
movsxd rax, dword [rbp + 0x4f]
push rbx
je 0x405da1
jb 0x405dd8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405ddc
pop rdi
jb 0x405ddf
jb 0x405de3
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x405df9
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405dc6
xor al, 0x5f
pop rdi
jo 0x405dfb
jb 0x405e10
imul esp, dword [rcx + 0x6c], 0x726f735f
je 0x405dee
push rax
push rbx
je 0x405ddd
jo 0x405e0c
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x405e18
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405df4
xor eax, 0x6574495f
jb 0x405e29
insb byte [rdi], dx
jae 0x405e41
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
jae 0x405e5a
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405e34
xor ebx, dword [rdi + 0x5f]
push 0x5f706165
jae 0x405e72
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rcx*2 + 0x50]
push rbx
je 0x405e4a
jo 0x405e79
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x405e85
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405e61
xor eax, 0x6574495f
jb 0x405e96
insb byte [rdi], dx
jae 0x405eae
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405e88
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405ebd
push r10
imul eax, dword [rbp + 0x4f], 0x3174534e
jb 0x405ec9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405ecd
pop rdi
jb 0x405ed0
jb 0x405ed4
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x405eea
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405eb7
xor ebp, dword [rbp + 0x6f]
jbe 0x405ef0
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x405ef8
push r8
push rbx
je 0x405ecd
jo 0x405efc
imul esi, dword [rdx + 0x49], 0x53456369
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x405f35
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405f11
xor eax, 0x6574495f
jb 0x405f46
insb byte [rdi], dx
jae 0x405f5e
pop rdi
imul esi, dword [rbp + 0x72], 0x50496c63
push rbx
je 0x405f2b
jo 0x405f5a
imul esi, dword [rdx + 0x49], 0x53456369
xor eax, 0x6245455f
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405f5a
xor al, 0x62
jae 0x405f97
movsxd rbx, dword [rdi + 0x69]
jae 0x405fa8
jb 0x405f9b
insd dword [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405fa2
je 0x405fb7
imul esi, dword [rbx + rsi*2 + 0x49], 0x43454563
xor dword [rbp + 0x50], eax
movsxd rdx, dword [r11 + 0x74]
xor dword [rbx], esi
pop rdi
outsd dx, dword [rsi]
jae 0x405fbb
jo 0x405fc4
outsb dx, byte [rsi]
insd dword [rdi], dx
outsd dx, dword [rsi]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405fa8
xor dword [rdi + 0x5f], ebx
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x405fcd
push rax
push rbx
je 0x405fbc
jo 0x405feb
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x405ff7
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405fd3
xor eax, 0x6574495f
jb 0x406008
insb byte [rdi], dx
jae 0x406020
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405ff5
xor al, 0x62
jae 0x406032
movsxd rbx, dword [rdi + 0x6f]
jae 0x406043
jb 0x406036
insd dword [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40603d
je 0x406052
imul esi, dword [rbx + rsi*2 + 0x49], 0x43454563
xor dword [rbp + 0x50], eax
movsxd rdx, dword [r11 + 0x74]
xor dword [rbx], esi
pop rdi
outsd dx, dword [rsi]
jae 0x406056
jo 0x40605f
outsb dx, byte [rsi]
insd dword [rdi], dx
outsd dx, dword [rsi]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x406046
pop rdi
pop rdi
insb byte [rdi], dx
insb byte [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x406054
outsw dx, word [rsi]
jb 0x406098
jb 0x406088
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x406060
jb 0x406097
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40609b
pop rdi
jb 0x40609e
jb 0x4060a2
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4060b9
add byte gs:[r15 + 0x5a], r11b
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4060b6
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x406092
xor al, 0x5f
je 0x4060cb
jb 0x4060c7
insb byte [rdi], dx
jae 0x4060df
pop rdi
jbe 0x4060d0
insb byte [rdi], dx
movsxd rbp, dword [rcx + rcx*2 + 0x50]
push rbx
je 0x4060ab
jo 0x4060da
imul esi, dword [rdx + 0x49], 0x53456369
xor al, 0x5f
push rsp
pop rdi
push rdx
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4060c4
xor byte [rdi + 0x5f], bl
movsxd rbp, dword [rdi + 0x70]
jns 0x4060f9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406103
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x40610b
xor dword [rbp + 0x4c], eax
xor byte [rbp + 0x53], al
je 0x4060e5
jb 0x406117
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x406134
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40612e
xor dword [r11d], r14d
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x406137
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406141
pop rdi
push r8
push rbx
je 0x406117
jo 0x406146
imul esi, dword [rdx + 0x49], 0x53456369
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x406139
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406178
movsxd rbx, dword [rdi + 0x73]
je 0x406186
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406181
je 0x406196
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x406187
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4061c6
movsxd rbx, dword [rdi + 0x73]
je 0x4061d4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4061cf
je 0x4061e4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x406202
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
js 0x406239
pop rdi
jo 0x406229
jb 0x406239
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40624e
jae 0x40622d
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40624d
je 0x406262
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x406232
xor esp, dword [rdx + 0x61]
jae 0x40626f
movsxd rbx, dword [rdi + 0x6f]
jae 0x40627f
jb 0x406272
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rdx
push rbx
je 0x406256
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406295
movsxd rbx, dword [rdi + 0x73]
je 0x4062a3
imul ebp, dword [rsi + 0x67], 0x5f345349
push rbx
xor eax, 0x5f31545f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x406287
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x40629c
jo 0x4062cb
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
je 0x4062a6
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40630b
jo 0x4062f9
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4062ff
outsb dx, byte [rsi]
push rbx
je 0x4062d3
xor ebx, dword [rdi + 0x49]
outsd dx, dword [rsi]
jae 0x406307
insd dword [rdi], dx
je 0x406312
insb byte [rdi], dx
jae 0x406304
pop rdi
add byte [rdi + 0x55], bl
outsb dx, byte [rsi]
ja 0x406321
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x406334
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x406304
jae 0x406349
jo 0x40631e
imul eax, dword [rbp + 0x76], 0x535f5452
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x406315
pop rdi
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x406362
jb 0x406369
push r8
push rbx
je 0x40632e
jo 0x40635d
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x406369
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x406345
xor eax, 0x6574495f
jb 0x40637a
insb byte [rdi], dx
jae 0x406392
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40636d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4063ac
movsxd rbx, dword [rdi + 0x73]
je 0x4063ba
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4063b5
je 0x4063ca
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor esi, dword [rdx + 0x75]
outsb dx, byte [rsi]
xor eax, 0x31787863
xor dword [rsi], esi
outsb dx, byte [rsi]
js 0x40638c
pop rdi
pop rdx
push rbx
je 0x4063c9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406408
movsxd rbx, dword [rdi + 0x73]
je 0x406416
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406411
je 0x406426
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x40640f
movsxd r8, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x406423
push rax
push rdx
push rbx
je 0x40641c
imul ebp, dword [rdi + 0x73], 0x7361625f
push rbx
xor byte [rdi + 0x45], bl
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
insd dword [rdi], dx
imul ebp, dword [rsi], 0x74535a5f
xor dword [rcx], esi
pop rdi
pop rdi
jae 0x40647c
jb 0x406483
pop rdi
push 0x49706165
push rax
push rbx
je 0x40644d
jo 0x40647c
imul esi, dword [rdx + 0x49], 0x4e456369
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x406488
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x406464
xor eax, 0x6574495f
jb 0x406499
insb byte [rdi], dx
jae 0x4064b1
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
add byte [rsi], ch
jae 0x4064cc
insd dword [rdi], dx
je 0x4064b7
add byte [rsi], ch
jae 0x4064cf
jb 0x4064d1
add byte [rsi], ch
jae 0x4064cb
jae 0x4064d9
jb 0x4064db
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4064dc
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4064ea
outsb dx, byte cs:[esi]
jne 0x4064b8
jne 0x4064f6
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x4064c6
push 0x687361
jns 0x40650f
jae 0x40651c
insd dword [rdi], dx
add byte [rsi], ch
jns 0x406517
jae 0x40651f
jb 0x4064ad
outsb dx, byte cs:[esi]
jne 0x4064e0
jbe 0x406519
jb 0x406529
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x4064ed
jbe 0x406526
jb 0x406536
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x406531
insb byte [rdi], dx
jns 0x406540
add byte [rsi], ch
jb 0x40653b
insb byte [rdi], dx
jo 0x406547
je 0x4064dd
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x406516
outsd dx, dword [esi]
je 0x4064ec
je 0x406554
js 0x406565
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40656a
je 0x406560
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x406583
jo 0x406597
pop rdi
je 0x406587
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x406595
jns 0x406536
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x4065b1
jns 0x406542
push 0x63
jb 0x406547
jns 0x4065b9
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x4065c3
je 0x406559
je 0x4065bf
add byte [rsi], ch
jae 0x4065d6
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40656d
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rip + 0x40], 1
add byte [rax], al
rol byte [rip], 1
add byte [rax], al
cmp al, byte [rip]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or cl, byte [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x4067cd
add byte [rax], al
add byte [rax], al
add al, ah
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
clc
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], cl
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400e], al
add byte [rax], al
add byte [rax + 0xe], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400e], ah
add byte [rax], al
add byte [rax + 0xe], ah
add byte [rax], al
add al, al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
and bl, byte [rip]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
xchg eax, esp
sub eax, 0
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x402d], ah
add byte [rax], al
add byte [rax + 0x2d], ah
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, 0x40
add byte [rax], al
sub eax, 0
add byte [rax], al
hlt
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
call 0x406aca
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
clc
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte fs:[rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [r8], al
add byte [rax], al
add byte [rax], al
sbb byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x50], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
call qword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
