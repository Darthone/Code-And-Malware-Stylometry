call 0x400cb8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400ad0
add ebx, ebx
je 0x400a86
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400abe
cmp rbp, -4
ja 0x400abe
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400aa6
add ecx, 4
mov dl, byte [rax]
je 0x400ace
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400abe
ret
cld
pop r11
cmp r8b, 2
je 0x400ae6
jmp 0x400b63
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400af6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400ade
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400b0e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400afb
sub eax, 3
jb 0x400b2c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400b63
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400b53
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400b51
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400b40
cmp rbp, -0xd00
adc ecx, eax
call 0x400a92
jmp 0x400ae6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400c3c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400bda
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400c26
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400bf9
push 0x3a707474
jne 0x400c52
js 0x400c12
jae 0x400c4c
outsb dx, byte cs:[rsi]
je 0x400c0b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400c79
jb 0x400c6b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400c96
jb 0x400ca9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x2115fc
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x2115fc
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400b74
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400c9f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400c4d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add dword [rax], eax
jmp rbp
call 0x706f0d47
jb 0x400d5f
movsxd rbp, dword [rdi]
jae 0x400d59
insb byte [rdi], dx
js 0x400d5f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400d3f
cmp rsi, rcx
jae 0x400d47
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400d26
cmp al, 0x8f
ja 0x400d26
cmp byte [rsi - 2], 0xf
je 0x400d2c
sub al, 0xe8
jg 0x400d29
push rdi
cmp al, 1
ja 0x400d14
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400d17
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400d44
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400d9b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1219
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400ddf
mov al, 0xa
jmp 0x400ddf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400dbb
inc ebx
mov al, 0
jmp 0x400de3
mov al, 2
jmp 0x400de3
mov al, 3
jmp 0x400de3
mov al, 0x3c
jmp 0x400de3
push rcx
rcr ah, 1
fstp st(7)
jle 0x400e24
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400e36
jg 0x400e28
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a65ab
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400e82
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb5fff
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400e8a
cmp esi, 0x21585055
jne 0x400e8e
jge 0x400e80
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400e83
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400e87
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x400f33
pop rcx
or al, 0x3b
jb 0x400f39
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400eab
jmp 0x400ead
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660dee
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53036
in eax, dx
jg 0x400ee5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x400f2b
mov bh, 0x2a
add edi, 0x10
jmp 0x400f28
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x400f65
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x400fa1
jne 0x400fb8
fstpnce st(6), st(0)
jle 0x400f81
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x400fb7
jrcxz 0x400feb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1af4f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40106a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40102a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582955ff
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40109d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401037
and ecx, 7
or al, 0xeb
jae 0x4010a2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4010d7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401115
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4010ce
push rax
call 0xffffffff868d0dbb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4010d8
std
cmp edi, esi
xchg eax, edi
jle 0x40112d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c956b9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40112b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401119
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401142
js 0x401182
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401214
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad244f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401235
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40123a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20cec
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4011c8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
lodsb al, byte [rsi]
or al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
mov byte [rax + 0x90], cl
add byte [rax], al
add byte [rax], al
add dil, dil
rcr byte [rax], 0
add ah, al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4012ee
je 0x4012f7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4012c0
mov dh, 0x7d
jbe 0x4012bf
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4012f8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x4c00006], bl
add byte [rsi + 7], bl
nop
nop
invd
add byte [rax - 0x3727fff7], cl
nop
or al, byte [rax]
or eax, dword [rax]
jo 0x4012eb
in al, 0x13
enter 0xc07, 0
nop
or eax, 0xf60aa000
or esp, esp
add ecx, dword [rsi]
add byte [rax + 0xfe4000f], dh
wait
ror dl, 1
adc byte [rdi], dl
adc dword [rcx], ebx
adc dword [rbp + 0x5f106c03], 0xf901712
and byte [rdi], bh
adc eax, dword [rax]
clc
sbb eax, 0x8001460
nop
nop
unpckhps xmm0, xmmword [rax]
adc byte [rsi], dl
add byte [rax], bl
in al, 7
enter 0x1727, 0
clc
sbb byte [rax], al
add byte [rax], ah
in al, 9
in al, 3
sbb dword [rax], eax
cwde
sbb al, byte [rax]
sar byte [rbx + rbx*4 + 0x131b09b2], 1
add al, 0
int1
mov eax, 0xc91d8b2
sbb edi, dword [rdi - 0x5b7a10e7]
imul edi, dword [rdi + 2], 0x241759e0
sbb dword [rax + rcx*8 + 0x20], 0xb
mov ebx, 0x5f44362c
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdi], edx
push rbx
or al, 0x76
and eax, 0x477a4f44
sub byte [rsi - 0x796f377c], 0x97
movsd dword [rdi], dword ptr [rsi]
sbb edx, eax
xlatb
stosd dword [rdi], eax
pmuludq mm0, qword [rbp + 0x77b26c1c]
pop qword [rax]
and eax, 0xd8324360
cmc
mov bl, 0x83
or eax, 0xa7f7f6c9
push rdi
or eax, 0x72720c17
nop
sahf
add ebp, esi
adc eax, 0x250e71b9
jg 0x4013e1
add dword [rdi + 0x610b1348], eax
mov esp, 0x5717480b
push r15
in al, dx
add byte [rax + rbx*4 - 0x19], dl
sbb byte [ebx + 0x57476232], bh
jge 0x4013f2
adc edx, dword [rbx - 0x3e]
insb byte [rdi], dx
jg 0x401358
mov eax, dword [0x6232bdc3]
iretd
xor eax, 0xc99f5a04
cmpsb byte [rsi], byte ptr [rdi]
add byte [rdx + 0xeac2207], ch
xchg eax, ebp
xor eax, 0x1762d833
shr ebp, cl
add byte [rsp + rbx*4 + 0x43], ch
fsubr st(2)
add dword [rdx], eax
cmpsb byte [rsi], byte ptr [rdi]
or esp, esp
sub esi, 0x2f
or dword [rdx], eax
jbe 0x401470
nop
and eax, esp
lar edx, word [rdi]
cmp dword [rsp], eax
xchg eax, edi
jne 0x40145a
sub ah, byte [rdi + 0x36100231]
ftst
sbb al, 0x53
pop r15
test byte [rax], cl
frstor dword [rcx - 0x4f4fdfe9]
sub ebp, dword [rbx]
sub eax, dword ss:[rdi - 0x51]
pop rdi
pushfq
sbb eax, 0x17e986c2
or byte [rbx], al
cmpsd dword [rsi], dword ptr [rdi]
or al, 0x36
fcom dword [rax - 0x10f1e8de]
sub byte [rax + rdx*4 - 0x3f], ch
xchg byte [rdi], ch
cmp al, 0x2f
pop rdi
or eax, 0x541c8176
add ebp, dword [rsi + 0x17]
adc ah, ch
add bh, byte [rbx]
and al, 0xef
xchg eax, ebx
add edx, edi
scasd eax, dword [rdi]
add al, 0x9a
and esp, esi
adc dword [rdi - 0x36131bfc], eax
ror dword [rdi + 0xf420403], 0x5f
sal byte cs:[rcx - 0x7f], cl
sbb al, 0x19
add al, 0x33
push rdi
adc byte [rdx - 0xe], dh
in al, dx
add byte [rax + 4], al
xlatb
or al, 0x20
sbb edx, dword [rdi]
retf
cmp byte [rdi - 0x33], cl
insb byte [rdi], dx
adc edi, ebp
and edx, dword [rax]
jae 0x401485
in al, 0xd9
add dword ss:[rdi], edx
loopne 0x4014b6
or byte [rdx], al
jno 0x4014c2
sbb al, 0x49
fild dword [rdx]
ja 0x401449
add al, 0x1f
xor byte [rax - 0x46dbc9f4], dl
movabs al, byte [0x6b7f04c6e139218c]
loope 0x40143d
and byte [rbx + 0xf701c9d], al
pop rdi
int1
retf 0xe1e
leave
sub eax, 0x8f1a0705
adc byte [rsi - 0x7f], dh
jo 0x401507
add eax, 0xc817557f
mov bl, 0x43
enter -0x7693, 1
pop rdi
or byte [rip + 0x5c843be4], ah
mov esp, 0x198f060b
leave
sbb dword [rdi + 0xa9f0612], esp
sub al, 6
xchg eax, ebx
mov esp, 0x65447c0
xchg eax, esp
or al, 1
nop
ret
jmp 0x40153f
sti
call qword [rdi]
cli
movsxd rsi, dword [rdx + 0x74]
jae 0x40148d
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or ebx, edi
mov edi, 0x64007fb5
jb 0x401587
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401552
in eax, dx
mov edi, 0x6f64bdbd
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4015a2
jne 0x4015be
pop rdi
jg 0x401546
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4015bb
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bx, bx, 0xfa17
fld xword [rsi + 0x69]
or byte [rdx + 0x72], dh
jns 0x4015c6
cmc
jb 0x4015e4
add byte [rsi + 0xa], ah
insd dword [rdi], dx
outsb dx, byte [rsi]
rcr ah, 0xb7
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x4015ac
or eax, 0x76ff295f
wait
mov al, 0x74
sub al, byte [rcx - 0x64]
jo 0x4015f7
and al, 0x5a
push rbx
je 0x4015d8
xor dword [rcx], edi
jo 0x40160d
fistp dword [rdx - 5]
imul esp, dword [rbp + 0x63], 0x2d997765
ja 0x40160a
lahf
jb 0x401614
movsxd rsi, dword [rsi + rsi - 0x28]
mov ebx, 0x45381a9d
imul ebp, dword [rdi + 0x3b], 0xfd7f3329
lodsb al, byte [rsi]
jae 0x401569
test byte [rbx + 0x61], ah
or dword [rdi + 0x14], 0x6e676936
jbe 0x40162a
insd dword [rdi], dx
mov bh, 0xf
or al, 0x34
xor dword [rsi], ebp
cmp eax, 0x6f63691d
jbe 0x401639
out dx, al
imul ebp, dword ss:[rcx + rbp*2], 0x2c520d7a
outsb dx, byte [rsi]
mov bh, dh
mov bh, 0xbf
fldenv [rbp + 0x59]
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r15b, sil
mov ebx, 0x5fb42377
int3
mov bl, 0x46
push rdx
pop r15
xchg eax, esi
wait
ror byte [rdx], 1
cmp ecx, dword [rbx]
push rbp
test qword [rdi + 0x4820c1ec], rbx
push rdx
push rbx
pop r14
test dword [rbp - 0x28], ecx
sti
push rsp
sub r10b, r13b
adc dh, dl
fucomp st(6)
mov edx, 0x44cb729d
pop rcx
mov r10b, 0x4e
shr byte [rbp + 0x2b], 0x14
fidivr dword [rax]
nop
pop rax
cld
xor al, 2
mov bh, 0x5d
imul ebp, ebp, 0x74
adc r13b, r12b
mov ss, word [rdx]
insd dword [rdi], dx
or eax, 0xedfe616c
sti
jae 0x4016aa
xor byte [rdi + 0x28], bl
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x4016a3
jne 0x4016ac
pop r8
pop rax
pop rdi
xor ebx, dword [rip + 0x58a564c9]
imul esi, dword [rbx], 0xbb1cb647
call 0x695e8ce8
jb 0x4016ce
pop rdi
push 0x62180b0b
and esp, dword [rbx - 8]
ret 0x5762
cmp byte [rsi + 0x51], al
js 0x4016ef
sbb dword [rbp + 0x5fddde39], ebp
movsxd rbx, dword [r11]
xor dword [rbx + 0x68], esp
int3
push 0x1075af70
push r12
mov dh, 0x6c
outsd dx, dword [rsi]
mov bh, 0x66
pop rax
push 0x49eb6558
add al, 0xab
sal byte [rsi], 0x5f
movabs eax, dword [0x1670cd534a636db0]
movsxd rdx, ebp
jo 0x40165d
rcr byte [rsi], 1
cdq
jg 0x401731
insd dword [rdi], dx
adc ecx, dword [rdx + rax*8]
sbb byte ss:[rdi + 0x5b], bh
jbe 0x401734
push rdx
cwde
js 0x40174d
in al, dx
or eax, 0x1973c247
xor dword [r13 + 0x76], eax
packssdw mm4, qword [rdi + 9]
insd dword [rdi], dx
cwde
pop di
xor ch, byte [rbp + 0x2eb6c8f0]
add dword [rip - 0x718fb02a], esi
jbe 0x401735
mov dh, 0xc1
sbb al, byte [rip + 0x78fa35d6]
ficom word [rdx + 2]
loope 0x401765
shl byte [rbp + 0x30], 0x52
push rdx
or byte [rbx + 0x5b], ch
loope 0x401758
sub eax, 0xa1c46178
js 0x4016a5
push rsi
xor ah, byte [rbp + 0x23]
test eax, 0x496da744
sbb ecx, dword [rbp + 0x5f]
jle 0x401739
jl 0x401770
sbb byte [rdx - 0x17], al
push rsp
movsxd rsp, dword [rbx + 0x62]
test byte [rip + 0x6054632f], 0x35
pop rdi
push rax
movsxd rsp, dword [r8 + 0x4f]
mov dh, 0xb
or eax, 0x5f026407
jne 0x4016d5
push rbx
xor ebp, esp
fnsave dword [rsi + 0x49781117]
xor dl, byte fs:[r11 + 0x32]
add al, byte [rbp - 0x27e9293a]
sbb dword [rbx + rbx*8 + 0x40469e61], -0x48
sbb edi, dword [rcx + rsi]
xor dh, byte [rbx - 0x42]
and bh, byte [rdx + 0x6379294b]
outsd dx, dword [rsi]
int1
outsd dx, dword [rsi]
jne 0x4017b0
pop rdi
ja 0x40171c
in al, 0x4c
sub byte [rsi], cl
mov ch, 0x34
test byte [rax], al
in al, dx
imul esp, dword [rsi - 0x4a], 0xb4d025dd
lodsd eax, dword [rsi]
test dword [rbx + 0x66], esi
push 0x11926cac
sahf
mov word [rcx + 0x4e], fs
mov edi, 0x9d85c851
pop rbx
jae 0x40181b
movsd dword [rdi], dword ptr [rsi]
fbstp tbyte [rax - 0x78f9d3a]
movsxd rbp, dword [rbx + 0x18]
movsb byte [rdi], byte ptr [rsi]
fmul st(2)
push -0x1793cd95
xor al, 0x4b
push rbx
and dword [rcx - 0x4dbc1097], edi
xchg eax, esp
sub byte [rsi - 0x51e2b172], dh
outsd dx, dword [rsi]
xlatb
sub eax, 0x61e02390
outsb dx, byte [rsi]
push r8
test dword [rbp + 0xd], esi
movsb byte [rdi], byte ptr [rsi]
or dword [rdx + 0x45], r14d
sbb bpl, byte [rbp + 0x17]
cmpsd dword [rsi], dword ptr [rdi]
pop rbp
mov dword [rbx + 0x79], esi
cmp dh, byte [rax]
rol dword [rsi + 0x7407ec9d], 1
jb 0x401863
or dword [rsi], ebx
jbe 0x401780
in eax, 0xd6
push rbx
jo 0x40180b
outsb dx, byte [rsi]
outsd dx, dword [rsi]
or cl, byte cs:[rcx + 0x2d]
adc eax, 0xd8205f0b
or eax, 0x622e759e
jne 0x401865
pop rbx
imul esi, dword [rcx - 0x6696d23a], 0xd
leave
cmp byte [rcx], cl
in eax, dx
lodsb al, byte [rsi]
int 0xdc
jns 0x401898
sbb dword [r14 + 0x44], r14d
or ch, byte [rsi - 0x3e]
jo 0x401842
pop rdi
sbb eax, dword [rsi]
mov bh, 0x41
mov al, 0xd7
mov al, 0x28
or dword [rbx + 0x6e4c7274], ebx
jnp 0x4017cd
sti
or ch, byte [rdi + rbp*2]
or byte [rbx - 0x1a114e20], bl
add eax, 0xf76f24d0
push -0x3e1349a0
test dword [rax + 0x64], ebp
jb 0x40186f
cmp ah, byte [rip - 0x6db264f2]
xor dword [rbx], ecx
push 0x3a
mov bl, 0xb7
shl byte [rdx - 0x71], 1
and al, 0x7e
add byte [rsi + 0x69], dl
movabs byte [0xa9401804284c6639], al
add eax, eax
mov dh, 0xeb
add byte [rax], al
sbb esi, dword [rbx - 0x2f69f4c9]
test word [rdi], 0x1921
xchg eax, edx
mov bl, 0x3f
sbb al, 1
sbb dword [rax + rax*2 - 0x66], esp
and eax, dword [rdi]
push rsp
push rsp
xchg byte [rax + rcx*2 + 6], ah
and byte [rcx + rsi], al
sbb dword [rax + rcx*2 + 0x74], esp
je 0x4018d0
xchg dword [rbx + rbx - 0x980bbb6], edi
ljmp [rdi - 0x68]
or al, 0x32
enter -0x67e0, 0x30
add eax, 0x83243348
or byte [rsi + 0xb], cl
in al, dx
and byte [rbx - 0x37c037f3], al
clc
add ebx, edi
or al, 0x32
ftst
sbb byte [rsi - 0x22], dl
test byte [rax - 0x2e], bl
add edi, dword [rdi - 0x36e88bf9]
adc edi, dword [rdi]
popfq
add bl, byte [rsi - 0x41]
push qword [rbx - 0x1869dec9]
mov edi, 0x921b21ba
sub al, byte [rdx]
imul edi, dword [rdi], -2
iretd
fsub qword [rax + rax*2 - 0x78]
mov edi, 0x3080050
fsub dword [rip + 0x537aff02]
xor byte [rdi], dh
cmp dword [rdi + rdi], ebp
fadd dword [rdi]
out 0xb0, eax
sub ebx, dword [rbx - 0x7b00c050]
sbb dword [rdx + rax*2 - 0x10], esp
ret 0x7200
leave
add byte [rcx], 0x18
mov ss, word [rbx]
fimul word [rdx + rax*4 + 0x747060c]
enter -0x6d7a, 0x13
lcall [rdx]
mov dword [rdi], edi
and dword [rdi], eax
sbb dword [rax + rdx*4 - 0x70], esp
adc byte [rcx], al
and ah, byte [rbx + rax*2 + 0x76]
adc byte [rdi], al
xchg eax, esp
mov dh, 0xc0
jo 0x401980
xlatb
movd mm6, dword [rdx]
popfq
mov al, 7
xchg dword [rip + 0x327f6790], ebp
add eax, 0x3373a33f
and byte [rdi + rsi*2], ah
jmp qword [rcx]
imul ebp, dword [rax], 0xbfa90939
sub byte [rcx], bl
mov al, 0xf0
outsb dx, byte [rsi]
test byte [rcx + rsi*4 - 0x71], ah
nop
or al, 0x25
pushfq
mov edi, 0xc8321c24
mov al, 0xb0
add bh, byte [rdi]
rcr qword [r13 - 0x37], cl
add ecx, eax
loope 0x401967
mov dword [rdi], 0xb1093f2f
movsb byte [rdi], byte ptr [rsi]
mov ecx, 0x261f0fd5
and byte [rdi + rax + 0x6408e1bf], bh
nop
leave
adc byte [rax], dl
sbb dword [rax + 0x67fe66e], edx
sbb byte [rax], bl
or al, 0xc9
leave
loopne 0x4019c3
adc byte [rbx - 0x677cdbde], dh
jbe 0x4019a4
and dh, byte [rbx + 7]
jg 0x4019d8
out dx, eax
and eax, dword [rdx + 0x37]
and byte [rdi], bh
cwde
xchg eax, ebx
and dword [rcx], ebx
clc
cwde
int 0x2e
jo 0x4019ed
jg 0x4019e6
adc edi, dword [rcx]
enter -0x6ce0, 0x3f
shr byte [rax + 0x47110448], 6
or ecx, dword [rdi]
add ebx, dword [rsi + rdx]
xchg eax, edx
in eax, dx
cmpsd dword [rsi], dword ptr [rdi]
xor byte [rdi], bh
xor al, 0xb3
ret
sbb byte [rdi + 7], dil
adc dword [rbx - 0x37], edi
adc edi, dword [rax]
add byte gs:[rcx + 0x10c7f30], bl
pop rsp
fdiv dword [rdx]
mov ebx, 0xbac0e07f
movsb byte [rdi], byte ptr [rsi]
and dword [rax + 9], 0x47
xor eax, 0x87279bf
sbb ecx, dword [rcx]
jg 0x401a6a
sub bl, byte [rcx + 6]
add byte [rax], al
shl byte [rdx], 0x20
add dword [rax], eax
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x41f7fdea], ecx
in eax, dx
clc
mov esi, 0x18c0872a
add byte [rax], al
add byte [rax], al
push 0x49000039
add dword [rax], eax
jne 0x401a59
add byte [rax], al
add bh, bh
