call 0x4016c8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x4014e0
add ebx, ebx
je 0x401496
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x4014ce
cmp rbp, -4
ja 0x4014ce
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4014b6
add ecx, 4
mov dl, byte [rax]
je 0x4014de
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x4014ce
ret
cld
pop r11
cmp r8b, 2
je 0x4014f6
jmp 0x401573
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401506
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x4014ee
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x40151e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x40150b
sub eax, 3
jb 0x40153c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401573
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401563
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401561
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401550
cmp rbp, -0xd00
adc ecx, eax
call 0x4014a2
jmp 0x4014f6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40164c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x4015ea
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401636
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401609
push 0x3a707474
jne 0x401662
js 0x401622
jae 0x40165c
outsb dx, byte cs:[rsi]
je 0x40161b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401689
jb 0x40167b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4016a6
jb 0x4016b9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21261c
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21261c
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401584
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x4016af
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40165d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1757
jb 0x40176f
movsxd rbp, dword [rdi]
jae 0x401769
insb byte [rdi], dx
js 0x40176f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40174f
cmp rsi, rcx
jae 0x401757
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401736
cmp al, 0x8f
ja 0x401736
cmp byte [rsi - 2], 0xf
je 0x40173c
sub al, 0xe8
jg 0x401739
push rdi
cmp al, 1
ja 0x401724
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401727
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401754
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4017ab
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1c29
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4017ef
mov al, 0xa
jmp 0x4017ef
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4017cb
inc ebx
mov al, 0
jmp 0x4017f3
mov al, 2
jmp 0x4017f3
mov al, 3
jmp 0x4017f3
mov al, 0x3c
jmp 0x4017f3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401834
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401846
jg 0x401838
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6fbb
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401892
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6a0f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40189a
cmp esi, 0x21585055
jne 0x40189e
jge 0x401890
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401893
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401897
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401943
pop rcx
or al, 0x3b
jb 0x401949
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4018bb
jmp 0x4018bd
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36617fe
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53a46
in eax, dx
jg 0x4018f5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40193b
mov bh, 0x2a
add edi, 0x10
jmp 0x401938
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401975
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4019b1
jne 0x4019c8
fstpnce st(6), st(0)
jle 0x401991
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4019c7
jrcxz 0x4019fb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b95f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401a7a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401a3a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829600f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401aad
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401a47
and ecx, 7
or al, 0xeb
jae 0x401ab2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401ae7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401b25
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401ade
push rax
call 0xffffffff868d17cb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401ae8
std
cmp edi, esi
xchg eax, edi
jle 0x401b3d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c960c9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401b3b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401b29
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401b52
js 0x401b92
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401c24
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2e5f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401c45
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401c4a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc216fc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401bd8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
mov ah, 0xa
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
movabs al, byte [0x9088]
add byte [rax], cl
dec dword [rax]
sbb eax, dword [rax]
add byte [rax + 0x2000008], ch
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401cfe
je 0x401d07
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401cd0
mov dh, 0x7d
jbe 0x401ccf
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401d08
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5400006], bl
add dh, bl
or al, cl
enter 0x80f, 0
sbb byte [rcx], cl
or dword [rax], eax
enter 0x13e4, -0x38
adc ecx, dword [rdx]
add al, ah
or eax, dword [rax]
fmul dword [rbx]
sal byte [rsi + 0xc040c03], 0x17
or eax, 0x4f0d6000
and byte [rdi], bl
and byte [rsi], cl
add byte [rax + 0xf], dh
add byte [rdi], dl
nop
seto byte [rdi]
adc byte [rax], al
and byte [rcx], dl
add byte [rdi], ah
mov al, 0x27
nop
test byte [rdx], dl
add al, bh
adc r8d, dword [r8]
add dl, dh
enter 0x22ec, 0x14
add al, ch
sub eax, 0xc09f2060
retf 0x1715
add byte [rax], al
nop
and byte [r15], r11b
add byte [rax], cl
sbb byte [rax], al
clc
enter -0x37f9, 0xf
sbb dword [rax], eax
add byte [rax], dh
sbb al, byte [rax]
shl byte [rbp + 0x13], 0xc8
adc ebx, dword [rbx]
add al, ah
sbb al, 0x13
mov cl, 0x23
jns 0x401d8d
add dword [rdi], edx
add al, 0
int1
dec dword [rbx + rbx]
jbe 0x401d33
jo 0x401dc7
mov edi, 0x40029719
adc byte [rax + 0x17], al
or al, 0xc9
and byte [rbx], dl
sbb eax, dword [rax + 0x24362c2e]
add eax, 0x44
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
and eax, 0x1bb0644
push rbx
enter 0xc90, 0x76
jp 0x401dce
loopne 0x401d0f
sbb eax, edx
scasb al, byte [rdi]
test byte [rdi + 0x47abd7a5], dl
in al, 0xf7
xchg eax, edx
xor dword [rdi + 0xf], edx
sbb al, byte [rcx]
jbe 0x401d91
adc byte [rcx], dl
shr edi, 0x73
add eax, esp
adc edx, esi
in al, 0x20
sar byte [rcx + rax - 0x61b1ed60], 0x3c
jns 0x401e16
add bl, byte [rcx]
add dl, byte [rax + 0xf]
mov esp, 0x41c9e4b0
sub al, 2
enter -0x37c7, -0x72
ja 0x401d57
jg 0x401e04
lahf
call 0xffffffffe34875f2
pop rbp
push rdi
mov r11d, 0x55076232
xchg eax, edi
ljmp [rax + 0x47]
ret 0x95d8
adc dword [rdi + 0x7e], edx
adc al, 0x7f
wait
adc ah, byte [rsi + 0x53]
mov byte [0x95e36447], al
adc edi, ecx
imul eax, dword [rdi + rbx*4], 0x20
scasb al, byte [rdi]
lodsb al, byte [rsi]
mov ecx, 0xd52fab01
add dl, al
jle 0x401e73
jg 0x401e28
outsb dx, byte [rsi]
outsd dx, dword [rsi]
add al, 0x66
mov al, 0x93
adc byte [r10], bpl
rcr byte [r11], cl
ret 0x9006
and cl, ah
cmc
ja 0x401e06
add eax, 0x3090876
int3
add dh, byte [rdi]
test byte [rbp + 0x59], bl
pop rbp
and dword [rdi], esp
iretd
mov esi, 0x262f15a7
add edx, dword [rbp + 0xd84320e]
mov ah, 0x17
jo 0x401e4f
mov fs, esi
ret 0xf377
adc dword [rdi], edi
xor byte [rip - 0x3427e84d], 0xe3
add dword [rdi + rbp*8], eax
sbb eax, 0x10252f04
sbb edx, dword [rdx + 0x27172ca0]
in al, dx
add bh, byte [rcx]
fadd dword [rdi + rcx*4]
cmp eax, dword [rdi + rcx*2]
pop rdi
nop
xchg byte [rcx], ah
imul ebx, edi, 0xc047610
and al, 0x67
mov edi, 0xc08fc090
xor bl, al
cdqe
loopne 0x401eaa
add dl, byte [rdi]
jb 0x401e92
add al, 0
xor dword [rcx - 0x27], ecx
sahf
xchg eax, ebx
add al, 0xc8
add dh, byte [rdi - 0x30]
xchg dword [eax + edx*4 - 0x2c], esp
movabs al, byte [0x24384f27c82f0510]
sbb eax, 0x1ea0af05
xchg esp, esp
in al, 0x60
mov edi, 0x69b0052d
add eax, 0x2720c20e
push rax
or al, 0x37
insb byte [rdi], dx
add eax, 0x40bba079
leave
and ah, byte [rdi]
sbb eax, 0x3c279eca
add dword [rdi], esi
and dword [rsi], eax
sbb edi, dword [rdi + 0x76726127]
sub eax, 0x97785f06
xor al, byte [rbp + rbx*2 + 0x63174b20]
mov al, 0x43
enter -0x72f0, -0x76
add cl, byte [rdi + 0x642ec21c]
cmp esp, ebx
sub eax, dword [rdi]
push rbx
or eax, 0xd707ff61
sbb cl, byte [rcx + 0x60c490d8]
xor bh, al
stosb byte [rdi], al
cmp al, 0x79
js 0x401f4f
ret 0x3717
sbb cl, bh
add al, 0x6c
nop
xchg eax, ebx
rol dword [rdi], 1
sbb byte [rdi + 0x1c], al
or byte fs:[rcx], bl
out 0x20, eax
pop rax
pushfq
adc ebx, dword [rsi + 0x27af0129]
lahf
lcall [rdi - 0x18]
movsxd rsi, dword [rdx + 0x74]
jae 0x401f1a
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
call rsi
in eax, dx
push r11
push rsp
or dword [rax], eax
jb 0x401fb4
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 - 1]
div dh
out dx, al
outsb dx, byte [rsi]
jae 0x401f83
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401fcf
jne 0x401ef4
std
in eax, dx
mov bh, 0x78
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401fe8
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xdf243538
call 0x669f9efa
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x401ff3
push rbp
jb 0x402011
add byte [rsi + 1], ah
jae 0x401f7c
outsb dx, byte [rsi]
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401fd9
or eax, 0xbac26ddb
pop rdi
sub dword [rdx + rbp + 0x42], esi
pushfq
jo 0x402024
and al, 0x5a
imul byte [rbp - 5]
test byte [rsi + 0x53], 0x74
sub ah, byte [rbx + 0x78]
js 0x401ff4
add byte [rdx], dh
pop rsi
jae 0x402031
movsxd rbx, dword [rdi - 0x60]
out 0xde, al
fcmovu st(0), st(3)
jb 0x401fff
movsxd rbx, dword [r9d]
adc ah, byte [rbx + 0x68]
lodsb al, byte [rsi]
jbe 0x401fc8
fidiv word [rsi + 0x4510733d]
push rbx
add al, 0x45
pop rdi
xor qword [r14 - 0x434a208b], r14
jne 0x402056
je 0x40203e
push rax
adc dh, byte [rsi - 0x22]
push rbx
mov sil, 0x6d
sbb esi, dword [rbp - 0x639938d0]
ja 0x402037
jo 0x401fbf
mul dh
mov edx, 0x3ca961e5
or ebp, dword cs:[esi]
xor ebx, edx
lodsd eax, dword [rsi]
fstp xword [rcx + 0x36536e32]
pop rdi
lea esi, [rbx + 0x1d]
je 0x40208d
jns 0x401fe2
mov ecx, 0x41216bd6
adc eax, 0x72627034
imul rbp, r13, 0x4e76f7db
cmp dword [rsi], ebx
outsb dx, byte [esi]
jne 0x401fcf
xor eax, 0x73706f09
xor dword [rsi], eax
mov cl, 0xb
xchg dword [rcx + 0x31], ecx
or eax, 0x6d557373
or esi, dword [rdx + 0x5445dec1]
xor byte [rdi + 0x58], bl
xor al, 0xc7
add dh, dl
in al, dx
inc dword [rbx + 0x32]
push r8
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi - 0x5f]
xor dh, byte [rsi]
or dword [rbx - 0x25], ebp
fld xword [rdi + rbp*2]
pushfq
ja 0x4020e5
test byte [rcx - 0x4f7627c7], ah
insb byte [rdi], dx
movabs byte [0x6d5ad035345c3154], al
jg 0x4020cf
xor r14, qword [rbx + 6]
xor dword [rsi - 0x41138cbd], eax
outsd dx, dword [rsi]
cmp byte [rdi - 0x5f], r13b
mov ah, 0x36
movabs dword [0x5f454d415246fc2c], eax
cmp al, 0xb
fld dword [rbx + 0x4e474f2d]
push rbp
and byte [rax + 0x44], cl
push rdx
adc sil, r11b
outsd dx, dword [rsi]
push rbx
outsd dx, dword [rsi]
push rsp
sub r11b, r13b
xlatb
or cl, byte [rbx]
wait
adc byte fs:[rbx], dl
in ax, dx
loope 0x402147
pop rcx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x402124
imul eax, dword [rax + 0x40], 0xd77b5a4c
dec byte [rcx + 0x42]
pop r8
pop rax
pop rdi
xor ebp, dword [rcx + 0x62696c32]
movsxd rsp, eax
cmpsd dword [rsi], dword ptr [rdi]
out dx, eax
sbb eax, 0xf633176
insd dword [edi], dx
lodsb al, byte [rsi]
cmp al, 0x8b
fiadd dword [rbx + 0x5f764af1]
push rdx
leave
insb byte [rdi], dx
hlt
pop rdx
and al, 0x84
in al, dx
insb byte [rdi], dx
push rax
jbe 0x40215f
xchg eax, ebp
cmp dword [rbx - 0x24], ebp
xchg eax, esi
pop rsp
pop rbx
push r10
mov ecx, 0xb670a50
or dword [rax + 0x2e385331], esp
xchg eax, esp
fstp st(5)
adc eax, 0x34654e68
fiadd dword [r11 + 0x31]
js 0x402175
jbe 0x402188
jmp 0x5c7c887d
insb byte [rdi], dx
xor eax, 0x1dd2767c
insb byte [rdi], dx
cmp ebx, dword [rbx]
ret 0x716d
outsb dx, byte [rsi]
xor dword [rdi + 0x32], ebx
imul ebx, ebp, -0x13
mov ah, 0x55
pop rdi
je 0x4021db
sbb qword [r8], r8
jb 0x4021cd
and dword [rax + 0x44], esi
push -0x45
pop rcx
jmp 0x6cf08aa6
movabs dword [0xec4b6d3f1ac35449], eax
or al, 0x43
push rsp
and byte [rbp - 0x69], dh
xchg eax, ebp
out dx, al
sub dword [rdx + rsi*2], esi
jbe 0x402151
sub cl, byte [rdi - 0x6d]
imul eax, dword fs:[rsi + 0x5f8ebb42], 0x75
pop rsp
stosd dword [rdi], eax
sbb al, 0x23
fiadd dword [rdx]
jnp 0x4021c3
pop rbx
nop
xor bl, bl
mov cl, 0x61
shr dword [rcx + rcx*8 - 0x2a], cl
xchg eax, esi
sub dword [rdx - 0x3e], esp
jne 0x402202
sub eax, 0xb9c30dfb
pop rsi
insd dword [rdi], dx
jle 0x40221a
xor dword [rdx*2 + 0x3dc16c03], esi
imul esp, dword [rsi + 0x57], 0x68576da1
or ebp, dword [rdi + 0x65]
push rdx
cmpsb byte [rsi], byte ptr [rdi]
mov dword [rdi + 0x25], ebx
in al, dx
mov cl, 0x8c
xlatb
mov esi, dword [rbx + 0x4958965a]
outsd dx, dword cs:[rsi]
jo 0x40225b
scasd eax, dword [rdi]
add dword [rip + 0x386f366b], 0x2c1a3f59
push rdx
xor esp, dword [esi + 0x54]
clc
push 0x7a
movabs eax, dword [0xe156096c0450a845]
in eax, 0xec
cmp dword [rbx + rsi + 0x61], ebx
push -0x63
or dword [rax + 0x68f2434a], esi
push rbx
fmul qword [rsi + rsi*2]
sbb dword [rax + 0x21], esi
and byte [esp + edx*2], cl
xor cl, dh
popfq
loopne 0x4021c1
movabs byte [0x6c25090d4eb61b62], al
in eax, 0xd2
movsxd rbp, dword [rbx + 0x6d]
push -0x293a695
push -0x25
movsb byte [rdi], byte ptr [rsi]
imul esi, dword [r11 - 0x45], -0x60
jne 0x4022ae
in eax, dx
ficomp word [rcx - 0x5a978b87]
ja 0x4021ec
and esi, dword [ebx + 0x6d]
int 0xd4
imul ecx, dword [rbx], 0x7329d072
cmpsb byte [rsi], byte ptr [rdi]
adc dword [rax], ecx
mov eax, 0x51f13d46
push -0x14
sbb byte [rcx - 0x13], cl
jo 0x4021ee
hlt
stosd dword [rdi], eax
xchg eax, edx
sub dword [rbp + rax*8 - 0xc5290b2], 0x6d215911
jne 0x4022ea
and byte [rbp + 0x1a], dh
sal byte [rdx + 0x63], 0x24
sbb byte gs:[rdx + rbp - 0x4c], dl
in eax, dx
mov dh, 0x57
pop rdi
js 0x4022c8
xor al, al
mov ch, 0x5b
lodsd eax, dword [rsi]
jb 0x4022d1
jbe 0x4022c2
sub esp, dword [rdi]
insd dword [rdi], dx
push rax
sub dword [rbp + 0x31], edi
xor edx, dword cs:[rbp + 0x6e]
ja 0x40230b
sal esp, cl
jo 0x402273
mov gs, word [rbp - 0x66]
xor byte [rip - 0x257c94da], dh
outsb dx, byte [rsi]
cmp ebp, dword [rsi + 0x67]
fisub dword [rip + 0x6d1db12c]
jns 0x40225a
xor dword [rbx - 0x43fd0923], edi
cmp r14d, dword [rbx + 0x79]
insd dword [rdi], dx
push 0x62
je 0x4022ea
fidiv dword [rax + 0x9687293]
std
jo 0x4022a6
mov dil, 0xdc
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x402310
or cl, byte [rip + 0x11dc2f4a]
xor dword [rsi], ebp
jne 0x4022d9
sub eax, 0x6f73f469
lodsd eax, dword [rsi]
or eax, 0x640938e7
jns 0x40236b
movabs rax, 0x52abf76194536b3
or ch, byte [rsi - 0x3e]
or al, 0x5f
sbb edi, dword [rcx + 0x7a]
jp 0x40236e
add al, 0x7b
sub byte [rcx], cl
je 0x40238c
in eax, 0xb6
push rdx
or ch, byte [rdi + rbp*2]
or dh, cl
add eax, 0x3ba11e2
ret 0x6f24
adc ebp, dword [rsi]
push -0x3e1348b9
sbb byte [rax + 0x64], ch
jb 0x402346
pop rbp
movsxd rax, dword [rdx + 0xc]
pop rsp
xlatb
js 0x4023b9
movsxd rsp, dword [rbp + 0x70]
call 0x36519006
adc eax, 0x43b66c38
or ebp, dword [rdx - 0x62]
int 0xde
mov esp, dword [rcx + 0x6800ac36]
jnp 0x4022f6
mov esp, esi
cwde
pop rsi
fld dword [rdi*4 + 0x2eaf52]
std
add byte [rax], al
sbb ebx, dword [rbx + 0x52588cde]
out 0xff, al
xchg byte [rax + rcx*2 - 0x32], ah
sbb al, 1
and esp, dword [rax + rdx*4 + 1]
imul eax, dword [rdi], 0x92195454
and dword [rcx], ebx
and byte [rcx + rsi], al
sbb dword [rax + rdx*4 + 0x21], esp
je 0x402404
and al, 0x1c
repne outsb dx, byte [rsi]
sub byte [rdi + rdi*2 - 0xa], al
ljmp [rdi - 0x68]
xor cl, al
and byte [rbx + 0x20053898], al
int 0x90
or al, 8
or r14, qword [rbx - 0x2fc9f37d]
sal byte [rax + 2], 1
sti
xor ecx, eax
xchg eax, ebx
sbb byte [rsi + 0x78], dl
xchg eax, ebx
add rax, r15
rcr byte [rbp + 0x24], cl
sahf
add ebx, dword [rsi - 0x41]
dec esi
fisub word [rax + rbx*2 + 0x34bf07ef]
jmp 0x2889060
imul edi, dword [rdi], -2
outsd dx, dword [esi]
push rsi
sub al, 0x17
cmpsd dword [rsi], dword ptr [rdi]
mov al, 0x98
mov dl, 0xc9
and byte [rsi], al
jp 0x4023a7
leave
push r11
enter 0x5d07, -0x27
test byte [rbp - 0x7b00c019], al
xor cl, al
and byte [rbx - 0x1f1fbdc1], al
nop
clc
add dword [rcx], ebx
mov fs, word [rsi]
adc eax, 0x6131064
out dx, eax
xchg eax, esp
pushfq
lcall [rdx]
mov dword [rdi], edi
adc ecx, dword [rsi]
sub eax, dword [rdx - 0x49]
or al, 0x70
mov dl, 0x21
sbb edx, dword [rdx - 0x6bf8efa0]
mov eax, 0x7df1159
sbb dword [rdx - 0x62f0a4dd], esi
jo 0x402453
enter 0x3733, 7
jg 0x4023e5
adc dword [rcx + 0x10], ebx
xchg eax, edx
ret
movabs dword [0x9ff07b99c9434c7], eax
test eax, 0x9082cdcc
mov edi, 0x1bbf072f
mov dl, 0xa1
in al, 0x61
mov cl, 0x3f
test byte [rdi - 0x7a], bh
xchg eax, edx
test byte [rdi + rdi*4 + 7], dh
sbb dword [rax + rcx*2 - 8], esp
clc
hlt
add ah, byte [rax - 0x36dba370]
sub byte [rcx], bh
retf
iretq
jg 0x4024c8
outsb dx, byte [rsi]
fisttp dword [rsi]
add esi, edi
or eax, 0x76f6725
call qword [rax]
out 0xe0, eax
add edx, edx
psubb mm0, qword [rdi]
mov cl, 0xec
pop rsp
cmp bh, 0xf3
je 0x4024a3
out dx, eax
clc
cdq
wait
int 0x96
wait
jg 0x4024f3
xchg ah, ah
in al, 0xf0
add dword [rsi], eax
adc byte [rdx], dh
enter -0x6f4a, -0x68
mov edi, 0x39212f2f
enter 0x845, 1
add dword [rip + 0x17058367], esp
xor byte [rdi], bh
sar byte [rax + 0xa0c90c9], 0xc0
xor byte [rdi + rdx + 0x20], 0x7f
adc byte [rdi], bh
or byte [rdx + 0xe], al
xor cl, al
loopne 0x4024b5
lock or byte [rdx + 0x20e486c1], dh
adc eax, 0xb17307f
sbb al, 0x16
xor al, 0x3f
push rbx
push rdx
int3
adc dword [rbx - 9], edi
sbb dword [rbx + 0x1e7f19e4], ecx
add dword [rbx + 0x6c86b3c9], edi
out 0x31, eax
inc eax
or dword [rbp + rcx + 0x361fcd20], eax
or dword [rdi + 0x60], edi
xchg eax, ecx
cmp al, 0x39
enter -0x13c6, 7
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x7ef7fdea], ecx
sbb byte [rdx + rsi*4], bl
stosd dword [rdi], eax
jo 0x402591
or byte [rbx], bl
add byte [rax], al
test al, 8
add byte [rax], al
fmul dword [rbx]
add byte [rcx], cl
add byte [rax + 0xf4], dl
