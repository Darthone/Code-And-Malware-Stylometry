call 0x400ca0
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400ab8
add ebx, ebx
je 0x400a6e
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400aa6
cmp rbp, -4
ja 0x400aa6
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400a8e
add ecx, 4
mov dl, byte [rax]
je 0x400ab6
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400aa6
ret
cld
pop r11
cmp r8b, 2
je 0x400ace
jmp 0x400b4b
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400ade
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400ac6
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400af6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400ae3
sub eax, 3
jb 0x400b14
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400b4b
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400b3b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400b39
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400b28
cmp rbp, -0xd00
adc ecx, eax
call 0x400a7a
jmp 0x400ace
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400c24
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400bc2
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400c0e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400be1
push 0x3a707474
jne 0x400c3a
js 0x400bfa
jae 0x400c34
outsb dx, byte cs:[rsi]
je 0x400bf3
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400c61
jb 0x400c53
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400c7e
jb 0x400c91
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x2115b4
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x2115b4
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400b5c
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400c87
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400c35
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f0d2f
jb 0x400d47
movsxd rbp, dword [rdi]
jae 0x400d41
insb byte [rdi], dx
js 0x400d47
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400d27
cmp rsi, rcx
jae 0x400d2f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400d0e
cmp al, 0x8f
ja 0x400d0e
cmp byte [rsi - 2], 0xf
je 0x400d14
sub al, 0xe8
jg 0x400d11
push rdi
cmp al, 1
ja 0x400cfc
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400cff
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400d2c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400d83
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1201
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400dc7
mov al, 0xa
jmp 0x400dc7
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400da3
inc ebx
mov al, 0
jmp 0x400dcb
mov al, 2
jmp 0x400dcb
mov al, 3
jmp 0x400dcb
mov al, 0x3c
jmp 0x400dcb
push rcx
rcr ah, 1
fstp st(7)
jle 0x400e0c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400e1e
jg 0x400e10
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6593
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400e6a
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb5fe7
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400e72
cmp esi, 0x21585055
jne 0x400e76
jge 0x400e68
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400e6b
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400e6f
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x400f1b
pop rcx
or al, 0x3b
jb 0x400f21
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400e93
jmp 0x400e95
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660dd6
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5301e
in eax, dx
jg 0x400ecd
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x400f13
mov bh, 0x2a
add edi, 0x10
jmp 0x400f10
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x400f4d
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x400f89
jne 0x400fa0
fstpnce st(6), st(0)
jle 0x400f69
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x400f9f
jrcxz 0x400fd3
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1af37
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401052
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401012
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582955e7
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401085
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40101f
and ecx, 7
or al, 0xeb
jae 0x40108a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4010bf
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4010fd
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4010b6
push rax
call 0xffffffff868d0da3
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4010c0
std
cmp edi, esi
xchg eax, edi
jle 0x401115
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c956a1
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401113
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401101
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40112a
js 0x40116a
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4011fc
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2437
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40121d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401222
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20cd4
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4011b0
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
mov ah, 0xa
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
movabs al, byte [0x9088]
add byte [rax], cl
ljmp [rax]
adc eax, 0x6d70000
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4012d6
je 0x4012df
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4012a8
mov dh, 0x7d
jbe 0x4012a7
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4012e0
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x3f80006], bl
add byte [rdx], al
add eax, 0xf902790
or byte [rax], al
and byte [rcx], cl
add byte [rax - 0x38], dh
mov al, 0x27
or al, byte [rax]
mov byte [rdi + 0xb], al
add byte [rax + 6], cl
insd dword [rdi], dx
add ch, byte [rbx]
or al, 0x17
or eax, 0xf902704
mov al, 7
add byte [rax], dl
sldt word [rbx]
in al, 7
enter 0x10f4, 0x10
add byte [rax], al
adc dword [rcx], ecx
in al, 9
in al, 0x11
add byte [rax + 0x12], dl
add byte [rax - 0x6ff8380], dh
adc eax, dword [rax]
clc
sbb eax, 0x8001460
cmp dword [rcx + rax*4], 0x1000157c
add byte [rax], bl
insd dword [rdi], dx
enter 0x1736, 0x5f
sbb byte [rax], al
cmp al, 0x81
jl 0x401297
sbb dword [rax], eax
pop rax
sbb al, byte [rax]
xor byte [rdi + 0x53], 0x36
sbb dword [rbx], 0x4170113
add cl, dh
push rdi
cmp edx, dword [rdx - 0x40e4f301]
sbb dword [rbp + 0x7f0d3490], edi
add al, byte [rax + 0x59]
leave
and byte [rbx - 0xe], al
sub byte [rsi], 0xc0
shr dword [rsi], -0x75
or eax, 0x1a75f44
sbb dword [rbp + 9], -0x6f
push rbx
jp 0x40139a
loopne 0x401380
and dword [rdx], esi
and al, 0x86
xchg eax, edi
sal byte [rcx - 0x7a], cl
mov al, 0xa5
xlatb
stosd dword [rdi], eax
invd
nop
wait
insb byte [rdi], dx
ja 0x40132f
sar byte [rcx - 0x50], 1
wait
adc byte [rax], cl
nop
and dword [rcx], ebx
fstp qword fs:[rax]
in al, 0x41
sbb esp, dword [rax + 4]
mov edi, 0xc8393ceb
fxch st(0)
movhps qword [rsi], xmm7
sbb eax, dword [rcx]
adc byte [rcx + 0xe], dh
and eax, 0x2c97159c
add dword [rax], esi
test byte [rbp + 0x4013409f], bh
cmp ch, byte [rdi + 0x23]
jbe 0x401327
test dword [rdi + 0x46], eax
loopne 0x4013ab
pop rbp
sbb dword [rcx + 0x6f47592b], esi
outsd dx, dword [rsi]
and eax, 0x97132f8c
adc byte [rdi], 0x7f
pop rsi
sbb dword [rcx - 0x18b86cd7], esi
fild word [rdx]
xor eax, 0x5ae18037
mov bh, 0x9c
sbb bl, r14b
xchg eax, ebp
add byte [rax - 0x440fe0e9], dh
lodsb al, byte [rsi]
jae 0x40138d
add dl, byte [rdi]
jrcxz 0x4013e3
sub al, byte [rdi + 0x6c]
add byte [rcx + 6], ch
shl byte [rax], 0xcf
jnp 0x401460
mov al, 0x21
jrcxz 0x401451
or byte [rdi + rax + 0x17], cl
fcom dword [rbp + 0x4fba3915]
in eax, dx
cmpsd dword [rsi], dword ptr [rdi]
mov al, 0x43
add al, byte [rdx]
xor dword [rcx + 0x11ae19a3], esp
outsd dx, dword [rsi]
lodsb al, byte [rsi]
or dword [rip + 0x46279361], 0x2f
rol byte [rax + 0x27024374], 1
test dword [rdi + 0x20], ebx
mov sil, 0xac
xor esp, dword [rcx - 0x3c4fa009]
adc byte [rsi], dh
test bl, al
scasd eax, dword [rdi]
fsub dword [rax + 3]
adc dl, bpl
mov edi, 0x69317c0
cmp dword [rcx], edi
movsb byte [rdi], byte ptr [rsi]
add esp, ebp
int3
xchg eax, r11d
or eax, 0xee7764cd
and ah, byte [rdi + 0x1b]
adc byte [rax + 0x2b841c9c], dl
sub al, byte [rcx]
movabs al, byte [0x2170304eeb6486c]
ja 0x4014c9
adc byte [rdi], dl
jns 0x401427
and dword [rcx], ebx
sbb eax, 0x1080c703
xchg eax, esp
cmp eax, 0xbf653b07
sub eax, 0x8471a03
xchg esp, esp
in al, dx
cmp dword [rbx], eax
cmpsd dword [rsi], dword ptr [rdi]
enter 0x33b, 0x1f
nop
mov bl, 0x17
push rdi
add edi, dword [rdi - 0x6f13d1ba]
pushfq
sbb al, 0x6d
add esp, dword [rbx + rdi*2 + 0x5b197701]
shr ah, cl
fcomp dword [rdi + 0x47]
sbb dword [rdi + 0x76299070], ebx
and al, 0x67
mov byte [rax + 1], bl
pop rbp
enter 0x2393, -0x25
add byte [rax - 0x73c887de], al
xchg eax, ebx
sub edi, 0x52
pcmpeqd mm5, qword [rdi + 0x17]
xor edx, dword [rbx]
sub ecx, dword [rcx - 0x586e99]
push qword [rsi + 0x6309a890]
jb 0x401540
jae 0x401542
jne 0x401536
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
fstp st(2), st(0)
mov edi, 0x4c5f52fc
push r11
push rsp
add byte [rbp + 0x72], ah
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
fstp st(6), st(0)
fdivp st(5)
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40151b
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4014b8
mov edi, 0x615ff6fd
jne 0x401587
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401580
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xb243538
std
in eax, dx
pop rdi
imul bp, word [rsi + 0x69], 0x7208
jb 0x40158b
jns 0x40158b
xor eax, 0xdbee6072
in eax, dx
jns 0x401535
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401571
or eax, 0x37584dbb
pop rdi
sub dword [rdx + rbp + 0x41], esi
pushfq
jo 0x4015bc
and al, 0x6d
lodsd eax, dword [rsi]
std
jg 0x4015ac
push rbx
je 0x4015a1
xor dword [rcx], edi
jo 0x4015c2
movsxd rsp, dword gs:[rbp + 0x77]
cdq
sub eax, 0xddee6e77
mov esi, 0x6375729f
je 0x401585
cmp byte [rbp + 0x69], al
outsd dx, dword [rsi]
cmp ecx, dword [rsi]
fistp dword [rbx + rdi*8]
sti
xor r8, qword [rbp + 0x50]
push rbx
xor dl, byte [rax + 0x49]
pop r8
xor al, 0x31
and bl, ah
insd dword [rdi], dx
in al, dx
pop rbx
xor dword [rcx + 0x74], esp
imul esp, dword [rbx + 0x63], 0x7a69a069
or eax, 0xd6edb37f
insd dword [rdi], dx
outsb dx, byte [rsi]
jl 0x401602
wrmsr
imul ebp, dword [rcx - 0x13], 0x2f6fee42
xor r13b, al
pop rdi
and sil, byte [r14]
movabs eax, dword [0x454d415246a577fd]
pop rdi
or r13b, byte [rip + 0x2d83d90b]
push rbp
and byte [rax + 0x44], cl
push rdx
cmp eax, 0x3f0bf7b0
push rbx
push r8
push rsp
sub r12b, r11b
fnsave dword [rbp + 0xb]
wait
adc byte fs:[rbx + 0x5944bd72], bl
outsd dx, dword [rsi]
fist word [rsi]
mov edx, 0x13434945
jb 0x401612
je 0x40165f
insd dword [rdi], dx
fisttp dword [rsi]
in eax, dx
pop rdi
xor ch, byte [rsi]
add dword [rbx + rsi*4 + 0x62], ebx
mov esi, 0x73179363
mov ebx, 0x670f5108
insd dword [rdi], dx
scasd eax, dword [rdi]
cmp dword [rax - 0x7be0781], ecx
jbe 0x40167e
push rdx
mov bh, 0x43
insb byte [rdi], dx
jae 0x401699
mov ah, 0x5a
xor eax, 0x590e6f73
sti
imul byte [rsi + rsi*2 + 0x65]
jbe 0x401684
jne 0x4016aa
movsxd rbp, dword [rax + 0x28]
push rcx
pop rdx
pop rbx
movabs eax, dword [0x2eb0a6f4383c16d0]
xor al, 0x90
fdivr dword [rbx + 0x31438e49]
jbe 0x4016c8
pop rax
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x7d
in eax, dx
fldenv [rsi + 0x6d]
jns 0x4015f6
movsxd rdi, dword [rax + 0x61]
xor dl, byte [rbp + 0x74c4adb5]
js 0x4016a8
pop rbp
mov cl, 0x2d
jrcxz 0x4016c9
push r12
pop r15
jo 0x401684
mov r15b, 0xae
imul edi, esp, 0x6e
push rsp
push rbp
sbb ecx, dword [rdi + 0x76]
jno 0x4016e7
jne 0x4016d2
sub byte [rax + rbp*2 + 0x3f], bl
jae 0x4016f4
stosb byte [rdi], al
adc dh, byte [rsi + 0x3ddec0b6]
cmp edx, dword [rbx + rdx*4 + 0x61]
outsd dx, dword [rsi]
js 0x4016b0
push rsi
add byte [r9 + 0x27], r10b
xor ebp, dword [rbp + 0x4b]
js 0x4016f0
jae 0x40169d
ret 0x4b52
xchg eax, esp
push rbx
xor al, byte [rdx]
xor eax, 0x2e39e1c9
sub al, 0x5f
push -0x5393c0f1
shl byte [rsi + 0x2c], 1
push rdi
push rcx
retfq -0x627b
sbb ecx, dword [rsi + 0xd]
or dword [rbx + 0x6b], esp
mov ebp, dword [rax + 0x6b]
in al, 0xb2
adc ch, byte [rsp + rsi + 0x68]
jne 0x4016da
xchg eax, ecx
add byte gs:[rdi], al
in al, dx
mov bh, 0xdd
jae 0x40176b
insd dword [rdi], dx
je 0x40176a
push -0x45234ef7
int 0x70
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push rsi
insb byte [rdi], dx
mov ebx, 0x152d493c
or eax, 0x2e756e67
jp 0x4016eb
test dword [rdi + 0x692d6470], esi
adc byte [rip - 0x64a6c751], cl
mov ecx, 0x796409b7
outsb dx, byte [rsi]
sbb dword [r9 + rdi + 0x7ff6854a], r8d
ror byte [rax + rbx*8], 1
imul edx, dword [rsp + rbx*8], 0x5f
sbb ebp, dword [rdi]
sbb eax, 0x73db0928
outsd dx, dword [rsi]
sub dword [rdi + 0xae37274], edi
sub al, 0x6f
jne 0x40175a
jo 0x401756
int 5
and al, 0x6f
xchg eax, esi
cmp eax, 0x2eb78f48
push 0x726468a9
or eax, 0xcc66cd87
cmp al, ah
xor dword [rbx], ecx
push 0x6f
test eax, 0x8f5e5ac5
and al, 0x73
add byte [rsi + 0x57], dl
xor ecx, esp
imul cx, word [rsp + rcx*2 + 4], 0x283c
add al, 0x58
push rbx
insd dword [rdi], dx
in eax, 0
add byte [rsi], ah
sal byte [rdx + 0x270187f8], 0x5f
and al, 0x43
jb 0x401786
sbb al, 1
or dword [rax + rcx*2], 0x33
and eax, dword [rdi]
push rsp
push rsp
nop
or al, 0xc9
and byte [rax], ah
add al, 0x20
or dword [rcx + rcx*8], 0x31
je 0x40181d
nop
leave
and al, 0x44
idiv bh
ljmp [rdi - 0x50]
and dword [rcx], ebx
in al, 0x98
cwde
add eax, 0x86692c7f
or byte fs:[rsi + 0xb], cl
or byte ss:[rdi + 2], ch
inc dword [rdi]
add ebx, edi
cdq
insb byte [rdi], dx
jb 0x4017d6
sbb byte [rsi + 0x6f], dl
sub al, 0x69
add esp, dword [rdi]
mov edx, 0x3f09e48b
or al, byte [rcx]
pop rsi
mov edi, 0x19bd9ff
mov edi, 0xc90b2583
sbb ah, byte [rdi]
imul edi, dword [rcx - 0x1cb7f37], 0x20
mov al, 0x4b
sahf
mov edi, 0xff020050
jp 0x401873
jb 0x40185f
adc byte [rbx + 0x3f], dl
jo 0x401813
push rdi
out 0x3f, eax
inc dword [rsp + rcx + 0x3f60c832]
mov byte [rax - 0x7cdfce00], cl
rcr byte [rax], 0x24
or al, 0xc2
mov ss, word [rbx]
xchg dword [rsi + 0x7de1392], eax
lcall [rdx]
mov esi, ecx
fsub qword [rax + rcx*8 + 0x3f]
jo 0x401840
nop
enter 0x6c86, 0x48
adc byte [rdi], al
xchg eax, esp
add eax, 0x3f4121c6
xchg eax, ebx
and dword [rbx], edi
mov dl, 0xf
popfq
adc byte [rcx + rax*4 + 0x3c], ch
jae 0x40185e
jg 0x40183b
or dword [rdi], edi
outsd dx, dword [rsi]
push rdx
and dword [rcx], edi
movabs dword [0x9ff67250d24073f], eax
test eax, 0x90ece4bf
and byte [rdi + 0x3750bf11], dh
sbb dword [rdx + 0x503fb1a1], esi
xchg byte [rdx - 0x40a380cd], dl
and al, 7
sbb dword [rax + rsi*4 - 0x50], esp
xchg eax, esp
add dword [rax - 0x36a22cb7], eax
add ecx, eax
loope 0x4018e2
or dword [rax + 0xfd5b9a4], esi
outsd dx, dword [rsi]
and byte [rdi + rax + 0x6408e1bf], bh
nop
leave
adc byte [rax], dl
sbb dword [rax + 0x67fe66e], edx
sbb byte [rax], bl
or al, 0xc9
leave
loopne 0x4018be
adc byte [rbx - 0x677cdbe0], dh
iretd
jbe 0x40189f
and dh, byte [rbx + 7]
jg 0x4018d3
out dx, eax
add eax, dword [rdx - 0x79]
and byte [rdi], bh
pop rax
xchg eax, ebx
and dword [rcx], ebx
clc
pop rax
int 0x2e
jo 0x4018e8
jg 0x4018e1
adc edi, dword [rcx - 0x38]
and byte [rbx + 0x5c68807f], dl
add dword [rcx], eax
or dword [rdi], ecx
add ebx, dword [rsi + rdx]
xchg eax, edx
in eax, dx
not dword [rdi]
xor byte [rdi], bh
xor al, 0xb3
ret
sbb byte [rdi + 7], dil
adc dword [rbx - 0x6e], edi
adc edi, dword [rax]
add byte gs:[rbp - 0xaf380d4], bh
retf -0x7b9a
mov ebx, 0x20a000
imul ecx, dword [rsi - 0x62], 0x1e08a0bf
in al, 0xc9
and dword [rcx + rcx + 0x7f], ebp
sub dword [rbp + 3], edi
add byte [rax], al
add byte [rbx + 0x480], cl
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x44080216], ecx
fnstenv [rip - 0x709fd6b3]
mov al, 0x28
adc eax, 0x6d70000
add byte [rax], al
nop
xor eax, 0x490000
add ch, dl
hlt
add byte [rax], al
add bh, bh
