call 0x4011d0
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400fe8
add ebx, ebx
je 0x400f9e
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400fd6
cmp rbp, -4
ja 0x400fd6
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400fbe
add ecx, 4
mov dl, byte [rax]
je 0x400fe6
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400fd6
ret
cld
pop r11
cmp r8b, 2
je 0x400ffe
jmp 0x40107b
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40100e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400ff6
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401026
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401013
sub eax, 3
jb 0x401044
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x40107b
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x40106b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401069
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401058
cmp rbp, -0xd00
adc ecx, eax
call 0x400faa
jmp 0x400ffe
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401154
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x4010f2
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40113e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401111
push 0x3a707474
jne 0x40116a
js 0x40112a
jae 0x401164
outsb dx, byte cs:[rsi]
je 0x401123
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401191
jb 0x401183
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4011ae
jb 0x4011c1
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21263a
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21263a
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x40108c
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x4011b7
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401165
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f125f
jb 0x401277
movsxd rbp, dword [rdi]
jae 0x401271
insb byte [rdi], dx
js 0x401277
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401257
cmp rsi, rcx
jae 0x40125f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40123e
cmp al, 0x8f
ja 0x40123e
cmp byte [rsi - 2], 0xf
je 0x401244
sub al, 0xe8
jg 0x401241
push rdi
cmp al, 1
ja 0x40122c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40122f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x40125c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4012b3
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1731
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4012f7
mov al, 0xa
jmp 0x4012f7
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4012d3
inc ebx
mov al, 0
jmp 0x4012fb
mov al, 2
jmp 0x4012fb
mov al, 3
jmp 0x4012fb
mov al, 0x3c
jmp 0x4012fb
push rcx
rcr ah, 1
fstp st(7)
jle 0x40133c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x40134e
jg 0x401340
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6ac3
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x40139a
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6517
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4013a2
cmp esi, 0x21585055
jne 0x4013a6
jge 0x401398
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x40139b
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x40139f
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40144b
pop rcx
or al, 0x3b
jb 0x401451
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4013c3
jmp 0x4013c5
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661306
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5354e
in eax, dx
jg 0x4013fd
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401443
mov bh, 0x2a
add edi, 0x10
jmp 0x401440
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x40147d
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4014b9
jne 0x4014d0
fstpnce st(6), st(0)
jle 0x401499
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4014cf
jrcxz 0x401503
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b467
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401582
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401542
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295b17
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4015b5
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40154f
and ecx, 7
or al, 0xeb
jae 0x4015ba
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4015ef
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40162d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4015e6
push rax
call 0xffffffff868d12d3
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4015f0
std
cmp edi, esi
xchg eax, edi
jle 0x401645
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95bd1
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401643
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401631
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40165a
js 0x40169a
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40172c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2967
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40174d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401752
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21204
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4016e0
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
mov dh, 0xa
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + 0x9088a0], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dil, dil
js 0x4017a0
add byte [rax], al
jbe 0x40178d
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401806
je 0x40180f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4017d8
mov dh, 0x7d
jbe 0x4017d7
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
fcom dword [rsi + 0x21e40]
push rsp
add dword [rdi + rbp - 0x38], esi
adc ecx, eax
adc eax, dword [rax + rax]
cwde
add eax, 0x807ec800
sub eax, 0x17050613
add byte [rax], bl
or bl, byte [rsi + 0x8403e40]
add byte [rax + 9], bl
add al, ch
add esp, dword [rbx + rbx*4 + 0x40]
or al, byte [rdi + 0xb]
rcl byte ds:[rsi + 0xc170d0b], 0
and byte [rax], 0x1f
and byte [rdi + 0xf10000d], bl
add byte [rax], ah
nop
seto byte [rdi + 0xf]
add ah, al
adc byte [rax], al
ror al, 1
enter 0x1127, 0
sub al, 0x1f
adc al, byte [rax]
loopne 0x401828
or byte [rbx], cl
adc edx, dword [rbx]
imul esp, dword [rbx], 0x1e401407
shr byte [rsi], 0x2d
adc eax, 0x1f20f800
and byte [rdi + 0x2e000016], bl
add byte [rax], cl
enter -0x6ff1, 0x4f
sbb byte [rax], al
clc
sbb dword [rax], eax
add byte [rax], dh
in al, 0x13
enter 0x1a07, 0
fcomp dword [rbx]
add byte [rax], al
xor dword [rbx + rbx*4 + 0x131c03b2], edi
add dword [rdi], edx
add al, 0
int1
mov eax, 0xc91d8b2
sbb edi, dword [rdi - 0x5b793ee7]
imul edx, dword [rdi + 0x171b5002], 0x92190648
nop
rol cl, 1
jbe 0x4018ec
pop rdi
xor eax, 0x15f3210
sbb dword [rbp + 9], -0x6f
push rbx
jp 0x4018d4
sub esp, dword [rcx]
xor ah, byte [rsi + rax*4]
xchg eax, edi
sal byte [rcx - 0x7a], cl
mov al, 0xa5
xlatb
stosd dword [rdi], eax
fmul dword [rax + 6]
wait
insb byte [rdi], dx
ja 0x401869
and al, 0xc1
sbb dword [rbp + rdx*8 + 0x2f], ebp
loopne 0x4018b5
rol dword [rsi - 0x17226f9c], -0x1c
cmpsd dword [rsi], dword ptr [rdi]
cmp dword [rcx], edi
enter 0x47d9, 0x1b
adc al, 1
test dword [rdi + rax*4], edi
adc al, byte [rsi]
adc eax, 0x1201257f
mov esp, 0x3387a321
push rdi
in al, dx
add byte [rbx], cl
enter -0x4401, 0x32
push rdi
push rdx
push r15
push 0x4a6cc22f
sbb byte [rdi + rdi*2], dl
jns 0x401902
mov esp, 0x8c536232
iretd
lodsb al, byte [rsi]
add eax, 0x6c803739
lahf
and byte [rbp + 0x4d93d52f], dl
ret
xchg eax, esp
add byte [rcx + 0x1dcf221f], ch
jbe 0x401972
mov al, 0x72
mov ebp, 0x21ec017
in al, dx
mov dl, 0xce
mov r8b, 5
sub al, byte [rdi + 0x20]
sbb ebp, ecx
sbb eax, 0x17353c17
in al, 0x3a
add ch, byte [rcx + 0x7b11a71c]
shl byte [rdi + 0x2aac7e8], cl
mov edi, 0xb0876700
sub edi, dword [rcx - 0x70fd32e9]
lodsb al, byte [rsi]
enter -0x4c37, 0x10
mov edi, 0xafc70abb
or byte [rdi - 0x13f8fd29], ch
jrcxz 0x401916
adc dword [rbx], eax
int 4
mov edi, 0x1b0727b7
and byte fs:[rdi + rbp*8], al
xor byte [rbx], al
and eax, 0x20bdf210
mov es, word [rdi - 0x2c]
adc dword [rbx + 0x17eed843], 0xb7f0043a
in al, dx
add eax, 0x45f21c2
jnp 0x401989
cmpsd dword [rsi], dword ptr [rdi]
insb byte [rdi], dx
or dword [rbx + rcx + 0x5a79fc0], ebx
jbe 0x401998
wait
iretd
sbb al, 5
jb 0x40198f
in al, dx
add eax, 0x8f1da2d7
nop
add eax, 0x40b8e900
stosb byte [rdi], al
xchg dword [rax], edx
jb 0x40196e
and dword [rdi + rsi*4 + 0x5f], ebp
add dword [rsi], eax
out 0x24, al
pushfq
insb byte [rdi], dx
push rbx
and eax, dword [rcx]
adc al, 0x1b
xchg eax, edx
insd dword [rdi], dx
pop rsi
adc dword [rdx], eax
pop rdi
push 0x17
in al, 0xec
add al, 0x87
adc byte [rcx], al
cmp dword [rcx - 0x3a], 0x8ee01921
push rax
leave
cmp esp, dword [rbp - 0x71]
sahf
mov al, 0x1d
scasd eax, dword [rdi]
sub al, 0x32
fcom dword [rcx]
cld
out dx, eax
cmp ecx, esp
xchg eax, esp
cmp eax, 0x7548f1b
shl dword [rcx + 0x17], -0x28
and dword [rsi + 0x17a24707], eax
sbb edx, dword [rdx + 0x7bc0e13]
sbb byte [rsi + 0x2760c85f], bh
sbb ebp, dword [rax]
pop rsi
enter 0x43b3, 0x74
add dword [rdi + 0x8223228], esp
sbb dword [rbp - 0x38], 0x13
jg 0x4019a8
sbb eax, 0x79c2177f
jb 0x4019dd
xchg eax, ebx
sbb esp, dword [rbx + 0x77]
jmp 0x401a3b
sbb al, 0x5e
and byte [rdi], al
cmp dword [rdx + 0x77], edi
or eax, ecx
or dword [rbx - 0x50], esi
pop rdi
cmp dword [rdx], ecx
pop rbp
scasd eax, dword [rdi]
test bh, al
or al, byte [rdi + 0x5a]
test byte [rax + rbx*8 - 0x7d], cl
movabs al, byte [0x3610e40b7b2f400e]
out dx, eax
or ebx, dword [rcx]
xchg byte [rax + 0x33f0a258], dl
sahf
jno 0x401a76
cmp cl, byte [rdi + rdx*2]
rcr dword [rdx], 1
xchg eax, ebp
push rax
nop
jbe 0x401a12
cmpsd dword [rsi], dword ptr [rdi]
and dword [rdi + rcx], esp
scasd eax, dword [rdi]
fistp word [rax + rsi*2]
inc dword [rbp + 0x74727a97]
jae 0x401a8f
jns 0x401aef
pop rdi
push r10
pop rdi
ljmp [r13 + 0x5453dbfd]
or dword [rax], eax
jb 0x401b08
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
in eax, dx
in eax, dx
frstor dword [rbp + 0x73]
and dword [rdi + rbp*2 + 0x5f], esp
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401b23
jne 0x401b3f
add bh, bl
fld xword [rdi + 0x42]
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401b3c
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xbe243538
pop rdi
imul bp, word [rsi + 0x69], 0x7208
jb 0x401b47
jns 0x401b47
jne 0x401b5d
jns 0x401aed
add sp, si
mov esi, 0x656d0add
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401b2d
or eax, 0x84dbb75f
jne 0x401b2b
je 0x401b2e
pushfq
jo 0x401b78
and al, 0x5a
push rbx
fcmovnbe st(0), st(6)
push qword [rsp + rcx*2 + 0x31]
cmp dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
cdq
sub eax, 0x729f6e77
out dx, eax
fsubp st(5)
in al, dx
jne 0x401b88
je 0x401b41
cmp byte [rbp + 0x69], al
outsd dx, dword [rsi]
cmp ecx, dword [rsi]
xor r8, qword [rbp + 0x50]
jge 0x401b9e
mov ebx, 0x320753bf
push rax
xor al, 0x31
sbb ebp, dword [rdx]
je 0x401bab
movsxd rbx, ebp
mov ebx, 0x99695c8d
imul edi, dword [rdx + 0xd], 0x646e663f
std
in eax, dx
outsd dx, dword [rsi]
mov dh, 0x75
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
ljmp [rsi + 0x2132cadd]
pop rdi
and bl, byte [r14 + 0x4d415246]
pop r15
in eax, 0xc9
mov ah, 0x44
or ah, byte [rsi]
or eax, dword [rdi + 0x4e]
push rbp
loope 0x401ba9
jnp 0x401b34
and byte [rax + 0x44], cl
push rdx
cmp eax, 0x5346464f
adc esi, esi
jle 0x401be9
sub r13b, r10b
adc ch, ch
mov bh, 0xbb
outsb dx, byte [rsi]
wait
jb 0x401b5a
pop rcx
add byte [r8 + 0x72], sil
sbb ebx, dword [rdi]
div byte [rsi + 0x40]
pop r15
xor ch, byte [rsi]
add dword [rip + 0x777334e2], esi
insd dword [rdi], dx
fstp xword [rbx + 0x634970fd]
jbe 0x401c20
push rdi
push rbx
xor dword [rdi + rax*8 + 0x62], edx
shl byte [rbx - 0x25], cl
insd dword [rdi], dx
movabs eax, dword [0x6e6713394e235ea7]
movsxd rsp, dword [rcx - 5]
outsb dx, byte [rsi]
js 0x401c62
insb byte [rdi], dx
je 0x401c36
push rax
movsxd rcx, dword [rsi + 0x34]
pop rdi
or eax, 0x90320031
pop rdx
fistp dword [rcx + 0x2beb0073]
sbb dword [r11d + 0x12de19ad], r15d
movsxd rbp, dword [rax + 0x61]
fiadd word [rcx + 0x53567388]
ja 0x401c10
jae 0x401c1b
add byte [rdx + 0x52], ah
cmp byte [r15 + 0x31], bl
cmp dword [rsi - 0x42], ebp
pop rbp
ret
insd dword [rdi], dx
imul eax, dword [rsi], 0xcf49ca61
xor dl, dh
ret 0x6b5a
out dx, al
sub ebx, edi
insb byte [rdi], dx
jno 0x401c69
in al, dx
pop rsi
adc al, 0x44
in al, dx
insd dword [edi], dx
movabs al, byte [0x764a792a443f8c1d]
pop rdi
push rdx
movabs eax, dword [0x736cb1ffd2f76c43]
sahf
pop rdx
xor eax, 0x766c6f73
or al, 0x70
jne 0x401cd5
outsb dx, byte [rsi]
movabs dword [0x90e538a142848dd0], eax
pop rax
ret
pop rbp
pushfq
xor al, 0x49
jg 0x401cb8
xor dword [rsp + 0x6d], ecx
test byte ss:[rdi], bh
pop rax
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x53
mov fs, word [rcx - 0x12]
push -0x8ce7943
movsb byte [rdi], byte ptr [rsi]
adc byte [rsi - 0x53], ch
mov ch, 0xee
add eax, 0x49790785
or eax, 0x16018488
int3
leave
mov edx, 0x351c67c6
outsb dx, byte [rsi]
and byte [rbx], cl
push rbx
sbb bl, byte [rdx]
add dword fs:[rbp + 0x4a], 0x53
pop rcx
jmp 0x401d24
pop qword [rdx + 0x16]
pop rdi
adc edi, dword [rax + 0x21]
mov ebp, 0x1b2018de
test byte [rax - 0x41], dh
push rax
movsxd rax, dword [r9]
ret 0x1096
and eax, 0x964d314c
jne 0x401d30
leave
test eax, 0x234a5f4d
mov ah, 0xfe
fimul dword [rbx + rax*2]
push rsp
insb byte [rdi], dx
lodsb al, byte [rsi]
imul ebp, dword [rbx], 0x6b
jbe 0x401cb5
adc esi, dword [rbx]
pushfq
ja 0x401cda
out dx, al
outsd dx, dword [rsi]
popfq
insd dword [rdi], dx
int1
push rbx
xor eax, 0x5db6885f
mov edx, 0xc04f606e
pop rdi
jne 0x401c8f
loopne 0x401c93
in al, dx
jbe 0x401d52
xor al, 0x26
movsxd rbp, dword [rbx - 0x47]
loope 0x401cac
mov ah, 0xf0
loope 0x401d8f
push rdi
outsb dx, byte [rsi]
test dword [rsi + 0x4b], ecx
out 0x42, eax
fldenv [rip + 0x65738308]
xor byte [rsi + 0x2e6102c2], dh
adc edx, dword [rsi]
xor ebx, dword fs:[rax + 0x8249ee7]
pop rbx
or esi, eax
rol byte [rsi - 0x37f50480], 1
int 0x5f
ret 0x242a
xchg eax, ebp
or bh, byte [rax + rax*8 - 0x1490674e]
sbb dword [rax + 0x5fb36474], edi
push -0x752f1c79
adc byte [rsi], cl
sub al, 0x1d
outsb dx, byte [rsi]
xor byte [rcx - 0x3e], al
loope 0x401dca
imul eax, dword [rbx + rsi - 0x55], 0x34
xor byte [rsi + rax*2 - 0x69527dfb], dil
pushfq
jmp 0xb30a526
fisttp dword [r9 + 0x52]
xor byte [rdi - 0x41], cl
ror dword ss:[rdi], 1
push -0x30
fsub dword [rsi + 0xb]
outsb dx, byte [rsi]
mov edi, 0xbd3b86c0
mov esp, 0x707974f2
push r11
xor dh, byte [rcx - 0x49cd7cc7]
jb 0x401d22
leave
push 0x746c6e6b
mov ebx, 0x34ec5e92
movsd dword [rdi], dword ptr [rsi]
jns 0x401e0b
imul edi, dword [rcx + 0x331dba66], 0x6949af6d
cli
push rdx
sub rax, 0x4de1d240
xor eax, 0x8942405
jp 0x401e30
and cl, dl
lea esi, [rsi + 0x3a8222e0]
adc dword [rsi + 0x4a], esi
std
xor al, 0x4c
adc dword [rdx], eax
jbe 0x401df7
pop r8
out 0x66, al
and byte [rcx + 0x6d], 0x61
and dword [rdi + 0x59], eax
hlt
xor dl, ah
sbb bl, byte [rdi - 0x28]
pop rsi
add cl, byte [rsi - 0x3de410be]
xor ebx, 0x43880482
xor ebx, esp
int1
mov ebp, 0x5f33b095
movsd dword [rdi], dword ptr [rsi]
fsub qword [rdx + 0x5f]
xlatb
mov cs, word [rax]
jnp 0x401e33
fcom qword [rbx + 0x56]
fbstp tbyte [rdx]
xchg eax, esi
mov dword [rsi - 0x1e629a72], edx
jbe 0x401d9f
pop rbp
pop rdi
jo 0x401e91
test byte [rsi + 0x6fc296a1], 0xec
pop rdi
jbe 0x401e60
and eax, esp
test dword [rdx], ecx
mov ecx, 0x3153101d
xor esi, dword cs:[rax]
ljmp [r15 + 5]
adc eax, 0x110459da
push rbx
mov ecx, 0x7858b604
test eax, eax
push rbx
xor al, 0x7d
xor eax, 0x6c2a313a
and byte [rcx - 0x34], 0xf8
call 0x393e2a81
jo 0x401ed1
jo 0x401ec3
and ebx, dword [rdi + 0x55]
outsb dx, byte [rsi]
fld xword [rax + 0x438bd474]
push rdx
mov ebx, 0x5e01e65
pop rcx
mov bh, 0x43
sbb sil, byte [r8]
push 0x5e0e7869
add byte [rsi + 0x36], dl
mov dl, 0x35
push rdx
mov cl, 0xb2
outsb dx, byte [rsi]
scasd eax, dword [rdi]
add dword [rbx], esp
lodsd eax, dword [rsi]
and al, 0xff
sbb ebp, dword [rsi + 0x78dbb276]
jae 0x401f13
insd dword [rdi], dx
je 0x401f12
push 0x475b9609
sbb ebx, dword [rsi]
outsb dx, byte [rsi]
jo 0x401eb1
outsb dx, byte [rsi]
outsd dx, dword [rsi]
out dx, al
cwde
cmp eax, 0xf82df41a
or eax, 0x75622e9a
mov ch, 0x58
mov dword [rdi + 0x692d64e7], esi
mov bl, 0xd
jne 0x401e9b
out dx, al
lodsd eax, dword [rsi]
cmp byte [rcx], cl
jns 0x401f3b
sbb dword [r14], r12d
int3
imul ebp, dword [rbp - 0x4fa0f367], 0x1be1a857
adc ch, dh
sub byte [rcx], cl
sahf
xor dword [rdi + 0x72748155], 0x34
or dl, byte [rbx - 0x32]
nop
fld xword [rdi + rbp*2]
or byte [rcx], al
add eax, 0x31eac11a
mov edx, 0x2eaf6f24
push -0x48da4a95
in al, dx
push 0x5d0d7264
movsd dword [rdi], dword ptr [rsi]
pop rdi
push rdx
cdqe
test eax, 0x6fa07470
lahf
pop rbx
or ebp, dword [r10 + 0x63]
jb 0x401ec2
mov bl, 0xb7
sal byte [rsi], 1
cmp al, byte [rax]
push 0x56b5e7b
push 0x1004050e
push rdx
std
cmp al, 0xd0
stosb byte [rdi], al
insb byte [rdi], dx
add byte [rax], al
jg 0x401f3d
fsubr qword [rdx + rbx*2]
push rdx
outsd dx, dword [rsi]
xchg byte [rax + rcx*2 - 0x32], ah
sbb al, 1
and esp, dword [rax + rdx*4 + 1]
imul eax, dword [rdi], 0x92195454
and dword [rcx], ebx
and byte [rcx + rsi], al
sbb dword [rax + rdx*4 + 0x21], esp
je 0x401fd3
and al, 0x1c
repne outsb dx, byte [rsi]
sub byte [rdi + rdi*2 - 0xa], al
ljmp [rdi - 0x68]
xor cl, al
and byte [rbx + 0x20053098], al
int 0x90
or al, 8
or r14, qword [rbx - 0x37c9f37d]
enter 0x2d0, -5
xor ecx, eax
xchg eax, ebx
sbb byte [rsi + 0x78], dl
adc ebp, dword [rdx + 0x49]
add esi, dword [rdi]
rcr byte [rbp + 0x24], cl
jg 0x401f9d
pop rsi
mov edi, 0x84deceff
pop rdx
pop rdi
mov edi, 0x6c86e93c
add al, byte [rdi]
imul edi, dword [rdi], -2
cmp dword [rbx - 0x6d], esi
add dword [rax + 7], ebx
cmpsd dword [rsi], dword ptr [rdi]
nop
ret 0x4d94
jp 0x402010
ror dword [rbp + 0xe], 0xb
call 0x764d5ece
fsub dword [rdx]
inc dword [rdi + rdi - 0x5e2130be]
xchg byte [rdi], dl
xlatb
add sil, byte [rbx + rax - 0x38]
and eax, 0x19f8e19
pop rsi
xor byte [rbx + 0x430757b7], bl
xchg eax, esp
pushfq
lcall [rdx]
mov dword [rdi], edi
or byte [rbx], 0x39
enter -0x7fe0, -0x70
add dword [rcx + 0x21], edx
sbb esi, dword [rdx + 0x3f940710]
mov dl, 5
xchg byte [rbx + 0xf2f074f], bl
jae 0x401f9b
and dword [rbx], edi
popfq
and byte [rdi], al
jg 0x402049
insb byte [rdi], dx
cmp dword [rdx], 0x99a33f0f
wait
and edi, ebp
dec dword [rdx]
leave
or dword [rcx - 0x2331b541], ebp
add al, 0x27
mov edi, 0x21449b5c
sbb esi, dword [rcx + 0x6407ef3f]
leave
cdq
jg 0x401fef
mov edi, 0x6e67923f
xor ah, al
jg 0x402069
add esp, dword [rsi]
push rbp
leave
xor dword [rsp + rbx*4 + 0x2e7f07e5], edx
sal word [rax + 0x67669359], 1
fst qword [rax + 0x72]
out 7, al
call qword [rax]
out 0x3f, eax
invd
outsb dx, byte [rsi]
xor ah, byte [rax]
clc
call qword [rax - 0x35]
add eax, 0x17493ff3
xchg eax, ebx
pop rdi
clc
wait
sahf
mov ecx, 0x3f1f6cd9
jg 0x402074
add dword [rcx], ebx
adc byte [rax + 0xb6c8324], bl
mov edi, 0x92112f2f
sbb dword [rax + rcx + 1], 1
movabs eax, dword [0x333fd8f8c75e92ec]
sbb dword [rdx - 0xf827f6], edx
add ebp, ecx
xchg byte [rdx + 0x87f1018], dl
jb 0x402045
mov bl, 0x31
lock sub byte [rcx], al
and byte [rax + 0x1524360d], dl
jg 0x4020f3
pop rax
or bl, ah
mov al, 0x3f
xor al, 0x3f
sbb dword [rdi + 0x7b11766c], esp
add byte [rdi + 0x48], al
jg 0x402089
sbb dword [rbx - 0x44fee11c], ecx
add byte [rdx + 0x28bd6793], bl
xor edi, edi
loopne 0x4020f1
jb 0x4020f3
sbb eax, dword [rax + 9]
jg 0x4020f8
cmp al, 0
shl byte [rdx], 0x79
or al, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
and bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x29f7fdea], ecx
test dword [rcx + rdx*8 - 0x13d46897], eax
js 0x40213e
add byte [rax], al
jbe 0x40212b
add byte [rax], al
push 0x49000051
add byte [rax], al
xor ah, dh
add byte [rax], al
add bh, bh
