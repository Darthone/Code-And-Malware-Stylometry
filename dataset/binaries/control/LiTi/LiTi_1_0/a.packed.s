call 0x400df8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400c10
add ebx, ebx
je 0x400bc6
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400bfe
cmp rbp, -4
ja 0x400bfe
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400be6
add ecx, 4
mov dl, byte [rax]
je 0x400c0e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400bfe
ret
cld
pop r11
cmp r8b, 2
je 0x400c26
jmp 0x400ca3
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400c36
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400c1e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400c4e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400c3b
sub eax, 3
jb 0x400c6c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400ca3
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400c93
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400c91
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400c80
cmp rbp, -0xd00
adc ecx, eax
call 0x400bd2
jmp 0x400c26
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400d7c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400d1a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400d66
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400d39
push 0x3a707474
jne 0x400d92
js 0x400d52
jae 0x400d8c
outsb dx, byte cs:[rsi]
je 0x400d4b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400db9
jb 0x400dab
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400dd6
jb 0x400de9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x2118f6
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x2118f6
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400cb4
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400ddf
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400d8d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f0e87
jb 0x400e9f
movsxd rbp, dword [rdi]
jae 0x400e99
insb byte [rdi], dx
js 0x400e9f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400e7f
cmp rsi, rcx
jae 0x400e87
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400e66
cmp al, 0x8f
ja 0x400e66
cmp byte [rsi - 2], 0xf
je 0x400e6c
sub al, 0xe8
jg 0x400e69
push rdi
cmp al, 1
ja 0x400e54
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400e57
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400e84
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400edb
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1359
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400f1f
mov al, 0xa
jmp 0x400f1f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400efb
inc ebx
mov al, 0
jmp 0x400f23
mov al, 2
jmp 0x400f23
mov al, 3
jmp 0x400f23
mov al, 0x3c
jmp 0x400f23
push rcx
rcr ah, 1
fstp st(7)
jle 0x400f64
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400f76
jg 0x400f68
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a66eb
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400fc2
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb613f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400fca
cmp esi, 0x21585055
jne 0x400fce
jge 0x400fc0
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400fc3
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400fc7
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401073
pop rcx
or al, 0x3b
jb 0x401079
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400feb
jmp 0x400fed
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660f2e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53176
in eax, dx
jg 0x401025
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40106b
mov bh, 0x2a
add edi, 0x10
jmp 0x401068
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4010a5
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4010e1
jne 0x4010f8
fstpnce st(6), st(0)
jle 0x4010c1
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4010f7
jrcxz 0x40112b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b08f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4011aa
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40116a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829573f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4011dd
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401177
and ecx, 7
or al, 0xeb
jae 0x4011e2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401217
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401255
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40120e
push rax
call 0xffffffff868d0efb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401218
std
cmp edi, esi
xchg eax, edi
jle 0x40126d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c957f9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40126b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401259
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401282
js 0x4012c2
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401354
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad258f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401375
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40137a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20e2c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401308
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
ret 7
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax - 0x56], al
movabs byte [0x92], al
and byte [rcx], al
dec eax
and al, byte [rax]
add byte [rax + 0xa], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40142e
je 0x401437
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401400
mov dh, 0x7d
jbe 0x4013ff
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401438
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5280006], bl
add byte [rax + 8], dl
enter -0x6fd9, 0xf
or byte [rax], al
mov byte [rcx], cl
add byte [rax], bl
or esp, esp
adc ecx, eax
or al, byte [rax]
or eax, dword [rax]
adc byte [rbx], cl
or esp, esp
add ecx, dword [rax + rax]
xor byte [rip - 0x6f3a000], cl
add al, 0xf2
add dword [rsi], ecx
add byte [rax + 0xf], dh
add byte [rdx + rdx + 0xf9027c], ah
adc byte [rax], al
mov al, 0x11
add byte [rax + 0x13], bh
cmp dword ds:[rax + rax*4 + 0x12], 0x13f000
or al, 0x16
nop
adc al, 0
call 0x557477
enter -0x6fd9, -8
add byte [rax], al
add esp, esp
adc ecx, eax
add byte [rax], cl
sbb byte [rax], al
clc
add al, 0xf2
add edx, esi
sbb dword [rax], eax
add byte [rax], ah
sbb al, byte [rax]
test al, 0x4d
fld dword [rdx + rsi*8]
sbb eax, dword [rax]
rcr byte [rbx + rdx], 1
pop rcx
in al, dx
ficom word [rdi]
add al, 0
int1
dec dword [rbx + rbx]
mov edi, 0x5c34d243
sbb dword [rdi - 0x7ce45ffe], edx
or al, 0xc9
loopne 0x4014cd
and byte [rbx + 0xd90bbdd], dh
pop rdi
xor eax, 0x575f22f0
mov al, 1
push rbx
jp 0x40143d
or al, 0xc9
xchg byte [rcx - 0x5a68b514], bl
xlatb
mov cl, 0xc1
wait
je 0x4014ef
mov eax, 0x4817cc77
sbb dword [rdx - 0x4f451e47], edx
and dword [rcx], ebx
insb byte [rdi], dx
out dx, al
mov edi, 0x2747fdf1
sbb dword [rsp + rdi*4 + 4], esp
and al, 1
rcl byte [rax + 0x3624360c], 0x17
sal dword [rbx + 0x49c83243], -0x3e
pop rbx
add dword [rdi + 0x48], ebx
sbb edx, dword [rdx - 0x37e8853c]
nop
and dword [rcx], ebx
int3
mov esp, 0x64864192
rcr ch, 1
enter -0x6370, 0x1c
add al, byte [rdx]
fsub dword [rcx]
leave
and byte [rbx + 0x32], al
fadd qword [rbx - 0x20]
xor ah, byte [rbx + rax*4]
or al, 0x60
in al, 0x7e
xor cl, al
nop
or al, 0xe8
popfq
in al, dx
or al, 0xc9
and byte [rbx - 0x3b], al
in eax, dx
cmp dword [rcx], edi
and al, 0x83
hlt
adc eax, 0x6486f803
nop
and dword [rip + 0x5c8365fc], edi
enter 0x41, 0x13
mov byte [rax + rdx*4], al
or al, 0x32
and al, 0xb1
or byte [rbx - 0x2337cdbd], dl
or al, 7
add al, 0x48
sbb dword [rdx - 0x6febcff0], edx
and dword [rcx], ebx
push rbp
sbb byte [rsi - 0x6e], bh
xchg byte [r12 + rbx - 0x56], spl
and byte [rax + rcx*2 + 6], ah
sbb edx, edx
and al, 0xf8
leave
leave
and dword [rcx], ebx
sub byte [rdi], bl
add eax, 0x8324322c
or al, 0x47
xor byte [rbp + 0x32], ch
enter 0xc90, 0x34
xchg eax, ebx
cmp byte [rcx + rcx*8], cl
and byte [rbx - 0x47], al
cmp al, 0xe2
cmp dword [rcx], edi
and al, 0x83
or byte [rsi], al
xchg byte [rax + rdx*4 + 0x21], r12b
pop rax
sbb dword [rdx + 0x50834c41], edx
sbb dword [rax + rcx*2 - 0x57], esp
pop rax
or byte [rcx], bh
jnp 0x40161f
mov al, 0x7f
iretd
test byte [rip - 0x363fc1e9], 0x41
push qword [rsi + rcx]
adc eax, 0x9439ed06
push rdi
adc eax, dword [rdi]
adc dl, byte [rdi + 0x5f]
test dword [rax], esi
js 0x40160e
and dword [rdi], edx
xchg eax, ebp
sar dword [rbx - 0x80], 0x47
sub eax, 0xb1d70507
sub eax, dword [rbx + 0x2f4740d8]
push rsi
add dh, byte [rbx + 0x57148129]
scasd eax, dword [rdi]
or al, 0x62
push rbx
jp 0x401636
cmpsd dword [rsi], dword ptr [rdi]
sbb cl, byte [rcx]
js 0x4015fb
xor byte [rax + 0x5a], dh
ja 0x40157c
lea esi, [rip + 0x7732f673]
sbb byte [rcx], al
cdq
in eax, dx
xchg eax, ebx
or eax, 0xb00095dd
and dh, byte [rdi]
xor edx, dword [rcx]
pushfq
in al, dx
fnstenv [rdx]
movabs al, byte [0x91e839c59760212]
cvtpi2ps xmm1, qword [rdi + 0xe765761]
add bl, ah
mov ebx, 0xce0d88b2
pop rdi
mul dword [rdi + 0x87605c8]
sbb al, 8
cmp edx, dword [rax + 0x554320c5]
and bh, 0x79
ret 0xec0b
jp 0x401654
xchg eax, esi
or byte [rdi], al
xor eax, dword [rsp + rbx*4 + 0x5f02b33d]
stosb byte [rdi], al
out dx, eax
test byte [rip - 0x50eea8b7], cl
mov al, 0xfe
pop rdi
in al, dx
add dl, dl
xor byte [rax], bl
scasd eax, dword [rdi]
adc byte [rip - 0x34dba0f7], ah
xchg byte [rbx], cl
outsd dx, dword [rsi]
fist word [rcx]
add bh, byte [rax + 0x393c9ece]
jnp 0x401686
loopne 0x4016a0
adc byte [rcx], al
xchg eax, edx
sbb byte [r10 - 0x50604fbf], dl
xor bl, al
leave
xor byte [rdx], dl
scasd eax, dword [rdi]
sbb ebx, dword [rdi + 0x76]
test byte [rbx - 0x45], dl
or dword [rdi], eax
std
adc byte [rax], ch
mov al, 0x93
or dword [rcx + rdx*8], 0x25
adc dword [rsi], ecx
mov edi, 0x7205ece4
add ecx, dword [rdx]
or ch, byte [rdi]
movsd dword [rdi], dword ptr [rsi]
or byte [rbx], bl
xchg byte [rcx + 0x6b], dl
pop rax
enter 0x7678, 0x62
cmpsd dword [rsi], dword ptr [rdi]
clc
and ah, bh
xchg ah, ah
test byte [rbx - 0x5f], al
or dh, bh
jmp 0xffffffffc25cf7fd
pop rdi
cmp cl, byte [rbx]
enter 0x1793, -0x28
or ebx, dword [r15 + 0x5b]
or esp, dword [rax]
or al, 8
sub eax, 0x2f7c5d84
xchg dword [rdi], ebx
movsxd rdx, dword [rax + 0xc081793]
mov bl, 0x6f
out 0x41, eax
mov edx, 0xe0c0e40
or al, 0xc2
leave
or ax, 0xdf90
test eax, 0x403fffff
out 0x63, eax
jb 0x40177e
jae 0x401780
jne 0x401774
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
lcall [rbx - 5]
mov bh, 0x54
or dword [rax], eax
jb 0x40178b
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
fcmovnu st(0), st(3)
mov ebx, 0x6f642173
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4017a6
jne 0x4017c2
add eax, 0x42dfb7f6
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4017bf
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x5b243538
sti
mov edi, 0x69665ffd
outsb dx, byte [rsi]
imul ecx, dword [rax], 0x79617272
pop rdi
outsb dx, byte gs:[rsi]
je 0x4017e1
jns 0x401712
or ch, byte [rbp + 0x6e]
rcr ah, 0xb7
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x4017b0
or eax, 0x6dbb295f
lahf
mov al, 0x74
sub ah, byte [rdx + 0x2d]
jae 0x4017f8
insb byte [rdi], dx
movabs byte [0x5a7ffdad6d2a7070], al
push rbx
je 0x4017e5
xor dword [rcx], edi
jo 0x401806
movsxd rsp, dword gs:[rbp + 0x77]
lahf
xor edi, dword [rbp + 0x6e]
mov ecx, 0xa5bec1bb
jb 0x401821
movsxd rsi, dword [rdx + rbx + 0x33]
sub dword [rdi + 0x63], ebp
js 0x4017f1
fstp xword [rsi - 0x2a]
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x380c650f
insd dword [rdi], dx
insd dword [rdi], dx
imul edi, dword [rbx + 0x636f6977], 0xe
cmp qword [rdx + r11], r9
jne 0x401817
out dx, eax
fidiv dword [rsi + 0x4c7878fb]
xor dh, byte [rcx]
mov ecx, 0x6cac6665
jge 0x401824
imul ebx, dword [rdi + 0x70], 0x6f
iretd
loopne 0x4017f0
sti
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
or al, 0x19
add ebp, dword [rbx - 0x23]
adc dword [rcx], esi
wait
pop rdi
adc ah, cl
mul byte [rsi - 0x25]
xor byte [rcx - 5], ah
jo 0x401846
pop rbp
adc dh, byte [rcx]
xor eax, 0x76f6db46
mov dh, 0x65
js 0x4017b9
int 0x73
xor rax, 0x45b66153
ret 0x1dbe
test al, 0x73
jne 0x401889
jae 0x401848
jbe 0x4017b0
mov ebp, 0x695f389b
insd dword [rdi], dx
imul edi, dword [rdx + 0x41], 0xadb0a37
imul eax, dword [rbp - 0x5adf00ff], 0x45
cmpsd dword [rsi], dword ptr [rdi]
mov al, 0xb6
push r11
stc
imul ecx, dword [rdx + 0x24], 0x56d66235
pop rax
imul esp, dword [rbp + 0x610d86a9], 0x17
push rdx
fadd st(2)
outsb dx, byte [rsi]
adc ah, byte [rcx - 0x79]
ja 0x4018cc
or bl, bl
sbb al, 0x34
adc dword [eax + 0x7b], esi
outsb dx, byte [rsi]
or ecx, dword [rcx - 0x1de19a14]
insd dword [rdi], dx
fisub word [rbx + 0x68]
adc al, 0x52
fst dword [rax]
lodsb al, byte [rsi]
push rcx
cdq
add byte [rbx], ch
sub al, 0x91
adc esp, dword [rdi]
adc al, cl
add cl, byte [rdi + 0x77]
mov dh, 0xcd
scasb al, byte [rdi]
mov al, 0x27
cmp dword [rsi], esp
or edi, dword [rcx + 0x4a]
mov dl, 0x76
leave
adc eax, 0x9beb6e34
pop rbx
ret
adc dword ss:[rsi], ebx
sub dword [rdi - 0x43], ebp
insd dword [rdi], dx
push rbx
fnstenv [rbp + 0x73]
sub dh, byte [rax + 0x18]
jbe 0x40192e
jbe 0x401915
imul eax, dword [rdi + rdx*2], 0x3455903a
sub ax, 0xd96a
mov al, 0xab
xor byte [rax], ch
fldenv [rbp + rcx*2 + 3]
pop rcx
xlatb
push rsi
int 0x15
jo 0x4018c5
pop rbx
imul edi, dword [rcx + 0x3d342866], 5
insb byte [rdi], dx
xor byte [rip + 0x332b640d], ch
xchg eax, esp
jb 0x4018cf
mov dl, 7
wait
retf 0x31f4
je 0x401966
jo 0x401914
push rdi
push 0x4d
xor ch, bl
movsb byte [rdi], byte ptr [rsi]
push rsi
sub al, byte [rbp - 0x18dc8b4e]
sbb edx, dword [rbp + 0x66d953b9]
je 0x401968
jb 0x401930
and eax, 0x3b640259
jo 0x401970
outsb dx, byte [rsi]
cdq
mov dl, 0xd9
and dword [rbx], eax
xor al, 0x64
sub byte [rsi - 0x59], cl
mov dl, 0xb6
lea esp, [rsi + rbp*2]
sbb byte [rbx + rsi*2 + 0x70], dh
xchg eax, edx
and al, 0x35
mov bh, 0x65
jb 0x4018b3
adc eax, 0xb8362986
retf -0x30f6
xor bh, byte [rax + 0x69]
jp 0x4019b0
and ebx, 0x383b4b81
movabs eax, dword [0x5f01d8386816b174]
push rbx
sub byte [rbp + 0x18c064a2], bh
lodsd eax, dword [rsi]
and bh, cl
or eax, 0xc6e3479
pop rdx
iretd
btc dword [rdi + 0x69], eax
and byte [rsi], al
scasb al, byte [rdi]
test eax, 0x560d7ab9
cmp eax, 0xedfdc02b
outsd dx, dword [rsi]
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r13b, dil
movabs al, byte [0x33735f495f735e35]
mov word [rsi + 0x52], es
wait
sti
pop r15
or r10b, byte [rbx + rcx]
lahf
in al, dx
rcl dword [rsi + 0x48204855], 0x44
push rdx
push rbx
jle 0x401937
push rsp
sub r11b, r8b
cmp ebp, eax
adc byte fs:[rsi + 0x59447c72], bl
jbe 0x4019ff
mov bh, 0x4e
cmp dword [r11], esi
movsxd rbx, dword [rdi]
fdivr st(7)
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0xef
rol ch, cl
imul esp, dword [rax - 0x1d], 0x2c16646d
xor al, 0x73
ja 0x401988
insd dword [rdi], dx
fstp xword [rbx + 0x52769b5d]
jo 0x401a49
xor dword [rbp - 0x1d], ebp
out dx, al
movsxd rbx, dword [rax - 0x3c5dba25]
packuswb mm5, qword gs:[rbp - 0x21]
sbb ah, byte [rsi + rdx*4]
mov esi, 0x52e64ab5
retf
or eax, dword [r9 + 0x58]
pop rdx
and esi, dword [rbx - 0x5e]
jae 0x401a67
add eax, 0xdddb5973
or al, 0xb3
sysenter
pushfq
xor dword [r8 + 0x6b], edx
fsub dword [rcx + 0x36]
or edx, dword [rdi + 0x47]
sbb bl, byte [rsi]
sub eax, 0x5f3da271
xor ch, byte [rsi]
add edi, esp
xor eax, 0xec859561
mov al, 0xd2
je 0x401a09
sbb dword [rbp + 0x2d], ebx
mov ebx, dword [rdi - 0x37]
push r12
pop r15
cld
sbb bh, byte [rdi - 0x4f]
or al, 0x43
movsxd rdx, dword [rcx + 0x62]
push rax
lodsb al, byte [rsi]
pop rbp
mov eax, 0x6d0afc2b
xor eax, 0x65760573
cmp al, 0xf9
push rsi
mov dword [rdx + 0xf], 0xbc312a49
mov edx, 0x95c15b0d
push rsi
jae 0x401a84
push r10
adc esi, dword [rbx]
sbb eax, dword [rsi + 0x2aae0c56]
fidivr word [rdi + 0x6d]
mov gs, esp
pop rdi
push 0x53451915
xor eax, 0x634b505f
je 0x401ae9
fmul st(4)
jne 0x401a89
iretd
retf 0x755f
test eax, 0x566c8183
cmp dl, byte [rdx]
push 0x37cffb61
imul esi, dword [rbp + 0x78ef37ef], 0x7c
and ch, byte [rdx + 0x69]
mov ebp, 0x4636d657
imul edx, dword [eax - 0x3c6a9ead], 0xf19485b9
sbb dh, byte [rcx]
push rsi
and al, 0xdc
cmp byte [rdx + rcx*8], cl
out dx, eax
jne 0x401b4a
jne 0x401aea
sahf
jrcxz 0x401b51
pop rdi
push -0x53257953
push rax
cwde
mov cl, 0x51
mov edi, 0xc1785895
xchg eax, ecx
xchg eax, esi
js 0x401b3b
imul eax, dword [rcx], 0xd9850b4b
jmp 0x401b03
xor al, byte [rdx]
push rbp
xor cl, byte [rcx - 0x48]
push rdi
sahf
mov dh, 0x52
test byte [rdi + 0x59], cl
out 0xd0, eax
sal byte [rsi], 1
pop rsp
mov edi, 0x1c19638c
xor al, 0x1b
xchg eax, ebx
and eax, dword [rsi]
xor qword [r10 + 0x3f], r12
push -0x6acfb450
imul ebx, dword [rbx - 0x35], 0x34
iretq
adc byte [rdx], al
cmp dword [rcx + 0x2b], ebp
push qword [rdx + rsi*8 - 0x2e018736]
imul esi, dword [rdx + 0x49], 0x605d2b6d
jmp 0x53477091
adc r11, qword [rdx + 0x42f01802]
insb byte [rdi], dx
imul ebx, dword [rbx], 0xfa09569a
test byte [rax], dh
cld
pop rdi
cdq
or ah, byte [rcx + 0x65]
ret
sub esp, r9d
add eax, 0x535d4247
xor ebx, dword [rdi - 0x36]
add esp, dword [rsp - 0x10de9a71]
push rdi
movabs dword [0x55f2175f6b67b615], eax
test ebp, edx
jb 0x401b68
add eax, 0x30765f22
and dword [rip + 0x61b0a523], ebx
mov esp, 0x332e3169
sar dword [rbp + 0xa], 1
imul ebp, dword [rbp - 0x7b], -0x24
xchg eax, ebx
retf
mov dh, 0xf1
push rbx
xor al, 9
xor eax, 0xb5453128
sub cl, byte [rip + 0x6e557a94]
xor eax, 0x74805208
in eax, dx
xchg eax, esi
imul esp, dword [rbp + 0x1e], 0x43
push r15
xor byte [rdx], bh
and byte [rcx - 0x37], ah
imul esi, dword [rdx], 0x29f85b70
jmp qword [rbx + 0x75]
add byte [rsi], ch
jae 0x401c40
insd dword [rdi], dx
sub al, 0x62
push rbx
sbb esi, dword [rsi - 0x4e]
je 0x401c43
push -0x2484b2f7
sbb dl, byte [rsi + 0x6e07705b]
outsd dx, dword [rsi]
sbb ch, byte cs:[rip - 0xbf298eb]
add rax, 0x75622e99
xchg eax, ecx
sub eax, 0x5ad6f769
lodsb al, byte [rsi]
stosd dword [rdi], eax
or eax, 0x64093870
jns 0x401c69
cmp byte [rbx + 0x33], ch
sbb dword [r14 + 0x67], r14d
sub bh, byte [rax + 0xcd53309]
pop rdi
sbb esi, dword [rsi]
mov bh, 0x41
mov al, 0xd7
sub byte [rcx], cl
jne 0x401c8b
jb 0x401c75
outsb dx, byte [rsi]
jnp 0x401bc2
or bpl, byte [rdi + r13*2]
or cl, al
movabs eax, dword [0x2ed56f243a05e03b]
push -0x53e7ca6a
xchg eax, edx
push -0x72acf22e
push rsi
call 0x2e427f9b
cmc
in al, 0xb3
and eax, 0x6cbd3ae0
adc eax, ebx
pop r10
lodsb al, byte [rsi]
or ebp, dword [rdx + 0x5f]
movabs eax, dword [0x68003516f66cd336]
jnp 0x401cb9
fcom st(6)
xor al, 4
add al, 0x52
std
add byte [rax], al
and dword [rdx + 0x1cf0068], ebx
jg 0x401cd5
outsb dx, byte [rsi]
sub eax, 0x1c3f07bf
xor al, 0x43
xor ah, byte [rcx + rax]
and eax, dword [rdi]
or al, 0x32
enter 0x5480, 0x54
and byte [rax + 0x490c90c], dl
xor dword [rsp + rcx + 0x7474c832], edx
and al, 0x41
jns 0x401ccb
jg 0x401c8d
ljmp [rdi - 0x68]
sbb dword [rax + rdx*4 - 0x68], esp
cmp byte [rip + 0x66901b08], al
or r10, rax
leave
fld dword [rcx + 6]
rcr byte [rax + 2], 1
sti
movsb byte [rdi], byte ptr [rsi]
sbb dword [rdx + rsi*4 + 0x3f], esp
sbb byte [rsi + 3], dl
mov esp, 0x787b549
sub byte [rip + 0x3922ee9], ch
pop rsi
mov edi, 0x6f6724ff
push rdx
scasd eax, dword [rdi]
mov edi, 0x43748032
add al, byte ss:[rdi]
imul edi, dword [rdi], -2
sbb dword [rcx + rdi*4 - 0x58f87737], -0x70
xchg eax, edx
outsb dx, byte [rsi]
retf -0xda
jp 0x401d3c
add al, 0x9c
inc dword [rdi]
cmp ebp, dword [rsp + rax*4]
inc dword [rdi + rdi - 0x6f9be3be]
mov al, 1
and byte [rax], cl
xchg eax, edi
sbb dword [rsi - 0x7d321eed], ecx
leave
inc dword [rsi + 0x1a39286c]
mov dword [rdi], edi
xor byte [rdi], dl
jb 0x401cb0
xor byte [r8], sil
add dword [rax], edx
stosd dword [rdi], eax
xchg eax, esp
lahf
or ecx, dword fs:[rdi + rsi]
out 0x26, al
jbe 0x401cd6
jo 0x401d43
jg 0x401db0
fadd dword [rdx]
jns 0x401d74
movabs dword [0x11ff07af422b3733], eax
xchg eax, edx
xchg byte [rdx - 0x6b4056f7], dl
pushfq
mov ecx, 0xbf072f59
add dword [rdx + 0x36], -0x4f
enter -0x6d7a, 0x33
jg 0x401ddd
mov edi, 0xdccf243f
jg 0x401d8f
add dl, byte [rbx]
adc byte [rax + 0x188fc95c], 0x4a
jb 0x401d86
jg 0x401d9b
fisttp dword [rdx + rbx]
shl byte [rbx + rdi*8 + 0x4a1bdf66], cl
fadd qword [rdi]
call qword [rax]
out 0x3f, eax
ror dword [rbp + 6], -0x5c
psubb mm0, qword [rdi]
ljmp [rax - 0x27]
mov ecx, 0xe93ff300
add ch, byte [rdx + rdx*4 - 0x29]
clc
wait
xor esi, dword [rdi]
wait
sub eax, 0x7f073f1f
or dword [rcx + rcx*8], 0xffffffc9
lock add dword [rsi], eax
adc byte [rax + 0x216d9064], bl
mov edi, 0x72421f1f
nop
mov ecx, dword [rax]
add dword [rcx], eax
sub esp, dword [rdi + 0x70a83f20]
xchg eax, ebx
and dword [rcx], ebx
or ch, byte [rax + 0x2ee90107]
jg 0x401ded
or byte [rbp - 0x3f6f9be4], al
mov eax, 0x83640238
or eax, 0x7f1520c9
xor byte [rdi], dl
ret 0x2c38
xor al, 0x3f
add al, 0x96
sbb eax, 0x3a977b11
xor edx, dword [rsi]
leave
xor edi, dword [rdi + 0x1e]
add dword [rbx + 0x4095d679], edi
xchg eax, edi
and bh, bh
or byte [rip + 0x39a401b0], cl
pop rdi
or dword [rdi + 0x2c], edi
xchg eax, edx
xchg eax, edi
sub eax, 0xc66
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x43f7fdea], ecx
mov cl, 0x28
mov esp, 0xa33556e0
enter 0x22, 0
js 0x401e58
add byte [rax], al
add byte [rbx], 0
add byte [r8], al
hlt
add byte [rax], al
add bh, bh
