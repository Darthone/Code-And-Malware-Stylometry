call 0x400d38
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400b50
add ebx, ebx
je 0x400b06
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400b3e
cmp rbp, -4
ja 0x400b3e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400b26
add ecx, 4
mov dl, byte [rax]
je 0x400b4e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400b3e
ret
cld
pop r11
cmp r8b, 2
je 0x400b66
jmp 0x400be3
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400b76
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400b5e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400b8e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400b7b
sub eax, 3
jb 0x400bac
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400be3
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400bd3
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400bd1
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400bc0
cmp rbp, -0xd00
adc ecx, eax
call 0x400b12
jmp 0x400b66
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400cbc
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400c5a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400ca6
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400c79
push 0x3a707474
jne 0x400cd2
js 0x400c92
jae 0x400ccc
outsb dx, byte cs:[rsi]
je 0x400c8b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400cf9
jb 0x400ceb
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400d16
jb 0x400d29
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21169c
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21169c
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400bf4
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400d1f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400ccd
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f0dc7
jb 0x400ddf
movsxd rbp, dword [rdi]
jae 0x400dd9
insb byte [rdi], dx
js 0x400ddf
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400dbf
cmp rsi, rcx
jae 0x400dc7
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400da6
cmp al, 0x8f
ja 0x400da6
cmp byte [rsi - 2], 0xf
je 0x400dac
sub al, 0xe8
jg 0x400da9
push rdi
cmp al, 1
ja 0x400d94
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400d97
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400dc4
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400e1b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1299
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400e5f
mov al, 0xa
jmp 0x400e5f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400e3b
inc ebx
mov al, 0
jmp 0x400e63
mov al, 2
jmp 0x400e63
mov al, 3
jmp 0x400e63
mov al, 0x3c
jmp 0x400e63
push rcx
rcr ah, 1
fstp st(7)
jle 0x400ea4
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400eb6
jg 0x400ea8
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a662b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400f02
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb607f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400f0a
cmp esi, 0x21585055
jne 0x400f0e
jge 0x400f00
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400f03
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400f07
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x400fb3
pop rcx
or al, 0x3b
jb 0x400fb9
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400f2b
jmp 0x400f2d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660e6e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf530b6
in eax, dx
jg 0x400f65
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x400fab
mov bh, 0x2a
add edi, 0x10
jmp 0x400fa8
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x400fe5
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401021
jne 0x401038
fstpnce st(6), st(0)
jle 0x401001
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401037
jrcxz 0x40106b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1afcf
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4010ea
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4010aa
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829567f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40111d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x4010b7
and ecx, 7
or al, 0xeb
jae 0x401122
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401157
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401195
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40114e
push rax
call 0xffffffff868d0e3b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401158
std
cmp edi, esi
xchg eax, edi
jle 0x4011ad
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95739
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4011ab
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401199
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x4011c2
js 0x401202
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401294
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad24cf
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x4012b5
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4012ba
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20d6c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401248
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
cld
or dword [rax], eax
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
test al, 0x2a
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
dec eax
and dword [rax], eax
add byte [rdi], dl
or al, byte [rax]
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40136e
je 0x401377
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401340
mov dh, 0x7d
jbe 0x40133f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401378
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x4c80006], bl
add dh, bl
enter -0x37f9, 0xf
or byte [rax], al
or byte [rdi], al
or dword [rax], eax
pop rax
in al, 0x13
enter 0xa13, 0
movabs al, byte [0x3f201db08f0000b]
or al, 0
adc byte [rcx], cl
or eax, 0xac090a04
sbb al, 0x60
ror dl, 1
test byte [rdi], 0
in al, 0xf
ja 0x40138f
in al, 7
or byte [rdi + 0x10e00011], bl
adc al, byte [rax]
js 0x40139e
add cl, bh
add edx, dword [rbx]
add al, bh
sbb eax, 0x90271460
cmpxchg byte [rsi], bl
adc eax, 0x161000
enter -0x6fd9, 0x18
add al, bh
sbb byte [rcx], cl
in al, 3
in al, 0
add byte [rax], ah
sbb dword [rax], eax
mov byte [rbx + 0x1ae409b2], bl
add byte [rax + 0x1701131b], ah
mov dl, 0xd8
xchg eax, ecx
mov esp, 0xfff10004
or al, 0x1b
mov edi, 0xb869a485
sbb dword [rdi + 2], edi
sbb dword [rdx - 0x7fe8a611], edx
ror byte cs:[rsi + 0x76], 0x6f
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
shl byte [rdx], 1
add dword [rbp + 9], ebx
xchg eax, ecx
rcl dword [rdi], 0x53
jp 0x401411
xor ah, byte [rbx + rax*4]
loopne 0x40137c
xchg eax, edi
jno 0x40137f
mov al, 0x2b
movsd dword [rdi], dword ptr [rsi]
xlatb
stosd dword [rdi], eax
wait
mov al, 0xcd
lar eax, word [rax + 0x77]
add dword [rcx], esp
sbb dword [rax + rcx*2 - 0x25], esp
add al, cl
xchg byte [rax + rsi*4 - 0x18], ah
mov edi, 0x9c47f7d1
sbb al, 0x64
nop
add al, 4
add dword [rax], ecx
xor bl, r8b
nop
xor byte [rdi], dl
or dword [rbx - 0x32], eax
leave
and byte [rdx], cl
push rbp
add dword [rdi + 0xc], ebx
and dword [rcx], ebx
insb byte [rdi], dx
je 0x40144f
adc byte [rcx - 0x7a], al
mov al, 0x94
adc al, 0xb6
sbb dword [rdx - 0x36e328e8], edx
and dword [rcx], ebx
cld
and byte [rbx], bl
add cl, byte [rax + 0x4e]
leave
and al, 0x3d
add ch, byte [rax]
nop
and dword [rcx], ebx
pop rdx
sub al, 0x78
xchg eax, edx
xchg byte [r8 + rsi - 0x69], spl
xor al, 0x64
sbb dword [rdi - 0x363618c8], edi
and dword [rcx], ebx
cmp al, 0xf
add eax, dword [rax + 0x64]
add eax, dword [rdi + rbx*2 + 0x64]
nop
and dword [rcx], ebx
sbb qword [rdx + 0x50ab8641], r10
jb 0x4014ff
push rsp
add dword [rax + rbx*2], eax
sbb dword [rdx + 0x42a4393], edx
pop rsp
sbb qword [r8 + r9*2 + 6], r12
js 0x401506
xchg byte [rax + rdx*4 + 0x21], ah
movsb byte [rdi], byte ptr [rsi]
push -0x6de6f934
insb byte [rdi], dx
bnd jo 0x4014f4
jb 0x401525
sbb qword [rip + 0x19064174], rax
xchg eax, edx
xchg eax, ebx
add eax, 0x217c6778
sbb dword [rax + rcx*2 - 0x73], esp
add byte [rcx - 0x7a], 0x64
nop
mov bl, 0x84
fcom qword [rax - 0x776de364]
add al, byte [rsi]
mov word [rcx - 0x7a], es
in al, 0xe4
sub byte [rsi], al
nop
push rdx
sbb dword [rdx + 0x41987d94], edx
sbb dword [rbx - 0x60], esp
or byte [rcx - 0x79], bl
nop
leave
test al, 0xd2
xchg eax, edi
cmp al, 0x3b
in al, 0xec
jmp 0x401505
cmpsd dword [rsi], dword ptr [rdi]
sub dword [rdi + rbp*4], ecx
or dword [r13 + r10 - 0x38f8e991], ebx
xor dword [rbx], 0x61
xchg eax, edi
adc dl, byte [rbx]
and al, 0x47
mov esp, 0x47085807
xor byte [rdi], al
add eax, 0x195d8832
xlatb
wait
adc bl, byte [rax]
mov ebx, 0x6f132f59
push 0x17
and byte [rsi], dh
and eax, 0x477d5730
add byte [rbx], al
test edx, 0x5a0a0fbf
or dword [rdi], ebp
xor dword [rdi - 0x7a], 7
lea ecx, [rdi + 0x601f0118]
xor dword [rcx*8 + 0x62ce229c], 0x2f
nop
sub eax, 0x12c5cd65
jmp 0x7cddf173
jo 0x4014e4
lar esi, word [rdx + 0x59]
pushfq
adc dword [rdi], 0x13
or ah, byte [rdi]
sub ah, byte [rdi]
wait
pushfq
sbb eax, 0x53507708
sbb cl, byte [rax]
add dl, dl
pop rbp
pop rdi
jo 0x401593
and byte [rdx], ch
enter -0x581, -0x71
xchg dword [rsi], eax
sbb eax, edx
scasb al, byte [rdi]
xchg eax, ebx
pop rdi
mov eax, 0x6421408f
nop
shr dword [rdi], 0x25
enter 0x760c, 0x72
nop
out 0x30, eax
or eax, 0x72fe4728
nop
xchg eax, ebx
xor dword [rax + 0xc], 0x2f
sbb dword [rcx], ecx
and byte [rbx - 0x28], al
add eax, 0xb4a1733
in al, dx
nop
rcl byte [rax - 0x10f69071], 1
cmp dword [rbx], edi
enter -0x7427, 9
fadd qword fs:[rcx]
pop rdi
lahf
sub eax, 0xe40866a1
adc dword [rdi + 0x24d8431d], ecx
pop rdi
or eax, 0xce411057
and byte [rdx], bl
or dh, byte [rdi + 0x58]
pushfq
sbb al, 0x64
mov al, 0xc
or al, 0xe
mov cs, word [rbx]
in al, 0x20
or r10b, byte [esi - 0x49]
cmp al, 0x39
and al, 0xcb
adc dword [rdx], eax
cwde
or al, al
and dword [rcx + rax*2 + 0x1109ece], ecx
jns 0x401594
out 0x18, eax
xchg eax, edx
adc ecx, dword [rsi - 0x5e6080f6]
xor bl, al
leave
rol dword [rdi - 0x289af090], -0x4f
or eax, dword [rbx + rdx*2 - 0x4288e5ca]
or dh, byte [rdi]
nop
xchg dword [eax + 0x76517d9], esi
fsub dword [r10]
pushfq
jo 0x401636
mov ecx, 0xdf0b0ff1
loopne 0x4015d2
xchg eax, edx
out dx, eax
nop
push rdi
or ecx, dword [rdi + 0x400b5e19]
cmp ah, byte [rdi]
js 0x401651
mov ecx, 0xe50b0611
inc dword [rbx]
movsb byte [rdi], byte ptr [rsi]
stosd dword [rdi], eax
jmp qword [rbx + 0x72]
je 0x4016cd
je 0x4016d1
idiv byte [rdi + 0x73632ec4]
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax - 0x45], edx
lcall [rbx - 5]
jb 0x4016dc
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4016a7
outsd dx, dword fs:[rsi]
fcmovnu st(0), st(3)
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4016f7
jne 0x401713
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x40170c
std
add eax, 0x2965b7f6
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xddbe
mov edi, 0x61727208
jns 0x40171b
outsb dx, byte gs:[rsi]
je 0x401732
jns 0x4016c2
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401650
jne 0x4016d1
out 0x32, al
or eax, 0x2a74295f
push qword [rdi + 0x709c61db]
jo 0x401702
pop rdx
push rbx
je 0x40172e
xor dword [rcx], edi
jo 0x40174f
movsxd rsp, dword gs:[rbp + 0x77]
cdq
sbb ebp, esp
fcmovnbe st(0), st(6)
sub eax, 0x729f6e77
jne 0x401759
je 0x401712
xor esi, dword [rax + 0x7e]
mov ecx, 0x6163755b
jb 0x401740
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0xdb3b77bb
pcmpgtw mm1, qword [rax + rdi]
imul ebp, dword [edi + 0x5d], 0xb6394e0e
sti
insd dword [rdi], dx
imul ecx, dword [rdx + rbx], 0x75
js 0x40179a
xor r14b, byte [rcx]
mov bl, 0x65
cmpsb byte [rsi], byte ptr [rdi]
sti
out dx, eax
fisubr dword [rdi + rsi*2 + 0x41]
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0xdd305745
iretd
loopne 0x40175b
sbb dword [rcx], edx
xor dword [rbp + 0x3db665f], edx
imul esp, dword [rdi + 0x12], 0x30
cmc
jo 0x40178f
jbe 0x401709
loope 0x40174b
pop rbp
adc dh, byte [rcx]
xor eax, 0xa5786540
sbb eax, 0x73f6db61
xor rax, 0x45b66153
mov ebp, 0xa8bec29b
jae 0x4017e8
jae 0x401795
cmp byte [rdi + 0x69], bl
insd dword [rdi], dx
imul edi, dword [rdx + 0x6b], 0x41857685
or al, byte [rcx]
jmp qword [rax]
mov dh, 0xf0
fisttp dword [rdx]
movsd dword [rdi], dword ptr [rsi]
push r11
imul ecx, dword [rdx + 0x58], 0x24b0a76b
xor eax, 0x86a9a562
fadd st(2)
push rsi
or eax, 0x64126e61
and dword [rsi + 0x61], ecx
push rdx
xchg dword [rdi + 0x6b], esi
sbb al, 0x34
mov esp, ebp
or bl, bl
adc dword [rax + 0x7b], esi
fst dword [rax]
outsb dx, byte [rsi]
or esp, edx
insd dword [rdi], dx
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
sub ebp, dword [rsp + rdx]
push rdx
push rcx
xchg eax, ecx
adc esp, dword [rdi]
add bl, byte [rcx - 0x51b09b00]
mov al, 0x10
enter 0x2777, 0x39
leave
adc eax, 0xb26cdb6
jns 0x40182d
xor al, 0x4d
mov dl, 0x76
outsb dx, byte [rsi]
jmp 0x401786
push rbx
fstp dword [rbx - 0x3d]
adc dword [rsi], ebx
sub dword [rdi + 0x75], ebp
jae 0x401821
jo 0x401833
nop
mov ebp, 0x7c76186d
jbe 0x401862
imul edx, dword [rbp + 0x34], 0x4abb066
push rdi
sub eax, 0xd728306a
push rsi
fld dword [rsi - 0x27]
int 0x15
mov ecx, 0x70590366
cmc
sub byte [rsi], ch
or eax, 0x376b5b64
add eax, 0x332b6c17
wait
retf 0x2d30
xchg eax, esp
jb 0x40181c
hlt
xor dword [rdi], esp
mov dl, 7
je 0x4018b3
jo 0x401861
xor al, byte [rbp - 0x1a95a84e]
movsb byte [rdi], byte ptr [rsi]
je 0x401899
fst dword [rsi + 0x2a]
and esp, edi
sbb esp, dword [rsi + 0x74]
cmp edx, dword fs:[rbp + 0x252872b9]
jo 0x4018b9
outsb dx, byte [rsi]
and dword [rbx], eax
pop rcx
add bl, byte [rcx - 0x4d7249cc]
fldenv [rax + rbp + 0x4e]
and al, 0x6e
sbb byte [rsp - 0x59], cl
mov dl, 0x74
jae 0x4018e1
xor eax, 0x929a1585
mov bh, 0x65
xchg byte [rcx], ch
or cl, bh
jb 0x4018b5
sub al, 0x78
imul ecx, dword [rcx + rax*4 + 0x7acab84b], 0xa1383b74
cmp al, bl
and ebx, 0x5f01b174
push rbx
and ch, byte [rbp - 0x4297e910]
movabs byte [0x18d36e810df92264], al
jns 0x4018f2
xor dword [rax + 0x4e], edi
or byte [rsi + rcx*8], dh
fstp qword [rax]
mov ah, 0x9e
sbb ah, al
imul rbp, qword [rcx], 0x535c0c7a
jae 0x4018c8
pop rdi
jo 0x401922
xor al, 0x80
sti
fcmovnu st(0), st(7)
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r15b, byte [rdi + 7]
lodsd eax, dword [rsi]
mov ebp, 0x5f495f7c
xor ecx, dword [r15 + 0x4d415246]
pop r15
cmp al, 0xd9
and al, 0xda
or r10b, byte [rdi]
or eax, dword [rdi + 0x4e]
push rbp
cld
movzx ecx, byte fs:[rax + 0x20]
push rdx
push rbx
or dword [r11 + 0x543a4bf7], r8d
sub r14b, r8b
fld qword [rcx - 0x49]
mov al, 0x64
adc byte [rsi + 0x59448572], bl
mov dil, 0xdb
xor dword [rax + 0x42434945], edi
xor esp, dword [rbx + 0x1f]
xor bpl, byte [rcx + r8*8 - 2]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0xf8
cmpsd dword [rsi], dword ptr [rdi]
jae 0x401992
pop rdx
movsxd rbx, dword [r11 + 0x5d]
xor al, 2
je 0x4019ac
xor esp, dword [rbp - 0x125c813b]
adc al, byte [rsi + 0x6d]
or eax, 0x537367f6
xor byte [rdi + 0x28], bl
adc cl, byte [rbx]
pop rbx
sub al, byte [rdi + rsi*8]
imul edi, dword [rdi], 0xc1ed1350
fsubr qword [rbp + 0x33]
adc ebx, dword [rdi + 0x32]
add dword cs:[rax + rcx*2 + 0xc8585b4], ebx
movsxd rbp, esp
xchg eax, ecx
in al, dx
retf -0x4ef6
jns 0x4019de
push rbp
pop rdi
sbb dword [rsi], ebp
mov dh, 0xba
pop rbx
push rbx
movsxd rbx, dword [r11]
xor dword [rbx], esi
or al, 0xde
pop rbp
imul edi, dword [rax + 0x454510bf], 0x52
and eax, 0x52860bb9
movabs eax, dword [0xd8dab9f7496df64c]
lodsd eax, dword [rsi]
mov byte [rbp + 0x534a5f36], bl
jbe 0x401a08
sub eax, 0xd0adb231
and dword [rdi - 0x2d], ebp
je 0x401a1c
ret
lodsb al, byte [rsi]
adc edi, edi
mov byte [rdx + 0x47], dl
mov dh, 0x6d
and dword [rdi + 0x43], 0x78
jae 0x401971
jae 0x4019ba
sub ecx, esp
or eax, 0x45314335
jbe 0x4019ea
push rax
and al, 0x66
ret
in eax, dx
insb byte [rdi], dx
jrcxz 0x401a1d
xor bl, byte [rdi + rdx*8]
push rdi
fidivr dword [rdx - 0x93ce270]
int3
xor eax, 0x67b078f0
add ebx, ebx
movabs dword [0xb1efe5252fd5b52], eax
pop rbp
and al, 0x19
lodsd eax, dword [rsi]
je 0x4019a6
xchg eax, ecx
jo 0x4019c1
enter 0x6d4b, 0x65
lodsd eax, dword [rsi]
mov edx, 0xb62f92b0
sub byte [rbp + 0x5f], r9b
out dx, al
fist dword [r10]
pop rdx
or al, 0x43
pop rax
push rsp
mov dword [rdi + rsi*2 + 0x35d2607b], 0x65766073
test byte [rdi + 0x78], ch
add edx, eax
and dword [rbx + 0x54], 0xffffff81
xor eax, 0x5c4b505f
push 0x7463b238
sbb byte [r11 + r10 + 0x5f], r12b
jne 0x401a66
or ebp, 0x8183a40c
movsxd rax, dword [rdx]
outsb dx, byte [rsi]
sbb byte [rbp + 0x147a9c61], ah
leave
xor eax, dword [rdx]
ret 0xc973
sub eax, 0x645c6f63
lea rsi, [rcx]
push rdi
xor ch, byte [rsi - 0x23]
nop
xor dword [rbx], esi
xor al, 0x34
jne 0x401ada
or byte [rsi + 0x643b74d0], bl
in al, 0x5f
push 0x61876c91
test byte [rdx - 0x464fbdef], r10b
lodsb al, byte [rsi]
ret 0x255e
movabs byte [0x6b68cdc6e55c1222], al
sbb esp, dword [rdi - 0x3d9f1f57]
mov es, word [rbx + 0x27]
adc al, 0x5a
jnp 0x401a9e
and dword [rbp - 0x3691b9b0], edi
xchg bl, ch
movabs dword [0x2c861df79365ac1d], eax
adc eax, 0x2c496547
pop rbx
and byte [rbp - 0x79a29129], bl
cmpsb byte fs:[rsi], byte ptr [rdi]
xor eax, 0x2e0090cc
jae 0x401b39
fmul st(1)
scasb al, byte [rdi]
sal byte [rip + 0x7274079d], 1
push 0x435b9609
xadd byte [rax + 7], dh
outsb dx, byte [rsi]
outsd dx, dword [rsi]
mov es, word cs:[rdx + 0x4975b76d]
sub eax, 0xd90d6715
sub eax, 0x2ee17856
jne 0x401afa
sub eax, 0xc90df069
mov ch, 0x99
jnp 0x401b5e
cmp byte [rcx], cl
jns 0x401b66
fsub dword [r9 + 0x4476199d]
fisttp qword [rdi + rbx*2]
and al, bl
imul ecx, ebp, 0x1b
fild qword [rbx + 0x3db70928]
ret
pop rbx
mov ch, 0x74
jb 0x401a98
or ch, byte [rdi + rbp*2]
or byte [rax - 9], bl
jb 0x401b44
sbb eax, 0x6f244805
repne lodsb al, byte [rsi]
shl dword [rax], -0xb
push 0xd1268cc
insb byte [rdi], dx
imul esi, dword ss:[rsi + 0xb31fd3a], 0x42
mov esi, dword [rip - 0x707295c6]
and al, 0x56
cbw
int 0xde
add byte [rsi + 0x69], dl
jmp 0x401b4e
add bl, bl
xor dword [rdx], 0x40
jmp 0x401b52
add byte [rbp + 0x41], ah
adc ecx, dword [rip - 0x1b58fed9]
int3
test al, 0xff
sbb al, 0x90
xchg byte [rcx], al
and eax, dword [rdi]
xchg eax, edx
sbb dword [rsp + rdx*2 + 0x20], edx
sbb dword [rdx + 0x31041921], edx
je 0x401afe
xchg eax, edx
je 0x401ba1
xor r9b, al
and edi, ebp
jg 0x401b7a
ljmp [rdi - 0x68]
cwde
leave
and byte [rbx + 0x805340c], al
add edx, edx
or al, 0x4e
or edx, eax
cmp dword ss:[rbx], edi
enter -0x730, 1
sti
xchg eax, esi
xor al, 0x83
sbb byte [rsi + 3], r10b
test byte [rdi], dh
movabs dword [0xdd25a802163f07c7], eax
pop r14
mov edi, 0xece486ff
int 0xef
mov edi, 0x92d5022a
outsb dx, byte [rsi]
enter 0x6b07, 0x3f
jns 0x401bc3
mov edi, 0x61020050
sbb r8b, al
jp 0x401c2e
and dword [rdi], esp
mov eax, 0x3f0758c9
mov al, 0xc1
or edi, edi
test byte [rdi], bh
jg 0x401bb9
sbb dword [rax - 0x60], esp
add dword [rdi], edi
adc byte fs:[rsi], al
nop
sbb byte [rsi - 0xf63f9ed], cl
ror dword es:[rdi - 0x56e500f9], 0x42
xchg eax, esp
mov dword [rdi], edi
mov bh, 0x1b
xchg eax, edx
xor esi, dword [rdi]
lock adc byte [rdi], al
adc rax, 0x3f9421b2
fisttp word [rsi + 0xa71816c]
setge byte [rcx + rbx]
in al, 0xc8
jg 0x401c34
or dl, dl
add eax, 0x816c3921
movabs dword [0x9ff07a7149b99c9], eax
mov word [rax], cs
test eax, 0xb61cc7bf
enter 0x7dc, -1
mov cl, 0xcc
movabs al, byte [0xe4a192157f07a790]
xchg eax, esp
mov edi, 0x59b82792
cmpsd dword [rsi], dword ptr [rdi]
test byte [rdx], al
shl byte [rcx + rbp*8 + 0xe0ec92e], 1
add edx, dword [rcx - 0x20d90863]
scasd eax, dword [rdi]
xor ebp, dword [rax + 0x49]
jae 0x401c4a
getsec
js 0x401c83
mov edi, 0x20c810e1
xchg eax, ebx
adc byte [rax], dl
or al, 0x32
and ch, bl
out 0x7f, al
sbb byte [rax], bl
sbb dword [rdx + 0x1e08393], edx
adc byte [rcx], cl
cwde
outsd dx, dword [rsi]
cmp ebp, dword [rcx + rdx*4 - 0x47]
jg 0x401caa
out dx, eax
xchg dword [ecx + 0x4f], eax
and byte [rdi], bh
mov cl, cl
nop
or al, 0x25
clc
mov byte [rsi + 0x17], ah
and byte [rax + 0x13fe7f07], bh
sbb al, 0x64
nop
leave
movabs al, byte [0xf858323aa023898]
add ecx, dword [rsi]
or ecx, ecx
jbe 0x401c96
xor byte [rdi], bh
xor al, 0xd9
and dword [rdi + rdi*2], ecx
adc dword [rbx - 0x1c], edi
or dword [rdx + rsi*4 + 0x7f399000], ebx
or al, 1
mov ebp, 0xbb8b19b2
add al, dl
and byte [rax - 0x66], al
xchg eax, ebx
mov edi, 0x5f1e0d20
jns 0x401d6a
or byte [rbx], bl
or dword [rdi - 0x10], edi
sub eax, 0xba0
shl byte [rdx], 0x20
add dword [rax], eax
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x1ff7fdea], ecx
stc
sti
ret
test byte [rdi], 0xd
enter 0x21, 0
or al, byte [rax]
add byte [rax + 0x42], ah
add byte [rax], al
add byte [r8], al
mov esp, 0xf4
