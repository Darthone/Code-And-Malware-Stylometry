call 0x4010a8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400ec0
add ebx, ebx
je 0x400e76
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400eae
cmp rbp, -4
ja 0x400eae
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400e96
add ecx, 4
mov dl, byte [rax]
je 0x400ebe
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400eae
ret
cld
pop r11
cmp r8b, 2
je 0x400ed6
jmp 0x400f53
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400ee6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400ece
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400efe
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400eeb
sub eax, 3
jb 0x400f1c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400f53
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400f43
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400f41
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400f30
cmp rbp, -0xd00
adc ecx, eax
call 0x400e82
jmp 0x400ed6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40102c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400fca
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401016
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400fe9
push 0x3a707474
jne 0x401042
js 0x401002
jae 0x40103c
outsb dx, byte cs:[rsi]
je 0x400ffb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401069
jb 0x40105b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401086
jb 0x401099
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21231a
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21231a
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400f64
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x40108f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40103d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1137
jb 0x40114f
movsxd rbp, dword [rdi]
jae 0x401149
insb byte [rdi], dx
js 0x40114f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40112f
cmp rsi, rcx
jae 0x401137
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401116
cmp al, 0x8f
ja 0x401116
cmp byte [rsi - 2], 0xf
je 0x40111c
sub al, 0xe8
jg 0x401119
push rdi
cmp al, 1
ja 0x401104
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401107
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401134
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40118b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1609
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4011cf
mov al, 0xa
jmp 0x4011cf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4011ab
inc ebx
mov al, 0
jmp 0x4011d3
mov al, 2
jmp 0x4011d3
mov al, 3
jmp 0x4011d3
mov al, 0x3c
jmp 0x4011d3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401214
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401226
jg 0x401218
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a699b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401272
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb63ef
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40127a
cmp esi, 0x21585055
jne 0x40127e
jge 0x401270
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401273
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401277
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401323
pop rcx
or al, 0x3b
jb 0x401329
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40129b
jmp 0x40129d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36611de
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53426
in eax, dx
jg 0x4012d5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40131b
mov bh, 0x2a
add edi, 0x10
jmp 0x401318
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401355
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401391
jne 0x4013a8
fstpnce st(6), st(0)
jle 0x401371
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4013a7
jrcxz 0x4013db
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b33f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40145a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40141a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582959ef
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40148d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401427
and ecx, 7
or al, 0xeb
jae 0x401492
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4014c7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401505
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4014be
push rax
call 0xffffffff868d11ab
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4014c8
std
cmp edi, esi
xchg eax, edi
jle 0x40151d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95aa9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40151b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401509
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401532
js 0x401572
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401604
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad283f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401625
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40162a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc210dc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4015b8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
mov esi, 0xe00000d
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + 0x9228a8], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dil, dil
shl byte [rax + rax], 0
mov ch, 0xa
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4016de
je 0x4016e7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4016b0
mov dh, 0x7d
jbe 0x4016af
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4016e8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5880006], bl
add byte [rax - 0x6fd837f7], ch
invd
add al, ch
or dword [rax], eax
js 0x4016d2
in al, 0x13
enter 0xa07, 0
ror byte [rbx], 0
ror byte [rdx + rsi*8], 1
or esp, esp
add ecx, dword [rax + rax]
or eax, 0xf90e6000
add al, 0xf2
add dword [rsi], ecx
add byte [rax + 0xf], dh
add byte [rsp + rbx], ah
insd dword [rdi], dx
add bh, cl
add byte [rax], dl
add byte [rax], dh
adc ecx, ebx
xchg eax, esi
add eax, dword [rbp + rbx - 0x44e2ede1]
sbb al, 0x20
adc eax, dword [rax]
int3
adc al, 0x2d
jl 0x40170a
jns 0x40170a
adc eax, 0x16f800
add byte [rsi], ch
cmp dword ss:[rax + rax*4 + 0x17], 0x47180800
sub byte [rip + 0x192fc807], 0x30
cmp dword [rcx + rax*4], 0xc8001a7c
sbb eax, dword [rax]
loopne 0x4016bf
ja 0x401782
sbb al, 0x13
add dword [rdi], edx
add al, 0
int1
dec dword [rip + 0xc3b1657]
sbb edi, dword [rdi + 0x32029719]
fcom dword [rax + 0x171ba034]
loopne 0x401779
in al, 0x20
and byte cs:[rdi], cl
sbb esp, r13d
insb byte [rdi], dx
neg dword [rdi + 0x35]
adc byte [rbx], dh
pop rdi
add dword [rdi], edx
push rbx
xor bl, al
xchg eax, ebp
adc byte [rdi + 0x7a], cl
mov ebx, 0x86432212
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
sbb eax, 0x27ab0867
cmp byte [rsi + 0x77c9b064], al
cmp ebx, ebx
sbb edx, dword [rdx - 0x4017c5bf]
adc dword [rsi], eax
sbb dword [rax + rcx*2 - 9], ebp
cmp al, 4
or eax, 0x1e41c9c9
add dword [rax + 0x30], eax
or al, 0x32
and al, 0x83
xchg spl, spl
in al, dx
nop
push rbp
add dword [rdi + 0x44], ebx
je 0x4017ae
sbb dword [rdx - 0x6bb7e83f], edx
and qword [rcx], r11
mov sil, 0x50
xchg byte [r8 + rdx*4 - 0x29], spl
push rsp
cld
nop
pushfq
sbb al, 0x92
pop rax
sbb eax, dword [rdx]
pop rsp
and byte [rbx + 0x32], al
enter 0x603d, 0x5a
and al, 0x83
or al, 0xc9
js 0x40183a
enter 0xc90, 0x32
xchg eax, edi
insb byte [rdi], dx
mov edi, 0x324320c9
jo 0x4017c6
je 0x401845
lsl edi, dword [rax + 0x37]
nop
and dword [rcx], ebx
jl 0x40184d
sbb byte [rcx], 0x92
xchg byte [r10 + 0x6419ab84], al
mov dh, dl
mov word [rcx + rcx*8], cs
leave
and dword [rcx], eax
add al, 0x90
sub cl, byte [rdx + rsi]
and al, 0x83
xchg eax, esp
cdqe
xor cl, r8b
nop
js 0x4017ae
movsb byte [rdi], byte ptr [rsi]
or dword [rcx + rcx*8], 0x20
movabs al, byte [0xa8f224320c90a4cc]
xchg r12b, spl
in al, 0x19
add eax, 0x64841ac
sbb dword [rdx - 0x6f4b9850], edx
and dword [rcx], ebx
lea edi, fs:[rax - 0x79be6d4d]
mov esp, 0x90c8c0dc
pushfq
sbb al, 2
sub cl, cl
and byte [rbx + 0x32], al
enter -0x33ae, 0x32
and al, 0x83
or al, 0x7d
shl byte [rbx + 0xc835839], 1
fmul dword [rax]
jg 0x401824
and byte [rbx + 0xff63d9c], al
stc
sbb eax, 0x34e4e04a
adc byte [rip - 0x43f8f2a9], dl
and dword [rbx + 0x5f12a7f2], eax
sbb edx, dword [rdi]
cmp eax, 0x2f1842c0
in al, dx
retf 0x5e0
xlatb
cmp al, byte [rdi - 0x6c]
rcr al, 0x95
push rax
adc al, 0x57
xor bl, r8b
call 0x7086010
scasd eax, dword [rdi]
or al, 0xa7
sti
or dword [rdi + 0x20], esi
jnp 0x4018be
mov esp, 0x8d077d03
ja 0x4018c4
add dword [rdi], edx
jbe 0x401862
movabs eax, dword [0x2f261b8a1f229339]
fst dword [rdx - 0x2a]
or al, 0xe0
adc ch, cl
mul edi
and byte [rdi], ah
wait
sbb dh, byte [rdx + 0xb]
or dh, cl
outsb dx, byte [rsi]
and byte [rdx + rax], bl
dec dword [rcx]
cmp eax, dword [rdi]
mov ebx, 0xa72a272c
sbb ecx, dword [rax]
add ah, al
xchg byte [rax + 0x15172a2b], dh
pop rdi
mov ebx, 0x57595ec0
or byte ds:[rdi + 0x21901763], ah
or byte fs:[rdx + 0x421c9e9c], al
xchg dl, ch
or dword ss:[rax + 0xd], esp
xchg eax, ebp
adc cl, ah
ret 0x5b8f
jg 0x40193f
cmp al, 0x7b
in al, 0x77
or dword [rdx + 0x10], ecx
sbb ecx, dword [rdx]
pop rdi
mov ecx, dword [rcx]
jae 0x40189a
rcl byte [rcx], 1
push qword [rax]
sal byte [rax], cl
test byte [rip - 0x806a021], cl
adc ch, cl
or ebp, esp
add byte [rsi], al
or bl, byte [rdi + 0x50]
or al, byte [rdx]
cmp al, 0x39
and al, 0x1b
fcomp dword [rdx + rcx]
xor dh, byte [rdx + 0x109ece41]
add dword [rdi], ebp
jae 0x401913
pop rdi
sbb dword [rax + 0x7765b03f], eax
test byte [rax + rdx*4], cl
loopne 0x4019b3
adc byte [rbx + 0x77c8f19c], al
in al, dx
or dl, byte [rdi + 0x65]
sub byte [rbx], bl
in al, 0xe4
add cl, byte [rbx]
lea ecx, [rsi]
xlatb
or esp, dword [rcx]
xor al, 0xb
or eax, 0x7210d81b
and dword [rdx - 0x37a2e864], eax
mov bl, 0x43
pop rsp
cmpsd dword [rsi], dword ptr [rdi]
sbb byte [rbx], dh
mov ah, 0xe3
adc byte [rsi], dh
test byte [rdi], ch
rcl byte [rdi], cl
and byte [rdi], cl
fsub dword [rcx]
cmp eax, esi
push 0x10b9770c
jbe 0x4019be
pushfq
or al, 0x97
shr byte [rdi], 0x90
or edi, dword [rcx]
fcomp st(2)
pop rdi
and byte [rsi], cl
sti
xchg eax, ebx
or byte [rdi - 0x78c8f291], al
or eax, 0x906c1908
sbb ebp, dword [rdi + 0x2f]
wait
sahf
jo 0x4019c5
mul dword [rsi + 0xf]
nop
inc dword [rdi]
pop rax
popfq
mov bl, byte [rdi + 0x63]
jb 0x401a3f
jae 0x401a41
jne 0x401a35
in eax, dx
jg 0x40195e
movsxd rdi, dword [rbx + 0x52434a5f]
pop rdi
push r11
push rsp
or dword [rax - 0x23], ebp
ljmp [rbp + 0x657265fd]
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401a19
outsd dx, dword fs:[rsi]
in eax, dx
in eax, dx
outsd dx, dword [rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401a69
jne 0x401a85
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401a10
add bh, bl
fld xword [rbp + 0x29]
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xaddb
std
fisttp word [rax]
jb 0x401a9d
jns 0x401a8d
outsb dx, byte gs:[rsi]
je 0x401aa4
jns 0x4019d5
or ch, byte [rbp + 0x65]
and byte [rbp + 0x58], dh
out dx, al
insd dword [rdi], dx
insd dword [rdi], dx
jns 0x401a73
or eax, 0x2a74295f
std
jg 0x401a04
pushfq
jo 0x401abe
and al, 0x5a
push rbx
je 0x401a9f
xor dword [rcx], edi
jo 0x401ac0
movsxd rsp, dword gs:[rbp + 0x77]
sar dword [rsi + 0x2d99ad6d], 0x77
outsb dx, byte [rsi]
lahf
jb 0x401adb
movsxd rsi, dword [rdx + rbx + 0x67]
popfq
mov ebx, 0x757033b5
movsxd rsp, dword [rcx + 0x72]
cmp eax, 0x7b361467
mov bh, 0xb3
in eax, dx
imul esp, dword [rdi + 0x6e], 0x380c650f
imul ebp, dword [edi + 0x5d], 0xb6dfbb0e
mov dh, 0x4e
cmp dword [rdx + rbx], ecx
jne 0x401ad5
js 0x401b0b
xor r14b, byte [rcx]
mov bl, 0x65
mov al, 0xff
scasb al, byte [rdi]
insd dword [rdi], dx
cmpsb byte [rsi], byte ptr [rdi]
insb byte [rdi], dx
ja 0x401ae2
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0xf60d5745
or al, 0x6e
xor byte [rbx], bl
sbb dword [rcx], edx
xor dword [rsi - 0x6a294fc3], esi
pop rdi
adc dh, byte [eax]
cmc
jo 0x401b00
sbb ebp, dword [esi + 0x6f]
pop rbp
adc dh, byte [rcx]
xor eax, 0xa5786540
adc dword [rsi + 0x73c76f6d], esi
xor rax, 0x45b66153
mov ebx, 0x36dbec29
test al, 0x73
jne 0x401b47
jae 0x401b06
cmp byte [rdi + 0x69], bl
insd dword [rdi], dx
push rsi
push 0x7a69d857
or al, byte [rcx]
dec dword [rbx]
mov edi, 0xa520b0ad
push r11
imul esi, dword [rbp + 0x4a6b0a76], 0xa5623524
test eax, 0x856d6c2d
xchg byte [rip + 0x64126e61], cl
adc al, 0x76
and dword [rbp + 0x6b778721], eax
sbb al, 0xc8
scasb al, byte [rdi]
mov al, 0xed
xor al, 0x67
adc dword [rax + 0x7b], esi
or eax, 0xe290b6e1
insd dword [rdi], dx
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
ret 0x2142
xchg eax, ebp
push rcx
xchg eax, ecx
adc esp, dword [rcx]
nop
or dword [rax + 0xb0a6527], esi
sub dword [rdi + rcx*2 + 0x77], 0xdb615c27
in al, dx
cmp dword [rsi], esp
or edi, dword [rcx + 0x4a]
xor al, 0x64
and byte [rbx - 0x69], ch
outsb dx, byte [rsi]
jmp 0x401af7
xchg eax, ebp
mov ebp, 0x1e11dc35
sub dword [rdi + 0x75], ebp
jae 0x401b92
add ebx, ecx
jo 0x401b86
jbe 0x401bec
jbe 0x401bd3
imul edx, dword [rbp + 0x34], 0xa5704abb
sub ax, 0x306a
sub byte [rbp - 0x6b], ch
insd dword [rdi], dx
add al, 0xd9
int 0x6b
nop
jne 0x401ba1
jo 0x401b83
sub byte [rsi], ch
mov sil, 0xb5
xchg eax, esi
add eax, 0xa92b6c17
or al, 0xd3
sal byte [rbx], cl
xchg eax, esp
jb 0x401b8d
hlt
and byte fs:[rbx - 0x50], bh
xor dword [rdi], esp
je 0x401c24
jo 0x401bd2
xor ch, byte [rax]
jnp 0x401b56
in eax, 0xa4
je 0x401b4c
insd dword [rdi], dx
movsd dword [rdi], dword ptr [rsi]
push rdx
and esp, edi
sbb esp, dword [rsi + 0x74]
mov dh, 0x53
cdq
cmp esp, dword [rdx + 0x72]
sub byte [rip + 0x6e4b6170], ah
xor dl, byte [rax + 0x34994025]
fld xword [rax]
wait
sbb eax, 0x244e2864
outsb dx, byte [rsi]
jb 0x401c07
imul ebx, dword [rax], 0x74
jae 0x401c52
pop rax
movabs eax, dword [0xf0298665b735c929]
or al, 0x26
push rdi
sub al, 0x78
imul edi, dword [rax - 0x7353547c], 0x383b747a
sbb dword [rip + 0x74a11e38], -0x4f
add dword [rdi + 0x53], ebx
and cl, byte [rdx]
outsd dx, dword [rsi]
add dword [rsi + 0x2264a2bd], 0x8c0cf5f9
ror dword [rip + 0xfc53479], 1
jmp 0x401be2
movabs al, byte [0xfe560d7a206941bb]
loopne 0x401bc2
cmp eax, 0x69300f2b
imul esp, ebx, 0x2fdfdc05
xor r14b, byte [rbx + 0x5f]
pop r15
jae 0x401bf6
dec dword [rsi]
pop rdx
xor eax, dword [rsi + 0x4d415246]
pop r15
or r13b, byte [rcx + rdi*2 - 0x4e]
or eax, dword [rdi + 0x4e]
push rbp
and byte [rdi + 0x481ec9f8], dl
push rdx
push rbx
xor dword [r9 + rax*2 + 0x61], r10d
adc eax, dword [rsi]
out dx, eax
sub byte [r13 - 0x448fef9c], r15b
sub dword [rsi - 0x62], 0x72
jl 0x401cc3
pop rcx
std
outsd dx, dword [rsi]
mov bh, 0x63
cmp dword [rbx], esi
movsxd rbx, dword [rdi]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0xa5
xchg byte [rbx], bl
adc eax, 0x85777334
movsxd rbx, dword [rip - 0x248450cf]
mov dword [rcx - 0x7e], esp
cmp eax, 0x45107344
push rbx
add al, 0xd1
insb byte [rdi], dx
mov eax, 0x12527645
pop rdi
mov esp, 0x45d6ee20
movabs al, byte [0x8a49674a725cb0b9]
or byte [rbp + 0x230b6d6], al
xor dword [rbx + rbp + 0x614b3c29], ebp
pop rbx
movsd dword [rdi], dword ptr [rsi]
adc ch, byte [rcx + 0x63]
mov al, 0x2d
mov esp, 0x3153329b
mov edx, 0x63466230
fadd dword [rbp - 0x5e]
adc byte [rdi + rcx - 0x4cd39299], ch
shl dword [rdx - 0x15], 0x21
add cl, byte [rdx + 0x33]
push rdx
adc al, byte [rdx + 0x10]
xchg eax, esi
fiadd dword [rbx + 0x6c]
jno 0x401cf7
jae 0x401ca4
push rdx
jbe 0x401d45
jae 0x401d11
sysenter
jmp 0x6b904e5c
jbe 0x401cb3
int 0x42
push rdi
mov al, 0xbd
push 0x2e325f0f
add dword [rsi], ebp
vcmpunord_spd xmm8, xmm3, xmmword [rsi + 0x741fb1ec]
sbb dword [rdx - 0x1b], ebx
mov edi, 0x1ab08530
jo 0x401cc2
push rdx
push r11
xor al, 0x5f
sub dword [rdx + 0x4e83612d], esi
xor dword [rbp - 0x37], ecx
xchg eax, ebp
lodsd eax, dword [rsi]
in al, dx
push rax
movsxd rcx, dword [r11 - 9]
insd dword [rdi], dx
or dword [rbp + 0x58], ebx
mov cl, byte [rbp + 0x5f]
or al, 0xe3
xlatb
clc
movabs eax, dword [0x3740fe6261544443]
push rax
jrcxz 0x401d74
in eax, dx
ret 0xa5d
insd dword [rdi], dx
xor eax, 0x65769f73
cmp al, 0x93
jmp 0x401d54
retf 0x6cda
jp 0x401d09
rcl byte [rbx], 1
xor esi, dword [rax + 0x3b92da15]
outsd dx, dword [rsi]
mov cl, 0x66
insd dword [rdi], dx
adc eax, 0x2375d2b3
mov ebx, 0x9c5f35a2
je 0x401de6
or dword fs:[rsi - 0x20], ebp
pop rdi
jne 0x401d30
add dword [rcx + 0x4d284c24], 0x4f
xchg eax, ebp
sbb ebx, esp
xchg eax, ebp
int1
sbb dword [rdi + 0x65], ebx
movsd dword [rdi], dword ptr [rsi]
nop
xor al, 0x64
jne 0x401e2f
pavgw mm3, qword [rcx - 0xd9bb892]
pop rdi
push -0x4e8b796c
and byte [rbx], bh
sub eax, 0x80618927
mov cl, cl
and eax, 0x530da1f5
mov dl, 0x46
test eax, 0xcc806ee5
pop rsi
xchg ebx, esp
js 0x401e2c
imul esp, dword [rdx], 0xa50232f3
mov ch, 0x5d
push 0x524982e8
xchg rax, r8
sub bl, byte ss:[rcx]
xor bh, byte [rdi + rcx + 0x36c3f637]
int 0xd4
push rbx
movsxd rdi, dword [rip - 0x46a8ceb1]
xor al, 0x2b
cdq
sub dword [rax + 0x6b], ebp
xchg eax, edx
nop
add edi, dword [rbx + 0x4d34b50c]
imul edx, dword [rsi - 0x3a], 0xc5f12173
push rdx
push rdx
xor esi, ecx
sbb dword [rsi], eax
lodsb al, byte [rsi]
mov esp, 0x93ad6dac
rcl dword [rax - 0x74], cl
push rbx
sbb rax, -0x52deac70
xor eax, 0xacc65361
retf
movsd dword [rdi], dword ptr [rsi]
iretd
insb byte [rdi], dx
cmp ebx, dword [rax + 0x55ac5bb0]
jle 0x401e9d
pop rdi
xchg eax, ebp
je 0x401e5b
push rdi
add byte [rbx - 0x20], cl
cwde
xor esp, dword [rip + 0x658031e1]
mov edi, 0x1db0a13d
jbe 0x401ec7
imul ebx, dword [rdi + 0x65], 0x40
test byte [rdx + 0xaf34683], 0x70
pop rdi
jbe 0x401e9e
and ecx, ebp
add eax, 0xa81db80a
out dx, al
xor dword [rsi], ebp
xor ebp, dword [rdi + 0x2b]
sub al, 0x85
or eax, 0x5619dc7d
pop rax
imul eax, edi, -0x6d
jge 0x401eef
adc dword [rax], esi
cdq
xor dword [rbp + 0x6b776e55], 0x23b030d5
out dx, eax
leave
xor byte [rax + rsi*4], 0x43
xor byte [rcx - 0x6b], ch
adc eax, 0xaeb06b22
cmp ebx, ecx
sub eax, 0x732e00fc
jns 0x401f21
sub al, 0x62
je 0x401f2b
push -0x545234f7
or eax, 0x770194d
outsb dx, byte [rsi]
outsd dx, dword [rsi]
add dword cs:[rdx + 0x2d1a0d6d], eax
adc eax, 0x8b1e0d67
mov ch, 0xde
js 0x401f03
jne 0x401eb7
sub eax, 0x700d4969
insd dword [rdi], dx
out 0xde, al
pop rdx
cmp byte [rcx], cl
jns 0x401f55
or al, 0x67
sbb dword [rsi + 0x67], esi
pop rdx
or al, 0xbd
add eax, 0x361b5f37
sub ch, byte [rax]
xor edi, dword [rbp - 0x5f67ddb]
je 0x401f76
call 0x7059df13
fld xword [rdi + rbp*2]
or cl, bh
add eax, 0xf7423c06
jb 0x401f39
outsd dx, dword [rsi]
push 0x6b2dd011
jno 0x401f88
push rdi
or eax, 0x15d635d
lodsq rax, qword [rsi]
add ch, byte [rsi]
imul edi, dword [r13 - 0x6d264f94], 0x435d1170
or ecx, dword [rbx]
sub eax, 0xe46aead6
movabs eax, dword [0x687b366b9a003536]
jnp 0x401fa5
adc eax, dword [rax + rax]
insb byte [rdi], dx
imul ebp, dword [rsi], -0x77
push rdx
std
add byte [rax], al
xchg eax, esi
adc al, 0xd
xchg eax, ebp
mov dword [rcx], 0x3733925f
stosd dword [rdi], eax
mov bh, 7
sbb al, 0x40
and dword [rcx], ebx
add dword [rbx], esp
sbb dword [rsp + rdx*2 + 0x54], esp
and byte [rax + rcx*2 - 0x7a], ah
add al, 0x31
je 0x401f92
sbb dword [rsp + 0x44], esi
jg 0x401f47
and byte [rdi - 0x944], al
outsd dx, dword [rsi]
cwde
cwde
and al, 0x83
or al, 0x32
cmp byte [rip + 0x480d8308], al
xor ecx, dword [rsi + 0xb]
sar byte [rdi], 1
rcr cl, 1
in al, 0xec
and byte [rax + 0x3f06fb02], bh
pop rax
ror byte [rdx + rsi], cl
sbb byte [rsi + 3], dl
test byte [rdi], dh
add dword [rdi + 7], edi
and byte [rax + rax*4], al
and eax, 0xbf5e45dd
jmp qword [rcx]
cmp dword [rbx + 0x13], edi
cmpsd dword [rsi], dword ptr [rdi]
mov edi, 0x1ba4063a
mov dl, 2
imul edi, dword [rdi], -2
call 0x4e0d03e7
cmpsd dword [rsi], dword ptr [rdi]
nop
xchg eax, esi
je 0x402028
jp 0x402028
add al, 0x39
loope 0x40202a
add bh, dh
or al, 0x76
pop rax
or bh, bh
test byte [rdi], bh
cmp eax, ecx
and byte [rbx + 0x210c0c0], al
sbb byte [r8 + 0x2e], al
sbb dword [rsi + 0x109bc213], ecx
xchg eax, ebx
out 7, eax
dec dword [rcx + rbx*8]
push rax
jb 0x402020
mov dword [rdi], edi
in al, 0x20
xor eax, 0x70
add dword [rax], edx
add dword [rsp + rbp*2 + 0x3f9407c8], eax
mov dl, 5
xchg byte [rbx + 0xf2f0797], bl
jae 0x401fb5
and dword [rbx], edi
popfq
jo 0x40202f
jg 0x402063
insb byte [rdi], dx
cmp dword [rdx + rsi*4], 0x99a33f0d
wait
and dword [r15 + 0x490aff07], ecx
leave
or dword [rcx - 0x2331b541], ebp
add al, 0xdf
mov edi, 0x21459bd8
sbb esi, dword [rcx + 0x64075f3f]
leave
cdq
jg 0x4020d1
mov edi, 0x6e67923f
xor cl, byte [rax + 0x2447f07]
leave
xchg dword [rip + 0x7b96725], ecx
jg 0x4020cb
fcmovne st(0), st(5)
movabs byte [0xa1bad7030e0ed349], al
in al, 0xec
call qword [rax]
out 0x3f, eax
movups xmm3, xmm4
clc
jmp qword [rcx - 0xcf4626a]
iretd
xchg eax, edx
shl byte cs:[rsi], 0x2e
clc
wait
cmp al, 0x73
mov bl, 0xd9
jg 0x40208f
add dword [rdx], esi
enter -0x6370, 6
adc byte [rax + 0x16d90648], bl
mov edi, 0x24282f2f
mov ecx, 0xa1010108
in al, 0x6c
xor byte [rdi], ah
xor byte [rdi], bh
enter 0x3704, 0x19
xchg eax, edx
or cl, al
jg 0x4020df
nop
out dx, al
add dl, byte [rax]
or al, ah
xchg eax, edx
xor ebx, dword [rdx]
xor al, 0xaf
cmp byte [rip + 0x4f106476], cl
adc eax, 0xe308307f
mov al, 0x90
xor al, 0x3f
cmpsd dword [rsi], dword ptr [rdi]
insb byte [rdi], dx
jbe 0x402140
adc dword [rbx], edi
jne 0x40213a
or dword [rsp - 0x4c8038ff], 0xffffff86
insb byte [rdi], dx
sbb dword [rbx + 0xdff31d7], edi
and ch, cl
leave
or byte [rip - 0x6ef6a0e1], 0x3c
cmp dword [rdi + rdi*2 + 0xde53e90], eax
add byte [rax], al
add byte [rax], ah
nop
add byte [rax], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x72080216], ecx
cdq
cmp bh, byte [rdi + 0x3c5482c1]
shl byte [rax + rax], 0
mov ch, 0xa
add byte [rax], al
cwde
push rbp
add byte [rax], al
add byte [r8], al
add ah, dh
add byte [rax], al
add bh, bh
