call 0x400e18
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400c30
add ebx, ebx
je 0x400be6
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400c1e
cmp rbp, -4
ja 0x400c1e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400c06
add ecx, 4
mov dl, byte [rax]
je 0x400c2e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400c1e
ret
cld
pop r11
cmp r8b, 2
je 0x400c46
jmp 0x400cc3
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400c56
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400c3e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400c6e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400c5b
sub eax, 3
jb 0x400c8c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400cc3
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400cb3
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400cb1
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400ca0
cmp rbp, -0xd00
adc ecx, eax
call 0x400bf2
jmp 0x400c46
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400d9c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400d3a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400d86
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400d59
push 0x3a707474
jne 0x400db2
js 0x400d72
jae 0x400dac
outsb dx, byte cs:[rsi]
je 0x400d6b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400dd9
jb 0x400dcb
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400df6
jb 0x400e09
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21193c
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21193c
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400cd4
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400dff
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400dad
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f0ea7
jb 0x400ebf
movsxd rbp, dword [rdi]
jae 0x400eb9
insb byte [rdi], dx
js 0x400ebf
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400e9f
cmp rsi, rcx
jae 0x400ea7
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400e86
cmp al, 0x8f
ja 0x400e86
cmp byte [rsi - 2], 0xf
je 0x400e8c
sub al, 0xe8
jg 0x400e89
push rdi
cmp al, 1
ja 0x400e74
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400e77
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400ea4
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400efb
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1379
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400f3f
mov al, 0xa
jmp 0x400f3f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400f1b
inc ebx
mov al, 0
jmp 0x400f43
mov al, 2
jmp 0x400f43
mov al, 3
jmp 0x400f43
mov al, 0x3c
jmp 0x400f43
push rcx
rcr ah, 1
fstp st(7)
jle 0x400f84
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400f96
jg 0x400f88
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a670b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400fe2
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb615f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400fea
cmp esi, 0x21585055
jne 0x400fee
jge 0x400fe0
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400fe3
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400fe7
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401093
pop rcx
or al, 0x3b
jb 0x401099
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40100b
jmp 0x40100d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660f4e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53196
in eax, dx
jg 0x401045
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40108b
mov bh, 0x2a
add edi, 0x10
jmp 0x401088
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4010c5
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401101
jne 0x401118
fstpnce st(6), st(0)
jle 0x4010e1
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401117
jrcxz 0x40114b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b0af
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4011ca
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40118a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829575f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4011fd
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401197
and ecx, 7
or al, 0xeb
jae 0x401202
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401237
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401275
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40122e
push rax
call 0xffffffff868d0f1b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401238
std
cmp edi, esi
xchg eax, edi
jle 0x40128d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95819
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40128b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401279
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x4012a2
js 0x4012e2
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401374
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad25af
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401395
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40139a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20e4c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401328
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
mov byte [rdx], dl
add byte [rax], al
add byte [rax], ah
add edi, edi
add byte [rcx], ah
add byte [rax], al
ror dword [rcx], cl
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40144e
je 0x401457
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401420
mov dh, 0x7d
jbe 0x40141f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401458
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x4400006], bl
add byte [rax], ch
nop
nop
invd
add byte [rax + 9], cl
add byte [rax + 0x279027c8], ch
or al, byte [rax]
ror byte [rbx], 0
enter -0x13f9, 0x13
enter 0xc07, 0
or eax, 0x5f08b000
adc dword ds:[rbp + 0xf170e03], 0x9f126400
adc byte ds:[rax], al
jo 0x401471
add byte [rbx + rdx], dh
and byte [r15], r11b
and byte [rdx], dl
add al, ah
adc eax, dword [rax]
clc
add esp, esp
add ecx, eax
sbb eax, 0x8001460
or esp, esp
or esp, esp
adc eax, 0x161000
sbb byte [rax], al
stc
add edx, esi
add al, bh
sbb byte [rax], al
add byte [rax], ah
add bh, byte [rcx + 2]
stc
sbb dword [rax], eax
jo 0x4014af
add byte [rax + 0x6ca6ef24], al
sbb edx, dword [rbx]
add dword [rdi], edx
add al, 0
int1
lcall [rdx]
scasb al, byte [rdi]
sub al, 0x76
or al, 0x1b
mov edi, 0xf2027f19
jnp 0x4014d1
imul esi, eax, 0x9301759
or eax, 0x2e1720c9
jo 0x401501
xchg eax, ecx
shr dword [rsi], -0x75
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdi], edx
push rbx
and al, 0x83
pop rbp
or dword [rdi + 0x7a], ecx
xchg eax, r8d
mov al, 0x2b
and dword [rdx], esi
xchg byte [rdi - 0x2d93285b], dl
jno 0x401460
scasb al, byte [rdi]
vmread qword [rdi + 0x64], rsi
wait
leave
jns 0x4014c4
mov al, 0x21
sbb dword [rdx - 0x15], edi
mov edi, 0xc1906481
xchg dl, bh
jl 0x4014fa
fcom dword [rax + 0x1211c9c]
xor byte [rbx], 0x17
leave
and byte [rbx + 0x32], al
add dword [rsi - 0x7e], 0xece486c
pop rax
add dword [rdi - 0x7c], ebx
ja 0x401527
nop
and dword [rcx], ebx
mov byte [rdi + 0x4192198c], dl
xchg byte [rcx + 0x6419da90], bh
xchg eax, esp
lcall [rax + 0x21c9c90c]
add bl, byte [rax + rax*2 - 0x7cdbcdf4]
movabs al, byte [0xa87b90c83243a45d]
or dword [rcx + rcx*8], 0x20
lodsb al, byte [rsi]
ret 0x90b0
or al, 0x32
and al, 0xea
mov ah, 0x41
xchg ah, ah
in al, 0x12
add edi, dword [rax + 0x1906483a]
xchg eax, edx
mov esp, 0x2190c062
sbb dword [rbp + rax*4 - 0x3c], esp
scasb al, byte [rdi]
xchg eax, edx
xchg byte [r8 + rcx*8 - 0x27], spl
int3
enter -0x6370, 0x1c
add al, 4
shr byte [rip + 0x324320c9], 1
push rdx
fdiv dword [rdx]
and al, 0x83
or al, 0x7b
fsub qword [rdi + 0xc90c832]
loopne 0x401550
in al, 0xe
leave
and byte [rbx - 0xb], al
call 0x64591aa8
in al, dx
lock xchg byte [rax + rdx*4 + 0x21], ah
push -0xc
nop
sbb dword [rdx - 0x34907bf], edx
test dword [rsp], ebx
fild word [rax]
adc eax, dword [rcx - 0x7a]
in al, 0xe4
add eax, 0x482b0406
sbb dword [rdx - 0x6ff3aaf8], edx
and dword [rcx], ebx
adc byte fs:[rax], 0xa6
leave
rcr dword [rdx], 0x64
sbb byte [rax], cl
jg 0x401590
sbb esp, esp
in al, dx
adc dword [r15], edx
cld
xor dword [rcx + 0x28], 0x57154181
jo 0x4015ff
in al, dx
mov bh, 0x12
and eax, 0x610b00f7
xor dword [r15], r8d
add eax, 0x832bb106
mov edi, 0x532f4744
add ah, byte [rbx + 0x57]
pop rdx
adc edx, dword [rdi + 0x6b]
cmpsb byte [rsi], byte ptr [rdi]
add al, 0x66
jle 0x40164a
loopne 0x401664
sbb dword [rdi + 0x775a0967], esp
jbe 0x401673
int 0xd
xchg dword [rdi], ebp
add byte [rbp - 0x31e4d8e9], ah
adc byte [rcx + 0x2126037], bh
mov ebx, 0x8f61de24
or dword [rdi], edx
fild qword [rdx]
insb byte [rdi], dx
add byte [rcx + 6], ch
leave
and al, bl
jbe 0x4016a5
mov al, 0x21
in al, dx
pop rdi
call 0xffffffffbb57dd4b
mov dl, 0x88
or al, 0xc3
mul byte [rdi + 0x8727b3c]
sbb ecx, dword [rax]
cmp cl, byte [rdi + rbp]
add dword [rax], ecx
mov ebx, 0x8279e40
jns 0x4016d0
or bh, dl
or eax, 0x326c1701
fmul st(1)
cmpsd dword [rsi], dword ptr [rdi]
or edx, dword [rbx + 0xd83ab47]
or al, 0x50
shr byte [edi], 1
jge 0x401647
or eax, 0xa70f8339
imul ecx, dword [rdi - 0x37bc5ae0], 0
cli
sbb byte [rcx], cl
ja 0x401641
outsb dx, byte [rsi]
adc dword [rax + 0x27], esi
and bl, byte [rdi - 0x3f]
adc esp, esp
in al, 0x20
ja 0x4016c5
cmp eax, 0x205c2309
sbb dword [rdx + 0x4b], ebx
or dword [rbp + 0xe], esp
xor byte ss:[rdi + 0x10], 0x72
push 0xe
lahf
ror dword [rsi + 0x4a], -0x71
jg 0x4016b6
sbb dword [rdi + 0x5360d90c], esi
mov edx, dword [rdi]
js 0x401705
cwde
mov al, 0x93
xor eax, 0x11
test al, 0x20
sbb dword [rbp - 0x51f5afe4], 0x77
mov ah, 0x8a
or al, 0x36
enter 0x6fb4, -0x59
cmc
pop rsi
and byte [rdx + rdx + 0x370a012f], bh
sbb eax, 0x41b0640a
pop rdi
test eax, 0xc90e292f
fldenv [rcx]
pop rdi
mov byte [rbx], cl
enter 0x2720, -0x31
mov r14b, 9
ja 0x401713
ret 0x1417
or ebp, dword [rdi - 0x2637c61c]
xchg eax, esi
adc edi, edx
sub ebp, dword [rdx]
or ebx, dword [rcx]
in al, 0xe4
or dword [rdi - 0x50e0f4cf], esp
adc byte [rsi + rdi*2 - 0x5de62b80], dl
lahf
movsxd rsi, dword [rdx + 0x74]
jae 0x4016fc
ljmp [rbp + 0x2e6666e4]
movsxd rax, dword [rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or edi, esi
jg 0x4017aa
mov edi, 0x65726540
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401774
fstp xword [rdi + 0x7b]
jnp 0x4017bc
outsd dx, dword [rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4017c4
jne 0x4017e0
outsd dx, dword [rsi]
mov edi, 0x6df6fec0
jo 0x4017dd
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bp, word [rsi - 0x23], 0xff0a
mov bh, 0x69
or byte [rdx + 0x72], dh
jns 0x4017e8
outsb dx, byte gs:[rsi]
je 0x4017ff
jns 0x4017c8
or ch, byte [rbp + 0x65]
jne 0x401797
out 0xbe, al
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x4017ce
or eax, 0xdf74295f
outsb dx, byte [rsi]
in eax, dx
test byte [rdx], ch
insd dword [rdi], dx
adc bl, byte [rdi + 0x5a277070]
push rbx
je 0x4017fc
outsd dx, dword [rsi]
pop rbx
imul edi, edi, 0x31
cmp dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
pushfq
xor byte [rdx + 0x6e], bh
movabs byte [0x74b06d6ee7637572], al
sbb dh, byte [rbx]
jae 0x401845
movsxd rsp, dword [rcx + 0x75]
in eax, dx
insb byte [rdi], dx
sti
pop rcx
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x380c650f
push -0x49
lodsd eax, dword [rsi]
in eax, dx
fisubr word [rcx + 0x6f]
cmp qword [rdx + r11], r9
jne 0x401832
js 0x401868
mov edi, 0x4ceedb6b
xor dh, byte [rcx]
mov dh, 0x65
test ax, 0x7a6c
imul ebx, dword [r15 + 0x70], 0x6f
insb byte [rdi], dx
imul edi, dword [rip + 0x63ec1b83], 0x30574579
sbb ecx, dword [rcx]
sbb dword [rdi], ecx
lodsb al, byte [rsi]
jne 0x401797
adc dword [rcx], esi
cwde
pop rdi
adc dh, byte [eax]
xchg bl, bl
wait
insd dword [rdi], dx
clc
jo 0x401861
pop rbp
adc dh, byte [rcx]
xor eax, 0xdbdb6d43
fldenv [rbp + 0x78]
movsd dword [rdi], dword ptr [rsi]
retf 0x4c73
xor eax, 0x45b66153
or bh, bl
jbe 0x4017c0
test al, 0x73
jne 0x4018a4
jae 0x401863
ficom dword [rip + 0x5f386ef6]
imul ebp, dword [rbp + 0x69], 0xa37417a
outsd dx, dword [rsi]
sub ebp, dword [rbp + rdx - 0x5adf00ff]
popfq
ret 0xc2da
push r11
imul byte [rcx + 0x4a]
and al, 0x35
pop rbx
pop rbx
lodsd eax, dword [rsi]
movsd dword [rdi], dword ptr [rsi]
test eax, 0x6e610d86
pop rbp
or edx, dword [rdx]
and dword fs:[rdi + 0x6c2b6b77], eax
cmp eax, dword [rbp + 0x1167341c]
jo 0x401901
mov eax, 0x65b2242d
loop 0x4018fb
fisub word [rbx + 0x68]
push rax
lodsb al, byte gs:[rsi]
push rcx
add ch, byte fs:[rax + rsi*4 + 0x27136291]
and byte gs:[rbx + 8], bl
ja 0x401880
mov ebx, 0x263927c2
or edi, dword [rcx + 0x4a]
enter 0x25da, 0x57
xor al, 0x6e
jmp 0x401854
outsd dx, dword [rsi]
or eax, 0x11361937
sub dword [rdi + 0x75], ebp
jae 0x401897
mov dh, 0x4d
sub dh, byte gs:[rax + 0x18]
jbe 0x401949
jbe 0x401927
loopne 0x40191b
mov dl, 0x55
xor al, 0x66
sub eax, 0x957608db
push 0x30
sub cl, bl
and r11b, r13b
fisubr dword [rdx]
int 0x15
jo 0x4018df
imul ebp, dword [rip + 0x28376cd7], 0x31
cmp al, byte [rip - 0x7e5a59e9]
insb byte [rdi], dx
insb byte [rdi], dx
sub esi, dword [rbx]
xchg eax, esp
jb 0x4018e9
mul byte [rax + 0x53]
sbb esp, esi
xor dword [rdi], esp
je 0x401980
jo 0x40192e
lodsq rax, qword [rsi]
leave
xor bpl, al
movsb byte [rdi], byte ptr [rsi]
movsq qword [rdi], qword ptr [rsi]
push rax
mul byte [rsi]
je 0x40193a
out 0x32, eax
ja 0x401945
fistp dword [rbx]
je 0x401982
jb 0x40194a
and eax, 0xa76c804b
jo 0x40198a
outsb dx, byte [rsi]
cdq
cmp esp, dword ss:[rax + 0x34]
sub byte fs:[rsi + 0x54], cl
mov dh, 0x51
and al, 0x6e
sbb byte [rbx + rdx*2 - 0x6e], dh
mov esp, esp
jae 0x4019b2
xor eax, 0xb0ae4cb7
xchg byte gs:[rcx], ch
push rdi
pop rcx
loope 0x401969
js 0x4019bc
jp 0x4019ca
jo 0x401994
jo 0x401963
cmp edi, dword [rax]
movabs eax, dword [0x5f013b070d02b174]
push rbx
and eax, 0xa318a2bd
adc eax, 0xf92264de
or eax, 0x418d3479
jmp 0x401990
btc dword [rcx + rbp*2 - 0x40], eax
xor eax, 0x7a20d735
or eax, 0x3d646756
mov eax, 0x2bcdfdbf
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r11b, byte [rbx + 0x6b]
retf
or esi, dword [rbx + 0x5f]
pop r15
xchg ah, al
js 0x4019f7
sar esi, 1
ja 0x4019c4
pop rdi
push rdx
pop r15
or r11b, byte [rax]
jnp 0x401968
in eax, 0xc9
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
push rdx
mov r12d, 0x4f27e25f
push rbx
cmp r10d, dword [r9 + rax*2 + 0x42]
sub byte [r10 - 0x38e7b27b], r15b
adc byte fs:[rbp - 0x122f4b8e], ah
add dword [rcx + rbx*2 + 0x4e], 0x45
jne 0x4019a6
hlt
loopne 0x4019bb
xchg eax, esp
adc dword [rdi + 0x75], ebx
outsb dx, byte [rsi]
cmp eax, 0x53404046
in al, dx
mov dh, 0x6d
jg 0x401a46
pop r15
xor ch, byte [rsi]
add dword [rip + 0x7439721d], esi
adc dx, cx
mov dh, 0xad
sub eax, 0xe662db4d
movsxd rdi, dword [rbx + 0x3bf7317d]
pop rdx
mov cl, 0x67
insd dword [rdi], dx
xlatb
push rdi
cmpsb byte [rsi], byte ptr [rdi]
cmp byte [rax + 0x2c], cl
ficom word [rdx - 0x40]
insb byte [rdi], dx
int 0x73
adc byte gs:[rdx + 0x4b], cl
wait
jae 0x401a67
jae 0x401a5c
jbe 0x401a2e
ja 0x401a70
ret
jae 0x4019f3
sbb dword [rcx + rcx*2], esi
xchg eax, edi
xor dword [r13 - 0x29], eax
jbe 0x401ac7
mov al, 0x76
pop rax
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x24
ja 0x401acd
adc esi, dword [rbx + 0x6d4d0561]
pop rbp
mov al, 0x2d
xor dword [rdx - 0x269ebc74], esi
je 0x401a98
xchg dword [rbp + 0x4419d4ec], eax
js 0x401a19
jne 0x401abc
jge 0x401aad
xor edi, dword [rax - 0x19]
je 0x401a98
ja 0x401a6c
imul ebx, dword [r10 - 0x1c], 0x67
movsxd rcx, dword [rip - 0x4a5ca4cf]
or byte [rdx], cl
pcmpgtd mm1, qword [rcx]
adc byte [rbp - 0x38], al
add esi, edx
fcom qword [rbx + 0x61]
add al, 0
mov ah, 0x44
pop rbx
adc ecx, dword [rbx]
add esi, dword [rdi]
mov ebp, 0xb1785c77
sub eax, 0x490d6f8b
push rsp
pop r15
leave
or al, 0x43
adc bl, byte [rdx]
sbb edi, dword [rdi - 0x39]
push rsp
jle 0x401abb
jo 0x401b2f
mov dil, 0xd
cmp dword [rdi - 0x6e], ecx
lea ecx, [rip - 0x1f2a3dbc]
fdivr dword [rax + 0x49]
sti
out dx, eax
ret 0x4b52
loop 0x401b2b
xor al, byte [rdx]
fcom qword [rax + 0x4b]
movsxd rsp, dword [rbx + 0x6c]
xchg eax, esp
mov es, word [rsi + rsi]
push -0x48
loope 0x401b45
ret 0x3d26
xor al, 0x19
sub byte [rax - 0x72], bh
or edx, dword [rbx + 0x5f9e6459]
push 0x101b32a9
fidiv word [rip + 0x3741783b]
and byte [rcx + 0x75488a2d], ah
movsxd rdx, edx
mov al, 0xc6
adc byte [rsi + 0x9764863], cl
cmpsb byte [rsi], byte ptr [rdi]
jb 0x401b80
imul ebx, dword [rsi + rax + 0x34], 0x74
scasd eax, dword [rdi]
ret 0x5c3e
push rax
mov esp, 0x346c4b4e
jae 0x401b56
sub al, 0x84
lodsb al, byte [rsi]
movabs dword [0x694d910fb00d315f], eax
js 0x401b7d
insd dword [rdi], dx
sub al, 0x34
pop rdx
test dword [rcx + 0x42], ecx
push 0x885656c
ror dword [rsi], 0x51
div byte [rdi + 0x493ad6c2]
and al, 0xbb
push rdx
out dx, al
add dh, byte [rax]
pop rdi
add byte [rcx], dh
cmp cl, byte [rbx]
mov ebp, esp
mov bh, 0xbd
jae 0x401bdd
insd dword [rdi], dx
or al, 0x62
je 0x401bdc
push -0x3248d2f7
xor al, 0xaa
cmp dword [rax + 7], esi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
sbb eax, 0xa6edb05
sub rax, 0x6c0d6715
pop rdx
insb byte [rdi], dx
jmp 0x401b49
jne 0x401bed
sub eax, 0x9a0d00ae
imul esi, dword [rbx], -9
cmp byte [rcx], cl
jns 0x401c07
sbb dword [r13 - 0x68], r9d
imul edi, dword [rbx], 0x76
jae 0x401b4d
or al, 0x5f
or dh, dh
int 0x1b
cdq
int 0x28
or dword [rbp - 0x31], ebp
int1
je 0x401c29
and dword [rdx], ecx
sub al, 0x6f
mov ebp, 0x8608c99c
add eax, 0xb56f2415
sub esi, dword [rax]
cmp rax, 0x6268652e
push -0x3264f25b
sub eax, 0xb31923a
lea ecx, [rsi]
push 0x20
and al, 0x73
int3
iret
std
push rsi
imul ecx, dword [rbp + rdi + 4], 0x40cd6d80
jmp 0x401bf3
add byte [rdx + 0x5f1683a0], dh
add dword [rdi], esp
jb 0x401be3
sbb al, 0x48
xor esp, dword [rbx + rax*2]
add dword [rbx], esp
leave
and byte [rbx + 0x2054540c], al
or al, 0xc9
nop
or al, 4
xor dword [rbx + rax*2 - 0x37], esi
and byte [rbx + 0x19442474], al
in al, 0x90
idiv bh
ljmp [rdi - 0x68]
cwde
xchg byte [rax + rsi*4 + 0x21], ah
add eax, 0x644e087f
mov al, 1
imul ecx, dword [rbx], 0x26c03fc0
wait
pushfq
sbb eax, 0x6fb0180
sbb byte [rax + 0x4b], dl
push r14
add esp, dword [rdx]
jns 0x401c0e
wait
inc dword [rdi]
call 0xffffffff93148256
out dx, al
pop rsi
mov edi, 0x436427ff
jb 0x401c54
mov edi, 0x9b070220
or al, 0x48
imul edi, dword [rdi], -2
add byte [rbx + 0x60bf99e4], bh
add byte [rdx], al
jmp qword [rsi]
xchg dword [rip + 0x3f537a61], eax
test al, 0x65
adc edx, dword [rsi]
out 7, al
out 0x3f, eax
jmp qword [rax]
or dword [rsi + rsi*2], 0xffffff84
rol byte [rax + 0x2e], 0x39
enter 0x8c0, 1
sbb byte [rbx + rdx*4], al
sbb byte [r14 + 0x72500613], cl
ret 0x279b
lcall [rdx]
and byte [rbx + 0x3f89d90c], al
fst dword [rax + 0x10c0c90d]
xchg eax, esp
xor ah, bl
movsb byte [rdi], byte ptr [rsi]
or dl, byte [rdi]
or al, 0xd9
xchg eax, ecx
sub eax, 0xc03f9d0f
mov dl, 0x24
sbb dword [rbx - 0x758000f9], 0x3fb65c90
movabs dword [0x9ff073f4dcce4a1], eax
outsb dx, byte [rsi]
test byte [rcx + r13*4 - 0x6ff88841], r12b
or eax, 0xc3bf6725
mov cl, 0x3f
in al, 0xcc
int 0x8a
test dword [rdi], 0x1937ac7f
mov dl, 0xa1
mov edi, 0x7407e03f
leave
xor edi, dword [rdi - 0x2c]
add cl, cl
js 0x401d18
push 0x72f03d2
imul ebp, dword [rsi], 0x3f2f73b2
invd
outsd dx, dword [rsi]
add ch, byte [rip + 0x64bf0787]
mov dl, 0xc9
add eax, 0xa4103fe1
sbb eax, dword [rdx]
sbb dword [rax], edx
out 0x7f, al
jb 0x401cba
sbb byte [rax], bl
loopne 0x401d31
leave
and byte [rbx + 0x72], al
adc byte [rax + 0xaacdcc8], bl
cmpsd dword [rsi], dword ptr [rdi]
jg 0x401cdf
nop
sbb eax, 0x3fef07b6
xchg byte [rdx + 0x209fc3b3], dl
jo 0x401d46
adc ah, bl
jo 0x401d5b
jg 0x401d1f
mov bl, 0xb
adc edi, dword [rdi]
add byte [rbx - 0x37], 0x19
mov eax, 0x3083f07
xchg eax, edx
in eax, dx
push rcx
call qword [rdi]
xor byte [rdi], bh
cmp ebp, dword [rsp + rax*4]
sbb al, 0x34
adc dword [rbx + 2], edi
adc edx, dword [rsi + 0x2d]
cmp byte [rdi - 0x27], bh
mov word [rax + 0x72], ss
or al, 0xbb
add ch, cl
leave
mov bl, 0x5e
mov eax, 0xcc0bf20
pop rsi
cmp dword [rbp + rcx + 0x787f0920], eax
sub eax, 0x3c916000
or eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0xb080216], ecx
mov cs, word [rsp + rcx*2 - 0xf64c542]
add byte [rcx], ah
add byte [rax], al
ror dword [rcx], cl
add byte [rax], al
add byte [rcx], 0
add byte [r8], al
hlt
add byte [rax], al
add bh, bh
