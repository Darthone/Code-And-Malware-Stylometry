xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6050d7
push rbp
sub rax, obj.stdin
cmp rax, 0xe
mov rbp, rsp
jbe 0x400ff0
mov eax, 0
test rax, rax
je 0x400ff0
pop rbp
mov edi, obj.stdin
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.stdin
push rbp
sub rsi, obj.stdin
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401038
mov eax, 0
test rax, rax
je 0x401038
pop rbp
mov edi, obj.stdin
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x204099], 0
jne 0x40105a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x204086], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401070
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40106b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
nop word cs:[rax + rax]
push rbp
push rbx
mov rbx, rdi
sub rsp, 8
mov dword [rdi], 0
mov rdi, qword [rip + 0x20402a]
jmp 0x4010c8
nop dword [rax + rax]
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
cmp eax, 0x2d
je 0x4010e8
sub eax, 0x30
cmp eax, 9
jbe 0x401140
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x4010b0
call sym.imp.__uflow
cmp eax, 0x2d
mov rdi, qword [rip + 0x203fef]
jne 0x4010c0
nop dword [rax + rax]
mov ebp, 1
jmp 0x401115
nop
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x401130
mov edx, dword [rbx]
mov rdi, qword [rip + 0x203fc4]
lea edx, [rdx + rdx*4]
lea eax, [rax + rdx*2 - 0x30]
mov dword [rbx], eax
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x4010f0
call sym.imp.__uflow
lea edx, [rax - 0x30]
cmp edx, 9
jbe 0x401103
nop dword [rax]
test ebp, ebp
je 0x401136
neg dword [rbx]
add rsp, 8
pop rbx
pop rbp
ret
nop dword [rax]
mov dword [rbx], eax
xor ebp, ebp
jmp 0x401115
nop word cs:[rax + rax]
push rbp
push rbx
mov rbp, rdi
sub rsp, 8
mov qword [rdi], 0
mov rdi, qword [rip + 0x203f69]
jmp 0x40118c
nop dword [rax]
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
cmp eax, 0x2d
je 0x4011b0
sub eax, 0x30
cmp eax, 9
jbe 0x401220
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x401170
call sym.imp.__uflow
cmp eax, 0x2d
mov rdi, qword [rip + 0x203f2b]
jne 0x401180
nop word [rax + rax]
mov ebx, 1
jmp 0x4011ed
nop word [rax + rax]
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x401208
mov rdx, qword [rbp]
cdqe
mov rdi, qword [rip + 0x203ef0]
lea rdx, [rdx + rdx*4]
lea rax, [rax + rdx*2 - 0x30]
mov qword [rbp], rax
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x4011c0
call sym.imp.__uflow
lea edx, [rax - 0x30]
cmp edx, 9
jbe 0x4011d3
nop dword [rax]
test ebx, ebx
je 0x401210
neg qword [rbp]
add rsp, 8
pop rbx
pop rbp
ret
nop word [rax + rax]
cdqe
xor ebx, ebx
mov qword [rbp], rax
jmp 0x4011ed
nop word [rax + rax]
push r13
push r12
push rbp
push rbx
movabs rbp, 0x200004c01
mov rbx, rdi
sub rsp, 8
nop word [rax + rax]
mov rdi, qword [rip + 0x203e79]
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jae 0x4012e0
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax + 1]
cmp edx, 0x21
jbe 0x4012d0
mov byte [rbx], al
lea rbp, [rbx + 1]
mov r12d, 1
movabs r13, 0x200004c01
jmp 0x4012b4
nop dword [rax]
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax + 1]
cmp edx, 0x21
ja 0x4012a9
bt r13, rdx
jb 0x4012f0
mov byte [rbp], al
add r12d, 1
add rbp, 1
mov rdi, qword [rip + 0x203e15]
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x401290
call sym.imp.__uflow
jmp 0x40129b
nop dword [rax]
bt rbp, rdx
jb 0x401250
jmp 0x401274
nop dword [rax]
call sym.imp.__uflow
jmp 0x40126c
nop word [rax + rax]
movsxd rax, r12d
mov byte [rbx + rax], 0
add rsp, 8
mov eax, r12d
pop rbx
pop rbp
pop r12
pop r13
ret
nop
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
mov rbp, rdi
movabs rbx, 0x200004c01
sub rsp, 8
nop dword [rax + rax]
mov rdi, qword [rip + 0x203d99]
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jae 0x401450
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax + 1]
cmp edx, 0x21
jbe 0x401440
mov ebx, eax
mov rax, qword [rbp]
mov r12, qword [rbp + 8]
lea r13, [rbp + 0x10]
cmp rax, r13
lea r14, [r12 + 1]
je 0x401483
mov rdx, qword [rbp + 0x10]
cmp r14, rdx
jbe 0x40139a
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
mov rdi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rbp]
mov byte [rax + r12], bl
mov rax, qword [rbp]
mov qword [rbp + 8], r14
movabs r14, 0x200004c01
mov byte [rax + r12 + 1], 0
jmp 0x4013f4
nop dword [rax + rax]
mov rdx, qword [rbp + 0x10]
cmp r15, rdx
jbe 0x4013e2
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
mov rdi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rbp]
mov byte [rax + r12], bl
mov rax, qword [rbp]
mov qword [rbp + 8], r15
mov byte [rax + r12 + 1], 0
mov rdi, qword [rip + 0x203cd5]
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jae 0x401460
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax + 1]
cmp edx, 0x21
ja 0x40141e
bt r14, rdx
jb 0x401470
mov ebx, eax
mov rax, qword [rbp]
mov r12, qword [rbp + 8]
cmp r13, rax
lea r15, [r12 + 1]
jne 0x4013c0
mov edx, 0xf
jmp 0x4013c4
nop dword [rax]
bt rbx, rdx
jb 0x401330
jmp 0x40135c
nop
call sym.imp.__uflow
jmp 0x401350
nop word [rax + rax]
call sym.imp.__uflow
jmp 0x401410
nop word [rax + rax]
mov rax, qword [rbp + 8]
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov edx, 0xf
jmp 0x40137c
nop dword [rax]
push r13
push r12
push rbp
push rbx
mov ebp, esi
sub rsp, 0x28
mov rax, qword fs:[0x28]
mov qword [rsp + 0x18], rax
xor eax, eax
test edi, edi
js 0x401920
mov r9d, 0
je 0x401910
mov eax, edi
mov esi, 0x66666667
mov ecx, edi
imul esi
sar ecx, 0x1f
mov ebx, edi
sar edx, 2
sub edx, ecx
lea eax, [rdx + rdx*4]
mov r8d, edx
add eax, eax
sub ebx, eax
test edx, edx
mov byte [rsp], bl
je 0x401a10
mov eax, edx
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 1], r8b
mov r8d, 0x51eb851f
imul r8d
sar edx, 5
mov r8d, edx
sub r8d, ecx
je 0x401a20
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 2], r8b
mov r8d, 0x10624dd3
imul r8d
sar edx, 6
mov r8d, edx
sub r8d, ecx
je 0x401a30
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 3], r8b
mov r8d, 0x68db8bad
imul r8d
sar edx, 0xc
mov r8d, edx
sub r8d, ecx
je 0x401a60
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 4], r8b
mov r8d, 0x14f8b589
imul r8d
sar edx, 0xd
mov r8d, edx
sub r8d, ecx
je 0x401a70
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 5], r8b
mov r8d, 0x431bde83
imul r8d
sar edx, 0x12
mov r8d, edx
sub r8d, ecx
je 0x401a80
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 6], r8b
mov r8d, 0x6b5fca6b
imul r8d
sar edx, 0x16
mov r8d, edx
sub r8d, ecx
je 0x401a90
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 7], r8b
mov r8d, 0x55e63b89
imul r8d
sar edx, 0x19
mov r8d, edx
sub r8d, ecx
je 0x401a40
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
mov esi, edx
mov edx, 0x44b82fa1
sar esi, 2
sub esi, eax
lea eax, [rsi + rsi*4]
add eax, eax
sub r8d, eax
mov eax, edi
imul edx
mov byte [rsp + 8], r8b
sar edx, 0x1c
sub edx, ecx
je 0x401a50
mov byte [rsp + 9], dl
mov ebx, 0xa
test r9d, r9d
je 0x4016cb
mov rdi, qword [rip + 0x203a26]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401930
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], 0x2d
sub ebx, 1
movsxd rax, ebx
mov rdi, qword [rip + 0x203a00]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp qword [rdi + 0x30], rdx
jbe 0x4019e0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test ebx, ebx
lea r12d, [rbx - 1]
je 0x4018cb
movsxd rax, r12d
mov rdi, qword [rip + 0x2039cb]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4019f0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r12d, r12d
lea r13d, [rbx - 2]
je 0x4018cb
movsxd rax, r13d
mov rdi, qword [rip + 0x203995]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x401a00
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r13d, r13d
lea r12d, [rbx - 3]
je 0x4018cb
movsxd rax, r12d
mov rdi, qword [rip + 0x20395f]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4019a0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r12d, r12d
lea r13d, [rbx - 4]
je 0x4018cb
movsxd rax, r13d
mov rdi, qword [rip + 0x203929]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4019b0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r13d, r13d
lea r12d, [rbx - 5]
je 0x4018cb
movsxd rax, r12d
mov rdi, qword [rip + 0x2038f3]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4019c0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r12d, r12d
lea r13d, [rbx - 6]
je 0x4018cb
movsxd rax, r13d
mov rdi, qword [rip + 0x2038bd]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4019d0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r13d, r13d
lea r12d, [rbx - 7]
je 0x4018cb
movsxd rax, r12d
mov rdi, qword [rip + 0x203887]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x401980
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
sub ebx, 8
test r12d, r12d
je 0x4018cb
movsxd rax, ebx
mov rdi, qword [rip + 0x203856]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x401990
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test ebx, ebx
je 0x4018cb
movsx eax, byte [rsp]
mov rdi, qword [rip + 0x203828]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x401970
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
mov rdi, qword [rip + 0x203806]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401940
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], bpl
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
jne 0x401a9a
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
ret
nop word cs:[rax + rax]
mov byte [rsp], 0
xor ebx, ebx
jmp 0x4016ce
nop dword [rax + rax]
neg edi
mov r9d, 1
jmp 0x4014c0
nop dword [rax]
mov esi, 0x2d
call sym.imp.__overflow
jmp 0x4016cb
nop
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
jne 0x401a9a
add rsp, 0x28
movzx esi, bpl
pop rbx
pop rbp
pop r12
pop r13
jmp sym.imp.__overflow
nop word [rax + rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x4018cb
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x401870
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x4018a1
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x401798
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x4017ce
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x401804
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x40183a
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x4016f7
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x40172c
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x401762
nop dword [rax]
mov ebx, 1
jmp 0x4016a6
nop word [rax + rax]
mov ebx, 2
jmp 0x4016a6
nop word [rax + rax]
mov ebx, 3
jmp 0x4016a6
nop word [rax + rax]
mov ebx, 8
jmp 0x4016a6
nop word [rax + rax]
mov ebx, 9
jmp 0x4016a6
nop word [rax + rax]
mov ebx, 4
jmp 0x4016a6
nop word [rax + rax]
mov ebx, 5
jmp 0x4016a6
nop word [rax + rax]
mov ebx, 6
jmp 0x4016a6
nop word [rax + rax]
mov ebx, 7
jmp 0x4016a6
call sym.imp.__stack_chk_fail
nop
push rbp
push rbx
mov ebx, esi
sub rsp, 0x28
mov rax, qword fs:[0x28]
mov qword [rsp + 0x18], rax
xor eax, eax
test rdi, rdi
js 0x401bc8
mov r8d, 0
je 0x401bb9
mov rcx, rsp
xor ebp, ebp
movabs rsi, 0x6666666666666667
nop dword [rax]
mov rax, rdi
add ebp, 1
add rcx, 1
imul rsi
mov rax, rdi
sar rax, 0x3f
sar rdx, 2
sub rdx, rax
lea rax, [rdx + rdx*4]
add rax, rax
sub rdi, rax
mov byte [rcx - 1], dil
test rdx, rdx
mov rdi, rdx
jne 0x401ae0
test r8d, r8d
je 0x401b8b
mov rdi, qword [rip + 0x2035bb]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401bd6
lea rdx, [rax + 1]
sub ebp, 1
cmp ebp, -1
mov qword [rdi + 0x28], rdx
mov byte [rax], 0x2d
jne 0x401b93
nop
mov rdi, qword [rip + 0x203591]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401be2
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], bl
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
jne 0x401c00
add rsp, 0x28
pop rbx
pop rbp
ret
nop word [rax + rax]
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], sil
sub ebp, 1
cmp ebp, -1
je 0x401b40
movsxd rax, ebp
mov rdi, qword [rip + 0x20353b]
movsx esi, byte [rsp + rax]
mov rax, qword [rdi + 0x28]
add esi, 0x30
cmp rax, qword [rdi + 0x30]
jb 0x401b80
movzx esi, sil
call sym.imp.__overflow
jmp 0x401b8b
mov byte [rsp], 0
mov ebp, 1
jmp 0x401b8b
nop dword [rax]
neg rdi
mov r8d, 1
jmp 0x401acd
mov esi, 0x2d
call sym.imp.__overflow
jmp 0x401b8b
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
jne 0x401c00
add rsp, 0x28
movzx esi, bl
pop rbx
pop rbp
jmp sym.imp.__overflow
call sym.imp.__stack_chk_fail
nop
nop word cs:[rax + rax]
movzx esi, byte [rdi]
test sil, sil
je 0x401c61
push rbx
lea rbx, [rdi + 1]
jmp 0x401c38
nop
lea rdx, [rax + 1]
add rbx, 1
mov qword [rdi + 0x28], rdx
mov byte [rax], sil
movzx esi, byte [rbx - 1]
test sil, sil
je 0x401c60
mov rdi, qword [rip + 0x203499]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jb 0x401c20
add rbx, 1
call sym.imp.__overflow
movzx esi, byte [rbx - 1]
test sil, sil
jne 0x401c38
nop dword [rax + rax]
pop rbx
ret
nop dword [rax]
nop word cs:[rax + rax]
push r12
push rbp
mov ebp, esi
push rbx
mov rax, qword [rdi]
mov r12, rdi
mov ebx, 1
movzx esi, byte [rax]
test sil, sil
jne 0x401cac
jmp 0x401cc8
nop dword [rax + rax]
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], sil
mov rax, qword [r12]
movzx esi, byte [rax + rbx]
add rbx, 1
test sil, sil
je 0x401cc8
mov rdi, qword [rip + 0x203425]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jb 0x401c90
call sym.imp.__overflow
jmp 0x401c9b
nop dword [rax]
mov rdi, qword [rip + 0x203409]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401ce9
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], bpl
pop rbx
pop rbp
pop r12
ret
pop rbx
movzx esi, bpl
pop rbp
pop r12
jmp sym.imp.__overflow
nop word cs:[rax + rax]
push rbp
push rbx
mov ebp, esi
lea rbx, [rdi + 1]
sub rsp, 8
movzx esi, byte [rdi]
test sil, sil
jne 0x401d38
jmp 0x401d60
nop word cs:[rax + rax]
lea rdx, [rax + 1]
add rbx, 1
mov qword [rdi + 0x28], rdx
mov byte [rax], sil
movzx esi, byte [rbx - 1]
test sil, sil
je 0x401d60
mov rdi, qword [rip + 0x203399]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jb 0x401d20
add rbx, 1
call sym.imp.__overflow
movzx esi, byte [rbx - 1]
test sil, sil
jne 0x401d38
nop dword [rax + rax]
mov rdi, qword [rip + 0x203371]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401d83
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], bpl
add rsp, 8
pop rbx
pop rbp
ret
add rsp, 8
movzx esi, bpl
pop rbx
pop rbp
jmp sym.imp.__overflow
nop dword [rax]
nop word cs:[rax + rax]
mov rax, rdi
mov r8, rdx
mov r9d, 1
cqo
idiv r8
test rsi, rsi
mov rcx, rdx
je 0x401de9
nop dword [rax]
test sil, 1
je 0x401dd5
mov rax, r9
imul rax, rcx
cqo
idiv r8
mov r9, rdx
mov rax, rcx
imul rax, rcx
cqo
idiv r8
sar rsi, 1
mov rcx, rdx
jne 0x401dc0
mov rax, r9
ret
nop dword [rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x78
mov rax, qword fs:[0x28]
mov qword [rsp + 0x68], rax
xor eax, eax
lea rax, [rsp + 0x30]
test esi, esi
mov qword [rsp + 0x18], rdi
mov dword [rsp], edx
mov dword [rsp + 0x14], ecx
mov qword [rsp + 0x20], rax
mov qword [rsp + 0x28], 0
mov byte [rsp + 0x30], 0
jle 0x4024ec
mov r13d, esi
xor ebp, ebp
xor r12d, r12d
mov r14, rax
jmp 0x401e75
nop word [rax + rax]
mov byte [rax + rbp], 0x52
mov rax, qword [rsp + 0x20]
add r12d, 1
cmp r13d, r12d
mov qword [rsp + 0x28], rbx
mov byte [rax + rbx], 0
je 0x401ec0
mov rbp, qword [rsp + 0x28]
mov rax, qword [rsp + 0x20]
cmp rax, r14
lea rbx, [rbp + 1]
je 0x401eb0
mov rdx, qword [rsp + 0x30]
cmp rbx, rdx
jbe 0x401e50
lea rdi, [rsp + 0x20]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x20]
jmp 0x401e50
nop word cs:[rax + rax]
mov edx, 0xf
jmp 0x401e83
nop word [rax + rax]
lea r14, [rsp + 0x40]
mov r8d, dword [rsp + 0x28]
mov qword [rsp + 0x48], 0
mov byte [rsp + 0x50], 0
lea rax, [r14 + 0x10]
test r8d, r8d
mov qword [rsp + 0x40], rax
jle 0x401fc9
xor r13d, r13d
xor ebp, ebp
xor r12d, r12d
mov qword [rsp + 8], rax
jmp 0x401f36
nop dword [rax]
mov edi, dword [rsp]
mov byte [rax + rbp], r15b
mov rax, qword [rsp + 0x40]
mov qword [rsp + 0x48], rbx
test edi, edi
mov byte [rax + rbx], 0
jne 0x401f78
add r12d, 1
add r13, 1
cmp r12d, dword [rsp + 0x28]
jge 0x401fc9
mov rbp, qword [rsp + 0x48]
mov rax, qword [rsp + 0x40]
cmp rax, qword [rsp + 8]
mov rdx, qword [rsp + 0x20]
lea rbx, [rbp + 1]
movzx r15d, byte [rdx + r13]
je 0x402038
mov rdx, qword [rsp + 0x50]
cmp rbx, rdx
jbe 0x401f00
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x40]
jmp 0x401f00
nop dword [rax]
sub dword [rsp], 1
mov rax, qword [rsp + 0x40]
cmp rax, qword [rsp + 8]
mov rbx, qword [rsp + 0x48]
lea rbp, [rbx + 1]
je 0x402070
mov rdx, qword [rsp + 0x50]
cmp rbp, rdx
ja 0x402048
mov byte [rax + rbx], 0x59
mov rax, qword [rsp + 0x40]
add r12d, 1
mov qword [rsp + 0x48], rbp
add r13, 1
mov byte [rax + rbx + 1], 0
cmp r12d, dword [rsp + 0x28]
jl 0x401f2c
mov ebp, dword [rsp]
lea r13, [r14 + 0x10]
test ebp, ebp
jne 0x401ffc
jmp 0x402090
nop dword [rax]
mov byte [rax + rbx], 0x59
mov rax, qword [rsp + 0x40]
sub ebp, 1
mov qword [rsp + 0x48], r12
mov byte [rax + rbx + 1], 0
je 0x402090
mov rax, qword [rsp + 0x40]
mov rbx, qword [rsp + 0x48]
cmp rax, r13
lea r12, [rbx + 1]
je 0x402080
mov rdx, qword [rsp + 0x50]
cmp r12, rdx
jbe 0x401fe0
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbx
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x40]
jmp 0x401fe0
nop dword [rax]
mov edx, 0xf
jmp 0x401f54
nop word [rax + rax]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbx
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x40]
jmp 0x401fa3
nop word [rax + rax]
mov edx, 0xf
jmp 0x401f9a
nop word [rax + rax]
mov edx, 0xf
jmp 0x402014
nop word [rax + rax]
lea rdi, [rsp + 0x20]
mov rsi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_assign
mov rdi, qword [rsp + 0x40]
lea rax, [r14 + 0x10]
cmp rdi, rax
je 0x4020b0
call sym.operatordelete
lea rax, [r14 + 0x10]
mov qword [rsp + 0x48], 0
mov byte [rsp + 0x50], 0
mov rcx, qword [rsp + 0x28]
xor r12d, r12d
xor ebx, ebx
mov qword [rsp + 0x40], rax
mov qword [rsp], rax
jmp 0x402116
nop word [rax + rax]
mov byte [rax + rbp], r15b
mov rax, qword [rsp + 0x40]
add ebx, 1
mov qword [rsp + 0x48], r13
mov byte [rax + rbp + 1], 0
mov rcx, qword [rsp + 0x28]
mov eax, ebx
cdq
mov rsi, qword [rsp + 0x20]
idiv ecx
movsxd rdx, edx
movzx eax, byte [rsi + rdx]
cmp byte [rsi + r12], al
je 0x402168
add r12, 1
cmp ebx, ecx
jge 0x4021e0
mov rax, qword [rsp + 0x20]
mov rbp, qword [rsp + 0x48]
movzx r15d, byte [rax + r12]
mov rax, qword [rsp + 0x40]
lea r13, [rbp + 1]
cmp rax, qword [rsp]
je 0x4021b8
mov rdx, qword [rsp + 0x50]
cmp r13, rdx
jbe 0x4020e0
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x40]
jmp 0x4020e0
nop dword [rax]
mov esi, dword [rsp + 0x14]
test esi, esi
je 0x402112
sub dword [rsp + 0x14], 1
mov rax, qword [rsp + 0x40]
cmp rax, qword [rsp]
mov rbp, qword [rsp + 0x48]
lea r13, [rbp + 1]
je 0x4024c8
mov rdx, qword [rsp + 0x50]
cmp r13, rdx
ja 0x4021c0
mov byte [rax + rbp], 0x42
mov rax, qword [rsp + 0x40]
mov qword [rsp + 0x48], r13
mov byte [rax + rbp + 1], 0
mov rcx, qword [rsp + 0x28]
jmp 0x402112
nop dword [rax]
mov edx, 0xf
jmp 0x402141
nop
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x40]
jmp 0x402197
nop dword [rax]
lea rdi, [rsp + 0x20]
mov rsi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_assign
mov rdx, qword [rsp + 0x48]
xor r8d, r8d
mov ecx, 0x4041a2
xor esi, esi
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
mov edx, dword [rsp + 0x28]
lea rax, [r14 + 0x10]
xor r12d, r12d
mov ebx, 1
mov qword [rsp], rax
test edx, edx
jg 0x402272
jmp 0x402328
nop dword [rax]
mov byte [rax + rbp], r15b
mov rax, qword [rsp + 0x40]
mov qword [rsp + 0x48], r13
mov byte [rax + rbp + 1], 0
mov rsi, qword [rsp + 0x20]
mov ebp, ebx
mov ecx, dword [rsp + 0x28]
cmp byte [rsi + r12], 0x42
je 0x402263
mov eax, ebx
cdq
idiv ecx
movsxd rdx, edx
cmp byte [rsi + rdx], 0x42
je 0x402263
mov eax, dword [rsp + 0x14]
test eax, eax
jne 0x4022d0
add r12, 1
add ebx, 1
cmp ebp, ecx
jge 0x402328
mov rax, qword [rsp + 0x20]
mov rbp, qword [rsp + 0x48]
movzx r15d, byte [rax + r12]
mov rax, qword [rsp + 0x40]
lea r13, [rbp + 1]
cmp rax, qword [rsp]
je 0x4022c0
mov rdx, qword [rsp + 0x50]
cmp r13, rdx
jbe 0x402228
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x40]
jmp 0x402228
nop dword [rax]
mov edx, 0xf
jmp 0x402295
nop word [rax + rax]
sub dword [rsp + 0x14], 1
mov rax, qword [rsp + 0x40]
cmp rax, qword [rsp]
mov r13, qword [rsp + 0x48]
lea r15, [r13 + 1]
je 0x402480
mov rdx, qword [rsp + 0x50]
cmp r15, rdx
ja 0x402398
mov byte [rax + r13], 0x42
mov rax, qword [rsp + 0x40]
add r12, 1
mov qword [rsp + 0x48], r15
add ebx, 1
mov byte [rax + r13 + 1], 0
mov ecx, dword [rsp + 0x28]
cmp ebp, ecx
jl 0x402272
nop dword [rax + rax]
mov ebp, dword [rsp + 0x14]
lea r13, [r14 + 0x10]
test ebp, ebp
jne 0x402358
jmp 0x4023d0
nop dword [rax]
mov byte [rax + rbx], 0x42
mov rax, qword [rsp + 0x40]
sub ebp, 1
mov qword [rsp + 0x48], r12
mov byte [rax + rbx + 1], 0
je 0x4023d0
mov rax, qword [rsp + 0x40]
mov rbx, qword [rsp + 0x48]
cmp rax, r13
lea r12, [rbx + 1]
je 0x4023c0
mov rdx, qword [rsp + 0x50]
cmp r12, rdx
jbe 0x402340
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbx
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x40]
jmp 0x402340
nop dword [rax]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r13
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x40]
jmp 0x4022fb
nop word [rax + rax]
mov edx, 0xf
jmp 0x402370
nop word [rax + rax]
lea rdi, [rsp + 0x20]
mov rsi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_assign
mov rdi, qword [rsp + 0x40]
add r14, 0x10
cmp rdi, r14
je 0x4023f0
call sym.operatordelete
mov r10, qword [rsp + 0x28]
mov rdi, qword [rsp + 0x20]
xor ecx, ecx
mov esi, r10d
mov r8, rdi
jmp 0x402421
nop dword [rax]
add ecx, 1
movzx r9d, byte [r8]
add r8, 1
mov eax, ecx
cdq
idiv esi
movsxd rdx, edx
cmp r9b, byte [rdi + rdx]
je 0x402490
cmp ecx, esi
jl 0x402408
mov rcx, qword [rsp + 0x18]
mov rax, rcx
add rax, 0x10
mov qword [rcx], rax
lea rax, [rsp + 0x30]
cmp rdi, rax
je 0x4024d2
mov rax, qword [rsp + 0x30]
mov qword [rcx], rdi
mov qword [rcx + 0x10], rax
mov rax, rcx
mov qword [rax + 8], r10
mov rdi, qword [rsp + 0x68]
xor rdi, qword fs:[0x28]
jne 0x402546
add rsp, 0x78
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax + rax]
mov edx, 0xf
jmp 0x4022f2
nop word [rax + rax]
mov rsi, qword [rsp + 0x18]
mov rax, rsi
mov qword [rsi + 8], 0
mov byte [rsi + 0x10], 0
add rax, 0x10
mov qword [rsi], rax
lea rax, [rsp + 0x30]
cmp rdi, rax
je 0x40254b
call sym.operatordelete
mov rax, qword [rsp + 0x18]
jmp 0x402455
nop dword [rax]
mov edx, 0xf
jmp 0x402192
mov rax, qword [rsp + 0x30]
mov rdx, qword [rsp + 0x38]
mov qword [rcx + 0x10], rax
mov qword [rcx + 0x18], rdx
mov rax, rcx
jmp 0x402451
lea r14, [rsp + 0x40]
mov qword [rsp + 0x48], 0
mov byte [rsp + 0x50], 0
lea rax, [r14 + 0x10]
mov qword [rsp + 0x40], rax
jmp 0x401fc9
mov rbx, rax
mov rdi, qword [rsp + 0x20]
lea rax, [rsp + 0x30]
cmp rdi, rax
je 0x402524
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rdi, qword [rsp + 0x40]
add r14, 0x10
mov rbx, rax
cmp rdi, r14
je 0x402510
call sym.operatordelete
jmp 0x402510
jmp 0x40252c
call sym.imp.__stack_chk_fail
mov rax, rsi
jmp 0x402455
nop dword [rax]
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x158
mov qword [rsp + 8], rdi
mov rdi, qword [rip + 0x202b53]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x148], rax
xor eax, eax
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jmp 0x4025bc
nop word [rax + rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
cmp eax, 0x2d
je 0x4025f7
sub eax, 0x30
cmp eax, 9
jbe 0x4025f7
cmp r8, r9
jb 0x4025a0
call sym.imp.__uflow
mov rdi, qword [rip + 0x202b03]
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jmp 0x4025af
nop word [rax + rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
sub eax, 0x30
cmp eax, 9
ja 0x402638
cmp r8, r9
jb 0x4025e0
call sym.imp.__uflow
mov rdi, qword [rip + 0x202ac8]
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jmp 0x4025ef
nop word [rax + rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
cmp eax, 0x2d
je 0x402660
sub eax, 0x30
cmp eax, 9
jbe 0x402dd8
cmp r8, r9
jb 0x402618
call sym.imp.__uflow
mov rdi, qword [rip + 0x202a87]
cmp eax, 0x2d
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jne 0x40262c
nop word cs:[rax + rax]
xor r13d, r13d
mov ebx, 1
jmp 0x402691
nop word [rax + rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x4026b8
lea edx, [r13 + r13*4]
lea r13d, [rax + rdx*2 - 0x30]
cmp r8, r9
jb 0x402670
call sym.imp.__uflow
mov rdi, qword [rip + 0x202a2e]
lea edx, [rax - 0x30]
cmp edx, 9
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jbe 0x402687
nop word [rax + rax]
mov eax, r13d
neg eax
test ebx, ebx
cmovne r13d, eax
jmp 0x4026e8
nop dword [rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
cmp eax, 0x2d
je 0x402710
sub eax, 0x30
cmp eax, 9
jbe 0x402dc8
cmp r9, r8
ja 0x4026c8
call sym.imp.__uflow
mov rdi, qword [rip + 0x2029d7]
cmp eax, 0x2d
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jne 0x4026dc
nop word cs:[rax + rax]
xor r12d, r12d
mov ebx, 1
jmp 0x402740
nop word [rax + rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x402768
lea edx, [r12 + r12*4]
lea r12d, [rax + rdx*2 - 0x30]
cmp r8, r9
jb 0x402720
call sym.imp.__uflow
mov rdi, qword [rip + 0x20297f]
lea edx, [rax - 0x30]
cmp edx, 9
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jbe 0x402737
nop dword [rax]
mov eax, r12d
neg eax
test ebx, ebx
cmovne r12d, eax
jmp 0x402798
nop dword [rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
cmp eax, 0x2d
je 0x4027c0
sub eax, 0x30
cmp eax, 9
jbe 0x402db8
cmp r8, r9
jb 0x402778
call sym.imp.__uflow
mov rdi, qword [rip + 0x202927]
cmp eax, 0x2d
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jne 0x40278c
nop word cs:[rax + rax]
xor r15d, r15d
mov ebx, 1
jmp 0x4027f0
nop word [rax + rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x402818
lea edx, [r15 + r15*4]
lea r15d, [rax + rdx*2 - 0x30]
cmp r8, r9
jb 0x4027d0
call sym.imp.__uflow
mov rdi, qword [rip + 0x2028cf]
lea edx, [rax - 0x30]
cmp edx, 9
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jbe 0x4027e7
nop dword [rax]
mov eax, r15d
neg eax
test ebx, ebx
cmovne r15d, eax
jmp 0x402848
nop dword [rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
cmp eax, 0x2d
je 0x402870
sub eax, 0x30
cmp eax, 9
jbe 0x402e10
cmp r8, r9
jb 0x402828
call sym.imp.__uflow
mov rdi, qword [rip + 0x202877]
cmp eax, 0x2d
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jne 0x40283c
nop word cs:[rax + rax]
xor ebx, ebx
mov ebp, 1
jmp 0x40289e
nop dword [rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x4028c0
lea edx, [rbx + rbx*4]
lea ebx, [rax + rdx*2 - 0x30]
cmp r9, r8
ja 0x402880
call sym.imp.__uflow
mov rdi, qword [rip + 0x202821]
lea edx, [rax - 0x30]
cmp edx, 9
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jbe 0x402897
nop
mov eax, ebx
neg eax
test ebp, ebp
cmovne ebx, eax
jmp 0x4028f0
nop dword [rax + rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
cmp eax, 0x2d
je 0x402910
sub eax, 0x30
cmp eax, 9
jbe 0x402de8
cmp r8, r9
jb 0x4028d0
call sym.imp.__uflow
mov rdi, qword [rip + 0x2027cf]
cmp eax, 0x2d
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jne 0x4028e4
nop
xor r14d, r14d
mov ebp, 1
jmp 0x402940
nop word [rax + rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x402968
lea edx, [r14 + r14*4]
lea r14d, [rax + rdx*2 - 0x30]
cmp r9, r8
ja 0x402920
call sym.imp.__uflow
mov rdi, qword [rip + 0x20277f]
lea edx, [rax - 0x30]
cmp edx, 9
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jbe 0x402937
nop dword [rax]
mov eax, r14d
neg eax
test ebp, ebp
cmovne r14d, eax
jmp 0x402998
nop dword [rax]
lea rdx, [r8 + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [r8]
mov r8, rdx
cmp eax, 0x2d
je 0x4029c0
sub eax, 0x30
cmp eax, 9
jbe 0x402df8
cmp r9, r8
ja 0x402978
call sym.imp.__uflow
mov rdi, qword [rip + 0x202727]
cmp eax, 0x2d
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
jne 0x40298c
nop word cs:[rax + rax]
xor ebp, ebp
mov dword [rsp], 1
jmp 0x4029fb
nop dword [rax + rax]
lea rax, [r8 + 1]
mov qword [rdi + 8], rax
movzx eax, byte [r8]
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x402a10
mov rdi, qword [rip + 0x2026e5]
lea edx, [rbp + rbp*4]
lea ebp, [rax + rdx*2 - 0x30]
mov r8, qword [rdi + 8]
mov r9, qword [rdi + 0x10]
cmp r9, r8
ja 0x4029d0
call sym.imp.__uflow
lea edx, [rax - 0x30]
cmp edx, 9
jbe 0x4029e4
nop dword [rax]
mov edx, dword [rsp]
mov eax, ebp
neg eax
test edx, edx
cmovne ebp, eax
test r13d, r13d
jne 0x402ca0
test r12d, r12d
setne dl
test r15d, r15d
sete al
and eax, edx
test ebx, ebx
sete dl
and eax, edx
test r14d, r14d
setne dl
test al, dl
je 0x402b58
test ebp, ebp
jne 0x402b58
cmp r12d, r14d
jne 0x402d98
lea rbx, [rsp + 0x120]
test r12d, r12d
mov qword [rsp + 0x128], 0
mov byte [rsp + 0x130], 0
lea rax, [rbx + 0x10]
mov qword [rsp + 0x120], rax
jle 0x403e5a
xor r14d, r14d
mov r15, rax
jmp 0x402b15
nop dword [rax]
mov byte [rax + r14], 0x4f
mov rax, qword [rsp + 0x120]
mov qword [rsp + 0x128], rbp
mov byte [rax + rbp], 0
mov rax, qword [rsp + 0x120]
mov rbp, qword [rsp + 0x128]
cmp rax, r15
lea r14, [rbp + 1]
je 0x403b21
mov rdx, qword [rsp + 0x130]
cmp r14, rdx
ja 0x403730
mov byte [rax + rbp], 0x42
mov rax, qword [rsp + 0x120]
add r13d, 1
cmp r13d, r12d
mov qword [rsp + 0x128], r14
mov byte [rax + rbp + 1], 0
je 0x403d21
mov r14, qword [rsp + 0x128]
mov rax, qword [rsp + 0x120]
cmp rax, r15
lea rbp, [r14 + 1]
je 0x403b17
mov rdx, qword [rsp + 0x130]
cmp rbp, rdx
jbe 0x402a98
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r14
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x120]
jmp 0x402a98
nop dword [rax]
test r15d, r15d
je 0x402cbe
test r12d, r12d
jne 0x402cbe
test ebx, ebx
jne 0x402cc2
test ebp, ebp
setne dl
test r14d, r14d
mov eax, edx
jne 0x402cd0
test dl, dl
je 0x402cd0
cmp ebp, r15d
jne 0x402d98
lea rbx, [rsp + 0x120]
test ebp, ebp
mov qword [rsp + 0x128], 0
mov byte [rsp + 0x130], 0
lea rax, [rbx + 0x10]
mov qword [rsp + 0x120], rax
jle 0x403e5a
xor r14d, r14d
xor r13d, r13d
mov r15, rax
jmp 0x402c59
nop dword [rax]
mov byte [rax + r14], 0x56
mov rax, qword [rsp + 0x120]
mov qword [rsp + 0x128], r12
mov byte [rax + r12], 0
mov rax, qword [rsp + 0x120]
mov r12, qword [rsp + 0x128]
cmp rax, r15
lea r14, [r12 + 1]
je 0x403b3f
mov rdx, qword [rsp + 0x130]
cmp r14, rdx
ja 0x403780
mov byte [rax + r12], 0x59
mov rax, qword [rsp + 0x120]
add r13d, 1
cmp r13d, ebp
mov qword [rsp + 0x128], r14
mov byte [rax + r12 + 1], 0
je 0x403d21
mov r14, qword [rsp + 0x128]
mov rax, qword [rsp + 0x120]
cmp rax, r15
lea r12, [r14 + 1]
je 0x403b49
mov rdx, qword [rsp + 0x130]
cmp r12, rdx
jbe 0x402bd8
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r14
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x120]
jmp 0x402bd8
nop dword [rax]
mov eax, r12d
or eax, r15d
sete dl
test ebx, ebx
setne al
and eax, edx
test r14d, r14d
sete dl
test al, dl
jne 0x402d80
test ebx, ebx
je 0x402ccb
cmp r13d, ebx
jle 0x402d98
test ebp, ebp
setne al
cmp ebp, r15d
jl 0x402cdd
test al, al
jne 0x402d98
cmp r12d, r14d
jl 0x402ceb
test r12d, r12d
jne 0x402d98
mov edx, r15d
mov ecx, r14d
mov esi, r13d
lea rdi, [rsp + 0x40]
sub ecx, r12d
sub edx, ebp
sub esi, ebx
call sym.solve_abi:cxx11_
mov r15, qword [rsp + 0x48]
test r15d, r15d
mov ecx, r15d
jne 0x402e20
mov rsi, qword [rsp + 8]
lea rdx, [rsp + 0x50]
mov rax, rsi
add rax, 0x10
mov qword [rsi], rax
mov rax, qword [rsp + 0x40]
cmp rax, rdx
je 0x403525
mov rcx, qword [rsp + 8]
mov qword [rcx], rax
mov rax, qword [rsp + 0x50]
mov qword [rcx + 0x10], rax
mov rax, rcx
mov qword [rax + 8], r15
mov rsi, qword [rsp + 0x148]
xor rsi, qword fs:[0x28]
mov rax, qword [rsp + 8]
jne 0x403f3b
add rsp, 0x158
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
test ebp, ebp
jne 0x402cbe
cmp r13d, ebx
je 0x403630
nop dword [rax]
mov rsi, qword [rsp + 8]
mov rax, rsi
mov qword [rsi + 8], 0
mov byte [rsi + 0x10], 0
add rax, 0x10
mov qword [rsi], rax
jmp 0x402d50
nop dword [rax]
mov r15d, eax
xor ebx, ebx
jmp 0x4027f0
nop word [rax + rax]
mov r12d, eax
xor ebx, ebx
jmp 0x402740
nop word [rax + rax]
mov r13d, eax
xor ebx, ebx
jmp 0x402691
nop word [rax + rax]
mov r14d, eax
xor ebp, ebp
jmp 0x402940
nop word [rax + rax]
mov ebp, eax
mov dword [rsp], 0
jmp 0x4029fb
nop word cs:[rax + rax]
mov ebx, eax
xor ebp, ebp
jmp 0x40289e
nop dword [rax]
lea rax, [rsp + 0x70]
test ebx, ebx
mov byte [rsp + 0x70], 0x52
mov qword [rsp + 0x68], 1
mov byte [rsp + 0x71], 0
mov qword [rsp + 0x60], rax
jle 0x402f38
mov r15d, 1
xor r14d, r14d
mov qword [rsp], rax
jmp 0x402eba
nop dword [rax]
mov byte [rax + r15], 0x47
mov rax, qword [rsp + 0x60]
mov qword [rsp + 0x68], r13
mov byte [rax + r13], 0
mov rax, qword [rsp + 0x60]
cmp rax, qword [rsp]
mov r13, qword [rsp + 0x68]
lea r15, [r13 + 1]
je 0x402f20
mov rdx, qword [rsp + 0x70]
cmp r15, rdx
ja 0x402ef0
mov byte [rax + r13], 0x52
mov rax, qword [rsp + 0x60]
add r14d, 1
cmp r14d, ebx
mov qword [rsp + 0x68], r15
mov byte [rax + r13 + 1], 0
je 0x402f30
mov r15, qword [rsp + 0x68]
mov rax, qword [rsp + 0x60]
cmp rax, qword [rsp]
lea r13, [r15 + 1]
je 0x402f18
mov rdx, qword [rsp + 0x70]
cmp r13, rdx
jbe 0x402e58
lea rdi, [rsp + 0x60]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r15
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x60]
jmp 0x402e58
nop
lea rdi, [rsp + 0x60]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r13
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x60]
jmp 0x402e8e
nop dword [rax]
mov edx, 0xf
jmp 0x402ec9
nop
mov edx, 0xf
jmp 0x402e89
nop word [rax + rax]
mov r15, qword [rsp + 0x48]
mov ecx, r15d
test ecx, ecx
jle 0x402f71
mov r13, qword [rsp + 0x40]
cmp byte [r13], 0x52
je 0x403e38
mov eax, 1
jmp 0x402f6b
nop dword [rax + rax]
lea rdx, [rax + 1]
cmp byte [r13 + rdx - 1], 0x52
je 0x40333e
mov rax, rdx
cmp eax, ecx
mov ebx, eax
jl 0x402f58
lea rax, [rsp + 0x90]
test ebp, ebp
mov byte [rsp + 0x90], 0x59
mov qword [rsp + 0x88], 1
mov byte [rsp + 0x91], 0
mov qword [rsp + 0x80], rax
jle 0x4030c0
mov r15d, 1
xor r13d, r13d
mov r14, rax
jmp 0x403031
nop dword [rax + rax]
mov byte [rax + r15], 0x56
mov rax, qword [rsp + 0x80]
mov qword [rsp + 0x88], rbx
mov byte [rax + rbx], 0
mov rax, qword [rsp + 0x80]
mov rbx, qword [rsp + 0x88]
cmp rax, r14
lea r15, [rbx + 1]
je 0x4030a0
mov rdx, qword [rsp + 0x90]
cmp r15, rdx
ja 0x403078
mov byte [rax + rbx], 0x59
mov rax, qword [rsp + 0x80]
add r13d, 1
cmp r13d, ebp
mov qword [rsp + 0x88], r15
mov byte [rax + rbx + 1], 0
je 0x4030c0
mov r15, qword [rsp + 0x88]
mov rax, qword [rsp + 0x80]
cmp rax, r14
lea rbx, [r15 + 1]
je 0x4030b0
mov rdx, qword [rsp + 0x90]
cmp rbx, rdx
jbe 0x402fb8
lea rdi, [rsp + 0x80]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r15
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x80]
jmp 0x402fb8
nop word [rax + rax]
lea rdi, [rsp + 0x80]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x80]
jmp 0x402ffb
nop
mov edx, 0xf
jmp 0x402ff6
nop word [rax + rax]
mov edx, 0xf
jmp 0x403042
nop word [rax + rax]
mov r14, qword [rsp + 0x48]
test r14d, r14d
mov ecx, r14d
jle 0x403100
mov rbp, qword [rsp + 0x40]
cmp byte [rbp], 0x59
je 0x403e17
mov eax, 1
jmp 0x4030fa
nop dword [rax + rax]
lea rdx, [rax + 1]
cmp byte [rbp + rdx - 1], 0x59
je 0x4033e1
mov rax, rdx
cmp eax, ecx
mov ebx, eax
jl 0x4030e8
lea rax, [rsp + 0xb0]
test r12d, r12d
mov byte [rsp + 0xb0], 0x42
mov qword [rsp + 0xa8], 1
mov byte [rsp + 0xb1], 0
mov qword [rsp + 0xa0], rax
jle 0x403250
mov r14d, 1
xor ebp, ebp
mov r13, rax
jmp 0x4031c0
nop word [rax + rax]
mov byte [rax + r14], 0x4f
mov rax, qword [rsp + 0xa0]
mov qword [rsp + 0xa8], rbx
mov byte [rax + rbx], 0
mov rax, qword [rsp + 0xa0]
mov rbx, qword [rsp + 0xa8]
cmp rax, r13
lea r14, [rbx + 1]
je 0x403240
mov rdx, qword [rsp + 0xb0]
cmp r14, rdx
ja 0x403208
mov byte [rax + rbx], 0x42
mov rax, qword [rsp + 0xa0]
add ebp, 1
cmp r12d, ebp
mov qword [rsp + 0xa8], r14
mov byte [rax + rbx + 1], 0
je 0x403250
mov r14, qword [rsp + 0xa8]
mov rax, qword [rsp + 0xa0]
cmp rax, r13
lea rbx, [r14 + 1]
je 0x403230
mov rdx, qword [rsp + 0xb0]
cmp rbx, rdx
jbe 0x403148
lea rdi, [rsp + 0xa0]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0xa0]
jmp 0x403148
nop dword [rax]
lea rdi, [rsp + 0xa0]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0xa0]
jmp 0x40318b
nop
mov edx, 0xf
jmp 0x4031d1
nop word [rax + rax]
mov edx, 0xf
jmp 0x403186
nop word [rax + rax]
mov rbx, qword [rsp + 0x48]
mov rbp, qword [rsp + 0x40]
test ebx, ebx
mov ecx, ebx
jle 0x403291
cmp byte [rbp], 0x42
je 0x403df6
mov eax, 1
jmp 0x40328a
nop dword [rax]
lea rdx, [rax + 1]
cmp byte [rbp + rdx - 1], 0x42
je 0x403483
mov rax, rdx
cmp eax, ecx
mov r12d, eax
jl 0x403278
mov rsi, qword [rsp + 8]
mov rax, rsi
add rax, 0x10
mov qword [rsi], rax
lea rax, [rsp + 0x50]
cmp rbp, rax
je 0x403c34
mov rax, qword [rsp + 0x50]
mov qword [rsi], rbp
mov qword [rsi + 0x10], rax
mov rax, rsi
mov qword [rax + 8], rbx
lea rax, [rsp + 0x50]
mov rdi, qword [rsp + 0xa0]
mov qword [rsp + 0x48], 0
mov byte [rsp + 0x50], 0
mov qword [rsp + 0x40], rax
lea rax, [rsp + 0xb0]
cmp rdi, rax
je 0x4032f3
call sym.operatordelete
mov rdi, qword [rsp + 0x80]
lea rax, [rsp + 0x90]
cmp rdi, rax
je 0x40330d
call sym.operatordelete
mov rdi, qword [rsp + 0x60]
lea rax, [rsp + 0x70]
cmp rdi, rax
je 0x403321
call sym.operatordelete
mov rdi, qword [rsp + 0x40]
lea rax, [rsp + 0x50]
cmp rdi, rax
je 0x402d50
call sym.operatordelete
jmp 0x402d50
lea r14, [rsp + 0xe0]
cmp rax, r15
cmovbe r15, rax
lea rdx, [r14 + 0x10]
cmp r15, 0xf
mov qword [rsp + 0x10], r15
mov qword [rsp + 0xe0], rdx
ja 0x403b53
lea r8d, [rbx + 1]
cmp r15, 1
movsxd r8, r8d
je 0x403544
test r15, r15
mov rax, rdx
jne 0x403b7e
mov qword [rsp + 0xe8], r15
mov byte [rax + r15], 0
mov rcx, qword [rsp + 0x48]
cmp rcx, r8
jb 0x403f6d
lea r15, [rsp + 0x100]
mov r13, r8
add r13, qword [rsp + 0x40]
sub rcx, r8
lea rax, [r15 + 0x10]
mov rbx, rcx
mov qword [rsp + 0x100], rax
mov rax, r13
add rax, rcx
je 0x4039f4
test r13, r13
jne 0x4039f4
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
lea r13, [rsp + 0xc0]
cmp rax, r14
cmovbe r14, rax
lea rdx, [r13 + 0x10]
cmp r14, 0xf
mov qword [rsp + 0x20], r14
mov qword [rsp + 0xc0], rdx
ja 0x403bea
add ebx, 1
cmp r14, 1
movsxd rbx, ebx
je 0x40356b
test r14, r14
mov rax, rdx
jne 0x403c14
mov qword [rsp + 0xc8], r14
mov byte [rax + r14], 0
mov rcx, qword [rsp + 0x48]
cmp rcx, rbx
jb 0x403e86
mov rbp, rbx
lea r15, [rsp + 0x100]
add rbp, qword [rsp + 0x40]
sub rcx, rbx
lea rax, [r15 + 0x10]
mov rbx, rcx
mov qword [rsp + 0x100], rax
mov rax, rbp
add rax, rcx
je 0x4038ce
test rbp, rbp
jne 0x4038ce
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
lea r13, [rsp + 0xc0]
cmp rax, rbx
cmovbe rbx, rax
lea rdx, [r13 + 0x10]
cmp rbx, 0xf
mov qword [rsp + 0x30], rbx
mov qword [rsp + 0xc0], rdx
ja 0x403c92
add r12d, 1
cmp rbx, 1
movsxd r12, r12d
je 0x403558
test rbx, rbx
mov rax, rdx
jne 0x403cbd
mov qword [rsp + 0xc8], rbx
mov byte [rax + rbx], 0
mov rcx, qword [rsp + 0x48]
cmp rcx, r12
jb 0x403f27
lea r14, [rsp + 0xe0]
mov rbp, r12
add rbp, qword [rsp + 0x40]
sub rcx, r12
lea rax, [r14 + 0x10]
mov rbx, rcx
mov qword [rsp + 0xe0], rax
mov rax, rbp
add rax, rcx
je 0x4037a2
test rbp, rbp
jne 0x4037a2
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
mov rsi, qword [rsp + 8]
mov rax, qword [rsp + 0x50]
mov rdx, qword [rsp + 0x58]
mov qword [rsi + 0x10], rax
mov rax, rsi
mov qword [rsi + 0x18], rdx
jmp 0x402d4c
movzx eax, byte [r13]
mov byte [rsp + 0xf0], al
mov rax, rdx
jmp 0x403385
movzx eax, byte [rbp]
mov byte [rsp + 0xd0], al
mov rax, rdx
jmp 0x4034ca
movzx eax, byte [rbp]
mov byte [rsp + 0xd0], al
mov rax, rdx
jmp 0x403427
mov rbx, rax
mov rdi, qword [rsp + 0xc0]
add r13, 0x10
cmp rdi, r13
je 0x403597
call sym.operatordelete
mov rdi, qword [rsp + 0xa0]
lea rax, [rsp + 0xb0]
cmp rdi, rax
je 0x4035b1
call sym.operatordelete
mov rdi, qword [rsp + 0x80]
lea rax, [rsp + 0x90]
cmp rdi, rax
je 0x4035cb
call sym.operatordelete
mov rdi, qword [rsp + 0x60]
lea rax, [rsp + 0x70]
cmp rdi, rax
je 0x4035df
call sym.operatordelete
mov rdi, qword [rsp + 0x40]
lea rax, [rsp + 0x50]
cmp rdi, rax
je 0x4035f3
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rbx, rax
mov rdi, qword [rsp + 0xc0]
add r13, 0x10
cmp rdi, r13
jne 0x4035ac
jmp 0x4035b1
mov rbx, rax
mov rdi, qword [rsp + 0xe0]
add r14, 0x10
cmp rdi, r14
jne 0x4035c6
jmp 0x4035cb
nop word [rax + rax]
lea rbx, [rsp + 0x120]
test r13d, r13d
mov qword [rsp + 0x128], 0
mov byte [rsp + 0x130], 0
lea rax, [rbx + 0x10]
mov qword [rsp + 0x120], rax
jle 0x403e5a
xor r14d, r14d
xor r12d, r12d
mov r15, rax
jmp 0x4036ed
nop
mov byte [rax + r14], 0x47
mov rax, qword [rsp + 0x120]
mov qword [rsp + 0x128], rbp
mov byte [rax + rbp], 0
mov rax, qword [rsp + 0x120]
mov rbp, qword [rsp + 0x128]
cmp rax, r15
lea r14, [rbp + 1]
je 0x403b35
mov rdx, qword [rsp + 0x130]
cmp r14, rdx
ja 0x403758
mov byte [rax + rbp], 0x52
mov rax, qword [rsp + 0x120]
add r12d, 1
cmp r12d, r13d
mov qword [rsp + 0x128], r14
mov byte [rax + rbp + 1], 0
je 0x403d21
mov r14, qword [rsp + 0x128]
mov rax, qword [rsp + 0x120]
cmp rax, r15
lea rbp, [r14 + 1]
je 0x403b2b
mov rdx, qword [rsp + 0x130]
cmp rbp, rdx
jbe 0x403670
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r14
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x120]
jmp 0x403670
nop dword [rax]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x120]
jmp 0x402adf
nop word [rax + rax]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x120]
jmp 0x4036b7
nop word [rax + rax]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x120]
jmp 0x402c21
cmp rbx, 0xf
mov qword [rsp + 0x38], rbx
ja 0x403c4e
cmp rbx, 1
je 0x403d62
test rbx, rbx
lea rax, [r14 + 0x10]
jne 0x403c72
lea r15, [rsp + 0x100]
lea rdx, [rsp + 0xa0]
mov qword [rsp + 0xe8], rbx
mov rsi, r13
mov byte [rax + rbx], 0
mov rdi, r15
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
mov rdx, qword [rsp + 0xe8]
mov rsi, qword [rsp + 0xe0]
mov rdi, r15
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
lea rbx, [rsp + 0x120]
lea rdx, [rbx + 0x10]
mov qword [rsp + 0x120], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x403dbc
mov qword [rsp + 0x120], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x130], rcx
mov rcx, qword [rax + 8]
lea rdi, [rsp + 0x40]
mov rsi, rbx
add rbx, 0x10
mov qword [rsp + 0x128], rcx
mov qword [rax], rdx
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x120]
cmp rdi, rbx
je 0x40387d
call sym.operatordelete
mov rdi, qword [rsp + 0x100]
add r15, 0x10
cmp rdi, r15
je 0x403893
call sym.operatordelete
mov rdi, qword [rsp + 0xe0]
add r14, 0x10
cmp rdi, r14
je 0x4038a9
call sym.operatordelete
mov rdi, qword [rsp + 0xc0]
add r13, 0x10
cmp rdi, r13
je 0x4038bf
call sym.operatordelete
mov rbp, qword [rsp + 0x40]
mov rbx, qword [rsp + 0x48]
jmp 0x403291
cmp rbx, 0xf
mov qword [rsp + 0x28], rbx
ja 0x403ba6
cmp rbx, 1
je 0x403d8b
test rbx, rbx
lea rax, [r15 + 0x10]
jne 0x403bca
lea r14, [rsp + 0xe0]
lea rdx, [rsp + 0x80]
mov qword [rsp + 0x108], rbx
mov rsi, r13
mov byte [rax + rbx], 0
mov rdi, r14
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
mov rdx, qword [rsp + 0x108]
mov rsi, qword [rsp + 0x100]
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
lea rbx, [rsp + 0x120]
lea rdx, [rbx + 0x10]
mov qword [rsp + 0x120], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x403d9f
mov qword [rsp + 0x120], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x130], rcx
mov rcx, qword [rax + 8]
lea rdi, [rsp + 0x40]
mov rsi, rbx
add rbx, 0x10
mov qword [rsp + 0x128], rcx
mov qword [rax], rdx
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x120]
cmp rdi, rbx
je 0x4039a9
call sym.operatordelete
mov rdi, qword [rsp + 0xe0]
add r14, 0x10
cmp rdi, r14
je 0x4039bf
call sym.operatordelete
mov rdi, qword [rsp + 0x100]
add r15, 0x10
cmp rdi, r15
je 0x4039d5
call sym.operatordelete
mov rdi, qword [rsp + 0xc0]
add r13, 0x10
cmp rdi, r13
je 0x403100
call sym.operatordelete
jmp 0x403100
cmp rbx, 0xf
mov qword [rsp + 0x18], rbx
ja 0x403cdd
cmp rbx, 1
je 0x403d76
test rbx, rbx
lea rax, [r15 + 0x10]
jne 0x403d01
lea r13, [rsp + 0xc0]
lea rdx, [rsp + 0x60]
mov qword [rsp + 0x108], rbx
mov rsi, r14
mov byte [rax + rbx], 0
mov rdi, r13
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
mov rdx, qword [rsp + 0x108]
mov rsi, qword [rsp + 0x100]
mov rdi, r13
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
lea rbx, [rsp + 0x120]
lea rdx, [rbx + 0x10]
mov qword [rsp + 0x120], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x403dd9
mov qword [rsp + 0x120], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x130], rcx
mov rcx, qword [rax + 8]
lea rdi, [rsp + 0x40]
mov rsi, rbx
add rbx, 0x10
mov qword [rsp + 0x128], rcx
mov qword [rax], rdx
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x120]
cmp rdi, rbx
je 0x403acc
call sym.operatordelete
mov rdi, qword [rsp + 0xc0]
add r13, 0x10
cmp rdi, r13
je 0x403ae2
call sym.operatordelete
mov rdi, qword [rsp + 0x100]
add r15, 0x10
cmp rdi, r15
je 0x403af8
call sym.operatordelete
mov rdi, qword [rsp + 0xe0]
add r14, 0x10
cmp rdi, r14
je 0x402f71
call sym.operatordelete
jmp 0x402f71
mov edx, 0xf
jmp 0x402b2a
mov edx, 0xf
jmp 0x402ad6
mov edx, 0xf
jmp 0x403702
mov edx, 0xf
jmp 0x4036ae
mov edx, 0xf
jmp 0x402c18
mov edx, 0xf
jmp 0x402c6e
lea rsi, [rsp + 0x10]
xor edx, edx
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdx, qword [rsp + 0x10]
lea r8d, [rbx + 1]
mov qword [rsp + 0xe0], rax
movsxd r8, r8d
mov qword [rsp + 0xf0], rdx
mov rdx, r15
mov rsi, r13
mov rdi, rax
mov qword [rsp], r8
call sym.imp.memcpy
mov rax, qword [rsp + 0xe0]
mov r15, qword [rsp + 0x10]
mov r8, qword [rsp]
jmp 0x403385
lea rsi, [rsp + 0x28]
xor edx, edx
mov rdi, r15
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdx, qword [rsp + 0x28]
mov qword [rsp + 0x100], rax
mov qword [rsp + 0x110], rdx
mov rdx, rbx
mov rsi, rbp
mov rdi, rax
call sym.imp.memcpy
mov rbx, qword [rsp + 0x28]
mov rax, qword [rsp + 0x100]
jmp 0x4038f4
lea rsi, [rsp + 0x20]
xor edx, edx
mov rdi, r13
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdx, qword [rsp + 0x20]
add ebx, 1
mov qword [rsp + 0xc0], rax
movsxd rbx, ebx
mov qword [rsp + 0xd0], rdx
mov rdx, r14
mov rsi, rbp
mov rdi, rax
call sym.imp.memcpy
mov rax, qword [rsp + 0xc0]
mov r14, qword [rsp + 0x20]
jmp 0x403427
mov rax, qword [rsp + 0x50]
mov rdx, qword [rsp + 0x58]
mov qword [rsi + 0x10], rax
mov qword [rsi + 0x18], rdx
mov rax, rsi
jmp 0x4032bd
lea rsi, [rsp + 0x38]
xor edx, edx
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdx, qword [rsp + 0x38]
mov qword [rsp + 0xe0], rax
mov qword [rsp + 0xf0], rdx
mov rdx, rbx
mov rsi, rbp
mov rdi, rax
call sym.imp.memcpy
mov rbx, qword [rsp + 0x38]
mov rax, qword [rsp + 0xe0]
jmp 0x4037c8
lea rsi, [rsp + 0x30]
xor edx, edx
mov rdi, r13
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdx, qword [rsp + 0x30]
add r12d, 1
mov qword [rsp + 0xc0], rax
movsxd r12, r12d
mov qword [rsp + 0xd0], rdx
mov rdx, rbx
mov rsi, rbp
mov rdi, rax
call sym.imp.memcpy
mov rax, qword [rsp + 0xc0]
mov rbx, qword [rsp + 0x30]
jmp 0x4034ca
lea rsi, [rsp + 0x18]
xor edx, edx
mov rdi, r15
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdx, qword [rsp + 0x18]
mov qword [rsp + 0x100], rax
mov qword [rsp + 0x110], rdx
mov rdx, rbx
mov rsi, r13
mov rdi, rax
call sym.imp.memcpy
mov rbx, qword [rsp + 0x18]
mov rax, qword [rsp + 0x100]
jmp 0x403a1a
mov rsi, qword [rsp + 8]
mov rax, qword [rsp + 0x120]
add rbx, 0x10
lea rdx, [rsi + 0x10]
cmp rax, rbx
mov qword [rsi], rdx
je 0x403e69
mov qword [rsi], rax
mov rax, qword [rsp + 0x130]
mov qword [rsi + 0x10], rax
mov rax, qword [rsp + 0x128]
mov qword [rsi + 8], rax
jmp 0x402d50
movzx eax, byte [rbp]
mov byte [rsp + 0xf0], al
lea rax, [r14 + 0x10]
jmp 0x4037c8
movzx eax, byte [r13]
mov byte [rsp + 0x110], al
lea rax, [r15 + 0x10]
jmp 0x403a1a
movzx eax, byte [rbp]
mov byte [rsp + 0x110], al
lea rax, [r15 + 0x10]
jmp 0x4038f4
mov rsi, qword [rax + 0x10]
mov rdi, qword [rax + 0x18]
mov qword [rsp + 0x130], rsi
mov qword [rsp + 0x138], rdi
jmp 0x40396b
mov rsi, qword [rax + 0x10]
mov rdi, qword [rax + 0x18]
mov qword [rsp + 0x130], rsi
mov qword [rsp + 0x138], rdi
jmp 0x40383f
mov rsi, qword [rax + 0x10]
mov rdi, qword [rax + 0x18]
mov qword [rsp + 0x130], rsi
mov qword [rsp + 0x138], rdi
jmp 0x403a8e
lea r13, [rsp + 0xc0]
xor ebx, ebx
mov r12d, 1
lea rax, [r13 + 0x10]
mov qword [rsp + 0xc0], rax
jmp 0x4034ca
lea r13, [rsp + 0xc0]
xor r14d, r14d
mov ebx, 1
lea rax, [r13 + 0x10]
mov qword [rsp + 0xc0], rax
jmp 0x403427
lea r14, [rsp + 0xe0]
xor r15d, r15d
mov r8d, 1
lea rax, [r14 + 0x10]
mov qword [rsp + 0xe0], rax
jmp 0x403385
mov rsi, qword [rsp + 8]
mov rax, rsi
add rax, 0x10
mov qword [rsi], rax
mov rax, qword [rsp + 0x130]
mov rdx, qword [rsp + 0x138]
mov qword [rsi + 0x10], rax
mov qword [rsi + 0x18], rdx
jmp 0x403d51
mov rdx, rbx
mov esi, str.basic_string::substr
mov edi, str._s:___pos__which_is__zu____this__size____which_is__zu_
xor eax, eax
call sym.std::__throw_out_of_range_fmt
mov rbx, rax
jmp 0x4035b1
mov rbx, rax
jmp 0x4035cb
mov rdi, qword [rsp + 0xc0]
add r13, 0x10
mov rbx, rax
cmp rdi, r13
je 0x403ec3
call sym.operatordelete
mov rdi, qword [rsp + 0x100]
add r15, 0x10
cmp rdi, r15
je 0x403614
call sym.operatordelete
jmp 0x403614
mov rbx, rax
jmp 0x403597
mov rdi, qword [rsp + 0x100]
add r15, 0x10
mov rbx, rax
cmp rdi, r15
je 0x403f03
call sym.operatordelete
mov rdi, qword [rsp + 0xe0]
add r14, 0x10
cmp rdi, r14
je 0x403581
call sym.operatordelete
jmp 0x403581
mov rbx, rax
jmp 0x403f03
mov rdx, r12
mov esi, str.basic_string::substr
mov edi, str._s:___pos__which_is__zu____this__size____which_is__zu_
xor eax, eax
call sym.std::__throw_out_of_range_fmt
call sym.imp.__stack_chk_fail
mov rdi, qword [rsp + 0x120]
add rbx, 0x10
mov rbp, rax
cmp rdi, rbx
je 0x403f59
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
jmp 0x403f40
jmp 0x403f40
mov rbx, rax
jmp 0x403ec3
mov rdx, r8
mov esi, str.basic_string::substr
mov edi, str._s:___pos__which_is__zu____this__size____which_is__zu_
xor eax, eax
call sym.std::__throw_out_of_range_fmt
mov rdi, qword [rsp + 0xe0]
add r14, 0x10
mov rbx, rax
cmp rdi, r14
je 0x403f9a
call sym.operatordelete
mov rdi, qword [rsp + 0x100]
add r15, 0x10
cmp rdi, r15
je 0x4035fe
call sym.operatordelete
jmp 0x4035fe
mov rbx, rax
jmp 0x403f9a
nop
push r14
lea r14, [rdi + 0x10]
push r13
push r12
push rbp
mov r13, rdx
push rbx
mov rbp, rdi
sub rsp, 0x10
mov qword [rdi], r14
mov r12, qword [rsi]
mov rbx, qword [rsi + 8]
mov rax, qword fs:[0x28]
mov qword [rsp + 8], rax
xor eax, eax
mov rax, r12
add rax, rbx
je 0x404010
test r12, r12
jne 0x404010
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
nop word [rax + rax]
cmp rbx, 0xf
mov qword [rsp], rbx
ja 0x404070
cmp rbx, 1
je 0x4040a8
test rbx, rbx
mov rax, r14
jne 0x4040c0
mov qword [rbp + 8], rbx
mov byte [rax + rbx], 0
mov rdi, rbp
mov rdx, qword [r13 + 8]
mov rsi, qword [r13]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rcx, qword [rsp + 8]
xor rcx, qword fs:[0x28]
mov rax, rbp
jne 0x4040c5
add rsp, 0x10
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax + rax]
mov rdi, rbp
xor edx, edx
mov rsi, rsp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rbp], rax
mov rax, qword [rsp]
mov qword [rbp + 0x10], rax
mov rdx, rbx
mov rsi, r12
call sym.imp.memcpy
mov rbx, qword [rsp]
mov rax, qword [rbp]
jmp 0x404030
nop dword [rax]
movzx eax, byte [r12]
mov byte [rbp + 0x10], al
mov rax, r14
jmp 0x404030
nop dword [rax + rax]
mov rdi, r14
jmp 0x40408c
call sym.imp.__stack_chk_fail
mov rbx, rax
mov rdi, qword [rbp]
cmp rdi, r14
je 0x4040db
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x200ce6]
push rbp
lea rbp, [rip + 0x200cee]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x404146
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x404130
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
jae 0x4041e1
movsxd rbx, dword [rdi + 0x73]
je 0x4041ef
imul ebp, dword [rsi + 0x67], 0x75733a3a
jae 0x4041fb
jb str.Case___d:
jae 0x4041f2
and byte [rbx], ah
and eax, 0x203a64
push r8
push r11
push rbx
add byte [rip + 0xa73], r12b
add byte [rax], al
add byte [rax], al
jae 0x404215
movsxd rbx, dword [rdi + 0x73]
je 0x404223
imul ebp, dword [rsi + 0x67], 0x4d5f3a3a
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x404232
jb 0x404235
movsxd rsi, dword [rax + 0x6e]
jne 0x404232
insb byte [rdi], dx
and byte [rsi + 0x6f], ch
je 0x4041ec
jbe 0x40422f
insb byte [rdi], dx
imul esp, dword [rax + rax], 0
add byte [rip + 0x5f203a73], ah
and eax, 0x5f203a73
pop rdi
jo 0x40424f
jae 0x404202
sub byte [rdi + 0x68], dh
imul esp, dword [rbx + 0x68], 0x20736920
and eax, 0x2029757a
and byte ds:[rax + rbp*2 + 0x69], dh
jae 0x404225
jae 0x404264
jp 0x404262
sub byte [rcx], ch
and byte [rax], ch
ja 0x40426b
imul esp, dword [rbx + 0x68], 0x20736920
and eax, 0x29757a
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add al, dh
retf -1
lock add byte [rax], al
add byte [rax - 0x34], ah
dec dword [rax + 4]
add byte [rax], al
push rax
int 0xff
js 0x404236
add byte [rax], al
or ch, 0xff
inc eax
add byte [rax], al
add byte [rax + 0x18ffffce], al
add dword [rax], eax
add byte [rax - 0x31], al
dec dword [rax + 1]
add byte [rax], al
and al, dl
js 0x404253
add byte [rax], al
add cl, dl
push qword [rax - 0x7fffffff]
sar bh, cl
inc dword [rax]
add al, byte [rax]
add byte [rax + 0x50ffffd8], dl
add al, byte [rax]
add byte [rax], al
dec dword [rax + 0x60000002]
ljmp [rax - 0xffffffe]
jmp rax
add al, byte [rax]
add byte [rax + 0x18ffffdb], dl
add eax, dword [rax]
add al, ah
call qword [rax + 3]
add byte [rax], al
push rax
jrcxz 0x404296
push rax
add eax, dword [rax]
add byte [rax - 0x57000003], dh
add eax, dword [rax]
add al, ah
call qword [rax + 0x50000004]
fadd dword [rax + rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4042d7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov eax, 0x2affffcc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x404307
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
clc
leave
jmp qword [rax + 1]
add byte [rax], al
add byte [rsi], cl
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rax - 0x33], ah
push qword [rsi]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x47
and byte [rdx], al
movabs eax, dword [0xe41100e41180e0a]
or byte [rbx + rcx], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
je 0x40435e
add byte [rax], al
int 0xff
fiadd dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x47
and byte [rdx], al
mov ebx, 0x41180e0a
adc byte [rcx + 0xe], al
or byte [rdx + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rax - 0x2a000032], ah
add byte [rax], al
add byte [rax], al
adc byte [rbp + 0x180e4202], cl
mov word [rbx], es
and byte [rsi + 0x280e4104], al
add dword [rip + 0x2300e51], -0x4c
sub byte [rsi + rcx + 0x20], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax + rax], cl
add ah, bl
add byte [rax], al
add byte [rax - 0x31], cl
jge 0x4043cf
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx + 0x400e5107], al
add ecx, dword [rbp + 1]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx + rax], ch
add byte [rax], al
js 0x4043ea
dec dword [rdi]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rbp + 0x180e4202], cl
mov word [rbx], es
and byte [rsi + 0x280e4104], al
add dword [rip + 0x3500e46], 0x63
add al, 0xa
sub byte [rcx + 0xe], al
and byte [rcx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add cl, byte [rax + 0xa]
sub byte [rbp + 0xe], al
and byte [rcx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rsi + 0xb], cl
add byte [rax + rax], dh
add byte [rax], al
jl 0x404467
add byte [rax], al
cmp dh, dl
jmp qword [rbp + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x46
add cl, dil
or cl, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rdi + 0xb], al
add dh, byte [rsi + 0xa]
sbb byte [rsi + rcx + 0x10], al
or byte [rbp + 0xb], al
sbb al, 0
add byte [rax], al
mov ah, 1
add byte [rax], al
jo 0x404479
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], cl
adc byte [rbx - 0x3cb7fdfe], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add dword [rax], eax
add byte [rax - 0x79000029], dh
add byte [rax], al
add byte [rax], al
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rbx + 0xe]
and byte [rbx + 0xa6f0204], al
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
sbb byte [rbp + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
or al, 2
add byte [rax], al
or al, bl
call qword [rdx]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x4a
and byte [rdx], al
je 0x40451b
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rcx + 0xb], al
sbb byte [rbp + 0xe], al
adc byte [rcx + 0xe], al
or byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add r8b, byte [rax]
add byte [rax - 0x28], dh
dec dword [rbp]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x404561
add esi, dword [rax]
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x54000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov al, bl
jmp qword [rbx + 7]
add byte [rax], al
add al, 4
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x4ff1bbf9], al
add dword [rbx], eax
outsd dx, dword [rsi]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax + rax], bh
add byte [rax], al
cli
jmp qword [rbx]
add dword [rax], eax
add byte [rcx], al
add byte [rdx + 0xe], al
adc byte [rsi + 0x180e4602], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e44
add cl, byte [rcx + 0x41300e0a]
sub byte [rcx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], cl
add byte [rax + rax], dl
add ah, al
add byte [rax], al
add byte [rax - 0x21], bl
lcall [rsi + 0x1a]
add byte [rax], al
add al, 0x34
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x6ff1b8f9], al
add eax, dword [rbx]
add cl, byte [rax]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
sbb al, 1
add byte [rax], al
adc al, cl
out dx, eax
add byte [rax], al
add byte [rdi + rbp*8], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x44
add al, dl
or cl, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax + rax], dl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add al, dl
enter -1, 0x26
add byte [rax], al
add byte [rax], al
adc byte [rbp + 0xe], bl
or byte [rax], al
add byte [rax], r8b
add byte [rbx + rax - 0x5b80000], bh
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x4046e2
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
add al, 4
add byte [rax], al
jo 0x4046ec
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
sbb dword [rdx + 0xe9d0501], ebp
add cl, bh
add dh, byte [rdx + rax - 0x19fff12c]
xchg dword [rip - 0x48fff144], eax
add eax, 0xffff0000
add dword [rdi], ecx
add eax, 0x1830000
add eax, 0xb800028a
add dword [rbx], ebp
add bh, bh
inc dword [rcx]
mov dh, 1
or byte [rax], al
add bl, ah
or eax, dword [rip - 0x58ffcb7d]
add eax, 0xa0003481
syscall
add byte [rax], al
adc byte [rbx], 0x27
ret 0x32
adc byte [rsi], 0x32
mov edx, 0x198f0032
xor eax, dword [rdx + 0x1cfc0033]
add eax, 0x9e0021b1
add eax, 0xc000219b
add eax, 0x9600209e
and dword [rip + 0x23bb0000], eax
add eax, 0xe00033e0
and eax, dword [rip - 0x77ffcb7d]
and al, 5
loopne 0x4047bc
add byte [rax + 0x34810524], dh
add byte [rdx + 0x33c20525], cl
add byte [rdx + 0x338a0525], ah
add byte [rsi + 0x34d90527], dh
add dh, cl
add eax, 0xd90034a1
sub dword [rip - 0xeffcb7b], eax
sub dword [rip - 0x2ffcd36], eax
sub eax, dword [rip - 0x2fffcd3e]
sub al, 5
wait
and dword [rax], eax
xchg eax, esp
sub eax, 0x32ba05
clc
sub eax, 0x209e05
mov esp, 0x3382052e
add byte [rdi + 0x21b1052f], al
add byte [rbp + 0x219b0532], dh
add dh, dl
xor eax, dword [rip - 0x3ffdf62]
xor eax, dword [rip + 0x349c0000]
add eax, 0xff0021b1
inc dword [rcx]
sbb esp, dword [rdi]
add byte [rax], al
push rcx
retf
add dword [rax], eax
in eax, 1
add eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0xf], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [r8]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x404e4e
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rcx + rax*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 0x4005], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax + rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400a], ah
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add al, ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx + 0x4009], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
push rsi
or eax, 0x40
add byte [rax], al
or ax, 0x40
add byte [rax], al
add byte [rax], al
jbe 0x405057
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400d], al
add byte [rax], al
add byte [rsi + 0x400d], dl
add byte [rax], al
add byte [rsi + 0x400d], ah
add byte [rax], al
add byte [rsi + 0x400d], dh
add byte [rax], al
add dh, al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
out 0xd, al
add byte [rax], al
add byte [rax], al
add dh, dh
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xe], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x405148
je 0x405151
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40515f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40515c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 0x4005], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rdx + 0x4009], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add al, ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or dword [rax], eax
movabs al, byte [0x400a]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, ch
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
loopne 0x405226
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
add byte [rip + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x400e6000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0xe], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rcx + rax*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x41], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x4042], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rdi + rax*2], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40b342
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x604df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add al, al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x10], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add al, ah
push rax
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x604df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x10], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40b4da
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2000000], ch
add byte [rsi], cl
add byte [rax + 0xf], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add cl, ah
push rax
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
add byte [rcx], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], al
add byte [rcx], bl
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], ch
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x40b5e2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add al, 0
add byte [rax], ah
add byte [rdx], bl
add al, al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x25], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1a], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x41], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000004], bh
add byte [rsi], cl
add byte [rax + 0x400f], dl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x20000001], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000001], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 2], al
add byte [rax], al
and al, byte [rax]
add al, al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], ah
add byte [rax], al
adc al, byte [rax]
verr word [rcx + rax*2 + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000002], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000002], dh
add byte [rsi], cl
add byte [rax + 0x4014], dl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x12000002
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000003], cl
add byte [rsi], cl
add byte [rax + 0x401a], ah
add byte [rax], al
add byte [rbp + 1], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rbx], eax
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x405785
add byte [rax], al
adc al, byte [rax]
add byte [rax], dl
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
jge 0x405793
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 3
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
movabs al, byte [0x400d]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
add eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x401d], ah
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 3
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], dl
add byte [rax], dl
add byte [rax + 0x41], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], al
sbb eax, 0x40
add byte [rax], al
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x20000004], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add al, 0
add byte [rax], dl
add byte [rdx], bl
add al, al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000004], bl
add byte [rsi], cl
add byte [rax], dl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
add al, 0
add byte [rcx], dl
add byte [rbx], bl
add al, dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x11000004], bh
add bl, byte [rdx]
add al, dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add al, 0
add byte [rcx], dl
add bl, byte [rdx]
add al, cl
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add al, 0
add byte [rdx], dl
add byte [rsi], cl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x4058d6
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, dword [rip + 0x120000]
add byte [rax + 0x11], dl
add byte [rax], al
add byte [rax], al
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add eax, 0x120000
add byte [rax + 0x1c], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax + 0x10000005], al
add byte [rbx], bl
add al, dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rax + 0x120000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 5
add byte [rax], al
adc al, byte [rax]
add byte [rax], dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rax + 0x120000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rip + 0x120000], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 6], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add al, ch
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12000000], bh
add byte [rsi], cl
add byte [rax + 0x4010], dl
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rsi + 0x12000006], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
rcl byte [rax + 0x60], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
xor byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000007], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000007], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], cl
add byte [rax], al
adc al, byte [rax]
add al, dh
sbb eax, 0x40
add byte [rax], al
movsxd rax, dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
fcom dword [rax + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 7], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0xe], dh
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
add al, 0
add byte [rdx], dl
add byte [rbx], cl
add al, ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x405b42
jne 0x405b36
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x405af6
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x405b74
jb 0x405b7a
pop rdi
jne 0x405b83
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x405b7d
je 0x405b79
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x405b99
jb 0x405b9f
pop rdi
jne 0x405ba8
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x405bab
jns 0x405b9b
outsb dx, byte gs:[rsi]
je 0x405bb2
jns 0x405b42
jb 0x405ba6
insd dword [rdi], dx
pop rdi
jne 0x405bb8
insd dword [rdi], dx
jns 0x405b4e
pop rdi
pop rdi
jb 0x405bb4
insd dword [rdi], dx
pop rdi
jne 0x405bc6
insd dword [rdi], dx
jns 0x405bbb
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405bc6
jns 0x405bc6
outsb dx, byte gs:[rsi]
je 0x405bdd
jns 0x405b6d
insd dword [rdi], dx
imul ebp, dword [rsi + 0x2e], 0x707063
pop rdi
pop rdi
pop rdi
jae 0x405bf6
pop rdi
pop r15
pop rdi
pop rdx
jb 0x405bef
jb 0x405be1
imul eax, dword [rax], 0x74535a5f
cmp byte [rdi + 0x5f], r11b
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405c4f
jns 0x405c4f
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405c60
jns 0x405c60
jae 0x405c77
jb 0x405c7a
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x405c68
xor al, 0x5f
pop rdi
je 0x405ca3
jb 0x405cac
ja 0x405c9e
outsd dx, dword [rsi]
jne 0x405cb6
pop rdi
outsd dx, dword [rsi]
pop di
jb 0x405ca9
outsb dx, byte [rsi]
pop rdi
insw word [rdi], dx
je 0x405ca0
movsxd rdi, dword [r10 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rax]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x405ce1
jb 0x405ce4
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x405cd6
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x405cf7
jae 0x405c87
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x405cce
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jo 0x405d11
imul ebp, dword [rsi + 0x74], 0x68635f66
imul eax, dword [rax + 0x40], 0x47
pop r15
xor ch, byte [rsi]
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405cf2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405d31
movsxd rbx, dword [rdi + 0x73]
je 0x405d3f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405d3a
je 0x405d4f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x405d59
push r10
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405d7e
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405d79
je 0x405d8e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x405d64
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405da3
movsxd rbx, dword [rdi + 0x73]
je 0x405db1
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r10
push r11
cmp byte [rdi + 0x53], bl
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x405d94
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
ja 0x405df2
imul esi, dword [rbp + 0x72], 0x5f006369
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x405e07
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x755f5f00
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x405dee
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x635f5f00
js 0x405e21
pop rdi
je 0x405e29
js 0x405e2f
je 0x405e08
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x365a5f00
ja 0x405e4c
imul esi, dword [rbp + 0x72], 0x5f006378
pop rdx
push rbx
je 0x405e1e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405e5d
movsxd rbx, dword [rdi + 0x73]
je 0x405e6b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405e66
je 0x405e7b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rax], esi
pop rdi
pop r15
jb 0x405e82
jo 0x405e8b
movsxd rsp, dword [rbp + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
jb 0x405ea4
jb 0x405e96
push rbx
je 0x405e7f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405ebe
movsxd rbx, dword [rdi + 0x73]
je 0x405ecc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405ec7
je 0x405edc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x405eb7
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
insd dword [rdi], dx
outsd dx, dword [rsi]
pop rdi
jo 0x405f16
ja 0x405f21
js 0x405f23
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x405f1a
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x49], bl
pop r15
jae 0x405f42
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
ja 0x405f4e
imul esi, dword [rbp + 0x72], 0x63634b50
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x405f51
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x405f66
pop rdi
jae 0x405f7c
jb 0x405f7f
add byte [rdi + 0x5a], bl
push rbx
je 0x405f49
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405f88
movsxd rbx, dword [rdi + 0x73]
je 0x405f96
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405f91
je 0x405fa6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
jae 0x405fbb
imul esp, dword [rdi + 0x6e], 0x534b5245
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
ja 0x405fd9
imul esi, dword [rbp + 0x72], 0x634b50
jae 0x405fe5
imul ebp, dword fs:[rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545f5f00
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
jae 0x406002
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x405fe8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406027
movsxd rbx, dword [rdi + 0x73]
je 0x406035
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406030
je 0x406045
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x406045
jo 0x40602b
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
jb 0x406065
jb 0x406057
js 0x406007
pop rdi
pop rdx
ja 0x40607e
imul esi, dword [rbp + 0x72], 0x534e4b52
je 0x40604d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40608c
movsxd rbx, dword [rdi + 0x73]
je 0x40609a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406095
je 0x4060aa
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r8, dword [r8]
pop rdi
pop rdi
jae 0x4060c0
pop rdi
jae 0x4060c4
jb 0x4060c7
add byte [rdi + 0x5f], bl
jae 0x4060cc
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
jb 0x4060da
jb 0x4060ca
movsxd rax, dword [rax]
pop rdi
pop rdi
outsd dx, dword [rsi]
jbe 0x4060e6
jb 0x4060e9
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x4060c7
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4060ca
cmp dword [rdi + 0x5f], ebx
je 0x406106
jb 0x40610f
ja 0x406101
insb byte [rdi], dx
outsd dx, dword [rsi]
imul esp, dword [ebx + 0x5f], 0x6f727265
jb 0x4060fe
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x4060fc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40613b
movsxd rbx, dword [rdi + 0x73]
je 0x406149
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406144
je 0x406159
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rbp, dword [rdi + 0x6d]
jo 0x40615b
jb 0x406161
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40614e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40618d
movsxd rbx, dword [rdi + 0x73]
je 0x40619b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406196
je 0x4061ab
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
jo 0x4061bd
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4061a3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4061e2
movsxd rbx, dword [rdi + 0x73]
je 0x4061f0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4061eb
je 0x406200
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jne 0x406216
je 0x40620a
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x406224
add byte [rdi + 0x5f], bl
js 0x406241
pop rdi
jo 0x406231
jb 0x406241
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x406253
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x406266
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
insd dword [rdi], dx
insd dword [rdi], dx
movsxd rsi, dword [rax + 0x79]
pop r15
xor ch, byte [rsi]
xor dword [rax + rax], esi
pop rdi
pop rdx
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul eax, dword [rax], 0x6f647473
jne 0x40629d
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x69616d00
outsb dx, byte [rsi]
add byte [rax], al
jae 0x4062b9
insd dword [rdi], dx
je 0x4062a4
add byte [rsi], ch
jae 0x4062bc
jb 0x4062be
add byte [rsi], ch
jae 0x4062b8
jae 0x4062c6
jb 0x4062c8
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4062c9
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4062d7
outsb dx, byte cs:[esi]
jne 0x4062a5
jne 0x4062e3
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x4062b3
push 0x687361
jns 0x4062fc
jae 0x406309
insd dword [rdi], dx
add byte [rsi], ch
jns 0x406304
jae 0x40630c
jb 0x40629a
outsb dx, byte cs:[esi]
jne 0x4062cd
jbe 0x406306
jb 0x406316
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x4062da
jbe 0x406313
jb 0x406323
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40631e
insb byte [rdi], dx
jns 0x40632d
add byte [rsi], ch
jb 0x406328
insb byte [rdi], dx
jo 0x406334
je 0x4062ca
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x406303
outsd dx, dword [esi]
je 0x4062d9
je 0x406341
js 0x406352
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x406357
je 0x40634d
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x406370
jo 0x406384
pop rdi
je 0x406374
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x406382
jns 0x406323
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40639e
jns 0x40632f
push 0x63
jb 0x406334
jns 0x4063a6
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x4063b0
je 0x406346
je 0x4063ac
add byte [rsi], ch
jae 0x4063c3
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40635a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], bh
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rip + 0x40], al
add byte [rax], al
mov byte [rip], al
add byte [rax], al
sbb dword [rax + rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x4009], ah
add byte [rax], al
add byte [rdx + 9], ah
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
loopne 0x406583
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xa00000000000400a]
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
or al, byte [rax]
add byte [rax], al
add byte [rax], al
call 0x406607
add byte [rax], al
add al, bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add al, ah
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rcx + rax*2], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x41], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x41], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4042], bh
add byte [rax], al
add byte [rax + 0x42], bh
add byte [rax], al
add byte [rsp + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax*2], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax*2], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add al, ch
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
push rax
add byte [rax], al
add byte [rax], al
add al, al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rax + 0x60], 1
add byte [rax], al
add byte [rax], al
add al, dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0x62
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rcx], 0
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x406b49
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
