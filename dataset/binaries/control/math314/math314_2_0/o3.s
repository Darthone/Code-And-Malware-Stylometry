xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6040bf
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x400d30
mov eax, 0
test rax, rax
je 0x400d30
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400d78
mov eax, 0
test rax, rax
je 0x400d78
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x203349], 0
jne 0x400d9a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x203336], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400db0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400dab
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
nop word cs:[rax + rax]
push rbp
push rbx
mov rbx, rdi
sub rsp, 8
mov dword [rdi], 0
mov rdi, qword [rip + 0x2032da]
jmp 0x400e08
nop dword [rax + rax]
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
cmp eax, 0x2d
je 0x400e28
sub eax, 0x30
cmp eax, 9
jbe 0x400e80
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x400df0
call sym.imp.__uflow
cmp eax, 0x2d
mov rdi, qword [rip + 0x20329f]
jne 0x400e00
nop dword [rax + rax]
mov ebp, 1
jmp 0x400e55
nop
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x400e70
mov edx, dword [rbx]
mov rdi, qword [rip + 0x203274]
lea edx, [rdx + rdx*4]
lea eax, [rax + rdx*2 - 0x30]
mov dword [rbx], eax
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x400e30
call sym.imp.__uflow
lea edx, [rax - 0x30]
cmp edx, 9
jbe 0x400e43
nop dword [rax]
test ebp, ebp
je 0x400e76
neg dword [rbx]
add rsp, 8
pop rbx
pop rbp
ret
nop dword [rax]
mov dword [rbx], eax
xor ebp, ebp
jmp 0x400e55
nop word cs:[rax + rax]
push rbp
push rbx
mov rbp, rdi
sub rsp, 8
mov qword [rdi], 0
mov rdi, qword [rip + 0x203219]
jmp 0x400ecc
nop dword [rax]
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
cmp eax, 0x2d
je 0x400ef0
sub eax, 0x30
cmp eax, 9
jbe 0x400f60
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x400eb0
call sym.imp.__uflow
cmp eax, 0x2d
mov rdi, qword [rip + 0x2031db]
jne 0x400ec0
nop word [rax + rax]
mov ebx, 1
jmp 0x400f2d
nop word [rax + rax]
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x400f48
mov rdx, qword [rbp]
cdqe
mov rdi, qword [rip + 0x2031a0]
lea rdx, [rdx + rdx*4]
lea rax, [rax + rdx*2 - 0x30]
mov qword [rbp], rax
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x400f00
call sym.imp.__uflow
lea edx, [rax - 0x30]
cmp edx, 9
jbe 0x400f13
nop dword [rax]
test ebx, ebx
je 0x400f50
neg qword [rbp]
add rsp, 8
pop rbx
pop rbp
ret
nop word [rax + rax]
cdqe
xor ebx, ebx
mov qword [rbp], rax
jmp 0x400f2d
nop word [rax + rax]
push r13
push r12
push rbp
push rbx
movabs rbp, 0x200004c01
mov rbx, rdi
sub rsp, 8
nop word [rax + rax]
mov rdi, qword [rip + 0x203129]
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jae 0x401020
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax + 1]
cmp edx, 0x21
jbe 0x401010
mov byte [rbx], al
lea rbp, [rbx + 1]
mov r12d, 1
movabs r13, 0x200004c01
jmp 0x400ff4
nop dword [rax]
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax + 1]
cmp edx, 0x21
ja 0x400fe9
bt r13, rdx
jb 0x401030
mov byte [rbp], al
add r12d, 1
add rbp, 1
mov rdi, qword [rip + 0x2030c5]
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jb 0x400fd0
call sym.imp.__uflow
jmp 0x400fdb
nop dword [rax]
bt rbp, rdx
jb 0x400f90
jmp 0x400fb4
nop dword [rax]
call sym.imp.__uflow
jmp 0x400fac
nop word [rax + rax]
movsxd rax, r12d
mov byte [rbx + rax], 0
add rsp, 8
mov eax, r12d
pop rbx
pop rbp
pop r12
pop r13
ret
nop
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
mov rbp, rdi
movabs rbx, 0x200004c01
sub rsp, 8
nop dword [rax + rax]
mov rdi, qword [rip + 0x203049]
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jae 0x401190
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax + 1]
cmp edx, 0x21
jbe 0x401180
mov ebx, eax
mov rax, qword [rbp]
mov r12, qword [rbp + 8]
lea r13, [rbp + 0x10]
cmp rax, r13
lea r14, [r12 + 1]
je 0x4011c3
mov rdx, qword [rbp + 0x10]
cmp r14, rdx
jbe 0x4010da
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
mov rdi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rbp]
mov byte [rax + r12], bl
mov rax, qword [rbp]
mov qword [rbp + 8], r14
movabs r14, 0x200004c01
mov byte [rax + r12 + 1], 0
jmp 0x401134
nop dword [rax + rax]
mov rdx, qword [rbp + 0x10]
cmp r15, rdx
jbe 0x401122
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
mov rdi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rbp]
mov byte [rax + r12], bl
mov rax, qword [rbp]
mov qword [rbp + 8], r15
mov byte [rax + r12 + 1], 0
mov rdi, qword [rip + 0x202f85]
mov rax, qword [rdi + 8]
cmp rax, qword [rdi + 0x10]
jae 0x4011a0
lea rdx, [rax + 1]
mov qword [rdi + 8], rdx
movzx eax, byte [rax]
lea edx, [rax + 1]
cmp edx, 0x21
ja 0x40115e
bt r14, rdx
jb 0x4011b0
mov ebx, eax
mov rax, qword [rbp]
mov r12, qword [rbp + 8]
cmp r13, rax
lea r15, [r12 + 1]
jne 0x401100
mov edx, 0xf
jmp 0x401104
nop dword [rax]
bt rbx, rdx
jb 0x401070
jmp 0x40109c
nop
call sym.imp.__uflow
jmp 0x401090
nop word [rax + rax]
call sym.imp.__uflow
jmp 0x401150
nop word [rax + rax]
mov rax, qword [rbp + 8]
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov edx, 0xf
jmp 0x4010bc
nop dword [rax]
push r13
push r12
push rbp
push rbx
mov ebp, esi
sub rsp, 0x28
mov rax, qword fs:[0x28]
mov qword [rsp + 0x18], rax
xor eax, eax
test edi, edi
js 0x401660
mov r9d, 0
je 0x401650
mov eax, edi
mov esi, 0x66666667
mov ecx, edi
imul esi
sar ecx, 0x1f
mov ebx, edi
sar edx, 2
sub edx, ecx
lea eax, [rdx + rdx*4]
mov r8d, edx
add eax, eax
sub ebx, eax
test edx, edx
mov byte [rsp], bl
je 0x401750
mov eax, edx
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 1], r8b
mov r8d, 0x51eb851f
imul r8d
sar edx, 5
mov r8d, edx
sub r8d, ecx
je 0x401760
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 2], r8b
mov r8d, 0x10624dd3
imul r8d
sar edx, 6
mov r8d, edx
sub r8d, ecx
je 0x401770
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 3], r8b
mov r8d, 0x68db8bad
imul r8d
sar edx, 0xc
mov r8d, edx
sub r8d, ecx
je 0x4017a0
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 4], r8b
mov r8d, 0x14f8b589
imul r8d
sar edx, 0xd
mov r8d, edx
sub r8d, ecx
je 0x4017b0
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 5], r8b
mov r8d, 0x431bde83
imul r8d
sar edx, 0x12
mov r8d, edx
sub r8d, ecx
je 0x4017c0
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 6], r8b
mov r8d, 0x6b5fca6b
imul r8d
sar edx, 0x16
mov r8d, edx
sub r8d, ecx
je 0x4017d0
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
sar edx, 2
sub edx, eax
lea eax, [rdx + rdx*4]
add eax, eax
sub r8d, eax
mov eax, edi
mov byte [rsp + 7], r8b
mov r8d, 0x55e63b89
imul r8d
sar edx, 0x19
mov r8d, edx
sub r8d, ecx
je 0x401780
mov eax, r8d
imul esi
mov eax, r8d
sar eax, 0x1f
mov esi, edx
mov edx, 0x44b82fa1
sar esi, 2
sub esi, eax
lea eax, [rsi + rsi*4]
add eax, eax
sub r8d, eax
mov eax, edi
imul edx
mov byte [rsp + 8], r8b
sar edx, 0x1c
sub edx, ecx
je 0x401790
mov byte [rsp + 9], dl
mov ebx, 0xa
test r9d, r9d
je 0x40140b
mov rdi, qword [rip + 0x202cd6]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401670
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], 0x2d
sub ebx, 1
movsxd rax, ebx
mov rdi, qword [rip + 0x202cb0]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp qword [rdi + 0x30], rdx
jbe 0x401720
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test ebx, ebx
lea r12d, [rbx - 1]
je 0x40160b
movsxd rax, r12d
mov rdi, qword [rip + 0x202c7b]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x401730
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r12d, r12d
lea r13d, [rbx - 2]
je 0x40160b
movsxd rax, r13d
mov rdi, qword [rip + 0x202c45]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x401740
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r13d, r13d
lea r12d, [rbx - 3]
je 0x40160b
movsxd rax, r12d
mov rdi, qword [rip + 0x202c0f]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4016e0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r12d, r12d
lea r13d, [rbx - 4]
je 0x40160b
movsxd rax, r13d
mov rdi, qword [rip + 0x202bd9]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4016f0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r13d, r13d
lea r12d, [rbx - 5]
je 0x40160b
movsxd rax, r12d
mov rdi, qword [rip + 0x202ba3]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x401700
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r12d, r12d
lea r13d, [rbx - 6]
je 0x40160b
movsxd rax, r13d
mov rdi, qword [rip + 0x202b6d]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x401710
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test r13d, r13d
lea r12d, [rbx - 7]
je 0x40160b
movsxd rax, r12d
mov rdi, qword [rip + 0x202b37]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4016c0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
sub ebx, 8
test r12d, r12d
je 0x40160b
movsxd rax, ebx
mov rdi, qword [rip + 0x202b06]
movsx eax, byte [rsp + rax]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4016d0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
test ebx, ebx
je 0x40160b
movsx eax, byte [rsp]
mov rdi, qword [rip + 0x202ad8]
mov rdx, qword [rdi + 0x28]
add eax, 0x30
cmp rdx, qword [rdi + 0x30]
jae 0x4016b0
lea rcx, [rdx + 1]
mov qword [rdi + 0x28], rcx
mov byte [rdx], al
mov rdi, qword [rip + 0x202ab6]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401680
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], bpl
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
jne 0x4017da
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
ret
nop word cs:[rax + rax]
mov byte [rsp], 0
xor ebx, ebx
jmp 0x40140e
nop dword [rax + rax]
neg edi
mov r9d, 1
jmp 0x401200
nop dword [rax]
mov esi, 0x2d
call sym.imp.__overflow
jmp 0x40140b
nop
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
jne 0x4017da
add rsp, 0x28
movzx esi, bpl
pop rbx
pop rbp
pop r12
pop r13
jmp sym.imp.__overflow
nop word [rax + rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x40160b
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x4015b0
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x4015e1
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x4014d8
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x40150e
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x401544
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x40157a
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x401437
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x40146c
nop dword [rax]
movzx esi, al
call sym.imp.__overflow
jmp 0x4014a2
nop dword [rax]
mov ebx, 1
jmp 0x4013e6
nop word [rax + rax]
mov ebx, 2
jmp 0x4013e6
nop word [rax + rax]
mov ebx, 3
jmp 0x4013e6
nop word [rax + rax]
mov ebx, 8
jmp 0x4013e6
nop word [rax + rax]
mov ebx, 9
jmp 0x4013e6
nop word [rax + rax]
mov ebx, 4
jmp 0x4013e6
nop word [rax + rax]
mov ebx, 5
jmp 0x4013e6
nop word [rax + rax]
mov ebx, 6
jmp 0x4013e6
nop word [rax + rax]
mov ebx, 7
jmp 0x4013e6
call sym.imp.__stack_chk_fail
nop
push rbp
push rbx
mov ebx, esi
sub rsp, 0x28
mov rax, qword fs:[0x28]
mov qword [rsp + 0x18], rax
xor eax, eax
test rdi, rdi
js 0x401908
mov r8d, 0
je 0x4018f9
mov rcx, rsp
xor ebp, ebp
movabs rsi, 0x6666666666666667
nop dword [rax]
mov rax, rdi
add ebp, 1
add rcx, 1
imul rsi
mov rax, rdi
sar rax, 0x3f
sar rdx, 2
sub rdx, rax
lea rax, [rdx + rdx*4]
add rax, rax
sub rdi, rax
mov byte [rcx - 1], dil
test rdx, rdx
mov rdi, rdx
jne 0x401820
test r8d, r8d
je 0x4018cb
mov rdi, qword [rip + 0x20286b]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401916
lea rdx, [rax + 1]
sub ebp, 1
cmp ebp, -1
mov qword [rdi + 0x28], rdx
mov byte [rax], 0x2d
jne 0x4018d3
nop
mov rdi, qword [rip + 0x202841]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401922
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], bl
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
jne 0x401940
add rsp, 0x28
pop rbx
pop rbp
ret
nop word [rax + rax]
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], sil
sub ebp, 1
cmp ebp, -1
je 0x401880
movsxd rax, ebp
mov rdi, qword [rip + 0x2027eb]
movsx esi, byte [rsp + rax]
mov rax, qword [rdi + 0x28]
add esi, 0x30
cmp rax, qword [rdi + 0x30]
jb 0x4018c0
movzx esi, sil
call sym.imp.__overflow
jmp 0x4018cb
mov byte [rsp], 0
mov ebp, 1
jmp 0x4018cb
nop dword [rax]
neg rdi
mov r8d, 1
jmp 0x40180d
mov esi, 0x2d
call sym.imp.__overflow
jmp 0x4018cb
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
jne 0x401940
add rsp, 0x28
movzx esi, bl
pop rbx
pop rbp
jmp sym.imp.__overflow
call sym.imp.__stack_chk_fail
nop
nop word cs:[rax + rax]
movzx esi, byte [rdi]
test sil, sil
je 0x4019a1
push rbx
lea rbx, [rdi + 1]
jmp 0x401978
nop
lea rdx, [rax + 1]
add rbx, 1
mov qword [rdi + 0x28], rdx
mov byte [rax], sil
movzx esi, byte [rbx - 1]
test sil, sil
je 0x4019a0
mov rdi, qword [rip + 0x202749]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jb 0x401960
add rbx, 1
call sym.imp.__overflow
movzx esi, byte [rbx - 1]
test sil, sil
jne 0x401978
nop dword [rax + rax]
pop rbx
ret
nop dword [rax]
nop word cs:[rax + rax]
push r12
push rbp
mov ebp, esi
push rbx
mov rax, qword [rdi]
mov r12, rdi
mov ebx, 1
movzx esi, byte [rax]
test sil, sil
jne 0x4019ec
jmp 0x401a08
nop dword [rax + rax]
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], sil
mov rax, qword [r12]
movzx esi, byte [rax + rbx]
add rbx, 1
test sil, sil
je 0x401a08
mov rdi, qword [rip + 0x2026d5]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jb 0x4019d0
call sym.imp.__overflow
jmp 0x4019db
nop dword [rax]
mov rdi, qword [rip + 0x2026b9]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401a29
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], bpl
pop rbx
pop rbp
pop r12
ret
pop rbx
movzx esi, bpl
pop rbp
pop r12
jmp sym.imp.__overflow
nop word cs:[rax + rax]
push rbp
push rbx
mov ebp, esi
lea rbx, [rdi + 1]
sub rsp, 8
movzx esi, byte [rdi]
test sil, sil
jne 0x401a78
jmp 0x401aa0
nop word cs:[rax + rax]
lea rdx, [rax + 1]
add rbx, 1
mov qword [rdi + 0x28], rdx
mov byte [rax], sil
movzx esi, byte [rbx - 1]
test sil, sil
je 0x401aa0
mov rdi, qword [rip + 0x202649]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jb 0x401a60
add rbx, 1
call sym.imp.__overflow
movzx esi, byte [rbx - 1]
test sil, sil
jne 0x401a78
nop dword [rax + rax]
mov rdi, qword [rip + 0x202621]
mov rax, qword [rdi + 0x28]
cmp rax, qword [rdi + 0x30]
jae 0x401ac3
lea rdx, [rax + 1]
mov qword [rdi + 0x28], rdx
mov byte [rax], bpl
add rsp, 8
pop rbx
pop rbp
ret
add rsp, 8
movzx esi, bpl
pop rbx
pop rbp
jmp sym.imp.__overflow
nop dword [rax]
nop word cs:[rax + rax]
mov rax, rdi
mov r8, rdx
mov r9d, 1
cqo
idiv r8
test rsi, rsi
mov rcx, rdx
je 0x401b29
nop dword [rax]
test sil, 1
je 0x401b15
mov rax, r9
imul rax, rcx
cqo
idiv r8
mov r9, rdx
mov rax, rcx
imul rax, rcx
cqo
idiv r8
sar rsi, 1
mov rcx, rdx
jne 0x401b00
mov rax, r9
ret
nop dword [rax]
push r15
push r14
mov r15, rdi
push r13
push r12
push rbp
push rbx
sub rsp, 0x88
mov rdi, qword [rip + 0x202575]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x78], rax
xor eax, eax
mov rdx, qword [rdi + 8]
mov rcx, qword [rdi + 0x10]
jmp 0x401b87
nop dword [rax]
lea rsi, [rdx + 1]
mov qword [rdi + 8], rsi
movzx eax, byte [rdx]
mov rdx, rsi
cmp eax, 0x2d
je 0x401ba5
sub eax, 0x30
cmp eax, 9
jbe 0x40203f
cmp rdx, rcx
jb 0x401b68
call sym.imp.__uflow
mov rdi, qword [rip + 0x202528]
cmp eax, 0x2d
mov rdx, qword [rdi + 8]
mov rcx, qword [rdi + 0x10]
jne 0x401b7b
xor ebx, ebx
cmp rcx, rdx
mov ebp, 1
ja 0x402048
call sym.imp.__uflow
mov rdi, qword [rip + 0x2024ff]
lea esi, [rax - 0x30]
cmp esi, 9
mov rdx, qword [rdi + 8]
mov rcx, qword [rdi + 0x10]
jbe 0x402062
mov eax, ebx
neg eax
test ebp, ebp
cmovne ebx, eax
jmp 0x401bff
lea rsi, [rdx + 1]
mov qword [rdi + 8], rsi
movzx eax, byte [rdx]
mov rdx, rsi
cmp eax, 0x2d
je 0x401c1d
sub eax, 0x30
cmp eax, 9
jbe 0x402073
cmp rdx, rcx
jb 0x401be0
call sym.imp.__uflow
mov rdi, qword [rip + 0x2024b0]
cmp eax, 0x2d
mov rdx, qword [rdi + 8]
mov rcx, qword [rdi + 0x10]
jne 0x401bf3
xor r12d, r12d
cmp rcx, rdx
mov ebp, 1
ja 0x402080
call sym.imp.__uflow
lea edx, [rax - 0x30]
cmp edx, 9
jbe 0x402097
mov eax, r12d
neg eax
test ebp, ebp
mov esi, eax
cmove esi, r12d
cmp ebx, 0
mov dword [rsp + 0x20], esi
jle 0x4020b9
lea r14d, [rbx - 1]
mov ebp, obj.e
mov r12d, obj.s
lea r13, [r14 + 1]
mov dword [rsp + 0x24], r14d
lea rax, [r13*8 + obj.e]
mov qword [rsp + 8], rax
mov rdx, r12
mov rsi, rbp
xor eax, eax
mov edi, str._lf_lf
add rbp, 8
add r12, 8
call sym.imp.scanf
cmp rbp, qword [rsp + 8]
jne 0x401c7e
lea rax, [r13 + r13*4]
mov r12d, obj.d
lea r13, [rax + rax*4]
shl r13, 5
lea rax, [r13 + r12]
mov qword [rsp + 8], rax
lea rax, [r14*8 + 8]
mov qword [rsp + 0x10], rax
mov rax, qword [rsp + 0x10]
mov r13, r12
mov rbp, r12
lea r14, [rax + r12]
nop dword [rax + rax]
xor eax, eax
mov rsi, rbp
mov edi, 0x402d67
call sym.imp.scanf
movsd xmm2, qword [rip + 0x10a9]
ucomisd xmm2, qword [r13]
jp 0x401d0f
jne 0x401d0f
movsd xmm3, qword [rip + 0x109f]
movsd qword [r13], xmm3
add rbp, 8
add r13, 8
cmp rbp, r14
jne 0x401ce0
add r12, 0x320
cmp r12, qword [rsp + 8]
jne 0x401cc9
mov edx, obj.d
xor eax, eax
add eax, 1
mov qword [rdx], 0
add rdx, 0x328
cmp eax, ebx
jl 0x401d31
test ebx, ebx
mov eax, 1
mov qword [rsp + 8], 0
cmovg eax, ebx
xor r10d, r10d
xor r13d, r13d
lea edi, [rax - 2]
mov r14d, eax
shr edi, 1
add edi, 1
lea eax, [rdi + rdi]
mov dword [rsp + 0x18], eax
movsxd rax, r14d
mov qword [rsp + 0x30], rax
lea rax, [r10 + 0x10]
mov r9, qword [rsp + 8]
mov ecx, obj.d
mov ebp, 0x10
xor r12d, r12d
xor esi, esi
mov qword [rsp + 0x28], rax
movsxd rax, r13d
xor r11d, r11d
lea rax, [rax + rax*4]
lea rax, [rax + rax*4]
shl rax, 2
mov qword [rsp + 0x10], rax
cmp rsi, qword [rsp + 0x28]
setge dl
cmp r10, rbp
setge al
or edx, eax
cmp r14d, 4
seta r8b
cmp rsi, rbp
setge al
and eax, r8d
test dl, al
je 0x4025e6
mov rax, qword [rsp + 0x30]
add rax, r12
shl rax, 3
cmp r9, rax
lea rax, [r9 + 8]
setge dl
cmp rsi, rax
setge al
or dl, al
je 0x4025e6
cmp ebx, 1
je 0x4025df
movsd xmm1, qword [r9 + obj.d]
lea r8, [r10 + obj.d]
xor eax, eax
xor edx, edx
unpcklpd xmm1, xmm1
nop dword [rax + rax]
movapd xmm0, xmmword [r8 + rax]
add edx, 1
addpd xmm0, xmm1
minpd xmm0, xmmword [rcx + rax]
movaps xmmword [rcx + rax], xmm0
add rax, 0x10
cmp edi, edx
ja 0x401e20
movsxd rax, dword [rsp + 0x18]
cmp eax, r14d
je 0x401e83
mov rdx, qword [rsp + 0x10]
add rdx, rax
movsd xmm0, qword [rdx*8 + obj.d]
movsxd rdx, r11d
lea rdx, [rdx + rdx*4]
addsd xmm0, qword [r9 + obj.d]
lea rdx, [rdx + rdx*4]
lea rax, [rax + rdx*4]
minsd xmm0, qword [rax*8 + obj.d]
movsd qword [rax*8 + obj.d], xmm0
add r11d, 1
add rsi, 0x320
add r9, 0x320
add r12, 0x64
add rbp, 0x320
add rcx, 0x320
cmp r11d, ebx
jl 0x401dad
add r13d, 1
add r10, 0x320
add qword [rsp + 8], 8
cmp r13d, ebx
jl 0x401d79
movsxd r12, ebx
lea r13, [r12 + r12*2]
shl r13, 3
mov rdi, r13
call sym.operatornew
mov rbp, rax
test rax, rax
je 0x401efc
mov qword [rax], 0
mov qword [rax + 8], 0
mov qword [rax + 0x10], 0
add rax, 0x18
sub r12, 1
jne 0x401ee0
lea rax, [rbp + r13]
test ebx, ebx
mov qword [rsp + 0x18], rax
jle 0x401fc4
mov eax, dword [rsp + 0x24]
mov r13, rbp
xor r12d, r12d
add rax, 1
mov qword [rsp + 8], rax
movsxd rdx, r12d
mov dword [rsp + 0x40], 0
xor eax, eax
lea rdx, [rdx + rdx*4]
lea r14, [rdx + rdx*4]
shl r14, 2
jmp 0x401f51
add eax, 1
cmp eax, ebx
mov dword [rsp + 0x40], eax
jge 0x401fb1
movsxd rdx, eax
movsd xmm1, qword [r12*8 + obj.e]
add rdx, r14
movsd xmm0, qword [rdx*8 + obj.d]
ucomisd xmm1, xmm0
jb 0x401f46
divsd xmm0, qword [r12*8 + obj.s]
mov rdx, qword [r13 + 8]
cmp rdx, qword [r13 + 0x10]
movsd qword [rsp + 0x50], xmm0
je 0x402680
test rdx, rdx
je 0x401f9a
movsd qword [rdx + 8], xmm0
mov dword [rdx], eax
add rdx, 0x10
mov qword [r13 + 8], rdx
mov eax, dword [rsp + 0x40]
add eax, 1
cmp eax, ebx
mov dword [rsp + 0x40], eax
jl 0x401f51
add r12, 1
add r13, 0x18
cmp r12, qword [rsp + 8]
jne 0x401f2b
mov esi, dword [rsp + 0x20]
mov qword [r15], 0
mov qword [r15 + 8], 0
mov qword [r15 + 0x10], 0
test esi, esi
jg 0x4020ee
cmp rbp, qword [rsp + 0x18]
mov rbx, rbp
je 0x402009
mov rdi, qword [rbx]
test rdi, rdi
je 0x401ffe
call sym.operatordelete
add rbx, 0x18
cmp qword [rsp + 0x18], rbx
jne 0x401ff1
test rbp, rbp
je 0x402016
mov rdi, rbp
call sym.operatordelete
mov rbx, qword [rsp + 0x78]
xor rbx, qword fs:[0x28]
mov rax, r15
jne 0x402677
add rsp, 0x88
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov ebx, eax
xor ebp, ebp
jmp 0x402069
nop dword [rax]
lea rsi, [rdx + 1]
mov qword [rdi + 8], rsi
movzx eax, byte [rdx]
mov rdx, rsi
lea esi, [rax - 0x30]
cmp esi, 9
ja 0x401bd5
lea esi, [rbx + rbx*4]
lea ebx, [rax + rsi*2 - 0x30]
cmp rcx, rdx
ja 0x402048
jmp 0x401bb5
xor ebp, ebp
mov r12d, eax
jmp 0x4020af
nop word [rax + rax]
lea rax, [rdx + 1]
mov qword [rdi + 8], rax
movzx eax, byte [rdx]
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x401c3f
mov rdi, qword [rip + 0x202022]
lea edx, [r12 + r12*4]
lea r12d, [rax + rdx*2 - 0x30]
mov rcx, qword [rdi + 0x10]
mov rdx, qword [rdi + 8]
cmp rcx, rdx
ja 0x402080
jmp 0x401c2e
je 0x4020c0
call sym.std::__throw_bad_alloc
mov eax, dword [rsp + 0x20]
mov qword [r15], 0
mov qword [r15 + 8], 0
mov qword [r15 + 0x10], 0
test eax, eax
jle 0x402016
mov qword [rsp + 0x18], 0
xor ebp, ebp
mov rax, qword [rsp + 0x18]
mov dword [rsp + 0x24], 0
sub rax, rbp
sar rax, 3
imul eax, eax, 0xaaaaaaab
cdqe
mov qword [rsp + 0x28], rax
shl rax, 3
mov qword [rsp + 0x38], rax
mov rdi, qword [rip + 0x201fa1]
mov rdx, qword [rdi + 8]
mov rcx, qword [rdi + 0x10]
jmp 0x402148
lea rsi, [rdx + 1]
mov qword [rdi + 8], rsi
movzx eax, byte [rdx]
mov rdx, rsi
cmp eax, 0x2d
je 0x402166
sub eax, 0x30
cmp eax, 9
jbe 0x402496
cmp rdx, rcx
jb 0x402129
call sym.imp.__uflow
mov rdi, qword [rip + 0x201f67]
cmp eax, 0x2d
mov rdx, qword [rdi + 8]
mov rcx, qword [rdi + 0x10]
jne 0x40213c
xor r12d, r12d
cmp rdx, rcx
mov ebx, 1
jb 0x40249d
call sym.imp.__uflow
mov rdi, qword [rip + 0x201f3d]
lea esi, [rax - 0x30]
cmp esi, 9
mov rdx, qword [rdi + 8]
mov rcx, qword [rdi + 0x10]
jbe 0x4024b7
mov eax, r12d
neg eax
test ebx, ebx
cmovne r12d, eax
jmp 0x4021c3
lea rsi, [rdx + 1]
mov qword [rdi + 8], rsi
movzx eax, byte [rdx]
mov rdx, rsi
cmp eax, 0x2d
je 0x4021e1
sub eax, 0x30
cmp eax, 9
jbe 0x4024ca
cmp rcx, rdx
ja 0x4021a4
call sym.imp.__uflow
mov rdi, qword [rip + 0x201eec]
cmp eax, 0x2d
mov rdx, qword [rdi + 8]
mov rcx, qword [rdi + 0x10]
jne 0x4021b7
xor ebx, ebx
cmp rdx, rcx
mov r13d, 1
jb 0x4024d1
call sym.imp.__uflow
lea edx, [rax - 0x30]
cmp edx, 9
jbe 0x4024e8
mov eax, ebx
neg eax
test r13d, r13d
lea r13d, [r12 - 1]
cmovne ebx, eax
xor r12d, r12d
cmp qword [rsp + 0x28], 0
lea eax, [rbx - 1]
mov dword [rsp + 0x30], eax
jne 0x4026bc
lea rsi, [rsp + 0x40]
lea rdi, [rsp + 0x50]
mov qword [rsp + 0x50], 0
mov qword [rsp + 0x58], 0
mov qword [rsp + 0x60], 0
mov qword [rsp + 0x40], 0
mov dword [rsp + 0x48], r13d
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_M_emplace_back_aux_std::pair_double_int__
mov r8, qword [rsp + 0x58]
mov rdi, qword [rsp + 0x50]
mov rdx, r8
movsd xmm1, qword [r8 - 0x10]
sub rdx, rdi
mov r9d, dword [r8 - 8]
sar rdx, 4
lea rax, [rdx - 1]
test rax, rax
jle 0x4022c5
sub rdx, 2
mov rsi, rdx
shr rsi, 0x3f
add rdx, rsi
mov rsi, rdx
sar rsi, 1
mov rdx, rsi
shl rdx, 4
add rdx, rdi
movsd xmm0, qword [rdx]
ucomisd xmm0, xmm1
ja 0x402580
ucomisd xmm1, xmm0
ja 0x4022c5
mov ecx, dword [rdx + 8]
cmp ecx, r9d
jg 0x402583
shl rax, 4
lea rdx, [rdi + rax]
movsxd r13, r13d
cmp rdi, r8
movsd qword [rdx], xmm1
mov dword [rdx + 8], r9d
mov qword [r12 + r13*8], 0
je 0x40251e
nop dword [rax]
mov rax, r8
movsd xmm1, qword [rdi]
sub rax, rdi
mov ebx, dword [rdi + 8]
cmp rax, 0x1f
jle 0x40234b
mov rax, qword [r8 - 0x10]
lea rdx, [r8 - 0x10]
movsd qword [rsp + 0x10], xmm1
mov rcx, qword [r8 - 8]
sub rsp, 8
movsd qword [r8 - 0x10], xmm1
mov dword [r8 - 8], ebx
sub rdx, rdi
xor esi, esi
mov qword [rsp + 0x10], rax
sar rdx, 4
movsd xmm0, qword [rsp + 0x10]
push 0
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
mov r8, qword [rsp + 0x68]
pop rdx
pop rcx
movsd xmm1, qword [rsp + 0x10]
movsxd rax, ebx
sub r8, 0x10
lea r13, [r12 + rax*8]
mov qword [rsp + 0x58], r8
movsd xmm0, qword [r13]
ucomisd xmm1, xmm0
ja 0x402510
lea rax, [rax + rax*2]
lea rax, [rbp + rax*8]
mov rbx, qword [rax]
mov r14, qword [rax + 8]
cmp rbx, r14
jne 0x4023bd
jmp 0x402510
nop dword [rax]
ucomisd xmm1, xmm0
ja 0x40239a
mov ecx, dword [rdx + 8]
cmp r9d, ecx
jl 0x402463
shl rax, 4
lea rdx, [rdi + rax]
movsd qword [rdx], xmm1
mov dword [rdx + 8], r9d
add rbx, 0x10
cmp r14, rbx
je 0x402510
movsd xmm0, qword [r13]
movsxd rdx, dword [rbx]
addsd xmm0, qword [rbx + 8]
mov rax, rdx
lea rdx, [r12 + rdx*8]
movsd xmm1, qword [rdx]
ucomisd xmm1, xmm0
jbe 0x4023aa
cmp r8, qword [rsp + 0x60]
movsd qword [rdx], xmm0
mov dword [rsp + 0x48], eax
movsd qword [rsp + 0x40], xmm0
je 0x4025b9
test r8, r8
je 0x402405
mov rax, qword [rsp + 0x40]
mov rdx, qword [rsp + 0x48]
mov qword [r8], rax
mov qword [r8 + 8], rdx
add r8, 0x10
mov qword [rsp + 0x58], r8
mov rdi, qword [rsp + 0x50]
mov rdx, r8
mov r9d, dword [r8 - 8]
movsd xmm1, qword [r8 - 0x10]
sub rdx, rdi
sar rdx, 4
lea rax, [rdx - 1]
test rax, rax
jle 0x40239a
sub rdx, 2
mov rsi, rdx
shr rsi, 0x3f
add rsi, rdx
sar rsi, 1
nop dword [rax]
mov rdx, rsi
shl rdx, 4
add rdx, rdi
movsd xmm0, qword [rdx]
ucomisd xmm0, xmm1
jbe 0x402388
mov ecx, dword [rdx + 8]
shl rax, 4
add rax, rdi
mov dword [rax + 8], ecx
movsd qword [rax], xmm0
lea rax, [rsi - 1]
mov rcx, rax
shr rcx, 0x3f
add rax, rcx
sar rax, 1
test rsi, rsi
mov rcx, rax
mov rax, rsi
jle 0x4023a2
mov rsi, rcx
jmp 0x402448
mov r12d, eax
xor ebx, ebx
jmp 0x4024c0
lea rsi, [rdx + 1]
mov qword [rdi + 8], rsi
movzx eax, byte [rdx]
mov rdx, rsi
lea esi, [rax - 0x30]
cmp esi, 9
ja 0x402197
lea esi, [r12 + r12*4]
lea r12d, [rax + rsi*2 - 0x30]
cmp rdx, rcx
jb 0x40249d
jmp 0x402177
mov ebx, eax
xor r13d, r13d
jmp 0x4024fe
lea rax, [rdx + 1]
mov qword [rdi + 8], rax
movzx eax, byte [rdx]
lea edx, [rax - 0x30]
cmp edx, 9
ja 0x402203
mov rdi, qword [rip + 0x201bd1]
lea edx, [rbx + rbx*4]
lea ebx, [rax + rdx*2 - 0x30]
mov rcx, qword [rdi + 0x10]
mov rdx, qword [rdi + 8]
cmp rdx, rcx
jb 0x4024d1
call sym.imp.__uflow
jmp 0x4021f7
nop dword [rax]
mov rdi, qword [rsp + 0x50]
cmp rdi, r8
jne 0x4022f0
test rdi, rdi
je 0x402528
call sym.operatordelete
movsxd rbx, dword [rsp + 0x30]
mov rax, qword [r15 + 8]
cmp rax, qword [r15 + 0x10]
lea rsi, [r12 + rbx*8]
je 0x4025d2
test rax, rax
movsd xmm0, qword [rsi]
je 0x40254c
movsd qword [rax], xmm0
add rax, 8
mov qword [r15 + 8], rax
test r12, r12
je 0x402561
mov rdi, r12
call sym.operatordelete
add dword [rsp + 0x24], 1
mov eax, dword [rsp + 0x24]
cmp dword [rsp + 0x20], eax
jne 0x402118
jmp 0x401fe7
nop dword [rax]
mov ecx, dword [rdx + 8]
shl rax, 4
add rax, rdi
mov dword [rax + 8], ecx
movsd qword [rax], xmm0
lea rax, [rsi - 1]
mov rcx, rax
shr rcx, 0x3f
add rax, rcx
sar rax, 1
test rsi, rsi
mov rcx, rax
mov rax, rsi
jle 0x4022cd
mov rsi, rcx
jmp 0x40229b
lea rsi, [rsp + 0x40]
lea rdi, [rsp + 0x50]
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_M_emplace_back_aux_std::pair_double_int__
mov r8, qword [rsp + 0x58]
jmp 0x40240e
mov rdi, r15
call sym.std::vector_double_std::allocator_double__::_M_emplace_back_aux_doubleconst__
jmp 0x402554
xor eax, eax
jmp 0x401e48
xor eax, eax
nop dword [rax + rax]
movsd xmm0, qword [r10 + rax*8 + obj.d]
addsd xmm0, qword [r9 + obj.d]
minsd xmm0, qword [rsi + rax*8 + obj.d]
movsd qword [rsi + rax*8 + obj.d], xmm0
add rax, 1
cmp ebx, eax
jg 0x4025f0
jmp 0x401e83
mov rbx, rax
test r12, r12
je 0x402632
mov rdi, r12
call sym.operatordelete
mov rdi, qword [r15]
test rdi, rdi
je 0x40263f
call sym.operatordelete
cmp rbp, qword [rsp + 0x18]
mov r12, rbp
je 0x402662
mov rdi, qword [r12]
test rdi, rdi
je 0x402657
call sym.operatordelete
add r12, 0x18
cmp qword [rsp + 0x18], r12
jne 0x402649
test rbp, rbp
je 0x40266f
mov rdi, rbp
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
nop dword [rax]
lea rdx, [rsp + 0x50]
lea rsi, [rsp + 0x40]
mov rdi, r13
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::_M_emplace_back_aux_int__double_
jmp 0x401fa2
mov rbx, rax
jmp 0x40263f
mov rbx, rax
jmp 0x402632
mov rdi, qword [rsp + 0x50]
mov rbx, rax
test rdi, rdi
je 0x402625
call sym.operatordelete
jmp 0x402625
movabs rbx, 0x1fffffffffffffff
cmp qword [rsp + 0x28], rbx
ja 0x402805
mov rbx, qword [rsp + 0x38]
mov rdi, rbx
call sym.operatornew
xor esi, esi
mov rdx, rbx
mov rdi, rax
mov r12, rax
call sym.imp.memset
mov rax, rbx
add rax, r12
cmp r12, rax
je 0x402228
lea rdx, [r12 + 8]
sub rax, rdx
shr rax, 3
lea rcx, [rax + 1]
mov rsi, rax
mov rax, r12
shl rax, 0x3c
shr rax, 0x3f
cmp rax, rcx
cmova rax, rcx
cmp rcx, 6
ja 0x4027f7
mov rax, rcx
movsd xmm4, qword [rip + 0x679]
cmp rax, 1
movsd qword [r12], xmm4
je 0x402797
cmp rax, 2
movsd qword [r12 + 8], xmm4
lea rdx, [r12 + 0x10]
je 0x402797
cmp rax, 3
movsd qword [r12 + 0x10], xmm4
lea rdx, [r12 + 0x18]
je 0x402797
cmp rax, 4
movsd qword [r12 + 0x18], xmm4
lea rdx, [r12 + 0x20]
je 0x402797
cmp rax, 5
movsd qword [r12 + 0x20], xmm4
lea rdx, [r12 + 0x28]
je 0x402797
movsd qword [r12 + 0x28], xmm4
lea rdx, [r12 + 0x30]
cmp rcx, rax
je 0x402228
mov rdi, rcx
sub rdi, rax
lea rcx, [rdi - 2]
shr rcx, 1
add rcx, 1
cmp rsi, rax
lea r8, [rcx + rcx]
je 0x4027e6
movapd xmm6, xmmword [rip + 0x5fe]
lea rsi, [r12 + rax*8]
xor eax, eax
add rax, 1
add rsi, 0x10
movaps xmmword [rsi - 0x10], xmm6
cmp rax, rcx
jb 0x4027c8
cmp r8, rdi
lea rdx, [rdx + r8*8]
je 0x402228
movsd xmm7, qword [rip + 0x5c2]
movsd qword [rdx], xmm7
jmp 0x402228
test rax, rax
jne 0x40272f
mov rdx, r12
jmp 0x4027a0
mov edi, str.vector::_M_default_append
call sym.std::__throw_length_error
nop
push r15
push r14
mov r15, rdx
push r13
push r12
mov r14, rsi
push rbp
push rbx
mov rbx, rdi
sub rsp, 8
mov r8, qword [rdi + 8]
mov r9, qword [rdi]
mov rcx, r8
sub rcx, r9
mov rax, rcx
sar rax, 4
test rax, rax
je 0x4028f8
lea rdx, [rax + rax]
cmp rax, rdx
jbe 0x402902
mov rbp, -0x10
mov rdi, rbp
call sym.operatornew
mov r8, qword [rbx + 8]
mov r9, qword [rbx]
lea r13, [rax + 0x10]
mov r12, rax
add rbp, rax
mov rcx, r8
mov rdi, r9
sub rcx, r9
add rcx, r12
mov eax, dword [r14]
movsd xmm0, qword [r15]
je 0x40288e
movsd qword [rcx + 8], xmm0
mov dword [rcx], eax
cmp r8, rdi
je 0x4028d0
mov rdx, rdi
mov rcx, r12
nop dword [rax]
test rcx, rcx
je 0x4028b3
mov r9, qword [rdx]
mov r10, qword [rdx + 8]
mov qword [rcx], r9
mov qword [rcx + 8], r10
add rdx, 0x10
add rcx, 0x10
cmp rdx, r8
jne 0x4028a0
lea rax, [rdi + 0x10]
sub rdx, rax
and rdx, 0xfffffffffffffff0
lea r13, [r12 + rdx + 0x20]
test rdi, rdi
je 0x4028da
call sym.operatordelete
mov qword [rbx], r12
mov qword [rbx + 8], r13
mov qword [rbx + 0x10], rbp
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
mov ebp, 0x10
jmp 0x402858
movabs rsi, 0xfffffffffffffff
cmp rdx, rsi
ja 0x402851
test rdx, rdx
jne 0x40292d
mov rdi, r9
mov r13d, 0x10
xor ebp, ebp
xor r12d, r12d
jmp 0x40287a
shl rax, 5
mov rbp, rax
jmp 0x402858
nop dword [rax]
push r14
push r13
push r12
push rbp
mov r12, rsi
push rbx
mov rax, qword [rdi + 8]
mov rbx, rdi
sub rax, qword [rdi]
sar rax, 3
test rax, rax
je 0x402978
lea rdx, [rax + rax]
cmp rax, rdx
jbe 0x4029f1
mov r13, -8
jmp 0x40297e
nop dword [rax]
mov r13d, 8
mov rdi, r13
call sym.operatornew
mov rbp, rax
mov r14, qword [rbx]
mov rdx, qword [rbx + 8]
movsd xmm0, qword [r12]
mov r12, rbp
sub rdx, r14
mov rax, rdx
sar rax, 3
add r12, rdx
je 0x4029ae
movsd qword [r12], xmm0
test rax, rax
jne 0x4029e0
add r12, 8
test r14, r14
je 0x4029c4
mov rdi, r14
call sym.operatordelete
mov qword [rbx], rbp
add rbp, r13
mov qword [rbx + 8], r12
mov qword [rbx + 0x10], rbp
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax + rax]
mov rsi, r14
mov rdi, rbp
add r12, 8
call sym.imp.memmove
jmp 0x4029bc
movabs rcx, 0x1fffffffffffffff
cmp rdx, rcx
ja 0x40296b
xor r13d, r13d
xor ebp, ebp
test rdx, rdx
je 0x402989
shl rax, 4
mov r13, rax
jmp 0x40297e
nop
lea rax, [rdx - 1]
push r12
push rbp
mov r8, rsi
push rbx
mov rbp, rax
shr rbp, 0x3f
add rbp, rax
sar rbp, 1
cmp rsi, rbp
jl 0x402a64
jmp 0x402b98
nop word [rax + rax]
mov ebx, dword [r10 + 8]
shl r8, 4
add r8, rdi
cmp rax, rbp
movsd qword [r8], xmm1
mov dword [r8 + 8], ebx
jge 0x402ac0
mov r8, rax
lea r9, [r8 + 1]
lea r11, [r9 + r9]
shl r9, 5
add r9, rdi
lea rax, [r11 - 1]
movsd xmm2, qword [r9]
mov r10, rax
shl r10, 4
add r10, rdi
movsd xmm1, qword [r10]
ucomisd xmm2, xmm1
ja 0x402a48
ucomisd xmm1, xmm2
ja 0x402ab0
mov r12d, dword [r10 + 8]
mov ebx, dword [r9 + 8]
cmp ebx, r12d
jle 0x402ab4
mov ebx, r12d
jmp 0x402a4c
nop dword [rax]
mov ebx, dword [r9 + 8]
mov r10, r9
movapd xmm1, xmm2
mov rax, r11
jmp 0x402a4c
test dl, 1
jne 0x402adf
sub rdx, 2
mov r8, rdx
shr r8, 0x3f
add rdx, r8
sar rdx, 1
cmp rdx, rax
je 0x402b70
cmp rax, rsi
jle 0x402b23
lea rdx, [rax - 1]
mov r8, rdx
shr r8, 0x3f
add r8, rdx
sar r8, 1
nop dword [rax]
mov r10, r8
shl r10, 4
add r10, rdi
movsd xmm1, qword [r10]
ucomisd xmm1, xmm0
ja 0x402b38
ucomisd xmm0, xmm1
ja 0x402b1b
mov edx, dword [r10 + 8]
cmp ecx, edx
jl 0x402b3c
shl rax, 4
lea r10, [rdi + rax]
movsd qword [r10], xmm0
mov dword [r10 + 8], ecx
pop rbx
pop rbp
pop r12
ret
nop dword [rax]
mov edx, dword [r10 + 8]
shl rax, 4
add rax, rdi
mov dword [rax + 8], edx
lea rdx, [r8 - 1]
movsd qword [rax], xmm1
mov rax, rdx
shr rax, 0x3f
add rdx, rax
mov rax, r8
sar rdx, 1
cmp rsi, r8
jge 0x402b23
mov r8, rdx
jmp 0x402af8
nop dword [rax + rax]
lea rax, [rax + rax + 1]
mov rdx, rax
shl rdx, 4
add rdx, rdi
mov r8d, dword [rdx + 8]
movsd xmm1, qword [rdx]
movsd qword [r10], xmm1
mov dword [r10 + 8], r8d
mov r10, rdx
jmp 0x402adf
mov rax, rsi
shl rax, 4
test dl, 1
lea r10, [rdi + rax]
mov rax, rsi
je 0x402ac5
jmp 0x402b23
nop word cs:[rax + rax]
nop
push r14
push r13
mov r14, rsi
push r12
push rbp
mov rbp, rdi
push rbx
mov r8, qword [rdi + 8]
mov r9, qword [rdi]
mov rdx, r8
sub rdx, r9
mov rax, rdx
sar rax, 4
test rax, rax
je 0x402c90
lea rcx, [rax + rax]
cmp rax, rcx
jbe 0x402c9a
mov rbx, -0x10
mov rdi, rbx
call sym.operatornew
mov r8, qword [rbp + 8]
mov r9, qword [rbp]
lea r13, [rax + 0x10]
mov r12, rax
add rbx, rax
mov rdx, r8
mov rdi, r9
sub rdx, r9
add rdx, r12
je 0x402c35
mov r9, qword [r14]
mov r10, qword [r14 + 8]
mov qword [rdx], r9
mov qword [rdx + 8], r10
cmp r8, rdi
je 0x402c70
mov rdx, rdi
mov rcx, r12
test rcx, rcx
je 0x402c53
mov r9, qword [rdx]
mov r10, qword [rdx + 8]
mov qword [rcx], r9
mov qword [rcx + 8], r10
add rdx, 0x10
add rcx, 0x10
cmp rdx, r8
jne 0x402c40
lea rax, [rdi + 0x10]
sub rdx, rax
and rdx, 0xfffffffffffffff0
lea r13, [r12 + rdx + 0x20]
test rdi, rdi
je 0x402c7a
call sym.operatordelete
mov qword [rbp], r12
mov qword [rbp + 8], r13
mov qword [rbp + 0x10], rbx
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop
mov ebx, 0x10
jmp 0x402bff
movabs rsi, 0xfffffffffffffff
cmp rcx, rsi
ja 0x402bf8
test rcx, rcx
jne 0x402cc5
mov rdi, r9
mov r13d, 0x10
xor ebx, ebx
xor r12d, r12d
jmp 0x402c22
shl rax, 5
mov rbx, rax
jmp 0x402bff
nop word cs:[rax + rax]
nop dword [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x2010f6]
push rbp
lea rbp, [rip + 0x2010fe]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x402d36
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x402d20
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
and eax, 0x6c25666c
add byte [rsi + 0x65], dh
jbe 0x402dd2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x402de8
je 0x402ddd
jo 0x402df1
outsb dx, byte gs:[rsi]
add byte fs:[rbx + 0x61], al
jae 0x402dee
and byte [rbx], ah
and eax, 0x203a64
and eax, 0x6c30312e
and ax, 0x63
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
mov edi, 0x78b58c40
sbb eax, 0x554415af
push rbp
push rbp
push rbp
push rbp
push rbp
push rbp
jg 0x402db9
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x55], dl
push rbp
push rbp
push rbp
push rbp
jg 0x402e1e
push rbp
push rbp
push rbp
push rbp
push rbp
push rbp
jg 0x402dd2
add dword [rbx], ebx
add edi, dword [rbx]
mov ah, 0
add byte [rax], al
adc eax, 0x70000000
fdiv st(7), st(0)
inc dword [rax]
add dword [rax], eax
add byte [rax - 0x37000023], dh
add al, 0
add al, dl
fdivp st(7)
dec dword [rax]
add eax, 0xdf000000
call rax
add byte [rax], al
add byte [rax], al
loopne 0x402dfe
ljmp [rax]
add dword [rax], eax
add al, al
loopne 0x402e06
lcall [rax + 1]
add byte [rax], al
movabs al, byte [0x8000000188ffffe1]
loop 0x402e16
inc eax
add dword [rax], eax
add byte [rax], al
in al, 0xff
call qword [rax]
add al, byte [rax]
add byte [rax], dl
jmp qword [rax + 2]
add byte [rax], al
sub bl, 0xff
lcall [rax - 0x1ffffffe]
jmp 0x402e36
mov eax, 0x70000002
in al, dx
push rax
add al, byte [rax]
add byte [rax], dl
in eax, dx
ljmp [rax]
add eax, dword [rax]
add byte [rax - 0x13], ah
jmp qword [rax + 4]
add byte [rax], al
cli
inc dword [rax + 3]
add byte [rax], al
jo 0x402e59
call qword [rax + 0x50000003]
cld
call rax
add eax, dword [rax]
add al, dh
std
inc dword [rax]
add al, 0
add byte [rax], dl
jmp qword [rax]
add eax, 0xff800000
ljmp [rax + 5]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402ea7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub dh, bl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402ed7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push 0x30ffffdb
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
add byte [rax], r8b
add al, dl
fdivp st(7)
push qword [rsi]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x47
and byte [rdx], al
movabs eax, dword [0xe41100e41180e0a]
or byte [rbx + rcx], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
je 0x402f2e
add byte [rax], al
fiadd dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x47
and byte [rdx], al
mov ebx, 0x41180e0a
adc byte [rcx + 0xe], al
or byte [rdx + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rax], dl
loopne 0x402f62
call rbp
add byte [rax], al
add byte [rax], al
adc byte [rbp + 0x180e4202], cl
mov word [rbx], es
and byte [rsi + 0x280e4104], al
add dword [rip + 0x2300e51], -0x4c
sub byte [rsi + rcx + 0x20], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax + rax], cl
add ah, bl
add byte [rax], al
add byte [rax + 0x7dffffe0], bh
add dword [rax], eax
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx + 0x400e5107], al
add ecx, dword [rbp + 1]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx + rax], ch
add byte [rax], al
call 0x10402fce
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rbp + 0x180e4202], cl
mov word [rbx], es
and byte [rsi + 0x280e4104], al
add dword [rip + 0x3500e46], 0x63
add al, 0xa
sub byte [rcx + 0xe], al
and byte [rcx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add cl, byte [rax + 0xa]
sub byte [rbp + 0xe], al
and byte [rcx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rsi + 0xb], cl
add byte [rax + rax], dh
add byte [rax], al
jl 0x403037
add byte [rax], al
test al, 0xe7
jmp qword [rbp + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x46
add cl, dil
or cl, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rdi + 0xb], al
add dh, byte [rsi + 0xa]
sbb byte [rsi + rcx + 0x10], al
or byte [rbp + 0xb], al
sbb al, 0
add byte [rax], al
mov ah, 1
add byte [rax], al
loopne 0x40305a
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], cl
adc byte [rbx - 0x3cb7fdfe], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], ah
jmp 0xc73095
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rbx + 0xe]
and byte [rbx + 0xa6f0204], al
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
sbb byte [rbp + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
or al, 2
add byte [rax], al
js 0x4030b3
call qword [rdx]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x4a
and byte [rdx], al
je 0x4030eb
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rcx + 0xb], al
sbb byte [rbp + 0xe], al
adc byte [rcx + 0xe], al
or byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add r8b, byte [rax]
add al, ah
jmp 0x8e3105
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rdx + rax], bl
add al, bh
idiv bh
ljmp [rcx]
add dword [rax], eax
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x400e4707], al
add al, dl
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbp + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
lodsb al, byte [rsi]
add al, byte [rax]
add al, bl
idiv edi
fiadd word [rax]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e44
add cl, byte [rax + 0x41280e0a]
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rsi + 0xb], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
in al, dx
add al, byte [rax]
add byte [rax - 8], bh
call qword [rcx + rax + 0x46000000]
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rsi + rcx + 0x20]
add dword [rbx + rax], 2
add dword [rdx], ecx
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax + 0xb], cl
add byte [rax], al
cmp al, 0
add byte [rax], al
sbb al, 3
add byte [rax], al
call 0x124031d6
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e44
add bh, byte [rcx + 0x41280e0a]
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdx + 0xb], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x403231
add eax, dword [rax + 0xb]
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x64000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
clc
call 0xd20323d
add byte [rax], al
add al, 0x54
xor eax, dword [rax]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x3ff1b8f9], al
add dword [rbx], eax
add al, 0xa
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add ebx, edx
add cl, byte [rsi]
enter 0x6001, 0xe
rol byte [rcx], 1
enter 0x4101, 0xe
rol byte [rcx], 0
add byte [rax], al
add byte [rax], al
cmp al, 0
add byte [rax], al
mov word [rax], es
add byte [rax], al
loopne 0x40327a
call qword [rsi]
add dword [rax], eax
add byte [rsi + rcx*4], al
xor eax, dword [rax]
adc byte [rbp + 0x180e4202], cl
mov word [rbx], es
and byte [rsi + 0x280e4104], al
add dword [rip + 0x2600e4a], -0x23
or cl, byte [rsi]
sub byte [rcx + 0xe], al
and byte [rcx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax + rax], dl
add byte [rax], al
and al, 4
add byte [rax], al
rcr cl, 0xff
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rbp + 0xe], bl
or byte [rax], al
add byte [rax], r8b
add byte [rsp + rax], bh
add byte [rax], al
call 0x664032f6
add byte [rax], al
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x403332
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
test byte [rax + rax], al
add byte [rax], dl
cli
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
pop rsp
mov ah, 0xa
add byte [rax], al
popfq
or al, 0xaa
add esp, ebp
add byte [rbx + 0x16f1050e], ch
add bl, dl
adc eax, dword [rip - 0x6cffe914]
adc eax, 0x16f105
movsd dword [rdi], dword ptr [rsi]
adc eax, 0x15f205
ret 0x516
add byte [rax], al
fst qword [rsi]
add eax, 0xa90016e7
mov dh, 2
in al, dx
add bh, bh
inc dword [rcx]
sub byte [rsi], ah
add byte [rax], al
pop rbp
test qword [rcx], 0x5028c00
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xa00000000000400d]
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400d], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
cmp eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], ch
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dh
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 8], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4007], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx + 7], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400a], al
add byte [rax], al
add byte [rsi + 0x400a], dl
add byte [rax], al
add byte [rsi + 0x400a], ah
add byte [rax], al
add byte [rsi + 0x400a], dh
add byte [rax], al
add dh, al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0xa, al
add byte [rax], al
add byte [rax], al
add dh, dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
or eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
or r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or ax, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x404130
je 0x404139
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x404147
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x404144
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], ch
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx + 7], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax + 0x4007], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax], ah
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, byte [rax]
push 0x4008
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax], bl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, 0
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x400b7000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0x400b], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x2d], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add al, dl
sub eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, byte [rax]
mov byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rbx + rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40a31a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x603df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x6040], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax + 0xd], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400d], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x400d], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40a4b2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2000000], ch
add byte [rsi], cl
add byte [rax + 0x400c], ah
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x617f], ah
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
add byte [rcx], al
add byte [rdx], dl
add byte [rax + 0x33], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add al, dl
sub eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x1000001
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
clc
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 1
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x40a5ba
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax + 0x200000], dh
sbb al, byte [rax]
test al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
jns 0x404624
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 1], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x4045eb
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rcx], eax
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x2d], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000004], bh
add byte [rsi], cl
add al, dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000001], dl
add byte [rsi], cl
add al, al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x29], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 2], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
fisttp word [rax + rax]
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000001], dl
add byte [rdi], cl
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
add al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add al, dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
clts
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000002], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], ch
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
loopne 0x40479a
add byte [rax], al
add byte [rax], al
add byte [rax + 0x138], al
add byte [rax], al
add bl, dl
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000003], dl
add byte [rsi], cl
add byte [rax + 0x10], dl
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rbx], 1
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
ror byte [rdx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
add eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add al, ah
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add al, 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add al, 0
add byte [rcx], dl
add byte [rax], dl
add byte [rax + 0x2d], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x404846
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, byte [rax + rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x1a], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0x20000004], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x10000004], dh
add byte [rdx], bl
add byte [rax + 0x6040], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000004], bh
add byte [rsi], cl
add byte [rax + 0x19], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
add al, 0
add byte [rcx], dl
add byte [rbx], bl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11000004], dh
add byte [rbx], bl
add byte [rax + 0x617c], al
add byte [rax], al
add byte [rax], ah
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add bh, bl
add al, 0
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x6040], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
add al, 0
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x6040], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add al, 0
add byte [rdx], dl
add byte [rsi], cl
add al, ah
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rip + 0x120000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x12000005
add byte [rsi], cl
add byte [rax + 0x400e], dl
add byte [rax], al
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add eax, 0x120000
add byte [rax + 0x4019], dh
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rdx + 5], ch
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
mov eax, 0x6040
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 5], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
add eax, 0x120000
add byte [rax + 0xf], dh
add byte [rax], al
add byte [rax], al
add ch, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000005], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000005], dh
add byte [rsi], cl
add al, al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add byte [rax + 0x617f], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
add eax, 0x220000
add byte [rax], dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0x12000000
add byte [rsi], cl
add al, dl
or eax, 0x40
add byte [rax], al
mov dh, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rsi], 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rsi], 0
add byte [rax], dl
add byte [rdx], bl
add byte [rax + 0x6040], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x12404aa3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x29], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 7], cl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
enter 0x6040, 0
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x400b], al
add byte [rax], al
add byte [rsi], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add eax, 0x120000
or eax, dword [rax]
sbb byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x404ba2
jne 0x404b96
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x404b56
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404bd4
jb 0x404bda
pop rdi
jne 0x404be3
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x404bdd
je 0x404bd9
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404bf9
jb 0x404bff
pop rdi
jne 0x404c08
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x404c0b
jns 0x404bfb
outsb dx, byte gs:[rsi]
je 0x404c12
jns 0x404ba2
jb 0x404c06
insd dword [rdi], dx
pop rdi
jne 0x404c18
insd dword [rdi], dx
jns 0x404bae
pop rdi
pop rdi
jb 0x404c14
insd dword [rdi], dx
pop rdi
jne 0x404c26
insd dword [rdi], dx
jns 0x404c1b
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404c26
jns 0x404c26
outsb dx, byte gs:[rsi]
je 0x404c3d
jns 0x404bcd
insd dword [rdi], dx
imul ebp, dword [rsi + 0x2e], 0x707063
pop rdi
pop rdi
pop rdi
jae 0x404c56
pop rdi
pop r15
pop rdi
pop rdx
jb 0x404c4f
jb 0x404c41
imul eax, dword [rax], 0x74535a5f
cmp byte [rdi + 0x5f], r11b
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404caf
jns 0x404caf
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404cc0
jns 0x404cc0
jae 0x404cd7
jb 0x404cda
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x404ca7
xor byte [rdi + 0x5f], bl
je 0x404ce2
jb 0x404ceb
ja 0x404cdd
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x404cec
pop rdi
jb 0x404cfa
outsd dx, dword [rsi]
jb 0x404cdb
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
insd dword [rdi], dx
insd dword [rdi], dx
jae 0x404d05
je 0x404ce2
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6c5f5f00
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x404cfb
jbe 0x404d2c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x404d03
jo 0x404d32
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x404d54
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x404d6c
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x404d42
jo 0x404d4f
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x404d3f
jbe 0x404d70
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x404d8c
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x404da4
push r10
jbe 0x404d7a
jo 0x404d87
push rsp
pop rdi
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x404db8
jb 0x404dbb
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x404dad
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x404dce
jae 0x404d5e
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x404da5
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor eax, 0x766c6f73
jbe 0x404d7c
pop rdi
pop rdi
jo 0x404df2
imul ebp, dword [rsi + 0x74], 0x68635f66
imul eax, dword [rax + 0x40], 0x47
pop r15
xor ch, byte [rsi]
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404dd4
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
ja 0x404e32
imul esi, dword [rbp + 0x72], 0x5f006369
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x404e47
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x755f5f00
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x404e2e
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x635f5f00
js 0x404e61
pop rdi
je 0x404e69
js 0x404e6f
je 0x404e48
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x365a5f00
ja 0x404e8c
imul esi, dword [rbp + 0x72], 0x5f006378
pop rdx
push rbx
je 0x404e57
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x404ea3
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404e9c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404eb5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x404e8c
jo 0x404ebb
imul esi, dword [rdx + 0x49], 0x53456964
je 0x404e99
jbe 0x404eca
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insb byte [rdi], dx
push rbx
xor ebx, dword [rdi + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x404ef8
xor dword [rip + 0x6574495f], esi
jb 0x404eec
movsxd rbp, dword [rdi + 0x6d]
jo 0x404ef1
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x404f02
je 0x404f05
jb 0x404eeb
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x404eff
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop rdi
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
jb 0x404f23
jb 0x404f15
push rbx
je 0x404efe
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404f3d
movsxd rbx, dword [rdi + 0x73]
je 0x404f4b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404f46
je 0x404f5b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x404f36
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
insd dword [rdi], dx
outsd dx, dword [rsi]
pop rdi
jo 0x404f95
ja 0x404fa0
js 0x404fa2
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x404f99
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x49], bl
pop r15
jae 0x404fc1
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x404f92
jbe 0x404fc3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x404ff0
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x405008
push r10
imul esp, dword [rbp + rax*2 + 0x45], 0x70447645
push r12
pop rdi
add byte [rbx + 0x63], dh
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x365a5f00
ja 0x405029
imul esi, dword [rbp + 0x72], 0x63634b50
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x40502c
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x405041
pop rdi
jae 0x405057
jb 0x40505a
add byte [rdi + 0x5a], bl
ja 0x40505e
imul esi, dword [rbp + 0x72], 0x634b50
jae 0x40506a
imul ebp, dword fs:[rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545f5f00
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
jae 0x405087
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x656d0074
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40509c
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x365a5f00
jb 0x4050af
jb 0x4050a1
js 0x405051
pop rdi
pop rdx
ja 0x4050c8
imul esi, dword [rbp + 0x72], 0x534e4b52
je 0x405097
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4050d6
movsxd rbx, dword [rdi + 0x73]
je 0x4050e4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4050df
je 0x4050f4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r8, dword [r8]
pop rdi
pop rdi
jae 0x40510a
pop rdi
jae 0x40510e
jb 0x405111
add byte [rdi + 0x5f], bl
jae 0x405116
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
jb 0x405124
jb 0x405114
movsxd rax, dword [rax]
pop rdi
pop rdi
outsd dx, dword [rsi]
jbe 0x405130
jb 0x405133
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x405111
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40511a
jbe 0x40514b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405122
jo 0x405151
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x405173
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40518b
push r11
xor dword [rdi + 0x45], ebx
jbe 0x405161
jo 0x40516e
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40515e
jbe 0x40518f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4051bc
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4051d4
push rdx
imul esp, dword [rbp + rax*2 + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4051a1
pop rdi
pop rdi
je 0x4051dd
jb 0x4051e6
ja 0x4051d8
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4051ce
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40520d
movsxd rbx, dword [rdi + 0x73]
je 0x40521b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405216
je 0x40522b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jne 0x405241
je 0x405235
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x40524f
add byte [rdi + 0x5f], bl
js 0x40526c
pop rdi
jo 0x40525c
jb 0x40526c
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x405282
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x405291
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x4052a4
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x405277
jbe 0x4052a8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4052c4
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4052dc
push rdx
jbe 0x4052b2
jo 0x4052bf
push rsp
pop rdi
add byte [rbx + 0x74], dh
outsd dx, dword fs:[rsi]
jne 0x4052ed
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x69616d00
outsb dx, byte [rsi]
add byte [rax], al
jae 0x405309
insd dword [rdi], dx
je 0x4052f4
add byte [rsi], ch
jae 0x40530c
jb 0x40530e
add byte [rsi], ch
jae 0x405308
jae 0x405316
jb 0x405318
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405319
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405327
outsb dx, byte cs:[esi]
jne 0x4052f5
jne 0x405333
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x405303
push 0x687361
jns 0x40534c
jae 0x405359
insd dword [rdi], dx
add byte [rsi], ch
jns 0x405354
jae 0x40535c
jb 0x4052ea
outsb dx, byte cs:[esi]
jne 0x40531d
jbe 0x405356
jb 0x405366
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40532a
jbe 0x405363
jb 0x405373
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40536e
insb byte [rdi], dx
jns 0x40537d
add byte [rsi], ch
jb 0x405378
insb byte [rdi], dx
jo 0x405384
je 0x40531a
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x405353
outsd dx, dword [esi]
je 0x405329
je 0x405391
js 0x4053a2
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x4053a7
je 0x40539d
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x4053c0
jo 0x4053d4
pop rdi
je 0x4053c4
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4053d2
jns 0x405373
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x4053ee
jns 0x40537f
push 0x63
jb 0x405384
jns 0x4053f6
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x405400
je 0x405396
je 0x4053fc
add byte [rsi], ch
jae 0x405413
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4053aa
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rip + 0x40], al
add byte [rax], al
sub byte [rip], al
add byte [rax], al
and al, byte [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 7], cl
add byte [rax], al
add byte [rax], al
add byte [rdx + 7], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4007], al
add byte [rax], al
add byte [rax + 7], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 8], ch
add byte [rax], al
add byte [rax], al
add byte [rax + 8], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400b], al
add byte [rax], al
add byte [rax + 0xb], al
add byte [rax], al
add dl, dl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2d], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2d], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x4057d2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
shr byte [rip + 0x40], 1
add byte [rax], al
shr byte [rip], 1
add byte [rax], al
mov ah, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x402e], cl
add byte [rax], al
add byte [rax + 0x2e], cl
add byte [rax], al
add ah, cl
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
call 0x40590a
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
clc
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], ch
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], bh
add byte [rax], al
add al, ch
add dword ds:[rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], bh
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rdx], ss
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
