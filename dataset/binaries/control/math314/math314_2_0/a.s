xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60b0df
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x400cf0
mov eax, 0
test rax, rax
je 0x400cf0
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400d38
mov eax, 0
test rax, rax
je 0x400d38
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x20a399], 0
jne 0x400d5a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x20a386], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400d70
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400d6b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 8], 0
mov rax, qword [rbp - 0x18]
mov dword [rax], 0
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x2d
jne 0x400dba
mov dword [rbp - 8], 1
jmp 0x400dd2
cmp dword [rbp - 4], 0x2f
jle 0x400da3
cmp dword [rbp - 4], 0x39
jg 0x400da3
mov eax, dword [rbp - 4]
lea edx, [rax - 0x30]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x2f
jle 0x400e07
cmp dword [rbp - 4], 0x39
jg 0x400e07
mov rax, qword [rbp - 0x18]
mov edx, dword [rax]
mov eax, edx
shl eax, 2
add eax, edx
add eax, eax
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
lea edx, [rax - 0x30]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
jmp 0x400dd2
cmp dword [rbp - 8], 0
je 0x400e1d
mov rax, qword [rbp - 0x18]
mov eax, dword [rax]
neg eax
mov edx, eax
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 8], 0
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x2d
jne 0x400e55
mov dword [rbp - 8], 1
jmp 0x400e71
cmp dword [rbp - 4], 0x2f
jle 0x400e3e
cmp dword [rbp - 4], 0x39
jg 0x400e3e
mov eax, dword [rbp - 4]
sub eax, 0x30
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x2f
jle 0x400eb1
cmp dword [rbp - 4], 0x39
jg 0x400eb1
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax]
mov rax, rdx
shl rax, 2
add rax, rdx
add rax, rax
mov rdx, rax
mov eax, dword [rbp - 4]
cdqe
add rax, rdx
lea rdx, [rax - 0x30]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
jmp 0x400e71
cmp dword [rbp - 8], 0
je 0x400ecb
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
neg rax
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 8], 0
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x20
je 0x400ee1
cmp dword [rbp - 4], 0xa
je 0x400ee1
cmp dword [rbp - 4], 0xd
je 0x400ee1
cmp dword [rbp - 4], 9
je 0x400ee1
cmp dword [rbp - 4], -1
jne 0x400f09
jmp 0x400ee1
nop
mov eax, dword [rbp - 8]
lea edx, [rax + 1]
mov dword [rbp - 8], edx
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
mov edx, dword [rbp - 4]
mov byte [rax], dl
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x20
je 0x400f62
cmp dword [rbp - 4], 0xa
je 0x400f62
cmp dword [rbp - 4], 0xd
je 0x400f62
cmp dword [rbp - 4], 9
je 0x400f62
cmp dword [rbp - 4], -1
je 0x400f62
mov eax, dword [rbp - 8]
lea edx, [rax + 1]
mov dword [rbp - 8], edx
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
mov edx, dword [rbp - 4]
mov byte [rax], dl
jmp 0x400f22
mov eax, dword [rbp - 8]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
mov byte [rax], 0
mov eax, dword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x20
je 0x400f83
cmp dword [rbp - 4], 0xa
je 0x400f83
cmp dword [rbp - 4], 0xd
je 0x400f83
cmp dword [rbp - 4], 9
je 0x400f83
cmp dword [rbp - 4], -1
jne 0x400fab
jmp 0x400f83
nop
mov eax, dword [rbp - 4]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x20
je 0x400ffc
cmp dword [rbp - 4], 0xa
je 0x400ffc
cmp dword [rbp - 4], 0xd
je 0x400ffc
cmp dword [rbp - 4], 9
je 0x400ffc
cmp dword [rbp - 4], -1
je 0x400ffc
mov eax, dword [rbp - 4]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
jmp 0x400fc0
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov dword [rbp - 0x34], edi
mov eax, esi
mov byte [rbp - 0x38], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0x28], 0
mov dword [rbp - 0x24], 0
cmp dword [rbp - 0x34], 0
jns 0x401047
mov dword [rbp - 0x24], 1
neg dword [rbp - 0x34]
cmp dword [rbp - 0x34], 0
je 0x40109d
mov esi, dword [rbp - 0x28]
lea eax, [rsi + 1]
mov dword [rbp - 0x28], eax
mov ecx, dword [rbp - 0x34]
mov edx, 0x66666667
mov eax, ecx
imul edx
sar edx, 2
mov eax, ecx
sar eax, 0x1f
sub edx, eax
mov eax, edx
shl eax, 2
add eax, edx
add eax, eax
sub ecx, eax
mov edx, ecx
movsxd rax, esi
mov byte [rbp + rax - 0x20], dl
mov ecx, dword [rbp - 0x34]
mov edx, 0x66666667
mov eax, ecx
imul edx
sar edx, 2
mov eax, ecx
sar eax, 0x1f
sub edx, eax
mov eax, edx
mov dword [rbp - 0x34], eax
jmp 0x401047
cmp dword [rbp - 0x28], 0
jne 0x4010b3
mov eax, dword [rbp - 0x28]
lea edx, [rax + 1]
mov dword [rbp - 0x28], edx
cdqe
mov byte [rbp + rax - 0x20], 0
cmp dword [rbp - 0x24], 0
je 0x4010c3
mov edi, 0x2d
call sym.imp.putchar_unlocked
mov eax, dword [rbp - 0x28]
lea edx, [rax - 1]
mov dword [rbp - 0x28], edx
test eax, eax
setne al
test al, al
je 0x4010ee
mov eax, dword [rbp - 0x28]
cdqe
movzx eax, byte [rbp + rax - 0x20]
movsx eax, al
add eax, 0x30
mov edi, eax
call sym.imp.putchar_unlocked
jmp 0x4010c3
movsx eax, byte [rbp - 0x38]
mov edi, eax
call sym.imp.putchar_unlocked
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40110e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov eax, esi
mov byte [rbp - 0x3c], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0x28], 0
mov dword [rbp - 0x24], 0
cmp qword [rbp - 0x38], 0
jns 0x401150
mov dword [rbp - 0x24], 1
neg qword [rbp - 0x38]
cmp qword [rbp - 0x38], 0
je 0x4011c7
mov esi, dword [rbp - 0x28]
lea eax, [rsi + 1]
mov dword [rbp - 0x28], eax
mov rcx, qword [rbp - 0x38]
movabs rdx, 0x6666666666666667
mov rax, rcx
imul rdx
sar rdx, 2
mov rax, rcx
sar rax, 0x3f
sub rdx, rax
mov rax, rdx
shl rax, 2
add rax, rdx
add rax, rax
sub rcx, rax
mov rdx, rcx
movsxd rax, esi
mov byte [rbp + rax - 0x20], dl
mov rcx, qword [rbp - 0x38]
movabs rdx, 0x6666666666666667
mov rax, rcx
imul rdx
sar rdx, 2
mov rax, rcx
sar rax, 0x3f
sub rdx, rax
mov rax, rdx
mov qword [rbp - 0x38], rax
jmp 0x401150
cmp dword [rbp - 0x28], 0
jne 0x4011dd
mov eax, dword [rbp - 0x28]
lea edx, [rax + 1]
mov dword [rbp - 0x28], edx
cdqe
mov byte [rbp + rax - 0x20], 0
cmp dword [rbp - 0x24], 0
je 0x4011ed
mov edi, 0x2d
call sym.imp.putchar_unlocked
mov eax, dword [rbp - 0x28]
lea edx, [rax - 1]
mov dword [rbp - 0x28], edx
test eax, eax
setne al
test al, al
je 0x401218
mov eax, dword [rbp - 0x28]
cdqe
movzx eax, byte [rbp + rax - 0x20]
movsx eax, al
add eax, 0x30
mov edi, eax
call sym.imp.putchar_unlocked
jmp 0x4011ed
movsx eax, byte [rbp - 0x3c]
mov edi, eax
call sym.imp.putchar_unlocked
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401238
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 4], 0
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
movzx eax, byte [rax]
test al, al
je 0x401281
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
movzx eax, byte [rax]
movsx eax, al
mov edi, eax
call sym.imp.putchar_unlocked
add dword [rbp - 4], 1
jmp 0x40124d
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov eax, esi
mov byte [rbp - 0x1c], al
mov dword [rbp - 4], 0
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
test al, al
setne al
test al, al
je 0x4012e5
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
movsx eax, al
mov edi, eax
call sym.imp.putchar_unlocked
add dword [rbp - 4], 1
jmp 0x40129c
movsx eax, byte [rbp - 0x1c]
mov edi, eax
call sym.imp.putchar_unlocked
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov eax, esi
mov byte [rbp - 0x1c], al
mov dword [rbp - 4], 0
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
movzx eax, byte [rax]
test al, al
je 0x40133f
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
movzx eax, byte [rax]
movsx eax, al
mov edi, eax
call sym.imp.putchar_unlocked
add dword [rbp - 4], 1
jmp 0x40130b
movsx eax, byte [rbp - 0x1c]
mov edi, eax
call sym.imp.putchar_unlocked
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x10], 1
mov rax, qword [rbp - 0x18]
cqo
idiv qword [rbp - 0x28]
mov qword [rbp - 8], rdx
cmp qword [rbp - 0x20], 0
je 0x4013b2
mov rax, qword [rbp - 0x20]
and eax, 1
test rax, rax
je 0x401399
mov rax, qword [rbp - 0x10]
imul rax, qword [rbp - 8]
cqo
idiv qword [rbp - 0x28]
mov qword [rbp - 0x10], rdx
mov rax, qword [rbp - 8]
imul rax, qword [rbp - 8]
cqo
idiv qword [rbp - 0x28]
mov qword [rbp - 8], rdx
sar qword [rbp - 0x20], 1
jmp 0x401373
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x98
mov qword [rbp - 0x98], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x84]
mov rsi, rdx
mov rdi, rax
call sym.reader_int_int_
mov dword [rbp - 0x74], 0
mov eax, dword [rbp - 0x84]
cmp dword [rbp - 0x74], eax
jge 0x401439
mov eax, dword [rbp - 0x74]
cdqe
shl rax, 3
lea rdx, [rax + obj.s]
mov eax, dword [rbp - 0x74]
cdqe
shl rax, 3
add rax, obj.e
mov rsi, rax
mov edi, str._lf_lf
mov eax, 0
call sym.imp.scanf
add dword [rbp - 0x74], 1
jmp 0x4013f7
mov dword [rbp - 0x70], 0
mov eax, dword [rbp - 0x84]
cmp dword [rbp - 0x70], eax
jge 0x401541
mov dword [rbp - 0x6c], 0
mov eax, dword [rbp - 0x84]
cmp dword [rbp - 0x6c], eax
jge 0x401538
mov eax, dword [rbp - 0x70]
movsxd rdx, eax
mov rax, rdx
shl rax, 2
add rax, rdx
lea rdx, [rax*4]
add rax, rdx
shl rax, 5
lea rdx, [rax + obj.d]
mov eax, dword [rbp - 0x6c]
cdqe
shl rax, 3
add rax, rdx
mov rsi, rax
mov edi, 0x406bb7
mov eax, 0
call sym.imp.scanf
mov eax, dword [rbp - 0x6c]
movsxd rcx, eax
mov eax, dword [rbp - 0x70]
movsxd rdx, eax
mov rax, rdx
shl rax, 2
add rax, rdx
lea rdx, [rax*4]
add rax, rdx
shl rax, 2
add rax, rcx
movsd xmm0, qword [rax*8 + obj.d]
movsd xmm1, qword [rip + 0x5736]
ucomisd xmm0, xmm1
jp 0x40152f
movsd xmm1, qword [rip + 0x5728]
ucomisd xmm0, xmm1
jne 0x40152f
mov eax, dword [rbp - 0x6c]
movsxd rcx, eax
mov eax, dword [rbp - 0x70]
movsxd rdx, eax
mov rax, rdx
shl rax, 2
add rax, rdx
lea rdx, [rax*4]
add rax, rdx
shl rax, 2
add rax, rcx
movsd xmm0, qword [rip + 0x56fa]
movsd qword [rax*8 + obj.d], xmm0
add dword [rbp - 0x6c], 1
jmp 0x401456
add dword [rbp - 0x70], 1
jmp 0x401440
mov dword [rbp - 0x68], 0
mov eax, dword [rbp - 0x84]
cmp dword [rbp - 0x68], eax
jge 0x401573
mov eax, dword [rbp - 0x68]
cdqe
imul rax, rax, 0x328
add rax, obj.d
pxor xmm0, xmm0
movsd qword [rax], xmm0
add dword [rbp - 0x68], 1
jmp 0x401548
mov dword [rbp - 0x64], 0
mov eax, dword [rbp - 0x84]
cmp dword [rbp - 0x64], eax
jge 0x4016b2
mov dword [rbp - 0x60], 0
mov eax, dword [rbp - 0x84]
cmp dword [rbp - 0x60], eax
jge 0x4016a9
mov dword [rbp - 0x5c], 0
mov eax, dword [rbp - 0x84]
cmp dword [rbp - 0x5c], eax
jge 0x4016a0
mov eax, dword [rbp - 0x64]
movsxd rcx, eax
mov eax, dword [rbp - 0x60]
movsxd rdx, eax
mov rax, rdx
shl rax, 2
add rax, rdx
lea rdx, [rax*4]
add rax, rdx
shl rax, 2
add rax, rcx
movsd xmm1, qword [rax*8 + obj.d]
mov eax, dword [rbp - 0x5c]
movsxd rcx, eax
mov eax, dword [rbp - 0x64]
movsxd rdx, eax
mov rax, rdx
shl rax, 2
add rax, rdx
lea rdx, [rax*4]
add rax, rdx
shl rax, 2
add rax, rcx
movsd xmm0, qword [rax*8 + obj.d]
addsd xmm0, xmm1
movsd qword [rbp - 0x30], xmm0
mov eax, dword [rbp - 0x5c]
movsxd rcx, eax
mov eax, dword [rbp - 0x60]
movsxd rdx, eax
mov rax, rdx
shl rax, 2
add rax, rdx
lea rdx, [rax*4]
add rax, rdx
shl rax, 2
add rax, rcx
shl rax, 3
lea rdx, [rax + obj.d]
lea rax, [rbp - 0x30]
mov rsi, rax
mov rdi, rdx
call sym.std::min_double_
movsd xmm0, qword [rax]
mov eax, dword [rbp - 0x5c]
movsxd rcx, eax
mov eax, dword [rbp - 0x60]
movsxd rdx, eax
mov rax, rdx
shl rax, 2
add rax, rdx
lea rdx, [rax*4]
add rax, rdx
shl rax, 2
add rax, rcx
movsd qword [rax*8 + obj.d], xmm0
add dword [rbp - 0x5c], 1
jmp 0x4015a6
add dword [rbp - 0x60], 1
jmp 0x401590
add dword [rbp - 0x64], 1
jmp 0x40157a
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::allocator
mov eax, dword [rbp - 0x84]
movsxd rcx, eax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x50]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::vector
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::_allocator
mov dword [rbp - 0x58], 0
mov eax, dword [rbp - 0x84]
cmp dword [rbp - 0x58], eax
jge 0x4017e3
mov dword [rbp - 0x78], 0
mov edx, dword [rbp - 0x78]
mov eax, dword [rbp - 0x84]
cmp edx, eax
jge 0x4017da
mov eax, dword [rbp - 0x78]
movsxd rcx, eax
mov eax, dword [rbp - 0x58]
movsxd rdx, eax
mov rax, rdx
shl rax, 2
add rax, rdx
lea rdx, [rax*4]
add rax, rdx
shl rax, 2
add rax, rcx
movsd xmm1, qword [rax*8 + obj.d]
mov eax, dword [rbp - 0x58]
cdqe
movsd xmm0, qword [rax*8 + obj.e]
ucomisd xmm0, xmm1
jb 0x4017cc
mov eax, dword [rbp - 0x78]
movsxd rcx, eax
mov eax, dword [rbp - 0x58]
movsxd rdx, eax
mov rax, rdx
shl rax, 2
add rax, rdx
lea rdx, [rax*4]
add rax, rdx
shl rax, 2
add rax, rcx
movsd xmm0, qword [rax*8 + obj.d]
mov eax, dword [rbp - 0x58]
cdqe
movsd xmm1, qword [rax*8 + obj.s]
divsd xmm0, xmm1
movsd qword [rbp - 0x30], xmm0
mov eax, dword [rbp - 0x58]
movsxd rdx, eax
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::operator__
mov rcx, rax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x78]
mov rsi, rax
mov rdi, rcx
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::emplace_back_int__double_
mov eax, dword [rbp - 0x78]
add eax, 1
mov dword [rbp - 0x78], eax
jmp 0x401703
add dword [rbp - 0x58], 1
jmp 0x4016ed
mov rax, qword [rbp - 0x98]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::vector
mov dword [rbp - 0x54], 0
mov eax, dword [rbp - 0x80]
cmp dword [rbp - 0x54], eax
jge 0x40188d
lea rdx, [rbp - 0x78]
lea rax, [rbp - 0x7c]
mov rsi, rdx
mov rdi, rax
call sym.reader_int_int_
mov eax, dword [rbp - 0x7c]
sub eax, 1
mov dword [rbp - 0x7c], eax
mov eax, dword [rbp - 0x78]
sub eax, 1
mov dword [rbp - 0x78], eax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::vector
mov edx, dword [rbp - 0x7c]
lea rsi, [rbp - 0x30]
lea rax, [rbp - 0x50]
mov ecx, 0
mov rdi, rax
call sym.dijkstra::run
mov eax, dword [rbp - 0x78]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rdx, rax
mov rax, qword [rbp - 0x98]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::push_back
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
add dword [rbp - 0x54], 1
jmp 0x4017f9
nop
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::vector_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_vector
nop
mov rax, qword [rbp - 0x98]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x401911
jmp 0x40190c
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
jmp 0x4018e1
mov rbx, rax
mov rax, qword [rbp - 0x98]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
jmp 0x4018f5
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::vector_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x98
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x3c]
mov rdi, rax
call sym.reader
mov dword [rbp - 0x38], 0
mov eax, dword [rbp - 0x3c]
cmp dword [rbp - 0x38], eax
jge 0x4019ff
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.solve
mov eax, dword [rbp - 0x38]
add eax, 1
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
mov dword [rbp - 0x34], 0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
cmp eax, dword [rbp - 0x34]
setg al
test al, al
je 0x4019ea
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
sub eax, 1
cmp eax, dword [rbp - 0x34]
jne 0x4019ad
mov ebx, 0xa
jmp 0x4019b2
mov ebx, 0x20
mov eax, dword [rbp - 0x34]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rax, qword [rax]
mov esi, ebx
mov qword [rbp - 0x48], rax
movsd xmm0, qword [rbp - 0x48]
mov edi, str._.10lf_c
mov eax, 1
call sym.imp.printf
add dword [rbp - 0x34], 1
jmp 0x40197c
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
add dword [rbp - 0x38], 1
jmp 0x401946
mov eax, 0
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401a34
jmp 0x401a2f
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x401a76
cmp dword [rbp - 8], 0xffff
jne 0x401a76
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
movsd xmm0, qword [rip + 0x515c]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov dword [rbp - 0xc], esi
movsd qword [rbp - 0x18], xmm0
mov rax, qword [rbp - 8]
mov edx, dword [rbp - 0xc]
mov dword [rax], edx
mov rax, qword [rbp - 8]
movsd xmm0, qword [rbp - 0x18]
movsd qword [rax + 8], xmm0
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_vector
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int_
mov eax, dword [rax]
pxor xmm0, xmm0
cvtsi2sd xmm0, eax
mov rax, qword [rbp - 8]
movsd qword [rax], xmm0
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int__
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax + 8], edx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_double__
movsd xmm0, qword [rax]
mov rax, qword [rbp - 8]
movsd qword [rax], xmm0
mov rax, qword [rbp - 0x18]
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax + 8], edx
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0xd8
mov qword [rbp - 0xb8], rdi
mov qword [rbp - 0xc0], rsi
mov dword [rbp - 0xc4], edx
mov qword [rbp - 0xd0], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0xb8]
mov rdi, rax
call sym.std::vector_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::size
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::resize
call sym.std::numeric_limits_double_::max
movapd xmm1, xmm0
movsd xmm0, qword [rip + 0x5001]
divsd xmm1, xmm0
movapd xmm0, xmm1
movsd qword [rbp - 0x40], xmm0
mov rax, qword [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::end
mov rbx, rax
mov rax, qword [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::begin
mov rcx, rax
lea rax, [rbp - 0x40]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::fill___gnu_cxx::__normal_iterator_double__std::vector_double_std::allocator_double____double_
cmp qword [rbp - 0xd0], 0
je 0x401c80
mov rax, qword [rbp - 0xb8]
mov rdi, rax
call sym.std::vector_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::size
mov rdx, rax
mov rax, qword [rbp - 0xd0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::resize
cmp qword [rbp - 0xd0], 0
je 0x401cc7
mov dword [rbp - 0x40], 0xffffffff
mov rax, qword [rbp - 0xd0]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::end
mov rbx, rax
mov rax, qword [rbp - 0xd0]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov rcx, rax
lea rax, [rbp - 0x40]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::fill___gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int____int_
lea rax, [rbp - 0x60]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.vector
lea rdx, [rbp - 0x60]
lea rcx, [rbp - 0x70]
lea rax, [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::priority_queue
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_vector
mov dword [rbp - 0x70], 0
lea rdx, [rbp - 0xc4]
lea rcx, [rbp - 0x70]
lea rax, [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_double_int_::pair_int_int__void_
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::push
mov eax, dword [rbp - 0xc4]
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
pxor xmm0, xmm0
movsd qword [rax], xmm0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::empty
xor eax, 1
test al, al
je 0x401f89
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::top
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x70], rax
mov qword [rbp - 0x68], rdx
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::pop
mov eax, dword [rbp - 0x68]
mov dword [rbp - 0xa4], eax
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm1, qword [rax]
movsd xmm0, qword [rbp - 0x70]
ucomisd xmm0, xmm1
seta al
test al, al
jne 0x401f83
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::operator__
mov qword [rbp - 0x80], rax
mov rax, qword [rbp - 0x80]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::begin
mov qword [rbp - 0xa0], rax
mov rax, qword [rbp - 0x80]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::end
mov qword [rbp - 0x90], rax
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___dijkstra::edge__std::vector_dijkstra::edge_std::allocator_dijkstra::edge___
test al, al
je 0x401d4d
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_dijkstra::edge__std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::operator_
mov qword [rbp - 0x78], rax
mov rax, qword [rbp - 0x78]
mov eax, dword [rax]
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm2, qword [rax]
movsd qword [rbp - 0xd8], xmm2
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm1, qword [rax]
mov rax, qword [rbp - 0x78]
movsd xmm0, qword [rax + 8]
addsd xmm0, xmm1
movsd xmm2, qword [rbp - 0xd8]
ucomisd xmm2, xmm0
seta al
test al, al
je 0x401f6f
mov rax, qword [rbp - 0x78]
mov eax, dword [rax]
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rbx, rax
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm1, qword [rax]
mov rax, qword [rbp - 0x78]
movsd xmm0, qword [rax + 8]
addsd xmm0, xmm1
movsd qword [rbx], xmm0
cmp qword [rbp - 0xd0], 0
je 0x401f28
mov rax, qword [rbp - 0x78]
mov eax, dword [rax]
movsxd rdx, eax
mov rax, qword [rbp - 0xd0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rdx, rax
mov eax, dword [rbp - 0xa4]
mov dword [rdx], eax
mov rbx, qword [rbp - 0x78]
mov rax, qword [rbp - 0x78]
mov eax, dword [rax]
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rcx, rax
lea rax, [rbp - 0x60]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::pair_double_int_::pair_double__void_
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::push
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_dijkstra::edge__std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::operator__
jmp 0x401e0c
nop
jmp 0x401d4d
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::_priority_queue
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x401fe0
jmp 0x401fdb
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::priority_queue_std::pair_double_int__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____std::greater_std::pair_double_int___::_priority_queue
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0xd8
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402073
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov rdx, rax
mov rax, qword [rbp - 0x10]
sub rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_default_append
jmp 0x4020ab
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
cmp rax, qword [rbp - 0x10]
seta al
test al, al
je 0x4020ab
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_erase_at_end
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_double__std::vector_double_std::allocator_double___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4020f4
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_double__std::vector_double_std::allocator_double___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402140
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_double__std::vector_double_std::allocator_double____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_double__std::vector_double_std::allocator_double____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__fill_a_double__double_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x4021e1
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rdx, rax
mov rax, qword [rbp - 0x10]
sub rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_default_append
jmp 0x402219
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp rax, qword [rbp - 0x10]
seta al
test al, al
je 0x402219
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_erase_at_end
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402262
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4022ae
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__fill_a_int__int_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___std::pair_double_int__
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::move_std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::vector
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.end
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.begin
sub rsp, 8
push r12
mov rsi, rbx
mov rdi, rax
call sym.std::make_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____std::greater_std::pair_double_int___
add rsp, 0x10
jmp 0x4023ed
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::push_back
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.end
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.begin
sub rsp, 8
push r12
mov rsi, rbx
mov rdi, rax
call sym.std::push_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____std::greater_std::pair_double_int___
add rsp, 0x10
nop
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::empty
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::front
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x10
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.end
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___.begin
sub rsp, 8
push r12
mov rsi, rbx
mov rdi, rax
call sym.std::pop_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____std::greater_std::pair_double_int___
add rsp, 0x10
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::pop_back
nop
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_dijkstra::edge__std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40258a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_dijkstra::edge__std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4025d6
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_dijkstra::edge__std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_dijkstra::edge__std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.reader
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.reader
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 8]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
jbe 0x4026b9
mov rax, qword [rbp - 0x10]
jmp 0x4026bd
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_Vector_base
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_M_default_initialize
jmp 0x402753
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____std::vector_dijkstra::edge_std::allocator_dijkstra::edge___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x402821
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_double_
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x18]
mov rcx, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_dijkstra::edge__::construct_dijkstra::edge_int__double__
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
jmp 0x402851
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_double_
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_int__
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::_M_emplace_back_aux_int__double_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x402910
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::construct_double_doubleconst__
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x402923
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_emplace_back_aux_doubleconst__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
cmp qword [rbp - 0x40], 0
je 0x402b4b
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
sub rdx, rax
mov rax, rdx
sar rax, 3
cmp rax, qword [rbp - 0x40]
jb 0x4029c1
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
mov rcx, qword [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_double__unsignedlong_double_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
jmp 0x402b4b
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_default_append
mov rsi, rcx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_check_len
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_double__double__std::allocator_double__
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_double__unsignedlong_double_
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x30]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x28]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x402b4b
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_double__std::vector_double_std::allocator_double____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
movsd xmm0, qword [rax]
movsd qword [rbp - 8], xmm0
mov rax, qword [rbp - 0x18]
cmp rax, qword [rbp - 0x20]
je 0x402c0c
mov rax, qword [rbp - 0x18]
movsd xmm0, qword [rbp - 8]
movsd qword [rax], xmm0
add qword [rbp - 0x18], 8
jmp 0x402bee
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
cmp qword [rbp - 0x40], 0
je 0x402e35
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
sub rdx, rax
mov rax, rdx
sar rax, 2
cmp rax, qword [rbp - 0x40]
jb 0x402cab
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
mov rcx, qword [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_int__unsignedlong_int_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
jmp 0x402e35
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_default_append
mov rsi, rcx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_check_len
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_int__int__std::allocator_int__
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_int__unsignedlong_int_
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x30]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x28]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x402e35
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov eax, dword [rax]
mov dword [rbp - 4], eax
mov rax, qword [rbp - 0x18]
cmp rax, qword [rbp - 0x20]
je 0x402eee
mov rax, qword [rbp - 0x18]
mov edx, dword [rbp - 4]
mov dword [rax], edx
add qword [rbp - 0x18], 4
jmp 0x402ed4
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_double_int__::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x403e1e
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40302a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403076
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
sub rsp, 8
push rax
call sym.__gnu_cxx::__ops::__iter_comp_iter_std::greater_std::pair_double_int___
add rsp, 0x10
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__make_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_______gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
add rsp, 0x10
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::emplace_back_std::pair_double_int__
nop
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x60], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x60]
mov esi, 1
mov rdi, rax
call 0x40413a
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x30], rax
mov qword [rbp - 0x28], rdx
sub rsp, 8
push rbx
call method.__gnu_cxx::__ops::__iter_comp_val_std::greater_std.pair_double_int___
add rsp, 0x10
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
lea rsi, [rax - 1]
mov rcx, qword [rbx]
mov rdx, qword [rbx + 8]
mov rax, qword [rbp - 0x50]
sub rsp, 8
push r12
mov qword [rbp - 0x58], rcx
movsd xmm0, qword [rbp - 0x58]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__push_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int____
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4031bc
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::end
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::begin
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403228
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::begin
mov qword [rbp - 0x10], rax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x403275
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
cmp rax, 1
setg al
test al, al
je 0x4032e3
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator__
sub rsp, 8
push r12
call sym.__gnu_cxx::__ops::__iter_comp_iter_std::greater_std::pair_double_int___
add rsp, 0x10
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_______gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
add rsp, 0x10
nop
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax - 0x10]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::destroy_std::pair_double_int__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_M_create_storage
jmp 0x4033df
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____unsignedlong_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_double_
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int__
mov rdx, rax
mov rsi, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rcx, rbx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_dijkstra::edge_::construct_dijkstra::edge_int__double__
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_double_
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_int__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::size
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x18]
lea rsi, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_dijkstra::edge__::construct_dijkstra::edge_int__double__
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_dijkstra::edge__dijkstra::edge__std::allocator_dijkstra::edge__
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 0x10
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_dijkstra::edge__dijkstra::edge_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x40370b
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x4036ba
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::size
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_dijkstra::edge__::destroy_dijkstra::edge_
jmp 0x4036dc
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_dijkstra::edge__dijkstra::edge_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x40
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_double_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_doubleconst__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::construct_double_doubleconst__
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_doubleconst__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::construct_double_doubleconst__
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_double__double__std::allocator_double__
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x4039ff
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x4039ae
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::destroy_double_
jmp 0x4039d0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_double__unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x403a8f
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
cmp rax, qword [rbp - 0x20]
ja 0x403aef
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x403afd
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::max_size
jmp 0x403b01
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x403b15
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x403b48
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::allocate
jmp 0x403b4d
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_double__std::move_iterator_double___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_double__std::move_iterator_double___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_double___double__double_
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x403bd6
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_double__std::vector_double_std::allocator_double___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_int__unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x403c8d
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
cmp rax, qword [rbp - 0x20]
ja 0x403ced
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x403cfb
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::max_size
jmp 0x403cff
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x403d13
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x403d46
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::allocate
jmp 0x403d4b
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_int__std::move_iterator_int___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_int__std::move_iterator_int___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_int___int__int_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_int__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x403dfe
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_int__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_double_int__::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x403eaa
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_std::pair_double_int___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rdi, rax
call sym.std::move_std::allocator_std::pair_double_int____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_Vector_impl::_M_swap_data
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x19]
sub rsp, 8
push rdx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int___::_Iter_comp_iter
add rsp, 0x10
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x403f8e
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x60
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x60], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
cmp rax, 1
setle al
test al, al
jne 0x40408f
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x28]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x30], rax
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x20], rax
mov qword [rbp - 0x18], rdx
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdi, qword [rax]
mov rcx, qword [rax + 8]
mov rdx, qword [rbp - 0x28]
mov rsi, qword [rbp - 0x30]
mov rax, qword [rbp - 0x50]
sub rsp, 8
movzx r8d, byte [rbp + 0x10]
push r8
mov qword [rbp - 0x58], rdi
movsd xmm0, qword [rbp - 0x58]
mov rdi, rax
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
add rsp, 0x10
cmp qword [rbp - 0x30], 0
je 0x404092
sub qword [rbp - 0x30], 1
jmp 0x404005
nop
jmp 0x404093
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4040a7
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x404119
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::pair_double_int__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::construct_std::pair_double_int__std::pair_double_int___
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x404137
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::pair_double_int__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_M_emplace_back_aux_std::pair_double_int__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 4
neg rdx
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40419d
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 4
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x19]
sub rsp, 8
push rdx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int___::_Iter_comp_val
add rsp, 0x10
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x404237
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x48], rsi
mov qword [rbp - 0x58], rdx
movq rsi, xmm0
mov eax, 0
mov edx, 0
mov rax, rsi
mov rdx, rcx
mov qword [rbp - 0x70], rax
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x48]
cmp rax, qword [rbp - 0x58]
jle 0x4042d5
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov rcx, rax
lea rax, [rbp - 0x70]
mov rdx, rax
mov rsi, rcx
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int___::operator_____gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____std::pair_double_int__
test al, al
je 0x4042d5
mov eax, 1
jmp 0x4042da
mov eax, 0
test al, al
je 0x404364
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x48], rax
mov rax, qword [rbp - 0x48]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
jmp 0x404297
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4043b6
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40440f
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404464
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int_const__std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::base
mov rax, qword [rax]
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax - 0x10]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x60], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x30], rax
mov qword [rbp - 0x28], rdx
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____
mov rdi, rax
mov rcx, qword [rbx]
mov rdx, qword [rbx + 8]
mov rax, qword [rbp - 0x40]
sub rsp, 8
movzx esi, byte [rbp + 0x10]
push rsi
mov qword [rbp - 0x58], rcx
movsd xmm0, qword [rbp - 0x58]
mov rcx, rdx
mov rdx, rdi
mov esi, 0
mov rdi, rax
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int____
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4045b7
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::destroy_std::pair_double_int__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x405400
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
lea rdx, [rcx + rax]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x4046c4
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____
nop
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_double_
mov r12, qword [rax]
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 0x10
call 0x401a8e
test rax, rax
je 0x404777
mov qword [rbp - 0x38], r12
movsd xmm0, qword [rbp - 0x38]
mov esi, ebx
mov rdi, rax
call sym.dijkstra::edge::edge
nop
add rsp, 0x30
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x4047e1
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::size
cmp rax, qword [rbp - 0x20]
ja 0x404841
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x40484f
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::max_size
jmp 0x404853
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x404867
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40489a
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_dijkstra::edge__::allocate
jmp 0x40489f
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_dijkstra::edge__std::move_iterator_dijkstra::edge___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_dijkstra::edge__std::move_iterator_dijkstra::edge___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_dijkstra::edge___dijkstra::edge__dijkstra::edge_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_dijkstra::edge_::destroy_dijkstra::edge_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_dijkstra::edge__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x4049ac
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_dijkstra::edge__::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_double_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_double__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_doubleconst__
movsd xmm0, qword [rax]
movsd qword [rbp - 0x20], xmm0
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov edi, 8
call 0x401a8e
test rax, rax
je 0x404a78
movsd xmm1, qword [rbp - 0x20]
movsd qword [rax], xmm1
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::destroy_double_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_double__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_double_std::allocator_double__._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x404b11
mov rax, qword [rbp - 0x10]
jmp 0x404b15
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_double__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404b87
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_double___double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_int__unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::max_size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_int__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404cb2
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_int___int__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_int__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::allocator_std::pair_double_int____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x4058f0
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::pair_double_int___
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::pair_double_int___
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
add rax, 0x10
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::pair_double_int___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 4
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404ec8
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x48], rsi
mov qword [rbp - 0x58], rdx
movq rsi, xmm0
mov eax, 0
mov edx, 0
mov rax, rsi
mov rdx, rcx
mov qword [rbp - 0x70], rax
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x48]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x58]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x28]
jle 0x404ff9
mov rax, qword [rbp - 0x28]
add rax, 1
add rax, rax
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x28]
lea rdx, [rax - 1]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov rbx, rax
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov rdx, rbx
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_comp_iter_std::greater_std::pair_double_int___::operator_____gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_______gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____
test al, al
je 0x404f90
sub qword [rbp - 0x28], 1
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x48], rax
jmp 0x404f1d
mov rax, qword [rbp - 0x58]
and eax, 1
test rax, rax
jne 0x40509f
mov rax, qword [rbp - 0x58]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x28]
jne 0x40509f
mov rax, qword [rbp - 0x28]
add rax, 1
add rax, rax
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x28]
lea rdx, [rax - 1]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x404e68
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_double_int_::operator_
mov rax, qword [rbp - 0x28]
sub rax, 1
mov qword [rbp - 0x48], rax
sub rsp, 8
movzx eax, byte [rbp + 0x10]
push rax
call sym.__gnu_cxx::__ops::__iter_comp_val_std::greater_std::pair_double_int___
add rsp, 0x10
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_double_int___
mov rdi, qword [rax]
mov rcx, qword [rax + 8]
mov rdx, qword [rbp - 0x20]
mov rsi, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
sub rsp, 8
push r12
mov qword [rbp - 0x60], rdi
movsd xmm0, qword [rbp - 0x60]
mov rdi, rax
call sym.std::__push_heap___gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int_____long_std::pair_double_int____gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int____
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x405100
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::pair_double_int__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::construct_std::pair_double_int__std::pair_double_int___
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::pair_double_int__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::construct_std::pair_double_int__std::pair_double_int___
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::pair_double_int___std::pair_double_int___std::allocator_std::pair_double_int___
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 0x10
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___std::pair_double_int__
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x405322
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x4052d1
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::destroy_std::pair_double_int__
jmp 0x4052f3
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___std::pair_double_int__
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rcx, rax
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::greater_std::pair_double_int__::operator__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_double_
movsd xmm0, qword [rax]
mov rax, qword [rbp - 8]
movsd qword [rax], xmm0
mov rax, qword [rbp - 0x10]
add rax, 8
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax + 8], edx
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x405452
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____::allocate
jmp 0x405457
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_false_::__uninit_default_n_std::vector_dijkstra::edge_std::allocator_dijkstra::edge____unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x4054e5
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___
mov rdi, rax
call sym.std::_Destroy_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___
add qword [rbp - 8], 0x18
jmp 0x4054c0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_dijkstra::edge__::max_size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_dijkstra::edge_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_dijkstra::edge__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40557a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_dijkstra::edge___dijkstra::edge__
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_dijkstra::edge__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_dijkstra::edge_::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
pxor xmm0, xmm0
movsd qword [rbp - 0x10], xmm0
lea rdx, [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_double__unsignedlong_double_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4056aa
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x405704
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy_std::move_iterator_double___double__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0xc], 0
lea rdx, [rbp - 0xc]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_int__unsignedlong_int_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4057d6
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x405830
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 2
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy_std::move_iterator_int___int__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::pair_double_int__.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_std::pair_double_int____
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_double_int____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::pair_double_int____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x405997
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_int___std::vector_std::pair_double_int__std::allocator_std::pair_double_int____::operator_
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::greater_std::pair_double_int__::operator__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x19]
sub rsp, 8
push rdx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_val_std::greater_std::pair_double_int___::_Iter_comp_val
add rsp, 0x10
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x405a29
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::pair_double_int__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 0x10
call 0x401a8e
mov rcx, rax
test rcx, rcx
je 0x405a7b
mov rax, qword [rbx]
mov rdx, qword [rbx + 8]
mov qword [rcx], rax
mov qword [rcx + 8], rdx
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x405ae3
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::size
cmp rax, qword [rbp - 0x20]
ja 0x405b43
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::max_size
cmp rax, qword [rbp - 0x20]
jae 0x405b51
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_double_int__std::allocator_std::pair_double_int___::max_size
jmp 0x405b55
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x405b69
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x405b9c
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::allocate
jmp 0x405ba1
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_double_int___std::move_iterator_std::pair_double_int____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_double_int___std::move_iterator_std::pair_double_int____
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::pair_double_int____std::pair_double_int___std::pair_double_int__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 0x10]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
ja 0x405c70
mov rax, qword [rbp - 0x10]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 8]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
seta al
xor eax, 1
test al, al
je 0x405c77
mov rax, qword [rbp - 8]
mov edx, dword [rax + 8]
mov rax, qword [rbp - 0x10]
mov eax, dword [rax + 8]
cmp edx, eax
jge 0x405c77
mov eax, 1
jmp 0x405c7c
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 8]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call 0x405c1e
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__double_int_
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
cmp qword [rbp - 0x20], 0
je 0x405d6a
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___
mov rdi, rax
call sym.std::_Construct_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___
sub qword [rbp - 0x20], 1
add qword [rbp - 8], 0x18
jmp 0x405d43
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::_vector
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_dijkstra::edge_::max_size
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_dijkstra::edge_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x405df2
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 4
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_dijkstra::edge___dijkstra::edge__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_double__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_double__unsignedlong_double_
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_std::move_iterator_double___double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_int__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_int__unsignedlong_int_
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x3fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_std::move_iterator_int___int__
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_int__std::allocator_std::pair_double_int___::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_int___::max_size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x406024
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::pair_double_int____std::pair_double_int___
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_dijkstra::edge_std::allocator_dijkstra::edge___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x406088
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x18
call 0x401a8e
test rax, rax
je 0x4060cd
mov rdi, rax
call sym.std::vector_dijkstra::edge_std::allocator_dijkstra::edge__::vector
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_dijkstra::edge__dijkstra::edge_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xfffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x406482
test al, al
je 0x406195
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_dijkstra::edge__::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_dijkstra::edge_
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_dijkstra::edge_dijkstra::edge_
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_dijkstra::edge__::operator__
add qword [rbp - 0x18], 0x10
jmp 0x406145
mov rax, qword [rbp - 0x18]
jmp 0x4061ce
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_dijkstra::edge__
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_double__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
movsd xmm0, qword [rax]
movsd qword [rbp - 8], xmm0
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x10], rax
cmp qword [rbp - 0x10], 0
je 0x406234
mov rax, qword [rbp - 0x18]
movsd xmm0, qword [rbp - 8]
movsd qword [rax], xmm0
sub qword [rbp - 0x10], 1
add qword [rbp - 0x18], 8
jmp 0x406214
mov rax, qword [rbp - 0x18]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_double___
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_double___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_true_double__double__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x4062dd
mov rax, qword [rbp - 0x18]
mov edx, dword [rbp - 0xc]
mov dword [rax], edx
sub qword [rbp - 8], 1
add qword [rbp - 0x18], 4
jmp 0x4062c1
mov rax, qword [rbp - 0x18]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_int___
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_int___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_true_int__int__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::max_size
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_int__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x406388
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 4
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::pair_double_int____std::pair_double_int___
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xaaaaaaaaaaaaaaa
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_dijkstra::edge_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___dijkstra::edge__
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_dijkstra::edge_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x10
call 0x401a8e
mov rcx, rax
test rcx, rcx
je 0x40653e
mov rax, qword [rbx]
mov rdx, qword [rbx + 8]
mov qword [rcx], rax
mov qword [rcx + 8], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base_std::move_iterator_double___true_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_double__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_double__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_double__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_true_double__double__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base_std::move_iterator_int___true_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_int__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_int__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_true_int__int__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xfffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x40680e
test al, al
je 0x4066c7
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::pair_double_int__
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::pair_double_int__std::pair_double_int__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::operator__
add qword [rbp - 0x18], 0x10
jmp 0x406677
mov rax, qword [rbp - 0x18]
jmp 0x406700
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_int___
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_dijkstra::edge_std::allocator_dijkstra::edge__::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_dijkstra::edge_::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_dijkstra::edge__::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_dijkstra::edge__::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_iterator_double__::base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_true_true_std::random_access_iterator_tag_::__copy_m_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_iterator_int__::base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_true_true_std::random_access_iterator_tag_::__copy_m_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::pair_double_int___
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::pair_double_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x10
call 0x401a8e
mov rcx, rax
test rcx, rcx
je 0x4068bc
mov rax, qword [rbx]
mov rdx, qword [rbx + 8]
mov qword [rcx], rax
mov qword [rcx + 8], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_dijkstra::edge_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x406981
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x4069f7
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::pair_double_int___::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_dijkstra::edge_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x204356]
push rbp
lea rbp, [rip + 0x20435e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x406ad6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x406ac0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, 0
add byte [rax], al
add eax, 0x6000000
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
or al, byte [rax]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp qword [rip + 0x6c25666c]
and eax, 0x6c25666c
add byte [rip + 0x4300666c], ah
jae 0x406c24
and byte [rbx], ah
and eax, 0x203a64
and eax, 0x6c30312e
and ax, 0x63
jbe 0x406c36
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x406c4c
je 0x406c41
jo 0x406c55
outsb dx, byte gs:[rsi]
add byte fs:[rsi + 0x65], dh
jbe 0x406c50
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x406c64
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x406c7c
add byte [rax], al
add byte [rax], al
out dx, eax
jg 0x406c11
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x78b58c40
sbb eax, 0x14415af
add dword [rbx], ebx
add edi, dword [rbx]
pop rsp
or al, byte [rax]
add byte [rdx + 1], cl
add byte [rax], al
call 0xffffffffa9406bd7
or al, byte [rax]
add byte [rax - 0x60], ch
js 0x406c4c
add byte [rax], al
pop rsi
movabs eax, dword [0xa1f800000b10ffff]
push qword [rax]
or eax, dword [rax]
add byte [rsi + 0x50ffffa2], ah
or eax, dword [rax]
add byte [rdi - 0x5d], cl
push qword [rax + 0xb]
add byte [rax], al
loop 0x406c09
call qword [rax - 0x17fffff5]
movsb byte [rdi], byte ptr [rsi]
push qword [rax + 0x1200000b]
cmpsb byte [rsi], byte ptr [rdi]
call rax
or eax, dword [rax]
add byte [rsi - 1], bl
push rax
or eax, dword [rax]
add bl, cl
cmpsb byte [rsi], byte ptr [rdi]
call qword [rax]
or al, 0
add byte [rip + 0x30ffffa7], ah
or al, 0
add byte [rax + 0x78ffffa7], dl
or eax, 0xacf30000
jmp qword [rax + 0x1300000d]
scasb al, byte [rdi]
push qword [rax]
xor eax, 0xae510000
call qword [rax + 0x35]
add byte [rax], al
scasb al, byte [rdi]
call rax
or al, byte [rax]
add byte [rax - 0x52], bh
push rax
or al, byte [rax]
add byte [rsi + 0x50ffffae], al
or al, 0
add byte [rax + 0x70ffffae], dh
or al, 0
add bl, cl
scasb al, byte [rdi]
call qword [rax - 0x26fffff4]
scasb al, byte [rdi]
push qword [rax - 0x17fffff4]
scasb al, byte [rdi]
call rax
or al, 0
add byte [rdx], dh
scasd eax, dword [rdi]
push rax
or al, 0
add byte [rax - 0x51], al
call qword [rax]
or eax, 0xaf7c0000
call qword [rax + 0xd]
add byte [rax], al
ret 0xffb3
dec eax
or eax, 0xb3fa0000
call 0xffffffff86406d22
mov ah, 0xff
dec dword [rax]
add byte [rax], al
mov ah, 0xff
ljmp [rax]
add byte [rax], al
sbb dh, byte [rbp + 0xe48ffff]
add byte [rax], al
push 0x70ffffb5
add byte [rax], al
hlt
mov ch, 0xff
call qword [rax + 0x3c00000e]
mov dh, 0xff
push qword [rax - 0x77fffff2]
mov dh, 0xff
call rax
add byte [rax], al
mov dh, 0xff
clc
add byte [rax], al
mov dh, 0xff
jmp qword [rax]
sldt word [rax]
mov bh, 0xff
dec dword [rax + 0xf]
add byte [rax], al
mov dil, 0xff
ljmp [rax + 0xf]
add byte [rax], al
mov bh, 0xff
lcall [rax - 0x23fffff1]
mov bh, 0xff
mov eax, 0x4800000f
mov eax, 0xfe0ffff
add byte [rax], al
push 0xffffb8
adc byte [rax], al
add byte [rdx + 0x20ffffb8], al
adc byte [rax], al
add byte [rax + rdi*4 + 0x1040ffff], bl
add byte [rax], al
mov eax, 0x1068ffff
add byte [rax], al
sbb al, 0xb9
dec dword [rax + 0x64000010]
mov ecx, 0x10a8ffff
add byte [rax], al
mov al, 0xb9
dec eax
adc byte [rax], al
add ah, ch
mov ecx, 0x10e8ffff
add byte [rax], al
or al, 0xba
dec dword [rax]
adc dword [rax], eax
add byte [rsi], bl
mov edx, 0x1128ffff
add byte [rax], al
mov edx, 0x1148ffff
add byte [rax], al
imul edi, dword [rdx + 0x1168ffff], 0xba980000
dec dword [rax - 0x4bffffef]
mov edx, 0x11a8ffff
add byte [rax], al
sar byte [rdx + 0x11c8ffff], 1
add byte [rax], al
xor bh, byte [rbx + 0x11f0ffff]
add byte [rax], al
jbe 0x406dc1
lcall [rax]
adc al, byte [rax]
add byte [rbx + rdi*4 + 0x1238ffff], al
add byte [rax], al
xor bh, byte [rdi + rdi*8 + 0x1260ff]
add byte [rsi - 0x44], cl
dec dword [rax - 0x6dffffee]
mov esp, 0x12b0ffff
add byte [rax], al
mov esp, 0x12d0ffff
add byte [rax], al
and al, 0xbd
push rax
adc al, byte [rax]
add byte [rdi + rdi*4], ch
lcall [rax]
adc eax, dword [rax]
add byte [rdx - 0x41], dh
inc dword [rax + 0x13]
add byte [rax], al
mov edi, 0x1360ffff
add byte [rax], al
test eax, 0x80ffffbf
adc eax, dword [rax]
add al, ch
mov edi, 0x13a0ffff
add byte [rax], al
sar bh, 0xff
rcl byte [rbx], 0
add byte [rsi], dl
ret 0xffff
call 0x5c406e88
ret 0xffff
adc byte [rax + rax], dl
add byte [rcx - 0x3e], bh
push qword [rax]
adc al, 0
add byte [rbx + 0x50ffffc2], dl
adc al, 0
add dl, cl
ret 0xffff
jo 0x406ea6
add byte [rax], al
out 0xc2, al
call qword [rax + 0x2000014]
ret
push qword [rax + 0x52000014]
ret
fcom dword [rax + rax]
add byte [rax - 0x3d], ah
clc
adc al, 0
add byte [rdx + 0x18ffffc3], cl
adc eax, 0xc3bc0000
cmp byte [rip - 0x3bfc0000], dl
lcall [rax + 0x15]
add byte [rax], al
push rax
js 0x406ee7
add byte [rax], al
xchg eax, edx
lcall [rax - 0x3cffffeb]
mov eax, 0x9e000015
jmp rax
adc eax, 0xc6020000
inc dword [rax]
add byte [rax], al
jmp qword [rax]
add byte [rax], al
mov dh, 0xff
dec dword [rax + 0x16]
add byte [rax], al
add bh, al
push qword [rax + 0x16]
add byte [rax], al
call qword [rax + 0x2c000016]
push qword [rax + 0x38000016]
call rax
add byte [rax], al
push rax
add byte [rax], al
call qword [rax]
add byte [rax], al
mov esi, 0x38ffffc7
add byte [rax], al
and al, cl
jmp qword [rax + 0x17]
add byte [rax], al
enter -1, -0x80
add byte [rax], al
jb 0x406f16
jmp qword [rax - 0x63ffffe9]
enter -1, -0x40
add byte [rax], al
out dx, al
enter -1, -0x18
add byte [rax], al
in al, dx
retf -1
adc byte [rax], bl
add byte [rax], al
or bl, cl
push qword [rax]
sbb byte [rax], al
add byte [rbx + rcx*8], ah
call qword [rax + 0x18]
add byte [rax], al
je 0x406f49
js 0x406f9a
add byte [rax], al
retf
lcall [rax - 0x53ffffe8]
retf
mov eax, 0xba000018
retf
fcomp dword [rax]
add byte [rax], al
hlt
retf
clc
sbb byte [rax], al
add dh, bl
int 0xff
jmp qword [rax]
sbb dword [rax], eax
add byte [rax], cl
inc dword [rax + 0x19]
add byte [rax], al
hlt
ljmp [rax + 0x19]
add byte [rax], al
iretd
dec dword [rax + 0x7c000019]
iretd
push qword [rax - 0x4effffe7]
iretd
call rax
sbb dword [rax], eax
add dh, cl
iretd
push rax
sbb dword [rax], eax
add ah, bl
iretd
call qword [rax]
sbb al, byte [rax]
add byte [rsi], al
sar bh, 1
push qword [rax]
sbb al, byte [rax]
add dl, dh
sar bh, 1
lcall [rax + 0x1a]
add byte [rax], al
and eax, 0x78ffffd1
sbb al, byte [rax]
add byte [rcx - 0x2f], bh
jmp qword [rax - 0x5bffffe6]
sar edi, 1
inc eax
sbb al, byte [rax]
add cl, bl
sar edi, 1
jmp rax
sbb al, byte [rax]
add dh, dh
sar edi, 1
inc dword [rax]
sbb eax, dword [rax]
add byte [rdx + rdx*8], dh
jmp qword [rax]
sbb eax, dword [rax]
add byte [rax - 0x2e], dl
inc dword [rax + 0x1b]
add byte [rax], al
test edx, edx
jmp qword [rax + 0x1b]
add byte [rax], al
stosd dword [rdi], eax
sar bh, cl
inc dword [rax - 0x45ffffe5]
sar bh, cl
jmp qword [rax + 0x600001b]
sar edi, cl
inc eax
sbb eax, dword [rax]
add byte [rbx], ah
sar edi, cl
jmp rax
sbb eax, dword [rax]
add byte [rbx + rdx*8 - 1], ch
inc dword [rax]
sbb al, 0
add byte [rcx + 0x20ffffd4], al
sbb al, 0
add byte [rax + 0x40ffffd4], dl
sbb al, 0
add byte [rdx], dl
jmp qword [rax + 0x1c]
add byte [rax], al
js 0x40704b
inc dword [rax - 0x76ffffe4]
jmp qword [rax - 0x33ffffe4]
inc eax
sbb al, 0
add byte [rip - 0x1f00002a], dl
sbb al, 0
add byte [rsi + 0x8ffffd7], dl
sbb eax, 0xd7ea0000
ljmp [rax]
sbb eax, 0xd83e0000
dec dword [rax + 0x1d]
add byte [rax], al
jp 0x407086
ljmp [rax + 0x1d]
add byte [rax], al
mov eax, ds
dec dword [rax - 0x53ffffe3]
fdivr st(7)
ljmp [rax - 0x6affffe3]
fcos
call rax
sbb eax, 0xd9bc0000
push rax
sbb eax, 0xda060000
call qword [rax]
add byte [rax], al
push -0x26
push qword [rax]
add byte [rax], al
lahf
call qword [rax + 0x1e]
add byte [rax], al
enter -0x26, -1
jo 0x407110
add byte [rax], al
out dx, al
call qword [rax + 0x5a00001e]
mov eax, 0x4600001e
fdiv st(7), st(0)
jmp rax
add byte [rax], al
jp 0x4070ea
inc dword [rax]
add byte [rax], al
movabs al, byte [0xae00001f20ffffdc]
fdiv st(7), st(0)
inc dword [rax + 0x1f]
add byte [rax], al
add bl, ch
ljmp [rax + 0x1f]
add byte [rax], al
sub ch, bl
dec dword [rax + 0x5200001f]
ljmp [rax - 0x77ffffe1]
dec eax
add byte [rax], al
call 0xffffffffe140716c
dec dword [rax]
and byte [rax], al
add byte [rax], cl
fdivp st(7)
ljmp [rax]
and byte [rax], al
add byte [rbx - 0x22], dl
dec dword [rax + 0x20]
add byte [rax], al
jns 0x407144
ljmp [rax + 0x20]
add byte [rax], al
movabs byte [0xc400002088ffffde], al
fdivp st(7)
ljmp [rax - 0x10ffffe0]
fdivp st(7)
dec eax
and byte [rax], al
add byte [rcx], bl
call 0x614071ad
dec dword [rax]
and dword [rax], eax
add byte [rdx + 0x28ffffdf], dl
and dword [rax], eax
add al, al
dec dword [rax + 0x21]
add byte [rax], al
ljmp [rax + 0x21]
add byte [rax], al
clc
dec dword [rax + 0x1a000021]
loopne 0x4071b6
ljmp [rax + 0x44000021]
loopne 0x4071be
dec eax
and dword [rax], eax
add byte [rax + 0x21e8ffff], cl
add byte [rax], al
mov ebp, 0x8ffffe0
and al, byte [rax]
add bl, ah
loopne 0x4071d6
ljmp [rax]
and al, byte [rax]
add byte [rdx], dl
loope 0x4071de
dec dword [rax + 0x22]
add byte [rax], al
and cl, ah
ljmp [rax + 0x22]
add byte [rax], al
cmp al, 0xe1
dec dword [rax + 0x47000022]
loope 0x4071f6
ljmp [rax + 0x75000022]
loope 0x4071fe
dec eax
and al, byte [rax]
add byte [rcx + 0x22e8ffff], al
add byte [rax], al
fsub st(1)
dec dword [rax]
and eax, dword [rax]
add byte [rdx], dh
ljmp [rax]
and eax, dword [rax]
add byte [rax - 0x1e], al
dec dword [rax + 0x23]
add byte [rax], al
movabs byte [0xe100002368ffffe2], al
in al, 0xff
call qword [rax + 0x1a000023]
in eax, 0xff
push qword [rax + 0x2000023]
out 0xff, eax
fsub dword [rbx]
add byte [rax], al
adc bh, ah
clc
and eax, dword [rax]
add byte [rdi], bl
lcall [rax]
and al, 0
add byte [rdi - 1], dl
cmp byte [rax + rax], ah
add byte [rdi + 0x2458ffff], bl
add byte [rax], al
mov edx, 0x78ffffe7
and al, 0
add al, cl
out 0xff, eax
lcall [rax - 0x27ffffdc]
out 0xff, eax
mov eax, 0xfe000024
out 0xff, eax
fsub dword [rax + rax]
add byte [rcx], dh
call 0x25397289
add byte [rax], al
pop rdi
call 0x25597291
add byte [rax], al
mov al, ch
cmp byte [rip - 0x17400000], ah
lcall [rax + 0x25]
add byte [rax], al
loop 0x40728e
js 0x4072cf
add byte [rax], al
or al, 0xe9
lcall [rax + 0x54000025]
jmp 0x25f972b9
add byte [rax], al
xchg cl, ch
fsub dword [rip - 0x166b0000]
clc
and eax, 0xe9bb0000
lcall [rax]
add byte es:[rax], al
jmp 0x267972d9
add byte [rax], al
lcall [rax + 0x26]
add byte [rax], al
adc edx, ebp
js 0x407310
add byte [rax], al
and dl, ch
lcall [rax + 0x2f000026]
mov eax, 0x84000026
fsub dword [rsi]
add byte [rax], al
sahf
clc
add byte es:[rax], al
lodsb al, byte [rsi]
lcall [rax]
add byte [rax], al
out dx, al
cmp byte [rdi], ah
add byte [rax], al
or bl, ch
lcall [rax + 0x27]
add byte [rax], al
cmp ch, bl
js 0x407351
add byte [rax], al
pop rbp
jmp 0x40732e
lcall [rax - 0x4fffffd9]
jmp 0x407336
mov eax, 0xca000027
jmp 0x40733e
fsub dword [rdi]
add byte [rax], al
fsubr st(3)
clc
add byte [rax], al
sbb ch, ah
lcall [rax]
sub byte [rax], al
add byte [rsp + rbp*8], dh
cmp byte [rax], ch
add byte [rax], al
in al, dx
lcall [rax + 0x28]
add byte [rax], al
je 0x407352
js 0x407392
add byte [rax], al
cwde
in al, dx
lcall [rax - 0x5bffffd8]
in al, dx
mov eax, 0xc8000028
in al, dx
fsubr dword [rax]
add byte [rax], al
out dx, al
in al, dx
clc
sub byte [rax], al
add ah, bh
in al, dx
lcall [rax]
sub dword [rax], eax
add byte [rdx - 0x13], dh
cmp byte [rcx], ch
add byte [rax], al
mov esi, 0x60ffffed
sub dword [rax], eax
add byte [rax], cl
out dx, al
inc dword [rax + 0x5c000029]
out dx, al
ljmp [rax + 0x48000029]
out dx, eax
call rax
sub dword [rax], eax
add byte [rdi + rbp*8 - 1], bh
push rax
sub dword [rax], eax
add byte [rdx + 0x10ffffef], ah
sub al, byte [rax]
add dh, dh
out dx, eax
cmp byte [rdx], ch
add byte [rax], al
push rsi
lcall [rax + 0x2a]
add byte [rax], al
jl 0x4073ce
js 0x40740c
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
lcall [rax - 0x4affffd6]
mov eax, 0xe000002a
fsubr dword [rdx]
add byte [rax], al
add esi, ecx
clc
sub al, byte [rax]
add byte [rax - 0xf], cl
lcall [rax]
sub eax, dword [rax]
add byte [rsi - 0xf], dl
cmp byte [rbx], ch
add byte [rax], al
jno 0x407407
lcall [rax + 0x2b]
add byte [rax], al
int1
js 0x40744d
add byte [rax], al
int1
lcall [rax - 0x23ffffd5]
int1
mov eax, 0xf600002b
int1
fsubr dword [rbx]
add byte [rax], al
clc
sub eax, dword [rax]
add byte [rsi], dh
lcall [rax]
sub al, 0
add byte [rdx - 0xe], bl
cmp byte [rax + rax], ch
add byte [rbp - 0xe], ah
lcall [rax + 0x2c]
add byte [rax], al
sahf
js 0x40748e
add byte [rax], al
mov dl, 0xf2
lcall [rax - 0x20ffffd4]
mov eax, 0x1800002c
fsubr dword [rax + rax]
add byte [rbx + rsi*8], ch
clc
sub al, 0
add byte [rdx - 0xd], bl
lcall [rax]
sub eax, 0xf36a0000
cmp byte [rip - 0xc740000], ch
lcall [rax + 0x2d]
add byte [rax], al
mov dh, 0xf3
js 0x4074cf
add byte [rax], al
lcall [rax + 0x3000002d]
hlt
mov eax, 0x7b00002d
hlt
fsubr dword [rip - 0xb580000]
clc
sub eax, 0xf4ec0000
jmp qword [rax]
add byte cs:[rax], al
add ch, dh
inc dword [rax + 0x2e]
add byte [rax], al
lodsd eax, dword [rsi]
cmc
ljmp [rax + 0x2e]
add byte [rax], al
cmc
dec dword [rax + 0x1200002e]
idiv bh
ljmp [rax + 0x5e00002e]
idiv bh
call rax
add byte cs:[rax], al
js 0x4074ec
push rax
add byte cs:[rax], al
mov ebx, 0x10fffff6
add byte [rax], al
idiv edi
cmp byte [rdi], ch
add byte [rax], al
and dh, bh
lcall [rax + 0x2f]
add byte [rax], al
xor bh, dh
js 0x407549
add byte [rax], al
jb 0x407515
lcall [rax - 0x73ffffd1]
idiv edi
mov eax, 0xbe00002f
idiv edi
fsubr dword [rdi]
add byte [rax], al
sal bh, cl
clc
add byte [rax], al
out dx, al
idiv edi
jmp qword [rax]
xor byte [rax], al
add byte [rdx], cl
clc
inc dword [rax + 0x30]
add byte [rax], al
pop rdx
clc
ljmp [rax + 0x30]
add byte [rax], al
clc
dec dword [rax - 0x5dffffd0]
clc
ljmp [rax - 0x4fffffd0]
clc
dec eax
xor byte [rax], al
add cl, al
clc
call 0xffffffffcf4075a5
clc
dec dword [rax]
xor dword [rax], eax
add byte [rsi], bl
stc
push qword [rax]
xor dword [rax], eax
add byte [rcx + rdi*8], ch
call qword [rax + 0x31]
add byte [rax], al
stc
push qword [rax + 0x31]
add byte [rax], al
sahf
stc
lcall [rax - 0x53ffffcf]
stc
mov eax, 0xc6000031
stc
fdiv dword [rcx]
add byte [rax], al
cli
inc dword [rax]
xor al, byte [rax]
add byte [rdx], dh
cli
jmp qword [rax]
xor al, byte [rax]
add al, ah
cli
dec dword [rax + 0x32]
add byte [rax], al
cld
cli
ljmp [rax + 0x32]
add byte [rax], al
sti
dec dword [rax + 0x50000032]
sti
ljmp [rax + 0x6a000032]
sti
dec eax
xor al, byte [rax]
add byte [rbx - 0x17000005], bl
xor al, byte [rax]
add byte [rbp + 0x8fffffb], dh
xor eax, dword [rax]
add dh, ah
sti
ljmp [rax]
xor eax, dword [rax]
add byte [rsi], cl
cld
dec dword [rax + 0x33]
add byte [rax], al
cld
ljmp [rax + 0x33]
add byte [rax], al
cmp al, 0xfc
dec dword [rax + 0x4d000033]
cld
ljmp [rax - 0x63ffffcd]
cld
call rax
xor eax, dword [rax]
add dl, bl
cld
push rax
xor eax, dword [rax]
add dh, ah
cld
call qword [rax]
xor al, 0
add al, bh
cld
push qword [rax]
xor al, 0
add byte [rcx], cl
std
call qword [rax + 0x34]
add byte [rax], al
outsb dx, byte [rsi]
std
push qword [rax + 0x34]
add byte [rax], al
jg 0x40764b
call qword [rax - 0x1bffffcc]
std
push qword [rax + 0x1e000034]
call rax
xor al, 0
add byte [rdx], bh
push rax
xor al, 0
add byte [rsi + rdi*8 - 1], cl
call qword [rax]
xor eax, 0xfe580000
push qword [rax + 0x35]
add byte [rax], al
enter -2, -1
mov eax, 0x35
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4076a7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
call 0x2b407642
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4076d7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp byte [rdi + rdi*8 + 0x170ff], dl
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rsi + 0x12ffffa3], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rax + 0xeffffa3], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
xchg eax, esi
lcall [rdx]
adc byte [rsi + 0x60d4302], al
add dl, byte [rbp + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add al, al
xchg eax, esi
ljmp [rsi]
adc byte [rsi + 0x60d4302], al
add ch, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x69], cl
ljmp [rcx]
adc byte [rsi + 0x60d4302], al
add ah, byte [rsp + rcx + 0x807]
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
xlatb
xchg eax, edi
call qword [rbx]
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
add al, 1
add byte [rax], al
cdqe
inc dword [rsi]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add eax, dword [rcx]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
xor byte [rcx + 0x12affff], bl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add esp, dword [rip + 0x8070c01]
add byte [rax + rax], bl
add byte [rax], al
add dword [rax], r8d
add byte [rdx], bh
dec dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add dword fs:[rax], eax
add byte [rdx + rbx*4 - 1], ah
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rcx], al
add byte [rax], al
mov bl, 0x9a
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add ch, ch
ljmp [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add dword [rax], eax
add byte [rsi], ch
movabs byte [0x41000000002affff], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 1
add byte [rax], al
cmp byte [rdx + 0x1bffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 2
add byte [rax], al
xor esp, dword [rdx + 0xeffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 2
add byte [rax], al
and dword [rdx + 0xeffff], esp
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rax], dl
movabs byte [0x41000000004affff], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, byte fs:[rax]
add byte [rdx], bh
movabs byte [0x41000000000effff], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
sub byte [rdx + 0x3cffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
ja 0x40795f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x407979
add edx, dword [rax + 0xc]
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
and al, 0xa2
inc dword [rsi + 4]
add byte [rax], al
add al, 0xfc
movabs eax, dword [0x430286100e410040]
or eax, 0x3834806
add edi, dword [rcx]
add al, 0xc
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], r8b
add byte [rax], dl
jmp qword [rbx + 5]
add byte [rax], al
add al, 0x18
movabs byte [0x430286100e410040], al
or eax, 0x3834806
add edx, dword [rsi + 5]
or al, 7
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
je 0x4079ce
add byte [rax], al
lahf
jmp qword [rax]
add dword [rax], eax
add byte [rsi + rdi], al
movabs byte [0x430286100e410040], al
or eax, 0x3834506
add edx, dword [rsi]
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 3
add byte [rax], al
repne movsd dword [rdi], dword ptr [rsi]
push qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jb 0x407a17
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add eax, dword [rax]
add byte [rdx], cl
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
jl 0x407a39
add byte [rax], al
jbe 0x4079e0
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
add eax, dword [rax]
add byte [rsi + 0x4cffffa6], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov esp, 0xca000003
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 3
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
add al, 4
add byte [rax], al
pop rsp
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 4
add byte [rax], al
test byte [rdi + 0x4cffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add al, 0
add byte [rax + 0x4dffffa7], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add dword [rax], eax
add dh, dl
cmpsd dword [rsi], dword ptr [rdi]
lcall [rbx]
add byte [rax], al
add byte [rax + rdx*2], al
movabs byte [0x430286100e410040], al
or eax, 0x70c5606
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
add dword [rax], eax
add dl, cl
cmpsd dword [rsi], dword ptr [rdi]
inc dword [rax + rax]
add byte [rsp + rdx*2], al
movabs byte [0x430286100e410040], al
or eax, 0x70c7f06
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xe6000004
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
cmp al, 2
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rdx + 0x4000000]
pop rax
movabs byte [0x430286100e410040], al
or eax, 0x38c4706
add dword [rdx + rax], 0x51
adc byte cs:[rbp + 0xc], ch
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 5
add byte [rax], al
test al, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 5
add byte [rax], al
sbb al, 0xa8
ljmp [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x5f
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add eax, 0xa8600000
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x407c33
add byte [rax], al
test al, 0xff
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add eax, 0xa85a0000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 5
add byte [rax], al
push rsp
test al, 0xff
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x49
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rip - 0x577e0000]
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add eax, 0xa88c0000
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 6
add byte [rax], al
mov ah, 0xa8
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 6
add byte [rax], al
loopne 0x407ca2
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
pop rsp
add byte [rax], al
cld
test al, 0xff
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x407d3c
add byte [rax], al
cld
test al, 0xff
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
out dx, al
test al, 0xff
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xee000006
test al, 0xff
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rsi]
add byte [rax], al
stc
test al, 0xff
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
or byte [rcx + 0x1bffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 7
add byte [rax], al
add al, 0xa9
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pushfq
add al, 0
add byte [rax], al
test eax, 0x62ffff
add byte [rax], al
add al, 0x64
movabs byte [0x430286100e410040], al
or eax, 0x3834506
add bl, byte [rax + 0xc]
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0
add byte [rdx], bh
test eax, 0x44ffff
add byte [rax], al
add al, 0x74
movabs byte [0x430286100e410040], al
or eax, 0x70c7f06
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], es
add byte [rax], al
push rsi
test eax, 0xeffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
test eax, 0xadffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x8070c], eax
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 5
add byte [rax], al
retf -0x57
lcall [rbx]
add byte [rax], al
add byte [rax + rdi*2], al
movabs byte [0x430286100e410040], al
or eax, 0x70c5606
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
add eax, 0xa9be0000
inc dword [rax + rax]
add byte [rsp + rdi*2], al
movabs byte [0x430286100e410040], al
or eax, 0x70c7f06
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 8
add byte [rax], al
fisubr dword [rcx + 0x6cffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or byte [rax], r8b
add byte [rsi], ah
stosb byte [rdi], al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add eax, 0xaa2c0000
inc dword [rdi]
add al, byte [rax]
add byte [rax + rax*4], al
movabs byte [0x430286100e410040], al
or eax, 0x3834506
add edi, ebp
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
in al, dx
add eax, 0xac0c0000
inc dword [rbp]
add byte [rax], al
add al, 0xa8
movabs byte [0x430286100e410040], al
or eax, 0xc400206
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 8
add byte [rax], al
sub ch, byte [rdi + rdi*8 + 0x1dff]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte [rax], al
add byte [rdi], ah
lodsb al, byte [rsi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or byte [rax], al
add byte [rcx], ah
lodsb al, byte [rsi]
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x407fcf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 9
add byte [rax], al
lodsb al, byte [rsi]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
lodsb al, byte [rsi]
inc dword [rdi]
add al, byte [rax]
add byte [rsp + rbp*4], al
movabs byte [0x430286100e410040], al
or eax, 0x3834506
add edi, ebp
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov esp, 0x26000006
scasb al, byte [rdi]
inc dword [rbp]
add byte [rax], al
add al, 0xd4
movabs byte [0x430286100e410040], al
or eax, 0xc400206
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rcx], cl
add byte [rax], al
scasb al, byte [rdi]
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or dword [rax], eax
add byte [rcx - 0x52], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword [rax], eax
add byte [rbx], bh
scasb al, byte [rdi]
push qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jno 0x40809f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 9
add byte [rax], al
push rdx
scasb al, byte [rdi]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xa
add byte [rax], al
scasb al, byte [rdi]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdi], al
add byte [rax], al
scasb al, byte [rdi]
call qword [rax]
add byte [rax], al
add al, 0xd8
movabs byte [0x430286100e410040], al
or eax, 0xc4b0206
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or r8b, byte [rax]
add byte [rdx - 0x52], dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
or al, byte [rax]
add byte [rax - 0x52], ah
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdx], cs
add byte [rax], al
push -0x52
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or al, byte [rax]
add byte [rsi + rbp*4 - 1], bh
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
or al, byte [rax]
add byte [rsi + rbp*4 + 0x4cffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
or al, byte [rax]
add al, dl
scasb al, byte [rdi]
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x78
or al, 7
or byte [rax + rax], bl
add byte [rax], al
or al, 0xb
add byte [rax], al
repne scasb al, byte [rdi]
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0xb
add byte [rax], al
add ebp, dword [rdi + 0xdaffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x32
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or eax, dword [rax]
add byte [rsi + 0x64ffffaf], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x408239
add byte [rax], al
cli
scasd eax, dword [rdi]
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
xchg eax, esp
or eax, dword [rax]
add byte [rdi], ah
mov al, 0xff
push qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x6a
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 9
add byte [rax], al
jbe 0x40822a
cmp al, byte [rax]
add byte [rax], al
add al, 0xdc
movabs byte [0x430286100e410040], al
or eax, 0x70c7506
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xb
add byte [rax], al
mov byte [rax + 0x1dffff], dh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xc
add byte [rax], al
xchg byte [rax + 0xeffff], dh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xc
add byte [rax], al
je 0x408292
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0
add byte [rax - 0x50], ah
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0
add byte [rax + rsi*4 - 1], cl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 9
add byte [rax], al
mov al, 0xff
lcall [rsi]
add byte [rax], al
add al, 0xe0
movabs byte [0x430286100e410040], al
or eax, 0x3834506
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 0xa
add byte [rax], al
jle 0x40831a
jmp qword [rcx]
add byte [rax], al
add al, 0xec
movabs byte [0x430286100e410040], al
or eax, 0xc5c0206
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0
add byte [rax + 0x43ffffb0], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jle 0x4083af
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or al, 0
add ah, bl
mov al, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xd
add byte [rax], al
retf -0x50
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0xd
add byte [rax], al
mov al, 0xff
call qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0xfe00000a
mov al, 0xff
inc byte [rcx]
add byte [rax], al
add al, 0xf0
movabs byte [0x430286100e410040], al
or eax, 0x38c4706
add dword [rbx + rax], -0xe
add dword [rdi + rax], ecx
or byte [rax + rax], bl
add byte [rax], al
test byte [rip - 0x4d2c0000], cl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or eax, 0xb2d00000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 0xb
add byte [rax], al
int3
mov dl, 0xff
call qword [rax]
add byte [rax], al
add al, 0x18
movabs dword [0x430286100e410040], eax
or eax, 0xc4b0206
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
or eax, 0xb2f40000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0xe
add byte [rax], al
loop 0x40847c
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xe
add byte [rax], al
in al, dx
mov dl, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
fidiv dword [rdx + 0x39ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x408527
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
or eax, dword [rax]
add ah, dh
mov dl, 0xff
add dword [rax], eax
add byte [rsp + rbx], al
movabs dword [0x430286100e410040], eax
or eax, 0x3834506
add esp, eax
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
add byte [rax], al
mov dh, 0xb4
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 0xe
add byte [rax], al
sal byte [rdi + rdi*8 + 0xecff], 0
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x408593
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rsi]
add byte [rax], al
test byte [rbp + 0x33ffff], dh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add byte [rax], al
xchg eax, edi
mov ch, 0xff
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xf
add byte [rax], al
mov ch, 0xff
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x4085ff
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
fnstenv [rbp + 0x1dffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word fs:[rax]
mov ch, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], cl
add byte [rax], al
mov ch, 0xff
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sldt word [rax]
mov ch, 0xff
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x408683
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sldt word [rax]
xchg eax, edx
mov dh, 0xff
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
sldt word [rax]
movsd dword [rdi], dword ptr [rsi]
mov dh, 0xff
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x10
add byte [rax], al
sal dword [rsi + 0x2affff], 1
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0x10
add byte [rax], al
fdiv qword [rsi + 0x35ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jo 0x40870f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
adc byte [rax], al
add cl, dh
mov dh, 0xff
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40873e
add byte [rax], al
out dx, al
mov dh, 0xff
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40874f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
adc byte [rax], al
add byte [rdi + rsi*4], cl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x10
add byte [rax], al
or byte [rdi + 0x35ffff], dh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jo 0x40878f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc byte [rax], al
add byte [rip + 0x26ffffb7], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
adc byte [rax], al
add byte [rbx], ah
mov bh, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x11
add byte [rax], al
adc dh, byte [rdi + 0x4cffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0x11
add byte [rax], al
mov bh, 0xff
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
adc dword [rax], eax
add byte [rbx], bh
mov bh, 0xff
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
je 0x40883f
add byte [rax], al
mov bh, 0xff
call qword [rip + 1]
adc byte [rsi + 0x60d4302], al
add edx, dword [rax]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
adc dword [rax], eax
add byte [rcx - 0x48], bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x11
add byte [rax], al
movabs rax, 0x410000000082ffff
adc byte [rsi + 0x60d4302], al
add bh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc dword [rax], eax
add byte [rdx + 0x65ffffb8], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
adc dword [rax], eax
add al, dh
mov eax, 0x11ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x12
add byte [rax], al
loope 0x40888a
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], bl
add byte [rax], al
xor al, 0x12
add byte [rax], al
add al, 0xb9
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], ah
add byte [rax], al
push rsp
adc al, byte [rax]
add byte [rip - 0x7f000047], ch
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
jbe 0x408928
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x408948
add byte [rax], al
xchg byte [rdx + 0x53ffff], bh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
adc al, byte [rax]
add byte [rdx + 0x54ffffba], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xee000012
mov edx, 0x3cffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
fcom qword [rdx]
add byte [rax], al
or bh, byte [rbx + 0x11ffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc al, byte [rax]
add ah, bh
mov edx, 0x20ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0x13
add byte [rax], al
cld
mov edx, 0xe9ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fisttp word [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc r8d, dword [rax]
add byte [rbp + 0x26ffffbb], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc eax, dword fs:[rax]
add ah, al
mov ebx, 0x49ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rbx], dl
add byte [rax], al
out dx, al
mov ebx, 0x63ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
adc eax, dword [rax]
add byte [rdx], dh
mov esp, 0x35ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jo 0x408a7f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc eax, dword [rax]
add byte [rdi - 0x44], al
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x13
add byte [rax], al
push rax
mov esp, 0x26ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0x14
add byte [rax], al
push rsi
mov esp, 0x6bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x5f
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0x14
add byte [rax], al
mov esp, 0xecffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x408b0b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
adc al, 0
add byte [rsi - 0x43], bl
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x408b42
add byte [rax], al
jb 0x408aef
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
adc al, 0
add byte [rax - 0x43], bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 0x14
add byte [rax], al
mov bp, 0xffff
push rsp
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rax + rax]
add byte [rdx + 0x26ffffbd], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc al, 0
add byte [rax + 0x2affffbd], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x15
add byte [rax], al
movabs byte [0x35ffffbd], al
adc byte [rsi + 0x60d4302], al
jo 0x408bf7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x15
add byte [rax], al
mov eax, 0x3effffbd
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x408c17
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc eax, 0xbdd60000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x408c4b
add byte [rax], al
sar dword [rbp + 0x26ffff], 1
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc eax, 0xbdd80000
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x3000015
mov esi, 0x26ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rip - 0x41f70000]
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc eax, 0xbe120000
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x16
add byte [rax], al
adc al, 0xbe
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x16
add byte [rax], al
mov esi, 0x2affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
sub dword [rsi + 0x48ffff], edi
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x408d4c
add byte [rax], al
push rcx
mov esi, 0x31ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
mov esi, 0x2effff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
mov esp, 0x70000016
mov esi, 0xeffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rsi]
add byte [rax], al
pop rsi
mov esi, 0x29ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
push 0x22ffffbe
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x17
add byte [rax], al
push -0x42
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x17
add byte [rax], al
je 0x408db8
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
add byte [rax], al
pushfq
mov esi, 0x31ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x408e4d
add byte [rax], al
lodsd eax, dword [rsi]
mov esi, 0x26ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
mov bl, 0xbe
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
mov esp, 0xc2000017
mov esi, 0xeffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rdi]
add byte [rax], al
mov al, 0xbe
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
lodsb al, byte [rsi]
mov esi, 0xbffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x18
add byte [rax], al
xchg eax, edi
mov esi, 0x2effff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
cmp al, 0x18
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
mov esi, 0xfffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb byte [rax], al
add byte [rsi + rdi*4 + 0x54ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x408f4e
add byte [rax], al
enter -0x42, -1
pop rsp
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
sbb byte [rax], al
add byte [rdi + rdi*4], al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xf0000018
mov esi, 0x62ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
fcomp qword [rax]
add byte [rax], al
xor bh, byte [rdi + 0x23fffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x33
add cl, byte [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x19
add byte [rax], al
sar r15, -1
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x408fdf
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rsi], dl
add byte [rax], al
sar edi, -1
out 1, eax
add byte [rax], al
add al, 0x44
movabs dword [0x430286100e410040], eax
or eax, 0x3834506
add ebx, ebp
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb qword [rax], r8
add byte [rdx], ah
ret
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb dword [rax], eax
add byte [rax], dl
ret
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], ds
add byte [rax], al
cld
ret 0xffff
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x409067
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb dword [rax], eax
add byte [rbx + rax*8], dl
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
sbb dword [rax], eax
add byte [rbx + rax*8], bh
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb dword [rax], eax
add byte [rdx], bh
ret
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1a
add byte [rax], al
sub bl, al
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1a
add byte [rax], al
sbb bl, al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb r8b, byte [rax]
add byte [rsi], bl
ret
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb al, byte [rax]
add byte [rcx], dh
ret
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
mov word [rdx], ds
add byte [rax], al
ret
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb al, byte [rax]
add byte [rax - 0x3d], cl
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x409187
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb al, byte [rax]
add byte [rax - 0x3d], ah
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb al, byte [rax]
add byte [rdx - 0x3d], ah
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1b
add byte [rax], al
insb byte [rdi], dx
ret
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x1b
add byte [rax], al
xchg eax, esp
ret
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb r8, qword [rax]
add byte [rsi + 0xfffffc3], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb eax, dword [rax]
add byte [rbp + 0x26ffffc3], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rbx], ds
add byte [rax], al
wait
ret
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb eax, dword [rax]
add byte [rdx + 0x1bffffc3], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb eax, dword [rax]
add byte [rsi + 0xbffffc3], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb eax, dword [rax]
add byte [rcx + 0xfffffc3], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1c
add byte [rax], al
add bl, 0xff
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1c
add byte [rax], al
outsd dx, dword [rsi]
ret
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0
add byte [rbx + rax*8 + 0x1affff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb al, 0
add byte [rsi + 0xeffffc3], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], ds
add byte [rbx + rax*8 + 0x42ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x409367
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb al, 0
add byte [rsi + 0x1affffc3], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb al, 0
add byte [rax + 0x31ffffc3], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb al, 0
add byte [rdx + 0x23ffffc3], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1d
add byte [rax], al
mov ebp, 0x53ffffc3
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x1d
add byte [rax], al
ret
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb rax, -0x3c160000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb eax, 0xc3d80000
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x409447
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rip - 0x3c060000], ds
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb eax, 0xc3f40000
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb eax, 0xc4050000
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb eax, 0xc3f40000
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1e
add byte [rax], al
clc
ret
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1e
add byte [rax], al
in al, 0xc3
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
call 0x274094d0
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
out dx, al
ret
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rsi], ds
add byte [rax], al
fadd st(3), st(0)
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
xor al, ah
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
push rsi
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], ah
add byte [rax], al
hlt
add byte [rax], al
add ah, 0xff
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0x1f
add byte [rax], al
lodsb al, byte [rsi]
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x4095fb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
jo 0x4095c7
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
test ch, al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdi], bl
add byte [rax], al
mov al, ch
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
mov dh, 0xc5
jmp qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
add byte [rax], al
test ch, 0xff
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
cld
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x20
add byte [rax], al
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x20
add byte [rax], al
cmc
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and byte [rax], r8b
add byte [rax], al
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
and byte [rax], al
add byte [rbx], al
inc dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rax], fs
add byte [rax], al
sub dh, al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
and byte [rax], al
add byte [rsi], dl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and byte [rax], al
add byte [rcx], dl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
and byte [rax], al
add byte [rsi + rax*8], cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x21
add byte [rax], al
cli
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x4097e7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x21
add byte [rax], al
sbb al, 0xc6
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and qword [rax], r8
add byte [rsi], dl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
and dword [rax], eax
add byte [rdi], ah
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], fs
add byte [rax], al
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
and dword [rax], eax
add byte [rdx], bl
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and dword [rax], eax
add byte [rip + 0x38ffffc6], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jae 0x4098a7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
and dword [rax], eax
add byte [rsi], bl
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x22
add byte [rax], al
adc al, dh
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x22
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x409907
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and r8b, byte [rax]
add byte [rax], bh
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
and al, byte [rax]
add byte [rsi + rax*8], ch
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdx], fs
add byte [rax], al
cmp al, dh
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
and al, byte [rax]
add byte [rdx], ch
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and al, byte [rax]
add byte [rsi + rax*8], ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
and al, byte [rax]
add byte [rsi], dh
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0x23
add byte [rax], al
pop rsi
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x23
add byte [rax], al
jo 0x4099b0
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and r8, qword [rax]
add byte [rbx + 0x2dffffc6], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
and al, 0
add byte [rax], al
int3
and byte [rax], al
add byte [rax + 0x44ffffc6], ch
add byte [rax], al
add byte [rsp + rbp*2], al
movabs dword [0x430286100e410040], eax
or eax, 0x70c7f06
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
and eax, dword [rax]
add ah, al
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0x21
add byte [rax], al
mov eax, 0xadffffc6
add byte [rax], al
add byte [rax + rsi*2], al
movabs dword [0x430286100e410040], eax
or eax, 0x3834506
add ah, byte [rbx + 0x8070c]
add byte [rax], al
sbb al, 0
add byte [rax], al
fsub qword [rbx]
add byte [rax], al
cmp eax, 0x1affffc7
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
and eax, dword [rax]
add byte [rdi], dh
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sbb al, 0x24
add byte [rax], al
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0
add byte [rsi + 0x1affffc7], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0
add byte [rax + 0x43ffffc7], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jle 0x409b3f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rax + rax], ah
add byte [rbx + 0x4cffffc7], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
and al, 0
add bh, al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and al, 0
add dl, al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
and al, 0
add byte [rax + 0x42ffffc7], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jge 0x409bc7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x25
add byte [rax], al
rol bh, cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x25
add byte [rax], al
int3
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and rax, 0xffffffffc7de0000
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
and al, byte [rax]
add dl, dl
lcall [rbx]
add byte [rax], al
add byte [rsp + rcx*4], al
movabs dword [0x430286100e410040], eax
or eax, 0x70c5606
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
and eax, 0xc7c60000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0x23
add byte [rax], al
ret 0xffc7
call qword [rax]
add byte [rax], al
add al, 0x90
movabs dword [0x430286100e410040], eax
or eax, 0xc4b0206
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fsub qword [rip - 0x38160000]
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
and eax, 0xc7f20000
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x26
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x26
add byte [rax], al
loopne 0x409cc1
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte es:[rax], al
rol edi, 1
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
jl 0x409d5c
add byte [rax], al
mov edi, 0x4fffffc7
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte es:[rax], al
out 0xc7, al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte es:[rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 0x26
add byte [rax], al
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x27
add byte [rax], al
inc bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x27
add byte [rax], al
in al, dx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
out 0xc7, al
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x409e55
add byte [rax], al
enter -1, 0x14
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
and al, 0
add byte [rdx], cl
enter -1, -0x53
add byte [rax], al
add byte [rsp + rdx*4], al
movabs dword [0x430286100e410040], eax
or eax, 0x3834506
add ah, byte [rbx + 0x8070c]
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x90000027
enter -1, 0x1b
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fsub qword [rdi]
add byte [rax], al
mov eax, cs
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
xchg eax, ecx
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sbb al, 0x28
add byte [rax], al
movabs al, byte [0x1affffc8]
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x28
add byte [rax], al
enter -1, 0x31
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sub byte [rax], al
add byte [rbx + 0x1affffc8], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x409f5e
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
enter -1, 0x31
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sub byte [rax], al
add byte [rsi + 0x28ffffc8], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xbe000028
enter -1, 0x20
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fsubr qword [rax]
add byte [rax], al
mov esi, 0xeffffc8
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sub byte [rax], al
add byte [rax + rcx*8 + 0x11ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0x29
add byte [rax], al
popfq
enter -1, 0x4f
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub dword [rax], r8d
add ah, al
enter -1, 0x3e
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40a01f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub dword fs:[rax], eax
add dl, ah
enter -1, 0xb
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], ch
add byte [rax], al
enter -1, 0x11
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sub dword [rax], eax
add al, al
enter -1, 0x11
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub dword [rax], eax
add byte [rcx + 0x65ffffc8], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 0x29
add byte [rax], al
test al, 0xff
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x2a
add byte [rax], al
out 0xc8, eax
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 0x2a
add byte [rax], al
sub al, 0xc9
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sub r8b, byte [rax]
add byte [rsi - 0x37], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, byte fs:[rax]
add byte [rdx - 0x37], al
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], ch
add byte [rax], al
xor al, 0xc9
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sub al, byte [rax]
add bl, bl
js 0x40a162
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40a17f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, byte [rax]
add cl, bh
js 0x40a182
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, ah
sub al, byte [rax]
add al, ah
enter -1, 0x65
add byte [rax], al
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x40a1da
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
sub al, 0x2b
add byte [rax], al
or cl, cl
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
push rbp
add dword [rax], eax
add cl, al
add al, byte [rip - 0x7efff77d]
add ecx, edx
add al, 0x9d
or byte [rax], al
cwde
or byte [rdi], bl
add byte [rax], al
add bh, bh
inc dword [rcx]
and dh, byte [rbx]
mov esi, 0x9d000001
add eax, 0x8f0009fb
or byte [rip - 0x24fff546], al
or byte [rip - 0x6efff55a], al
or dword [rdi], ebp
xchg eax, ebp
or al, byte [rax]
nop
or al, byte [rax + rax]
inc dword [rcx]
and al, 0
add byte [rbp + 0x74], dl
cli
add dword [rax], eax
pop qword [rdx]
add eax, 0xffff0000
add dword [rax], eax
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rbp + rax + 0x67], bl
add byte [rbp + rax], bh
add bh, bh
inc dword [rcx]
or al, 0x27
add eax, 0x53a0000
add byte [r14 + 5], dl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x54601a01]
add byte [rax], al
in eax, 1
sub esp, dword [rsi + 0x2b80103]
cmp al, byte [rax]
add bl, cl
add esp, dword [rcx]
in al, dx
add eax, dword [rax]
cli
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x54601a01]
add byte [rax], al
in eax, 1
sub esp, dword [rsi + 0x2b80103]
cmp al, byte [rax]
add bl, cl
add esp, dword [rcx]
in al, dx
add eax, dword [rax]
cli
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x1c281a01]
add byte [rax], al
enter 0x501, -0x16
add al, byte [rcx]
cli
add dword [rdx], edi
add byte [rax], al
popfq
add eax, dword [rbp - 0x1e]
add eax, dword [rax]
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x1c221a01]
add byte [rax], al
mov ah, 1
add eax, 0xe60102d7
add dword [rdx], edi
add byte [rax], al
mov eax, dword [rbx]
rol byte [r11], 1
add dh, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add esp, dword [rip + 0x1c221a01]
add byte [rax], al
mov bl, 1
add eax, 0xe50102d5
add dword [rdx], edi
add byte [rax], al
lodsb al, byte [rsi]
add esp, dword [rcx]
int 3
add bl, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x18e0173]
add eax, 0xa1000193
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x18e0173]
add eax, 0xa1000193
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x40
add byte [rax], al
jns 0x40ae0c
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x40ee4f
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add ah, dh
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 5], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasd eax, dword [rdi]
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
or byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax], dh
or byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
or r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40b04d
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400b], al
add byte [rax], al
add byte [rsi + 0x400b], dl
add byte [rax], al
add byte [rsi + 0x400b], ah
add byte [rax], al
add byte [rsi + 0x400b], dh
add byte [rax], al
add dh, al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xb, al
add byte [rax], al
add byte [rax], al
add dh, dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40b150
je 0x40b159
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40b167
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40b164
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 5], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax], dh
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or dword [rax], eax
ror byte [rax], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, bl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
call 0x40f22f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
adc byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x400c8000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0x400c], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add ah, dh
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax], al
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax], ch
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x4076], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add ah, bh
movabs eax, dword [0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
call 0x4113aa
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x60adf800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add al, cl
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, ah
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0xd], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add al, ah
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x60adf800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0xd], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x411542
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], ch
add byte [rax], dl
add byte [rax], cl
imul eax, dword [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx], cl
imul eax, dword [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx], cl
imul eax, dword [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add al, al
out dx, eax
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rbx + rbp*2], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rcx], eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
adc byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rcx], dl
imul eax, dword [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
adc ch, byte [rbx + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
adc al, 0x6b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x40b593
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rbx + rbp*2], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x1000001
add byte [rax], dl
add byte [rax], ah
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd dword [rcx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
and al, 0x6b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sub byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rbx + rbp*2], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax], dh
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rbx + rbp*2], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x40b654
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
cmp byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rbx + rbp*2], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 2
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x6b], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rbx + rbp*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rbx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
imul rax, qword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, byte [rbx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
imul r8, qword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x6b], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rbx], eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push rsp
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x6b], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld dword [rbx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pop rsp
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 4
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, 0x1000004
add byte [rax], dl
add byte [rbx + rbp*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x6b], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x40b78e
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
insb byte [rdi], dx
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x6b], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rbx + rbp*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x6b], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
jl 0x40b85d
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
sub byte [rbx + 0x40], 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
test byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add eax, 0x10000
adc byte [rax], al
mov byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov word [rbx + 0x40], gs
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild word [rip + 0x10000]
adc byte [rax], al
nop
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x1000006
add byte [rax], dl
add byte [rbx + rbp*2 + 0x40], dl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
cwde
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pushfq
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x406b], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
test al, 0x6b
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
add byte [rax], al
add al, byte [rax]
add byte [rbx], bh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
add al, byte [rax]
add byte [rcx + 0x1a], bh
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
clc
movabs eax, dword [0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x1000007
add byte [rsi], dl
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
sub byte [rax + rax*2], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax + 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
add byte [rax], al
add byte [rax], al
adc al, 0
clc
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 7], ch
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x411a82
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 7], bh
add byte [rax], al
add dword [rax], eax
add byte [rax], cl
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000007], al
add byte [rsi], cl
add byte [rdx + 0x4028], bh
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000007], ch
add byte [rsi], cl
add byte [rsi + 0x48], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rdi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
sub al, byte [rax]
add byte [rax], ah
add byte [rdx], bl
add al, cl
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], al
add byte [rdx], ah
add byte [rsi], cl
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
add byte fs:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000008], bl
add byte [rsi], cl
add byte [rdx], dh
add byte fs:[rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
and byte [rax], dh
add byte [rax], ah
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add cl, cl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbx*2 + 0x40], bl
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dl
push rsi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, bl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdx + 9], ch
add byte [rax], al
and al, byte [rax]
add ah, al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdi + 0x22000009], dh
add byte [rsi], cl
add byte [rdx + 0x405f], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xa], ch
add byte [rax], al
and al, byte [rax]
add dh, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xa], bh
add byte [rax], al
and al, byte [rax]
add bl, dl
add byte ds:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1200000a], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbx*2 + 0x40], al
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, al
add byte es:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], cl
add byte [rax], al
and al, byte [rax]
add ah, al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbp + 0x2200000b], dl
add byte [rsi], cl
add byte [rdi + rsi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 0xb
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
imul eax, dword [rax], 0
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x5e], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4021], dl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x404b], bh
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4045], bh
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000c], bh
add byte [rsi], cl
add byte [rdx + rbp*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4047], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
or eax, 0x220000
add byte [rcx + 0x4040], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xd], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x2f], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000d], ah
add byte [rsi], cl
add byte [rbp + 0x3d], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add cl, ch
or eax, 0x220000
add byte [rsi], dl
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + rdx*2 + 0x40], ch
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add al, bl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rsi], 0x120000
add al, dh
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000e], dl
add byte [rsi], cl
add byte [rdx + 0x405f], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4049], dh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x5b], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
sldt word [rax]
and al, byte [rax]
add byte [rbx + rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xf], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4024], ch
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000f], bh
add byte [rsi], cl
add byte [rdx + 0x4064], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
sldt word [rax]
and al, byte [rax]
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x10], bh
add byte [rax], al
and al, byte [rax]
add ah, al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x1200002a
add byte [rsi], cl
add byte [rax + 0x400c], dl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4059], bl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rbx + 0x22000011], bl
add byte [rsi], cl
add byte [rax + 0x401a], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000011], bh
add byte [rsi], cl
add byte [rbp + rcx*2 + 0x40], ch
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
and byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rax], es
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x22000012
add byte [rsi], cl
add byte [rax + 0x49], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000012], cl
add byte [rsi], cl
add byte [rdi + rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000012], bh
add byte [rsi], cl
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0x12
add byte [rax], al
and al, byte [rax]
add bh, dh
add byte fs:[rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x13], bh
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x56], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x13, 0
and al, byte [rax]
add byte [rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], cl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x14], ah
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4060], ah
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rsi + 0x22000014], ah
add byte [rsi], cl
add byte [rdx + 0x51], al
add byte [rax], al
add byte [rax], al
add bh, ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add dl, ch
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rdi], bl
add byte [rax], al
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
adc eax, 0x220000
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x15], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdi + 0x20000015], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x20000015], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
adc eax, 0x220000
add byte [rdi], bh
add byte [eax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
adc eax, 0x220000
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], dl
add byte [rax], al
and al, byte [rax]
add byte [rbx + rbx*2 + 0x40], ah
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x16], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x4013], bh
add byte [rax], al
add byte [rbx + 5], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
and al, byte [rax]
add byte [rbx + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add dh, ah
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
and al, byte [rax]
add ah, dl
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000017], dl
add byte [rsi], cl
add byte [rdx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000e], cl
add byte [rdi], cl
add ah, dh
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000017], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add cl, dh
add byte [rax], al
and al, byte [rax]
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
push 0x40
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [r8], r8b
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbx], dh
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4037], ch
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000018], dl
add byte [rsi], cl
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
sbb byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rdx], cl
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x40], dh
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, ch
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000019], al
add byte [rsi], cl
add byte [rsi + 0x4027], bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000019], bh
add byte [rsi], cl
add ch, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb r8b, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200001a], cl
add byte [rsi], cl
add byte [rsi + 0x4020], ch
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosb byte [rdi], al
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbp*2], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add bl, al
add byte [eax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4042], bh
add byte [rax], al
add byte [rax + 1], al
add byte [rax], al
add byte [rax + 0x2200001b], ch
add byte [rsi], cl
add bh, dh
add byte fs:[rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ficomp dword [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x34], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0x1c
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x40], ch
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200001c], al
add byte [rsi], cl
add byte [rsp + rcx*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x67], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11000007], ch
add byte [rbx], bl
add byte [rax - 0x49], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x138], al
add byte [rax], al
add byte [rbx + 0x220000], al
add byte [rdi + rbx*2 + 0x40], dh
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0x1d
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
imul eax, dword [rax], 0
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
sbb eax, 0x220000
add byte [rsi + 0x28], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200001d], al
add byte [rsi], cl
add byte [rdx + 0x28], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200001d], bl
add byte [rsi], cl
add byte [rbp + rdx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
sbb eax, 0x220000
add byte [rsi + 0x65], ch
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x403d], ah
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1e], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x60], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x402b], bl
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add ah, dl
add byte [rax], al
and al, byte [rax]
add byte [rdx], al
imul eax, dword [rax], 0
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add dh, ch
add byte gs:[rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ebx, dword [rdi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbx*2 + 0x40], ah
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x40c571
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x401a], cl
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbx], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x33], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x27], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
and byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
sub al, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000020], ch
add byte [rsi], cl
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x20], dl
add byte [rax], al
and al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x20], bh
add byte [rax], al
and al, byte [rax]
add ah, bl
add byte es:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000020], ah
add byte [rsi], cl
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x30], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x22000021
add byte [rsi], cl
add byte [rdi + 0x5e], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
and dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rdi + 0xf], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rsi], ah
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4030], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
movabs al, byte [0x400b]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22], bh
add byte [rax], al
and al, byte [rax]
add al, bl
and eax, 0x40
add byte [rax], al
cmp al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
fsub dword [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x56], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4d], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x23], al
add byte [rax], al
and al, byte [rax]
add byte [rbp + rcx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x23], dh
add byte [rax], al
adc al, byte [rax]
add byte [rbp + 0x13], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rbx], 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000023], bl
add byte [rsi], cl
add byte [rax], cl
add byte [eax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dh
add byte fs:[rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, ch
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x40c7b6
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x57], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000024], ch
add byte [rsi], cl
add ah, cl
cmp eax, 0x40
add byte [rax], al
xor eax, 0
add byte [rax], al
add dl, bl
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x22000025
add byte [rsi], cl
add byte [rdi + 0x32], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x40c817
add byte [rax], al
and al, byte [rax]
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000025], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000025], bh
add byte [rsi], cl
add byte [rsi + 0x23], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte es:[rax], al
adc dword [rax], eax
adc byte [rax], al
add byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
and al, byte [rax]
add byte [rax], dl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000026], dh
add byte [rsi], cl
add byte [rdx*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000026], cl
add byte [rsi], cl
add dh, dh
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000026], bh
add byte [rsi], cl
add byte [rsi], dl
xor eax, 0x40
add byte [rax], al
inc byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x3f], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsp, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000027], al
add byte [rsi], cl
add byte [rax + 0x4054], dh
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4d], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x405d], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x401a], ch
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
sub byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x28], dl
add byte [rax], al
adc al, byte [rax]
add bl, dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x28], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4048], ah
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000028], cl
add byte [rsi], cl
add byte [rdx + 0x1b], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rcx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x33], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000029], dh
add byte [rsi], cl
add dh, cl
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x29], bh
add byte [rax], al
and al, byte [rax]
add ah, dl
add byte gs:[rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
sub dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
sub al, byte [rax]
add byte [rax], dl
add byte [rdx], bl
add al, cl
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rbp], ah
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x405e], cl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2a], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x49], bh
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rbp + 0x2200002a], al
add byte [rsi], cl
add byte [rsi], dl
add byte fs:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, dl
push rsi
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, dh
add byte cs:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4040], bh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rcx + 0x2b], ch
add byte [rax], al
and al, byte [rax]
add al, dh
pop rax
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp + 0x220000], al
add ah, al
push 0x40
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add bl, al
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, dh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbp*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2c], dl
add byte [rax], al
and al, byte [rax]
add byte [rbx + rdx*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x63], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
sub eax, 0x220000
add al, bl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
sub eax, 0x220000
add byte [rbx + rsi + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200002d], ch
add byte [rsi], cl
add byte [rdi + rsi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
sub eax, 0x220000
add byte [rax], bh
push rbx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte cs:[rax], al
and al, byte [rax]
add byte [rdx + 0x28], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte cs:[rax], al
and al, byte [rax]
add byte [rdx + 0x4063], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2e], dl
add byte [rax], al
adc al, byte [rax]
add byte [rdx], bh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2e], bl
add byte [rax], al
and al, byte [rax]
add byte [rbx + rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200002e], ah
add byte [rsi], cl
add byte [rsi + 0x68], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte cs:[rax], al
and al, byte [rax]
add cl, dl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4043], bh
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x66], bl
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rbx + 0x2200002f], dh
add byte [rsi], cl
add byte [rbp + 0x4058], cl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4067], dl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000030], cl
add byte [rsi], cl
add byte [rcx + rbx*2], ah
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0x30
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x40], ch
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x30], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x58], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000030], cl
add byte [rsi], cl
add dh, al
push rsi
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x30, al
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbp + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], dl
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4e], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x3b], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000031], bl
add byte [rsi], cl
add byte [rbp + 0x404d], bl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4060], ah
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdx + rsi], dl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x66], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, byte [rdx]
add byte [rax], al
and al, byte [rax]
add ah, al
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bl
add byte ds:[rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1100002a], dl
add byte [rbx], bl
add byte [rax], al
mov cl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000033], dl
add byte [rsi], cl
add dh, bl
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, dword gs:[rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi + 0x220000], dl
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add dl, bh
xor eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], al
add byte ds:[rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdx + 0x34], dl
add byte [rax], al
and al, byte [rax]
add bl, ah
push rbp
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000034], dl
add byte [rsi], cl
add byte [rax + 0x4049], dh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x4041], dh
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x220000
add dl, ah
push rbx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rsi], bh
add byte [rcx], dl
add bl, byte [rdx]
add al, bl
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000035], cl
add byte [rsi], cl
add byte [rdx + 0x58], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000035], ah
add byte [rsi], cl
add ch, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000035], bh
add byte [rsi], cl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
xor eax, 0x220000
add byte [rsi], bl
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x220000
add byte [rdx + 0x402f], dh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte ss:[rax], al
and al, byte [rax]
add dl, bh
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte ss:[rax], al
and al, byte [rax]
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11000036], dl
add bl, byte [rdx]
add al, dl
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000036], bl
add byte [rsi], cl
add byte [rbp + 0x4055], bh
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
add byte ss:[rax], al
and al, byte [rax]
add byte [rsi + 0x401a], ch
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte ss:[rax], al
and al, byte [rax]
add dh, ah
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4040], bh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rbx + 0x37], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbp + 0x40], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rcx + 0x22000037], bl
add byte [rsi], cl
add byte [rsp + rcx*2 + 0x40], dh
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 0x37
add byte [rax], al
and al, byte [rax]
add byte [rsp], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x22000038
add byte [rsi], cl
add byte [rbp + 0x40], cl
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x38], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x40d0ca
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4064], ch
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000038], ch
add byte [rsi], cl
add dh, al
add byte gs:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
cmp byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdi], dl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x403e], ch
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
cmp dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x406a], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rax], r8d
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x39], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
push rbx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000039], bh
add byte [rsi], cl
add byte [rdx + 0x4044], ah
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add bh, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rdx], bh
add byte [rax], al
and al, byte [rax]
add dh, ah
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rbp + 0x40], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rax + 0x3b], dh
add byte [rax], al
and al, byte [rax]
add dl, cl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add al, al
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4034], bl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x3c], dl
add byte [rax], al
and al, byte [rax]
add dl, al
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dh
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fdivr dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x404a], ah
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200003d], al
add byte [rsi], cl
add byte [rax], dh
push rdi
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x3d], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x405e], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x3d], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
cmp eax, 0x220000
add byte [rax + 0x4024], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
cmp eax, 0x220000
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte ds:[rax], al
and al, byte [rax]
add al, dh
pop rax
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte ds:[rax], al
and al, byte [rax]
add ah, cl
pop rax
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x3e], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x6a], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x3e], bh
add byte [rax], al
and al, byte [rax]
add dh, al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte fs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdi + 0x220000], ah
add cl, ch
add byte fs:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte ds:[rax], al
and al, byte [rax]
add byte [rdi + 0x4054], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200003f], dh
add byte [rsi], cl
add byte [rdx], dl
push rsi
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x3f], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4041], ah
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200003f], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200003f], ah
add byte [rsi], cl
add byte [rdx + 0x4c], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
add byte [rax], al
and al, byte [rax]
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
and al, byte [rax]
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x40], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
push rsp
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000040], bl
add byte [rsi], cl
add byte [rsi], bl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
and al, byte [rax]
add dl, bh
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rcx]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bh
add byte cs:[rax], al
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, dword [rcx]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ch
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rcx + rax*2 + 0x220000], cl
add byte [rdi + rdi + 0x40], dl
add byte [rax], al
adc eax, 1
add byte [rax], al
add byte [rax], bl
add byte [rax], al
and al, byte [rax]
add byte [rcx], cl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax*2], ah
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax + 0x42], dh
add byte [rax], al
and al, byte [rax]
add byte [rsp + rax*2 + 0x40], dh
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x22000042
add byte [rsi], cl
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x22000043
add byte [rsi], cl
add byte [rax + 0x4d], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax*2], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + rdi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [r8], al
and al, byte [rax]
add byte [rbx + 0x402e], bh
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000043], bl
add byte [rsi], cl
add byte [rax + 0x24], dh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax*2 + 0x220000], dh
add byte [rsi + 0x5c], bh
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add bl, dl
add byte [r8], al
and al, byte [rax]
add byte [rcx + 0x402e], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x44], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx + rdx + 0x40], al
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax*2 + 0x220000], al
add byte [rsi + rbx*2], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x10000044], dh
add byte [rbx], bl
add al, bl
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000044], bh
add byte [rsi], cl
add al, bh
add byte es:[rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], r8b
and al, byte [rax]
add byte [rdx], bl
and eax, 0x40
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, 0x22000045
add byte [rsi], cl
add byte [rdx + 0x27], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x45], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
add byte fs:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000045], ah
add byte [rsi], cl
add dl, ah
add byte ds:[rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add al, dl
add byte [r8], r8b
and al, byte [rax]
add byte [rdx], cl
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000046], cl
add byte [rsi], cl
add byte [rsi + 0x4055], ch
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x46], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x46
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
push rsi
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000046], cl
add byte [rsi], cl
add byte [rsi], ch
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000046], dh
add byte [rsi], cl
add dh, bh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd qword [rsi]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x4b], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rdi]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbp*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x47], cl
add byte [rax], al
and al, byte [rax]
add dl, dh
add byte cs:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax*2 + 0x220000], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add al, dl
add byte [r8], r8b
and al, byte [rax]
add byte [rax + 0x402f], cl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
add byte [r8], r8b
and al, byte [rax]
add byte [rdi], al
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx*2], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x48], al
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x402b], dh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000048], dh
add byte [rsi], cl
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add dl, al
add byte [rax], al
and al, byte [rax]
add al, bl
add byte fs:[rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x65], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000049], dl
add byte [rsi], cl
add ah, al
push 0x40
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx*2], dl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bl
add byte ds:[rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000049], cl
add byte [rsi], cl
add byte [rdi + rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx*2 + 0x220000], bh
add byte [rcx + 0x4026], dl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
add byte [r8], al
and al, byte [rax]
add byte [rdx + 0x51], al
add byte [rax], al
add byte [rax], al
add bh, ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x26], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
and al, byte [rax]
add bl, ch
xor byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4057], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and cl, byte [rbx]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x28], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [r8], al
and al, byte [rax]
add byte [rsi + rcx*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x4b], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0x4b
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rsi], bl
add byte [rax], r8b
and al, byte [rax]
add al, al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx*2], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
push 0x40
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x40d97e
add byte [rax], al
and al, byte [rax]
add byte [rcx], dh
imul eax, dword [rax], 0
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], r8b
and al, byte [rax]
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
add byte [rax], r8b
and al, byte [rax]
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [r8], r8b
and al, byte [rax]
add byte [rcx + 0x54], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x4d], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + rbx*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200004d], ah
add byte [rsi], cl
add bh, al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
and al, byte [rax]
add al, bh
add byte es:[rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp cl, byte [rsi]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rsi + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200004e], cl
add byte [rsi], cl
add byte [rdx + 0x21], al
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add byte [rax], r8b
and al, byte [rax]
add byte [rdx], ch
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [r8], r8b
and al, byte [rax]
add dh, dh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200004f], bh
add byte [rsi], cl
add ah, al
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cs, word [rdi]
add byte [rdx], ah
add byte [rsi], cl
add dh, al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x2200004f
add byte [rsi], cl
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [r8], r8b
and al, byte [rax]
add byte [rbx + rdx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4062], ah
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x22000050
add byte [rsi], cl
add byte [rdx], bl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rsi + 7], ah
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
enter 0x61ef, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea edx, [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
imul eax, dword [rax], 0
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rax], 0
and al, byte [rax]
add byte [rax], bh
push rbx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
push rcx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x6a], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
push rcx
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
xor eax, 0x40
add byte [rax], al
inc byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x40db93
add byte [rax], al
and al, byte [rax]
add al, bl
push rdi
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000051], ah
add byte [rsi], cl
add byte [rbx], ch
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rdx], edx
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4022], dh
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rdi]
add byte [rax], al
adc al, byte [rax]
add byte [rsi + 0x400d], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rbp + 0x52], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x52
add byte [rax], al
and al, byte [rax]
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
push rdx
add byte [rax], al
and al, byte [rax]
add byte [rsp + rsi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x53], dl
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
push rbx
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4033], cl
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 0x53
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax + rax], dl
and al, byte [rax]
add cl, bl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rax + 0x12000054], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
push rsp
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1b], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
call qword [rax + rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb edx, dword [rbp]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rcx*2 + 0x40], ch
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x55], bl
add byte [rax], al
and al, byte [rax]
add byte [rdi + rsi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000055], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000055], dh
add byte [rsi], cl
add byte [rax + 0x33], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
push rbp
add byte [rax], al
and al, byte [rax]
add byte [rbp + rbx*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x56], ch
add byte [rax], al
and al, byte [rax]
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdx*2 + 0x220000], ch
add byte [rax + 0x3e], bh
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add cl, ch
push rsi
add byte [rax], al
and al, byte [rax]
add bl, dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000057], bl
add byte [rsi], cl
add byte [rsi + 0x5d], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x57], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x402b], bl
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx + 0x22000057], dl
add byte [rsi], cl
add byte [rax + 0x4033], cl
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fst dword [rdi]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x26], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
push rdi
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rcx], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x58], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx], bh
push rsi
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x58], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
pop rax
add byte [rax], al
and al, byte [rax]
add dh, cl
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x405f], dl
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
pop rcx
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x59], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rcx + rbx*2 + 0x120000], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x22000059
add byte [rsi], cl
add byte [rdi + 0x4069], ah
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rdx], bl
add byte [rdx], ah
add byte [rsi], cl
add bl, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
pop rdx
add byte [rax], al
and al, byte [rax]
add dl, dh
push rdi
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x5a], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4069], dl
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rbx*2 + 0x220000], dl
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
pop rdx
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
pop rdx
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
fdiv dword [rax + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
neg byte [rdx]
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0xc], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
pop rbx
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
cmp eax, 0x40
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
add byte [rax], al
and al, byte [rax]
add byte [rsi + rcx*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200005b], al
add byte [rsi], cl
add byte [rax + 0x5f], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, 0x5b
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x68], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fistp word [rbx]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
pop rbx
add byte [rax], al
and al, byte [rax]
add ch, bl
add byte [eax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200005c], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200005c], dh
add byte [rsi], cl
add byte [rbx + rbx + 0x40], ah
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200005c], cl
add byte [rsi], cl
add byte [rdi], ch
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr byte [rax + rax], 0x22
add byte [rsi], cl
add byte [rax + rdi], bl
add byte [rax], al
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add al, bh
pop rsp
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x44], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rcx
pop rbp
add byte [rax], al
and al, byte [rax]
add al, dh
push rbx
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200005d], cl
add byte [rsi], cl
add dh, dh
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200005d], ch
add byte [rsi], cl
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x68], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
neg byte [rbp]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0x5e
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x402f], dh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbx*2], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rbx*2], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x5e], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4063], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200005e], ah
add byte [rsi], cl
add byte [rbx + rdi + 0x40], ah
add byte [rax], al
xor eax, 0
add byte [rax], al
add dl, dl
pop rsi
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x405e], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
pop rsi
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ebx, dword [rdi]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ch
push rsi
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x5f], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x404b], cl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200005f], ah
add byte [rsi], cl
add byte [rsp + rdi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
pop rdi
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000060], ch
add byte [rsi], cl
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x60], cl
add byte [rax], al
and al, byte [rax]
add byte [rdi + rbx*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rax + 0x22000060], ah
add byte [rsi], cl
add byte [rax + 0x5d], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
add byte [rax], al
and al, byte [rax]
add dl, ah
add byte ds:[rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4062], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x61], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x6a], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x61], ah
add byte [rax], al
and al, byte [rax]
add ah, bl
add byte es:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x220000], dl
add byte [rbx + 0x4a], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add byte [rax], al
adc al, byte [rax]
add byte [rbx], bl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
and byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rax], eax
add byte [rdx], dl
add byte [rbx], cl
add al, ch
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
add byte [eax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
add byte [rax], al
and al, byte [rax]
add al, al
add byte es:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
and al, byte [rax]
add ch, bl
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x62], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4046], dl
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add dh, cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x63], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x40e3ca
jne 0x40e3be
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40e37e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40e3fc
jb 0x40e402
pop rdi
jne 0x40e40b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x40e405
je 0x40e401
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40e421
jb 0x40e427
pop rdi
jne 0x40e430
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40e433
jns 0x40e423
outsb dx, byte gs:[rsi]
je 0x40e43a
jns 0x40e3ca
jb 0x40e42e
insd dword [rdi], dx
pop rdi
jne 0x40e440
insd dword [rdi], dx
jns 0x40e3d6
pop rdi
pop rdi
jb 0x40e43c
insd dword [rdi], dx
pop rdi
jne 0x40e44e
insd dword [rdi], dx
jns 0x40e443
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40e44e
jns 0x40e44e
outsb dx, byte gs:[rsi]
je 0x40e465
jns 0x40e3f5
insd dword [rdi], dx
imul ebp, dword [rsi + 0x2e], 0x707063
pop rdi
pop rdx
push rbx
je 0x40e44f
xor dword [rcx], edi
jo 0x40e470
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40e488
jb 0x40e48b
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x40e46a
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e489
jb 0x40e494
add byte [rdi + 0x5a], bl
push rbx
je 0x40e47f
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x40e48c
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e4b3
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x40e4ce
je 0x40e4c3
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40e4da
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x40e4c2
xor dword [rax], esi
jb 0x40e4dd
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x40e4d4
xor dword [rcx], esi
je 0x40e4fe
jns 0x40e4ed
je 0x40e4ff
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x40e4e7
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x40e516
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x40e4df
xor eax, 0x65676572
js 0x40e514
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e52e
outsb dx, byte [rsi]
je 0x40e531
xor rax, 0x73616369
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40e4fe
xor eax, 0x65676572
js 0x40e533
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e54d
outsb dx, byte [rsi]
je 0x40e550
outsb dx, byte ss:[rsi]
outsd dx, dword [rsi]
jae 0x40e558
jae 0x40e52b
add byte [rdi + 0x5a], bl
push rbx
je 0x40e51e
xor eax, 0x65676572
js 0x40e553
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e56d
outsb dx, byte [rsi]
je 0x40e570
cmp byte [rdi + 0x70], r13b
je 0x40e56c
insd dword [rdi], dx
imul edi, dword [rdx + 0x65], 0x5a5f0045
push rbx
je 0x40e540
xor eax, 0x65676572
js 0x40e575
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e58f
outsb dx, byte [rsi]
je 0x40e592
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x40e58d
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e561
xor eax, 0x65676572
js 0x40e596
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e5b0
outsb dx, byte [rsi]
je 0x40e5b3
xor qword [rax], r14
push r11
movsxd rsi, dword [rdx + 0x69]
jo 0x40e5c1
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e586
xor eax, 0x65676572
js 0x40e5bb
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e5d5
outsb dx, byte [rsi]
je 0x40e5d8
xor rax, 0x69736162
movsxd rax, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40e5a5
xor eax, 0x65676572
js 0x40e5da
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e5f4
outsb dx, byte [rsi]
je 0x40e5f7
cmp byte [rbp + 0x78], r12b
je 0x40e5ef
outsb dx, byte [rsi]
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x40e5c7
xor eax, 0x65676572
js 0x40e5fc
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e616
outsb dx, byte [rsi]
je 0x40e619
xor r12, qword [rcx + 0x77]
imul eax, dword [rbp], 0x5f
pop rdx
push rbx
je 0x40e5e4
xor eax, 0x65676572
js 0x40e619
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e633
outsb dx, byte [rsi]
je 0x40e636
xor al, 0x67
jb 0x40e62d
jo 0x40e60f
add byte [rdi + 0x5a], bl
push rbx
je 0x40e602
xor eax, 0x65676572
js 0x40e637
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e651
outsb dx, byte [rsi]
je 0x40e654
xor rax, 0x65726765
jo 0x40e62e
add byte [rdi + 0x5a], bl
push rbx
je 0x40e621
xor eax, 0x65676572
js 0x40e656
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e670
outsb dx, byte [rsi]
je 0x40e673
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40e66a
push 0x6665645f
jne 0x40e67b
je 0x40e656
add byte [rdi + 0x5a], bl
push rbx
je 0x40e649
xor eax, 0x65676572
js 0x40e67e
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e698
outsb dx, byte [rsi]
je 0x40e69b
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40e692
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e671
xor eax, 0x65676572
js 0x40e6a6
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e6c0
outsb dx, byte [rsi]
je 0x40e6c3
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40e6ba
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e699
xor eax, 0x65676572
js 0x40e6ce
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e6e8
outsb dx, byte [rsi]
je 0x40e6eb
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40e6e2
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
ja 0x40e6ce
add byte [rdi + 0x5a], bl
push rbx
je 0x40e6c1
xor eax, 0x65676572
js 0x40e6f6
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e710
outsb dx, byte [rsi]
je 0x40e713
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40e70a
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
ja 0x40e6f6
add byte [rdi + 0x5a], bl
push rbx
je 0x40e6e9
xor eax, 0x65676572
js 0x40e71e
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e738
outsb dx, byte [rsi]
je 0x40e73b
cmp qword [rbp + 0x61], r13
je 0x40e731
push 0x796e615f
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e70c
xor eax, 0x65676572
js 0x40e741
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e75b
outsb dx, byte [rsi]
je 0x40e75e
xor qword [rbp*2 + 0x68637461], r14
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
je 0x40e757
outsb dx, byte [rsi]
jne 0x40e767
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e735
xor eax, 0x65676572
js 0x40e76a
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e784
outsb dx, byte [rsi]
je 0x40e787
xor qword [rsi], r14
insd dword [rdi], dx
je 0x40e77e
push 0x6e6f635f
je 0x40e78b
outsb dx, byte [rsi]
jne 0x40e794
jne 0x40e79a
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e760
xor eax, 0x65676572
js 0x40e795
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e7af
outsb dx, byte [rsi]
je 0x40e7b2
xor qword [rsi], r14
insd dword [rdi], dx
je 0x40e7a9
push 0x6572705f
jbe 0x40e7ac
jbe 0x40e7b1
imul ebp, dword [rbp + rax*2], 0x534e5a5f
je 0x40e78b
xor eax, 0x65676572
js 0x40e7c0
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e7da
outsb dx, byte [rsi]
je 0x40e7dd
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x40e7de
je 0x40e7d3
jne 0x40e7e6
je 0x40e7c1
add byte [rdi + 0x5a], bl
push rbx
je 0x40e7b4
xor eax, 0x65676572
js 0x40e7e9
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e803
outsb dx, byte [rsi]
je 0x40e806
xor qword [rax], r14
outsw dx, word [rsi]
jb 0x40e807
je 0x40e7fc
jae 0x40e804
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x40e7d9
xor eax, 0x65676572
js 0x40e80e
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e828
outsb dx, byte [rsi]
je 0x40e82b
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x40e82c
je 0x40e821
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40e80f
add byte [rdi + 0x5a], bl
push rbx
je 0x40e802
xor eax, 0x65676572
js 0x40e837
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e851
outsb dx, byte [rsi]
je 0x40e854
xor qword [rdi], r14
outsw dx, word [rsi]
jb 0x40e855
je 0x40e84a
imul si, word [rdx + 0x73], 0x5f74
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
jns 0x40e83b
add byte [rdi + 0x5a], bl
push rbx
je 0x40e82e
xor eax, 0x65676572
js 0x40e863
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e87d
outsb dx, byte [rsi]
je 0x40e880
xor qword [rbx], r14
jb 0x40e885
outsd dx, dword [rsi]
jb 0x40e875
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x40e882
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e856
xor eax, 0x65676572
js 0x40e88b
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e8a5
outsb dx, byte [rsi]
je 0x40e8a8
xor qword [rcx], r14
jb 0x40e8ad
outsd dx, dword [rsi]
jb 0x40e89d
movsxd rsi, dword [rcx + rdi*2 + 0x70]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40e87c
xor eax, 0x65676572
js 0x40e8b1
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e8cb
outsb dx, byte [rsi]
je 0x40e8ce
xor qword [rdx], r14
jb 0x40e8d3
outsd dx, dword [rsi]
jb 0x40e8c3
jae 0x40e8ca
jo 0x40e8cf
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e8a3
xor eax, 0x65676572
js 0x40e8d8
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e8f2
outsb dx, byte [rsi]
je 0x40e8f5
xor qword [rbx], r14
jb 0x40e8fa
outsd dx, dword [rsi]
jb 0x40e8ea
movsxd rbp, dword [rbx + 0x72]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40e8cb
xor eax, 0x65676572
js 0x40e900
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e91a
outsb dx, byte [rsi]
je 0x40e91d
xor qword [rcx], r14
jb 0x40e922
outsd dx, dword [rsi]
jb 0x40e912
jb 0x40e917
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e8f1
xor eax, 0x65676572
js 0x40e926
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e940
outsb dx, byte [rsi]
je 0x40e943
xor qword [rcx], r14
jb 0x40e948
outsd dx, dword [rsi]
jb 0x40e938
jo 0x40e93c
jb 0x40e942
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e917
xor eax, 0x65676572
js 0x40e94c
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e966
outsb dx, byte [rsi]
je 0x40e969
xor qword [rcx], r14
jb 0x40e96e
outsd dx, dword [rsi]
jb 0x40e95e
jb 0x40e963
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e93d
xor eax, 0x65676572
js 0x40e972
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e98c
outsb dx, byte [rsi]
je 0x40e98f
xor qword [0x726f7272], r14
pop rdi
jb 0x40e98c
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e966
xor eax, 0x65676572
js 0x40e99b
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e9b5
outsb dx, byte [rsi]
je 0x40e9b8
xor qword [rcx], r14
jb 0x40e9bd
outsd dx, dword [rsi]
jb 0x40e9ad
jb 0x40e9b1
outsb dx, byte [rsi]
add byte gs:[r15d + 0x5a], r11b
push rbx
je 0x40e98c
xor eax, 0x65676572
js 0x40e9c1
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e9db
outsb dx, byte [rsi]
je 0x40e9de
xor qword [rcx], r14
jb 0x40e9e3
outsd dx, dword [rsi]
jb 0x40e9d3
jae 0x40e9e6
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e9b2
xor eax, 0x65676572
js 0x40e9e7
movsxd rbp, dword [rdi + 0x6e]
jae 0x40ea01
outsb dx, byte [rsi]
je 0x40ea04
xor qword [rip + 0x6f727265], r14
jb 0x40e9f9
jb 0x40ea04
jo 0x40ea06
je 0x40e9e9
add byte [rdi + 0x5a], bl
push rbx
je 0x40e9dc
xor eax, 0x65676572
js 0x40ea11
movsxd rbp, dword [rdi + 0x6e]
jae 0x40ea2b
outsb dx, byte [rsi]
je 0x40ea2e
xor qword [rsi], r14
jb 0x40ea33
outsd dx, dword [rsi]
jb 0x40ea23
movsxd rbp, dword [rdi + 0x6d]
jo 0x40ea35
js 0x40ea35
je 0x40ea47
add byte [r15 + 0x5a], r11b
push rbx
je 0x40ea07
xor eax, 0x65676572
js 0x40ea3c
movsxd rbp, dword [rdi + 0x6e]
jae 0x40ea56
outsb dx, byte [rsi]
je 0x40ea59
xor qword [rcx], r14
jb 0x40ea5e
outsd dx, dword [rsi]
jb 0x40ea4e
jae 0x40ea65
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ea34
pop rdi
pop rdi
je 0x40ea63
imul ebp, dword [rsp + rcx*2 + 0x31], 0x5f535f39
imul ebp, dword [rsi + 0x76], 0x64696c61
pop rdi
jae 0x40ea88
je 0x40ea7c
pop rdi
imul esp, dword [rbp + rax*2], 0x31345a5f
pop rdi
pop rdi
jae 0x40ea98
je 0x40ea90
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x40ea9e
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x40eab4
jb 0x40eab7
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x40eacc
pop rdi
pop r15
pop rdi
pop rdx
jb 0x40eac5
jb 0x40eab7
imul eax, dword [rax], 0x52465f5f
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40eb16
jns 0x40eb16
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40eb27
jns 0x40eb27
jae 0x40eb3e
jb 0x40eb41
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x40eb13
jbe 0x40eb44
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp dword fs:[r8 + 0x75], r14d
jae 0x40eb58
pop rdi
movsxd rbp, dword [rbx + 0x45]
push rdx
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x40eb31
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40eb72
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push r11
je 0x40eb73
jbe 0x40eba4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
push r11
je 0x40eb9c
jo 0x40ebcb
imul esi, dword [rdx + 0x49], 0x45456964
xor r8b, byte [rbp + 0x76]
add byte [rax + 0x75], dh
je 0x40ebdd
push 0x755f7261
outsb dx, byte [rsi]
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x65]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40ebd0
jbe 0x40ec01
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40ebd8
jo 0x40ec07
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x40ebbd
pop rdi
pop rdx
push rbx
je 0x40ebf3
xor dword [rdi + 0x5f], ebx
jb 0x40ec2f
jae 0x40ec3f
outsd dx, dword [rsi]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r8
push rsp
pop rdi
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40ec1f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ec60
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ec8f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ec98
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ec8c
imul eax, dword [rbp + 0x31], 0x61656430
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x534e5a5f
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ec9b
xor byte [rdi + 0x5f], bl
jne 0x40ecdc
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40ecf7
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40ecf8
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40ed0c
push r11
je 0x40ecc8
xor ebp, dword [rbp + 0x6f]
jbe 0x40ed01
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor ebx, dword [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ed23
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ed3c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x40ed14
jo 0x40ed43
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40ed21
jbe 0x40ed52
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ed70
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ed79
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ed6d
push rbx
je 0x40ed5b
jo 0x40ed8a
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40ed75
outsw dx, word [rsi]
jb 0x40edb9
jb 0x40eda9
push r10
push r12
pop rdi
push rdx
push rbx
je 0x40ed83
jb 0x40edba
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40edbe
pop rdi
jb 0x40edc1
jb 0x40edc5
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x40eddc
add byte gs:[r15 + 0x5a], r11b
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40edd9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40edf2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
je 0x40eddb
jbe 0x40ee0c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40edbd
pop rdi
pop rdx
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40ee03
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40ee38
push r10
push rbx
push r11
je 0x40ee0f
jo 0x40ee3e
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
je 0x40ee1b
jb 0x40ee52
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40ee56
pop rdi
jb 0x40ee59
jb 0x40ee5d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40ee73
push r11
xor eax, 0x5a5f005f
push rbx
je 0x40ee41
xor byte [rdi + 0x5f], bl
je 0x40ee7c
jb 0x40ee85
ja 0x40ee77
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40ee86
pop rdi
jb 0x40ee94
outsd dx, dword [rsi]
jb 0x40ee75
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x40ee72
jbe 0x40eea3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40ee7a
jo 0x40eea9
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
push r11
je 0x40eea9
jbe 0x40eeda
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ef01
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ef1a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x40eef2
jo 0x40ef21
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40eeff
jbe 0x40ef30
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40ef1c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ef5d
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x40ef51
xor ebp, dword [rbp + 0x6f]
jbe 0x40ef8a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor al, 0x62
jae 0x40ef9c
jbe 0x40ef3a
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40efa3
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40efac
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40efa0
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor dword gs:[r8d], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40efb7
jbe 0x40efe8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
jb 0x40eff7
jae 0x40effd
jp 0x40effb
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40efd0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f009
je 0x40f01e
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40f003
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f03c
je 0x40f051
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40f01e
jo 0x40f04d
imul esi, dword [rdx + 0x49], 0x45456964
jae 0x40f06d
jb 0x40f06a
jns 0x40f046
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40f056
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f074
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40f07d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f071
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor dword gs:[r13d + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x40f07b
jbe 0x40f0ac
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x40f0b4
outsw dx, word [rsi]
jb 0x40f0f8
jb 0x40f0e8
push r11
je 0x40f0bc
jo 0x40f0eb
imul esi, dword [rdx + 0x49], 0x45456964
push r12
pop rdi
push rdx
push rbx
je 0x40f0ca
jb 0x40f101
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40f105
pop rdi
jb 0x40f108
jb 0x40f10c
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x40f123
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40f0ed
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f12e
push r11
je 0x40f101
jo 0x40f130
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x40f145
push rsp
jo 0x40f148
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f138
jbe 0x40f0f5
pop rdi
pop rdx
push rbx
je 0x40f12d
xor al, 0x5f
pop rdi
jne 0x40f16d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x40f174
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40f17b
push r8
imul edx, dword [rbx + 0x30], 0x4961535f
imul eax, dword [rbp + 0x45], 0x545f3054
pop rdi
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40f170
xor ebp, dword [rbp + 0x6f]
jbe 0x40f1a9
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor al, byte fs:[r13 + 0x53]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f18f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f1c8
je 0x40f1dd
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp byte [r13 + 0x61], r13b
js 0x40f1da
jae 0x40f1e6
jp 0x40f1e4
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f1bd
xor al, 0x70
jb 0x40f1f9
outsd dx, dword [rsi]
jb 0x40f1fc
je 0x40f20e
pop rdi
jno 0x40f20d
jne 0x40f200
push r11
je 0x40f1d3
jo 0x40f202
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40f1e0
jbe 0x40f211
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x40f1f6
jb 0x40f227
je 0x40f22a
jb 0x40f210
push rbx
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f24a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40f253
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f247
push rbx
je 0x40f235
jo 0x40f264
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40f24a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f28b
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x40f241
pop rdi
pop rdx
push rbx
je 0x40f278
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f2b9
push r11
je 0x40f28c
jo 0x40f2bb
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f2e1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40f2ea
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f2de
push rbx
je 0x40f2ce
jbe 0x40f2ff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x40f2f5
xor al, 0x70
jb 0x40f331
outsd dx, dword [rsi]
jb 0x40f334
je 0x40f346
pop rdi
jno 0x40f345
jne 0x40f338
push r11
je 0x40f30b
jo 0x40f33a
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40f318
jbe 0x40f349
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x40f32e
jb 0x40f35f
je 0x40f362
jb 0x40f348
push rbx
xor dword [rdi + 0x45], ebx
xor r14d, dword [r15 + rbp*2 + 0x70]
jbe 0x40f30b
pop rdi
pop rdx
push rbx
je 0x40f37e
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push rdx
push r11
je 0x40f35b
xor ebp, dword [rbp + 0x6f]
jbe 0x40f394
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f377
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f3b0
je 0x40f3c5
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40f3d8
jb 0x40f3db
movsxd rsi, dword [rcx + rcx*2 + 0x64]
push rdx
jbe 0x40f3c5
push rbx
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x40f3cb
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f3e9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f402
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
je 0x40f3eb
jbe 0x40f41c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x40f43a
jbe 0x40f3cd
pop rdi
pop rdx
push rbx
je 0x40f404
xor al, 0x70
jb 0x40f440
outsd dx, dword [rsi]
jb 0x40f443
je 0x40f455
pop rdi
jno 0x40f454
jne 0x40f447
push r11
je 0x40f41a
jo 0x40f449
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40f427
jbe 0x40f458
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x40f43d
jb 0x40f46e
je 0x40f471
jb 0x40f457
push rbx
xor dword [rdi + 0x45], ebx
xor r14d, dword [r8 + 0x6f]
jo 0x40f45d
jbe 0x40f41a
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f483
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40f45f
xor eax, 0x6574495f
jb 0x40f494
movsxd rbp, dword [rdi + 0x6d]
jo 0x40f499
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x40f4aa
je 0x40f4ad
jb 0x40f493
push rbx
je 0x40f481
jo 0x40f4b0
imul esi, dword [rdx + 0x49], 0x45456964
movsxd r13, dword [r9 + rcx*2 + 0x4e]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f4d2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
xor al, 0x5f
push rbx
je 0x40f4ae
jbe 0x40f4df
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop rdi
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f4cf
xor al, 0x70
jb 0x40f50b
outsd dx, dword [rsi]
jb 0x40f50e
je 0x40f520
pop rdi
jno 0x40f51f
jne 0x40f512
push r11
je 0x40f4e5
jo 0x40f514
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40f4f2
jbe 0x40f523
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x40f508
jb 0x40f539
je 0x40f53c
jb 0x40f522
push rbx
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
pop rdi
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40f522
xor al, 0x6e
jne 0x40f562
jb 0x40f561
movsxd rbx, dword [rdi + 0x6c]
imul ebp, dword [rbp + 0x69], 0x64497374
xor r13d, dword [r13 + 0x61]
js 0x40f54d
jbe 0x40f50a
pop rdi
pop rdx
push rbx
je 0x40f541
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f582
push r11
je 0x40f555
jo 0x40f584
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40f583
jbe 0x40f5b4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jb 0x40f5c3
jae 0x40f5c9
jp 0x40f5c7
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40f5a2
pop rdi
jae 0x40f5e3
jb 0x40f5e0
jns 0x40f5bc
push rax
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
xor dword [rdi + 0x45], ebx
jbe 0x40f5de
pop rdi
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40f5ce
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f607
je 0x40f61c
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
cmp byte [rcx + rbp*2 + 0x6a], ah
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
jae 0x40f63d
jb 0x40f63a
jns 0x40f616
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40f626
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f612
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f653
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40f609
pop rdi
pop rdx
push rbx
je 0x40f640
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f681
push r11
je 0x40f654
jo 0x40f683
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40f66b
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40f6b5
jb 0x40f6b8
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
cmp byte [rcx + rbp*2 + 0x6a], ah
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40f6ae
push rsp
pop rdi
jo 0x40f6b2
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40f6d1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f6ea
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f6c1
jo 0x40f6f0
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40f6ce
jbe 0x40f6ff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
imul eax, dword [rbp + 0x6c], 0x4e5a5f00
push r11
je 0x40f6ed
jbe 0x40f71e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x40f705
pop rdi
pop rdi
jne 0x40f746
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40f756
je 0x40f74b
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x40f769
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x40f772
je 0x40f767
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f74e
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x40f75f
xor ebp, dword [rbp + 0x6f]
jbe 0x40f798
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f776
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40f7db
jo 0x40f7c9
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40f7a0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f7d9
je 0x40f7ee
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40f7bb
jo 0x40f7ea
imul esi, dword [rdx + 0x49], 0x45456964
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40f80b
jb 0x40f80e
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x49], ebx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40f7fa
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x40f800
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f7eb
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40f835
jb 0x40f838
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40f7ff
jbe 0x40f830
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40f83d
push rsp
pop rdi
jo 0x40f841
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f832
jbe 0x40f863
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40f83a
jo 0x40f869
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40f88b
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40f8a3
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40f879
jo 0x40f886
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f876
jbe 0x40f8a7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40f8c3
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40f8db
push r10
jbe 0x40f8b1
jo 0x40f8be
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f8af
pop rdi
jae 0x40f8f0
jb 0x40f8ed
jns 0x40f8c9
push rax
push rbx
je 0x40f8ba
jbe 0x40f8eb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40f8fa
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f914
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f92d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f904
jo 0x40f933
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40f911
jbe 0x40f942
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40f974
jb 0x40f977
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40f969
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40f98a
jae 0x40f91a
pop rdi
pop rdx
push rbx
je 0x40f984
jno 0x40f96a
push rax
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push rdx
push r11
je 0x40f96a
xor ebp, dword [rbp + 0x6f]
jbe 0x40f9a3
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f986
xor bl, byte [rdi + 0x5f]
jne 0x40f9c7
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40f9e2
pop rdi
push r11
je 0x40f9a0
xor ebp, dword [rbp + 0x6f]
jbe 0x40f9d9
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f9b6
jo 0x40f9e5
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x6153525f
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push r11
je 0x40f9e3
jbe 0x40fa14
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40f9eb
jo 0x40fa1a
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40fa16
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor eax, 0x766c6f73
jbe 0x40f9ed
pop rdi
pop rdx
push rbx
je 0x40fa29
jbe 0x40fa5a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rip + 0x655f4d5f], r14d
jb 0x40fa6a
jae 0x40fa70
pop rdi
je 0x40fa6e
outsb dx, byte gs:[rsi]
push r8
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x40fa4d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fa8e
push r11
je 0x40fa63
jbe 0x40fa94
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40fa8f
xor byte [rdi + 0x5f], bl
jo 0x40fad2
jo 0x40fac4
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40fad1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40faea
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40fac1
jo 0x40faf0
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40face
jbe 0x40faff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40fb29
xor dword [rip + 0x6574495f], esi
jb 0x40fb1d
movsxd rbp, dword [rdi + 0x6d]
jo 0x40fb22
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x40fb33
je 0x40fb36
jb 0x40fb1c
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x40fb30
pop rdi
push rbx
pop r15
push rbx
pop r15
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40fb23
jbe 0x40fb54
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor esp, dword [rbp + 0x6e]
jbe 0x40fb02
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x40fb6f
je 0x40fb74
jb 0x40fb7d
ja 0x40fb50
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40fb58
jbe 0x40fb89
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40fb60
jo 0x40fb8f
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40fb78
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40fbb1
je 0x40fbc6
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40fbe2
push r8
push rbx
je 0x40fbae
jo 0x40fbdd
imul esi, dword [rdx + 0x49], 0x45456964
push rdx
push r11
je 0x40fbba
xor ebp, dword [rbp + 0x6f]
jbe 0x40fbf3
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40fbdd
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40fc01
pop rdi
jae 0x40fc42
jb 0x40fc3f
jns 0x40fc1b
push rax
jbe 0x40fc2c
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40fc4f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40fc68
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x40fc80
jb 0x40fc5c
imul edx, dword [rbx + 0x61], 0x45456949
xor al, 0x62
jae 0x40fc85
jbe 0x40fc23
pop rdi
pop rdx
push rbx
je 0x40fc5a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fc9b
push r11
je 0x40fc6e
jo 0x40fc9d
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
ja 0x40fcc6
imul esi, dword [rbp + 0x72], 0x5f006369
pop rdx
push rbx
je 0x40fc91
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40fcec
push r11
je 0x40fca8
xor ebp, dword [rbp + 0x6f]
jbe 0x40fce1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40fcbe
jo 0x40fced
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor ebx, dword [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push r11
je 0x40fce0
jbe 0x40fd11
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
cmp byte [r13 + 0x61], r13b
js 0x40fd2d
jae 0x40fd39
jp 0x40fd37
jbe 0x40fcd5
pop rdi
pop rdx
push rbx
je 0x40fd11
outsw dx, word [rsi]
jb 0x40fd55
jb 0x40fd45
push r12
pop rdi
push rdx
push rbx
je 0x40fd1d
jb 0x40fd54
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40fd58
pop rdi
jb 0x40fd5b
jb 0x40fd5f
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x40fd76
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40fd3f
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x40fd54
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40fdb9
jo 0x40fda7
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40fdb1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40fdba
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40fdae
push rbx
je 0x40fd9e
jbe 0x40fdcf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor ebx, dword [rdi + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x40fdec
jae 0x40fdf8
jp 0x40fdf6
jbe 0x40fd94
pop rdi
pop rdx
push rbx
je 0x40fdcb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fe0c
push r11
je 0x40fddf
jo 0x40fe0e
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x5f32316c
pop r15
jae 0x40fe47
jo 0x40fe32
je 0x40fe38
push r10
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40fe19
jbe 0x40fe4a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x40fdfa
pop rdi
pop rdx
push rbx
je 0x40fe64
jno 0x40fe4a
push rax
push rbx
je 0x40fe39
jo 0x40fe68
imul esi, dword [rdx + 0x49], 0x45456964
push rdx
push r11
je 0x40fe45
xor ebp, dword [rbp + 0x6f]
jbe 0x40fe7e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40fe61
xor byte [rdi + 0x49], bl
je 0x40fe9a
jb 0x40fe96
jae 0x40fea0
push r11
je 0x40fe70
xor ebp, dword [rbp + 0x6f]
jbe 0x40fea9
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x4c], 0x45453162
pop rdi
push rbx
pop rdi
jae 0x40fec3
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40fe99
xor dword [rdi + 0x5f], ebx
jo 0x40fee2
jae 0x40fed7
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40fedc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40fef5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40fecc
jo 0x40fefb
imul esi, dword [rdx + 0x49], 0x53456964
je 0x40fed9
jbe 0x40ff0a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insb byte [rdi], dx
push rbx
xor ebx, dword [rdi + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40ff38
xor dword [rdi + rbx*2], esi
je 0x40ff30
jb 0x40ff2c
movsxd rbp, dword [rdi + 0x6d]
jo 0x40ff31
jbe 0x40ff35
insb byte [rdi], dx
push r11
je 0x40ff10
jb 0x40ff41
je 0x40ff44
jb 0x40ff2a
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x40ff3e
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop rdi
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40ff2e
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40ff78
jb 0x40ff7b
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
cmp byte [rcx + rbp*2 + 0x6a], ah
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
xor dword [rdi + 0x45], ebx
jbe 0x40ff71
push rsp
pop rdi
jo 0x40ff75
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40ff66
jbe 0x40ff97
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor r14b, byte [r9]
pop rdi
pop r15
jne 0x40ffd1
je 0x40ffc6
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x5f006d45
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x40fff4
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40ffcf
jbe 0x410000
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x41002a
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r10
imul esp, dword [rbp + rax*2 + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41000d
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x41004b
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x410052
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x6f6d3331
jbe 0x41006b
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x410052
xor byte [rdi + 0x49], bl
je 0x41008b
jb 0x410087
jae 0x410091
push r11
je 0x410061
xor ebp, dword [rbp + 0x6f]
jbe 0x41009a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x4100b4
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41008b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4100c4
je 0x4100d9
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4100a6
jo 0x4100d5
imul esi, dword [rdx + 0x49], 0x45456964
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push r11
je 0x4100c4
xor ebp, dword [rbp + 0x6f]
jbe 0x4100fd
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor al, 0x62
jae 0x41011e
jbe 0x4100bc
pop rdi
pop rdx
push rbx
je 0x4100f8
jbe 0x410129
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x410111
jbe 0x410142
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x410125
xor bl, byte [rdi + 0x5f]
jne 0x410166
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x410181
pop rdi
push r11
je 0x41013f
xor ebp, dword [rbp + 0x6f]
jbe 0x410178
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x6153525f
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x410180
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4101b6
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4101c0
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
push rbx
xor byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4101b3
pop rdi
jae 0x4101f4
jb 0x4101f1
jns 0x4101cd
push rax
imul ebp, dword [rcx + 0x45], 0x535f5476
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410200
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410209
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4101fd
push rbx
je 0x4101ed
jbe 0x41021e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor ebx, dword [rdi + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4101e6
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41024f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x410268
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x410242
jbe 0x410273
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41028d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410296
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41028a
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor r8b, byte gs:[ebp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41028d
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4102c3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4102cd
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x4102f1
js 0x4102f7
je 0x4102d0
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x4102db
jb 0x41030c
je 0x41030f
jb 0x4102f5
push rbx
je 0x4102e3
jo 0x410312
imul esi, dword [rdx + 0x49], 0x45456964
movsxd rbp, dword [rbp + rax*2 + 0x52]
push r11
xor dword [rdi + 0x53], ebx
xor al, 0x5f
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x410336
push rax
jbe 0x4102cc
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x410336
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41034f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
je 0x410338
jbe 0x410369
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x62
jae 0x41037f
jbe 0x41031d
pop rdi
pop rdx
push rbx
je 0x410359
jbe 0x41038a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
ja 0x4103c9
imul esi, dword [rbp + 0x72], 0x5f006378
pop rdx
push rbx
je 0x410395
xor ebp, dword [rbp + 0x6f]
jbe 0x4103ce
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor dword fs:[r13 + 0x53], eax
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4103b9
jbe 0x4103ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x4103e4
jbe 0x410415
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
cmp byte [rbp + 0x61], ch
js 0x410420
jae 0x41042c
jp 0x41042a
jbe 0x4103c8
pop rdi
pop rdx
push rbx
push r11
je 0x410407
jbe 0x410438
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x41042c
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x410478
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410471
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41048a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x410461
jo 0x410490
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41046e
jbe 0x41049f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insb byte [rdi], dx
push rbx
xor ebx, dword [rdi + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4104cd
xor dword [rip + 0x6574495f], esi
jb 0x4104c1
movsxd rbp, dword [rdi + 0x6d]
jo 0x4104c6
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x4104d7
je 0x4104da
jb 0x4104c0
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x4104d4
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop rdi
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4104cc
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x4104e6
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410504
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41051d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4104f4
jo 0x410523
imul esi, dword [rdx + 0x49], 0x53456964
je 0x410501
jbe 0x410532
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r11
je 0x410519
jb 0x41054a
je 0x41054d
jb 0x410533
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x410545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x410530
xor bl, byte [rdi + 0x44]
jae 0x410579
jb 0x410576
jns 0x410568
jne 0x410584
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x41058d
jb 0x41058a
jns 0x410566
push rax
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
jbe 0x410586
pop rdi
push rbx
xor eax, 0x5a5f005f
jb 0x4105a1
jb 0x410593
push rbx
je 0x41057c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4105bb
movsxd rbx, dword [rdi + 0x73]
je 0x4105c9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4105c4
je 0x4105d9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x4105b2
jbe 0x4105e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4105ba
jo 0x4105e9
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
cmp dword [r8 + 0x75], r14d
jae 0x410603
pop rdi
movsxd rbp, dword [rbx + 0x45]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4105e4
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410634
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
je 0x410625
jbe 0x410656
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41067e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410691
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41069a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41068e
jae 0x4106c0
jb 0x4106bd
jns 0x410699
jbe 0x4106a5
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41068f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4106c8
je 0x4106dd
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4106aa
jo 0x4106d9
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x50]
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410700
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410709
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4106fd
push rbx
je 0x4106eb
jo 0x41071a
imul esi, dword [rdx + 0x49], 0x45456964
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
insd dword [rdi], dx
outsd dx, dword [rsi]
pop rdi
jo 0x41073d
ja 0x410748
js 0x41074a
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x410741
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x410726
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x410767
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410789
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410792
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410786
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
cmp dword gs:[r11d + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4107c8
jb 0x4107cb
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x49]
push rdx
imul esp, dword [rbp + rax*2 + 0x45], 0x54507645
pop rdi
jo 0x4107b9
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4107a5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4107e6
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4107db
jbe 0x41080c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4107e3
jo 0x410812
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
cmp byte [r8 + 0x6f], r14b
jo 0x410823
movsxd rbp, dword [rbx + 0x45]
jbe 0x4107cb
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410834
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41083d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410831
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x410832
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x410873
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x4b4e5a5f
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x410894
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41089d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410891
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
cmp byte gs:[r13d + 0x61], r13b
js 0x4108bd
jae 0x4108c9
jp 0x4108c7
jbe 0x410865
pop rdi
pop rdx
push rbx
je 0x4108a2
jo 0x4108db
jo 0x4108cd
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4108da
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4108f3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4108ca
jo 0x4108f9
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4108d7
jbe 0x410908
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r11
je 0x4108ef
jb 0x410920
je 0x410923
jb 0x410909
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41091b
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor dword gs:[ebp + 0x76], r8d
add byte [rdi + 0x65], ah
je 0x410952
push 0x755f7261
outsb dx, byte [rsi]
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x65]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x410942
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x410977
push r10
push rbx
je 0x41094d
jbe 0x41097e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x410955
jo 0x410984
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x410968
jb 0x41099f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4109a3
pop rdi
jb 0x4109a6
jb 0x4109aa
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4109c0
push r11
pop rdi
add byte [rdi + 0x49], bl
pop r15
jae 0x4109d1
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x4109a0
jo 0x4109cf
imul esi, dword [rdx + 0x49], 0x43456964
xor dword [rcx + 0x69], ecx
push rdx
imul esi, dword [rsi + 0x45], 0x5f544f45
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4109bd
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x4109fb
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x410a02
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
je 0x4109f1
xor ebp, dword [rbp + 0x6f]
jbe 0x410a2a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x410a11
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x410a52
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x410a5d
push rsp
jo 0x410a60
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410a50
jbe 0x410a0d
pop rdi
pop rdx
push rbx
je 0x410a49
jbe 0x410a7a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x410aa7
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x410abf
push r10
imul esp, dword [rbp + rax*2 + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410abf
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x410a9b
pop rdi
pop rdi
imul esi, dword [rbp + 0x72], 0x6d6f635f
jo 0x410ad6
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x410ae7
je 0x410aea
jb 0x410ad0
push rbx
je 0x410abe
jo 0x410aed
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x410b00
movsxd rbp, dword [rdi + 0x6d]
jo 0x410b05
imul esi, dword [rbp + 0x72], 0x455f5449
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x410aea
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x410b2b
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x410b0a
xor bl, byte [rdi + 0x44]
jae 0x410b53
jb 0x410b50
jns 0x410b42
jne 0x410b5e
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x410b67
jb 0x410b64
jns 0x410b40
push rax
push rbx
je 0x410b31
jbe 0x410b62
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor al, 0x5f
jbe 0x410b72
pop rdi
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x410b60
jo 0x410b8f
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x410b71
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410baa
je 0x410bbf
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
cmp byte [rcx + rbp*2 + 0x6a], ah
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
cmp byte gs:[r13d + 0x61], r13b
js 0x410bcb
jae 0x410bd7
jp 0x410bd5
push r10
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor al, byte gs:[r13d + 0x69]
add byte fs:[rbx + 0x63], dh
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x365a5f00
ja 0x410c18
imul esi, dword [rbp + 0x72], 0x63634b50
add byte [rdi + 0x5a], bl
push r11
je 0x410bec
jbe 0x410c1d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x410c19
outsw dx, word [rsi]
jb 0x410c5d
jb 0x410c4d
push r10
push r12
pop rdi
push rdx
push rbx
je 0x410c26
jb 0x410c5d
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x410c61
pop rdi
jb 0x410c64
jb 0x410c68
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x410c7f
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410c7b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410c84
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410c78
push rbx
je 0x410c66
jo 0x410c95
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410ca9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410cb2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410ca6
push rbx
je 0x410c96
jbe 0x410cc7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410cee
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410cf7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410ceb
push rbx
je 0x410cdb
jbe 0x410d0c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x410d04
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x410d15
xor ebp, dword [rbp + 0x6f]
jbe 0x410d4e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x45], 0x3174534e
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x410d91
jo 0x410d7f
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410d88
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410d91
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410d85
push rbx
je 0x410d73
jo 0x410da2
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x76]
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x410db9
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x410dce
pop rdi
jae 0x410de4
jb 0x410de7
add byte [rdi + 0x5a], bl
push rbx
je 0x410daf
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x410dca
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x410e0b
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x410e0c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x410e4d
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x410e14
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410e7d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410e86
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410e7a
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x410e42
pop rdi
pop rdx
push rbx
je 0x410e79
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x410eba
push r11
je 0x410e8d
jo 0x410ebc
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x410e7c
pop rdi
pop rdx
push rbx
je 0x410eb8
jbe 0x410ee9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x410ec0
jo 0x410eef
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x410f0e
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x410ef8
jo 0x410f05
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x410ef6
jo 0x410f25
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x410f0b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x410f4c
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x410f13
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410f7c
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x410f58
xor eax, 0x74695f5f
jb 0x410f8e
movsxd rbp, dword [rdi + 0x6d]
jo 0x410f93
jbe 0x410f97
insb byte [rdi], dx
push r11
je 0x410f72
jb 0x410fa3
je 0x410fa6
jb 0x410f8c
push rbx
je 0x410f7a
jo 0x410fa9
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor byte [rdi + 0x31], bl
xor al, 0x5f
je 0x410fc0
jb 0x410fbc
movsxd rbp, dword [rdi + 0x6d]
jo 0x410fc1
jbe 0x410fc5
insb byte [rdi], dx
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410fd7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410fe0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410fd4
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor al, byte gs:[r13d + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41100a
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x410fe6
xor al, 0x5f
je 0x41101f
jb 0x41101b
movsxd rbp, dword [rdi + 0x6d]
jo 0x411020
jbe 0x411024
insb byte [rdi], dx
push r11
je 0x410fff
jb 0x411030
je 0x411033
jb 0x411019
push rbx
je 0x411007
jo 0x411036
imul esi, dword [rdx + 0x49], 0x45456964
movsxd r13, dword [r9 + rcx*2 + 0x4e]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411058
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
xor al, 0x5f
push rbx
je 0x411034
jbe 0x411065
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
xor al, 0x5f
push rsp
pop rdi
push rdx
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x411057
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x411098
push r11
je 0x41106b
jo 0x41109a
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x4110af
push rsp
jo 0x4110b2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4110a2
jbe 0x41105f
pop rdi
pop rdx
push rbx
je 0x411096
xor al, 0x70
jb 0x4110d2
outsd dx, dword [rsi]
jb 0x4110d5
je 0x4110e7
pop rdi
jno 0x4110e6
jne 0x4110d9
push r11
je 0x4110ac
jo 0x4110db
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4110b9
jbe 0x4110ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x4110cf
jb 0x411100
je 0x411103
jb 0x4110e9
push rbx
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4110e1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x411122
push r11
je 0x4110f7
jbe 0x411128
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x4110fb
pop rdi
pop rdx
push rbx
je 0x411132
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x411173
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411184
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x411160
xor al, 0x5f
je 0x411199
jb 0x411195
movsxd rbp, dword [rdi + 0x6d]
jo 0x41119a
jbe 0x41119e
insb byte [rdi], dx
push r11
je 0x411179
jb 0x4111aa
je 0x4111ad
jb 0x411193
push rbx
je 0x411181
jo 0x4111b0
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x53]
xor eax, 0x5a5f005f
push rbx
je 0x41119a
jbe 0x4111cb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4111ae
xor ebp, dword [rbp + 0x6f]
jbe 0x4111e7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4111c4
jo 0x4111f3
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x53], eax
xor bl, byte [rdi]
pop rdi
pop rdx
ja 0x411217
imul esi, dword [rbp + 0x72], 0x634b50
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411216
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41121f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x411213
push rbx
je 0x411203
jbe 0x411234
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x411228
xor dword [rdi + 0x5f], ebx
jb 0x411264
jae 0x411274
outsd dx, dword [rsi]
push r11
je 0x41123b
jo 0x41126a
imul esi, dword [rdx + 0x49], 0x45456964
push rax
push rsp
pop rdi
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x411255
pop rdi
pop rdi
imul bp, word [rsp + rbp*2 + 0x5f], 0x4961
push rax
cmp qword fs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411291
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x41127a
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x41129f
push rsp
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
jbe 0x4112c0
insb byte [rdi], dx
jne 0x4112c7
jbe 0x4112aa
pop rdi
pop rdi
je 0x4112e3
jo 0x4112d1
push r12
pop rdi
push rbx
cmp byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push r11
je 0x4112b5
jbe 0x4112e6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4112bd
jo 0x4112ec
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x4112a2
pop rdi
pop rdx
push rbx
je 0x4112da
xor byte [rdi + 0x5f], bl
jne 0x41131b
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x411336
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x411337
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x41134b
push r11
je 0x411307
xor ebp, dword [rbp + 0x6f]
jbe 0x411340
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41131d
jo 0x41134c
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41133a
xor bl, byte [rdi + 0x44]
jae 0x411383
jb 0x411380
jns 0x411372
jne 0x41138e
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x411397
jb 0x411394
jns 0x411370
push rax
imul eax, dword [rbp + 0x45], 0x535f5476
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x411368
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x41139e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4113a8
pop rdi
xor dword [rbp + 0x50], eax
push rbx
xor byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x411396
jae 0x4113db
jo 0x4113b0
push rax
push rbx
je 0x41139f
jo 0x4113ce
imul esi, dword [rdx + 0x49], 0x45456964
jbe 0x4113c8
push rsp
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4113b8
jbe 0x4113e9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x411413
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rdx
imul esp, dword [rbp + rax*2 + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4113f5
xor ebp, dword [rbp + 0x6f]
jbe 0x41142e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x43], 0x30534532
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x411415
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x411456
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x411461
push rsp
jo 0x411464
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x411454
jbe 0x411411
pop rdi
pop rdx
push rbx
je 0x41144d
jbe 0x41147e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x411455
jo 0x411484
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x411472
jbe 0x4114a3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r15], r14d
pop rdi
pop r15
jne 0x4114c1
je 0x4114b6
jo 0x4114ca
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4114ca
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4114e3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4114ba
jo 0x4114e9
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4114c7
jbe 0x4114f8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x411512
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4114e1
xor al, 0x5f
pop rdi
jne 0x411521
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x411528
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x41152f
push r8
push rbx
xor byte [rdi + 0x53], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x411524
xor bl, byte [rdi + 0x44]
jae 0x41156d
jb 0x41156a
jns 0x41155c
jne 0x411578
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x411581
jb 0x41157e
jns 0x41155a
push rax
push rbx
je 0x411549
jo 0x411578
imul esi, dword [rdx + 0x49], 0x45456964
jbe 0x411575
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x41155f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x411594
push r10
push rax
push rbx
je 0x411569
jo 0x411598
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
je 0x411574
jb 0x4115ab
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4115af
pop rdi
jb 0x4115b2
jb 0x4115b6
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4115cc
push r11
xor eax, 0x5a5f005f
push rbx
je 0x411599
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x4115e3
jb 0x4115e6
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x4115ad
jbe 0x4115de
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
jbe 0x4115eb
push rsp
pop rdi
jo 0x4115ef
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41160e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x411617
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41160b
push rbx
je 0x4115f9
jo 0x411628
imul esi, dword [rdx + 0x49], 0x45456964
cmp byte [rbp + 0x61], ch
js 0x411632
jae 0x41163e
jp 0x41163c
jbe 0x4115da
pop rdi
pop rdx
push rbx
je 0x411611
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41164a
je 0x41165f
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
cmp byte [rcx + rbp*2 + 0x6a], ah
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
cmp dword gs:[r11d + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x411681
jb 0x411684
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x49], ebx
push rdx
imul esp, dword [rbp + rax*2 + 0x45], 0x53527645
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x411676
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x411662
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4116a3
push r11
je 0x411676
jo 0x4116a5
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x411665
pop rdi
pop rdx
push rbx
je 0x41169d
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x4116db
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4116e2
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4116c4
jo 0x4116f3
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4116cc
xor ebp, dword [rbp + 0x6f]
jbe 0x411705
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4116ee
movsxd rbp, dword [rdi + 0x70]
jns 0x411708
push rbx
je 0x4116f3
xor ebp, dword [rbp + 0x6f]
jbe 0x41172c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41171c
xor byte [rdi + 0x5f], bl
jne 0x41175d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x411778
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x411779
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x41178d
push r11
je 0x411749
xor ebp, dword [rbp + 0x6f]
jbe 0x411782
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x411781
xor byte [rdi + 0x49], bl
je 0x4117ba
jb 0x4117b6
jae 0x4117c0
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4117c3
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4117dc
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x4117f4
jb 0x4117d0
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x411802
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4117d9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x411812
je 0x411827
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
cmp byte [rcx + rbp*2 + 0x6a], ah
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor dword gs:[r8d], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x50]
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x41181d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41185e
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x411814
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41187d
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x70347453
imul esi, dword [rdx + 0x49], 0x53456964
je 0x411869
jbe 0x41189a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4118bf
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x4118d2
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x4118ec
jo 0x4118da
push r10
push r11
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4118e9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411902
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x4118da
jo 0x411909
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4118e7
jbe 0x411918
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x62
jae 0x41192e
jbe 0x4118cc
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41190f
xor ebp, dword [rbp + 0x6f]
jbe 0x411948
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x43], 0x30534531
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x411934
pop rdi
jae 0x411975
jb 0x411972
jns 0x41194e
push rax
imul eax, dword [rbp + 0x76], 0x31535f54
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x411946
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x411987
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4119a0
je 0x41197f
imul eax, dword fs:[rbp + 0x62], 0x74534b52
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor eax, 0x5a5f005f
push rbx
je 0x41198a
jbe 0x4119bb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x411992
jo 0x4119c1
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x4f], eax
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4119b2
jbe 0x4119e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4119d7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x411a10
je 0x411a25
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x411a38
jb 0x411a3b
movsxd rsi, dword [rcx + rcx*2 + 0x64]
push r10
jbe 0x411a25
push rbx
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x411a2b
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
jae 0x411a54
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x411a2a
pop rdi
jae 0x411a6b
jb 0x411a68
jns 0x411a44
push rax
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
jbe 0x411a63
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor dword gs:[r13d + 0x69], eax
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x411a62
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x411aa3
push r11
je 0x411a78
jbe 0x411aa9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x411aaa
jbe 0x411adb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x411ab2
jo 0x411ae1
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x411b00
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r11
xor dword [rdi + 0x45], ebx
jbe 0x411aea
jo 0x411af7
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411b14
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411b2d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x411b45
jb 0x411b21
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x411b20
xor bl, byte [rdi + 0x5f]
jne 0x411b61
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x411b7c
pop rdi
push r11
je 0x411b3a
xor ebp, dword [rbp + 0x6f]
jbe 0x411b73
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x45695f31
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x411b6b
xor al, 0x70
jb 0x411ba7
outsd dx, dword [rsi]
jb 0x411baa
je 0x411bbc
pop rdi
jno 0x411bbb
jne 0x411bae
push r11
je 0x411b81
jo 0x411bb0
imul esi, dword [rdx + 0x49], 0x53456964
je 0x411b8e
jbe 0x411bbf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x411ba4
jb 0x411bd5
je 0x411bd8
jb 0x411bbe
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x70
jne 0x411bf1
push 0x31534f45
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x411bc1
jbe 0x411bf2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r12d, dword [r13 + 0x6e]
jbe 0x411bb1
pop rdi
pop rdx
push rbx
je 0x411bed
jbe 0x411c1e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x411bce
pop rdi
pop rdx
push rbx
je 0x411c05
xor ebp, dword [rbp + 0x6f]
jbe 0x411c3e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
jo 0x411c67
jbe 0x411bfa
pop rdi
pop rdx
push rbx
je 0x411c31
xor byte [rdi + 0x49], bl
je 0x411c6a
jb 0x411c66
jae 0x411c70
push r8
imul ecx, dword [rdx + 0x30], 0x5f374545
push rbx
pop rdi
jae 0x411c80
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x411c57
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x411c98
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x411cb4
push rsp
jo 0x411cb7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x411ca7
jbe 0x411c64
pop rdi
pop rdx
push rbx
je 0x411ca1
pop rdi
jae 0x411ce2
jb 0x411cdf
jns 0x411cbb
push rax
push rbx
je 0x411caa
jo 0x411cd9
imul esi, dword [rdx + 0x49], 0x45456964
jbe 0x411cd5
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x411cd2
jbe 0x411d03
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x411cda
jo 0x411d09
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor r12d, dword [r13 + 0x6e]
jbe 0x411cbd
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x411d27
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411d40
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x411d17
jo 0x411d46
imul esi, dword [rdx + 0x49], 0x53456964
je 0x411d24
jbe 0x411d55
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x62
jae 0x411d6b
jbe 0x411d09
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x411d73
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411d8c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x411d64
jo 0x411d93
imul esi, dword [rdx + 0x49], 0x53456964
je 0x411d71
jbe 0x411da2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jbe 0x411d53
pop rdi
pop rdx
push r11
je 0x411d90
jbe 0x411dc1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x411da6
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
insd dword [rdi], dx
cmp qword fs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411ded
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x411dd6
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x411dfb
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x411e1c
insb byte [rdi], dx
jne 0x411e23
push r12
pop rdi
pop rdi
pop rdi
je 0x411e40
jo 0x411e2e
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411e3f
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x411e1b
xor eax, 0x74695f5f
jb 0x411e51
movsxd rbp, dword [rdi + 0x6d]
jo 0x411e56
jbe 0x411e5a
insb byte [rdi], dx
push r11
je 0x411e35
jb 0x411e66
je 0x411e69
jb 0x411e4f
push rbx
je 0x411e3d
jo 0x411e6c
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
xor byte [rdi + 0x31], bl
xor al, 0x5f
je 0x411e83
jb 0x411e7f
movsxd rbp, dword [rdi + 0x6d]
jo 0x411e84
jbe 0x411e88
insb byte [rdi], dx
push r12
pop rdi
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x411e98
movsxd rbp, dword [rdi + 0x6d]
jo 0x411e9d
imul esi, dword [rbp + 0x72], 0x5f375349
add byte [r15 + 0x5a], r11b
push r11
je 0x411e86
jbe 0x411eb7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411eeb
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411f04
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x411f1c
jb 0x411ef8
imul edx, dword [rbx + 0x61], 0x45456949
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x411ef8
xor al, 0x5f
pop rdi
jne 0x411f38
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x411f3f
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x411f46
push r8
push rbx
je 0x411f21
jo 0x411f50
imul esi, dword [rdx + 0x49], 0x53456964
xor bl, byte [rdi + 0x53]
push r11
xor dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
push rdx
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411f79
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x411f82
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x411f76
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
cmp dword gs:[r11d + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x411fb8
jb 0x411fbb
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x4a]
push rdx
imul esp, dword [rbp + rax*2 + 0x45], 0x54507645
pop rdi
jo 0x411fa9
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x411f9b
pop rdi
jae 0x411fdc
jb 0x411fd9
jns 0x411fb5
push rax
push rbx
je 0x411fa6
jbe 0x411fd7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
xor al, 0x5f
jbe 0x411fe9
pop rdi
push rbx
pop rdi
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41200b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x412014
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x412008
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
cmp byte gs:[r9d + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x411fdf
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412048
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x412051
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x412045
push rbx
je 0x412033
jo 0x412062
imul esi, dword [rdx + 0x49], 0x45456964
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x412082
jb 0x412085
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x41206f
push rsp
pop rdi
jo 0x412073
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41205f
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x4120b0
je 0x4120a5
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41208b
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x4120e6
push r11
je 0x4120a2
xor ebp, dword [rbp + 0x6f]
jbe 0x4120db
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4120fc
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x412105
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4120f9
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4120ee
pop rdi
pop rdi
jne 0x41212f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x41213f
je 0x412134
outsb dx, byte [rsi]
pop rdi
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push r11
je 0x412127
xor al, 0x70
jb 0x412163
outsd dx, dword [rsi]
jb 0x412166
je 0x412178
pop rdi
jno 0x412177
jne 0x41216a
push r11
je 0x41213d
jo 0x41216c
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41214a
jbe 0x41217b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x412160
jb 0x412191
je 0x412194
jb 0x41217a
push rbx
xor dword [rdi + 0x45], ebx
xor eax, 0x74706d65
jns 0x412182
jbe 0x41213f
pop rdi
pop rdx
push rbx
je 0x41217c
pop rdi
jae 0x4121bd
jb 0x4121ba
jns 0x412196
push rax
jbe 0x4121a6
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x412194
jo 0x4121c3
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4121db
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4121e4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4121d8
push rbx
je 0x4121c6
jo 0x4121f5
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor al, byte gs:[r13d + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x412207
jbe 0x412238
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41220f
jo 0x41223e
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x74706d65
jns 0x412237
jbe 0x4121f4
pop rdi
pop rdx
push rbx
je 0x412230
outsw dx, word [rsi]
jb 0x412274
jb 0x412264
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r12
pop rdi
push rdx
push rbx
je 0x41224b
jb 0x412282
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x412286
pop rdi
jb 0x412289
jb 0x41228d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x4122a4
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41226e
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x4122bf
je 0x4122b4
outsb dx, byte [rsi]
push r8
push rbx
je 0x412291
jbe 0x4122c2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4122fc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x412315
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4122ec
jo 0x41231b
imul esi, dword [rdx + 0x49], 0x53456964
je 0x4122f9
jbe 0x41232a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jbe 0x4122db
insd dword [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x412347
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x412327
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x412360
je 0x412375
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x412356
xor al, 0x5f
pop rdi
jne 0x412396
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x41239d
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4123a4
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
xor bl, byte [rdi + 0x53]
push r11
xor dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
push rdx
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4123af
jbe 0x4123e0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4123d4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x412415
push r11
je 0x4123ea
jbe 0x41241b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x412421
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41247c
push r11
je 0x412438
xor ebp, dword [rbp + 0x6f]
jbe 0x412471
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
xor ebx, dword [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x412474
jbe 0x4124a5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x41249e
jbe 0x4124cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rip + 0x655f4d5f], esi
jb 0x4124df
jae 0x4124e5
pop rdi
je 0x4124e3
outsb dx, byte gs:[rsi]
push r8
imul eax, dword [rax], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x4124f4
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41250d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
je 0x4124f6
jbe 0x412527
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x412512
xor dword [rdi + 0x5f], ebx
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x412537
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412555
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41256e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412545
jo 0x412574
imul esi, dword [rdx + 0x49], 0x53456964
je 0x412552
jbe 0x412583
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4125ad
xor dword [rip + 0x6574495f], esi
jb 0x4125a1
movsxd rbp, dword [rdi + 0x6d]
jo 0x4125a6
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x4125b7
je 0x4125ba
jb 0x4125a0
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x4125b4
pop rdi
push rbx
pop r15
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41259f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4125d8
je 0x4125ed
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4125ba
jo 0x4125e9
imul esi, dword [rdx + 0x49], 0x45456964
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41260a
jb 0x41260d
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x4a], ebx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x4125f9
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x4125ff
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
jb 0x41261e
jb 0x412610
js 0x4125c0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412629
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x412642
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412619
jo 0x412648
imul esi, dword [rdx + 0x49], 0x53456964
je 0x412626
jbe 0x412657
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
jbe 0x412608
pop rdi
pop rdx
push rbx
je 0x41263f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x412680
push r11
je 0x412655
jbe 0x412686
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor eax, 0x5a5f005f
push rbx
push r11
je 0x41269a
jo 0x4126c9
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x4126b1
jo 0x4126e0
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4126c8
pop rdi
pop rdi
imul bp, word [rsp + rbp*2 + 0x5f], 0x4961
push rax
imul ebp, dword [rcx + 0x45], 0x5f5f394e
outsb dx, byte [esi]
jne 0x412704
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4126ed
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x412712
push rsp
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
jbe 0x412733
insb byte [rdi], dx
jne 0x41273a
jbe 0x41271d
pop rdi
pop rdi
je 0x412756
jo 0x412744
push r12
pop rdi
push rbx
cmp byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x412727
jbe 0x412758
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
imul r15d, dword fs:[r8 + 0x45], 0x5a5f006d
push rbx
je 0x412770
je 0x412754
imul eax, dword fs:[rbp + 0x62], 0x74534b52
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor eax, 0x5a5f005f
push rbx
je 0x412759
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41279d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4127b6
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x4127ce
jb 0x4127aa
imul edx, dword [rbx + 0x61], 0x45456949
push rbx
je 0x4127a0
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x412805
jo 0x4127f3
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
ja 0x41280a
imul esi, dword [rbp + 0x72], 0x534e4b52
je 0x4127d9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x412818
movsxd rbx, dword [rdi + 0x73]
je 0x412826
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x412821
je 0x412836
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r8, dword [r8]
pop rdi
pop rdx
push rbx
je 0x41280b
xor ebp, dword [rbp + 0x6f]
jbe 0x412844
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor dword gs:[r13d + 0x53], eax
xor bl, byte [rdi]
pop rdi
pop rdi
jae 0x41287a
pop rdi
jae 0x41287e
jb 0x412881
add byte [rdi + 0x5a], bl
push rbx
je 0x41284a
jbe 0x41287b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x412884
jbe 0x4128b5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
push r11
push r11
xor ebx, dword [rdi + 0x45]
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x4128b9
jbe 0x4128ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4128e9
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41292a
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x4128f1
pop rdi
pop rdx
push rbx
je 0x412928
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x412969
push r11
je 0x41293c
jo 0x41296b
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x4f], eax
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x412957
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x412990
je 0x4129a5
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
cmp byte [rcx + rbp*2 + 0x6a], ah
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
cmp byte gs:[r9d + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4129c6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4129cf
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4129c3
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
jae 0x412a04
jb 0x412a01
jns 0x4129dd
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x4129eb
push rsp
pop rdi
add byte [rdi + 0x5f], bl
jae 0x412a16
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412a23
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x412a2c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x412a20
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x412a1b
jbe 0x412a4c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x412a43
jbe 0x412a74
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x412a4b
jo 0x412a7a
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x412a64
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x412aa2
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x412aa9
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412a89
xor ebp, dword [rbp + 0x6f]
jbe 0x412ac2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x412aaa
xor ebp, dword [rbp + 0x6f]
jbe 0x412ae3
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412ac0
jo 0x412aef
imul esi, dword [rdx + 0x49], 0x45456964
jbe 0x412a9a
pop rdi
pop rdx
push rbx
je 0x412ad1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x412b12
push r11
je 0x412ae5
jo 0x412b14
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x412ad4
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412b3d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x412b56
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412b2d
jo 0x412b5c
imul esi, dword [rdx + 0x49], 0x53456964
je 0x412b3a
jbe 0x412b6b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x412b5d
pop rdi
jae 0x412b9e
jb 0x412b9b
jns 0x412b77
push rax
push rbx
je 0x412b66
jo 0x412b95
imul esi, dword [rdx + 0x49], 0x53456964
xor dword [rdi + 0x45], ebx
jbe 0x412b94
pop rdi
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x412b88
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x412ba8
jbe 0x412bd9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdi], esi
pop rdi
pop r15
jne 0x412bf7
je 0x412bec
jo 0x412c00
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x412bcc
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412c10
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x412c29
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412c03
jbe 0x412c34
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x412c13
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x412c78
jo 0x412c66
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
jb 0x412c70
jb 0x412c60
movsxd rax, dword [rax]
pop rdi
pop rdx
push r11
je 0x412c4a
xor ebp, dword [rbp + 0x6f]
jbe 0x412c83
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
jbe 0x412c3f
pop rdi
pop rdx
push rbx
je 0x412c76
xor byte [rdi + 0x49], bl
je 0x412caf
jb 0x412cab
jae 0x412cb5
push r8
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x412cc5
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x412c9c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x412cdd
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x412ca4
pop rdi
pop rdx
push rbx
je 0x412cdb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x412d1c
push r11
je 0x412cef
jo 0x412d1e
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x412cde
pop rdi
pop rdx
push rbx
je 0x412d15
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x412d56
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x412d0c
pop rdi
pop rdx
push rbx
je 0x412d44
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524564
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x412d5e
jbe 0x412d8f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x412d66
jo 0x412d95
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x412db7
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x412dcf
push r11
xor dword [rdi + 0x45], ebx
jbe 0x412da5
jo 0x412db2
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x412da2
jbe 0x412dd3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
imul edi, dword [rax + 0x45], 0x5a5f006d
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412de8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x412df1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x412de5
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x412e18
jb 0x412e1b
movsxd rsi, dword [rcx + rcx*2 + 0x64]
push r10
jbe 0x412e03
push rsp
pop rdi
jo 0x412e07
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x412dfa
jo 0x412e38
jae 0x412e2d
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412e32
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x412e4b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412e22
jo 0x412e51
imul esi, dword [rdx + 0x49], 0x53456964
je 0x412e2f
jbe 0x412e60
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r11
je 0x412e47
jb 0x412e78
je 0x412e7b
jb 0x412e61
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x412e73
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x412e5f
pop rdi
pop rdi
jne 0x412ea0
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x412eb0
je 0x412ea5
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x412ec3
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x412ecc
je 0x412ec1
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x45], 0x535f5445
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x412eae
jbe 0x412edf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412ef4
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x412ed0
xor eax, 0x6574495f
jb 0x412f05
movsxd rbp, dword [rdi + 0x6d]
jo 0x412f0a
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x412f1b
je 0x412f1e
jb 0x412f04
push rbx
je 0x412ef2
jo 0x412f21
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x53]
xor eax, 0x5a5f005f
push r11
je 0x412f0d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x412f4c
movsxd rbx, dword [rdi + 0x73]
je 0x412f5a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x412f55
je 0x412f6a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412f86
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x412f9f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
je 0x412f88
jbe 0x412fb9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412fd7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x412fe0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x412fd4
push rbx
je 0x412fc2
jo 0x412ff1
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x412fd3
xor ebp, dword [rbp + 0x6f]
jbe 0x41300c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412fe9
jo 0x413018
imul esi, dword [rdx + 0x49], 0x45456964
jo 0x413030
jbe 0x412fc3
pop rdi
pop rdx
push rbx
je 0x412ffa
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x413030
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41303a
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x413013
jb 0x413045
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x413062
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41305c
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x413064
insd dword [rdi], dx
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x413058
jbe 0x413089
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x413083
insd dword [rdi], dx
js 0x41309d
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x413098
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4130d1
je 0x4130e6
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4130b5
jbe 0x4130e6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor eax, 0x3453505f
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4130ed
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x413148
push r11
je 0x413104
xor ebp, dword [rbp + 0x6f]
jbe 0x41313d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x54455f31
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41312c
pop rdi
pop rdi
jne 0x41316d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x41317d
je 0x413172
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x413151
jbe 0x413182
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
push rbx
xor al, 0x5f
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x41318c
jbe 0x4131bd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4131c1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413202
push r11
je 0x4131d7
jbe 0x413208
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x4131db
pop rdi
pop rdx
push rbx
je 0x413214
imul bp, word [rsp + rbp*2 + 0x49], 0x394e
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x41324c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x413265
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41323f
jbe 0x413270
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x413271
pop rdi
push rbx
pop rdi
push rdx
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x413264
jbe 0x413295
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41326c
jo 0x41329b
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x6e6f7266
je 0x413294
jbe 0x413251
pop rdi
pop rdx
push rbx
je 0x41328a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4132bf
push r10
push rbx
je 0x413293
jo 0x4132c2
imul esi, dword [rdx + 0x49], 0x45456964
push rbx
je 0x41329e
jb 0x4132d5
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4132d9
pop rdi
jb 0x4132dc
jb 0x4132e0
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4132f6
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4132c4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4132fd
je 0x413312
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
cmp byte [rcx + rbp*2 + 0x6a], ah
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
cmp dword gs:[r11d + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x413334
jb 0x413337
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x4a], ebx
push rdx
imul esp, dword [rbp + rax*2 + 0x45], 0x53527645
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x413329
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x413348
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x413351
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413345
cmp byte fs:[r13 + 0x61], r13b
js 0x413362
jae 0x41336e
jp 0x41336c
jbe 0x41330a
pop rdi
pop rdx
push rbx
push r11
je 0x413349
jbe 0x41337a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x413376
jo 0x4133a5
imul esi, dword [rdx + 0x49], 0x61456964
push rbx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x413388
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
imul ebp, dword [rbp + 0x69], 0x5f394e45
pop rdi
outsb dx, byte [esi]
jne 0x4133cf
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4133b8
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x4133dd
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x4133fe
insb byte [rdi], dx
jne 0x413405
push r12
pop rdi
pop rdi
pop rdi
je 0x413422
jo 0x413410
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4133f4
jbe 0x413425
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4133fc
jo 0x41342b
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413446
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41344f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413443
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor dword gs:[ebp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413479
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x413455
xor al, 0x5f
je 0x41348e
jb 0x41348a
movsxd rbp, dword [rdi + 0x6d]
jo 0x41348f
jbe 0x413493
insb byte [rdi], dx
push r11
je 0x41346e
jb 0x41349f
je 0x4134a2
jb 0x413488
push rbx
je 0x413476
jo 0x4134a5
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x53], eax
xor eax, 0x5a5f005f
push r11
je 0x41348b
xor ebp, dword [rbp + 0x6f]
jbe 0x4134c4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4134a1
jo 0x4134d0
imul esi, dword [rdx + 0x49], 0x45456964
xor al, 0x62
jae 0x4134e0
jbe 0x41347e
pop rdi
pop rdx
push rbx
je 0x4134ba
jbe 0x4134eb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x413518
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x413530
push rdx
imul esp, dword [rbp + rax*2 + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4134fe
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413537
je 0x41354c
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp byte [r13 + 0x61], r13b
js 0x413549
jae 0x413555
jp 0x413553
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41352d
pop rdi
pop rdi
jne 0x41356e
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x41357e
je 0x413573
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor byte [rbp + 0x45], al
xor dword [rax], edi
pop rdi
pop rdi
jne 0x413591
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x41359a
je 0x41358f
outsb dx, byte [rsi]
push r8
push rbx
je 0x41356c
jbe 0x41359d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor al, 0x5f
insd dword [rdi], dx
push r12
pop rdi
push rbx
cmp byte [rdi + 0x54], bl
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41359a
imul bp, word [rsp + rbp*2 + 0x49], 0x394e
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x4135d2
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4135eb
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul edx, dword [rbx + 0x74], 0x63657636
je 0x413603
jb 0x4135df
imul edx, dword [rbx + 0x61], 0x45456949
imul r8d, dword [r13 + 0x76], 0x37535f54
pop rdi
push rdx
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x4135eb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41362a
movsxd rbx, dword [rdi + 0x73]
je 0x413638
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413633
je 0x413648
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41362f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413670
push r11
je 0x413645
jbe 0x413676
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor eax, 0x5a5f005f
push rbx
je 0x413684
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4136c5
push r11
je 0x41369a
jbe 0x4136cb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [r9], r15d
pop rdi
pop r15
je 0x4136f3
push rsp
jo 0x4136f6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4136e6
jbe 0x4136a3
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41370c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x413715
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413709
push rbx
je 0x4136f7
jo 0x413726
imul esi, dword [rdx + 0x49], 0x45456964
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x413746
jb 0x413749
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x4a]
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x413733
push rsp
pop rdi
jo 0x413737
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x413723
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413764
push r11
je 0x413739
jbe 0x41376a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor eax, 0x5a5f005f
push rbx
je 0x41376b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4137ac
push r11
je 0x413781
jbe 0x4137b2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x4137e2
pop rdi
jae 0x4137f4
outsd dx, dword [rsi]
jb 0x4137e4
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4137bf
xor byte [rdi + 0x49], bl
je 0x4137f8
jb 0x4137f4
jae 0x4137fe
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413801
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41381a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4137f4
jbe 0x413825
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x413840
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41381d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41385c
movsxd rbx, dword [rdi + 0x73]
je 0x41386a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413865
je 0x41387a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rax + 0x75], esi
jae 0x413882
pop rdi
movsxd rbp, dword [rbx + 0x45]
movsxd rax, dword [rax + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41386c
jo 0x41389b
imul esi, dword [rdx + 0x49], 0x43456964
xor dword [rcx + 0x52], ecx
jbe 0x41388c
push r12
pop rdi
push rdx
imul rax, qword [r8], 0x78635f5f
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4138a2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4138e3
push r11
je 0x4138b6
jo 0x4138e5
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4138df
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413920
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x41392b
push rsp
jo 0x41392e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41391e
jbe 0x4138db
pop rdi
pop rdx
push rbx
je 0x413911
pop rdi
pop rdi
je 0x41394d
jb 0x413956
ja 0x413948
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41396a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x413973
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413967
push rbx
je 0x413957
jbe 0x413988
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x41397e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4139bf
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x4139db
push rsp
jo 0x4139de
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4139ce
jbe 0x41398b
pop rdi
pop rdx
push rbx
je 0x4139c2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4139fb
je 0x413a10
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
imul ebp, dword [rbp], 0x4b4e5a5f
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x413a28
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x413a41
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x413a1b
jbe 0x413a4c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x62
jae 0x413a5e
jbe 0x4139fc
pop rdi
pop rdx
push rbx
je 0x413a33
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413a74
push r11
je 0x413a47
jo 0x413a76
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x413a75
outsw dx, word [rsi]
jb 0x413ab9
jb 0x413aa9
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x413a81
jb 0x413ab8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x413abc
pop rdi
jb 0x413abf
jb 0x413ac3
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x413ada
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x413aaa
pop rdi
jae 0x413aeb
jb 0x413ae8
jns 0x413ac4
push rbx
je 0x413ab4
jbe 0x413ae5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
jbe 0x413af0
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413b0c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x413b25
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x413aff
jbe 0x413b30
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x413b18
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413b59
push r11
je 0x413b2e
jbe 0x413b5f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor eax, 0x5a5f005f
jb 0x413b93
jb 0x413b7c
imul ebp, dword [rcx + 0x45], 0x5f545276
push rdx
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x413b76
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413bb7
push r11
je 0x413b8a
jo 0x413bb9
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x413ba7
outsw dx, word [rsi]
jb 0x413beb
jb 0x413bdb
push r10
imul eax, dword [rbp + 0x4f], 0x4e525f54
push rbx
je 0x413bb4
jb 0x413beb
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x413bef
pop rdi
jb 0x413bf2
jb 0x413bf6
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x413c0d
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x413bd7
xor bl, byte [rdi + 0x44]
jae 0x413c20
jb 0x413c1d
jns 0x413c0f
jne 0x413c2b
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x413c34
jb 0x413c31
jns 0x413c0d
push rax
jbe 0x413c1e
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x413c06
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413c47
push r11
je 0x413c1a
jo 0x413c49
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413c64
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x413c6d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413c61
push rbx
je 0x413c51
jbe 0x413c82
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x413c81
jbe 0x413cb2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x413c89
jo 0x413cb8
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
cmp byte [r13 + 0x61], r13b
js 0x413cc9
jae 0x413cd5
jp 0x413cd3
jbe 0x413c71
pop rdi
pop rdx
push r11
je 0x413cae
jbe 0x413cdf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x413cb6
jo 0x413ce5
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor r12d, dword [r13 + 0x6e]
jbe 0x413c99
pop rdi
pop rdx
push rbx
je 0x413cd0
xor al, 0x70
jb 0x413d0c
outsd dx, dword [rsi]
jb 0x413d0f
je 0x413d21
pop rdi
jno 0x413d20
jne 0x413d13
push r11
je 0x413ce6
jo 0x413d15
imul esi, dword [rdx + 0x49], 0x53456964
je 0x413cf3
jbe 0x413d24
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor dword [rdi + 0x53], ebx
push r11
xor dword [rdi + 0x45], ebx
push r11
je 0x413d09
jb 0x413d3a
je 0x413d3d
jb 0x413d23
push rbx
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
pop rdi
push r11
xor al, 0x5f
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x413d41
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x413d77
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x413d81
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x413d5a
jb 0x413d8c
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x413da9
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x413da3
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x413dab
insd dword [rdi], dx
imul rax, qword [r13 + 0x45], 0x505f5450
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x413d99
movsxd rbp, dword [rdi + 0x70]
jns 0x413db3
push rbx
je 0x413d9e
xor ebp, dword [rbp + 0x6f]
jbe 0x413dd7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x54455f31
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push r11
je 0x413dc7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413e08
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x413e13
push rsp
jo 0x413e16
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413e06
jbe 0x413dc3
pop rdi
pop rdx
push r11
je 0x413dfb
xor ebp, dword [rbp + 0x6f]
jbe 0x413e34
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x34], 0x65736162
jbe 0x413de4
pop rdi
pop rdx
push rbx
je 0x413e1b
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x413e6c
je 0x413e61
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x45], 0x31535f54
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x413e4d
jbe 0x413e7e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x413e3f
pop rdi
je 0x413ea6
add byte [rdi + 0x5f], bl
js 0x413ec3
pop rdi
jo 0x413eb3
jb 0x413ec3
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x413e9e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x413edf
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413efb
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x413ed7
xor eax, 0x6574495f
jb 0x413f0c
movsxd rbp, dword [rdi + 0x6d]
jo 0x413f11
imul esi, dword [rbp + 0x72], 0x37745349
jb 0x413f22
je 0x413f25
jb 0x413f0b
push rbx
je 0x413ef9
jo 0x413f28
imul esi, dword [rdx + 0x49], 0x45456964
xor dword [r13 + 0x53], eax
xor eax, 0x5a5f005f
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x413f40
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x413f49
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413f3d
imul eax, dword [rbp + 0x38], 0x5f78616d
jae 0x413f66
jp 0x413f64
jbe 0x413f02
pop rdi
pop rdx
push rbx
je 0x413f38
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x413f82
jb 0x413f85
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x413f4a
jo 0x413f79
imul esi, dword [rdx + 0x49], 0x49456964
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x413f76
push rsp
pop rdi
jo 0x413f7a
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x413fa1
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x413f78
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x413fae
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x413fb8
pop rdi
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x413fdb
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x413fee
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor esi, dword [rdx + 0x75]
outsb dx, byte [rsi]
push r10
push rbx
je 0x413fd0
jbe 0x414001
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor byte [rdi + 0x49], bl
push rbx
pop rdi
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
push r11
push r11
xor ebx, dword [rdi + 0x45]
push r10
push rbx
xor byte [rdi + 0x49], bl
push rbx
imul r10d, dword fs:[r8 + 0x53], 0x69495f30
push rbx
imul rax, qword [r13 + 0x45], 0x4e5a5f00
push rbx
je 0x41400f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414048
je 0x41405d
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41402a
jo 0x414059
imul esi, dword [rdx + 0x49], 0x45456964
cmp byte [r13 + 0x61], r13b
js 0x414064
jae 0x414070
jp 0x41406e
push r10
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41404c
jbe 0x41407d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x414099
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4140b1
push rdx
jbe 0x414087
jo 0x414094
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4140b1
movsxd rdi, dword [rax + 0x78]
jno 0x4140a1
push rax
push r11
je 0x414091
jo 0x4140c0
imul esi, dword [rdx + 0x49], 0x53456964
je 0x41409e
jbe 0x4140cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4140f7
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41410a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x414113
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414107
push rbx
je 0x4140f5
jo 0x414124
imul esi, dword [rdx + 0x49], 0x45456964
jae 0x414143
jb 0x414140
jns 0x41411c
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x41412a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414119
jbe 0x41414a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r12d, dword fs:[r13 + 0x6e]
jbe 0x4140f8
pop rdi
pop rdx
push r11
je 0x414135
jbe 0x414166
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r13 + 0x61], r13b
js 0x414171
jae 0x41417d
jp 0x41417b
jbe 0x414119
pop rdi
pop rdx
push rbx
je 0x41414f
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x414199
jb 0x41419c
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x414161
jo 0x414190
imul esi, dword [rdx + 0x49], 0x4a456964
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41418d
push rsp
pop rdi
jo 0x414191
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4141af
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4141b8
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4141ac
imul eax, dword [rbp + 0x38], 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x414174
pop rdi
pop rdx
push rbx
je 0x4141b0
jbe 0x4141e1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4141b8
jo 0x4141e7
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x4f]
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4141d3
xor ebp, dword [rbp + 0x6f]
jbe 0x41420c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor al, byte gs:[r13d + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x414201
xor ebp, dword [rbp + 0x6f]
jbe 0x41423a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x414217
jo 0x414246
imul esi, dword [rdx + 0x49], 0x45456964
xor al, byte [r13 + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41422a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41426b
push rbx
xor dword fs:[r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41428b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x414294
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414288
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4142af
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4142b8
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4142ac
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4142df
jb 0x4142e2
movsxd rsi, dword [rcx + rcx*2 + 0x64]
push rdx
jbe 0x4142ca
push rsp
pop rdi
jo 0x4142ce
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4142ec
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4142f5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4142e9
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4142de
xor bl, byte [rdi + 0x5f]
jne 0x41431f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41433a
pop rdi
push r11
je 0x4142f8
xor ebp, dword [rbp + 0x6f]
jbe 0x414331
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor dword [rdi + 0x64], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x414329
pop rdi
pop rdi
jne 0x41436a
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x41437a
je 0x41436f
outsb dx, byte [rsi]
pop rdi
push r8
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x414393
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41439c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414390
push rbx
je 0x414380
jbe 0x4143b1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor ebx, dword [rdi + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor r8b, byte gs:[ebp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4143d1
xor byte [rdi + 0x5f], bl
jne 0x414412
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x41442d
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x41442e
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x414442
push r11
je 0x4143fe
xor ebp, dword [rbp + 0x6f]
jbe 0x414437
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul eax, dword [rbp + 0x53], 0x45455f33
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x414426
xor dword [rdi + 0x5f], ebx
jb 0x414462
jae 0x414472
outsd dx, dword [rsi]
push r11
je 0x41443b
jbe 0x41446c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r8
push rsp
pop rdi
push rdx
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x414464
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4144a5
push r11
je 0x414478
jo 0x4144a7
imul esi, dword [rdx + 0x49], 0x53456964
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x4f]
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x414492
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [rbp + r12*2 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x41450c
jo 0x4144fa
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
xor dword gs:[r13d + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x4144f5
jbe 0x414526
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41451b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414554
je 0x414569
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
jae 0x41457b
jb 0x414578
jns 0x414554
jbe 0x414562
push rbx
xor byte [rdi + 0x50], bl
push rsp
pop rdi
add byte [rbp + 0x61], ch
imul ebp, dword [rsi], 0x534e5a5f
je 0x414553
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x414594
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x41458c
jbe 0x4145bd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4145b2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4145eb
je 0x414600
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4145cf
jbe 0x414600
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x414601
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x414642
push r11
je 0x414617
jbe 0x414648
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp byte [rcx + r13*2 + 0x6a], r12b
imul esi, dword [rbx + 0x74], 0x72
xor al, 0x65
push r11
push r11
xor bl, byte [rdi + 0x45]
push r11
push r11
xor al, 0x5f
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor al, 0x5f
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x414687
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x414690
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414684
push rbx
je 0x414672
jo 0x4146a1
imul esi, dword [rdx + 0x49], 0x45456964
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x414656
pop rdi
pop rdx
push rbx
je 0x41468d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4146ce
push rbx
xor dword fs:[r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rax], al
jae 0x4146fe
insd dword [rdi], dx
je 0x4146e9
add byte [rsi], ch
jae 0x414701
jb 0x414703
add byte [rsi], ch
jae 0x4146fd
jae 0x41470b
jb 0x41470d
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x41470e
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x41471c
outsb dx, byte cs:[esi]
jne 0x4146ea
jne 0x414728
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x4146f8
push 0x687361
jns 0x414741
jae 0x41474e
insd dword [rdi], dx
add byte [rsi], ch
jns 0x414749
jae 0x414751
jb 0x4146df
outsb dx, byte cs:[esi]
jne 0x414712
jbe 0x41474b
jb 0x41475b
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x41471f
jbe 0x414758
jb 0x414768
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x414763
insb byte [rdi], dx
jns 0x414772
add byte [rsi], ch
jb 0x41476d
insb byte [rdi], dx
jo 0x414779
je 0x41470f
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x414748
outsd dx, dword [esi]
je 0x41471e
je 0x414786
js 0x414797
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x41479c
je 0x414792
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x4147b5
jo 0x4147c9
pop rdi
je 0x4147b9
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4147c7
jns 0x414768
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x4147e3
jns 0x414774
push 0x63
jb 0x414779
jns 0x4147eb
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x4147f5
je 0x41478b
je 0x4147f1
add byte [rsi], ch
jae 0x414808
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x41479f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add rax, 0x40
add byte [rax], al
add rax, 0
add byte [rax], al
scasd eax, dword [rdi]
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ss:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rax], 0x40
add byte [rax], al
add byte [rax], al
add al, al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
or byte [rax], al
add byte [rax], al
add byte [rax], al
fmul dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
or al, byte [rax]
add byte [rax], al
add byte [rax], al
call 0x414a87
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x414ac3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], al
add byte [rax], al
add byte [rax + 0xc], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], dl
add byte [rax], al
add byte [rax + 0xc], dl
add byte [rax], al
add byte [rdx + 0x5e], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
push 0x40
add byte [rax], al
add byte [rax], al
add ah, dh
push 0
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax], al
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax], al
sub byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rax + rax*2], ch
add byte [rax], al
add byte [rax], al
sub byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
pop rsp
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4076], cl
add byte [rax], al
add byte [rax + 0x76], cl
add byte [rax], al
add byte [rbx + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
movabs eax, dword [0xa1fc000000000040]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, ch
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add al, bh
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], dh
add byte [rax], al
add byte [rax], dh
add byte [rax], al
enter 0, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x60b0, 0
add byte [rax], al
add byte [rax], al
enter 0xb0, 0
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x414e22
add byte [rax], al
add byte [rax], al
add al, bl
mov al, 0
add byte [rax], al
add byte [rax], al
add al, ch
add dword ds:[rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
mov al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rsi + 1], 0
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
mov cl, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 0x32], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
jrcxz 0x414f7b
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
