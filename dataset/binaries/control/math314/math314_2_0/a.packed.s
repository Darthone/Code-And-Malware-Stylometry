call 0x403300
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x403118
add ebx, ebx
je 0x4030ce
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x403106
cmp rbp, -4
ja 0x403106
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4030ee
add ecx, 4
mov dl, byte [rax]
je 0x403116
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x403106
ret
cld
pop r11
cmp r8b, 2
je 0x40312e
jmp 0x4031ab
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40313e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x403126
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x403156
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x403143
sub eax, 3
jb 0x403174
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x4031ab
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x40319b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x403199
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x403188
cmp rbp, -0xd00
adc ecx, eax
call 0x4030da
jmp 0x40312e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x403284
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x403222
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40326e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x403241
push 0x3a707474
jne 0x40329a
js 0x40325a
jae 0x403294
outsb dx, byte cs:[rsi]
je 0x403253
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4032c1
jb 0x4032b3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4032de
jb 0x4032f1
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21a6a0
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21a6a0
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x4031bc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x4032e7
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x403295
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f338f
jb 0x4033a7
movsxd rbp, dword [rdi]
jae 0x4033a1
insb byte [rdi], dx
js 0x4033a7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x403387
cmp rsi, rcx
jae 0x40338f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40336e
cmp al, 0x8f
ja 0x40336e
cmp byte [rsi - 2], 0xf
je 0x403374
sub al, 0xe8
jg 0x403371
push rdi
cmp al, 1
ja 0x40335c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40335f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x40338c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4033e3
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c3861
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x403427
mov al, 0xa
jmp 0x403427
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x403403
inc ebx
mov al, 0
jmp 0x40342b
mov al, 2
jmp 0x40342b
mov al, 3
jmp 0x40342b
mov al, 0x3c
jmp 0x40342b
push rcx
rcr ah, 1
fstp st(7)
jle 0x40346c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x40347e
jg 0x403470
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a8bf3
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4034ca
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb8647
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4034d2
cmp esi, 0x21585055
jne 0x4034d6
jge 0x4034c8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4034cb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4034cf
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40357b
pop rcx
or al, 0x3b
jb 0x403581
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4034f3
jmp 0x4034f5
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3663436
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5567e
in eax, dx
jg 0x40352d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x403573
mov bh, 0x2a
add edi, 0x10
jmp 0x403570
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4035ad
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4035e9
jne 0x403600
fstpnce st(6), st(0)
jle 0x4035c9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4035ff
jrcxz 0x403633
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1d597
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4036b2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x403672
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58297c47
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4036e5
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40367f
and ecx, 7
or al, 0xeb
jae 0x4036ea
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40371f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40375d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x403716
push rax
call 0xffffffff868d3403
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x403720
std
cmp edi, esi
xchg eax, edi
jle 0x403775
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c97d01
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x403773
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x403761
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40378a
js 0x4037ca
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40385c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad4a97
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40387d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x403882
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc23334
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x403810
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
cmp byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
movabs byte [0x9080], al
add byte [rax], cl
dec eax
sahf
add byte [rax], al
pop rsp
and al, 0
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x403936
je 0x40393f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x403908
mov dh, 0x7d
jbe 0x403907
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4038c0
sahf
sahf
add al, 0
cwde
add eax, 0x905fc000
and byte [rdi + 0x5480006], bl
add al, bh
sub eax, dword [rdi]
enter 0x80f, 0
xor byte [rax], cl
or dword [rdi], edx
jl 0x403924
jns 0x403926
or al, byte [rax]
fmul dword [rbx]
add al, ch
or bh, byte [rdi]
jle 0x4038af
or al, 0
adc byte [rbx], cl
or eax, 0x4f0c8000
and byte [rdi], bl
and byte [rsi], cl
add byte [rax + 0x7f4000f], dl
enter -0x4ff1, 0x6a
xlatb
adc byte [rax], al
add byte [rbx + 0x11], ch
add edx, esi
add esp, esp
add byte [rax], ch
insb byte [rdi], dx
adc al, byte [rax]
mov byte [rsi - 0x3e], dh
in eax, 0
stc
adc eax, dword [rax]
cld
movabs eax, dword [0xcac09f4f60ad14]
adc eax, 0x1617
scasb al, byte [rdi]
and byte [r15], r11b
and byte [rdi], dl
add byte [rax], cl
sbb byte [rax], al
clc
enter -0x6ff1, -0x51
sbb dword [rax], eax
add byte [rax + 0x13c8131a], dh
enter -0x3800, 0x1b
add al, ah
sbb al, 0x23
jns 0x4039c5
adc eax, dword gs:[rcx]
add al, 0
int1
call rbx
jo 0x4039fe
mov cl, 0xc
sbb edi, dword [rdi - 0x6ffd68e7]
or dword [rip + 0x171bc049], 0
or eax, 0xb906486c
pop rdi
mov byte [rsi + rsi*2], cl
pop rcx
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdi], edx
push rbx
and dword [rcx], ebx
in al, dx
jp 0x403a07
test byte [rbp + 9], bl
xchg eax, ecx
xchg byte [rdi - 0x6c9b285b], dl
xor ebp, dword [rsi + 0x20770827]
xor bl, r8b
leave
or esi, ebx
fadd dword [rbx - 0x14f536f3]
mov edi, 0x4761efc0
enter -0x7ce0, 0x4c
cli
or al, 4
mov al, 0x21
cmp dword [rcx], edi
and dword [rcx], eax
adc byte [rbx], dh
xchg eax, edx
xchg byte [r9 + rdx + 0x46], spl
adc bl, al
nop
pushfq
sbb eax, 0x145f0158
ja 0x403a1c
leave
and byte [rbx + 0x32], al
sbb byte [rdi - 0x7cdbcde4], dl
or al, 0xb9
and dl, bl
xor cl, al
nop
or al, 0x24
ljmp [rax]
sbb dword [rdx + 0x21e4393], edx
sub al, 0x40
sbb dword [rax + rcx*2 + 6], esp
xor byte [rbp + 0x34], bl
xchg byte [rax + rdx*4 + 0x21], ah
jnp 0x403a67
sbb dword [rdx + 0x40c23c41], edx
and dword [rcx], ebx
or dword [rcx + rcx*8], 0xffffffc9
adc al, byte [rbx]
cmp cl, byte [rax + rdx*4 + 0xc]
xor ah, byte [rdx]
push rax
and byte [rbx + 0x32], al
enter 0x5485, -0x52
and al, 0x83
or al, 0xc9
pop rax
fstp dword [rax + rdx*4 + 0x21]
cmp dword [rcx], edi
add al, 4
sub eax, 0x64864192
push rdx
push 0x19064864
jnp 0x403adb
cmpsd dword [rsi], dword ptr [rdi]
nop
and dword [rcx], ebx
jo 0x403a45
je 0x403a94
xchg eax, edx
xchg r13b, sil
js 0x403a9a
add eax, 0x9c90c832
jl 0x403ac9
or byte [rcx + rcx*8], 0x20
push -0x7c
nop
or al, 0x32
and al, 0x83
mov byte [rsi - 0x37cdbc74], dh
nop
fist word [rax - 0x6de6f9fb]
xchg eax, ebx
xchg eax, esp
sub ebx, dword [rax + 0x48641921]
push rbp
pushfq
xchg byte [r8 + rdx*4 - 0x80], spl
movabs al, byte [0x7f08a8906b0727a6]
int3
cmp ebx, dword [rcx]
nop
mov bl, 0x1a
cld
jns 0x403a9b
movabs eax, dword [0xf0df071757150604]
xchg byte [rdx + rcx*8], cl
adc bl, byte [rdi + 0x25]
test dword [rax], 0x472f610b
xor dword [rdi], eax
add eax, 0x832bb106
xlatb
push rbx
add ah, byte [rbx + 0x57]
pop rdx
adc al, 0x57
imul ecx, dword [rax + 0x1760c90d], -0x18
jle 0x403b3d
leave
scasb al, byte [rdi]
mov ebx, 0x1787a732
and ch, bh
mov edx, 0x320e4e28
fsubr dword [rdi + rdx - 0x56]
outsb dx, byte [rsi]
xor rsi, qword [rdx + 0x72]
nop
out 0x30, al
cmp ch, ah
invd
pop rsp
sbb edx, edi
outsb dx, byte [rsi]
add byte [rcx + 0xe], bl
sbb dword [rdx], ebp
and byte [rsi], ah
sbb al, 0xec
retf 0x350a
add byte [rdi + rax*2 - 0x1c], al
in al, 0x20
sbb dword [rbp - 0x3592e8b8], 0x64
sbb esp, esp
cwde
xor ah, byte [rdi - 0x65]
outsb dx, byte [rsi]
nop
push rax
sub al, 0x85
adc dword [rax], esp
mov ah, 0x77
and byte [rdi], dl
jb 0x403adf
mov bl, 3
cmpsd dword [rsi], dword ptr [rdi]
leave
out dx, al
jns 0x403b4e
in al, 0x60
pushfq
pop rax
and eax, dword [rax]
or dword [rcx], edi
fadd dword [rbp + 0x1356123c]
ficomp dword [rsi - 0x37]
cmp dword [rip - 0x63ac3b96], ebp
cmp al, 0x39
fcomp dword [rip - 0x7df64829]
pop rdi
divps xmm1, xmm0
xchg eax, ebx
sub ecx, 9
or dh, byte [rsi - 0x38]
leave
adc eax, dword [rdi]
xor al, 0x26
adc dword [rdx], ecx
mov edi, 0x5ecf217
jp 0x403ba3
sar dword [r14], cl
mov edx, 0x840bc279
or ah, byte [rdi - 0x1b]
or al, bh
test byte [rdx + 0x2f], bl
in al, 0xd9
or ebx, dword [rdx]
or ebx, dword [rdi - 0x40]
or rcx, rax
adc ebx, dword [rsi + 0x60]
xlatb
xchg eax, ebp
or edi, dword [rdi + 0x4c]
sahf
mov ebp, 0xbb55ec0
ja 0x403b8e
or edx, edi
and byte [rcx + 0x42], ch
sahf
or edi, dword [rdi + 0x5e]
pop rsi
cmp dword [rcx - 0xa], edi
sub ecx, dword [rdi + rdx]
nop
and dword [rcx + rcx*2 + 0x41c9c832], ecx
mov edx, 0x907c2e4b
mov ebp, 0x93bb2645
xor dword [rax + 0x72], 0x74
push 0xb
out dx, al
or al, 0xc8
adc ebx, dword [rsi - 0x38]
sub byte [rip - 0x46bf56b1], r9b
nop
sbb dword [rbp + 0x66], 0x17
jp 0x403c39
movsd dword [rdi], dword ptr [rsi]
enter 0x2720, 7
cmp rax, 0x727e954
cmp dword [rcx], edi
push rdi
sbb cl, byte [rax]
lodsb al, byte [rsi]
nop
mov esp, 0xe365690
jg 0x403bfe
sbb dh, byte [rdx - 0x4e]
movabs dword [0x26af057121781bb], eax
sahf
mov esp, 0xe910e40
ret
mov al, 0x49
nop
mov ebp, 0xef1dfb0
xlatb
jo 0x403ca1
mov ebp, 0x28bc2790
nop dword [rbx + rsi + 0x6d]
vmwrite rsi, rsi
sahf
cmpsd dword [rsi], dword ptr [rdi]
stosb byte [rdi], al
and al, 0xbb
pxor mm0, qword [rdx + 0x7279364]
cmp dword [rax], ebp
psrad mm6, qword [rdi]
cmp dword [rcx + 0x72], edi
nop
cmp dword [rax], esi
adc byte [rsi], dl
and byte [rax + 0x7d072793], dl
adc ah, al
and al, 0x55
adc byte [rsi], ch
stosd dword [rdi], eax
jae 0x403c9b
sub ch, byte [rdi]
sub ch, byte [rdi + 0x72793907]
retf -0x65f0
pop rcx
adc qword [rdx - 0x70], rsi
xchg eax, ebx
insb byte [rdi], dx
and ecx, dword [rdx - 0x361bee65]
or edi, dword [rcx - 0x60]
sbb bh, byte [rdx + 0x2f4dac11]
in al, 0x19
not dword [rcx]
outsd dx, dword [rsi]
and ah, byte [rax]
adc eax, 0xb0bc6712
push rax
pop qword [r15 + 0x12]
outsd dx, dword [rsi]
sub dl, byte [rax + 0x4990bc27]
mov edx, dword [rdx]
adc al, 0x37
mov ebp, 0xb9bb0e90
in eax, 0x12
leave
sahf
ja 0x403cc7
adc ebx, dword [rsi + 0x3ae4e41c]
adc edx, dword [rax]
sub al, 0xe4
leave
adc r10, qword [r15 + 0x56]
in al, 9
enter -0x38ed, 0x54
sbb dword gs:[rcx + rbx*2], edx
in al, 9
scasd eax, dword [rdi]
or dword [rcx + 0x65], edx
adc al, 0xdf
xchg eax, ebx
in al, 0xa3
cmpsb byte [rsi], byte ptr [rdi]
adc al, 0xa7
push rcx
jns 0x403cfb
in al, 0xc9
out 1, eax
adc al, 0x1c
cmp dl, ch
add ebp, esi
sahf
cmp al, 0x22
adc eax, 0x155b46f0
in al, dx
int1
sahf
cmpsd dword [rsi], dword ptr [rdi]
adc eax, 0x1d9e001b
ret 0xb6ae
retf -0x40eb
cmp al, 0x79
test byte [rdx - 1], 0x15
xor dword [rax], eax
jp 0x403d61
sahf
push rsi
movsb byte [rdi], byte ptr [rsi]
pop rbx
jg 0x403d5e
fld st(0)
mov ebx, 0x1793afc0
out 0xb8, eax
adc esp, dword [rdi]
sahf
cmp al, 0x63
add eax, 0x2b54169d
jb 0x403d51
in al, 0x20
out 0x33, al
in al, 0x8c
or dword [rdi], edx
iretd
jmp 0x1cde805c
xchg eax, edi
and cl, byte fs:[rbx + 0x257b02ef]
rcl dword [rdi], -0x4e
cmpsd dword [rsi], dword ptr [rdi]
sahf
int1
int3
mov bh, 0x1a
and eax, dword [rcx + rcx*2 + 0x2f]
in al, 0xc9
int1
sbb byte [rdi - 0x1bd09fa2], bh
push 0x745f184f
sbb byte [rdi + 0x7a], cl
and edi, ecx
stosb byte [rdi], al
xchg eax, ebp
sbb byte [rdi + 0x3a], bl
sbb al, 0x76
and ebx, edx
pop rdi
jmp rsp
leave
xchg byte [rdi - 1], dh
pop rdi
scasd eax, dword [rdi]
or dl, byte [rax]
add ecx, ebx
or edi, dword [rcx - 0xe]
or ebx, dword [rcx]
mov ah, 0x63
push rbx
sbb dword [rdi - 0x62], esi
sbb al, 0xe4
in al, 0xe8
push rsp
and al, byte [rbp + 0x42279e19]
sahf
int1
mov ecx, 0x61d5e719
sbb dword [rsp + rbx - 0x19e80814], 0x63
adc al, 0x44
add ebp, -0x37
xchg eax, ebx
sbb al, byte [rax]
pop rsp
xchg dword [rbp - 0x6c37a1cd], ecx
sbb ch, byte [rsi + 0x6f1aaa20]
and edi, ecx
pop rsi
enter 0x6a0c, -0x26
sbb dh, byte [rdi - 0x3d]
xchg eax, ebx
jp 0x403e20
sbb ebp, edi
cmp eax, 0xf2018042
test byte [rdi], dl
enter 0x1ba8, -0x26
sbb edx, dword [rdi + 0x40bd3448]
jb 0x403e66
and al, 0x1c
sbb al, 0xc9
sahf
mov edi, 0x85ad27ac
sbb al, 0x24
in al, 0x6c
retfq
sbb al, 0xa7
js 0x403e28
in al, dx
adc edi, dword [rdx]
test al, 7
mov dil, 0x60
cmpsd dword [rsi], dword ptr [rdi]
cmp byte [rax - 0xf61bd0f], ch
add al, 0x1d
div dword [rdi + rbx*2 + 0x38cf1d3c]
and al, 0x27
insb byte [rdi], dx
sbb eax, 0x21287687
iretd
js 0x403e83
test dword [rip + 0x78285a0f], ebx
and dword [rdi + 0x78], ecx
sahf
sbb eax, 0xfa557cf7
sbb eax, 0x13c9c839
xchg dword [rsi + 0x65], ebp
pop rax
jns 0x403e54
nop
cmp al, 0xa1
cmp eax, 0x6058671e
nop
cmp dword [rbx - 0x6a], ecx
sub ebp, dword [rdi]
in al, 0x19
mov esp, 0x2ef1ed4
imul eax, dword [rdi], 0x2438401f
ja 0x403e8e
xor ebx, dword [rdi]
jg 0x403e34
xchg eax, ebx
mov esp, 0xa4b71f4d
pop rsp
sub dword [rdi], eax
cmp dword [rcx + 0x72], edi
je 0x403ed2
mov ds, word [rdx]
adc bh, byte [rdi + rbx + 0x27]
mov esp, 0x33462790
int 0x1f
pop rdx
mov esp, dword [rdi]
mov ebp, 0x20022790
adc byte [rcx], dl
push rdi
mov ebp, 0x2a3c9e40
add dword [rsi], ecx
and byte [rip + 0x42f49e20], ch
sahf
shl byte [r8 + 0x57], 1
and byte [rdi + 0x20], al
and al, 0x27
hlt
js 0x403f09
out dx, eax
fcom qword [rbx - 0x59c730d9]
and byte [rdi], bh
retf 0x3f4e
add ah, byte [rax]
xor eax, ecx
and dword ds:[rax], esi
xchg dword [rdx - 0x4d], eax
in al, 0xa9
and dword [rdi + 0x5e], ecx
out 0x21, eax
mov edi, 0xc09c8393
ja 0x403f1f
lahf
xchg eax, ebx
and dl, byte es:[rip - 0x4536f3d9]
xor byte [rdx], ah
sub esp, dword [rax - 0x7a130d8e]
push rdi
jnp 0x403f46
ja 0x403efe
and eax, 0x4f217a3c
fsub dword [rdx]
push rsi
or byte [rbx], ah
adc ebx, dword [rsi - 0x38]
xor ebx, dword [rdi]
outsd dx, dword [rsi]
and r14d, r15d
in al, 4
pop rsi
enter 0x4d64, 0x75
and esp, edi
add rax, 0x6b183072
ja 0x403ed0
and ebx, eax
test dword [rcx], edi
lahf
and esi, dword [rdi]
or byte [rdi - 0x30], ah
adc ebp, 0x47163b0b
and al, 0xa7
jbe 0x403fb7
out dx, al
xor ch, bh
cmp ch, bl
test dword [rcx + rbp*4], edi
and al, 0xf
push rdi
stosd dword [rdi], eax
and al, 0xdf
xchg eax, ebx
sbb dword [rsp + rdi - 0x25cac234], 0x24
pop rsi
enter 0x6114, 0x15
and eax, 0x7243775f
jb 0x403f3f
jbe 0x403f50
jg 0x403fb8
and al, 0x9b
jns 0x403f5d
or ecx, dword [rbp - 0x48da4619]
pop rsi
and ebx, dword [rcx + 2]
ror dword [rbx], cl
sti
ja 0x403fa9
cmp dword [rcx - 0x2a], edi
or edx, dword [rsi]
xchg eax, edi
adc byte [rbx], bl
movabs rbp, 0x8a55342635072790
hlt
sahf
pop rdi
idiv byte [rbx]
mov ebp, 0xf2167726
in al, 0xc9
xchg eax, ebx
xor eax, 0x270601fe
jb 0x404021
movsxd rsp, dword [rdi]
xor byte [rbx - 0x7c93e364], al
mov al, 0x54
cmp bl, dl
in al, 0x20
pop rdi
in al, 0x59
in al, 0x99
pop rbp
sub byte [rdi - 0x52], bh
sbb bh, byte [rax + 0x17]
or byte [rdi], ch
sub byte ds:[rdi], dh
push rcx
in al, 0x20
mov ebx, 0x5a12f387
pop rdi
sub dl, dh
test byte [rdi], dl
movabs byte [0xbb01b5a07288d48], al
mov word [rdi], ss
ret 0xb728
repne movsb byte [rdi], byte ptr [rsi]
jb 0x404085
xor esi, dword [rip + 0x5cce1729]
and dword [rcx], edi
movabs dword [0xe42f18d407297e17], eax
fxch st(7)
sub dword [rdi - 0x40], eax
pop rax
std
sub edi, edi
push rdi
mov dl, 4
xlatb
adc byte [rsp + rcx*4], ah
test byte [rdx], ch
lea ebx, [esi + 0x43]
sub dh, byte [rdi - 0xde87b0e]
jp 0x4040a1
test dword [rdx], ebp
jg 0x404072
repne lodsb al, byte [rsi]
sub ah, byte [rdi - 0x2c]
push rsi
in al, 0x60
sub al, 0x2b
mov eax, 0x93906747
imul edi, dword [rdi + 0x1c], 0x58c85e01
test byte [rbx], ch
push -0x7b1cc37b
ret
sub edx, dword [rdi - 0xc]
xor al, ah
sub al, 0x3f
push rcx
sub al, 0xef
nop
mov esp, 0x2ccf5390
movsxd rbx, eax
add al, 2
mov esp, 0x5adf2d0f
and cl, al
or edi, dword [rcx]
insb byte [rdi], dx
xor ebp, dword [rbx + 0x21785f2d]
iretd
retfq
sub eax, 0xe53388f
in al, 9
nop
neg dword cs:[rdx + 0x19e90b63]
push rax
lahf
cmp dl, byte [rdx]
cmpsd dword [rsi], dword ptr [rdi]
iretd
rcr byte [rbp + 0x2e], 0xf
movabs byte [0x21784f216856d72e], al
enter 0x4f2e, -0x2f
sub ebx, dword [rax - 0x64]
cmp al, 0x7b
sub byte [rdi], ch
mov esi, 0xe3b75343
test dword [rcx + rdi], edi
push rdx
pop rdx
mov bl, 0x2f
mov bh, 0xcf
loopne 0x404086
cmp al, 0x8d
pop rax
loop 0x404135
xchg eax, edx
xchg eax, ebx
sar dword [rdx + 0x21], 0xd
xor bh, al
pop rcx
pop rsi
and byte [rdi], al
movabs eax, dword [0x5ecf306e302c1775]
enter 0x713, 0x42
pop rax
lea esi, [rax]
xlatb
push rsi
and dword [rdi + 0x78], ecx
and ecx, eax
xor byte [rdi - 2], cl
and bh, byte [rcx]
jb 0x40413f
js 0x40411b
xor byte [rdi + 0x4c], ch
sub dword [rdi], eax
add cl, byte [rdi + 0x46]
mov ds, word [rax + rdx]
xor dword [rax + 0x4e], ebp
pop rcx
xor dword [rsi + 0x4f23909d], ebx
cmp ebx, dword [rbp + 0x4d9def31]
or edi, dword [rcx - 0xa]
xor dword [rdi + 0x4e045916], ecx
and al, al
adc esi, dword [rdx]
xchg eax, edi
push rsp
xor bh, bh
test byte [rdi], dl
mov dh, byte [rdx]
scasd eax, dword [rdi]
xor al, 0x21
jb 0x4041c6
xor bl, byte [rsi]
adc esi, dword ds:[rdx - 0x5c]
js 0x404192
sub dh, byte [rdi]
add byte [rcx + 0x3c85ea15], dh
xor dword [rbx], 0x655fdeb7
xor ecx, dword [rdi + 0x78]
and edi, ecx
mov edi, 0x3394623a
jg 0x4041bf
enter 0x7a13, 0x21
cli
xor ecx, dword [rdi - 0xde8c1ff]
and al, 0x5e
push rdx
xor al, 0xaf
jrcxz 0x4041ff
xchg eax, esi
test eax, 0x3482c096
iretd
cmp al, 0xe1
test dword [rcx + rsi*4], edi
xor eax, 0x9253e237
lodsd eax, dword [rsi]
fld qword [rbp + 0x211177c]
scasd eax, dword [rdi]
fdiv dword [rbx - 0x77e39fa2]
xor eax, 0x3735a70f
or ecx, dword [rsi + rbx*2]
enter 0x4ce5, -0x41
xor eax, 0x7939075f
fbstp tbyte [rip + 0x605c1eb7]
xor eax, 0x2790bd9e
mov dl, 0x2f
cli
movsxd rdx, dword [rbx]
or cl, dh
push rax
nop
sbb al, 0x92
mov bl, 0x36
mov edi, 0xef369dd0
add al, byte [rbx - 0x3baa8ded]
cmpsd dword ss:[rsi], dword ptr [rdi]
adc dword [rbx], 0x36dbf018
lahf
sahf
add bl, byte [rbx + 0x37]
scasd eax, dword [rdi]
test byte [rsi], ch
or edi, dword [rcx - 0xa]
cdq
xlatb
mov ah, 0x4c
in al, 0x37
sahf
int1
sahf
inc dword [rsp]
xor eax, 0x258c2738
sahf
int1
cmp byte [rdi + 0x1c], dl
and ah, byte [rsi]
in al, 0x18
int1
jle 0x40427d
stosb byte [rdi], al
stosb byte [rdi], al
hlt
cmpsd dword [rsi], dword ptr [rdi]
rcl byte gs:[rdi], 1
in al, 9
in al, 0xc8
adc al, 0x39
lodsd eax, dword [rsi]
adc dl, ah
pop rcx
cmp edi, esi
sub byte [rdx + 0x57], 0x2f
int3
xor eax, 0x3f2f469b
cmpsd dword [rsi], dword ptr [rdi]
insd dword [rdi], dx
cmp dword [rcx], eax
leave
sbb dword [rdi + 0x2a], edx
mov ecx, 0xecf20739
test byte [rdx], bl
add r15d, dword [rdx]
ja 0x4042aa
sub dword [rbp + 0x2017ab3c], eax
cmp ah, byte [rdi + 0x217861ef]
iretd
loopne 0x404219
cmp dh, byte [rdi - 0x1a]
pop rcx
stc
cmp ah, ah
and byte [rdi], ah
xchg rax, r15
xor bh, byte [rbx]
or edi, dword [rcx - 0x2a]
or esi, dword [rax + 0x3b]
retf -0x30a5
js 0x404230
rol eax, 1
cmp edx, dword [rdi - 0x65d8c3f2]
xor al, 0xc8
xchg eax, ebx
js 0x4042dd
push rdx
cmp al, 0x7f
ret 0x175d
add al, 0x5e
cmp al, 0xcf
xor byte [rdx - 0x28], bl
cmp byte [rcx], ah
cmp byte [r15 + r8], 0xa1
add rax, 0x2178333d
iretd
xor byte [rdi + 0x43], dl
cmp eax, 0x5ecf215f
enter 0x5e82, 0x67
cmp eax, 0x2f3a0647
lodsb al, byte fs:[rsi]
js 0x40428e
cmp eax, 0x3def9087
adc ch, byte [rdi]
in al, 9
or dword [edx + 7], ecx
not dword ds:[rax + 0x2205e891]
out 0xcc, eax
or edi, dword [rcx]
adc bh, byte [rbp + 0x46573e5e]
push 0x27
and eax, edi
movabs byte [0xbd9ea46431c68f3e], al
nop
xchg eax, ecx
jmp 0xffffffff87ff820a
push rsp
adc ebx, dword [rax - 0xc]
xor eax, 0xa342473f
movabs al, byte [0x2f09e424f3f8b41]
movabs al, byte [0xf09e42d44c42af3f]
not esi
add al, 0x30
loopne 0x4042fc
movd mm5, dword [rbx + rdx + 0x260783b2]
push rsp
wait
scasd eax, dword [rdi]
nop
pop rsi
call 0x718155a5
mov ss, word [rdi + r8]
cmp eax, dword cs:[rcx + 0x58]
int1
sahf
lahf
sub byte [rbx], dh
mov word [rcx - 0x79], es
add bh, byte [rcx]
jb 0x40435f
xchg eax, esp
adc eax, 0x90421801
mov bl, 0x9e
je 0x4043ea
cmpsd dword [rsi], dword ptr [rdi]
and byte [rsi], cl
scasb al, byte [rdi]
ror byte [rbx], cl
jns 0x404402
jo 0x4043d4
mov ah, 0x44
mov eax, 0xd4814742
or edi, dword [rcx - 0x1c]
or eax, 0x9b0e743
jp 0x4043c9
mov r15b, 0x3b
jb 0x404423
mov ebx, 0x9b36772e
jo 0x4043d9
iretd
js 0x4043da
mov ah, 0x43
mov bh, 0x7e
pop rsp
and eax, 0x20e4f217
rol dword [rbx - 0x5f], cl
cmp r8d, ecx
fnstenv [rbx + 0x1284d744]
outsd dx, dword [rsi]
test byte [rax + rsi*2 - 0x33], al
test dword [rsp + rax], edi
pop rsi
mov dl, 0x10
popfq
in al, 0x59
cmp al, 0x32
mov edi, 0xf86f44be
in al, 0x19
clc
xchg dword [rdx], r11d
and eax, 0x3a90452d
add dword [rip - 0x78ba9d99], 0x2f02790b
movabs eax, dword [0xc6790bc53ee20f45]
rol byte [rbp - 0x79], 1
or dl, byte [rbp + 0xd]
xor ecx, 0xaecf9e42
push rbp
iretd
adc esi, dword [rdx - 0x7c]
jp 0x404487
xchg eax, edi
push rsi
mov es, word [rsi + rcx*2 + 0x2e4691c8]
cmp al, 0xb7
pop qword [rdx - 0x62]
ror dword [rbx], -0x24
cmc
sahf
hlt
and al, byte [rdi + 0x5f]
push -0x7cd4b8b6
pop rsi
test byte [r15 - 0x69], r8b
cmc
sahf
jl 0x40443c
mov byte [r15], r13b
std
sbb dword [r13 + 0x7ff2790], r15d
pop rdi
sbb al, 0x48
in al, 0x19
in al, 0x36
sub al, 0x46
movzx rbp, word [rbx]
cmp dword [rcx + 0x48b62f27], ecx
test eax, 0x72720c8
ret 0xd848
adc ebp, edx
and dword [rcx], edi
cmp edi, ebp
adc eax, 0x7a132449
adc edi, 0xd0ef4954
or dword [rdx + rdi*2], ebp
mov cs, word [rcx - 0x59]
mov esp, 0x42f44849
sahf
xchg eax, ecx
ror byte es:[rcx - 1], cl
test al, 0x13
fild word [rsi - 0x44]
nop
out dx, eax
xor byte [rdx + 0x6c], cl
sbb al, 0xe4
in al, 0x19
pop rdi
jmp 0x4044e7
fcmovbe st(0), st(7)
pop rax
int1
sahf
test dword [rdi + 0x22], edx
push r15
mov word [rbx], ss
cmp ecx, dword [rbx + 0x3f]
pop rsp
jg 0x4044d3
or ecx, dword [rbx + rcx*2 - 0x68b43291]
xor al, ah
dec qword [rsp + rcx*2 - 0x29]
sub al, 0x9e
mov esp, 0x4c736890
xor dword [rcx + 0x3f], ebp
xor byte [rax], dh
int3
leave
jo 0x40456a
in al, 0xe4
or dword [rbx + rdi*8 + 0x4aec874c], edi
sub esp, dword [rax]
sbb dword [rsp + rbx + 0x2e594d11], -0x5c
in al, 0x67
pop r12
pop rax
movsd dword [rdi], dword ptr [rsi]
xlatb
xchg eax, ebp
mov dword [rsi + 0x60], 0x3026c07
pop rsi
cmp cl, byte [rsi + 0x57]
mov edx, dword [rdi]
and byte [rbx + 0x21421c9c], al
xlatb
pushfq
adc byte [rdi], ch
in al, 0x2a
xor al, byte [rcx]
lahf
and edi, dword [rbp + 0x3d84eac0]
pop r15
mov cs, word [rdi + 8]
in al, 0x59
pop rsi
pop rsi
mov edx, 0x3c9c1f4f
test eax, 0xe74fec17
jl 0x4045a2
pop r14
enter -0x7c6d, 2
push rax
movabs al, byte [0xef8b027027506862]
enter -0x7efe, 0x4e
enter 0x61ef, -0x73
push rax
out dx, eax
movsb byte [rdi], byte ptr [rsi]
adc ecx, dword [rax + 0x70]
rcl byte [rax + 0x47], 3
push rcx
ja 0x404537
mov byte [rdi], dl
push 0x2e
push rcx
xor al, byte [rdx]
popfq
ja 0x4045d6
fsub dword [rbp - 0x76c37a1f]
push rcx
sub ebx, dword [rbp + 0x11]
push rdx
cmp al, 0xeb
test dword [rax + rsi*4], edi
and cl, byte [rbx]
xchg byte [rip + 0x6720e40b], cl
iretd
pop rbp
push rdx
js 0x40452a
shr dword [rax + 0x52fdef52], -0x51
xor al, 0x2f
adc byte [rdx + 0x21], bh
push rbx
push rbx
mov edi, 0xe41c539c
in al, 0x19
outsd dx, dword [rsi]
mov byte [rbx], dh
pop rsi
in al, 0x53
cmp dword [rax - 0x7d], ecx
pushfq
movsxd rax, dword cs:[rdi + 0x38]
push rsp
or ebp, esp
test dword [rcx + rbx*8], edi
cmp edx, dword [rax - 0x6f6458ac]
and edx, eax
loop 0x404631
mov edi, 0x2fff1b68
add al, 2
jo 0x4045ee
sbb edx, dword [rbp - 0x61]
test al, ah
pop rax
push rbp
pushfq
mov edx, dword [rbp + 2]
sub dword [rsi + 0x60], ebx
mov r9b, 0x55
call 0xfffffffff6ac6285
mov r12b, 0x5d
cmp edx, dword [rsi - 0x62]
mov ebp, 0xb373190
outsb dx, byte [rsi]
push rsi
call 0xfffffffff1592a5e
lodsb al, byte [rsi]
push rsi
xlatb
js 0x404657
pop rsi
enter 0x26c1, -0x17
sbb bl, byte [rip - 0x37a174a9]
xchg eax, ebx
jle 0x404687
push rbx
push rdi
cmpsd dword [rsi], dword ptr [rdi]
jp 0x4045b0
jo 0x404633
xchg eax, ecx
push rdi
xchg eax, edi
fst dword [rdi - 0x5c]
jp 0x40465a
iretd
out dx, ax
push rdi
ja 0x404662
movsxd rax, ebp
or dword [rbx], ebx
pop rax
push rdi
add dword [rdi], ebp
and al, 0x7a
push rax
pop rax
cmp dword [rdi + 0x58], edi
sub ecx, dword [rsi + 0x60]
add byte [rdi - 0x1ba8a755], ah
pop rax
je 0x404660
hlt
pop rax
pop rdi
xchg eax, edx
pop rdi
in al, 9
and dword [rcx - 0x39], ebx
adc al, byte [rcx + rcx*2 + 0x59]
adc byte [rsi + 0x20], cl
add dword [rdi + 0x43c7599c], ebp
jb 0x40467b
mov edx, 0x10a76f59
test byte [rdx - 0x3a], 0x82
pop rdx
jg 0x404669
pop rdx
out dx, eax
movsxd rdx, esp
or edi, dword [rcx - 0xe]
push rdi
jae 0x4046eb
mov bh, 0x96
enter 0x7813, 0x21
xchg eax, esp
pop rdx
push rdi
test byte [rbx + 0x17], 0xf2
sub al, 0x5e
rcr dword [rdx + 0x57], 0x44
and eax, 0xe4a745ef
movabs eax, dword [0x4275275af61a8f5a]
mov edi, 0x5b170c50
outsd dx, dword [rsi]
sbb dl, byte [rdi]
sbb byte [rax + rdx*4 - 0x40a4bdc3], bh
xchg dl, ch
test dword [rcx + rax*4], edi
pop rbx
pop rdi
mov dl, 0x5b
adc byte [rsi - 0x38], cl
mov cl, 0x37
jne 0x40473c
fistp word [rbx + 0x37]
test dword [rsp + rdx + 0x375bf22f], ecx
frstor dword [rbx - 0x3b]
or ebp, esp
sbb eax, 0x5c352f5c
movsb byte [rdi], byte ptr [rsi]
in al, 0xc8
xchg eax, ecx
sbb eax, dword [rsi + 4]
mov byte [rdi + rbp + 0x4e], bl
and byte [rcx], al
rcr byte [rdi + rsi*8 - 8], 0x5c
xor ebx, dword [rsi - 0x38]
xchg eax, ebx
out dx, eax
push cx
pop rbp
enter 0x5e13, -0x38
push rbx
lea ebx, [rbp - 0x39]
mul byte [rax]
pop rsi
enter 0x5e33, -0x58
pop rbp
push rdi
retf -0x36b6
pop rbp
jo 0x4046ec
adc byte cs:[rdi], al
not byte [rdi]
sub byte [rdx + rsi*8], al
test byte fs:[rdi + 0x25e2442], al
mov ebp, 0x5e4cea40
outsd dx, dword [rsi]
jp 0x404794
test dword [rcx + rbp*8], edi
add al, 0xa3
pop rsi
out dx, eax
movsb byte [rdi], byte ptr [rsi]
cmp edx, dword [rsi]
xor al, ah
rcr byte [rsi - 0x31], cl
neg byte [rsi - 1]
mov ebp, 0x3305e8c0
pop rdi
not dword [rdi + 0x5f]
sahf
int1
sahf
cmpsd dword [rsi], dword ptr [rdi]
mov dword [rbx - 0x5e], ecx
pop rdi
lahf
add al, 0x3c
in al, 8
cmc
ficomp dword [rdi - 0x21]
or byte [rbp - 0x1e], bl
add al, 0xf2
and ebp, dword fs:[rip + 0x4604960]
enter 0x3fb1, 0x54
pop rdi
movabs al, byte [0xdd70e48752050f60]
jmp rax
test dword [rcx], edi
or al, 0x61
xchg byte [rdx + 0x4a], ah
adc dword [rbp + 0x27], 0x61664790
and al, 0x38
xchg eax, esp
mov edi, 0xc8e4c77b
test eax, ebp
adc dh, byte [rdi + 0x120191b]
cmp ah, byte [rbp + 0x41]
int3
mov al, 9
movsb byte [rdi], byte ptr [rsi]
std
ja 0x40477a
or edi, dword [rcx + 0x52]
xchg dword [rbx], ebp
iretd
fstp qword [rsi + rax*8 + 0xb]
jns 0x404789
jp 0x40482b
fist word [rdx + 0x5762ce46]
jns 0x4047a3
or edi, dword [rcx + 0x58]
movsxd rax, dword [rsi]
movsxd rdx, edi
sbb al, 0x3b
mov edi, 0x20096ffc
movsxd rsi, dword [rdx + 0x74]
jae 0x404858
jne 0x40484c
pop di
pop rdi
push r10
imul edi, dword [rdi - 0x5f], -0x10
pop rdi
push r11
je 0x4047a4
jb 0x404860
imul ebx, dword [edx], 0xf77b7b06
jg 0x404863
je 0x404873
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40482f
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or esi, edi
neg bl
jg 0x404890
outsd dx, dword [rsi]
jb 0x404892
pop rdi
jne 0x40489b
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x404894
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xb7ff3538
mov edi, 0x665f24c0
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x40489f
outsb dx, byte gs:[rsi]
je 0x4048b6
jns 0x40482c
mov esi, 0xa690add
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x404885
or eax, 0x37584ed
pop rdi
sub dword [rdx + rbp + 0x6d], esi
adc ch, byte [rbx - 1]
fild qword [rsi - 0x61]
jo 0x4048d6
pop rdx
push rbx
je 0x4048b7
xor dword [rcx], edi
jo 0x4048d8
movsxd rsp, dword gs:[rbp + 0x77]
pushfq
xor byte [rbp - 0x50], ch
outsd dx, dword [rsi]
pop rbx
jp 0x4048e9
movabs byte [0xfb73331a74637572], al
pop rcx
out 0x6e, eax
js 0x4048ec
jne 0x4048cc
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0xeddeed0f
insb byte [rdi], dx
or al, 0x38
push 0x69
outsd dx, dword [rsi]
cmp rbx, r11
out dx, al
mov bh, 0xad
or al, 0x1a
jne 0x4048ed
js 0x404923
xor r14b, byte [rcx]
mov dh, 0x65
test ax, 0x1b6c
in al, dx
mov edi, 0x6b417a6b
pop rdi
jo 0x40492c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
jne 0x40484a
cmp eax, 0x11190983
xor dword [rax + 0xf6d9b5f], ebx
lodsb al, byte [rsi]
adc dh, byte [eax]
clc
jo 0x404918
pop rbp
fcmovu st(0), st(1)
xchg bl, bl
adc dh, byte [rcx]
xor eax, 0xa5786543
retf -0x24f8
mov dh, 0xa5
xor eax, 0x45b66153
fst qword [rsi + rsi*8]
in eax, dx
test al, 0x73
jne 0x40495e
jae 0x40491d
cmp byte [rdi + 0x69], bl
sub esi, dword [rbx + rbp + 0x7a696dec]
or al, byte [rcx]
inc dword [rbp + 0x205856df]
movsd dword [rdi], dword ptr [rsi]
push r11
neg byte [rdx + 0x3b]
test dword [rbp + 0x35244a69], esi
movsd dword [rdi], dword ptr [rsi]
test eax, 0xc2b6b616
xchg byte [rip + 0x64126e61], cl
or bh, byte [rbx - 0x78de3d70]
ja 0x4049a1
sbb al, 0x64
push rdi
fdiv dword [rsi + 0x34]
adc dword [eax + 0x7b], esi
xchg byte [rax + 0x5b], dh
loop 0x4049b5
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
movabs eax, dword [0x101362915127ca90]
enter 0x5804, 0x27
test dword gs:[rbp + 0x774fb640], eax
scasb al, byte [rdi]
mov al, 0x6d
jbe 0x4049a0
or edi, dword es:[rcx + 0x4a]
xor al, 0x32
nop
mov ch, 0x4b
outsb dx, byte [rsi]
jmp 0x40490e
retf 0x1ade
outsb dx, byte [rsi]
adc dword [rsi], ebx
sub dword [rdi + 0x75], ebp
jae 0x4049a9
movsd dword [rdi], dword ptr fs:[rsi]
insd dword [rdi], dx
wait
jo 0x40499d
jbe 0x404a03
jbe 0x4049e1
push rbp
sub al, cl
xchg eax, ebp
xor al, 0x66
sub eax, 0x11b6556a
in al, dx
xor byte [rax], ch
fldenv [rbp + rcx*2 - 0x27]
mov ch, 0xcd
adc eax, 0x2837f570
pop rdx
scasb al, byte [rdi]
xor dword [rdx], edi
add eax, 0x322b6c17
add rsi, qword [r11]
xchg eax, esp
jb 0x4049a3
hlt
sub esp, 0x2731a6c1
je 0x404a3a
jo 0x4049e8
in al, dx
xchg eax, ebp
pop rdx
xchg eax, ebx
xor ch, al
movsb byte [rdi], byte ptr [rsi]
je 0x404983
xchg eax, ebp
movabs rax, qword [0xee654e74661be723]
push rsp
jb 0x404a04
and eax, 0x96406170
add cl, bl
outsb dx, byte [rsi]
cdq
movabs dword [0xc94e286434c8766c], eax
test eax, 0x6e246dac
sbb byte [rbx + rsi*2 + 0x70], dh
test dword [rsi - 0x48caecdc], esp
xchg byte gs:[rbx], dh
cwde
pop rsp
sub dword [rsi], esi
adc ch, byte [rsi + 0x6978c2b2]
jp 0x404a84
cmp esi, dword [rsi - 0x20]
js 0x4049f5
cmp byte [rcx + 0x5f01b174], ah
push rbx
mov esp, 0x250e1a05
mov ebp, 0x332264a2
xor byte [rsi + 0x2b], al
stc
or eax, 0xfc53479
scasb al, byte [rdi]
sbb eax, dword [rbx + 0x6944bbd6]
and byte [rdx + 0xd], bh
wait
sub dword [rbx + 0x6a], 0x3d646756
sub ecx, dword [rdi]
jo 0x404ac5
sti
xor byte [rcx + 0x69], ch
xor r14b, byte [rbx + 0x5f]
out dx, eax
mov dh, 0xd6
xchg eax, esi
pop rdi
xchg ah, al
js 0x404ab1
sbb bl, byte [rdi + 0x46]
push rdx
xchg eax, r11d
movabs byte [0xa444e455f454dfd], al
sbb byte [rbx], cl
mul byte [r8 - 0x35]
push rbp
and byte [rax + 0x44], cl
push rdx
xor byte [rax - 0x41], r15b
push rbx
cmp r10d, dword [r9 + rax*2 + 0x42]
sub r15b, r8b
sbb eax, 0x649b0b74
adc byte [rbp - 0x5fbb7c8e], ah
sal dword [rbx + 0x454e59db], 0x49
loopne 0x404ada
jbe 0x404a7c
or rax, 0x49b9ef6e
push rbx
add eax, dword [rbp + 0x45]
out 0xc7, al
push 0x18f907b1
push r10
xor bl, byte fs:[rdi + 0x56]
and al, 0x85
out dx, al
pop rdi
jb 0x404ade
insd dword [rdi], dx
cmp byte [rcx + r13*2 + 0x6a], r12b
imul edx, ebp, 0x61
stc
insd dword [rdi], dx
sub esi, dword [rsi + rax*4 + 0x64]
leave
cmp byte [rbx + 2], dl
cmp dh, byte [rcx]
add al, 0xec
fild dword [rdx + 0xa5f4dc4]
adc eax, 0x5f4b3b6d
pop rbx
int 0xa5
and al, 0xa
in al, dx
test edi, ebx
jnp 0x404b3e
insb byte [rdi], dx
jp 0x404b67
push rax
movsxd rbp, dword [r8]
je 0x404b35
bnd jae 0x404ab9
fistp qword [rdx + 0x25692869]
xor r8b, byte [rbp + 0x76]
add byte [rcx - 0x44804fcd], cl
cmp eax, 0x6e755f78
fsubr qword [rdx + 0x40]
pop r15
xor ch, byte [rsi]
fnstenv [rdx + 0x35016d85]
mov esp, 0x75c28d3b
shl dword [rax], 1
outsb dx, byte [rsi]
fnstcw word [rbx]
ja 0x404b60
cdq
sub dh, byte fs:[rbx + 0x73]
outsd dx, dword [rsi]
ror byte [rax], 0x6b
push r8
push rdx
push rbx
cwde
in eax, dx
xchg eax, ecx
in al, dx
sub al, 0x96
movabs byte [0xdb25a516c20c64b9], al
scasd eax, dword [rdi]
mov edx, 0x27090d77
sbb esp, dword [rcx - 0x3ce23168]
sub esi, dword es:[rcx]
push rax
push rax
cmp al, 0x43
lodsb al, byte [rsi]
xchg eax, esi
or al, 0xf7
je 0x404ba8
xor byte [rdi - 0x13], bl
outsd dx, dword [rsi]
mov ah, 0xcd
xchg byte [rip + 0x624c497c], dh
xor dword [rax], edi
xor ebx, dword [rbx]
adc al, 0x19
jb 0x404be7
shr byte [rax - 0x7b89900c], 0x2d
outsb dx, byte [rsi]
lodsd eax, dword [rsi]
mov ebx, 0x4a50628d
push rbx
xor ebx, dword [rcx + 0x53cf4554]
pop rdi
fist dword [rax + 0x5f3502dd]
xchg eax, ebx
or ch, byte [rsi - 0x1a]
insb byte [rdi], dx
test byte [rcx + 0x4b346030], al
cmp edx, dword [rax - 0x4f]
cdq
scasd eax, dword [rdi]
mov al, 4
call 0xffffffffb771eaf2
insb byte [rdi], dx
xchg eax, ecx
fisttp qword [rdx]
push rbx
xor al, 0x5f
loopne 0x404c0f
xor eax, esi
cmp ecx, dword [rdi + 0x32]
xor edx, dword [rsi]
pop rcx
ja 0x404c45
xor ah, ch
mov eax, 0x4f4964c6
imul r12, qword [r11 + 0x25], -0xb33a8a9
mov esp, 0xe98265ca
xchg eax, esp
add r12b, byte [r11 + 0x6b]
xor al, 0x29
mov r13b, 0x48
sub dword [rcx], esp
xchg eax, ebp
mov ecx, 0x5081c60d
jo 0x404ba1
xor dword [rsp + rsi], ecx
pop rax
or ebx, dword [rcx]
in eax, dx
jns 0x404b94
jb 0x404ba3
xchg eax, edi
ret 0x1761
push rsp
xchg eax, esi
movsq qword [rdi], qword ptr [rsi]
mov ch, 0x7d
insb byte [rdi], dx
cmp eax, 0x77286874
shl dword [rdi + 9], 0x5f
clc
and ecx, 0xffffff88
xor eax, 0x5858a0c8
pop rdi
xor ebp, dword [rsi]
xor al, 0x48
sbb ah, byte [rsp + rcx*8 - 2]
movabs eax, dword [0x927d363618c2310a]
stosd dword [rdi], eax
adc dl, byte [rdx + 0x5232dd34]
nop
push rdx
cld
mov ah, 0x8e
movsxd rcx, dword [rdx - 0x46]
jno 0x404cbe
jl 0x404cc2
test byte [rbx - 0x78], cl
outsd dx, dword [rsi]
add dh, byte [rsi + rdi]
adc ebp, edx
ror al, cl
fsub qword [rdx]
lahf
insd dword [rdi], dx
xor eax, 0xe642ee94
imul ecx, dword [rsi - 0x6d8c5b97], 0x8e1ecc32
sbb eax, 0xec847fb4
fstp st(4)
xchg byte [r11 + 0x49], sil
mov dh, 0x4e
and al, 0xb2
push rsi
sub bh, ch
mov dh, 0x98
xor al, byte [rbx + 0x370e6130]
mov eax, 0xa16f796f
xor bh, dl
jmp 0x404d0a
shr byte es:[rdx + rdx + 0x73438f1e], 1
or cl, dl
pop r10
or eax, 0x30949d3e
add ch, byte [rcx]
shr byte [rbx - 0x7973fc67], 1
cmp dword [rax + 0x5a41d656], ecx
jbe 0x404d0d
jo 0x404c85
sub dh, byte [rbx]
xor al, 0x90
adc cl, byte [rsi + 0x66e94613]
imul edi, dword [rdx], 0xb55cd5a1
outsb dx, byte [rsi]
js 0x404d13
retf
pop rdx
scasb al, byte [rdi]
xor al, 0x6b
cdq
jp 0x404ccf
test dword [rbx + 0x65], esp
int3
ficom dword [rdx + 0x54]
pop rsp
je 0x404d17
xchg byte [rdx], dl
fdiv qword [rbx]
mov esi, 0x7b26ca38
sbb al, 0x4a
popfq
call 0xffffffffbc747a94
outsd dx, dword [rsi]
movabs byte [0x6575715fc6298739], al
jne 0x404cd1
xchg byte [rcx + 0x6f], ah
loopne 0x404cde
fiadd word [rcx + 0xe]
add al, 0x5c
push rbx
fisub dword [rcx + 0x7c]
mov bh, 0x5f
xchg eax, esp
sub ah, bl
int 0x62
movsxd rbp, dword [rsi - 0x7d]
and ah, ah
imul esp, dword [rax], 0x2d31d9ac
xor eax, ebx
mov dword gs:[rip + 0x4a027269], edx
and al, byte [rip + 0xe418ac2]
mov dl, 6
fst dword [rsi + 0x63324]
loope 0x404d7c
xor edx, dword [rdx]
push 0x70153641
xchg dword [rax - 0x414ffb98], eax
push rdx
or dword [rax + rdx*4], ecx
loopne 0x404d7b
pop rcx
out 0x37, eax
cmp dword [rdi + 0x67], ecx
movsb byte [rdi], byte ptr [rsi]
fisttp dword [rip + 0x306e244a]
add cl, 0x84
mov byte [rax + rsi*2 - 0x17], 0xf9
str word [rax]
adc esi, dword [eax - 0x3f]
pop rbx
mov ebx, 0x997073b0
xor eax, 0xc6731409
in al, 0xb6
xor dword [rsi], eax
jo 0x404d27
insd dword [rdi], dx
pop rdi
pop rax
retf
cmp esp, dword [rdx + 0x63]
insb byte [rdi], dx
mov bl, byte [r15 + 3]
and byte [rcx + 0x34c290cf], al
movabs eax, dword [0x6206448834233b6e]
int3
add qword [rdx + 0x5db6d311], rdx
pop rbx
add rax, 0x1e6dd034
fcmovb st(0), st(3)
xchg eax, edx
movabs dword [0x290ef64a86d26d0], eax
cwde
mov eax, cs
add dh, byte [rdx]
cmp dh, byte [rcx + rsi*4 + 0x6f5e4f86]
js 0x404e3a
and dword [rax - 0x14bb9235], esi
pop rbx
or dword [rbx], edx
jne 0x404dac
push rdi
jbe 0x404e3a
and byte [rbx - 0x246eec5], ah
push r14
or eax, 0x3dd91812
iretd
sub edx, dword [rax + 0x44c72017]
xor dl, byte [rdx + 0x6a164db1]
xor dword [rsi - 0x39ed23bd], esp
in al, dx
enter 0x4a93, -0x77
out 0x54, al
adc ah, byte [rbx + 0x48cef72c]
fld xword [rbp + 0x18]
insb byte [rdi], dx
jno 0x404e48
and al, 0x93
shl ecx, 1
xor al, 0x67
imul esi, dword [rdi], 0x62306351
xchg dword [rsi - 0x70], ebp
sal byte [rdx + 0x38708321], 0x1b
test byte [rcx - 0x7c], bl
mov ebx, 0xb085196d
or eax, 0x41af0981
adc al, 0xa0
or eax, 0x6e5ecbee
add al, byte [rbp + 0x71]
sbb byte es:[rsi + rdx*8], bl
pop rsp
sbb byte [rdi], ah
and bl, byte [rdi - 0x51]
imul eax, dword [rdx + rdx], -0x71
jge 0x404dee
xor dh, byte [rdx - 0x2a]
cmp ebp, dword [rax + rsi*2]
add esi, dword [rdx + rsi]
xchg eax, ecx
ror byte [rdx + 0x58], 0x7f
xor byte [rsi + rax*2 + 0x49327342], al
mov edi, 0x8b9a3806
cmp dword [rbp + 0x1a], esp
test al, 0xb0
pop rbp
jno 0x404df5
xor dword [rdx + 0x49], esi
mov word [rcx + 0x445e302d], es
pop rdx
jbe 0x404eef
or al, 0x81
xchg eax, ecx
push rsi
pop rcx
mov edx, 0x322a361b
or byte [rbp + 0x10e34231], dl
add edx, dword [rsi]
fiadd dword [rdi - 0x36]
outsb dx, byte [rsi]
xor eax, 0x1da5409d
test byte [rdx + 0x76], cl
jnp 0x404e45
mov es, word [rcx - 0x45]
mov esp, 0xe9d7373
jno 0x404ecc
and byte [rbp - 0x5b], bl
xor al, byte [rbx]
adc byte [rcx + 9], 0x40
cli
shr byte [rdx + 0x16], 0x5c
jrcxz 0x404ed5
shr byte [rdx], cl
test eax, 0x1703132
mul byte [rbx]
test eax, 0x506c645f
jbe 0x404e84
xor eax, 0x3b6c6f73
add eax, 0x35b276c2
mov cs, word [rbp - 0x3f52fb4]
xchg eax, edx
push rdi
popfq
sub ah, byte [rcx]
add dword [rbx + rbx], 0xcf25c1a8
xlatb
and esi, dword [rdx + rsi]
pop rdi
add eax, 0x4cd42f09
pop rdi
cli
jo 0x404f4d
mov esp, 0x86121a66
adc esi, edx
push 0x4f
movsxd rsi, dword [rsi]
add byte [rbx - 0x3ecad278], al
sbb rdi, rbp
add r14b, r8b
xor eax, 0xbdcea395
xor ebp, esp
test al, 0x91
outsb dx, byte [rsi]
fst qword [rax - 0x78]
idiv dword [rcx]
xor eax, 0x29494241
xor eax, dword cs:[rsi + rcx + 0xb2592a4]
call 0xffffffffa3926254
movsb byte [rdi], byte ptr [rsi]
insd dword [rdi], dx
movsxd rdx, dword [rbp + 0x16]
add dword [rbx + 0x4d], ecx
pop rsi
cmp byte [rsi + 0x338c4b0], cl
jae 0x404ed2
xor al, 0x49
push rsp
adc edx, dword [rdx + 0x4a]
jo 0x404f1a
loopne 0x404faa
add cl, byte fs:[rcx]
sbb dword [rbx + 0x7d314d64], eax
lodsb al, byte [rsi]
push rdx
ret 0x6951
call 0xffffffffc1c1a97d
sbb dword [rcx + 0x71309c67], edx
ja 0x404f25
add dword [rax], edi
mov ah, 0x4a
pop rdx
or qword [r15], rax
adc eax, 0x484ab02
test ebp, edx
and eax, 0x95c7652
sub al, 0x39
cqo
xor al, dh
leave
outsb dx, byte [rsi]
fisttp qword [rsi - 0x5d]
xchg eax, ebx
pop rax
and al, 0xff
iretq
mov dl, 0x58
xchg eax, esi
sub byte [rsi + 0xf6a589], bh
and dword [rbx + rsi*2 - 0xf], esp
cmovb ebp, dword [rdx]
cdq
lea esp, [rsi + rbp*2 + 0x61]
mov edi, ebp
xlatb
xor ah, byte [rdx + 0x48]
cmp al, 0xdf
push rbx
sub byte [rdx + rcx*4 + 0x122d49d1], cl
insd dword [rdi], dx
nop
adc byte [rbx + 0x60], al
int3
mov byte [rcx], cl
mov cl, 0x53
and bl, byte [rbx]
movsd dword [rdi], dword ptr [rsi]
sbb eax, dword [rdx]
lodsb al, byte [rsi]
push rbx
jle 0x404fe6
insb byte [rdi], dx
and ah, byte [rax]
add edx, dword [rsi + 0x58ed340e]
mov ch, 0xc5
or eax, 0x47465353
pop rcx
mov esp, 0x548905ad
xchg eax, esp
ret 0x3049
scasb al, byte [rdi]
nop
cmp byte [rbx], dh
pop rdi
mov byte [rbx - 0x5b5a78a9], cl
xor dh, cl
pop rsi
shl byte [rbx + 0xe030d25], 0x30
or al, 0x22
movabs byte [0x53fea42b04858b7c], al
rol ah, cl
and spl, byte [rsi + 0x62]
imul ebx, dword [rcx], 0x334317f0
mov esp, 0xd6656b61
hlt
ror dword [rbx], 0x10
popfq
adc dword [rbp - 0x10], edi
push rdx
mov cl, 0x92
or byte [rcx + 0xe], dl
add al, 0x1c
xor dh, byte [rdx - 0x6a]
xor eax, 0x98024212
add bh, byte [rbx - 0x50]
xor bl, dh
jnp 0x405069
movsd dword [rdi], dword ptr [rsi]
loop 0x405015
sahf
push rbp
and cl, byte [rcx + 0x62a37a94]
je 0x4050cc
neg byte [rbp + 0x5f]
xor ch, byte [rsi - 0x3d]
sti
cmp byte [rbx], dl
push rsp
ja 0x4050a0
cmp al, 0xbe
add cl, al
and eax, dword [rcx]
mov cl, 0x69
imul esp, dword [rdx], 0x4eb28b09
pop rdx
xor byte [rax], al
push rdx
adc al, 0x6d
and ecx, dword fs:[rsi - 0x76]
xchg eax, esp
xor byte [rsi], bh
xor dword [rax], ebx
and cl, ah
adc byte [rdx], cl
or dword [rcx + rdi*4], 0x6964ac48
sub byte [rbx + 0x168a4ac0], 0xc1
and dword [rdi - 0x33], 0x4e
movsxd rbp, dword [rsp + rbx*4 - 0x1a]
outsb dx, byte [rsi]
movsb byte [rdi], byte ptr [rsi]
add byte [rcx + 0x76e677b6], al
pop rsp
sub ah, byte [rax - 0x3dbb0da0]
mov byte [rdx + 0x42], dl
add ch, byte [rbp + 0x24]
and al, byte [rcx]
rcr byte [rcx + 0x5832e931], cl
pop rcx
int 0x65
div byte [rbx]
leave
push rsi
or dword [rbp + rbx*2 + 0x2e81644e], esi
jp 0x40506f
cmp byte [rdx - 0x6c], ch
je 0x4050f4
and byte [rdx], dl
movabs dword [0x92b5399504a6bd80], eax
rcl ebx, -0x38
jb 0x405156
mov cl, 0x1a
shl byte [rbp + 0x60], cl
xor al, byte [rax + rbp*4 + 0x58ba0908]
retf 0x6473
test eax, 0x598bd461
xchg eax, ebx
fild dword [rsp + rbp*2]
iretd
mov ecx, 0xa19a45
xor al, cl
sbb esp, dword [rax - 0x1a]
fmul dword [rdi + 0x67]
movsxd rax, r11d
sbb eax, 0xffe6f6ea
movsxd rax, dword [rbp - 0x237356af]
movsxd rax, dword [rcx + rbx*2 + 0xe]
xor byte [rdx - 0x69], dh
stosb byte [rdi], al
adc byte [r14], r8b
mov word [rdi], es
ror byte [rdx - 0x5a], cl
outsb dx, byte [rsi]
in al, dx
adc dl, ah
or ah, dh
stosd dword [rdi], eax
retf 0x38fa
sub al, 0x9d
fiadd word [rbx + 3]
xchg eax, ebx
cwde
sub al, 0x18
xor esi, dword fs:[rax]
sub byte [rip - 0x5337fcfa], al
call 0xfffffffff0260178
insd dword [rdi], dx
mov ch, 0x2d
or eax, 0x37720a52
adc ebp, dword fs:[rbp + 0x776a5d6d]
sub al, 0x78
or eax, 0x5b0578b7
nop
outsb dx, byte [rsi]
or al, 0x43
and ebp, edx
insb byte [rdi], dx
push rsp
insb byte [rdi], dx
adc esi, edx
mov eax, dword [rdi - 0x23db3a05]
xchg eax, edx
mov esp, 0x210e94ca
mov al, 0x94
jle 0x405179
xchg dword [rcx], eax
cmpsb byte [rsi], byte ptr [rdi]
xor ch, byte [rax]
cmp byte [rsi + 0x27], bl
mov ah, 0x10
mov dl, 0xaa
imul ebx, dword fs:[rdx], 0x2e5ecad6
mov word [rcx + 0x18], ds
xchg eax, edx
loopne 0x4051cf
ror dword [rbx + 0x1b], cl
add rax, -0x5670f5be
movsb byte [rdi], byte ptr [rsi]
pop rax
rcl bpl, cl
and al, byte [rdx]
shl byte [rdx], 1
lodsb al, byte [rsi]
or byte [r8 + r9 + 0x49], sil
stosb byte [rdi], al
jno 0x405227
push rdx
popfq
movabs al, byte [0x64064f4937cbae95]
insd dword [rdi], dx
or al, 0x2c
jnp 0x40516a
xchg eax, esi
std
insd dword [rdi], dx
adc al, 0x63
sbb dh, byte [rsi - 0x15]
sub ebp, dword [rcx]
add eax, 0xc2d0af42
cmp dword [rbx + 0x42], edx
mov esi, 0x4230de32
test al, 0x44
and eax, dword [rax + rbx*2 + 0x4ae38f65]
sbb dword [rax + rdx*4], esi
imul edi, dword [rbx], 0x158a0cab
sub eax, 0xcac33ca6
loopne 0x40521f
call 0x644ab35e
sub ecx, dword [rax + 0x84321d7]
sbb al, 0xe4
fnstenv [rax]
ret
mov ebp, dword [rdi + 0x34]
mov r15b, 0x92
add byte [rdx - 0x5b], 0xc3
and ax, 0xa042
movabs byte [0x6c23320733215cf0], al
lodsb al, byte [rsi]
pop rdx
or dl, byte [rsi]
add byte [rax], bpl
outsb dx, byte [rsi]
xchg dword [rsi + 0x4e8c582a], edx
xor eax, 0xb82463
or dword [rbx], ecx
xor al, 7
cmp dword [rax - 0x7e], ecx
add dword [rdx + 8], edx
xor esi, ecx
or byte [rdx + rdi*2], al
xor dword [rcx], eax
pop rax
test al, 0x8c
test al, 0x44
add al, byte [rcx + 0x36a928ce]
mov ch, 0x16
xor byte [rax], cl
sbb dword [rcx + 0x17], ebp
or al, 0x66
jo 0x405285
jbe 0x4052fc
ja 0x405211
loopne 0x40528b
or edx, dword [rbp - 0x257ce65b]
fbld tbyte [rbp + 0x47696636]
jne 0x4052f9
sbb byte [rax], bl
push -0x5a
xor esp, eax
and al, 0x13
sub dword [rcx - 0x6ac257bc], eax
mov r14d, dword [r8 - 0x2a6af5bf]
and al, byte [rbx - 0x721fa4b8]
ret 0xad82
pop rdx
sbb byte [rax + 0x2ae3dcca], dh
and al, 0xa5
or al, 0x7e
xchg eax, ebp
popfq
retf
scasd eax, dword [rdi]
fmul dword [rbx]
xchg eax, esi
mov esp, 0x82c86135
push rax
mov ebx, 0x58b0838f
push rsi
mov edx, 0x560b2a4d
sub dh, 0x23
push rbx
and eax, 0x523485d5
add al, byte [rdx + 0xa69b750]
add byte [rdx + 0x25], dl
mov word [rbp + 0x19], es
hlt
and al, 0x93
jle 0x40527c
mov eax, fs
test dword [rax + 0x15], edx
pop rbp
test al, 0x84
xor dword [rcx + 5], edi
xor eax, 0x1481210d
adc ch, 0x70
mov es, word [rbp + 2]
add eax, 0x2557c08a
nop
adc dh, bh
xor dword [rbx], eax
sbb esp, dword [rax + 0x10]
xor al, 0x76
mov ebp, 0x2f106488
and byte [rip - 0x5a9cbe14], cl
push rbx
jp 0x405320
loop 0x405308
sar byte [rsi], 0x36
fsubr dword [rax + 0x72735849]
mov dh, 0x66
push rcx
neg byte [rdi - 0x40]
mov al, 0x72
and r11d, 5
ret
jne 0x40536e
jne 0x405361
adc dword [rax], esi
rol dword [rdi + 0x4f51fa45], 1
cmp dword [rax], -0x5c
and byte [rdx + 0x640e44b], dl
adc dword [rdx], eax
xor byte ds:[rax - 0x1ecf37ff], dh
xor cl, ch
enter 0x2297, -0x74
xchg eax, esp
add ah, al
push rsi
sbb dword [rcx], ecx
cmp byte [rdx + 0x20b19031], ah
fidiv dword [rbx]
int3
add ecx, dword [rcx]
out 0x34, al
xchg eax, ebx
or dword [rdx + 0x762e9417], 0x848cb75a
call 0xffffffffc9b1bae0
xchg eax, ebp
adc dword [rcx + rbp*2 + 0x68c0254b], eax
test dl, ah
add ecx, edx
test al, 0x14
adc ah, dh
push rax
mov dl, 0xe2
out dx, eax
bnd jo 0x4053cb
add byte [rdx], al
rcr byte [rbp + 0x6d], 1
clc
jb 0x4053be
push rdx
jo 0x405401
insb byte [rdi], dx
mov bl, 0x64
movabs eax, dword [0x824b56e964321084]
mov gs, esi
sbb al, 0x20
adc dword [rcx], ecx
pop rbx
pop rax
add byte cs:[rsi - 0x53], al
adc dword fs:[rax + 2], ecx
cmp al, 0x85
xor byte [rdx], dh
or byte [rdi + rbx*4 - 0x32], dh
add byte [rcx], 0xa3
mov eax, 0xcac49031
add byte [rbp - 0x18], dh
push rdx
cmc
sbb dh, byte [rdx - 0x21]
mov eax, 0x4dcb5651
fisubr dword [rcx]
or dword [rsi - 0x7b], ebp
push rcx
sub al, byte [rsi - 0x53ff6f06]
ret
xor al, 0xfd
and dword [rsp + rdx*4 + 0x21524632], r13d
sub byte [rsi], 0x4e
jae 0x40539d
and dword [r9 + 0x48c7d34d], r9d
and esp, eax
and byte [rsi + 0x65], cl
mov cl, 0
adc edx, 0x54800c72
sub cl, byte [rdx - 0x5f]
pop r11
movabs eax, dword [0xcc1d66383d404641]
and byte [rax + 0x1b], cl
or byte [rbx], al
movabs eax, dword [0x75e717443d6c1198]
or byte [rdx + rbp], dl
scasb al, byte [rdi]
pop rdi
nop
rol byte [rbx], 0x32
jae 0x4054ab
sbb ecx, edx
movabs byte [0x7f260320d0803133], al
pop rbx
cmpsd dword [rsi], dword ptr [rdi]
jp 0x405412
xlatb
fimul word [rdx - 0x33b1fbd6]
cbw
in eax, 0xef
cmp al, 2
sub dword [rsi + 0x331231a9], 0x88302bf9
jo 0x4054df
xchg eax, edi
push -0x27b66fdb
loop 0x4054e7
push 0x412abc15
scasb al, byte [rdi]
test dword [rbx + rcx*8 + 0x20], esp
xchg eax, ecx
xchg ecx, esp
sbb dword [rbx - 0x49d17f4e], esp
imul edx, dword [rbx], 0x31a90ab9
int1
pop r9
mov ecx, 0xba504855
adc al, 0xbe
xchg byte [rdx - 0x58], al
cli
imul eax, dword [rsi + 0x69], 0xb0350968
jmp 0xffffffffc043f51e
xor al, 0xe3
sub al, 0x20
add al, 0xd2
xor dword [rsi - 0x3fa6a5ee], ebp
leave
sub ebp, dword [rdi]
xchg eax, ebp
adc eax, 0x56c82cbb
pop rbx
pop rcx
scasd eax, dword [rdi]
jge 0x40550b
and ch, byte [rax + rbx + 0x630909b1]
test dword [rdx + 0x76], edx
sub byte [rdx + 0x71632c51], dl
mov ah, 0x4c
sbb al, 0x9d
or esi, dword [rbp + 0x5c5955ac]
cmp al, 0xa1
or byte [rcx + 0xa1d4964], 0x96
adc byte [rcx], ch
xchg eax, edx
sbb cl, byte [rbx - 0x1e98fb8]
scasb al, byte [rdi]
insd dword [rdi], dx
adc dword [rax + 0x315b90a1], edx
scasb al, byte [rdi]
xchg eax, ebx
jb 0x405583
pop rsp
sub eax, dword [rsi + 0x52603088]
pop rbp
ret 0x4839
and byte [rbp - 0x69], al
cld
add ah, byte [rcx]
lodsb al, byte [rsi]
sbb dh, ch
sub al, 0x72
rcl byte [rdx], cl
adc esi, edx
xor ah, byte [rax]
add al, 0xc2
push -0x6c5843ea
xchg eax, edx
je 0x405574
xchg eax, ebp
fbstp tbyte [rip - 0x5db5f11e]
and r13b, r15b
sbb r12b, r8b
jmp 0x4054f0
add dword [rax + 0x20360a86], edi
add dword [rax - 0x7c], ebx
xchg eax, ecx
clc
sub eax, 0x39d1902c
leave
mov dl, 0x50
mov esp, gs
add ecx, ecx
pop rcx
xor eax, 0x118f1186
mov dh, 9
or eax, 0xaef90a42
pop rax
push rcx
and bl, byte [rbx - 0x4d]
push rbx
mov qword [r10 + 0x485857e8], rax
mov dl, 0x91
sub dword [rcx - 0x59ca44ee], 0x3c
add dh, byte [rcx - 0x7b86254e]
mov al, 0x32
popfq
mov byte [rdx + 0xa511817], dl
xor ah, byte [rcx - 0x6e]
and byte [rbp + 0x2d512811], al
adc dword [rsi + 0xb16b42d], 0x10
movabs byte [0xe194232ac804c94], al
xchg eax, ebx
int 0x7a
mov bl, 0x2e
xor dword [rcx], edx
or byte [rcx], al
add dl, ah
xchg dword [rcx], edx
xchg eax, edx
call 0xffffffffc0ffc388
pop rdx
leave
adc dword [rdx], edx
scasb al, byte [rdi]
imul ebp, dword [rsp + rdx*4 - 0x1aa23f5b], 0x1255c62
mov ebp, esi
xor al, byte [rax + rbp + 0x72f24655]
enter 0x2056, -0x73
xchg eax, ebp
pop rbx
sbb byte [rbp + 0x48], cl
xchg eax, esp
xor eax, 0xc58422c1
adc dword [rcx], esi
mov al, 0x40
mov byte [rsi + 0xa69748c], ch
mov dword [rbp + 0x44], esp
and ecx, eax
cmp ecx, edx
sub byte [rsi], bl
adc byte [rsi - 0x7d], dh
sbb byte [rsi], 0x81
loop 0x405617
mov al, 0x40
jl 0x405622
add byte [rax], 0xd
js 0x405639
pop rax
add al, 2
xchg eax, ebp
and eax, 0xa240bb5d
xchg eax, ebx
pushfq
xor eax, 0xb21676a3
loop 0x40568c
add byte [rdx + rsi*2], bl
test byte [rdx - 0x7f], dl
sbb al, 0x69
imul edx, dword [rsi - 0x5897f86e], 0xd4fe7869
add al, 0xe7
push rcx
add al, 0x19
add byte [rbx + 0x4bd99158], ah
mov dh, 4
cmp dl, dh
mov word [rdx], es
stosd dword [rdi], eax
add dword [rdx], esi
pop rsp
movsxd rax, dword [rip + 0x34182dd4]
jae 0x4056de
test dl, al
or ah, byte [rsi - 0x67]
mov edx, es
xor al, 0xce
insd dword [rdi], dx
pop rsp
cmp dword [rsi - 0x6c], ecx
or bh, byte [rbx]
js 0x4056b3
mov dh, 0x14
xchg eax, esi
and ah, byte [rcx + 0x11083edd]
test eax, 0x88b2b47d
adc al, dl
mov al, byte [r10]
and dword [rdx + 0xa4401c6], edi
pop rdx
fist dword [r14 - 0x58]
and dh, byte [rax + 0x7766033c]
insb byte [rdi], dx
or dword [rbp + 6], r11d
retf
xor al, 0x26
push rdx
xchg eax, ebp
ret 0x3620
pushfq
mov eax, 0xb81082c8
jbe 0x4056e3
cmp dword [rdx], eax
movabs dword [0xa24b68922e806456], eax
movabs byte fs:[0xa39101e205488424], al
xor ch, byte [rax]
xor al, byte [rbx]
add al, 0x6a
test dword [rbx + 0x25f256b5], edi
add al, bl
imul ebp, dword [rbp + 0x69], 0x12944816
xor eax, 0xb0a91425
jb 0x4056ad
nop
or byte [rbx + 0x72], ch
push rcx
push rax
sub cl, byte [rbx]
add word [rdx + 0x44], sp
leave
add al, 0xf2
retf -0x7076
or dword [rsi + 0x20], edx
push rcx
outsd dx, dword [rsi]
cmp dword [rdx], eax
sbb esp, ebx
xor bl, dil
mov ch, 0x6e
mov al, 0x10
or esp, edx
xor ch, byte [rbx]
adc byte [rdx - 0x38], dl
stc
and eax, 0x1e928c5
fist word [rdi]
mov cl, 0x10
xchg eax, ebx
sub esp, edx
add dl, byte [rdx]
mov ch, byte [rip + 0x4911c84a]
pop rcx
imul esi, dword [rdx], 0xb5012baa
xor dword [rax - 0x3c], esi
and al, 0
movabs eax, dword [0x8a3385582f144b70]
xor dl, bl
push 0x21
sub rax, -0x3ffd6ecf
in al, 0xa
xor cl, byte [rax + rax + 0x2410600c]
and eax, 0x9131c845
sub bl, byte [rcx]
pop rsi
test byte [rbx - 0x2e274cfd], cl
fmul dword [rdx]
add eax, 0x63673efb
sahf
lodsb al, byte [rsi]
ror dword [rbx + 0x32], -0x19
sti
scasd eax, dword [edi]
xor edx, dword [rsi - 0x52]
jrcxz 0x4057b7
adc dword [rdi + 0x50], -0x5c
test eax, 0xce021083
scasb al, byte [rdi]
and eax, 0x2161a7f
js 0x4057e4
insd dword [rdi], dx
xor al, 0xc2
sub al, bh
pop rdi
xlatb
mov gs, word [rdx + rbx]
sal byte [rip + 0x7256aa3], 1
insd dword [rdi], dx
imul eax, dword [rsi], 0x3d60b28c
mov edi, 0x55b81749
xchg eax, edx
mov edx, dword [rax]
or al, byte [rcx + 0x31]
imul eax, dword [rip - 0x3203fa8], 0x20
xor ebx, 0xffffffc1
lea esi, [rbx + rdi]
scasb al, byte [rdi]
mov ch, 0x58
nop
retf -0x63d3
fisubr word [rdx]
js 0x405771
add eax, 0x8072665c
test dword [rip + 0x65862c50], edx
adc dword [rax], 0x29
xor al, 0x5f
mov dl, 9
or al, 0x21
add ecx, dword [rdx + 0x4b]
pop rdi
or al, 0x48
sub al, 0x60
adc byte [rdx], dh
push rbx
and al, 0xd0
jae 0x4057cb
jae 0x4057ea
push 0x15
or ah, dh
or ecx, esp
adc eax, 0xbc9b2c89
movsd dword [rdi], dword ptr [rsi]
retf 0x5208
hlt
movabs byte [0x9448e03570750804], al
push rcx
sbb al, 0x60
jo 0x405870
add dword [rbx], ebp
and dword [rax], ecx
outsb dx, byte [rsi]
xor bl, byte [rax + 0x20]
adc ebp, dword [rcx - 0x33]
xor dword [rdx - 0x72], r8d
xor byte [rdx], bh
sar byte [rcx], cl
adc dword [rsi + rbp*8 + 0x38], -0x7b
sbb eax, 0x34670190
imul esp, dword [rdx + rax*8 - 0x227adaa0], 0x5e0cac12
push -0x64d51026
or al, 4
xor dword [rbx + rax*4 + 0x46], edx
sbb byte [rip + 0x2b65c33e], dl
cmp dword [rax], esp
sahf
push rbp
add eax, dword ss:[rsi]
jmp 0x405851
xor eax, dword [rdx + rdi*2 + 0x6a]
int1
movsxd rdi, dword [rdi]
mov edx, 0x80bcea30
outsb dx, byte [rsi]
and ebp, dword [rbp + 0x3d]
add dword [rip + 0x3df04a24], 0x630a3446
xor dword [rsi + 0xc], edi
push 0x39635c65
retf
js 0x4058d2
xchg dword [rdx + 0x64], edx
retf 0x69a3
jae 0x4058d0
or ebx, 0x4a407c4
add byte [rbx + 0x16], al
and rax, 0x60052147
xor dword [rcx - 0x50], esi
leave
xor dword [rdi], esi
xor al, 0xeb
adc al, 0xd0
xor dword [rbp + rbx - 0x4e], esp
mov al, byte [rax + 0x52]
xor eax, 0x449200c0
add dword [rbx + 0x18], edi
lea ecx, fs:[rdx + 0x26]
ret
or dword [rcx + 0x4a], edx
sub cl, dh
xchg eax, ebx
add al, al
sub cl, byte [rsi + 0x62ac21d8]
adc dword [rbx + 5], esp
jb 0x4058e8
add byte [rbx + 0x69], ah
push rbp
push rdx
xchg eax, edx
and byte [rdx + rsi + 5], cl
pop rcx
push rsp
movsb byte [rdi], byte ptr [rsi]
mov esp, 0x92a992bc
xor esp, esi
xor dword [rax + rdx*8], esi
shl dword es:[rdx], -0x14
xchg eax, esp
push rdx
or cl, byte [rax + rbx*4 - 0x7eb2e0ac]
or al, 0x49
push rax
lea ebp, [rcx + 0x5c]
sub al, byte [rbx - 0x5f0f4de8]
adc al, bl
or ecx, dword [rcx + 0x40019d8f]
xchg eax, esi
jne 0x40594d
xor dword [rsi + 0x1c195684], ecx
mov r8b, 0x4a
add bl, bl
lodsb al, byte [rsi]
and eax, 0x32008043
pushfq
movsb byte [rdi], byte ptr [rsi]
mov al, 0xe
shr dword [rbx], -0x62
push rsi
xor dl, byte [rcx + 2]
imul r8d, dword [rax], 0xaa20c2b9
imul ebp, esp, 0x4b68a42a
mov ch, 0x4b
pop rsp
add al, 0x60
or r15, rsp
mov ebx, 0x8b903425
imul edx, dword [rdx + 0x58232e82], 0xc3766570
loopne 0x405937
pop rdi
jo 0x4059df
or dword [rip - 0x7e8c3b52], 0x3076ae5e
sti
lodsb al, byte [rsi]
pop rcx
sub dl, dh
sbb dword [rax*4 + 0x31068905], ebx
and dword [rcx], ebx
retfq 0x69f7
nop
insb byte [rdi], dx
and al, 0x14
sahf
push rax
call 0x6e445f23
ja 0x4059dc
and eax, 0xfc55853
imul esp, dword [rax + 0x5536c4d1], 0x521b693d
and byte [rdx + 0x4684a35d], dil
xor byte [rax + 0x7040ed0a], spl
xor eax, dword [rbx + 0x72098058]
retf
cmp eax, 0x73d6048
retf 0x546
loope 0x4059e1
push rax
or al, 0x54
outsd dx, dword [rsi]
lodsb al, byte [rsi]
lodsb al, byte [rsi]
push 0x160a9804
and byte [rcx], dl
cmp byte [rcx - 0x633043c0], al
jno 0x405a21
adc eax, 0x782c2900
push rsi
and ah, al
push rbp
xor r11b, byte [rax]
sub ecx, dword [rcx - 0x6b7333c2]
sub eax, 0x161b3a2b
nop
lodsd eax, dword [rsi]
in al, 8
movsb byte [rdi], byte ptr [rsi]
adc byte [rsi + 0x42], 0x30
imul edx, dword [rcx + 0x624a145e], 0xc465c77b
sbb dword [rdx], eax
xor ch, byte [rip + 0x4bd09422]
sub byte [rdx - 0x7c], cl
mov dl, 0xe2
movabs byte fs:[0xf4ac6da198ac0ae], al
adc bl, cl
cmp al, 0xab
xor al, 0x47
and dword [rcx], edx
mov ebp, 0x128d6464
cmp esp, 0x125b2c49
mov edx, 0x10b92e37
push rcx
xor eax, 0xa628900
xor eax, 0x864ad109
imul edi, ebp, 0x5a12a511
xchg byte [rax + 0x14eac291], dl
clc
mov edi, 0x20892990
push rdx
imul ebx, dword [rax], 0x31eb8104
sub al, byte [rsi]
add ebp, ebp
add dword [rcx], 0xba434a90
xchg eax, r11d
mov bh, byte [rcx]
adc dword [rsi], esi
or byte [rbx + 0x409496b6], cl
push 0x40
sbb eax, ebp
mov cl, 0xac
pop rdx
insb byte [rdi], dx
pop rsp
test r10, rcx
call 0x2e28f73
and dword [rcx], eax
xchg byte [rdx + 0x13cab598], dl
out dx, al
leave
outsb dx, byte [rsi]
mov ebx, dword [rdi + 0x79732e00]
insd dword [rdi], dx
je 0x405b19
pop rbx
fsubr dword [rax + 9]
adc dword [rip - 0x6791f890], -0x5f
xchg eax, esi
outsd dx, dword [rsi]
sub rax, 0x2ad60d6d
xchg eax, ebx
jne 0x405b2e
insb byte [rdi], dx
sub eax, 0xdccd0d99
push 0x64096864
jns 0x405b43
push rbp
loope 0x405abc
lodsb al, byte [rsi]
sbb dword [r14 - 0x69], r14d
movabs al, byte [0x1b5f0ca3ac26e4]
pop rsi
imul esi, dword [rax + 0x928d1d7], 0xe672fe70
mov dh, 0xd7
sub byte [rsi + 0xa], bh
sub al, 0x6f
or byte [rcx - 0x39], ch
movabs byte [0x6f2415660578dd73], al
jmp 0x405b36
pop rcx
jmp 0x5da8fbb3
push -0x3ff6f2be
outsb dx, byte [rsi]
pop rbp
sbb bl, byte [rdi + 0xb]
xchg eax, edx
push rbp
loope 0x405ad8
mov ebp, 0xb49f116c
fadd dword [rdi + 0x6a0b43cd]
movsxd rsi, dword [rdx - 0x5f]
mov bl, 0xd9
sub edx, dword [rip + 0x5e7b6826]
int 0x45
sub eax, dword [rcx]
lea eax, [rcx + rbp*8]
push rdx
adc byte [rbp + rdx*4 + 0x6d], cl
std
add byte [rax], al
sbb eax, dword [rbx - 0x3ce6267e]
add cl, byte [rsi]
mov edi, 0x37b39219
sbb al, 1
and dword [rbx], esp
push rsp
sbb dword [rax + 4], edx
sbb dword [rax + rcx*2 - 0x7a], esp
xor dword [rsp + rsi*2 - 0x44], esi
sbb ecx, dword [rdx + 6]
and al, 0x44
jg 0x405b68
ljmp [rdi + 0x32]
enter -0x78e0, -0x68
cwde
sub byte [rbx], dh
and al, 0x83
or al, 5
or byte [rsi + 0x20], cl
or dword [rip + 0x3fc00b48], 0xffffffc0
xor bl, cl
in al, 0xec
mov byte [rdx], al
sti
sbb byte [rbx + 0x560cd203], dl
add ecx, dword [rax + 5]
out dx, al
and ah, cl
leave
add rax, 0x5e3f02af
mov edi, 0x901c9e4e
clc
clc
jmp 0x288c83d
imul edi, dword [rdi], -2
jb 0x405bb3
add dword [rax], esi
or byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
nop
sub dword [rbx + 0x7aff060c], ebx
add al, 0x61
sbb dword [rsp + rcx*2 + 0x60e70808], 0x57
inc dword [rdi + rdi - 0x37cdf37d]
fcomp st(0)
adc byte [rdx + 0x292e401], bh
sbb dword [rsi - 0x6c36fe61], ecx
cmovno edi, edi
call 0x394b4400
leave
sbb cl, byte [rcx + 0x1b0b103f]
xchg eax, edx
adc ebx, esi
jo 0x405c75
adc byte [rdi], al
out dx, eax
sbb al, 0xb2
and dword [rdi + rdi - 0x13f8f380], edx
enter 0x1816, 0x2f
setge byte [rdi]
int3
xchg byte [r8 + 0x5e627f07], r10b
xchg esp, ebp
mov al, 5
add byte [rbx - 0x79950b01], ah
xchg eax, edx
xchg eax, ebx
hlt
push 9
test eax, 0x92105421
mov edi, 0xe48bb217
fldcw word [rbx - 0x41]
sub byte [rcx], al
mov cl, 0x3f
out 0x66, al
adc byte [rdi + 7], r12b
jg 0x405bd1
in al, 0x22
jns 0x405caa
or bh, byte [rdi - 0x36e88978]
xchg eax, ebx
mov byte [rsi + 0x74], dh
sub ecx, ecx
sahf
cmp al, 0x39
and al, 0xfc
movabs eax, dword [0x48b8e9a401b4a1fc]
fstp xword [rdi]
add edx, dword [rdx - 0x52c27ded]
mov edi, 0xe9019310
xchg bh, ah
psubb mm1, qword [rbp + 0x2e]
jo 0x405c8a
push rbx
add eax, 0x3f9393c8
add byte [rsi + 0x366eae00], ch
pop rbx
sar al, cl
wait
sbb dword [rdx - 0xf80986d], edx
add dword [rsi], eax
adc byte [rax], ah
fild dword [rdx + 6]
cwde
mov edi, 0x1720e4af
leave
scasd eax, dword [rdi]
or byte [rcx], al
add dword [rip - 0x4f7930d9], esp
add byte [rax - 0x6f364738], dh
or al, 0xa
enter -0x7ff9, 0x74
and byte [rdi + 0x10], bh
or byte [rcx], ah
rdmsr
enter -0x2720, -0x18
add ecx, ebx
xor spl, byte [r8]
adc eax, 0x2117307f
or al, 0xe
or edi, dword [rdi]
xor al, 0xbf
popfq
mov dl, 0xd9
adc dword [rbx], edi
add dword [rsi + 0x19], 0x219e048b
add dword [rdi - 0x794c3645], edi
insb byte [rdi], dx
xlatb
mov cl, 0xff
xor al, byte [rbp + rcx + 0x5f1fcd20]
or dword [rdi - 0x50], edi
cmp al, 0x50
jrcxz 0x405d0b
xor dword [rbx], esp
add byte [rax], al
add byte [rax], al
add byte [rax], cl
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x2df7fdea], ecx
cmp dword [rax + 0x32], esi
push rdx
lodsd eax, dword [rsi]
enter 0x9e, 0
pop rsp
and al, 0
add byte [rax + 0x4900014f], ah
add byte [rax], al
push rsi
hlt
add byte [rax], al
add bh, bh
