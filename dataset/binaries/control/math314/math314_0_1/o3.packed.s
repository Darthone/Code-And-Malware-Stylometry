call 0x4013b8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x4011d0
add ebx, ebx
je 0x401186
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x4011be
cmp rbp, -4
ja 0x4011be
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4011a6
add ecx, 4
mov dl, byte [rax]
je 0x4011ce
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x4011be
ret
cld
pop r11
cmp r8b, 2
je 0x4011e6
jmp 0x401263
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x4011f6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x4011de
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x40120e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x4011fb
sub eax, 3
jb 0x40122c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401263
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401253
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401251
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401240
cmp rbp, -0xd00
adc ecx, eax
call 0x401192
jmp 0x4011e6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40133c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x4012da
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401326
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x4012f9
push 0x3a707474
jne 0x401352
js 0x401312
jae 0x40134c
outsb dx, byte cs:[rsi]
je 0x40130b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401379
jb 0x40136b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401396
jb 0x4013a9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21255c
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21255c
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401274
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x40139f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40134d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1447
jb 0x40145f
movsxd rbp, dword [rdi]
jae 0x401459
insb byte [rdi], dx
js 0x40145f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40143f
cmp rsi, rcx
jae 0x401447
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401426
cmp al, 0x8f
ja 0x401426
cmp byte [rsi - 2], 0xf
je 0x40142c
sub al, 0xe8
jg 0x401429
push rdi
cmp al, 1
ja 0x401414
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401417
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401444
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40149b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1919
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4014df
mov al, 0xa
jmp 0x4014df
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4014bb
inc ebx
mov al, 0
jmp 0x4014e3
mov al, 2
jmp 0x4014e3
mov al, 3
jmp 0x4014e3
mov al, 0x3c
jmp 0x4014e3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401524
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401536
jg 0x401528
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6cab
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401582
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb66ff
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40158a
cmp esi, 0x21585055
jne 0x40158e
jge 0x401580
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401583
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401587
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401633
pop rcx
or al, 0x3b
jb 0x401639
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4015ab
jmp 0x4015ad
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36614ee
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53736
in eax, dx
jg 0x4015e5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40162b
mov bh, 0x2a
add edi, 0x10
jmp 0x401628
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401665
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4016a1
jne 0x4016b8
fstpnce st(6), st(0)
jle 0x401681
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4016b7
jrcxz 0x4016eb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b64f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40176a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40172a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295cff
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40179d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401737
and ecx, 7
or al, 0xeb
jae 0x4017a2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4017d7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401815
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4017ce
push rax
call 0xffffffff868d14bb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4017d8
std
cmp edi, esi
xchg eax, edi
jle 0x40182d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95db9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40182b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401819
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401842
js 0x401882
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401914
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2b4f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401935
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40193a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc213ec
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4018c8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
adc al, 0xb
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
and byte [rax + 0x90], ah
add byte [rax], al
add byte [rax], al
add dil, dil
mov eax, 0xe1000015
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4019ee
je 0x4019f7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4019c0
mov dh, 0x7d
jbe 0x4019bf
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4019f8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x4480006], bl
add ah, cl
add eax, 0xf9027c8
or byte [rax], al
lock or dword [rax], eax
in al, 0x13
enter 0xa07, 0
test al, 0xb
add byte [rax - 0x1bf60df9], al
add ecx, dword [rax + rax]
movabs al, byte [0x1f204f90840000d]
add byte [rax + 0xf], dl
add byte [rsi + rbx + 0xf90279], al
adc byte [rax], al
nop
adc dword [rax], eax
test al, 0x7f
cmp byte [rdx + rax + 0x12], 0
adc eax, dword [rax]
clc
sub eax, 0xf900f60
and byte [rax + rax], dl
or byte [rsi], ch
adc eax, 0x27902700
nop
adc byte [rsi], dl
add byte [rax], bl
add byte [rbx], al
in al, 7
enter 0x2ff8, 0x18
add byte [rax], al
xor byte [rcx], cl
in al, 9
in al, 0x19
add byte [rax + 0x1a], ah
add byte [rax - 0x6f], dh
mov esp, 0x131bb29b
add dword [rdi], edx
add al, 0
int1
ljmp [rcx - 0x48]
mov dl, 0xd8
or al, 0x1b
mov edi, 0x64027f19
nop
or dword [rbx + 0x17400ca0], edi
sbb esp, eax
pop rbp
enter -0x79bf, 0x2e
and byte [rip - 0x6f93e6bc], cl
out dx, al
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx], 0x17
push rbx
xor bl, al
xchg eax, ebp
adc byte [rdi + 0x7a], cl
mov ebx, 0x86432212
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
cmp dword [rbx], edi
insb byte [rdi], dx
or byte [rsi + 0x268f0c47], ch
loope 0x401a21
leave
sbb dword [rdi], 0x28646d90
fcom dword [rdx]
out dx, eax
and cl, byte [rax]
sbb eax, dword [rdx - 0x48]
out 0x37, al
add byte [rdi - 0x44], al
push rdi
insb byte [rdi], dx
add eax, 0x47010587
xchg eax, esp
xor byte [rsi + 0x25], dh
neg dword [rbx]
cwde
adc ebx, dword [rdi]
cmpsb byte [rsi], byte ptr [rdi]
test cl, bl
sub al, 0x17
add r9b, r11b
js 0x401b1f
outsd dx, dword [rsi]
int1
add bh, byte [rdi]
and al, bl
leave
xchg byte [rsi + 0x48], ch
adc bl, byte [rdi]
sbb byte [rsi], 2
sbb dword [rbp + 0x2f5393c], 0x70
or al, 0x2a
pop r8
fcom dword [r13 + 0x6700019d]
jnp 0x401b53
mul ah
pop rdi
rcr byte [rdx], 1
add edx, dword [rdi]
test dword [rip + 0x2fb00645], esp
push rdx
xlatb
cmp ebx, eax
adc byte [rsi - 0x61], dh
pop rdi
jo 0x401b0c
test byte ss:[rsp + rdi - 0x102ff9f1], bl
test byte [rbx], cl
in al, 0x10
add al, 2
sahf
sbb al, 0x80
add dword gs:[rdi], edx
sub dh, byte [rip - 0xf36131c]
jge 0x401b20
imul r14d, dword [r14 + 0x72], 0x8eaf90d8
sbb r9b, byte [r13 + 0x77]
int 0
ror byte [rsp + rbx*4], cl
and byte [rax + 0xd832011], bh
pop rax
mov dword [rdi + rax*2], 0xe41908c7
in al, 0xe0
sbb dword [rdx - 0x5bfe4f2b], edx
out dx, eax
not dword [rax]
cld
mov edi, 0xe4ec1ceb
sbb byte [rbx + 0x77], dl
or dword [rbx], eax
pop r9
lahf
shr dword [rsi], 8
sbb al, 2
sbb dword [rdi + 0x38], esp
and al, 0x83
sub byte [r15], r10b
push -0x4f9bfccb
and byte [rdi + 0x37], cl
adc byte [rsi], bl
and byte [r11 + 0xe301c9c], r8b
ficom dword [rcx - 0x15]
sbb al, 0xec
in al, 0x50
sbb dword [rsi - 0x20fc6d41], eax
fadd dword [rip + 0x39e2bc2]
scasd eax, dword [rdi]
mov edx, 0x760c8477
jb 0x401ba2
fldenv [rcx]
cmp dword [rbx], edi
add dword [rdi - 0x78], ebx
mov ebp, 0x19084700
in al, 0xe4
jo 0x401bb4
mov dh, 0xde
adc ecx, dword [rsi - 0x37]
ja 0x401be3
add al, 0xa7
sbb dword [rsp + rax], edi
sahf
sbb eax, 0x4507892
pop rdi
push rax
or dl, ch
add ecx, dword [rdi]
nop
cmp byte [rdi], ah
movsxd rsi, dword [rdx - 0x25]
mov edi, 0x7c7374c5
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
ljmp [rbp + 0x726564fd]
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401c18
outsd dx, dword fs:[rsi]
in eax, dx
in eax, dx
outsd dx, dword [rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401c68
jne 0x401c84
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401c0f
add bh, bl
fld xword [rbp + 0x29]
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xbedd
fisttp word [rax]
jb 0x401c9c
jns 0x401c8c
in eax, dx
jb 0x401caa
add byte [rsi + 0xa], ah
insd dword [rdi], dx
jne 0x401c3b
out 0xbe, al
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401c72
or eax, 0xdf74295f
outsb dx, byte [rsi]
in eax, dx
test byte [rdx], ch
insd dword [rdi], dx
adc bl, byte [rdi + 0x47277070]
fucomi st(5)
fild dword [rcx + 0x4c]
jae 0x401c90
pop rdi
pop rdx
movsb byte [rdi], byte ptr ss:[rsi]
jnp 0x401c1d
fbstp tbyte [rsi - 0x57]
push rdx
imul ebx, dword [rdx], 0x4c74535a
cmp byte [rdx], dl
imul ebp, dword [rdi + 0x3e], 0xee66c351
mov edi, 0x4d415246
pop r15
int3
or esp, dword [rdi]
jnp 0x401c39
in eax, 0x47
push rbp
and byte [rax + 0x44], cl
push rdx
push rsi
fdivr st(3)
in eax, dx
push rbx
cld
push rsp
sub byte [r8 - 0x7a94469c], r9b
test dword [rax], edx
sbb dword [rdi], eax
pop cx
mov cl, 0x56
js 0x401d2b
sbb ebp, dword [r9 + r13*2 + 0x62]
movsxd rsp, dword [rdi]
cwde
jmp 0x7655b8be
packuswb mm5, qword [rbp + 0x32]
and eax, 0x5f764a74
push rdx
sti
cld
and byte [rdi + 0x43], cl
insb byte [rdi], dx
jae 0x401d49
pop rdx
xor eax, 0x766c6f73
jbe 0x401d0c
push rsi
in eax, dx
mov dh, 0x70
jb 0x401d1b
je 0x401d4f
push -0x73bfbf95
pop r15
xor ch, byte [rsi]
xor eax, dword [rdx - 0x25]
mov edx, 0x4e230546
cmp bl, dl
out dx, eax
outsb dx, byte [rsi]
test dword [rbp + 0x33], ecx
xor al, 0x49
jg 0x401d4e
xor dword [rbp + 0x76], eax
and al, 0xb0
pop rbp
jnp 0x401d05
pop rax
pop rax
pop rdi
ja 0x401d58
pop rcx
imul esp, dword [rbx - 0x79], 0xd98765b4
ja 0x401d5a
add qword [r15 - 0x4a], r8
push rax
cmp byte [rbx + 0x147799ea], bl
movsxd rcx, dword [rbx]
pop rcx
fcmovnu st(0), st(2)
js 0x401d96
js 0x401d7d
sbb dword [rcx - 0x15], ebx
xchg eax, edx
js 0x401dad
xchg eax, edx
xor edi, dword [rbx + 0x78f6dd7b]
xor dword [rax], eax
xor dl, byte [rdi + 0x67c06f69]
movsxd rbx, dword [r9]
lodsd eax, dword [rsi]
loopne 0x401d2f
pop rdx
adc al, ah
xor esp, dword [rbx]
add ebp, dword [rcx + rdi*4 + 0x451073b7]
push rbx
add al, 0
leave
adc eax, 0x44900616
xor eax, 0x178c0d64
sbb ch, byte [rbp - 0x1ea8a35f]
push rsp
pop r15
xchg dword [rsi + 0xcb6c7f1], ebp
test dword [r9 + r12*2 + 0x62], edx
insb byte [rdi], dx
sbb ecx, ebx
mov dh, 0x56
mov edx, 0xd064744f
test al, 0x6b
or ebp, dword [rsi + rsi*8 + 0x50]
movsxd rsp, dword [r11 + 0x38]
out 0x78, eax
adc esi, dword [rsi]
xor al, 0
xor bl, byte [rdx + rcx*2 + 0x2c]
cmp esi, dword [rip - 0xf69539c]
sbb ch, byte [rbp + 0x5f]
fld dword [rsi]
in al, dx
pop rsi
or dword ss:[rbx], esi
insb byte [rdi], dx
sbb bh, byte [rax + 0x54]
push rdx
sbb cl, byte [r15]
add edx, dword [rdx]
shl dword [rdx + 0x1e], 0x6b
cmp al, 0x7e
ret
movabs eax, dword [0x2efd2856176b6307]
mov ebx, 0x349f6c6c
je 0x401e33
xor ebp, dword [rdi + 0x76]
sub byte [rax + rax - 0x5f], 8
fstp dword [rdx - 0x7d]
sub byte [rbp - 0x44], dh
jo 0x401e2c
pop rdi
cmp al, 0x6d
jne 0x401e6c
cmovne ecx, dword [rbp + 0x68425b0b]
sbb ch, byte [rbp - 0x5d]
push rdi
xor dword [rbp + 0x65], eax
and esp, dword [rsp + rdi*2 + 0x38]
xor ch, byte [rdi + 0x75]
xor dword [rdx + 0x64], esi
mov bh, 0xdd
shr byte [rbp + 0x206d7973], 1
je 0x401e8e
mov bh, 0xcd
xor esp, ebp
push 0x70a9e709
outsb dx, byte [rsi]
outsd dx, dword [rsi]
fld xword [rsi]
sub eax, 0x2d49682e
adc eax, 0x6e670d67
pop rdx
lodsb al, byte [rsi]
div byte [rbp + 0x2e]
jne 0x401e23
sub eax, 0x9d0dd169
imul esi, dword [rbx], -9
cmp byte [rcx], cl
jns 0x401ebb
sbb dword [r9], r9d
sub esi, dword [rdi + rsi]
out dx, al
retf
or al, 0xb0
push rdi
sub bh, byte [rax + 0x5d121b5f]
sub byte [rcx], cl
in eax, dx
sbb esi, ebx
push rsi
xchg eax, edi
je 0x401edc
movabs dword [0x86fb87393ba2c0a], eax
out 5, eax
movsd dword [rdi], dword ptr [rsi]
and al, 0x6f
retf
lodsb al, byte [rsi]
leave
push 0x72646881
or eax, 0x669366c3
cmp dh, al
xor dword [rbx], ecx
xor esi, dword [rbp + 0x366a8158]
and al, 0x73
push rsi
ror byte [rbx + rsi*4], 1
fldcw word [rcx + 0x4c]
mov edi, 0x75804204
xor eax, 0xbd6d14
add byte [rdx], al
sub al, 0xa1
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdi - 0x11], eax
xor ah, byte [rdi]
outsd dx, dword [rsi]
sbb al, 1
enter 0x3480, 0x43
and eax, dword [rdi]
push rsp
leave
nop
or al, 0x32
push rsp
and byte [rdx + rsi], al
enter 0xc90, 0x31
je 0x401f41
jns 0x401f06
xchg eax, esp
or al, 0x24
jg 0x401ecb
ljmp [rdi + 0x64]
nop
cwde
cwde
xor byte [rsi + 0x48], ah
sbb dword [rip + 0x6414e08], eax
sbb edx, dword [rax - 0x37c037f5]
mov dl, 0xc9
fld dword [rax + 0x3f06fb01]
sbb byte [rcx], bl
mov al, 0xa4
sbb dword [rsi + 3], edx
mov bh, 0x2e
xchg eax, edx
mov esp, 0x1843f07
pop rsi
outsd dx, dword [rsi]
sub al, 0xe9
mov edi, 0x4307dfff
and al, 0x67
mov edi, 0x6b070220
xor cl, al
xor byte [rdi + rdi - 2], 0xf0
lock sbb byte [rbp + 0x56], 0xa
adc dword [rdi + 0x6093ff02], edi
jp 0x401f7e
add al, 0x2f
js 0x401f3d
dec rax
and byte [rbx + 0x423f841d], al
test al, 0xc8
or byte [rdx + rsi], 0xa8
fcomp dword [rax]
or byte [rdx], dh
or byte [rbx], al
mov ss, word [rbx]
js 0x401f06
lcall [rdx]
nop
and dword [rbx], ebx
mov dword [rdi], edi
movabs al, byte [0x710a01921b21ba0]
xchg eax, esp
xchg byte [rbx + 0x7cf2104], bl
and dword [rbx], edi
mov dl, 5
setge byte [rdi]
cmp dword [rbx + rsi*2], 0x7f075093
xor dl, byte [rsi]
push rsi
and dword [rcx], edi
insb byte [rdi], dx
movabs dword [0x9ff076f67250d47], eax
test eax, 0x24360c83
mov edi, 0x17903f90
enter 0xc90, 0x25
mov cl, 0xa8
xor dl, byte [rsp + rcx - 0x406b57ce]
xchg eax, ebx
sal byte [rdi + rdx - 0x37], cl
movsb byte [rdi], byte ptr [rsi]
add ecx, ecx
add esi, dword [rbx + 0x78]
xor esp, dword [rax + 0x1f]
sub al, 0x69
mov dl, 0x3f
syscall
or byte [rdi + 6], ch
ja 0x401fd0
mov edi, 0xc9b26419
loope 0x40200f
adc byte [rax], dl
movsb byte [rdi], byte ptr [rsi]
sbb eax, dword [rdx]
out 0x7f, al
sbb byte [rdx + 0x72], dh
nop
sbb r8b, spl
add dword [rsi], eax
or cl, cl
and byte [rbx + 0x10], al
cwde
mov dh, 0xc8
fadd qword [rdi + rbx*2 + 0x43077f07]
nop
sbb eax, 0x488f3fef
xchg byte [rdx + 0x603f30b3], dl
clc
or edx, dword [rax]
fsub qword [rax + 7]
jg 0x401fc0
leave
mov bl, 0xfe
adc edi, dword [rdi]
jo 0x402016
leave
or dword [rbp + 0x103ffe7], 0xc
or ebx, ecx
xor byte [rdi], dl
xor al, 0x7f
mov dl, 0xd9
and dword [rdi], eax
adc dword [rbx], edi
leave
or dword [rbp + rdx*2 + 0x640c7f3d], ebx
sub esp, dword [rbp + 0x33]
mov ebx, 0x330bf00
jae 0x40202e
pop rax
or byte [rsi], bl
xor dword [rcx], ecx
and al, 0x4f
jg 0x402047
cmp dword [rbp + 4], edx
add byte [rax], al
add byte [rax], bl
and al, 0
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0xf080216], ecx
xchg eax, esp
cld
mov ebp, 0x9942737d
mov eax, 0xe1000015
add byte [rax], al
sub byte [rsi], al
add byte [rcx], cl
add ch, bl
hlt
add byte [rax], al
add bh, bh
