xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x604117
push rbp
sub rax, obj.completed.7585
cmp rax, 0xe
mov rbp, rsp
jbe 0x4011f0
mov eax, 0
test rax, rax
je 0x4011f0
pop rbp
mov edi, obj.completed.7585
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.completed.7585
push rbp
sub rsi, obj.completed.7585
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401238
mov eax, 0
test rax, rax
je 0x401238
pop rbp
mov edi, obj.completed.7585
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x202ec9], 0
jne 0x40125a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x202eb6], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401270
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40126b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 8], 0
mov rax, qword [rbp - 0x18]
mov dword [rax], 0
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x2d
jne 0x4012ba
mov dword [rbp - 8], 1
jmp 0x4012d2
cmp dword [rbp - 4], 0x2f
jle 0x4012a3
cmp dword [rbp - 4], 0x39
jg 0x4012a3
mov eax, dword [rbp - 4]
lea edx, [rax - 0x30]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x2f
jle 0x401307
cmp dword [rbp - 4], 0x39
jg 0x401307
mov rax, qword [rbp - 0x18]
mov edx, dword [rax]
mov eax, edx
shl eax, 2
add eax, edx
add eax, eax
mov edx, eax
mov eax, dword [rbp - 4]
add eax, edx
lea edx, [rax - 0x30]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
jmp 0x4012d2
cmp dword [rbp - 8], 0
je 0x40131d
mov rax, qword [rbp - 0x18]
mov eax, dword [rax]
neg eax
mov edx, eax
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 8], 0
mov rax, qword [rbp - 0x18]
mov qword [rax], 0
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x2d
jne 0x401355
mov dword [rbp - 8], 1
jmp 0x401371
cmp dword [rbp - 4], 0x2f
jle 0x40133e
cmp dword [rbp - 4], 0x39
jg 0x40133e
mov eax, dword [rbp - 4]
sub eax, 0x30
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x2f
jle 0x4013b1
cmp dword [rbp - 4], 0x39
jg 0x4013b1
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax]
mov rax, rdx
shl rax, 2
add rax, rdx
add rax, rax
mov rdx, rax
mov eax, dword [rbp - 4]
cdqe
add rax, rdx
lea rdx, [rax - 0x30]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
jmp 0x401371
cmp dword [rbp - 8], 0
je 0x4013cb
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
neg rax
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 8], 0
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x20
je 0x4013e1
cmp dword [rbp - 4], 0xa
je 0x4013e1
cmp dword [rbp - 4], 0xd
je 0x4013e1
cmp dword [rbp - 4], 9
je 0x4013e1
cmp dword [rbp - 4], -1
jne 0x401409
jmp 0x4013e1
nop
mov eax, dword [rbp - 8]
lea edx, [rax + 1]
mov dword [rbp - 8], edx
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
mov edx, dword [rbp - 4]
mov byte [rax], dl
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x20
je 0x401462
cmp dword [rbp - 4], 0xa
je 0x401462
cmp dword [rbp - 4], 0xd
je 0x401462
cmp dword [rbp - 4], 9
je 0x401462
cmp dword [rbp - 4], -1
je 0x401462
mov eax, dword [rbp - 8]
lea edx, [rax + 1]
mov dword [rbp - 8], edx
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
mov edx, dword [rbp - 4]
mov byte [rax], dl
jmp 0x401422
mov eax, dword [rbp - 8]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
mov byte [rax], 0
mov eax, dword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x20
je 0x401483
cmp dword [rbp - 4], 0xa
je 0x401483
cmp dword [rbp - 4], 0xd
je 0x401483
cmp dword [rbp - 4], 9
je 0x401483
cmp dword [rbp - 4], -1
jne 0x4014ab
jmp 0x401483
nop
mov eax, dword [rbp - 4]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
call sym.imp.getchar_unlocked
mov dword [rbp - 4], eax
cmp dword [rbp - 4], 0x20
je 0x4014fc
cmp dword [rbp - 4], 0xa
je 0x4014fc
cmp dword [rbp - 4], 0xd
je 0x4014fc
cmp dword [rbp - 4], 9
je 0x4014fc
cmp dword [rbp - 4], -1
je 0x4014fc
mov eax, dword [rbp - 4]
movsx edx, al
mov rax, qword [rbp - 0x18]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
jmp 0x4014c0
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov dword [rbp - 0x34], edi
mov eax, esi
mov byte [rbp - 0x38], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0x28], 0
mov dword [rbp - 0x24], 0
cmp dword [rbp - 0x34], 0
jns 0x401547
mov dword [rbp - 0x24], 1
neg dword [rbp - 0x34]
cmp dword [rbp - 0x34], 0
je 0x40159d
mov esi, dword [rbp - 0x28]
lea eax, [rsi + 1]
mov dword [rbp - 0x28], eax
mov ecx, dword [rbp - 0x34]
mov edx, 0x66666667
mov eax, ecx
imul edx
sar edx, 2
mov eax, ecx
sar eax, 0x1f
sub edx, eax
mov eax, edx
shl eax, 2
add eax, edx
add eax, eax
sub ecx, eax
mov edx, ecx
movsxd rax, esi
mov byte [rbp + rax - 0x20], dl
mov ecx, dword [rbp - 0x34]
mov edx, 0x66666667
mov eax, ecx
imul edx
sar edx, 2
mov eax, ecx
sar eax, 0x1f
sub edx, eax
mov eax, edx
mov dword [rbp - 0x34], eax
jmp 0x401547
cmp dword [rbp - 0x28], 0
jne 0x4015b3
mov eax, dword [rbp - 0x28]
lea edx, [rax + 1]
mov dword [rbp - 0x28], edx
cdqe
mov byte [rbp + rax - 0x20], 0
cmp dword [rbp - 0x24], 0
je 0x4015c3
mov edi, 0x2d
call sym.imp.putchar_unlocked
mov eax, dword [rbp - 0x28]
lea edx, [rax - 1]
mov dword [rbp - 0x28], edx
test eax, eax
setne al
test al, al
je 0x4015ee
mov eax, dword [rbp - 0x28]
cdqe
movzx eax, byte [rbp + rax - 0x20]
movsx eax, al
add eax, 0x30
mov edi, eax
call sym.imp.putchar_unlocked
jmp 0x4015c3
movsx eax, byte [rbp - 0x38]
mov edi, eax
call sym.imp.putchar_unlocked
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40160e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov eax, esi
mov byte [rbp - 0x3c], al
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0x28], 0
mov dword [rbp - 0x24], 0
cmp qword [rbp - 0x38], 0
jns 0x401650
mov dword [rbp - 0x24], 1
neg qword [rbp - 0x38]
cmp qword [rbp - 0x38], 0
je 0x4016c7
mov esi, dword [rbp - 0x28]
lea eax, [rsi + 1]
mov dword [rbp - 0x28], eax
mov rcx, qword [rbp - 0x38]
movabs rdx, 0x6666666666666667
mov rax, rcx
imul rdx
sar rdx, 2
mov rax, rcx
sar rax, 0x3f
sub rdx, rax
mov rax, rdx
shl rax, 2
add rax, rdx
add rax, rax
sub rcx, rax
mov rdx, rcx
movsxd rax, esi
mov byte [rbp + rax - 0x20], dl
mov rcx, qword [rbp - 0x38]
movabs rdx, 0x6666666666666667
mov rax, rcx
imul rdx
sar rdx, 2
mov rax, rcx
sar rax, 0x3f
sub rdx, rax
mov rax, rdx
mov qword [rbp - 0x38], rax
jmp 0x401650
cmp dword [rbp - 0x28], 0
jne 0x4016dd
mov eax, dword [rbp - 0x28]
lea edx, [rax + 1]
mov dword [rbp - 0x28], edx
cdqe
mov byte [rbp + rax - 0x20], 0
cmp dword [rbp - 0x24], 0
je 0x4016ed
mov edi, 0x2d
call sym.imp.putchar_unlocked
mov eax, dword [rbp - 0x28]
lea edx, [rax - 1]
mov dword [rbp - 0x28], edx
test eax, eax
setne al
test al, al
je 0x401718
mov eax, dword [rbp - 0x28]
cdqe
movzx eax, byte [rbp + rax - 0x20]
movsx eax, al
add eax, 0x30
mov edi, eax
call sym.imp.putchar_unlocked
jmp 0x4016ed
movsx eax, byte [rbp - 0x3c]
mov edi, eax
call sym.imp.putchar_unlocked
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401738
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov dword [rbp - 4], 0
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
movzx eax, byte [rax]
test al, al
je 0x401781
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
movzx eax, byte [rax]
movsx eax, al
mov edi, eax
call sym.imp.putchar_unlocked
add dword [rbp - 4], 1
jmp 0x40174d
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov eax, esi
mov byte [rbp - 0x1c], al
mov dword [rbp - 4], 0
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x4010d0
movzx eax, byte [rax]
test al, al
setne al
test al, al
je 0x4017e5
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x4010d0
movzx eax, byte [rax]
movsx eax, al
mov edi, eax
call sym.imp.putchar_unlocked
add dword [rbp - 4], 1
jmp 0x40179c
movsx eax, byte [rbp - 0x1c]
mov edi, eax
call sym.imp.putchar_unlocked
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov eax, esi
mov byte [rbp - 0x1c], al
mov dword [rbp - 4], 0
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
movzx eax, byte [rax]
test al, al
je 0x40183f
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov rax, qword [rbp - 0x18]
add rax, rdx
movzx eax, byte [rax]
movsx eax, al
mov edi, eax
call sym.imp.putchar_unlocked
add dword [rbp - 4], 1
jmp 0x40180b
movsx eax, byte [rbp - 0x1c]
mov edi, eax
call sym.imp.putchar_unlocked
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x10], 1
mov rax, qword [rbp - 0x18]
cqo
idiv qword [rbp - 0x28]
mov qword [rbp - 8], rdx
cmp qword [rbp - 0x20], 0
je 0x4018b2
mov rax, qword [rbp - 0x20]
and eax, 1
test rax, rax
je 0x401899
mov rax, qword [rbp - 0x10]
imul rax, qword [rbp - 8]
cqo
idiv qword [rbp - 0x28]
mov qword [rbp - 0x10], rdx
mov rax, qword [rbp - 8]
imul rax, qword [rbp - 8]
cqo
idiv qword [rbp - 0x28]
mov qword [rbp - 8], rdx
sar qword [rbp - 0x20], 1
jmp 0x401873
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x90
mov qword [rbp - 0x88], rdi
mov dword [rbp - 0x8c], esi
mov dword [rbp - 0x90], edx
mov dword [rbp - 0x94], ecx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x60]
mov rdi, rax
call 0x401040
mov dword [rbp - 0x74], 0
mov eax, dword [rbp - 0x74]
cmp eax, dword [rbp - 0x8c]
jge 0x401923
lea rax, [rbp - 0x60]
mov esi, 0x52
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x74], 1
jmp 0x401901
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x401040
mov dword [rbp - 0x70], 0
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 0x70]
setg al
test al, al
je 0x40199c
mov eax, dword [rbp - 0x70]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x40]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
cmp dword [rbp - 0x90], 0
je 0x401996
sub dword [rbp - 0x90], 1
lea rax, [rbp - 0x40]
mov esi, 0x59
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x70], 1
jmp 0x401936
mov eax, dword [rbp - 0x90]
lea edx, [rax - 1]
mov dword [rbp - 0x90], edx
test eax, eax
setne al
test al, al
je 0x4019c7
lea rax, [rbp - 0x40]
mov esi, 0x59
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
jmp 0x40199c
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call 0x4010e0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x401040
mov dword [rbp - 0x6c], 0
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 0x6c]
setg al
test al, al
je 0x401ab9
mov eax, dword [rbp - 0x6c]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x40]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
mov eax, dword [rbp - 0x6c]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx ebx, byte [rax]
mov eax, dword [rbp - 0x6c]
lea r12d, [rax + 1]
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov ecx, eax
mov eax, r12d
cdq
idiv ecx
mov eax, edx
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp bl, al
sete al
test al, al
je 0x401ab0
cmp dword [rbp - 0x94], 0
je 0x401ab0
sub dword [rbp - 0x94], 1
lea rax, [rbp - 0x40]
mov esi, 0x42
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x6c], 1
jmp 0x4019f9
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call 0x4010e0
lea rax, [rbp - 0x40]
mov esi, 0x402e50
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov dword [rbp - 0x68], 0
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 0x68]
setg al
test al, al
je 0x401bb1
mov eax, dword [rbp - 0x68]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x40]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
mov eax, dword [rbp - 0x68]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x42
je 0x401b7e
mov eax, dword [rbp - 0x68]
lea ebx, [rax + 1]
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov ecx, eax
mov eax, ebx
cdq
idiv ecx
mov eax, edx
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x42
je 0x401b7e
mov eax, 1
jmp 0x401b83
mov eax, 0
test al, al
je 0x401ba8
cmp dword [rbp - 0x94], 0
je 0x401ba8
sub dword [rbp - 0x94], 1
lea rax, [rbp - 0x40]
mov esi, 0x42
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x68], 1
jmp 0x401ae4
mov eax, dword [rbp - 0x94]
lea edx, [rax - 1]
mov dword [rbp - 0x94], edx
test eax, eax
setne al
test al, al
je 0x401bdc
lea rax, [rbp - 0x40]
mov esi, 0x42
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
jmp 0x401bb1
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call 0x4010e0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov dword [rbp - 0x64], 0
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 0x64]
setg al
test al, al
je 0x401caa
mov eax, dword [rbp - 0x64]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx ebx, byte [rax]
mov eax, dword [rbp - 0x64]
lea r12d, [rax + 1]
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov ecx, eax
mov eax, r12d
cdq
idiv ecx
mov eax, edx
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp bl, al
sete al
test al, al
je 0x401ca1
lea rax, [rbp - 0x75]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x75]
mov rax, qword [rbp - 0x88]
mov esi, 0x402e50
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x75]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401cc0
add dword [rbp - 0x64], 1
jmp 0x401c02
lea rdx, [rbp - 0x60]
mov rax, qword [rbp - 0x88]
mov rsi, rdx
mov rdi, rax
call 0x401060
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, qword [rbp - 0x88]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401d36
jmp 0x401d31
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401d1a
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401d1a
mov rbx, rax
lea rax, [rbp - 0x75]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401d1a
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x90
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x1b8
mov qword [rbp - 0x1b8], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x1a0]
mov rdi, rax
call sym.reader
lea rdx, [rbp - 0x194]
lea rcx, [rbp - 0x198]
lea rax, [rbp - 0x19c]
mov rsi, rcx
mov rdi, rax
call sym.reader_int_int_int_
lea rdx, [rbp - 0x188]
lea rcx, [rbp - 0x18c]
lea rax, [rbp - 0x190]
mov rsi, rcx
mov rdi, rax
call sym.reader_int_int_int_
mov eax, dword [rbp - 0x19c]
test eax, eax
jne 0x401ecb
mov eax, dword [rbp - 0x198]
test eax, eax
je 0x401ecb
mov eax, dword [rbp - 0x194]
test eax, eax
jne 0x401ecb
mov eax, dword [rbp - 0x190]
test eax, eax
jne 0x401ecb
mov eax, dword [rbp - 0x18c]
test eax, eax
je 0x401ecb
mov eax, dword [rbp - 0x188]
test eax, eax
jne 0x401ecb
mov edx, dword [rbp - 0x198]
mov eax, dword [rbp - 0x18c]
cmp edx, eax
jne 0x401e8d
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x401040
mov dword [rbp - 0x184], 0
mov eax, dword [rbp - 0x198]
cmp dword [rbp - 0x184], eax
jge 0x401e66
lea rax, [rbp - 0x40]
mov esi, 0x4f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
lea rax, [rbp - 0x40]
mov esi, 0x42
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x184], 1
jmp 0x401e2d
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x1b8]
mov rsi, rdx
mov rdi, rax
call 0x401060
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a7c
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1a1]
mov rax, qword [rbp - 0x1b8]
mov esi, 0x402e50
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402a7c
mov eax, dword [rbp - 0x19c]
test eax, eax
je 0x401fe3
mov eax, dword [rbp - 0x198]
test eax, eax
jne 0x401fe3
mov eax, dword [rbp - 0x194]
test eax, eax
jne 0x401fe3
mov eax, dword [rbp - 0x190]
test eax, eax
je 0x401fe3
mov eax, dword [rbp - 0x18c]
test eax, eax
jne 0x401fe3
mov eax, dword [rbp - 0x188]
test eax, eax
jne 0x401fe3
mov edx, dword [rbp - 0x190]
mov eax, dword [rbp - 0x19c]
cmp edx, eax
jne 0x401fa5
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x401040
mov dword [rbp - 0x180], 0
mov eax, dword [rbp - 0x190]
cmp dword [rbp - 0x180], eax
jge 0x401f7e
lea rax, [rbp - 0x40]
mov esi, 0x47
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
lea rax, [rbp - 0x40]
mov esi, 0x52
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x180], 1
jmp 0x401f45
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x1b8]
mov rsi, rdx
mov rdi, rax
call 0x401060
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a7c
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1a1]
mov rax, qword [rbp - 0x1b8]
mov esi, 0x402e50
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402a7c
mov eax, dword [rbp - 0x19c]
test eax, eax
jne 0x4020fb
mov eax, dword [rbp - 0x198]
test eax, eax
jne 0x4020fb
mov eax, dword [rbp - 0x194]
test eax, eax
je 0x4020fb
mov eax, dword [rbp - 0x190]
test eax, eax
jne 0x4020fb
mov eax, dword [rbp - 0x18c]
test eax, eax
jne 0x4020fb
mov eax, dword [rbp - 0x188]
test eax, eax
je 0x4020fb
mov edx, dword [rbp - 0x188]
mov eax, dword [rbp - 0x194]
cmp edx, eax
jne 0x4020bd
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x401040
mov dword [rbp - 0x17c], 0
mov eax, dword [rbp - 0x188]
cmp dword [rbp - 0x17c], eax
jge 0x402096
lea rax, [rbp - 0x40]
mov esi, 0x56
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
lea rax, [rbp - 0x40]
mov esi, 0x59
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x17c], 1
jmp 0x40205d
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x1b8]
mov rsi, rdx
mov rdi, rax
call 0x401060
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a7c
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1a1]
mov rax, qword [rbp - 0x1b8]
mov esi, 0x402e50
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402a7c
mov eax, dword [rbp - 0x190]
test eax, eax
je 0x402153
mov edx, dword [rbp - 0x190]
mov eax, dword [rbp - 0x19c]
cmp edx, eax
jl 0x402153
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1a1]
mov rax, qword [rbp - 0x1b8]
mov esi, 0x402e50
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402a7c
mov eax, dword [rbp - 0x188]
test eax, eax
je 0x4021ab
mov edx, dword [rbp - 0x188]
mov eax, dword [rbp - 0x194]
cmp edx, eax
jl 0x4021ab
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1a1]
mov rax, qword [rbp - 0x1b8]
mov esi, 0x402e50
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402a7c
mov eax, dword [rbp - 0x198]
test eax, eax
je 0x402203
mov edx, dword [rbp - 0x198]
mov eax, dword [rbp - 0x18c]
cmp edx, eax
jl 0x402203
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1a1]
mov rax, qword [rbp - 0x1b8]
mov esi, 0x402e50
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402a7c
mov edx, dword [rbp - 0x19c]
mov eax, dword [rbp - 0x190]
sub edx, eax
mov eax, edx
mov dword [rbp - 0x19c], eax
mov edx, dword [rbp - 0x194]
mov eax, dword [rbp - 0x188]
sub edx, eax
mov eax, edx
mov dword [rbp - 0x194], eax
mov edx, dword [rbp - 0x18c]
mov eax, dword [rbp - 0x198]
sub edx, eax
mov eax, edx
mov dword [rbp - 0x18c], eax
mov ecx, dword [rbp - 0x18c]
mov edx, dword [rbp - 0x194]
mov esi, dword [rbp - 0x19c]
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.solve_abi:cxx11_
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
test eax, eax
sete al
test al, al
je 0x40229c
lea rdx, [rbp - 0x160]
mov rax, qword [rbp - 0x1b8]
mov rsi, rdx
mov rdi, rax
call 0x401060
jmp 0x4027fb
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1a1]
lea rax, [rbp - 0x140]
mov esi, str.RYB_____________________
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x178], 0
mov eax, dword [rbp - 0x190]
cmp dword [rbp - 0x178], eax
jge 0x40231e
lea rax, [rbp - 0x140]
mov esi, 0x47
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
lea rax, [rbp - 0x140]
mov esi, 0x52
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x178], 1
jmp 0x4022df
mov dword [rbp - 0x174], 0
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 0x174]
setg al
test al, al
je 0x402455
mov eax, dword [rbp - 0x174]
movsxd rdx, eax
lea rax, [rbp - 0x160]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x52
sete al
test al, al
je 0x402449
mov eax, dword [rbp - 0x174]
movsxd rdx, eax
lea rax, [rbp - 0x60]
lea rsi, [rbp - 0x160]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov eax, dword [rbp - 0x174]
add eax, 1
movsxd rdx, eax
lea rax, [rbp - 0x40]
lea rsi, [rbp - 0x160]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0x120]
lea rdx, [rbp - 0x140]
lea rcx, [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
lea rax, [rbp - 0x100]
lea rdx, [rbp - 0x40]
lea rcx, [rbp - 0x120]
mov rsi, rcx
mov rdi, rax
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
lea rdx, [rbp - 0x100]
lea rax, [rbp - 0x160]
mov rsi, rdx
mov rdi, rax
call 0x400fe0
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402455
add dword [rbp - 0x174], 1
jmp 0x402328
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1a1]
lea rax, [rbp - 0xe0]
mov esi, 0x402e53
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x170], 0
mov eax, dword [rbp - 0x188]
cmp dword [rbp - 0x170], eax
jge 0x4024d7
lea rax, [rbp - 0xe0]
mov esi, 0x56
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
lea rax, [rbp - 0xe0]
mov esi, 0x59
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x170], 1
jmp 0x402498
mov dword [rbp - 0x16c], 0
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 0x16c]
setg al
test al, al
je 0x402605
mov eax, dword [rbp - 0x16c]
movsxd rdx, eax
lea rax, [rbp - 0x160]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x59
sete al
test al, al
je 0x4025f9
mov eax, dword [rbp - 0x16c]
movsxd rdx, eax
lea rax, [rbp - 0x60]
lea rsi, [rbp - 0x160]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov eax, dword [rbp - 0x16c]
add eax, 1
movsxd rdx, eax
lea rax, [rbp - 0x40]
lea rsi, [rbp - 0x160]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0xa0]
lea rdx, [rbp - 0xe0]
lea rcx, [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
lea rax, [rbp - 0x80]
lea rdx, [rbp - 0x40]
lea rcx, [rbp - 0xa0]
mov rsi, rcx
mov rdi, rax
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x160]
mov rsi, rdx
mov rdi, rax
call 0x400fe0
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402605
add dword [rbp - 0x16c], 1
jmp 0x4024e1
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1a1]
lea rax, [rbp - 0xc0]
mov esi, 0x402e55
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x168], 0
mov eax, dword [rbp - 0x198]
cmp dword [rbp - 0x168], eax
jge 0x402687
lea rax, [rbp - 0xc0]
mov esi, 0x4f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
lea rax, [rbp - 0xc0]
mov esi, 0x42
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
add dword [rbp - 0x168], 1
jmp 0x402648
mov dword [rbp - 0x164], 0
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 0x164]
setg al
test al, al
je 0x4027b5
mov eax, dword [rbp - 0x164]
movsxd rdx, eax
lea rax, [rbp - 0x160]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x42
sete al
test al, al
je 0x4027a9
mov eax, dword [rbp - 0x164]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
lea rsi, [rbp - 0x160]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov eax, dword [rbp - 0x164]
add eax, 1
movsxd rdx, eax
lea rax, [rbp - 0x80]
lea rsi, [rbp - 0x160]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0x60]
lea rdx, [rbp - 0xc0]
lea rcx, [rbp - 0xa0]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
lea rax, [rbp - 0x40]
lea rdx, [rbp - 0x80]
lea rcx, [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x160]
mov rsi, rdx
mov rdi, rax
call 0x400fe0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4027b5
add dword [rbp - 0x164], 1
jmp 0x402691
lea rdx, [rbp - 0x160]
mov rax, qword [rbp - 0x1b8]
mov rsi, rdx
mov rdi, rax
call 0x401060
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a7c
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402a62
mov rbx, rax
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402939
mov rbx, rax
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40294d
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40295e
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a53
mov rbx, rax
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402a53
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40299a
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4029ae
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4029bf
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a3f
mov rbx, rax
lea rax, [rbp - 0x1a1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402a3f
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4029f5
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a06
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a17
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a2b
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a3f
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a53
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x1b8]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x402a97
call sym.imp.__stack_chk_fail
add rsp, 0x1b8
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x48]
mov rdi, rax
call sym.reader
mov dword [rbp - 0x44], 0
mov eax, dword [rbp - 0x48]
cmp dword [rbp - 0x44], eax
jge 0x402b43
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x401d42
lea rax, [rbp - 0x40]
mov esi, 0x402e50
mov rdi, rax
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
test al, al
je 0x402b06
lea rax, [rbp - 0x40]
mov esi, 0x402e57
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov eax, dword [rbp - 0x44]
add eax, 1
mov esi, eax
mov edi, 0x402e62
mov eax, 0
call sym.imp.printf
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rdi, rax
call sym.imp.puts
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
add dword [rbp - 0x44], 1
jmp 0x402acc
mov eax, 0
mov rdx, qword [rbp - 0x18]
xor rdx, qword fs:[0x28]
je 0x402b78
jmp 0x402b73
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x402bba
cmp dword [rbp - 8], 0xffff
jne 0x402bba
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.reader
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.reader
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.reader
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call 0x401110
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
jmp 0x402c81
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x402c99
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x401060
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::compare
test eax, eax
sete al
leave
ret
nop word cs:[rax + rax]
nop dword [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x2010b6]
push rbp
lea rbp, [rip + 0x2010be]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x402d76
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x402d60
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, 0
add byte [rax], al
add eax, 0x6000000
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
or al, byte [rax]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rax]
push rdx
add byte [rcx], bl
add byte [rcx + 0x4d], cl
push rax
push r11
push rbx
add byte [r11 + 0x61], r8b
jae 0x402ecb
and byte [rbx], ah
and esp, dword [rip + 0x203a64]
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
int3
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], dh
loope 0x402e7e
lcall [rax]
add dword [rax], eax
add byte [rax], ah
jrcxz 0x402e86
call 0x16402e8d
in al, 0xff
inc dword [rax + 1]
add byte [rax], al
mov al, 0xe4
jmp qword [rax + 1]
add byte [rax], al
pop rsi
in eax, 0xff
inc dword [rax + 0x7000001]
out 0xff, al
jmp qword [rax - 0x65ffffff]
out 0xff, al
inc eax
add dword [rax], eax
add byte [rax - 0x1f000019], ah
add dword [rax], eax
add dl, cl
call 0x2412ec1
add byte [rax], al
adc al, 0xe9
jmp qword [rax]
add al, byte [rax]
add byte [rbx + 0x40ffffe9], al
add al, byte [rax]
add ch, bl
jmp 0x2a12ed9
add byte [rax], al
jmp qword [rax - 0x2dfffffe]
out dx, al
dec eax
add al, byte [rax]
add byte [rcx], dh
cld
push rax
add al, byte [rax]
add byte [rdi], cl
std
inc eax
add eax, dword [rax]
add byte [rbp - 3], cl
jmp rax
add eax, dword [rax]
add byte [rdx - 3], ah
lcall [rax]
add eax, dword [rax]
add byte [rax - 3], dh
cmp byte [rbx], al
add byte [rax], al
stosd dword [rdi], eax
std
lcall [rax + 3]
add byte [rax], al
xor dh, bh
inc dword [rax + 0x77000003]
jmp qword [rax - 0x4ffffffd]
inc dword [rax]
add al, 0
add byte [rax], ah
dec dword [rax + 4]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402f5f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor dl, ah
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402f8f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, ah
jmp rax
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add dh, cl
loop 0x402fba
lcall [rdx]
adc byte [rsi + 0x60d4302], al
add dl, byte [rbp + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
add byte fs:[rax], al
add byte [rax - 0x1d], cl
ljmp [rsi]
adc byte [rsi + 0x60d4302], al
add ch, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
test byte [rax], al
add byte [rax], al
jrcxz 0x402ffa
ljmp [rcx]
adc byte [rsi + 0x60d4302], al
add ah, byte [rsp + rcx + 0x807]
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rdi - 0x1c], bl
call qword [rbx]
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add dl, dl
in al, 0xff
inc dword [rsi]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add eax, dword [rcx]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
mov eax, 0x2affffe5
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add esp, dword [rip + 0x8070c01]
add byte [rax + rax], bl
add byte [rax], al
add al, 1
add byte [rax], al
ret 0xffe6
dec dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 1
add byte [rax], al
in al, dx
out 0xff, al
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add dword [rax], r8d
add byte [rbx], bh
out 0xff, eax
lcall [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add dword fs:[rax], eax
add byte [rbp - 0x19], dh
ljmp [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x403111
add eax, dword [rax + 0x11]
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
movabs al, byte [0x40000048affffe7]
xor al, byte [rax]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x7b
add al, 0xc
or byte [rax + rax], ah
add byte [rax], al
add byte [rax], r8b
add byte [rdx], al
in al, dx
lcall [rdi + 0xd]
add byte [rax], al
add al, 0xfb
xor al, byte [rax]
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
push rdx
or eax, 0x8070c
add byte [rax + rax], ah
add byte [rax], al
je 0x403166
add byte [rax], al
cmp ecx, edi
fiadd word [rax]
add byte [rax], al
add al, 0xb4
xor eax, dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 2
add byte [rax], al
cli
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 2
add byte [rax], al
xor dl, bh
cmp eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jbe 0x4031cf
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rax]
add byte [rax], al
cli
inc dword [rbp + 0x4000000]
xor eax, dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
jnp 0x4031f7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
test al, 0xfa
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add bh, cl
cli
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte [rax]
add byte [rdi - 7], al
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x403257
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 2
add byte [rax], al
stc
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rbx + rax], al
add byte [rax], al
test al, 0xfa
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x4032b2
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
add r8, qword [rax]
add al, dl
cli
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
and esp, dword [rax + 5]
fisttp word [rax]
add byte [rcx + rax + 0x8ac7e], ah
jmp 0x4032e7
int3
add edi, dword [rbp + 0x6f40008]
fisttp word [rax]
add dh, dl
add eax, 0xf40008ce
or byte [rip - 0x10000], al
add dword [rcx + rax + 0x452c], esi
test dword [rdx], eax
int 0x15
add al, dh
add al, byte [rip - 0x62ffea19]
add al, 0x16
test byte [rsi], dl
add byte [rax + 0x169e0505], cl
add byte [rbp + 0x16bb1606], dh
add byte [rax + 0x16d50507], ah
add al, bh
add eax, 0xd00016f2
or byte [rip - 0x57ffe871], al
or dword [rip - 0x60ffe854], eax
or al, byte [rip + 0xaff0000]
add eax, 0xba0017c9
or ebx, dword [rbx + 0x1a8e01]
test byte [rax - 0x6cffe767], 0xd
add eax, 0xb0001888
or eax, 0x17f405
leave
or eax, 0x17e005
mov eax, 0x18ad050e
add bl, dh
wait
add edx, edi
sbb dword [rax], eax
scasd eax, dword [rdi]
adc byte [rip - 0x33ffe706], al
adc byte [rip - 0x19ffe717], al
adc byte [rip - 0x3ffe72b], al
adc byte [rip - 0x17ffe73c], al
adc dword [rip - 0x5cffe675], eax
adc bl, byte [rsi + 0x19e601]
loop 0x4033ab
add eax, 0xff0019d2
adc eax, dword [rip - 0x69ffe63f]
adc al, 5
mov al, 0x19
add byte [rsp + rdx + 0x199f05], ch
loop 0x4033c5
fadd dword [rax + rax]
add bh, bh
inc dword [rcx]
and byte [rax], al
add byte [rbx + 0x45], cl
mov eax, 0x1cd0001
add eax, 0xffff0000
add dword [rdx + rsi], ecx
add eax, 0x5450000
add byte [rcx + 5], r12b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
mov ebp, 0x402b
add byte [rax], al
add byte [rax + 0x12], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x403e51
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x409ea2
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rip], 0
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 2], bh
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], ch
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax], bl
or al, 0x40
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add al, dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400f], dh
add byte [rax], al
add dh, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xf, al
add byte [rax], al
add byte [rax], al
add dh, dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte es:[rax], al
add byte [rax], al
add byte [rax], al
adc byte ss:[rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], r8b
add byte [rax], al
add byte [rax], al
push rsi
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40408a
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4010], al
add byte [rax], al
add byte [rsi + 0x4010], dl
add byte [rax], al
add byte [rsi + 0x4010], ah
add byte [rax], al
add byte [rsi + 0x4010], dh
add byte [rax], al
add dh, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x10, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword es:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword ss:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], r8d
add byte [rax], al
add byte [rax], al
push rsi
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc word [rax], ax
add byte [rax], al
add byte [rax], al
jbe 0x40410b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x404188
je 0x404191
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40419f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40419c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add al, dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
sbb byte [rax + rax*2], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x400c], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0xf], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
movabs al, byte [0x400f]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40118000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0x4011], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
movabs al, byte [0x402d]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + 0x2e], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x2f], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add ah, dl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
call 0x40a372
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x603df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x12], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x12], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40a50a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], ch
add byte [rax], dl
add byte [rax + 0x402d], ch
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x402d], ch
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x402d], ch
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rbp + rbp + 0x40], ch
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rcx], eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov al, 0x2d
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x402d], dh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov dl, 0x2d
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov ah, 0x2d
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x4045cb
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov eax, 0x402d
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rbp + rbp + 0x40], bh
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x1000001
add byte [rax], dl
add al, al
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd dword [rcx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
enter 0x402d, 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add ah, cl
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add al, dl
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add ah, dl
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x40468c
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
fsubr dword [rip + 0x40]
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add ah, bl
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 2
add byte [rcx], al
add byte [rax], dl
add al, ah
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add ah, ah
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rbx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
call 0x408722
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, byte [rbx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
in al, dx
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add al, dh
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rbx], eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
hlt
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add al, bh
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld dword [rbx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
cld
sub eax, 0x40
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 4
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, 0x1000004
add byte [rax], dl
add byte [rsi + rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x4047c6
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
or al, 0x2e
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax], dl
add byte cs:[rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rsi + rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax], bl
add byte cs:[rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb al, 0x2e
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
and byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
and al, 0x2e
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add eax, 0x10000
adc byte [rax], al
sub byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sub al, 0x2e
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild word [rip + 0x10000]
adc byte [rax], al
xor byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x1000006
add byte [rax], dl
add byte [rsi + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
cmp byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
cmp al, 0x2e
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x2e], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
add byte [rax], al
add al, byte [rax]
add byte [rdi + 0x2b], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
add al, byte [rax]
add byte [rbp + 0x402b], bh
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
sal byte [rdx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000007], ah
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
jo 0x4049f0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], al
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 7], bl
add byte [rax], al
add byte [rax], al
adc al, 0
clc
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rdi], 0
add byte [rax], al
add byte [rax + rax], dl
call 0x40aa4a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 7], bh
add byte [rax], al
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2000000b], bl
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000007], al
add byte [rsi], cl
add dl, dl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or cl, byte [rax]
add byte [rax], al
adc al, byte [rax]
add byte [rdx + 0x1d], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xd], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb ecx, dword [rax]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x402d], dl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000b], ah
add byte [rsi], cl
add byte [rax + 0x4011], dl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000008], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
or byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
or byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], bl
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rcx], bh
or byte [rax], al
add byte [rdx], dl
add byte [rdi], cl
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx + 0x120000], al
add byte [rdx], cl
adc eax, 0x40
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000009], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000009], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
or dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add ch, dl
or dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rdi + 0x14], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rdx + rcx], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
xor byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
or al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rbp + 0x18], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
or r8b, byte [r8]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xa], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
or al, byte [rax]
add byte [rcx], dl
add byte [rax], dl
add byte [rax + 0x402d], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fimul dword [rdx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add bl, dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x2200000b
add byte [rsi], cl
add byte [rax + 0x402c], ah
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rbx], 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000b], bl
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1200000b], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
or eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax + rax], ecx
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1100000c], cl
add bl, byte [rdx]
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
or al, 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ah
sub eax, 0x40
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
or al, 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ah
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
or al, 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rdi + rdx + 0x40], al
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xc], dh
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
adc byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000c], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1200000c], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x120000], cl
add dh, cl
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
test eax, 0
add byte [rax], al
add byte [rax], bl
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ecx, dword [rip + 0x120000], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000d], bh
add byte [rsi], cl
add al, ah
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
sbb byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
adc al, byte [rax]
add byte [rsi + 0x4012], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add ah, dl
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x2200000e
add byte [rsi], cl
add bh, ah
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1200000f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
sldt word [rax]
adc byte [rax], al
sbb al, byte [rax]
adc byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0x11], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000010], bl
add byte [rsi], cl
add byte [rax + 0x4018], bh
add byte [rax], al
add byte [rdx + 4], cl
add byte [rax], al
add byte [rcx + 0x12000010], dh
add byte [rsi], cl
add byte [rcx + 0x402a], ah
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx], ah
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
js 0x405019
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000010], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x4050aa
jne 0x40509e
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40505e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4050dc
jb 0x4050e2
pop rdi
jne 0x4050eb
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x4050e5
je 0x4050e1
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x405101
jb 0x405107
pop rdi
jne 0x405110
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x405113
jns 0x405103
outsb dx, byte gs:[rsi]
je 0x40511a
jns 0x4050aa
jb 0x40510e
insd dword [rdi], dx
pop rdi
jne 0x405120
insd dword [rdi], dx
jns 0x4050b6
pop rdi
pop rdi
jb 0x40511c
insd dword [rdi], dx
pop rdi
jne 0x40512e
insd dword [rdi], dx
jns 0x405123
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40512e
jns 0x40512e
outsb dx, byte gs:[rsi]
je 0x405145
jns 0x4050d5
insd dword [rdi], dx
imul ebp, dword [rsi + 0x2e], 0x707063
pop rdi
pop rdx
push rbx
je 0x40512f
xor dword [rcx], edi
jo 0x405150
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x405168
jb 0x40516b
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x40514a
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405169
jb 0x405174
add byte [rdi + 0x5a], bl
push rbx
je 0x40515f
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x40516c
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405193
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x4051ae
je 0x4051a3
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4051ba
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x4051a2
xor dword [rax], esi
jb 0x4051bd
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4051b4
xor dword [rcx], esi
je 0x4051de
jns 0x4051cd
je 0x4051df
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4051c7
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x4051f6
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4051bf
xor eax, 0x65676572
js 0x4051f4
movsxd rbp, dword [rdi + 0x6e]
jae 0x40520e
outsb dx, byte [rsi]
je 0x405211
xor rax, 0x73616369
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4051de
xor eax, 0x65676572
js 0x405213
movsxd rbp, dword [rdi + 0x6e]
jae 0x40522d
outsb dx, byte [rsi]
je 0x405230
outsb dx, byte ss:[rsi]
outsd dx, dword [rsi]
jae 0x405238
jae 0x40520b
add byte [rdi + 0x5a], bl
push rbx
je 0x4051fe
xor eax, 0x65676572
js 0x405233
movsxd rbp, dword [rdi + 0x6e]
jae 0x40524d
outsb dx, byte [rsi]
je 0x405250
cmp byte [rdi + 0x70], r13b
je 0x40524c
insd dword [rdi], dx
imul edi, dword [rdx + 0x65], 0x5a5f0045
push rbx
je 0x405220
xor eax, 0x65676572
js 0x405255
movsxd rbp, dword [rdi + 0x6e]
jae 0x40526f
outsb dx, byte [rsi]
je 0x405272
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x40526d
add byte [r15 + 0x5a], r11b
push rbx
je 0x405241
xor eax, 0x65676572
js 0x405276
movsxd rbp, dword [rdi + 0x6e]
jae 0x405290
outsb dx, byte [rsi]
je 0x405293
xor qword [rax], r14
push r11
movsxd rsi, dword [rdx + 0x69]
jo 0x4052a1
add byte [r15 + 0x5a], r11b
push rbx
je 0x405266
xor eax, 0x65676572
js 0x40529b
movsxd rbp, dword [rdi + 0x6e]
jae 0x4052b5
outsb dx, byte [rsi]
je 0x4052b8
xor rax, 0x69736162
movsxd rax, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x405285
xor eax, 0x65676572
js 0x4052ba
movsxd rbp, dword [rdi + 0x6e]
jae 0x4052d4
outsb dx, byte [rsi]
je 0x4052d7
cmp byte [rbp + 0x78], r12b
je 0x4052cf
outsb dx, byte [rsi]
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4052a7
xor eax, 0x65676572
js 0x4052dc
movsxd rbp, dword [rdi + 0x6e]
jae 0x4052f6
outsb dx, byte [rsi]
je 0x4052f9
xor r12, qword [rcx + 0x77]
imul eax, dword [rbp], 0x5f
pop rdx
push rbx
je 0x4052c4
xor eax, 0x65676572
js 0x4052f9
movsxd rbp, dword [rdi + 0x6e]
jae 0x405313
outsb dx, byte [rsi]
je 0x405316
xor al, 0x67
jb 0x40530d
jo 0x4052ef
add byte [rdi + 0x5a], bl
push rbx
je 0x4052e2
xor eax, 0x65676572
js 0x405317
movsxd rbp, dword [rdi + 0x6e]
jae 0x405331
outsb dx, byte [rsi]
je 0x405334
xor rax, 0x65726765
jo 0x40530e
add byte [rdi + 0x5a], bl
push rbx
je 0x405301
xor eax, 0x65676572
js 0x405336
movsxd rbp, dword [rdi + 0x6e]
jae 0x405350
outsb dx, byte [rsi]
je 0x405353
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40534a
push 0x6665645f
jne 0x40535b
je 0x405336
add byte [rdi + 0x5a], bl
push rbx
je 0x405329
xor eax, 0x65676572
js 0x40535e
movsxd rbp, dword [rdi + 0x6e]
jae 0x405378
outsb dx, byte [rsi]
je 0x40537b
xor qword [rbx], r14
insd dword [rdi], dx
je 0x405372
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x405351
xor eax, 0x65676572
js 0x405386
movsxd rbp, dword [rdi + 0x6e]
jae 0x4053a0
outsb dx, byte [rsi]
je 0x4053a3
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40539a
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x405379
xor eax, 0x65676572
js 0x4053ae
movsxd rbp, dword [rdi + 0x6e]
jae 0x4053c8
outsb dx, byte [rsi]
je 0x4053cb
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4053c2
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
ja 0x4053ae
add byte [rdi + 0x5a], bl
push rbx
je 0x4053a1
xor eax, 0x65676572
js 0x4053d6
movsxd rbp, dword [rdi + 0x6e]
jae 0x4053f0
outsb dx, byte [rsi]
je 0x4053f3
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4053ea
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
ja 0x4053d6
add byte [rdi + 0x5a], bl
push rbx
je 0x4053c9
xor eax, 0x65676572
js 0x4053fe
movsxd rbp, dword [rdi + 0x6e]
jae 0x405418
outsb dx, byte [rsi]
je 0x40541b
cmp qword [rbp + 0x61], r13
je 0x405411
push 0x796e615f
add byte [r15 + 0x5a], r11b
push rbx
je 0x4053ec
xor eax, 0x65676572
js 0x405421
movsxd rbp, dword [rdi + 0x6e]
jae 0x40543b
outsb dx, byte [rsi]
je 0x40543e
xor qword [rbp*2 + 0x68637461], r14
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
je 0x405437
outsb dx, byte [rsi]
jne 0x405447
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x405415
xor eax, 0x65676572
js 0x40544a
movsxd rbp, dword [rdi + 0x6e]
jae 0x405464
outsb dx, byte [rsi]
je 0x405467
xor qword [rsi], r14
insd dword [rdi], dx
je 0x40545e
push 0x6e6f635f
je 0x40546b
outsb dx, byte [rsi]
jne 0x405474
jne 0x40547a
add byte [r15 + 0x5a], r11b
push rbx
je 0x405440
xor eax, 0x65676572
js 0x405475
movsxd rbp, dword [rdi + 0x6e]
jae 0x40548f
outsb dx, byte [rsi]
je 0x405492
xor qword [rsi], r14
insd dword [rdi], dx
je 0x405489
push 0x6572705f
jbe 0x40548c
jbe 0x405491
imul ebp, dword [rbp + rax*2], 0x534e5a5f
je 0x40546b
xor eax, 0x65676572
js 0x4054a0
movsxd rbp, dword [rdi + 0x6e]
jae 0x4054ba
outsb dx, byte [rsi]
je 0x4054bd
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x4054be
je 0x4054b3
jne 0x4054c6
je 0x4054a1
add byte [rdi + 0x5a], bl
push rbx
je 0x405494
xor eax, 0x65676572
js 0x4054c9
movsxd rbp, dword [rdi + 0x6e]
jae 0x4054e3
outsb dx, byte [rsi]
je 0x4054e6
xor qword [rax], r14
outsw dx, word [rsi]
jb 0x4054e7
je 0x4054dc
jae 0x4054e4
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4054b9
xor eax, 0x65676572
js 0x4054ee
movsxd rbp, dword [rdi + 0x6e]
jae 0x405508
outsb dx, byte [rsi]
je 0x40550b
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x40550c
je 0x405501
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4054ef
add byte [rdi + 0x5a], bl
push rbx
je 0x4054e2
xor eax, 0x65676572
js 0x405517
movsxd rbp, dword [rdi + 0x6e]
jae 0x405531
outsb dx, byte [rsi]
je 0x405534
xor qword [rdi], r14
outsw dx, word [rsi]
jb 0x405535
je 0x40552a
imul si, word [rdx + 0x73], 0x5f74
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
jns 0x40551b
add byte [rdi + 0x5a], bl
push rbx
je 0x40550e
xor eax, 0x65676572
js 0x405543
movsxd rbp, dword [rdi + 0x6e]
jae 0x40555d
outsb dx, byte [rsi]
je 0x405560
xor qword [rbx], r14
jb 0x405565
outsd dx, dword [rsi]
jb 0x405555
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x405562
add byte [r15 + 0x5a], r11b
push rbx
je 0x405536
xor eax, 0x65676572
js 0x40556b
movsxd rbp, dword [rdi + 0x6e]
jae 0x405585
outsb dx, byte [rsi]
je 0x405588
xor qword [rcx], r14
jb 0x40558d
outsd dx, dword [rsi]
jb 0x40557d
movsxd rsi, dword [rcx + rdi*2 + 0x70]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40555c
xor eax, 0x65676572
js 0x405591
movsxd rbp, dword [rdi + 0x6e]
jae 0x4055ab
outsb dx, byte [rsi]
je 0x4055ae
xor qword [rdx], r14
jb 0x4055b3
outsd dx, dword [rsi]
jb 0x4055a3
jae 0x4055aa
jo 0x4055af
add byte [r15 + 0x5a], r11b
push rbx
je 0x405583
xor eax, 0x65676572
js 0x4055b8
movsxd rbp, dword [rdi + 0x6e]
jae 0x4055d2
outsb dx, byte [rsi]
je 0x4055d5
xor qword [rbx], r14
jb 0x4055da
outsd dx, dword [rsi]
jb 0x4055ca
movsxd rbp, dword [rbx + 0x72]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4055ab
xor eax, 0x65676572
js 0x4055e0
movsxd rbp, dword [rdi + 0x6e]
jae 0x4055fa
outsb dx, byte [rsi]
je 0x4055fd
xor qword [rcx], r14
jb 0x405602
outsd dx, dword [rsi]
jb 0x4055f2
jb 0x4055f7
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x4055d1
xor eax, 0x65676572
js 0x405606
movsxd rbp, dword [rdi + 0x6e]
jae 0x405620
outsb dx, byte [rsi]
je 0x405623
xor qword [rcx], r14
jb 0x405628
outsd dx, dword [rsi]
jb 0x405618
jo 0x40561c
jb 0x405622
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
push rbx
je 0x4055f7
xor eax, 0x65676572
js 0x40562c
movsxd rbp, dword [rdi + 0x6e]
jae 0x405646
outsb dx, byte [rsi]
je 0x405649
xor qword [rcx], r14
jb 0x40564e
outsd dx, dword [rsi]
jb 0x40563e
jb 0x405643
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40561d
xor eax, 0x65676572
js 0x405652
movsxd rbp, dword [rdi + 0x6e]
jae 0x40566c
outsb dx, byte [rsi]
je 0x40566f
xor qword [0x726f7272], r14
pop rdi
jb 0x40566c
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x405646
xor eax, 0x65676572
js 0x40567b
movsxd rbp, dword [rdi + 0x6e]
jae 0x405695
outsb dx, byte [rsi]
je 0x405698
xor qword [rcx], r14
jb 0x40569d
outsd dx, dword [rsi]
jb 0x40568d
jb 0x405691
outsb dx, byte [rsi]
add byte gs:[r15d + 0x5a], r11b
push rbx
je 0x40566c
xor eax, 0x65676572
js 0x4056a1
movsxd rbp, dword [rdi + 0x6e]
jae 0x4056bb
outsb dx, byte [rsi]
je 0x4056be
xor qword [rcx], r14
jb 0x4056c3
outsd dx, dword [rsi]
jb 0x4056b3
jae 0x4056c6
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x405692
xor eax, 0x65676572
js 0x4056c7
movsxd rbp, dword [rdi + 0x6e]
jae 0x4056e1
outsb dx, byte [rsi]
je 0x4056e4
xor qword [rip + 0x6f727265], r14
jb 0x4056d9
jb 0x4056e4
jo 0x4056e6
je 0x4056c9
add byte [rdi + 0x5a], bl
push rbx
je 0x4056bc
xor eax, 0x65676572
js 0x4056f1
movsxd rbp, dword [rdi + 0x6e]
jae 0x40570b
outsb dx, byte [rsi]
je 0x40570e
xor qword [rsi], r14
jb 0x405713
outsd dx, dword [rsi]
jb 0x405703
movsxd rbp, dword [rdi + 0x6d]
jo 0x405715
js 0x405715
je 0x405727
add byte [r15 + 0x5a], r11b
push rbx
je 0x4056e7
xor eax, 0x65676572
js 0x40571c
movsxd rbp, dword [rdi + 0x6e]
jae 0x405736
outsb dx, byte [rsi]
je 0x405739
xor qword [rcx], r14
jb 0x40573e
outsd dx, dword [rsi]
jb 0x40572e
jae 0x405745
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x405714
pop rdi
pop rdi
je 0x405743
imul ebp, dword [rsp + rcx*2 + 0x31], 0x5f535f39
imul ebp, dword [rsi + 0x76], 0x64696c61
pop rdi
jae 0x405768
je 0x40575c
pop rdi
imul esp, dword [rbp + rax*2], 0x31345a5f
pop rdi
pop rdi
jae 0x405778
je 0x405770
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x40577e
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x405794
jb 0x405797
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x4057ac
pop rdi
pop r15
pop rdi
pop rdx
jb 0x4057a5
jb 0x405797
imul eax, dword [rax], 0x52465f5f
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4057f6
jns 0x4057f6
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405807
jns 0x405807
jae 0x40581e
jb 0x405821
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x4057f0
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405825
push r10
push rbx
je 0x4057fd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40583c
movsxd rbx, dword [rdi + 0x73]
je 0x40584a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405845
je 0x40585a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x40582d
jb 0x405864
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405868
pop rdi
jb 0x40586b
jb 0x40586f
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x405885
push r11
cmp byte [rdi], bl
jo 0x405893
je 0x405883
push 0x755f7261
outsb dx, byte [rsi]
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x65]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x355a5f00
jae 0x4058ae
insb byte [rdi], dx
jbe 0x4058a7
xor eax, 0x31787863
xor dword [rsi], esi
jo 0x4058bf
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6c5f5f00
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push r11
je 0x4058ad
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4058ec
movsxd rbx, dword [rdi + 0x73]
je 0x4058fa
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4058f5
je 0x40590a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x40591d
jae 0x40591f
jb 0x4058f2
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4058fd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40593c
movsxd rbx, dword [rdi + 0x73]
je 0x40594a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405945
je 0x40595a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40598a
jb 0x40598d
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40597f
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x4059a0
jae 0x405930
jo 0x4059a7
je 0x4059a7
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4059b7
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4059b2
je 0x4059c7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x40599d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4059dc
movsxd rbx, dword [rdi + 0x73]
je 0x4059ea
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r10
push r11
cmp byte [rdi + 0x53], bl
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4059cd
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
ja 0x405a2b
imul esi, dword [rbp + 0x72], 0x5f006369
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x405a40
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x635f5f00
js 0x405a45
pop rdi
je 0x405a4d
js 0x405a53
je 0x405a2c
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x365a5f00
ja 0x405a70
imul esi, dword [rbp + 0x72], 0x5f006378
pop rdx
jb 0x405a6f
jb 0x405a61
push rbx
je 0x405a4a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405a89
movsxd rbx, dword [rdi + 0x73]
je 0x405a97
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405a92
je 0x405aa7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x405a82
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
insd dword [rdi], dx
outsd dx, dword [rsi]
pop rdi
jo 0x405ae1
ja 0x405aec
js 0x405aee
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x405ae5
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x405ad0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405b0f
movsxd rbx, dword [rdi + 0x73]
je 0x405b1d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405b18
je 0x405b2d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], ah
je 0x405b44
push 0x755f7261
outsb dx, byte [rsi]
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x65]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4f495f00
pop rdi
jae 0x405b75
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x405b47
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405b86
movsxd rbx, dword [rdi + 0x73]
je 0x405b94
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405b8f
je 0x405ba4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
ja 0x405bce
imul esi, dword [rbp + 0x72], 0x63634b50
add byte [rdi + 0x5a], bl
push rbx
je 0x405bda
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405bd5
je 0x405bea
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x405bc0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405bff
movsxd rbx, dword [rdi + 0x73]
je 0x405c0d
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
cmp byte [rdi + 0x52], bl
push r11
cmp byte [rdi], bl
pop rdi
push r12
pop r15
jb 0x405c1f
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x405c34
pop rdi
jae 0x405c4a
jb 0x405c4d
add byte [rdi + 0x5a], bl
push rbx
je 0x405c17
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405c56
movsxd rbx, dword [rdi + 0x73]
je 0x405c64
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405c5f
je 0x405c74
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
ja 0x405c9b
imul esi, dword [rbp + 0x72], 0x634b50
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
jae 0x405cb1
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
jb 0x405cc4
jb 0x405cb6
js 0x405c66
pop rdi
pop rdx
ja 0x405cdd
imul esi, dword [rbp + 0x72], 0x534e4b52
je 0x405cac
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405ceb
movsxd rbx, dword [rdi + 0x73]
je 0x405cf9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405cf4
je 0x405d09
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r8, dword [r8]
pop rdi
pop rdi
jae 0x405d1f
pop rdi
jae 0x405d23
jb 0x405d26
add byte [rdi + 0x5f], bl
jae 0x405d2b
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405d0c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405d4b
movsxd rbx, dword [rdi + 0x73]
je 0x405d59
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405d54
je 0x405d69
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x405d78
outsb dx, byte gs:[rsi]
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
jb 0x405da6
jb 0x405d96
movsxd rax, dword [rax]
pop rdi
pop rdx
push r11
je 0x405d86
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405dc5
movsxd rbx, dword [rdi + 0x73]
je 0x405dd3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405dce
je 0x405de3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rbp, dword [rdi + 0x6d]
jo 0x405de5
jb 0x405deb
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push r11
je 0x405dd9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405e18
movsxd rbx, dword [rdi + 0x73]
je 0x405e26
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405e21
je 0x405e36
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
jb 0x405e53
jb 0x405e3c
imul ebp, dword [rcx + 0x69], 0x54527645
pop rdi
push rdx
push rsp
xor byte [rdi + 0x52], bl
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x405e42
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405e81
movsxd rbx, dword [rdi + 0x73]
je 0x405e8f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405e8a
je 0x405e9f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405e8c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405ecb
movsxd rbx, dword [rdi + 0x73]
je 0x405ed9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405ed4
je 0x405ee9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405eda
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405f19
movsxd rbx, dword [rdi + 0x73]
je 0x405f27
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405f22
je 0x405f37
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rax + 0x75], esi
jae 0x405f3f
pop rdi
movsxd rbp, dword [rbx + 0x45]
movsxd rax, dword [rax + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405f59
jno 0x405f3f
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405f5f
je 0x405f74
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x405f4d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405f8c
movsxd rbx, dword [rdi + 0x73]
je 0x405f9a
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r8
push r11
xor eax, 0x5a5f005f
push r11
je 0x405f7a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405fb9
movsxd rbx, dword [rdi + 0x73]
je 0x405fc7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405fc2
je 0x405fd7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x74735f63
jb 0x405fbe
jbe 0x405fbb
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405fc8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406007
movsxd rbx, dword [rdi + 0x73]
je 0x406015
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406010
je 0x406025
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x406016
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406055
movsxd rbx, dword [rdi + 0x73]
je 0x406063
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40605e
je 0x406073
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x406091
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
js 0x4060c8
pop rdi
jo 0x4060b8
jb 0x4060c8
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x4060da
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x4060ed
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x4060c1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406100
movsxd rbx, dword [rdi + 0x73]
je 0x40610e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406109
je 0x40611e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul eax, dword [rax], 0x6e69616d
add byte [rdi + 0x5a], bl
push rbx
je 0x406123
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406162
movsxd rbx, dword [rdi + 0x73]
je 0x406170
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40616b
je 0x406180
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rax], al
jae 0x4061af
insd dword [rdi], dx
je 0x40619a
add byte [rsi], ch
jae 0x4061b2
jb 0x4061b4
add byte [rsi], ch
jae 0x4061ae
jae 0x4061bc
jb 0x4061be
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4061bf
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4061cd
outsb dx, byte cs:[esi]
jne 0x40619b
jne 0x4061d9
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x4061a9
push 0x687361
jns 0x4061f2
jae 0x4061ff
insd dword [rdi], dx
add byte [rsi], ch
jns 0x4061fa
jae 0x406202
jb 0x406190
outsb dx, byte cs:[esi]
jne 0x4061c3
jbe 0x4061fc
jb 0x40620c
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x4061d0
jbe 0x406209
jb 0x406219
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x406214
insb byte [rdi], dx
jns 0x406223
add byte [rsi], ch
jb 0x40621e
insb byte [rdi], dx
jo 0x40622a
je 0x4061c0
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x4061f9
outsd dx, dword [esi]
je 0x4061cf
je 0x406237
js 0x406248
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40624d
je 0x406243
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x406266
jo 0x40627a
pop rdi
je 0x40626a
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x406278
jns 0x406219
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x406294
jns 0x406225
push 0x63
jb 0x40622a
jns 0x40629c
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x4062a6
je 0x40623c
je 0x4062a2
add byte [rsi], ch
jae 0x4062b9
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x406250
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x4002, 0
add byte [rax], al
add byte [rax], al
enter 2, 0
add byte [rax], al
add byte [rax], al
add rax, qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rip], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
ror byte [rbx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], bl
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0xc
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], ch
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add al, al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 2], bh
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xf], bh
add byte [rax], al
add byte [rax], al
add byte [rax + 0xf], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400f], ah
add byte [rax], al
add byte [rax + 0xf], ah
add byte [rax], al
add al, ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4011], al
add byte [rax], al
add byte [rax + 0x11], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4011], dl
add byte [rax], al
add byte [rax + 0x11], dl
add byte [rax], al
add byte [rdx], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
xchg eax, esp
sub eax, 0
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x402d], ah
add byte [rax], al
add byte [rax + 0x2d], ah
add byte [rax], al
add ch, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2e], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2e], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2f], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2f], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
call 0x4067aa
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
clc
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [r8], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [r8], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ah, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x41], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x406a03
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
