call 0x401e08
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401c20
add ebx, ebx
je 0x401bd6
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401c0e
cmp rbp, -4
ja 0x401c0e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x401bf6
add ecx, 4
mov dl, byte [rax]
je 0x401c1e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401c0e
ret
cld
pop r11
cmp r8b, 2
je 0x401c36
jmp 0x401cb3
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401c46
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401c2e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401c5e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401c4b
sub eax, 3
jb 0x401c7c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401cb3
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401ca3
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401ca1
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401c90
cmp rbp, -0xd00
adc ecx, eax
call 0x401be2
jmp 0x401c36
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401d8c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401d2a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401d76
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401d49
push 0x3a707474
jne 0x401da2
js 0x401d62
jae 0x401d9c
outsb dx, byte cs:[rsi]
je 0x401d5b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401dc9
jb 0x401dbb
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401de6
jb 0x401df9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x213670
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x213670
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401cc4
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401def
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401d9d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1e97
jb 0x401eaf
movsxd rbp, dword [rdi]
jae 0x401ea9
insb byte [rdi], dx
js 0x401eaf
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401e8f
cmp rsi, rcx
jae 0x401e97
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401e76
cmp al, 0x8f
ja 0x401e76
cmp byte [rsi - 2], 0xf
je 0x401e7c
sub al, 0xe8
jg 0x401e79
push rdi
cmp al, 1
ja 0x401e64
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401e67
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401e94
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401eeb
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c2369
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401f2f
mov al, 0xa
jmp 0x401f2f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401f0b
inc ebx
mov al, 0
jmp 0x401f33
mov al, 2
jmp 0x401f33
mov al, 3
jmp 0x401f33
mov al, 0x3c
jmp 0x401f33
push rcx
rcr ah, 1
fstp st(7)
jle 0x401f74
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401f86
jg 0x401f78
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a76fb
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401fd2
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb714f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401fda
cmp esi, 0x21585055
jne 0x401fde
jge 0x401fd0
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401fd3
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401fd7
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x402083
pop rcx
or al, 0x3b
jb 0x402089
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401ffb
jmp 0x401ffd
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661f3e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf54186
in eax, dx
jg 0x402035
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40207b
mov bh, 0x2a
add edi, 0x10
jmp 0x402078
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4020b5
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4020f1
jne 0x402108
fstpnce st(6), st(0)
jle 0x4020d1
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x402107
jrcxz 0x40213b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1c09f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4021ba
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40217a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829674f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4021ed
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x402187
and ecx, 7
or al, 0xeb
jae 0x4021f2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x402227
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x402265
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40221e
push rax
call 0xffffffff868d1f0b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x402228
std
cmp edi, esi
xchg eax, edi
jle 0x40227d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c96809
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40227b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x402269
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x402292
js 0x4022d2
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x402364
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad359f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x402385
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40238a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21e3c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x402318
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
or al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
add al, byte [rdx + 0x90]
add byte [rax], al
add byte [rax], al
add dil, dil
clc
sbb al, byte [rax]
add dl, bl
or byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40243e
je 0x402447
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x402410
mov dh, 0x7d
jbe 0x40240f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x402448
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5280006], bl
add byte [rdx + 7], cl
enter -0x6fd9, 0xf
or byte [rax], al
or byte [rcx], 0
and byte [rax], cl
in al, 0x13
enter 0xa07, 0
push 0xa18000b
test byte [rcx], 0xe4
add ecx, dword [rax + rax]
or eax, 0x8f0b7000
lahf
ror dl, 1
lldt word [rbp + rbp + 0x4f]
and byte [rdi], bl
and byte [rax], dl
add byte [rax + 0x11], ah
add al, dl
mov al, 0x4f
and byte [rdx], dl
add byte [rax + 0x40135f2e], cl
inc byte [rax]
pop rbx
xor edx, dword [rdi]
adc al, 0
call 0xffffffff9f6084a7
adc eax, 0x16f800
add byte [rsi], bh
mov dl, 0x4d
and byte [rdi], bl
add byte [rax], cl
sbb byte [rdi + 0x3f], al
retf
add dword [rcx], ebx
sbb al, byte [rax]
test al, 0x4d
and byte [rdi + 0x20], cl
sbb eax, dword [rax]
rcr byte [rsi + rcx*4], 0xe4
fst qword [rbx + rdx + 0x41701]
int1
dec dword [rsi + rdx*8]
int1
push rsi
neg byte [rbx]
mov edi, 0x170eb589
xchg eax, edx
in al, 0xd
sbb eax, dword [rax + 0x6f]
sbb dword [rsi], ebp
add byte [rdi + rbx*2 - 0x38], 0x60
xor dword [rdi - 0x30], 1
push rbx
xchg eax, edx
shr dword [rsi + 0x477a4f84], -0x60
fcom dword [rbp - 0x6879e6f0]
movsd dword [rdi], dword ptr [rsi]
xlatb
enter 0x61d9, 0x43
scasb al, byte [rdi]
or al, 0x8f
adc ah, byte es:[rsi]
rdmsr
leave
movabs al, byte [0xd88671d90b1f617f]
push rax
xor eax, dword [rsi - 0x197bde50]
add byte [rdi - 0xe], al
ret 0x657b
add eax, 0x4701059f
test dword [rbp + 9], 0x981b5763
adc al, 0x1f
sub al, 0x46
insb byte [rdi], dx
cdqe
outsd dx, dword [rsi]
nop
lea edx, [rdi - 0x4c]
add al, 0x3f
and byte [rsi + rcx*2], ch
mov ds, ebp
lea eax, [rdi]
jns 0x402580
and byte [r11], r8b
or byte [rbx + 0xed66b2], dil
jae 0x402542
mov al, 0x93
or eax, 0x50678767
sub eax, 0x3b061702
jns 0x4025ab
mov eax, 0x2a0cd004
xchg eax, edi
cmp dword [rcx - 0x4e], edi
imul esp, dword [rdx], 0x17
shr byte [rbx], 0x11
add ebx, ebx
out 0x60, eax
sub esi, ebx
mov edi, 0x10ec0213
jbe 0x4025be
add byte [rdx], ah
add ah, byte ss:[rdi + 0xbd9e4f6]
add cl, byte [rdi + 0xcdf1b30]
pop rcx
out 0x10, eax
jb 0x4025c4
xchg eax, ecx
add dword [rdi + 0xe], edi
xor al, byte [rbp + rbx*2 - 0x2f6ca092]
adc dword [rip + 0x2fcf2721], ecx
clts
lahf
mov esi, 0x816164e1
xchg eax, edi
add al, 0xe0
scasd eax, dword [rdi]
xchg byte [rax + 0x388007b1], dl
add dword [rdi - 0x2d], esi
in eax, dx
jb 0x40255d
loopne 0x4025b5
stc
add dh, dl
test byte [rdi], ah
and byte [r10], r13b
xchg eax, esp
add dword [rdi - 0x7cc4fc6f], ebp
pushfq
or eax, 0xd07d1710
cmp eax, ebx
nop
sal byte [rdi + 0x1ae02ff5], 0x65
xchg eax, ecx
sar dword [rax], 0x4d
push rdi
add edi, dword [rdi + 0x72204bac]
lahf
add al, 0x1f
sbb dword [rbp + rdi + 0x108f043b], 0x28
ja 0x402602
ja 0x4025fb
mov al, 4
xlatb
mov al, byte [rdi + rsi*2]
adc byte [rdx], dh
enter -0x676e, -0x4e
out 0xe4, eax
add ecx, dword [rax + 0x10]
mov edi, 0x25195047
adc byte [rcx], bl
in al, dx
push rbx
cmpsd dword [rsi], dword ptr [rdi]
int3
and dword [rdi + 0xe], ecx
ror byte [rax], cl
mov al, 4
cmp byte [rsi + rsi + 0x24], 0xdb
ja 0x4025eb
add bl, byte [rdi - 0x48]
jmp 0x402629
cmp ecx, eax
nop
or eax, 0xe0f877b0
sub al, 0xef
mov ebp, 0x653c9e40
add byte [rax], cl
add eax, 0xc190051d
sahf
nop
ficom dword [rdi]
sub dword [rbx + 0xe], edi
jbe 0x4026a6
mov al, 0x19
xchg bh, ch
push 5
sbb ecx, dword [rdi + 0x29b086c1]
jbe 0x4026a1
xchg eax, edx
adc byte [r10], r14b
fmul st(1)
jo 0x402659
sahf
jl 0x402645
add ch, cl
mov dh, 5
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdi - 0x58], esi
jg 0x4026bb
test byte [rdx], 0xe1
test dl, bh
add eax, 0x7700bddf
and byte [rdi], al
cmp dword [rcx - 0x30], edi
or eax, 0xe40643b6
cmp eax, dword [rbp + rbx*2 + 0x6c01769]
out dx, eax
sbb ah, byte [rsi]
in al, 0xc1
cmpsb byte [rsi], byte ptr [rdi]
mov dword [rdi + 0x40], 0x75e8400b
or byte [rbx], bl
sti
adc eax, dword [rdi]
js 0x40260e
jg 0x4026da
enter 0x2ec1, -0x75
ja 0x4026f6
mov r15b, 0x16
out dx, eax
hlt
add dword [rsi + rcx*8 + 0x63170502], eax
jb 0x40271a
jae 0x402687
mov bh, 0x6f
pop rsp
movsxd rdi, dword cs:[rbx]
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x4026af
outsd dx, dword [rsi]
in eax, dx
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4026f4
outsd dx, dword fs:[rsi]
pop rdi
jle 0x4026d4
outsd dx, dword [rsi]
outsd dx, dword [rsi]
or esp, dword [rdx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x402744
jne 0x402760
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x402759
not byte gs:[rdi]
fcomp st(7)
sub dword [rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xed08
test byte [rbp + 0x617272fe], 0x79
pop rdi
int 0x72
jns 0x40270e
or ch, byte [rbp + 0x65]
and byte [rbx + rbx + 0x6d75f730], ch
insd dword [rdi], dx
jns 0x40274e
or eax, 0x2a74295f
jbe 0x40278f
insd dword [rdi], dx
adc bl, byte [rdi + 0x47277070]
fld xword [rsi - 0x69]
fisubr dword [rsi]
jae 0x40274c
pop rdi
pop rdx
movsb byte [rdi], byte ptr ss:[rsi]
test eax, 0xb6fdbbdd
push rdx
imul ebx, dword [rdx], 0x4c74535a
cmp byte [rdx], dl
imul ebp, dword [rdi + 0x3e], 0x361f4651
jae 0x402756
push rdx
pop r15
int3
or eax, dword [rdi + 0x4e]
push rbp
fld dword [rbx + 0x4820482d]
push rdx
push rsi
push rbx
insb byte [rdi], dx
ret 0x6fde
cld
push rsp
sub byte [r8 + 0x5dcb1064], r9b
sub ebp, dword [rcx + rbx]
pop cx
mov r14b, 0xfd
retf
mov cl, 0x43
jle 0x4027c6
xor byte [rax + rbp*2 + 0x72], dh
outsd dx, dword [rsi]
ja 0x4027fa
insb byte [rdi], dx
or dword cs:[edi - 5], edi
lodsd eax, dword [rsi]
mov ch, 0x34
sub esi, edi
push rax
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
mov al, 0xc2
pop rbx
test eax, 0x65cdb933
insd dword [rdi], dx
jae 0x4027ea
adc edx, dword [rsi - 8]
jnp 0x402822
xor ch, byte [rsi]
add dword [rbx], esi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0xbe1ad766
jge 0x402758
sub ch, cl
jbe 0x40283d
movsxd rdi, dword [rdi]
fstp xword [r14 + 0x2b]
fmul qword [rcx]
xor al, 0x70
add dword [rdi], eax
imul eax, dword fs:[rbp + 0x53], 0xbc310d61
pop rbx
fcom st(0)
jle 0x402836
xor dword [rcx], edi
pop rdi
pop r14
jbe 0x402859
movsxd rsi, dword [rip + 0x3f6b0462]
mul byte [rcx + 0x6b]
movsxd rcx, dword [rcx + 0x4a]
sbb eax, dword [rbp + 0x76]
jo 0x402859
ret 0xbba
cmp dword fs:[rdi + rsi + 0x49], esp
push rdx
pop rcx
and dword [rax], esp
mov esp, 0x6ee0ed6d
xor ecx, 0xffffff87
jbe 0x402887
push rdx
or al, byte [rbx + 0x37]
jae 0x4028a1
mov esi, 0x73fec2d
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40280f
outsb dx, byte [rsi]
xor eax, 0xd96c6f73
in eax, dx
mov dh, 0x5b
jbe 0x402884
jo 0x4028b8
je 0x4028af
push 0xb73e66b
insb byte [rdi], dx
and edx, dword [rdx + 0x7b73a238]
in eax, dx
xchg eax, esp
fnsave dword [rax + 0x34]
xor dword [r13 + 0x48], eax
ja 0x4028a5
fst dword [rax]
jbe 0x4028d8
imul esp, dword [rbx + 0x17], 0xd1b6068b
sbb byte [rcx], cl
mov ecx, 0x24147768
fcomp st(0), st(2)
movsxd r15, dword [r8 + 0x61]
xlatb
js 0x4028ed
xchg eax, esp
and edi, dword [rsp + rbp*2]
pop rcx
js 0x4028ef
mov al, 0x31
xor edi, dword [rbx + 0x3e6edc6f]
push 0x75
pop rsi
pop rdi
push 0x4e497047
cmp ebx, edi
outsb dx, byte [rsi]
jne 0x402915
sub al, 0x6c
ja 0x4028e5
js 0x4028d9
or ch, byte [rsi + 0x37]
insd dword [rdi], dx
ret
xor byte [rcx], cl
add esp, ecx
loope 0x402915
push r8
mov byte [rbp + 0x6d0f0fb9], bl
xchg eax, ebp
xor edi, dword [rcx + 0x45]
insb byte [rdi], dx
sal esi, cl
insd dword [rdi], dx
movabs dword [0x3173706f3d3507e2], eax
jae 0x402950
js 0x40287d
and byte [rsi - 0x36], al
mov dl, 0xa
fcmovne st(0), st(5)
jno 0x4028f7
xor dword [rsi + 0x6f], esi
push rbx
add eax, 0x38c30c31
insb byte [rdi], dx
add dh, byte [rdx]
mov ch, 0xd3
sub bl, byte [rdx + rbx]
mov dh, 0xe7
test byte [rbx + 0x692f3200], cl
xor ebp, dword [rip + 0x67583774]
movsxd rdi, dword [r10 - 0x659ea3cf]
cdq
sti
push 0x1073575b
sbb byte [rbx + 0x4d], ah
or eax, dword [rbx]
enter 0x4401, 0x37
loope 0x402982
pop rbx
test eax, 0x39a50a15
pop rsp
mov esi, 0xdb4f54a3
xchg eax, edx
sbb dl, byte [rbx]
out dx, al
or al, 0x43
in al, dx
push rsp
jmp 0x62a1eff2
sbb ecx, dword [rdi + 0x74]
push -0x49cf4245
push rdx
cmp byte [rdi], r10b
push 0x6b
xchg eax, edx
sub bl, r12b
mov dh, 0x61
xor al, 0x1a
wait
movsxd rdx, dword [rax]
ret 0xc80f
imul esi, dword [rbx + 0x63], 0x9c666e61
pop rbx
mov bl, 0xa6
xor byte [rbx - 0x6c], ah
xchg eax, edx
stosd dword [rdi], eax
insb byte [rdi], dx
mov byte [rdx + 0x3f], 0x61
adc dh, byte [rax + rax]
and al, 0xb9
xchg eax, esp
int1
test al, 0x20
cmp edi, eax
jmp 0x6506aeed
movabs al, byte [0x3a70ad70456478e8]
sub eax, 0xd81294d4
retf
and dword [rbp - 0x6e], esp
mov edi, dword [rax + 0x69]
add edx, dword [rdx]
sub rbx, qword [rax + 0x786462ca]
ret
cmp rsi, qword [rsi + 0x65d91807]
pop rbx
leave
and bh, ch
sub byte [rsi + rsi*2 + 0x34], ch
je 0x402967
xor bh, byte [rdx - 0x6cccaf89]
jb 0x40299c
test dword [rax + rdx*4 + 0x1e], ebx
retfq
pop rdi
or dword [rcx + 0x31fa4a08], edi
sub esi, dword [rip + 0x243790da]
pop rax
xor al, 0xb1
add byte [rcx], cl
sub dword [rbx + 0x63], esp
jae 0x402a0e
or eax, 0x7dbfa685
insd dword [rdi], dx
jne 0x402a54
sahf
loop 0x402a52
movsxd rsp, dword [ecx]
push rbx
or dh, byte [rcx]
or eax, 0xd1a14265
pop rsi
mov bl, 0x57
shr byte [rbx], 1
loope 0x4029cf
rcr dl, 1
outsb dx, byte [rsi]
jge 0x402a40
lahf
jbe 0x402a31
sub esp, dword [rdi]
scasb al, byte [rdi]
mov ch, 0x41
add edx, ecx
xor dword es:[rbx + 0x7e], edi
insd dword [rdi], dx
pop rbx
fsubr dword [rsi + 0x77]
cmp eax, 0x647d5512
sar byte [rbp - 0x28], 1
jo 0x4029f8
add al, 0x6d
stc
xor byte [rbx], ah
and dword [rbx], eax
and dword [rdi], esi
jle 0x402a72
scasd eax, dword [rdi]
nop
mov ch, 0x6f
jne 0x402aa2
mov dl, 0x64
mov al, 0x93
fnsave dword [rsi + 0x73]
jns 0x402aa7
movsb byte [rdi], byte ptr [rsi]
je 0x402ab1
push 0x3adcb709
ficomp dword [rsi]
push rdx
jo 0x402a50
outsb dx, byte [rsi]
outsd dx, dword [rsi]
lodsb al, byte cs:[rsi]
jrcxz 0x4029fd
pop rbx
sub eax, 0x890d6715
jne 0x402a76
pop rdx
and dword [rsi + 0x6d2d6470], esi
add byte [rip + 0x6d663821], cl
out 0xde, al
or dword [rcx + rdi*2 + 0x6e], esp
sbb dword [r13 + 0x58], r9d
sub edi, dword [rax]
and eax, 0x5f0cfa4f
or esi, esi
pop rdx
ret
sbb ecx, dword [rcx - 0x4f]
sub byte [rcx], cl
mov edi, 0x6f1cf6dc
je 0x402afc
out dx, eax
or ch, byte [rdi + rbp*2]
or al, dl
cmp eax, 0x5270670
jne 0x402abb
outsd dx, dword [rsi]
movlps xmm1, qword gs:[rdi + 0x68652e4d]
nop
push 0x700d7264
movabs eax, dword [0x70022e5f995db92d]
je 0x402a8a
xchg eax, edx
sbb byte [rcx + 0x112e8ca9], ch
sub eax, 0xbb0e2d6
push 0x57
movabs eax, dword [0x7b68c5033d9b3436]
pop rsi
mov dh, 0x35
add ecx, ebp
or byte [rsp + rdx], al
push rdx
std
add byte [rax], al
and byte [rsi], 0x58
add bh, bh
add dword [rcx - 0x18b4ee65], ebx
out dx, eax
int 0x90
or al, 0xc9
sbb al, 1
and eax, dword [rdi]
or dword [rdx + rsi], 0x20
push rsp
push rsp
and byte [rbx + rax*2], ah
xor ah, byte [rsp + rax]
xor dword [rip + 0x74320c83], esp
je 0x402b23
nop
fimul word [rip - 0x980bc]
ljmp [rdi - 0x68]
sbb dword [rax + rbx*4 + 0x34], esp
add eax, 0x9219a406
or byte [rsi + 0xb], cl
sal byte [rdx + 0x76], 1
nop
sar dword [rdi], -0x30
pop rax
add bh, bl
imul eax, dword [rsi], 0x183f6c99
push rsi
add eax, dword [rcx]
outsd dx, dword [rsi]
push rdx
sub al, 0xb7
jmp 0xffffffffd7d23d44
pop rsi
mov edi, 0x526f67ff
sub al, 0xdf
mov edi, 0x36437432
and al, 2
imul edi, dword [rdi], -2
pushfq
mov ecx, 0x78080c9
cmpsd dword [rsi], dword ptr [rdi]
movabs al, byte [0x4f7aff068326ca6e]
xchg eax, edx
add al, 0x2f
cmp ebp, dword [rsp + rax*4]
pushfq
inc qword [rdi + rdi + 0x6419064]
push -0x68dff398
sbb al, 0xb0
add dword [rcx], ebx
mov cs, word [rcx + 0x4d]
and byte [rbx], dl
pop rsi
leave
or dword [rip - 0x76e500f9], ebp
or dword [rdx + rsi], 0x64
xor byte [rdx + 0x190bb21], sil
adc byte [rdi], al
xchg eax, esp
mov eax, 0x7cf1159
sbb dword [rdx - 0x62f0a4dd], esi
adc byte [rsi], 0xc8
xor esi, dword [rdi]
jg 0x402b82
and dword [rcx + 0x10], ebx
xchg eax, edx
ret
movabs dword [0x9ff07b99c94349f], eax
test eax, 0x90824dcc
mov edi, 0xd7f07a7
fld dword [rbp - 0xe]
jo 0x402bce
mov cl, 0x3f
rol byte [rbx - 0x37], 1
and byte [rbx - 0x404b2f81], al
jo 0x402bee
sub byte [rdi + rdx*4], ah
jbe 0x402b71
nop
and al, 0x97
leave
sub al, 0x37
add dword [rdx - 0x41], 0xba697f07
movabs eax, dword [0xbc27030e0edb4ce4]
xor qword [r15 + 7], rax
mov edi, 0xdd20310
and eax, 0xf80f3fe7
pop rsp
and al, 0x26
push rbx
pop rcx
mov cl, 0xec
int 0x96
je 0x402c1b
clc
wait
in al, 0xe4
cdq
wait
jg 0x402c15
add dword [rsi], eax
mov dh, 0x90
xchg byte [r8], dl
cwde
mov edi, 0xc83245c8
or byte [rbx + 0x1392104], al
add dword [rdi + 0x250c9040], ecx
test al, 0xa
and byte [rax + 0x7f07a8c9], bh
adc byte [rdx], dh
enter 0x7480, 0x3f
or al, al
mov eax, 0xf213243
call 0x15602d9b
or ebx, ecx
jg 0x402c93
xor al, 0x66
xchg dword [rbp + 0x11073f30], eax
jnp 0x402cb7
sahf
jno 0x402c3c
add byte [rdx + rdx*2 - 0x29fee181], cl
sub ebx, dword [rbx - 0xfff444f]
inc dword [rcx]
movsb byte [rdi], byte ptr [rsi]
cmp dword [rcx + 0x38], edi
or bl, byte [rdi]
xor dl, byte [rdx + 0x9b08727]
jg 0x402cb8
add byte [rax], al
add byte [rax + rax], ch
adc al, byte [rax]
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x10f7fdea], ecx
lodsd eax, dword [rsi]
or dh, byte [rbx]
loop 0x402cc6
mov ebp, 0x1af8b7
add dl, bl
or byte [rax], al
add byte [rax + 0x4900005b], dh
add byte [rax], al
xlatb
hlt
add byte [rax], al
