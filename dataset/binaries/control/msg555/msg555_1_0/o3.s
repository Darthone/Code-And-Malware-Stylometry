xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6030ff
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x4012b0
mov eax, 0
test rax, rax
je 0x4012b0
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x4012f8
mov eax, 0
test rax, rax
je 0x4012f8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x202029], 0
jne 0x40131a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x202016], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401330
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40132b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
lea r13, [rdi + 0x10]
push rbp
push rbx
mov rbx, rdi
sub rsp, 0x18
test esi, esi
mov qword [rdi], r13
mov dword [rsp + 8], esi
mov byte [rsp + 0xf], dl
mov qword [rdi + 8], 0
mov byte [rdi + 0x10], 0
jle 0x401450
mov r14d, ecx
mov rax, r13
xor r15d, r15d
xor r12d, r12d
jmp 0x4013e7
nop word [rax + rax]
movzx esi, byte [rsp + 0xf]
mov byte [rax + r15], sil
mov rax, qword [rbx]
mov qword [rbx + 8], rbp
mov byte [rax + rbp], 0
mov rax, qword [rbx]
mov rbp, qword [rbx + 8]
cmp r13, rax
lea r15, [rbp + 1]
je 0x401438
mov rdx, qword [rbx + 0x10]
cmp r15, rdx
ja 0x401418
add r12d, 1
cmp dword [rsp + 8], r12d
mov byte [rax + rbp], r14b
mov rax, qword [rbx]
mov qword [rbx + 8], r15
mov byte [rax + rbp + 1], 0
je 0x401450
mov r15, qword [rbx + 8]
mov rax, qword [rbx]
cmp r13, rax
lea rbp, [r15 + 1]
je 0x401440
mov rdx, qword [rbx + 0x10]
cmp rbp, rdx
jbe 0x401398
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r15
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rbx]
jmp 0x401398
nop dword [rax + rax]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rbx]
jmp 0x4013c5
nop word [rax + rax]
mov edx, 0xf
jmp 0x4013c0
nop
mov edx, 0xf
jmp 0x4013f4
nop word [rax + rax]
add rsp, 0x18
mov rax, rbx
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov rdi, qword [rbx]
mov rbp, rax
cmp rdi, r13
je 0x401472
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
nop word [rax + rax]
push r14
push r13
mov r13, rsi
push r12
push rbp
mov rbp, rdi
push rbx
sub rsp, 0xa0
mov rax, qword fs:[0x28]
mov qword [rsp + 0x98], rax
xor eax, eax
test edx, edx
je 0x401560
mov ebx, ecx
lea rdi, [rsp + 0x10]
mov esi, edx
mov r14d, ecx
movsx edx, bl
movsx ecx, r8b
call sym.alternate_abi:cxx11_
mov rcx, qword [r13 + 8]
test rcx, rcx
je 0x40150c
mov rdx, qword [r13]
cmp bl, byte [rdx]
lea rax, [rdx + 1]
lea rsi, [rdx + rcx]
jne 0x401501
jmp 0x40190e
nop word cs:[rax + rax]
mov r12, rax
add rax, 1
cmp r14b, byte [rax - 1]
je 0x4015b8
mov rbx, rax
sub rbx, rdx
cmp rsi, rax
jne 0x4014f0
lea rax, [rbp + 0x10]
mov qword [rbp + 8], 0
mov byte [rbp + 0x10], 0
mov qword [rbp], rax
mov rdi, qword [rsp + 0x10]
lea rax, [rsp + 0x20]
cmp rdi, rax
je 0x401534
call sym.operatordelete
mov rcx, qword [rsp + 0x98]
xor rcx, qword fs:[0x28]
mov rax, rbp
jne 0x40193a
add rsp, 0xa0
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop
lea rax, [rdi + 0x10]
mov rbx, qword [rsi + 8]
mov qword [rdi], rax
mov r12, qword [rsi]
mov rdi, r12
add rdi, rbx
je 0x401585
test r12, r12
jne 0x401585
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
cmp rbx, 0xf
mov qword [rsp + 8], rbx
ja 0x4017d0
cmp rbx, 1
je 0x401630
test rbx, rbx
mov rdx, rax
jne 0x401922
mov qword [rbp + 8], rbx
mov byte [rdx + rbx], 0
jmp 0x401534
nop dword [rax]
cmp rbx, rcx
ja 0x40197b
sub rcx, rbx
lea rax, [rsp + 0x80]
cmp rcx, 0xf
mov r14, rcx
mov qword [rsp], rcx
mov qword [rsp + 0x70], rax
ja 0x401850
cmp rcx, 1
je 0x401640
test rcx, rcx
mov rdx, rax
jne 0x401932
mov qword [rsp + 0x78], r14
mov byte [rdx + r14], 0
lea rax, [rsp + 0x40]
cmp qword [r13 + 8], rbx
mov r12, qword [r13]
cmovbe rbx, qword [r13 + 8]
mov qword [rsp + 0x30], rax
mov rax, r12
add rax, rbx
je 0x401651
test r12, r12
jne 0x401651
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
nop dword [rax]
movzx edx, byte [r12]
mov byte [rbp + 0x10], dl
mov rdx, rax
jmp 0x4015aa
movzx edx, byte [r12]
mov byte [rsp + 0x80], dl
mov rdx, rax
jmp 0x4015f4
cmp rbx, 0xf
mov qword [rsp + 8], rbx
ja 0x401810
cmp rbx, 1
je 0x40188c
test rbx, rbx
lea rax, [rsp + 0x40]
jne 0x40192a
mov qword [rsp + 0x38], rbx
mov byte [rax + rbx], 0
lea rdi, [rsp + 0x30]
mov rdx, qword [rsp + 0x18]
mov rsi, qword [rsp + 0x10]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
lea rdx, [rsp + 0x60]
mov qword [rsp + 0x50], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x4018e2
mov qword [rsp + 0x50], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x60], rcx
mov rcx, qword [rax + 8]
lea rsi, [rsp + 0x60]
mov byte [rax + 0x10], 0
mov qword [rsp + 0x58], rcx
mov qword [rax], rdx
mov rcx, qword [rsp + 0x50]
mov qword [rax + 8], 0
mov r8, qword [rsp + 0x58]
mov rdx, qword [rsp + 0x78]
cmp rcx, rsi
lea rax, [r8 + rdx]
je 0x4018d8
mov rsi, qword [rsp + 0x60]
cmp rax, rsi
mov rsi, qword [rsp + 0x70]
jbe 0x4017c0
lea rdi, [rsp + 0x80]
cmp rsi, rdi
je 0x401918
mov rdi, qword [rsp + 0x80]
cmp rax, rdi
ja 0x4017c0
lea rdi, [rsp + 0x70]
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
lea rdx, [rbp + 0x10]
mov qword [rbp], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x4018f9
mov qword [rbp], rcx
mov rcx, qword [rax + 0x10]
mov qword [rbp + 0x10], rcx
mov rcx, qword [rax + 8]
mov qword [rbp + 8], rcx
mov qword [rax], rdx
mov rdi, qword [rsp + 0x50]
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
lea rax, [rsp + 0x60]
cmp rdi, rax
je 0x401788
call sym.operatordelete
mov rdi, qword [rsp + 0x30]
lea rax, [rsp + 0x40]
cmp rdi, rax
je 0x40179c
call sym.operatordelete
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x401520
call sym.operatordelete
jmp 0x401520
nop dword [rax]
lea rdi, [rsp + 0x50]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
jmp 0x401739
nop
lea rsi, [rsp + 8]
mov rdi, rbp
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rbp], rax
mov rax, qword [rsp + 8]
mov qword [rbp + 0x10], rax
mov rdx, rbx
mov rsi, r12
call sym.imp.memcpy
mov rbx, qword [rsp + 8]
mov rdx, qword [rbp]
jmp 0x4015aa
nop dword [rax + rax]
lea rsi, [rsp + 8]
lea rdi, [rsp + 0x30]
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0x30], rax
mov rax, qword [rsp + 8]
mov qword [rsp + 0x40], rax
mov rdx, rbx
mov rsi, r12
call sym.imp.memcpy
mov rbx, qword [rsp + 8]
mov rax, qword [rsp + 0x30]
jmp 0x401678
nop dword [rax]
lea rdi, [rsp + 0x70]
xor edx, edx
mov rsi, rsp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0x70], rax
mov rax, qword [rsp]
mov qword [rsp + 0x80], rax
mov rdx, r14
mov rsi, r12
call sym.imp.memcpy
mov r14, qword [rsp]
mov rdx, qword [rsp + 0x70]
jmp 0x4015f4
movzx eax, byte [r12]
mov byte [rsp + 0x40], al
lea rax, [rsp + 0x40]
jmp 0x401678
mov rbx, rax
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x4018b9
call sym.operatordelete
mov rdi, qword [rsp + 0x10]
lea rax, [rsp + 0x20]
cmp rdi, rax
je 0x4018cd
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
nop dword [rax]
mov esi, 0xf
jmp 0x4016fb
mov rcx, qword [rax + 0x10]
mov rbx, qword [rax + 0x18]
mov qword [rsp + 0x60], rcx
mov qword [rsp + 0x68], rbx
jmp 0x4016bd
mov rcx, qword [rax + 0x10]
mov rbx, qword [rax + 0x18]
mov qword [rbp + 0x10], rcx
mov qword [rbp + 0x18], rbx
jmp 0x40175d
mov r12, rdx
xor ebx, ebx
jmp 0x4015c1
mov edi, 0xf
jmp 0x401722
mov rdi, rax
jmp 0x4017ef
mov rdi, rax
jmp 0x401833
mov rdi, rax
jmp 0x401873
call sym.imp.__stack_chk_fail
mov rbx, rax
jmp 0x4018b9
mov rdi, qword [rsp + 0x50]
mov rbx, rax
lea rax, [rsp + 0x60]
cmp rdi, rax
je 0x40195e
call sym.operatordelete
mov rdi, qword [rsp + 0x30]
lea rax, [rsp + 0x40]
cmp rdi, rax
je 0x4018a2
call sym.operatordelete
jmp 0x4018a2
mov rdx, rbx
mov esi, str.basic_string::substr
mov edi, str._s:___pos__which_is__zu____this__size____which_is__zu_
xor eax, eax
call sym.std::__throw_out_of_range_fmt
mov rbx, rax
jmp 0x40195e
nop
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x58
mov r15, qword [rdi]
mov rbp, qword [rsi]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x48], rax
xor eax, eax
mov rax, r15
sub rax, rbp
cmp rax, 0x87
jle 0x401baa
test rdx, rdx
mov rbx, rdx
je 0x401bc9
lea rax, [rsp + 0x40]
mov r13, rdi
mov r12, rsi
mov qword [rsp + 8], rax
lea rax, [rbp + 8]
mov rdi, r15
mov qword [rsp + 0x40], r15
sub rsp, 8
sub rbx, 1
mov qword [rsp + 0x18], rax
mov rax, r15
sub rax, rbp
sar rax, 3
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
shl rax, 3
sub rdi, rax
lea rax, [r15 - 8]
mov qword [rsp + 0x28], rdi
mov qword [rsp + 0x38], rax
push 0
mov rdi, qword [rsp + 0x18]
lea rcx, [rsp + 0x20]
lea rsi, [rsp + 0x40]
lea rdx, [rsp + 0x30]
call sym.std::__move_median_to_first_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
pop rax
mov ecx, dword [r15 - 8]
lea rsi, [r15 - 0x10]
mov rax, rbp
pop rdx
jmp 0x401a7c
nop dword [rax]
movzx edx, byte [r15 - 4]
cmp byte [rsi + 4], dl
jge 0x401a90
nop word [rax + rax]
sub rsi, 8
mov edi, dword [rsi]
lea r14, [rsi + 8]
mov rbp, r14
cmp ecx, edi
jg 0x401a78
jge 0x401a68
nop dword [rax + rax]
add rax, 8
mov edx, dword [rax - 8]
cmp ecx, edx
jl 0x401a90
jg 0x401aa8
movzx r8d, byte [rax - 4]
cmp byte [r15 - 4], r8b
jl 0x401a90
cmp r14, rax
jbe 0x401ad0
mov dword [rsi], edx
mov dword [rax - 8], edi
movzx ecx, byte [rax - 4]
movzx edx, byte [rsi + 4]
mov byte [rsi + 4], cl
mov byte [rax - 4], dl
mov ecx, dword [r15 - 8]
jmp 0x401a78
nop word cs:[rax + rax]
mov rax, qword [r12]
mov rsi, qword [rsp + 8]
lea rdi, [rsp + 0x30]
mov rdx, rbx
mov qword [rsp + 0x30], r14
mov qword [rsp + 0x40], rax
call sym.std::__introsort_loop_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long___gnu_cxx::__ops::_Iter_less_iter_
mov r15, qword [r13]
mov qword [r12], r14
mov rax, r15
sub rax, r14
cmp rax, 0x87
jle 0x401baa
test rbx, rbx
jne 0x4019f2
sar rax, 3
mov rbx, rax
lea r12, [rbx - 2]
mov rdi, r15
sar r12, 1
lea rax, [r12*8]
sub rdi, rax
lea r13, [rdi - 8]
jmp 0x401b3c
nop dword [rax]
sub r12, 1
sub rsp, 8
mov rcx, qword [r13]
mov qword [rsp + 0x48], r15
push 0
mov rdi, qword [rsp + 0x18]
mov rdx, rbx
mov rsi, r12
add r13, 8
call sym.std::__adjust_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
test r12, r12
pop rdi
pop r8
jne 0x401b38
mov eax, dword [r15 - 8]
add rbp, 8
mov rcx, qword [rbp - 8]
sub rsp, 8
mov rbx, r15
xor esi, esi
sub rbx, rbp
mov dword [rbp - 8], eax
movzx eax, byte [r15 - 4]
mov rdx, rbx
sar rdx, 3
mov byte [rbp - 4], al
mov qword [rsp + 0x48], r15
push 0
mov rdi, qword [rsp + 0x18]
call sym.std::__adjust_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
cmp rbx, 0xf
pop rcx
pop rsi
jg 0x401b67
mov rax, qword [rsp + 0x48]
xor rax, qword fs:[0x28]
jne 0x401bdf
add rsp, 0x58
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
sar rax, 3
mov rbx, rax
lea rax, [rsp + 0x40]
mov qword [rsp + 8], rax
jmp 0x401b1a
call sym.imp.__stack_chk_fail
nop
nop word cs:[rax + rax]
push r15
push r14
mov r15d, r9d
push r13
push r12
mov r14d, ecx
push rbp
push rbx
mov rbp, rdi
mov ebx, edx
mov r12d, r8d
sub rsp, 0xf8
mov rax, qword fs:[0x28]
mov qword [rsp + 0xe8], rax
xor eax, eax
lea eax, [r9 + rdx]
mov r13d, dword [rsp + 0x130]
cmp eax, esi
jne 0x401c3b
cmp r9d, edx
je 0x40217b
mov eax, dword [rsp + 0x138]
add eax, r12d
cmp eax, esi
jne 0x401c57
cmp dword [rsp + 0x138], r12d
je 0x402191
lea eax, [r14 + r13]
cmp eax, esi
jne 0x401c68
cmp r14d, r13d
je 0x4021ab
test r14d, r14d
jle 0x401c79
sub r13d, r14d
test r13d, r13d
jle 0x402117
test r15d, r15d
jle 0x401c89
sub ebx, r15d
test ebx, ebx
jle 0x402117
mov r9d, dword [rsp + 0x138]
test r9d, r9d
jle 0x401ca7
sub r12d, dword [rsp + 0x138]
test r12d, r12d
jle 0x402117
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
mov qword [rsp + 0x40], 0
mov qword [rsp + 0x48], 0
mov qword [rsp + 0x50], 0
mov dword [rsp + 0x30], ebx
mov byte [rsp + 0x34], 0x52
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_emplace_back_aux_std::pair_int_char__
mov rax, qword [rsp + 0x48]
mov rdx, qword [rsp + 0x50]
mov dword [rsp + 0x30], r12d
mov byte [rsp + 0x34], 0x59
cmp rax, rdx
je 0x40215d
test rax, rax
je 0x401d04
mov rcx, qword [rsp + 0x30]
mov qword [rax], rcx
add rax, 8
mov qword [rsp + 0x48], rax
cmp rax, rdx
mov dword [rsp + 0x30], r13d
mov byte [rsp + 0x34], 0x42
je 0x402144
test rax, rax
je 0x401d2d
mov rdx, qword [rsp + 0x30]
mov qword [rax], rdx
add rax, 8
mov qword [rsp + 0x48], rax
mov r9, qword [rsp + 0x40]
cmp r9, rax
je 0x401e54
mov rcx, rax
mov esi, 0x3f
lea rdi, [rsp + 0x30]
sub rcx, r9
mov qword [rsp + 0x20], r9
mov qword [rsp + 0x10], r9
mov rdx, rcx
mov qword [rsp + 0x18], rcx
mov qword [rsp + 0x30], rax
sar rdx, 3
mov qword [rsp + 8], rax
bsr rdx, rdx
xor rdx, 0x3f
movsxd rdx, edx
sub rsi, rdx
mov rdx, rsi
lea rsi, [rsp + 0x20]
add rdx, rdx
call sym.std::__introsort_loop_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long___gnu_cxx::__ops::_Iter_less_iter_
mov rcx, qword [rsp + 0x18]
mov rax, qword [rsp + 8]
mov r9, qword [rsp + 0x10]
cmp rcx, 0x87
jle 0x401e2e
lea r8, [rax - 0x80]
mov qword [rsp + 0x30], rax
sub rsp, 8
mov qword [rsp + 0x28], r8
mov qword [rsp + 0x10], r8
push 0
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
call sym.std::__insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
pop rdi
pop r8
mov r8, qword [rsp + 8]
mov r9, qword [rsp + 0x10]
cmp r9, r8
jne 0x401e08
jmp 0x401e4f
nop word [rax + rax]
jg 0x401df8
cmp sil, byte [rax + 4]
jl 0x401e1e
sub r8, 8
mov dword [rax - 8], ecx
mov byte [rax - 4], sil
cmp r9, r8
je 0x401e4f
movzx esi, byte [r8 - 4]
mov ecx, dword [r8 - 8]
mov rax, r8
nop dword [rax]
mov edx, dword [rax]
cmp ecx, edx
jge 0x401df0
mov dword [rax - 8], edx
movzx edx, byte [rax + 4]
add rax, 8
mov byte [rax - 0xc], dl
jmp 0x401e18
mov qword [rsp + 0x20], r9
mov qword [rsp + 0x30], rax
sub rsp, 8
push 0
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
call sym.std::__insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
pop rcx
pop rsi
mov rax, qword [rsp + 0x40]
mov edx, dword [rax + 0x10]
add edx, dword [rax + 8]
cmp dword [rax], edx
jle 0x401eb0
lea rdx, [rbp + 0x10]
mov qword [rbp + 8], 0
mov byte [rbp + 0x10], 0
mov qword [rbp], rdx
mov rdi, rax
call sym.operatordelete
mov rbx, qword [rsp + 0xe8]
xor rbx, qword fs:[0x28]
mov rax, rbp
jne 0x4021f7
add rsp, 0xf8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
add ebx, r12d
lea rax, [rsp + 0x70]
lea rdi, [rsp + 0x60]
add r13d, ebx
mov edx, 0x3f
movsxd rsi, r13d
mov qword [rsp + 0x60], rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_construct
mov rax, qword [rsp + 0x40]
mov esi, dword [rax]
test esi, esi
jle 0x401f07
xor ecx, ecx
xor edx, edx
nop dword [rax]
movzx esi, byte [rax + 4]
mov rax, qword [rsp + 0x60]
add edx, 1
mov byte [rax + rcx], sil
mov rax, qword [rsp + 0x40]
add rcx, 2
mov esi, dword [rax]
cmp esi, edx
jg 0x401ee8
add esi, esi
lea ecx, [rsi - 1]
cmp r13d, ecx
jle 0x401f69
movsxd rcx, ecx
sub r13d, esi
lea rdx, [rcx + 1]
lea r8, [rdx + r13]
jmp 0x401f41
nop dword [rax]
mov byte [rsi + rcx], dil
mov rax, qword [rsp + 0x40]
mov rcx, rdx
sub dword [rax + 8], 1
cmp rdx, r8
je 0x401f69
add rdx, 1
mov rsi, qword [rsp + 0x60]
movzx edi, byte [rax + 0xc]
cmp byte [rsi + rcx - 1], dil
jne 0x401f28
movzx eax, byte [rax + 0x14]
mov byte [rsi + rcx], al
mov rax, qword [rsp + 0x40]
mov rcx, rdx
sub dword [rax + 0x10], 1
cmp rdx, r8
jne 0x401f3d
mov rsi, qword [rsp + 0x68]
xor edx, edx
test rsi, rsi
jne 0x401f89
jmp 0x401fc0
nop word [rax + rax]
add rdx, 1
cmp rsi, rdx
jbe 0x401fc0
mov rcx, rdx
add rcx, qword [rsp + 0x60]
cmp byte [rcx], 0x3f
jne 0x401f80
mov esi, dword [rax + 8]
test esi, esi
jle 0x4020fe
sub esi, 1
add rdx, 1
mov dword [rax + 8], esi
movzx eax, byte [rax + 0xc]
mov byte [rcx], al
mov rsi, qword [rsp + 0x68]
mov rax, qword [rsp + 0x40]
cmp rsi, rdx
ja 0x401f89
mov edx, dword [rax + 8]
test edx, edx
jne 0x4021c5
mov eax, dword [rax + 0x10]
test eax, eax
jne 0x4021de
lea rsi, [rsp + 0x60]
lea rdi, [rsp + 0x80]
mov r8d, 0x4f
mov ecx, 0x42
mov edx, r14d
call sym.expand
lea rdi, [rsp + 0x60]
lea rsi, [rsp + 0x80]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x80]
lea rax, [rsp + 0x90]
cmp rdi, rax
je 0x402022
call sym.operatordelete
lea rsi, [rsp + 0x60]
lea rdi, [rsp + 0xa0]
mov r8d, 0x47
mov ecx, 0x52
mov edx, r15d
call sym.expand
lea rdi, [rsp + 0x60]
lea rsi, [rsp + 0xa0]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0xa0]
lea rax, [rsp + 0xb0]
cmp rdi, rax
je 0x40206e
call sym.operatordelete
mov edx, dword [rsp + 0x138]
lea rsi, [rsp + 0x60]
lea rdi, [rsp + 0xc0]
mov r8d, 0x56
mov ecx, 0x59
call sym.expand
lea rdi, [rsp + 0x60]
lea rsi, [rsp + 0xc0]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0xc0]
lea rax, [rsp + 0xd0]
cmp rdi, rax
je 0x4020be
call sym.operatordelete
lea rax, [rbp + 0x10]
lea rdx, [rsp + 0x70]
mov qword [rbp], rax
mov rax, qword [rsp + 0x60]
cmp rax, rdx
je 0x402130
mov qword [rbp], rax
mov rax, qword [rsp + 0x70]
mov qword [rbp + 0x10], rax
mov rax, qword [rsp + 0x68]
mov qword [rbp + 8], rax
mov rax, qword [rsp + 0x40]
test rax, rax
je 0x401e7a
jmp 0x401e72
sub dword [rax + 0x10], 1
movzx eax, byte [rax + 0x14]
mov byte [rcx], al
mov rsi, qword [rsp + 0x68]
mov rax, qword [rsp + 0x40]
jmp 0x401f80
lea rax, [rbp + 0x10]
mov qword [rbp + 8], 0
mov byte [rbp + 0x10], 0
mov qword [rbp], rax
jmp 0x401e7a
mov rax, qword [rsp + 0x70]
mov rdx, qword [rsp + 0x78]
mov qword [rbp + 0x10], rax
mov qword [rbp + 0x18], rdx
jmp 0x4020e2
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_emplace_back_aux_std::pair_int_char__
mov rax, qword [rsp + 0x48]
jmp 0x401d36
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_emplace_back_aux_std::pair_int_char__
mov rax, qword [rsp + 0x48]
mov rdx, qword [rsp + 0x50]
jmp 0x401d0d
mov ecx, 0x47
mov edx, 0x52
mov esi, ebx
call sym.alternate_abi:cxx11_
jmp 0x401e7a
mov ecx, 0x56
mov edx, 0x59
mov esi, r12d
mov rdi, rbp
call sym.alternate_abi:cxx11_
jmp 0x401e7a
mov ecx, 0x4f
mov edx, 0x42
mov esi, r13d
mov rdi, rbp
call sym.alternate_abi:cxx11_
jmp 0x401e7a
mov ecx, str.std::__cxx11::string_solve_int__int__int__int__int__int__int_
mov edx, 0x62
mov esi, str.sorted_code_control_msg555_msg555_1_0_B.cpp
mov edi, str.A_1_.first____0
call sym.imp.__assert_fail
mov ecx, str.std::__cxx11::string_solve_int__int__int__int__int__int__int_
mov edx, 0x63
mov esi, str.sorted_code_control_msg555_msg555_1_0_B.cpp
mov edi, str.A_2_.first____0
call sym.imp.__assert_fail
call sym.imp.__stack_chk_fail
mov rdi, qword [rsp + 0x60]
lea rdx, [rsp + 0x70]
mov rbx, rax
cmp rdi, rdx
je 0x402213
call sym.operatordelete
mov rdi, qword [rsp + 0x40]
test rdi, rdi
je 0x402222
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rbx, rax
jmp 0x402213
nop
mov eax, esi
ret
nop word cs:[rax + rax]
nop dword [rax]
push r14
push r13
mov r14, rsi
push r12
push rbp
mov rbp, rdi
push rbx
mov r8, qword [rbp + 8]
mov rdi, qword [rdi]
mov rdx, r8
sub rdx, rdi
mov rax, rdx
sar rax, 3
test rax, rax
je 0x402300
lea rcx, [rax + rax]
cmp rax, rcx
jbe 0x40230a
mov rbx, -8
mov rdi, rbx
call sym.operatornew
mov r8, qword [rbp + 8]
mov rdi, qword [rbp]
lea r12, [rax + 8]
mov r13, rax
add rbx, rax
mov rdx, r8
sub rdx, rdi
add rdx, r13
je 0x4022aa
mov rax, qword [r14]
mov qword [rdx], rax
cmp r8, rdi
je 0x4022e0
mov rdx, rdi
mov rcx, r13
nop dword [rax]
test rcx, rcx
je 0x4022c3
mov rsi, qword [rdx]
mov qword [rcx], rsi
add rdx, 8
add rcx, 8
cmp rdx, r8
jne 0x4022b8
lea rax, [rdi + 8]
sub rdx, rax
shr rdx, 3
lea r12, [r13 + rdx*8 + 0x10]
test rdi, rdi
je 0x4022ea
call sym.operatordelete
mov qword [rbp], r13
mov qword [rbp + 8], r12
mov qword [rbp + 0x10], rbx
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop
mov ebx, 8
jmp 0x40227f
movabs rsi, 0x1fffffffffffffff
cmp rcx, rsi
ja 0x402278
test rcx, rcx
jne 0x402332
mov r12d, 8
xor ebx, ebx
xor r13d, r13d
jmp 0x40229f
shl rax, 4
mov rbx, rax
jmp 0x40227f
nop
mov rdx, qword [rsi]
mov rax, qword [rdi]
cmp rax, rdx
je 0x402401
lea r9, [rax - 8]
cmp r9, rdx
je 0x402401
push rbx
lea r10, [rax - 0x10]
jmp 0x402388
nop dword [rax + rax]
jg 0x402370
cmp byte [rax + 4], r11b
jg 0x4023af
mov byte [rax - 4], r11b
sub r10, 8
sub r9, 8
cmp qword [rsi], rbx
mov dword [rax - 8], r8d
je 0x402400
mov rax, qword [rdi]
mov r8d, dword [r10]
cmp r8d, dword [rax - 8]
mov rbx, r10
movzx r11d, byte [r9 - 4]
jl 0x4023c0
jg 0x4023a1
cmp r11b, byte [rax - 4]
jl 0x4023c0
mov rax, r9
nop dword [rax]
mov edx, dword [rax]
cmp r8d, edx
jge 0x402368
mov dword [rax - 8], edx
movzx edx, byte [rax + 4]
add rax, 8
mov byte [rax - 0xc], dl
jmp 0x4023a8
nop
mov rdx, rax
sub rdx, r9
sar rdx, 3
test rdx, rdx
jle 0x402370
mov rax, r9
nop word [rax + rax]
mov ecx, dword [rax]
add rax, 8
mov dword [rax - 0x10], ecx
movzx ecx, byte [rax - 4]
mov byte [rax - 0xc], cl
sub rdx, 1
jne 0x4023d8
mov rax, qword [rdi]
jmp 0x402370
nop word cs:[rax + rax]
pop rbx
ret
nop word cs:[rax + rax]
nop dword [rax]
mov rax, qword [rdx]
mov rdx, qword [rsi]
mov esi, dword [rax - 8]
mov r8d, dword [rdx - 8]
cmp esi, r8d
jg 0x40242f
jl 0x402460
movzx r10d, byte [rax - 4]
cmp byte [rdx - 4], r10b
jge 0x402460
mov rcx, qword [rcx]
mov r9d, dword [rcx - 8]
cmp esi, r9d
jge 0x402490
mov rdx, qword [rdi]
mov ecx, dword [rdx - 8]
mov dword [rdx - 8], esi
movzx esi, byte [rax - 4]
mov dword [rax - 8], ecx
movzx ecx, byte [rdx - 4]
mov byte [rdx - 4], sil
mov byte [rax - 4], cl
ret
nop word [rax + rax]
mov rcx, qword [rcx]
mov r9d, dword [rcx - 8]
cmp r8d, r9d
jge 0x4024d0
mov rax, qword [rdi]
mov ecx, dword [rax - 8]
mov dword [rax - 8], r8d
movzx esi, byte [rdx - 4]
mov dword [rdx - 8], ecx
movzx ecx, byte [rax - 4]
mov byte [rax - 4], sil
mov byte [rdx - 4], cl
ret
nop dword [rax]
jg 0x40249d
movzx r11d, byte [rcx - 4]
cmp byte [rax - 4], r11b
jl 0x40243b
cmp r8d, r9d
jl 0x4024ad
jg 0x40246c
movzx eax, byte [rcx - 4]
cmp byte [rdx - 4], al
jge 0x40246c
mov rax, qword [rdi]
mov edx, dword [rax - 8]
mov dword [rax - 8], r9d
movzx esi, byte [rcx - 4]
mov dword [rcx - 8], edx
movzx edx, byte [rax - 4]
mov byte [rax - 4], sil
mov byte [rcx - 4], dl
ret
nop word [rax + rax]
jg 0x4024dd
movzx r11d, byte [rcx - 4]
cmp byte [rdx - 4], r11b
jl 0x40246c
cmp esi, r9d
jl 0x4024ad
jg 0x40243b
movzx edx, byte [rcx - 4]
cmp byte [rax - 4], dl
jl 0x4024ad
jmp 0x40243b
nop word cs:[rax + rax]
lea rax, [rdx - 1]
push r15
push r14
push r13
push r12
mov r10, rsi
mov r14, rax
push rbp
push rbx
shr r14, 0x3f
add r14, rax
mov qword [rsp - 8], rcx
sar r14, 1
cmp rsi, r14
jl 0x402565
jmp 0x402674
nop dword [rax]
movzx r15d, byte [r11 - 4]
cmp r15b, byte [rbp - 4]
cmovle r11, rbp
cmovle r8, rcx
cmovle ebx, r13d
cmovle rax, r12
shl r10, 3
sub r9, r10
cmp rax, r14
mov dword [r9 - 8], ebx
movzx ecx, byte [r11 - 4]
mov byte [r9 - 4], cl
jge 0x4025b0
mov r10, rax
lea rcx, [r10 + 1]
mov r9, qword [rdi]
lea r12, [rcx + rcx]
shl rcx, 4
neg rcx
lea rax, [r12 - 1]
lea rbp, [r9 + rcx]
lea r8, [rax*8]
mov r13d, dword [rbp - 8]
neg r8
lea r11, [r9 + r8]
mov ebx, dword [r11 - 8]
cmp ebx, r13d
jg 0x402549
jge 0x402530
mov r11, rbp
mov r8, rcx
mov ebx, r13d
mov rax, r12
jmp 0x402549
nop dword [rax]
test dl, 1
jne 0x4025cf
sub rdx, 2
mov rcx, rdx
shr rcx, 0x3f
add rdx, rcx
sar rdx, 1
cmp rdx, rax
je 0x4026a8
mov rcx, qword [rsp - 8]
mov r9, qword [rdi]
mov r10d, ecx
shl rcx, 0x18
shr rcx, 0x38
cmp rax, rsi
jle 0x4026a0
lea rdx, [rax - 1]
mov rdi, rdx
shr rdi, 0x3f
add rdi, rdx
mov rdx, rax
sar rdi, 1
nop
lea rax, [rdi*8]
mov r8, r9
sub r8, rax
mov r11d, dword [r8 - 8]
cmp r10d, r11d
jg 0x402640
jl 0x40261f
cmp cl, byte [r8 - 4]
jg 0x402640
mov rax, rdx
shl rax, 3
sub r9, rax
mov r8, r9
mov dword [r8 - 8], r10d
mov byte [r8 - 4], cl
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
shl rdx, 3
mov rax, r9
sub rax, rdx
mov dword [rax - 8], r11d
movzx edx, byte [r8 - 4]
mov byte [rax - 4], dl
lea rax, [rdi - 1]
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
mov rdx, rdi
sar rax, 1
cmp rsi, rdi
jge 0x40262c
mov rdi, rax
jmp 0x402600
lea r8, [rsi*8]
mov rax, rsi
neg r8
test dl, 1
je 0x4025b5
mov r9, qword [rdi]
mov r10d, ecx
shl rcx, 0x18
shr rcx, 0x38
nop dword [rax]
add r8, r9
jmp 0x40262c
nop dword [rax]
lea rax, [rax + rax + 1]
mov rdx, qword [rdi]
lea rcx, [rax*8]
add r8, rdx
neg rcx
lea r9, [rdx + rcx]
mov edx, dword [r9 - 8]
mov dword [r8 - 8], edx
movzx edx, byte [r9 - 4]
mov byte [r8 - 4], dl
mov r8, rcx
jmp 0x4025cf
nop dword [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x2006f6]
push rbp
lea rbp, [rip + 0x2006fe]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x402736
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x402720
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
jae 0x4027d1
movsxd rbx, dword [rdi + 0x73]
je 0x4027df
imul ebp, dword [rsi + 0x67], 0x75733a3a
jae 0x4027eb
jb str.A_1_.first____0
pop r11
xor dword [rbp + 0x2e], ebx
imul si, word [rdx + 0x73], 0x2074
cmp eax, 0x30203d
pop r11
xor bl, byte [rbp + 0x2e]
imul si, word [rdx + 0x73], 0x2074
cmp eax, 0x30203d
jae 0x402802
and byte [rbx], ah
add byte [rcx + 0x4d], cl
push r8
push r11
push rbx
add byte [r10], r15b
and byte [rax], al
add byte [rax], al
and eax, 0x5f203a73
pop rdi
jo 0x402827
jae 0x4027da
sub byte [rdi + 0x68], dh
imul esp, dword [rbx + 0x68], 0x20736920
and eax, 0x2029757a
and byte ds:[rax + rbp*2 + 0x69], dh
jae 0x4027fd
jae 0x40283c
jp 0x40283a
sub byte [rcx], ch
and byte [rax], ch
ja 0x402843
imul esp, dword [rbx + 0x68], 0x20736920
and eax, 0x29757a
add byte [rdx + 0x61], ah
jae 0x402855
movsxd rbx, dword [rdi + 0x73]
je 0x402863
imul ebp, dword [rsi + 0x67], 0x4d5f3a3a
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x402872
jb 0x402875
movsxd rsi, dword [rax + 0x6e]
jne 0x402872
insb byte [rdi], dx
and byte [rsi + 0x6f], ch
je 0x40282c
jbe 0x40286f
insb byte [rdi], dx
imul esp, dword [rax + rax], 0
add byte [rbx + 0x6f], dh
jae 0x402889
jb 0x402890
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x40289b
outsd dx, dword [rsi]
insb byte [rdi], dx
insd dword [rdi], dx
jae 0x402896
xor eax, 0x6d2f3535
jae 0x40289d
xor eax, 0x315f3535
pop rdi
xor byte [rdi], ch
movsxd rsi, dword cs:[rax + 0x70]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dh
jae 0x4028d6
cmp bh, byte fs:[rdx]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
cmp bh, byte [rdx]
jae 0x4028e4
jb 0x4028db
outsb dx, byte [rsi]
and byte [ebx + 0x6f], dh
insb byte [rdi], dx
jbe 0x4028df
sub byte [rcx + 0x6e], ch
je 0x4028ab
and byte [rcx + 0x6e], ch
je 0x4028b0
and byte [rcx + 0x6e], ch
je 0x4028b5
and byte [rcx + 0x6e], ch
je 0x4028ba
and byte [rcx + 0x6e], ch
je 0x4028bf
and byte [rcx + 0x6e], ch
je 0x4028c4
and byte [rcx + 0x6e], ch
je 0x4028c6
add byte [rax], al
add byte [rax], al
add dword [rbx], ebx
add edi, dword [rbx]
test byte [rax], al
add byte [rax], al
sldt word [rax]
add al, al
in eax, 0xff
call rax
add byte [rax], al
add byte [rax - 0x7f000019], al
add eax, dword [rax]
add byte [rax - 0x27000017], al
add eax, dword [rax]
add byte [rax - 0x5f000017], dh
add byte [rax], al
add byte [rax + 0x30ffffea], dh
add dword [rax], eax
add al, ah
jmp 0x4028d6
inc dword [rax + 1]
int1
dec dword [rax + 0x50000002]
dec dword [rax]
add eax, dword [rax]
add byte [rax - 0x7000007], dl
add byte [rax], al
add byte [rax - 0x37000007], ah
add dword [rax], eax
add byte [rax + 0x8fffffa], ah
add al, byte [rax]
add byte [rax - 5], dh
ljmp [rax]
add al, byte [rax]
add byte [rax - 4], ah
inc dword [rax + 2]
add byte [rax], al
push rax
add eax, dword [rax]
add byte [rax + 0x38fffffe], dh
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402947
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or cl, ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402977
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
call 0xffffffffb1402961
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rax + 0x3fffff8], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4029d1
add eax, eax
cmovo eax, dword [rax]
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x4c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
js 0x4029c3
ljmp [rdx]
add dword [rax], eax
add byte [rsp + rsi*8], al
sub al, 0x40
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bb], es
cmp byte [rbx + 0x500e4707], al
add ch, bh
or cl, byte [rsi]
cmp byte [rsi + rcx + 0x30], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax + rax], al
add byte [rax + rax], dh
add byte [rax - 0x16], bl
call qword [rax + 0x3040000]
sub eax, 0xe420040
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e44
rol byte [rcx], 1
add al, al
or cl, byte [rsi]
xor byte [rcx + 0xe], al
sub byte [rcx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], al
cmp al, 0
add byte [rax], al
adc al, 1
add byte [rax], al
sal bh, 1
inc byte [rax]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e44
add ch, byte [rcx + 0x41280e0a]
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdx + 0xb], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
add dword [rax], eax
add byte [rax - 0x3c000008], dl
add byte [rax], al
add byte [rax], al
pop rbp
adc byte [rbx - 0x3c5bfdfe], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
je 0x402acf
add byte [rax], al
stc
jmp rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx + rax - 0x5e80000], cl
fild dword [rcx]
add byte [rax], al
add byte [rsi + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b9], es
cmp byte [rbx + 0x1210307], al
or cl, byte [rsi]
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdx + 0xb], al
add byte [rax], al
jl 0x402b2a
add byte [rax], al
add dword [rax], eax
add byte [rax - 0x12], dh
inc dword [rdx + rax]
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x6ff1bbf9], al
add dword [rdx], eax
push rsp
cwde
add dword [rdi + 0xe], esi
movabs al, byte [0x900e4c01980e5a01]
add dword [rdx], eax
loope 0x402b7d
cwde
add dword [rbx + 0xe], ecx
movabs al, byte [0x900e4201980e5801]
add dword [rdx + 0xe], edx
cwde
add dword [rcx + 0xe], esp
movabs al, byte [0x900e4101980e4f01]
add dword [rsi + 0xa], edx
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax + rax], dh
add ah, bh
add dword [rax], eax
add byte [rax - 0x10], al
add byte [rax], al
add al, 0x3b
sub eax, 0xe420040
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx - 0x4ff1b0f9], al
add al, byte [rbx]
lodsb al, byte [rsi]
add dword [rsi], ecx
mov eax, 0xc00e4c02
add dl, byte [rax + 0xe]
mov eax, 0xb00e4202
add al, byte [rdx]
movsxd rcx, dword [rsi]
mov eax, 0xc00e4202
add dl, byte [rax + 0xe]
mov eax, 0xb00e4102
add al, byte [rdx]
or r9b, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rdx + rax], dh
add al, bh
jrcxz 0x402c2a
push rsi
add dword [rax], eax
add byte [rcx + rbx*2], al
sub eax, 0xe420040
adc byte [rbp + 0x180e4202], cl
mov word [rbx], es
and byte [rsi + 0x280e4104], al
add dword [rip + 0x1800e44], 2
ret 0x880e
add dword [rbp + 0xe], eax
nop
add dword [rcx + 0xe], esp
mov byte [rcx], al
add byte [rcx], 2
or cl, byte [rsi]
sub byte [rcx + 0xe], al
and byte [rcx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
and al, 3
add byte [rax], al
movabs al, byte [0x26ffffe5]
adc byte [rbp + 0xe], bl
or byte [rax], al
add byte [rax], r8b
add byte [rbx + rax], bh
add byte [rax], al
cli
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x402cd2
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
test byte [rbx], al
add byte [rax], al
jo 0x402cdc
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or edi, dword [rcx + 0x2922401]
add byte [rbp + 0x502], ah
inc dword [rcx]
xor al, 0x43
ret 1
add byte [rdi + 0x89f0503], ah
add byte [rax + 0xa8f0504], dl
add byte [rbp + rax + 0x9c70196], dh
add dl, bl
add eax, 0x79c0000
add eax, 0xda00089f
add eax, 0xd00009bf
or byte [rip + 0xa8a0000], al
add eax, 0xff0009bf
inc dword [rcx]
sbb ah, ch
add ebp, edi
add edi, dword [rdx + 0x881000c]
movabs eax, dword [0xba1e0ade000c8c01]
or al, 0
xchg eax, edi
or esp, dword [rbx - 0xffffff]
inc dword [rcx]
sbb dword [rdx], esp
add eax, 0xd470000
rol byte [rbx], cl
add byte [rcx + 0x7d], bh
add byte [rax], al
xchg eax, esp
add bh, byte [rsi + 0x3d201]
in al, dx
add eax, dword [rip]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 3], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rdi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
sub eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x402f14
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400b], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x400a], dh
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rsi + 0xa], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xe], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400e], al
add byte [rax], al
add byte [rsi + 0x400e], dl
add byte [rax], al
add byte [rsi + 0x400e], ah
add byte [rax], al
add byte [rsi + 0x400e], dh
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
cmovo r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x4030a9
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400f], al
add byte [rax], al
add byte [rsi + 0x400f], dl
add byte [rax], al
add byte [rsi + 0x400f], ah
add byte [rax], al
add byte [rsi + 0x400f], dh
add byte [rax], al
add dh, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xf, al
add byte [rax], al
add byte [rax], al
add dh, dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x403170
je 0x403179
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x403187
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x403184
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rsi + 0xa], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax + 0x400a], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x400b], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, cl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
cmp byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40101000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], ah
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
lldt word [rdi + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x27], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + 0x4028], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax], ch
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, dword [rax]
hlt
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40934a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x602df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, byte [rax]
call 0x4093dd
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], al
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4012], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax], dh
xor esp, dword [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rcx], al
add byte [rip + 0x602df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], ah
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
call 0x4094e2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2000000], ch
add byte [rsi], cl
add byte [rax + 0x4019], ah
add byte [rax], al
add byte [rdx + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], cl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], ah
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000001], ah
add byte [rbx], bl
add byte [rcx], dh
xor esp, dword [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000001], dh
add byte [rdx], dl
add al, dh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000001], bh
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add dword [rax], eax
add byte [rax], al
add byte [rcx], dl
add byte [rax + 0x4028], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
add dword [rax], eax
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
clc
sub eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 2
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x40961a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add al, byte [rax]
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x20000005], bl
add byte [rdx], bl
add al, ch
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rdx], al
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add al, dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add r8b, byte [r8]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], ah
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x27], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000005], ah
add byte [rsi], cl
add byte [rax + 0x12], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000002], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000001], cl
add byte [rsi], cl
add byte [rax + 0x13], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add ah, cl
add al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 3], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add al, byte [rax]
add byte [rdx], dl
add byte [rdi], cl
add byte [rdi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000003], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x23], al
add byte [rax], al
add byte [rax], al
add bl, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000004], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], ah
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x20000005
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add eax, 0x110000
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x120000
add byte [rax + 0x4014], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add dword [rip + 0x200000], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x10000005], bl
add byte [rdx], bl
add al, ch
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosb byte [rdi], al
add eax, 0x2110000
sbb al, byte [rax]
clc
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 5
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
and byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add ch, cl
add eax, 0x2110000
sbb al, byte [rax]
lock xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd dword [rip + 0x120000]
add al, ah
add byte es:[rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, byte [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
clc
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x12000006], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000006], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x22], al
add byte [rax], al
add byte [rax], al
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
and al, 0x40
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, byte [rax]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
cmp byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 8], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x22], al
add byte [rax], al
add byte [rax], al
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 9], cl
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
clc
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add al, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x403a83
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rcx], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12000009], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
and eax, 0x40
add byte [rax], al
fild dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte gs:[rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rdx], 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ah
adc byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rcx], 0
add byte [rax], al
add byte [rax], al
add ah, ah
add eax, 0x120000
or eax, dword [rax]
cmp byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x403bb2
jne 0x403ba6
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x403b66
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x403be4
jb 0x403bea
pop rdi
jne 0x403bf3
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x403bed
je 0x403be9
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x403c09
jb 0x403c0f
pop rdi
jne 0x403c18
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x403c1b
jns 0x403c0b
outsb dx, byte gs:[rsi]
je 0x403c22
jns 0x403bb2
jb 0x403c16
insd dword [rdi], dx
pop rdi
jne 0x403c28
insd dword [rdi], dx
jns 0x403bbe
pop rdi
pop rdi
jb 0x403c24
insd dword [rdi], dx
pop rdi
jne 0x403c36
insd dword [rdi], dx
jns 0x403c2b
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x403c36
jns 0x403c36
outsb dx, byte gs:[rsi]
je 0x403c4d
jns 0x403bdd
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x403c19
pop rdi
pop rdi
imul ebp, dword [rsi + 0x74], 0x6f736f72
jb 0x403c68
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
outsd dx, dword [rsi]
jo 0x403c43
push rbx
je 0x403c2e
jb 0x403c65
jbe 0x403c67
jb 0x403c77
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x403c76
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x403c8f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x403c66
jo 0x403c95
imul esi, dword [rdx + 0x49], 0x53456369
je 0x403c73
jbe 0x403ca4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x403cd0
xor dword [rip + 0x6574495f], esi
jb 0x403cc4
insb byte [rdi], dx
jae 0x403cdc
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x2e], ebx
imul esi, dword [rbx + 0x72], 0x34352e61
add byte [rdi + 0x5a], bl
pop rdx
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x31456969
cmp dword [rdi + 0x5f], ebx
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x403d33
pop rdi
pop r15
pop rdi
pop rdx
cmp dword [rcx + 0x6c], esp
je 0x403d2e
jb 0x403d39
je 0x403d33
xor eax, 0x31787863
xor dword [rcx + 0x63], ebp
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x403d2a
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x403d97
jns 0x403d97
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x403da8
jns 0x403da8
jae 0x403dbf
jb 0x403dc2
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x403d90
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x5f006969
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x403dd2
imul eax, dword [rax + 0x40], 0x42494c47
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x403de2
pop rdi
pop rdi
je 0x403e1e
jb 0x403e27
ja 0x403e19
pop rdi
movsxd rsp, dword [rcx + 0x73]
je 0x403e39
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x403e08
xor al, 0x5f
pop rdi
je 0x403e43
jb 0x403e4c
ja 0x403e3e
outsd dx, dword [rsi]
jne 0x403e56
pop rdi
outsd dx, dword [rsi]
pop di
jb 0x403e49
outsb dx, byte [rsi]
pop rdi
insw word [rdi], dx
je 0x403e40
movsxd rdi, dword [r10 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rax]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x403e81
jb 0x403e84
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x403e76
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x403e97
jae 0x403e27
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x403e6e
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x403eb3
jb 0x403eb7
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x403e92
movsxd rsi, dword [rcx + rdi*2 + 0x70]
movsxd rax, dword gs:[r13 + 0x31]
xor ebx, dword [rdi + 0x4d]
pop rdi
ja 0x403ed5
outsb dx, byte gs:[rsi]
pop rdi
imul ebp, dword [rsi + 0x69], 0x40764574
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x403ec4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x403f03
movsxd rbx, dword [rdi + 0x73]
je 0x403f11
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x403f0c
je 0x403f21
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x403f2b
push r10
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x403f19
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x403f80
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x635f5f00
js 0x403f85
pop rdi
je 0x403f8d
js 0x403f93
je 0x403f6c
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x403f6f
pop rdi
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x403fbc
jb 0x403fc3
push r11
je 0x403f84
jb 0x403fbb
jbe 0x403fbd
jb 0x403fcd
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x403fcc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x403fe5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x403fbc
jo 0x403feb
imul esi, dword [rdx + 0x49], 0x53456369
je 0x403fc9
jbe 0x403ffa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x404025
xor dword [rip + 0x6574495f], esi
jb 0x404019
insb byte [rdi], dx
jae 0x404031
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40400c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40404b
movsxd rbx, dword [rdi + 0x73]
je 0x404059
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404054
je 0x404069
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rax], esi
pop rdi
pop r15
jb 0x404070
jo 0x404079
movsxd rsp, dword [rbp + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x404066
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x4040bb
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x49], bl
pop r15
jae 0x4040e3
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
js 0x4040ee
outsb dx, byte [rsi]
push rdx
push rbx
je 0x4040be
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4040fd
movsxd rbx, dword [rdi + 0x73]
je 0x40410b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404106
je 0x40411b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul r12d, dword [r11 + 0x63], 0x54495f00
pop r15
jb 0x404127
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x40413c
pop rdi
jae 0x404152
jb 0x404155
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x404127
movsxd rbp, dword [rdi + 0x75]
je 0x404138
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x404179
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x40415f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40419e
movsxd rbx, dword [rdi + 0x73]
je 0x4041ac
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4041a7
je 0x4041bc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x4041bc
jo 0x4041a2
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4041a8
pop rdi
pop rdi
outsd dx, dword [rsi]
jae 0x4041f1
jb 0x4041e4
insd dword [rdi], dx
pop rdi
imul ebp, dword [rsi + 0x73], 0x49747265
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4041f2
je 0x404207
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x4041d2
xor esp, dword [rdx + 0x61]
jae 0x40420f
movsxd rbx, dword [rdi + 0x6f]
jae 0x40421f
jb 0x404212
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x6c]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
cmp dword [rax], eax
pop rdi
pop rdi
jae 0x404247
pop rdi
jae 0x40424b
jb 0x40424e
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
xor eax, 0x73756c66
push 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x40426e
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404266
jbe 0x404297
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40426e
jo 0x40429d
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4042bf
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4042d7
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x4042ad
jo 0x4042ba
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4042a5
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4042df
pop rdi
insd dword [rdi], dx
imul esp, dword fs:[rcx + 0x6e], 0x5f6f745f
imul si, word [rdx + 0x73], 0x4974
push rbx
je 0x4042bf
jb 0x4042f6
jbe 0x4042f8
jb 0x404308
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404307
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404320
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4042f7
jo 0x404326
imul esi, dword [rdx + 0x49], 0x53456369
je 0x404304
jbe 0x404335
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x404360
xor dword [rip + 0x6574495f], esi
jb 0x404354
insb byte [rdi], dx
jae 0x40436c
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x404346
cmp dword [rdi + 0x5f], ebx
je 0x404382
jb 0x40438b
ja 0x40437d
insb byte [rdi], dx
outsd dx, dword [rsi]
imul esp, dword [ebx + 0x5f], 0x6f727265
jb 0x40437a
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404377
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4043b6
movsxd rbx, dword [rdi + 0x73]
je 0x4043c4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4043bf
je 0x4043d4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
jo 0x4043e6
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4043cc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40440b
movsxd rbx, dword [rdi + 0x73]
je 0x404419
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404414
je 0x404429
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rdx], esi
pop rdi
pop r15
movsxd rbp, dword [rdi + 0x6e]
jae 0x404442
jb 0x404445
movsxd rsi, dword [rbp + rax*2 + 0x6d]
movsxd rax, dword [rax + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x404422
jbe 0x404453
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40442a
jo 0x404459
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40447b
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x404493
push r11
xor dword [rdi + 0x45], ebx
jbe 0x404469
jo 0x404476
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x404467
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4044a6
movsxd rbx, dword [rdi + 0x73]
je 0x4044b4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4044af
je 0x4044c4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jne 0x4044da
je 0x4044ce
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x4044e8
add byte [rdi + 0x5f], bl
js 0x404505
pop rdi
jo 0x4044f5
jb 0x404505
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x40451b
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40452a
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40453d
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
xor esi, dword [rax + 0x75]
je 0x404523
movsxd rax, dword [rax + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
insd dword [rdi], dx
insd dword [rdi], dx
movsxd rsi, dword [rax + 0x79]
pop r15
xor ch, byte [rsi]
xor dword [rax + rax], esi
pop rdi
pop rdx
push rbx
je 0x404536
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x404582
pop rdi
push 0x49706165
push rbx
je 0x404548
jb 0x40457f
jbe 0x404581
jb 0x404591
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404590
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4045a9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x404580
jo 0x4045af
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40458d
jbe 0x4045be
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4045ed
xor dword [rip + 0x6574495f], esi
jb 0x4045e1
insb byte [rdi], dx
jae 0x4045f9
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x4045d9
movsxd rsi, dword [rcx + rdi*2 + 0x70]
movsxd rax, dword gs:[r13 + 0x38]
outsd dx, dword fs:[rsi]
pop rdi
ja 0x40461b
outsb dx, byte gs:[rsi]
movsxd r8, dword [r8]
insd dword [rdi], dx
imul ebp, dword [rsi], 0x79732e00
insd dword [rdi], dx
je 0x404625
add byte [rsi], ch
jae 0x40463d
jb 0x40463f
add byte [rsi], ch
jae 0x404639
jae 0x404647
jb 0x404649
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40464a
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x404658
outsb dx, byte cs:[esi]
jne 0x404626
jne 0x404664
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x404634
push 0x687361
jns 0x40467d
jae 0x40468a
insd dword [rdi], dx
add byte [rsi], ch
jns 0x404685
jae 0x40468d
jb 0x40461b
outsb dx, byte cs:[esi]
jne 0x40464e
jbe 0x404687
jb 0x404697
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40465b
jbe 0x404694
jb 0x4046a4
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40469f
insb byte [rdi], dx
jns 0x4046ae
add byte [rsi], ch
jb 0x4046a9
insb byte [rdi], dx
jo 0x4046b5
je 0x40464b
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x404684
outsd dx, dword [esi]
je 0x40465a
je 0x4046c2
js 0x4046d3
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x4046d8
je 0x4046ce
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x4046f1
jo 0x404705
pop rdi
je 0x4046f5
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404703
jns 0x4046a4
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40471f
jns 0x4046b0
push 0x63
jb 0x4046b5
jns 0x404727
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x404731
je 0x4046c7
je 0x40472d
add byte [rsi], ch
jae 0x404744
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4046db
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400a], dh
add byte [rax], al
add byte [rax + 0xa], dh
add byte [rax], al
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rbx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
enter 0xb, 0
add byte [rax], al
add byte [rax], al
jo 0x404984
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
adc byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dl, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x27], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x27], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword ds:[rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4028], ah
add byte [rax], al
add byte [rax + 0x28], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sub byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add ah, dh
sub al, 0
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x60
add byte [rax], al
call 0x404c2a
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x60
add byte [rax], al
clc
sub eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
call 0x404dad
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
clc
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0x45
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], cl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rdx], ecx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
