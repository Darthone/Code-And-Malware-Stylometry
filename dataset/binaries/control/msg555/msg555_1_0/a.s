xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x607167
push rbp
sub rax, obj.std::cin
cmp rax, 0xe
mov rbp, rsp
jbe 0x4015f0
mov eax, 0
test rax, rax
je 0x4015f0
pop rbp
mov edi, obj.std::cin
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.std::cin
push rbp
sub rsi, obj.std::cin
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401638
mov eax, 0
test rax, rax
je 0x401638
pop rbp
mov edi, obj.std::cin
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x205d49], 0
jne 0x40165a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x205d36], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401670
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40166b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov dword [rbp - 0x2c], esi
mov eax, ecx
mov byte [rbp - 0x30], dl
mov byte [rbp - 0x34], al
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call 0x4013e0
mov dword [rbp - 0x1c], 0
mov eax, dword [rbp - 0x1c]
cmp eax, dword [rbp - 0x2c]
jge 0x40170c
movsx edx, byte [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movsx edx, byte [rbp - 0x34]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add dword [rbp - 0x1c], 1
jmp 0x4016c0
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
mov rax, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401725
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0xc8
mov qword [rbp - 0xb8], rdi
mov qword [rbp - 0xc0], rsi
mov dword [rbp - 0xc4], edx
mov eax, ecx
mov edx, r8d
mov byte [rbp - 0xc8], al
mov byte [rbp - 0xcc], dl
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
cmp dword [rbp - 0xc4], 0
jne 0x401793
mov rdx, qword [rbp - 0xc0]
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x4014e0
jmp 0x401971
movsx ecx, byte [rbp - 0xcc]
movsx edx, byte [rbp - 0xc8]
lea rax, [rbp - 0xa0]
mov esi, dword [rbp - 0xc4]
mov rdi, rax
call sym.alternate_abi:cxx11_
mov dword [rbp - 0xa4], 0
mov eax, dword [rbp - 0xa4]
movsxd rbx, eax
mov rax, qword [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
setb al
test al, al
je 0x4018c3
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call 0x401490
movzx eax, byte [rax]
cmp al, byte [rbp - 0xc8]
sete al
test al, al
je 0x4018b7
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, qword [rbp - 0xc0]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, qword [rbp - 0xc0]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0x60]
lea rdx, [rbp - 0xa0]
lea rcx, [rbp - 0x80]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
mov rax, qword [rbp - 0xb8]
lea rdx, [rbp - 0x40]
lea rcx, [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
nop
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4018fc
add dword [rbp - 0xa4], 1
jmp 0x4017c0
lea rax, [rbp - 0xa5]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xa5]
mov rax, qword [rbp - 0xb8]
mov esi, 0x405543
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xa5]
mov rdi, rax
call sym.std::allocator_char_::_allocator
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401971
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401921
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401932
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401957
mov rbx, rax
lea rax, [rbp - 0xa5]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401957
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0xb8]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x40198c
call sym.imp.__stack_chk_fail
add rsp, 0xc8
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x100
mov qword [rbp - 0xf8], rdi
mov dword [rbp - 0xfc], esi
mov dword [rbp - 0x100], edx
mov dword [rbp - 0x104], ecx
mov dword [rbp - 0x108], r8d
mov dword [rbp - 0x10c], r9d
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edx, dword [rbp - 0x100]
mov eax, dword [rbp - 0x10c]
add eax, edx
cmp eax, dword [rbp - 0xfc]
jne 0x401a22
mov eax, dword [rbp - 0x100]
cmp eax, dword [rbp - 0x10c]
jne 0x401a22
mov esi, dword [rbp - 0x100]
mov rax, qword [rbp - 0xf8]
mov ecx, 0x47
mov edx, 0x52
mov rdi, rax
call sym.alternate_abi:cxx11_
jmp 0x4022df
mov edx, dword [rbp - 0x108]
mov eax, dword [rbp + 0x18]
add eax, edx
cmp eax, dword [rbp - 0xfc]
jne 0x401a64
mov eax, dword [rbp - 0x108]
cmp eax, dword [rbp + 0x18]
jne 0x401a64
mov esi, dword [rbp - 0x108]
mov rax, qword [rbp - 0xf8]
mov ecx, 0x56
mov edx, 0x59
mov rdi, rax
call sym.alternate_abi:cxx11_
jmp 0x4022df
mov edx, dword [rbp + 0x10]
mov eax, dword [rbp - 0x104]
add eax, edx
cmp eax, dword [rbp - 0xfc]
jne 0x401aa3
mov eax, dword [rbp + 0x10]
cmp eax, dword [rbp - 0x104]
jne 0x401aa3
mov esi, dword [rbp + 0x10]
mov rax, qword [rbp - 0xf8]
mov ecx, 0x4f
mov edx, 0x42
mov rdi, rax
call sym.alternate_abi:cxx11_
jmp 0x4022df
mov byte [rbp - 0xed], 0
cmp dword [rbp - 0x104], 0
jle 0x401b04
mov eax, dword [rbp + 0x10]
sub eax, dword [rbp - 0x104]
mov dword [rbp + 0x10], eax
mov eax, dword [rbp + 0x10]
test eax, eax
jg 0x401b04
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xc0]
mov rax, qword [rbp - 0xf8]
mov esi, 0x405543
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4022df
cmp dword [rbp - 0x10c], 0
jle 0x401b67
mov eax, dword [rbp - 0x100]
sub eax, dword [rbp - 0x10c]
mov dword [rbp - 0x100], eax
mov eax, dword [rbp - 0x100]
test eax, eax
jg 0x401b67
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xc0]
mov rax, qword [rbp - 0xf8]
mov esi, 0x405543
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4022df
cmp dword [rbp + 0x18], 0
jle 0x401bc4
mov eax, dword [rbp - 0x108]
sub eax, dword [rbp + 0x18]
mov dword [rbp - 0x108], eax
mov eax, dword [rbp - 0x108]
test eax, eax
jg 0x401bc4
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xc0]
mov rax, qword [rbp - 0xf8]
mov esi, 0x405543
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4022df
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::vector
mov byte [rbp - 0xe0], 0x52
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call sym.std::make_pair_int__char_
mov qword [rbp - 0xd0], rax
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::push_back
mov byte [rbp - 0xe0], 0x59
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x108]
mov rsi, rdx
mov rdi, rax
call sym.std::make_pair_int__char_
mov qword [rbp - 0xd0], rax
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::push_back
mov byte [rbp - 0xe0], 0x42
lea rax, [rbp - 0xe0]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.std::make_pair_int__char_
mov qword [rbp - 0xd0], rax
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::push_back
lea rax, [rbp - 0xd0]
lea rdx, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::rend
lea rax, [rbp - 0xe0]
lea rdx, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::rbegin
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
lea rax, [rbp - 0xc0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov ebx, dword [rax]
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov r12d, dword [rax]
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
add eax, r12d
cmp ebx, eax
setg al
test al, al
je 0x401d65
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xd0]
mov rax, qword [rbp - 0xf8]
mov esi, 0x405543
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4021e8
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::allocator
mov edx, dword [rbp - 0x100]
mov eax, dword [rbp - 0x108]
add edx, eax
mov eax, dword [rbp + 0x10]
add eax, edx
movsxd rsi, eax
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xa0]
mov rcx, rdx
mov edx, 0x3f
mov rdi, rax
call 0x401410
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0xec], 0
lea rax, [rbp - 0xc0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
cmp eax, dword [rbp - 0xec]
setg al
test al, al
je 0x401e27
mov eax, dword [rbp - 0xec]
add eax, eax
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401550
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
add dword [rbp - 0xec], 1
jmp 0x401dc1
lea rax, [rbp - 0xc0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
add eax, eax
sub eax, 1
mov dword [rbp - 0xe8], eax
mov edx, dword [rbp - 0x100]
mov eax, dword [rbp - 0x108]
add edx, eax
mov eax, dword [rbp + 0x10]
add eax, edx
cmp eax, dword [rbp - 0xe8]
jle 0x401f5d
mov eax, dword [rbp - 0xe8]
sub eax, 1
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401550
movzx ebx, byte [rax]
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
cmp bl, al
sete al
test al, al
je 0x401efe
mov eax, dword [rbp - 0xe8]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401550
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
jmp 0x401f51
mov eax, dword [rbp - 0xe8]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401550
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
add dword [rbp - 0xe8], 1
jmp 0x401e48
mov dword [rbp - 0xe4], 0
mov eax, dword [rbp - 0xe4]
movsxd rbx, eax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
setb al
test al, al
je 0x40208b
mov eax, dword [rbp - 0xe4]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401550
movzx eax, byte [rax]
cmp al, 0x3f
sete al
test al, al
je 0x40207f
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
test eax, eax
setg al
test al, al
je 0x40202c
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov eax, dword [rbp - 0xe4]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401550
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
jmp 0x40207f
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov eax, dword [rbp - 0xe4]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401550
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
add dword [rbp - 0xe4], 1
jmp 0x401f67
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
test eax, eax
je 0x4020be
mov ecx, str.std::__cxx11::string_solve_int__int__int__int__int__int__int_
mov edx, 0x62
mov esi, str.sorted_code_control_msg555_msg555_1_0_B.cpp
mov edi, str.A_1_.first____0
call sym.imp.__assert_fail
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
test eax, eax
je 0x4020f1
mov ecx, str.std::__cxx11::string_solve_int__int__int__int__int__int__int_
mov edx, 0x63
mov esi, str.sorted_code_control_msg555_msg555_1_0_B.cpp
mov edi, str.A_2_.first____0
call sym.imp.__assert_fail
lea rax, [rbp - 0x80]
mov edx, dword [rbp - 0x104]
lea rsi, [rbp - 0xa0]
mov r8d, 0x4f
mov ecx, 0x42
mov rdi, rax
call sym.expand
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401350
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov edx, dword [rbp - 0x10c]
lea rsi, [rbp - 0xa0]
mov r8d, 0x47
mov ecx, 0x52
mov rdi, rax
call sym.expand
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401350
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x40]
mov edx, dword [rbp + 0x18]
lea rsi, [rbp - 0xa0]
mov r8d, 0x56
mov ecx, 0x59
mov rdi, rax
call sym.expand
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401350
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rdx, [rbp - 0xa0]
mov rax, qword [rbp - 0xf8]
mov rsi, rdx
mov rdi, rax
call 0x4013f0
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_vector
jmp 0x4022df
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4022c5
mov rbx, rax
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4022c5
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4022b1
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4022b1
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4022b1
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4022c5
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0xf8]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4022fa
call sym.imp.__stack_chk_fail
add rsp, 0x100
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x64]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov dword [rbp - 0x44], 1
mov eax, dword [rbp - 0x64]
cmp dword [rbp - 0x44], eax
jg 0x402474
lea rax, [rbp - 0x60]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x5c]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x58]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x54]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x50]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x4c]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x48]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov r8d, dword [rbp - 0x48]
mov edi, dword [rbp - 0x4c]
mov r9d, dword [rbp - 0x50]
mov r10d, dword [rbp - 0x54]
mov ecx, dword [rbp - 0x58]
mov edx, dword [rbp - 0x5c]
mov esi, dword [rbp - 0x60]
lea rax, [rbp - 0x40]
push r8
push rdi
mov r8d, r10d
mov rdi, rax
call sym.solve_abi:cxx11_
add rsp, 0x10
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
test rax, rax
sete al
test al, al
je 0x402414
lea rax, [rbp - 0x40]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov esi, str.Case__
mov edi, obj.std::cout
call sym.std::operator___std::char_traits_char__
mov rdx, rax
mov eax, dword [rbp - 0x44]
mov esi, eax
mov rdi, rdx
call 0x401320
mov esi, 0x4055a6
mov rdi, rax
call sym.std::operator___std::char_traits_char__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
mov esi, sym.std::endl_char_std::char_traits_char__
mov rdi, rax
call sym.std::ostream::operator__
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
add dword [rbp - 0x44], 1
jmp 0x402336
mov eax, 0
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x4024a9
jmp 0x4024a4
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x4024ea
cmp dword [rbp - 8], 0xffff
jne 0x4024ea
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov edx, 0x40
mov rax, qword [rbp - 8]
bsr rax, rax
xor rax, 0x3f
cdqe
sub rdx, rax
mov rax, rdx
sub rax, 1
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int__
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_char_
movzx edx, byte [rax]
mov rax, qword [rbp - 8]
mov byte [rax + 4], dl
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int__
mov rcx, rax
lea rax, [rbp - 0x20]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::pair_int_char_::pair_int__char_void_
mov rax, qword [rbp - 0x20]
mov rdx, qword [rbp - 0x18]
xor rdx, qword fs:[0x28]
je 0x402613
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
add rax, rbx
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::capacity
cmp rax, qword [rbp - 0x18]
jae 0x40268a
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::capacity
cmp rax, qword [rbp - 0x18]
jb 0x40268a
mov eax, 1
jmp 0x40268f
mov eax, 0
mov byte [rbp - 0x19], al
cmp byte [rbp - 0x19], 0
je 0x4026ba
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x38]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::insert
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
jmp 0x4026d8
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call 0x4013f0
mov rax, qword [rbp - 0x28]
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x4013f0
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___std::pair_int_char__
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::emplace_back_std::pair_int_char__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::end
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::begin
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::iterator_std::random_access_iterator_tag_std::pair_int_char__long_std::pair_int_char___std::pair_int_char___::iterator
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rdx, qword [rdx]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
call sym.__gnu_cxx::__ops::__iter_less_iter
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4028f7
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_int_char__::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x402a4d
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::construct_std::pair_int_char__std::pair_int_char___
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x402a6b
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_emplace_back_aux_std::pair_int_char__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402ab8
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::iterator_std::random_access_iterator_tag_std::pair_int_char__long_std::pair_int_char___std::pair_int_char___::iterator
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402b2a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::operator_____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
test al, al
je 0x402c13
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov rdi, rax
call sym.std::__lg
lea rbx, [rax + rax]
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push r13
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rdx
mov rdi, rax
call sym.std::__final_insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x402c28
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_int_char__::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402cc0
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_std::pair_int_char___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::construct_std::pair_int_char__std::pair_int_char___
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::construct_std::pair_int_char__std::pair_int_char___
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::pair_int_char___std::pair_int_char___std::allocator_std::pair_int_char___
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___std::pair_int_char__
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x402f05
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x402eb4
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::destroy_std::pair_int_char__
jmp 0x402ed6
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___std::pair_int_char__
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x4034d0
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call 0x403549
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402fb7
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x58
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x58]
mov rax, qword [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
cmp rax, 0x10
setg al
test al, al
je 0x40310b
cmp qword [rbp - 0x68], 0
jne 0x403069
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x30]
lea rcx, [rbp - 0x40]
lea rax, [rbp - 0x50]
sub rsp, 8
push r13
mov rsi, rcx
mov rdi, rax
call sym.std::__partial_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x40310b
sub qword [rbp - 0x68], 1
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x50]
lea rdx, [rbp - 0x30]
lea rcx, [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rcx
mov rdi, rax
call sym.std::__unguarded_partition_pivot_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x68]
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x60]
mov rdx, qword [rbp - 0x50]
mov qword [rax], rdx
jmp 0x402fe1
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x40311f
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
cmp rax, 0x10
setg al
test al, al
je 0x403202
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x48]
mov edx, 0x10
mov rsi, rcx
mov rdi, rax
call 0x4037c0
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
sub rsp, 8
push r13
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x48]
mov edx, 0x10
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rdx
mov rdi, rax
call sym.std::__unguarded_insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x403244
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x403259
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 8
call 0x40253b
test rax, rax
je 0x403308
mov rdx, qword [rbx]
mov qword [rax], rdx
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x40336f
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
cmp rax, qword [rbp - 0x20]
ja 0x4033cf
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::max_size
cmp rax, qword [rbp - 0x20]
jae 0x4033dd
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::max_size
jmp 0x4033e1
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4033f5
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x403428
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::allocate
jmp 0x40342d
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_int_char___std::move_iterator_std::pair_int_char____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_int_char___std::move_iterator_std::pair_int_char____
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::pair_int_char____std::pair_int_char___std::pair_int_char__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::destroy_std::pair_int_char__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403536
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 3
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rcx
mov rdi, rax
call sym.std::__heap_select_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403663
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x70
mov qword [rbp - 0x68], rdi
mov qword [rbp - 0x70], rsi
mov qword [rbp - 0x78], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x70]
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov rdx, rax
lea rax, [rbp - 0x60]
mov rcx, qword [rbp - 0x70]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x78]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x403e02
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x50]
mov rcx, qword [rbp - 0x70]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x4037c0
mov rdx, qword [rbp - 0x70]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rcx, [rbp - 0x40]
lea rdx, [rbp - 0x20]
lea rsi, [rbp - 0x50]
lea rax, [rbp - 0x30]
sub rsp, 8
push r12
mov rdi, rax
call sym.std::__move_median_to_first_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x70]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x78]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x70]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x4037c0
mov rax, qword [rbp - 0x68]
lea rcx, [rbp - 0x20]
lea rdx, [rbp - 0x30]
lea rsi, [rbp - 0x40]
sub rsp, 8
push rbx
mov rdi, rax
call sym.std::__unguarded_partition_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x68]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x4037b7
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdx, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::operator_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x78
mov qword [rbp - 0x78], rdi
mov qword [rbp - 0x80], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x80]
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call 0x4034d0
test al, al
jne 0x403998
lea rax, [rbp - 0x70]
mov rcx, qword [rbp - 0x78]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x4037c0
mov rdx, qword [rbp - 0x80]
lea rax, [rbp - 0x70]
mov rsi, rdx
mov rdi, rax
call sym.std::operator_____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
test al, al
je 0x403999
mov rdx, qword [rbp - 0x78]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x40394f
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x60], rax
lea rax, [rbp - 0x50]
lea rcx, [rbp - 0x70]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x78]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x90]
lea rcx, [rbp - 0x50]
lea rdx, [rbp - 0x30]
lea rsi, [rbp - 0x40]
mov rdi, rax
call sym.std::move_backward_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
jmp 0x403987
sub rsp, 8
push r13
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x30]
sub rsp, 8
push r12
mov rdi, rax
call sym.std::__unguarded_linear_insert_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x403856
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x4039ad
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::operator_____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
test al, al
je 0x403a49
sub rsp, 8
push r12
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x20]
sub rsp, 8
push rbx
mov rdi, rax
call sym.std::__unguarded_linear_insert_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x4039ed
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403a5e
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x403adf
mov rax, qword [rbp - 0x10]
jmp 0x403ae3
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403b55
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::pair_int_char____std::pair_int_char___
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rax, qword [rax]
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
sub rsp, 8
push r12
mov rsi, rdx
mov rdi, rax
call sym.std::__make_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x68]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x4047d8
test al, al
je 0x403d21
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x403d10
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x403c5e
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403d36
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
cmp rax, 1
setg al
test al, al
je 0x403de7
mov rax, qword [rbp - 0x50]
mov rdi, rax
call 0x40492a
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x403d5f
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403dfc
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdx, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x404948
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x403fe0
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x403f26
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40410e
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x403fa2
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40410e
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40410e
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x40405c
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40410e
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x4040d5
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40410e
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x404123
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x404198
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x40414c
mov rax, qword [rbp - 0x38]
mov rdi, rax
call 0x40492a
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x4041f0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call 0x40492a
jmp 0x4041a4
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x4047d8
xor eax, 1
test al, al
je 0x404232
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x28]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404281
jmp 0x40427c
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x40414c
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 3
neg rdx
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4042e7
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::operator__
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov edx, dword [rax]
mov rax, qword [rbp - 0x10]
mov eax, dword [rax]
cmp edx, eax
jl 0x404348
mov rax, qword [rbp - 0x10]
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov eax, dword [rax]
cmp edx, eax
jl 0x40434f
mov rax, qword [rbp - 8]
movzx edx, byte [rax + 4]
mov rax, qword [rbp - 0x10]
movzx eax, byte [rax + 4]
cmp dl, al
jge 0x40434f
mov eax, 1
jmp 0x404354
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::operator__int_char_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::operator__
mov rdi, rax
call 0x404a0a
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x4043e6
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x70
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov qword [rbp - 0x70], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x70]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x68]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x20]
lea rdx, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::__miter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x40]
lea rdx, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::__miter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x58]
lea rcx, [rbp - 0x10]
lea rdx, [rbp - 0x20]
lea rsi, [rbp - 0x40]
mov rdi, rax
call sym.std::__copy_move_backward_a2_true_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x404492
jmp 0x40448a
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x58]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4044aa
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x10]
add rax, 4
mov rdi, rax
call sym.std::forward_char_
movzx edx, byte [rax]
mov rax, qword [rbp - 8]
mov byte [rax + 4], dl
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x40], rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x40492a
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x40]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Val_less_iter::operator___std::pair_int_char__std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x4045c6
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x30]
mov qword [rax], rdx
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x40492a
jmp 0x404554
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x404601
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x404660
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::pair_int_char____std::pair_int_char___
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
cmp rax, 1
setle al
test al, al
jne 0x4047b7
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x28], rax
lea rax, [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x20]
mov rsi, qword [rbp - 0x28]
lea rax, [rbp - 0x30]
sub rsp, 8
push r12
mov rcx, qword [rbx]
mov rdi, rax
call sym.std::__adjust_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
cmp qword [rbp - 0x28], 0
je 0x4047ba
sub qword [rbp - 0x28], 1
jmp 0x404731
nop
jmp 0x4047bb
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4047cf
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40483e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x40], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov r12, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x30]
sub rsp, 8
push r13
mov rcx, qword [rbx]
mov rdx, r12
mov esi, 0
mov rdi, rax
call sym.std::__adjust_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x40491f
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x404eb2
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 3
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4049a8
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::swap_int_char_
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax - 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Iter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______false_::_S_base
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404a78
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
add rsp, -0x80
mov qword [rbp - 0x68], rdi
mov qword [rbp - 0x70], rsi
mov qword [rbp - 0x78], rdx
mov qword [rbp - 0x80], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x80]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x10]
lea rdx, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::__niter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rdx, qword [rbp - 0x78]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x30]
lea rdx, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::__niter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rdx, qword [rbp - 0x70]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x50]
lea rdx, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__niter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x68]
lea rcx, [rbp - 0x10]
lea rdx, [rbp - 0x30]
lea rsi, [rbp - 0x50]
mov rdi, rax
call sym.std::__copy_move_backward_a_true_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x68]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404b43
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdx, rax
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__int_char_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x405016
test al, al
je 0x404bfb
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::pair_int_char__
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::pair_int_char__std::pair_int_char__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::operator__
add qword [rbp - 0x18], 8
jmp 0x404bab
mov rax, qword [rbp - 0x18]
jmp 0x404c34
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x58
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov qword [rbp - 0x70], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x60]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x60]
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x68]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x38]
jle 0x404d5d
mov rax, qword [rbp - 0x38]
add rax, 1
add rax, rax
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
lea rdx, [rax - 1]
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x50]
mov rdx, qword [rbp - 0x38]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x404cf4
sub qword [rbp - 0x38], 1
lea rax, [rbp - 0x40]
mov rdx, qword [rbp - 0x38]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdx, qword [rbp - 0x60]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x60], rax
jmp 0x404c77
mov rax, qword [rbp - 0x68]
and eax, 1
test rax, rax
jne 0x404e03
mov rax, qword [rbp - 0x68]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x38]
jne 0x404e03
mov rax, qword [rbp - 0x38]
add rax, 1
add rax, rax
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
lea rdx, [rax - 1]
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdx, qword [rbp - 0x60]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x38]
sub rax, 1
mov qword [rbp - 0x60], rax
sub rsp, 8
push r13
call sym.__gnu_cxx::__ops::__iter_comp_val
add rsp, 0x10
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
mov rsi, qword [rbp - 0x60]
lea rax, [rbp - 0x40]
sub rsp, 8
push r12
mov rcx, qword [rbx]
mov rdi, rax
call sym.std::__push_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_val_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x404e6a
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rax, qword [rax]
cmp rbx, rax
setb al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_char_::swap
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Iter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______false_::_S_base
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404f7e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x60
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov qword [rbp - 0x60], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov byte [rbp - 0x31], 0
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x48]
lea rcx, [rbp - 0x10]
lea rdx, [rbp - 0x20]
lea rsi, [rbp - 0x30]
mov rdi, rax
call sym.std::__copy_move_backward_true_false_std::random_access_iterator_tag_::__copy_move_b_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x48]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x405014
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::pair_int_char___
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 8
call 0x40253b
test rax, rax
je 0x4050b9
mov rdx, qword [rbx]
mov qword [rax], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov qword [rbp - 0x70], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x60]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
mov ebx, 0
mov rax, qword [rbp - 0x60]
cmp rax, qword [rbp - 0x68]
jle 0x40514c
lea rax, [rbp - 0x50]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
mov ebx, 1
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x50]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_val::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::pair_int_char__
test al, al
je 0x40514c
mov eax, 1
jmp 0x405151
mov eax, 0
test bl, bl
test al, al
je 0x4051dd
lea rax, [rbp - 0x30]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdx, qword [rbp - 0x60]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x60], rax
mov rax, qword [rbp - 0x60]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
jmp 0x405102
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdx, qword [rbp - 0x60]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4037c0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40522f
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_int_
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 4]
mov rax, qword [rbp - 8]
add rax, 4
mov rsi, rdx
mov rdi, rax
call sym.std::swap_char_
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x18], 0
jle 0x4052f3
mov rax, qword [rbp - 0x38]
mov rdi, rax
call 0x40492a
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call 0x40492a
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
sub qword [rbp - 0x18], 1
jmp 0x4052a7
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x28]
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov rdi, rdx
call sym.std::operator__int_char_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
lea rax, [rbp - 0xc]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4053f9
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_char__
movzx eax, byte [rax]
mov byte [rbp - 9], al
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x18]
mov byte [rax], dl
lea rax, [rbp - 9]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x20]
mov byte [rax], dl
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x405479
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201946]
push rbp
lea rbp, [rip + 0x20194e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x4054e6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x4054d0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x4055b9
jb 0x4055c0
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x4055cb
outsd dx, dword [rsi]
insb byte [rdi], dx
insd dword [rdi], dx
jae 0x4055c6
xor eax, 0x6d2f3535
jae 0x4055cd
xor eax, 0x315f3535
pop rdi
xor byte [rdi], ch
movsxd rsi, dword cs:[rax + 0x70]
add byte [rcx + 0x5b], al
pop r11
xor dword [rbp + 0x2e], ebx
imul si, word [rdx + 0x73], 0x2074
cmp eax, 0x30203d
pop r11
xor bl, byte [rbp + 0x2e]
imul si, word [rdx + 0x73], 0x2074
cmp eax, 0x30203d
push r8
push r11
push rbx
add byte [r11 + 0x61], r8b
jae 0x405608
and byte [rbx], ah
add byte [rdx], bh
and byte [rax], al
jbe 0x405610
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x405624
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40563c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x405656
cmp bh, byte fs:[rdx]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
cmp bh, byte [rdx]
jae 0x405664
jb 0x40565b
outsb dx, byte [rsi]
and byte [ebx + 0x6f], dh
insb byte [rdi], dx
jbe 0x40565f
sub byte [rcx + 0x6e], ch
je 0x40562b
and byte [rcx + 0x6e], ch
je 0x405630
and byte [rcx + 0x6e], ch
je 0x405635
and byte [rcx + 0x6e], ch
je 0x40563a
and byte [rcx + 0x6e], ch
je 0x40563f
and byte [rcx + 0x6e], ch
je 0x405644
and byte [rcx + 0x6e], ch
je 0x405646
add byte [rax], al
add byte [rax], al
add dword [rbx], ebx
add edi, dword [rbx]
add al, 0
add byte [rax - 0x20000000], cl
mov esp, 0x498ffff
add byte [rax], al
jo 0x4055f5
ljmp [rax + 4]
add byte [rax], al
sar bh, 0xff
add byte [rip - 0x3ef40000], 0xff
ljmp [rax + 0x76000005]
ret
lcall [rax + 6]
add byte [rax], al
out 0xcc, al
inc dword [rax - 0x70fffffa]
call qword [rax]
add byte [rax], al
int 0xce
push qword [rax]
add byte [rax], al
loop 0x40563c
inc eax
add al, 0
add al, ch
jmp rax
add al, 0
add dh, ch
inc dword [rax]
add eax, 0xcef40000
jmp qword [rax]
add eax, 0xcf1b0000
inc dword [rax + 5]
add byte [rax], al
sub eax, 0xd0ffffcf
add eax, 0xcf3b0000
push rax
add eax, 0xcf4a0000
call qword [rax]
add byte [rax], al
mov ecx, edi
push qword [rax]
add byte [rax], al
cli
iretd
ljmp [rax + 0x8000006]
sar bh, 1
dec eax
add byte [rax], al
rcl al, cl
push rax
add byte [rax], al
sbb dl, cl
call qword [rax]
add byte [rax], al
sar edi, 1
cmp byte [rdi], al
add byte [rax], al
jp 0x4056af
jmp qword [rax + 7]
add byte [rax], al
mov cl, dl
inc dword [rax - 0x45fffff9]
sar edi, 1
jmp qword [rax - 0x11fffff9]
sar edi, 1
inc eax
add byte [rax], al
and dl, dl
jmp rax
add byte [rax], al
sar bh, cl
inc dword [rax]
or byte [rax], al
add byte [rbx - 0x2e], bl
jmp qword [rax]
or byte [rax], al
add dh, bl
sar bh, cl
dec dword [rax + 8]
add byte [rax], al
sar bh, cl
ljmp [rax + 8]
add byte [rax], al
sbb dl, bl
dec dword [rax + 0x36000008]
sar edi, cl
ljmp [rax - 0x79fffff8]
sar edi, cl
call rax
or byte [rax], al
add byte [rbx + rdx*8 + 0x8f0ffff], dl
add byte [rax], al
mov esi, 0x10ffffd3
or dword [rax], eax
add ah, cl
sar edi, cl
push qword [rax]
or dword [rax], eax
add byte [rsi - 0x2c], cl
call qword [rax + 9]
add byte [rax], al
push qword [rax + 9]
add byte [rax], al
call qword [rax + 0xc000009]
push qword [rax + 0x14000009]
fmul dword [rcx]
add byte [rax], al
push rdx
clc
or dword [rax], eax
add byte [rsi - 0x2a], ch
lcall [rax]
or al, byte [rax]
add byte [rbx + 0x38ffffd6], ah
or al, byte [rax]
add cl, cl
lcall [rax + 0xa]
add byte [rax], al
add dl, bh
js 0x4057ac
add byte [rax], al
in al, dx
fdivr st(7)
jmp qword [rax + 0x900000a]
fcos
inc eax
or al, byte [rax]
add byte [rcx], dh
fcos
jmp rax
or al, byte [rax]
add byte [rcx + 0xffffd9], bl
or eax, dword [rax]
add byte [rdx], cl
ljmp [rax]
or eax, dword [rax]
add byte [rsp + rbx*8 - 1], al
call qword [rax + 0xb]
add byte [rax], al
fdiv st(7), st(0)
push qword [rax + 0xb]
add byte [rax], al
imul ebx, esp, -1
call qword [rax - 0x66fffff5]
fdiv st(7), st(0)
push qword [rax - 0x57fffff5]
fdiv st(7), st(0)
call rax
or eax, dword [rax]
add al, dh
fdiv st(7), st(0)
push rax
or eax, dword [rax]
add ah, bl
lcall [rax]
or al, 0
add byte [rax], dl
fdivp st(7)
cmp byte [rax + rax], cl
add byte [rsi], dh
fdivp st(7)
lcall [rax + 0xc]
add byte [rax], al
mov bl, dh
inc dword [rax - 0x4ffffff4]
fdivp st(7)
jmp qword [rax + 0x1800000c]
inc eax
or al, 0
add byte [rcx], ch
jmp rax
or al, 0
add byte [rdi + rbx*8 - 1], ch
inc dword [rax]
or eax, 0xe04c0000
ljmp [rax]
or eax, 0xe1a00000
call qword [rax + 0xd]
add byte [rax], al
loope 0x40584e
push qword [rax + 0xd]
add byte [rax], al
cwde
jrcxz 0x405856
lcall [rax + 0x4800000d]
in al, 0xff
inc eax
or eax, 0xe4540000
jmp rax
or eax, 0xe4780000
inc dword [rax]
add byte [rax], al
in al, 0xff
jmp qword [rax]
add byte [rax], al
in al, 0xff
inc dword [rax + 0xe]
add byte [rax], al
out dx, eax
in al, 0xff
jmp qword [rax + 0xe]
add byte [rax], al
in eax, 0xff
inc dword [rax + 0x6800000e]
in eax, 0xff
jmp qword [rax + 0x7700000e]
in eax, 0xff
inc eax
add byte [rax], al
mov ah, 0xe5
jmp rax
add byte [rax], al
ret 0xffe5
inc dword [rax]
sldt word [rax]
out 0xff, eax
ljmp [rax]
sldt word [rax]
loop 0x4058a5
call qword [rax + 0xf]
add byte [rax], al
and eax, ebp
push qword [rax + 0xf]
add byte [rax], al
add eax, 0x90ffffeb
sldt word [rax]
in al, dx
push qword [rax - 0x35fffff1]
in al, dx
call rax
sldt word [rax]
call 0xfffffffff14058d5
sldt word [rax]
in eax, dx
call qword [rax]
adc byte [rax], al
add byte [rax - 0x13], bh
push qword [rax]
adc byte [rax], al
add al, cl
in eax, dx
call qword [rax + 0x10]
add byte [rax], al
mov esi, gs
js 0x40591a
add byte [rax], al
out dx, al
lcall [rax - 0x21fffff0]
out dx, al
mov eax, 0xe8000010
out dx, eax
jmp rax
adc byte [rax], al
add byte [rdx], al
inc dword [rax]
adc dword [rax], eax
add byte [rax], dl
jmp qword [rax]
adc dword [rax], eax
add byte [rdx - 0x10], dl
inc dword [rax + 0x11]
add byte [rax], al
insb byte [rdi], dx
jmp qword [rax + 0x11]
add byte [rax], al
popfq
inc dword [rax - 0x47ffffef]
int1
ljmp [rax + 0x20000011]
dec eax
adc dword [rax], eax
add byte [rdx], cl
push rax
adc dword [rax], eax
add byte [rax], ch
call qword [rax]
adc al, byte [rax]
add byte [rdx + 0x30fffff3], cl
adc al, byte [rax]
add dl, cl
call qword [rax + 0x12]
add byte [rax], al
push qword [rax + 0x12]
add byte [rax], al
sti
call qword [rax + 0x5a000012]
hlt
push qword [rax + 0x26000012]
cmc
call rax
adc al, byte [rax]
add byte [rdx - 0xb], bl
push rax
adc al, byte [rax]
add byte [rsi - 0xb], ch
call qword [rax]
adc eax, dword [rax]
add byte [rbx], bl
idiv bh
cmp byte [rbx], dl
add byte [rax], al
push rbp
clc
jmp qword [rax + 0x13]
add byte [rax], al
xchg eax, edx
clc
inc dword [rax - 0x4dffffed]
clc
jmp qword [rax - 0x27ffffed]
clc
inc eax
adc eax, dword [rax]
add byte [rcx], al
stc
jmp rax
adc eax, dword [rax]
add byte [rax - 7], ah
inc dword [rax]
adc al, 0
add dh, dh
stc
jmp qword [rax]
adc al, 0
add byte [rsi], bl
cli
inc dword [rax + 0x14]
add byte [rax], al
cli
jmp qword [rax + 0x14]
add byte [rax], al
cli
inc dword [rax + 0x5d000014]
cli
jmp qword [rax - 0x5effffec]
cli
inc eax
adc al, 0
add byte [rsi], dl
cld
call 0x57405a31
cld
dec dword [rax]
adc eax, 0xfcf10000
push qword [rax]
adc eax, 0xfd2a0000
call qword [rax + 0x15]
add byte [rax], al
pop rsi
std
push qword [rax + 0x15]
add byte [rax], al
insb byte [rdi], dx
std
call qword [rax - 0x24ffffeb]
std
push qword [rax - 0x16ffffeb]
std
call rax
adc eax, 0xfe5c0000
push rax
adc eax, 0xfe700000
call qword [rax + 0x16]
add byte [rax], al
loopne 0x405a64
lcall [rax + 0x16]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x405a8f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rbx + 0x2affff], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x405abf
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov eax, 0x280ffff
add byte [rax], al
add byte [rsi], cl
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rdx], bl
retf -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rax], al
retf -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
out 0xc9, al
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add ah, cl
leave
jmp qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add bl, dl
leave
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x405ba1
add edx, dword [rax]
adc eax, 0x1b030040
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
fidivr word [rdx + 0xa6ffff]
add byte [rax], al
add al, 0xd4
insb byte [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pushfq
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rbx + rdi*4 - 1], bl
ljmp [rdx + 2]
add byte [rax], al
add al, 0xe1
insb byte [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
pop rbp
add cl, byte [rdi + rax]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
add dword [rax], eax
add byte [rbp - 0x37], dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x405c17
add byte [rax], al
leave
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rdx], dh
leave
inc dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x405c57
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 1
add byte [rax], al
push rbx
leave
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add byte [rax], al
add byte [rsi], dl
mov ebp, 0x970ffff
add byte [rax], al
add al, 0xc
insd dword [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x61
or dword [rdi + rax], ecx
or byte [rax + rax], ah
add byte [rax], al
and al, 1
add byte [rax], al
pop rsi
ljmp [rcx + 0x4000001]
insw word [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
lahf
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 2
add byte [rax], al
leave
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rax], bh
leave
dec edx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
ror byte [rdi + rax], 8
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x405d18
add byte [rax], al
fcmove st(0), st(1)
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov ah, 1
add byte [rax], al
add cl, dl
lcall [rbx]
add byte [rax], al
add byte [rdx + rdi*2], al
insd dword [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rcx]
add byte [rax], al
test cl, 0xff
inc dword [rax + rax]
add byte [rsi + rdi*2], al
insd dword [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x405d83
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 2
add byte [rax], al
adc cl, dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 3
add byte [rax], al
add dl, cl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
adc cl, dl
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8d, dword [rax]
add byte [rsi], ah
retf -1
xor al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword fs:[rax]
add byte [rdx], bh
retf -1
or eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], al
add byte [rax], al
retf -1
sub eax, 0
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add byte [rbx], dh
retf -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
js 0x405e6b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add eax, dword [rax]
add byte [rsi + 0x20ffffca], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add eax, dword [rax]
add byte [rsi + 0x1bffffca], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 4
add byte [rax], al
mov cl, dl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add r8, qword [rax]
add byte [rsi + 0x50ffffca], al
add byte [rax], al
add byte [rdx + rax*4], al
insd dword [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
add al, 0
add byte [rsi + 0xeffffca], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x405f1a
add byte [rax], al
pushfq
retf -1
sub al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add al, 0
add byte [rsi + 0xeffffca], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 4
add byte [rax], al
xchg eax, esp
retf -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0
add dh, dh
retf -1
add byte [rax], r8b
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add al, 0
add byte [rdx], ah
retf
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 5
add byte [rax], al
sub al, 0xcb
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
xor al, 5
add byte [rax], al
push rsp
retf
inc dword [rdi]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70cf902
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add eax, 0xcc340000
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40601f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x406023
add byte [rax], al
push rdx
int3
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add eax, 0xcc4e0000
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x40605f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x63000005
int3
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rip - 0x33970000]
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40609f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 5
add byte [rax], al
int3
add dword [rax], eax
add byte [rax + rcx*4], al
insd dword [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
loopne 0x4060bc
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 6
add byte [rax], al
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
ljmp [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
test byte [rsi], al
add byte [rax], al
xchg eax, ecx
push qword [rcx + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc016303
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
fcmove st(0), st(7)
cmp al, byte [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc012c03
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
in al, dx
sar bh, 1
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
call 0xc40616d
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 7
add byte [rax], al
rcl eax, cl
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
xor al, 7
add byte [rax], al
loope 0x4061aa
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add byte [rax], al
rcl al, 1
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7e
or al, 7
or byte [rax + rax], ah
add byte [rax], al
je 0x40621d
add byte [rax], al
clc
sar bh, 1
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x40623b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
mov esp, 0x33ffffd1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xd0000007
sar edi, 1
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rdi]
add byte [rax], al
sar edi, 1
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 8
add byte [rax], al
add dl, dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 8
add byte [rax], al
or dl, dl
ljmp [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or byte [rax], r8b
add byte [rax - 0x2e], dl
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte fs:[rax], al
add byte [rcx - 0x2e], al
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], ah
add byte [rax], al
test byte [rax], cl
add byte [rax], al
sar bh, cl
jmp rax
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x2c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
or byte [rax], al
add byte [rbx + rdx*8], bl
call qword [rcx + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x48
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or byte [rax], al
add byte [rax - 0x2c], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x406397
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
or byte [rax], al
add byte [rdi - 0x2c], ah
mov ecx, 1
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc01ab03
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sbb al, 9
add byte [rax], al
clc
ljmp [rdi]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x5d
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword [rax], r8d
add byte [rax + 0xbffffd6], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword fs:[rax], eax
add byte [rsi + rdx*8 - 1], ch
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], cl
add byte [rax], al
jo 0x406400
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or dword [rax], eax
add byte [rdx - 0x2a], dh
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword [rax], eax
add byte [rbp - 0x2a], bh
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 9
add byte [rax], al
xchg esi, edx
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0xa
add byte [rax], al
scasd eax, dword [rdi]
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xa
add byte [rax], al
rcl dh, 0xff
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or r8b, byte [rax]
add byte [rdi + 0x3cffffd6], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
or al, byte fs:[rax]
add ah, cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdx], cl
add byte [rax], al
mov edx, 0x5dffffd6
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x51
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
lodsb al, byte [rsi]
or al, byte [rax]
add bh, ch
xlatb
inc ebx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov ecx, 0x8070c
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, byte [rax]
add byte [rdx + 0x3fffffd8], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x406597
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or al, byte [rax]
add byte [rcx - 0x1b000028], ch
add al, byte [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ebx, edi
add cl, byte [rdi + rax]
or byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xb
add byte [rax], al
insd dword [rdi], dx
lcall [rsi + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ebx, dword [rcx + 1]
or al, 7
or byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xb
add byte [rax], al
lodsb al, byte [rsi]
fdiv st(7), st(0)
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
or eax, dword [rax]
add dl, dh
fdiv st(7), st(0)
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x406621
add byte [rax], al
fdiv st(7), st(0)
dec dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
or eax, dword [rax]
add byte [rsi], bl
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x78
or al, 7
or byte [rax + rax], bl
add byte [rax], al
mov ah, 0xb
add byte [rax], al
call qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
hlt
or al, byte [rax]
add byte [rax - 0x23], dh
inc esp
add byte [rax], al
add byte [rax + rsi*4], al
insd dword [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bh, byte [rdi + 0x8070c]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
or eax, dword [rax]
add byte [rsi + rbx*8], cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xc
add byte [rax], al
cli
inc dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jg 0x4066df
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0xc
add byte [rax], al
fdivp st(7)
dec dword [rdx]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
add byte [rcx], al
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], cl
add dl, bh
fdivp st(7)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or al, 0
add al, ch
fdivp st(7)
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x406767
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0
add byte [rdx], cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xc
add byte [rax], al
add al, 0xdf
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0xd
add byte [rax], al
adc eax, 0x1bffffdf
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0xf
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0xd
add byte [rax], al
or al, ah
ljmp [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
or rax, 0xffffffffe0500000
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70cdc02
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x406823
add byte [rax], al
adc ah, cl
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or eax, 0xe1100000
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 0xd
add byte [rax], al
push rdx
loope 0x40685a
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x75
or al, 7
or byte [rax + rax], bl
add byte [rax], al
or eax, 0xe1720000
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or eax, 0xe1720000
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xe
add byte [rax], al
movsxd rsp, ecx
lcall [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0xe
add byte [rax], al
movabs byte [0xcbffffe1], al
adc byte [rsi + 0x60d4302], al
add al, dh
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
add byte [rax], al
loop 0x4068fa
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x406924
add byte [rax], al
loop 0x40691a
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 0xd
add byte [rax], al
push rsi
loop 0x40693a
ljmp [rbp + 0x4000000]
insd dword [rdi], dx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x2400000008070c], eax
add byte [rax], al
mov esp, 0xdb00000e
loop 0x406962
cmp al, byte [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc022c03
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 0xe
add byte [rax], al
in eax, dx
in al, 0xff
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
add al, 0xf
add byte [rax], al
or ah, ch
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xf
add byte [rax], al
or ah, ch
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
adc ch, ah
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word fs:[rax]
sbb ebp, esp
lcall [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rdi], cl
add byte [rax], al
pop rax
in eax, 0xff
call qword [rsi]
adc byte [rsi + 0x60d4302], al
add dl, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sldt word [rax]
in eax, 0xff
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
in eax, 0xff
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xf
add byte [rax], al
in eax, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x10
add byte [rax], al
in eax, 0xff
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x10
add byte [rax], al
mov ch, 0xe5
inc dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7a
or al, 7
or byte [rax + rax], ah
add byte [rax], al
adc byte [rax], r8b
add cl, bl
in eax, 0xff
push qword [rbp + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
imul eax, dword [rcx], 0xc
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
adc byte [rax], al
add byte [rsi], ah
out 0xff, eax
inc dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x406b2f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rax], ss
add byte [rax], al
out 0xff, eax
lcall [rdx]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
nop
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x10
add byte [rax], al
mov ecx, 0x39ffffe7
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
adc byte [rax], al
add dl, dl
out 0xff, eax
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
adc byte [rax], al
add dh, ah
out 0xff, eax
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0x11
add byte [rax], al
out 0xff, eax
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0x11
add byte [rax], al
and ebp, eax
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
adc dword [rax], eax
add byte [rcx], dl
call 0xb36bfd
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x406c27
add byte [rax], al
call 0x526c1d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
adc dword [rax], eax
add byte [rdi - 0x48], dh
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x406c57
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x11
add byte [rax], al
xchg eax, ebp
mov eax, 0x15ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, dl
adc dword [rax], eax
add byte [rax], bl
call 0xa66c7d
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x406cb2
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
sbb al, 0x12
add byte [rax], al
call 0x436cc5
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or dword [rdi + 0x17], ecx
insb byte [rdi], dx
add byte [rcx + 0x501], al
inc dword [rcx]
pop rbp
sub eax, 0x2870000
add eax, 0xab0004a8
add al, byte [rip - 0x3afffb7d]
add al, byte [rip - 0x20fffc0e]
add al, byte [rip - 0x43fffc1f]
add eax, dword [rip - 0x3ffffb6c]
add al, 5
add byte [rax], al
inc dword [rcx]
push rsi
add dword [rsi - 0x2affffff], eax
add al, byte [rip - 0x47ffef1a]
add eax, dword [rip - 0x6affee7d]
add al, 5
movabs al, byte [0x12ac01ca04f80011]
add byte [rsi + 0x11bd0507], dh
add byte [rbp + 0x11d10508], cl
add dh, ah
or byte [rcx + 0x129806], bl
nop
syscall
in eax, 0x11
add al, al
syscall
cwde
adc al, byte [rax]
syscall
not byte [rcx]
add byte [rbx + 0x12980510], al
add byte [rcx + 0x12870510], bl
add dh, bh
adc bl, cl
add dword [rax], eax
add bh, bh
inc dword [rcx]
adc byte [rdi + rdi*4], ah
add dword [rax], eax
add byte [rcx + 0x3845002], cl
add byte [rcx + 0x503], bl
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add byte [rax], al
add bh, bh
add esp, dword [rip + 0x1c221a01]
add byte [rax], al
mov ah, 1
add eax, 0xe60102d7
add dword [rdx], edi
add byte [rax], al
mov eax, dword [rbx]
rol byte [r11], 1
add dh, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
adc byte [rbx + 5], bl
movabs byte [0x1a01d01810001], al
movsd dword [rdi], dword ptr [rsi]
add dword [rip + 0x3ff0000], eax
sbb dword [rcx], eax
movntps xmmword [rip + 0x18e0173], xmm0
add eax, 0xa1000193
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 0x16], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
fcom dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rdx*2 + 0x40], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x40ced2
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x406f63
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 3], ch
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 0xe], bl
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add dh, dh
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi + 0x60], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
adc eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40705d
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4013], al
add byte [rax], al
add byte [rsi + 0x4013], dl
add byte [rax], al
add byte [rsi + 0x4013], ah
add byte [rax], al
add byte [rsi + 0x4013], dh
add byte [rax], al
add dh, al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0x13, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x14], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x14], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x14], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x14], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4014], al
add byte [rax], al
add byte [rsi + 0x4014], dl
add byte [rax], al
add byte [rsi + 0x4014], ah
add byte [rax], al
add byte [rsi + 0x4014], dh
add byte [rax], al
add dh, al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add dh, ah
adc al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
push rsi
adc eax, 0x40
add byte [rax], al
adc ax, 0x40
add byte [rax], al
add byte [rax], al
jbe 0x40715f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4071d8
je 0x4071e1
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x4071ef
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x4071ec
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add dh, dh
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax], dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
fcom dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40158000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0x4015], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rdx*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
and byte [rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax], ah
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x5a], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add ah, dl
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40d3f2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x606df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
jo 0x40745b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x71], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax + 0x71], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, al
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x16], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x6073], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x606df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x16], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40d58a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax + 0x55], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rcx + 0x6073], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x55], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x55], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add al, ah
push rbp
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2000001], ah
add byte [rsi], cl
add byte [rdi + 0x4024], ch
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dl
add byte [rax], al
add al, byte [rax]
add ch, ch
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], bh
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
shr byte [rax + rax*2], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dl
add byte [rcx], dl
add byte [rax], ah
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000001], ch
add byte [rcx], bl
add byte [rax], al
jo 0x4076cb
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], bh
add byte [rax + rax], dl
clc
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
call 0x40d70a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
sbb byte [rax], al
add byte [rax], ah
add byte [rdx], bl
add byte [rax + 0x71], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
add byte es:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 2], dl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
jno 0x40775b
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], ah
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
and eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000002], ah
add byte [rsi], cl
add byte [rsi + 0x4019], dl
add byte [rax], al
add byte [rax + 9], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x22000002
add byte [rsi], cl
add byte [rdi + 0x3b], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, cl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 3], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4039], bh
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add cl, bh
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x402f], bh
add byte [rax], al
add byte [rcx + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000004], bh
add byte [rsi], cl
add byte [rdx + rdi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbp + 0x40], dh
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x220000
add al, ch
add byte [rax], al
add byte [rax], al
add ah, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000005], bh
add byte [rsi], cl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
and al, byte [rax]
add bl, al
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000006], bh
add byte [rsi], cl
add byte [rsi + 0x29], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rsi], 0x220000
add byte [rcx], cl
push rsp
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x407878
add byte [rax], al
and al, byte [rax]
add dh, bl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000006], bh
add byte [rsi], cl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd dword [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3a], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rax], bh
xor eax, 0x40
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdi], 1
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte ds:[rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x4015], dl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [r8], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4032], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 8], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000008], bl
add byte [rsi], cl
add byte [rsi], cl
and eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword fs:[rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rsi + 0x4016], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rsi], al
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, cl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 9], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x25], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000009], al
add byte [rsi], cl
add byte [rdx + 0x4a], bh
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xa], bl
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0xa
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x407a5c
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x403a], bl
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000a], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000a], bh
add byte [rsi], cl
add byte [rdx + 0x4049], ch
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000b], al
add byte [rsi], cl
add byte [rsi + 0x28], cl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add ch, ah
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
add byte ds:[rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [rax], al
adc al, byte [rax]
sldt word [rdx*2 + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x49], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1200000c], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add ch, ah
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x220000
add byte [rsi + 0x34], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xd], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x35], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror dword [rip + 0x220000], 0xe
add byte [rsp + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
or eax, 0x220000
add byte [rsi], bl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x2200000e
add byte [rsi], cl
add byte [rsi + 0x28], cl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rcx + 0x2200000e], bl
add byte [rsi], cl
add byte [rsi + 0x27], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000e], bh
add byte [rsi], cl
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
sldt word [rax]
and al, byte [rax]
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xf], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x2c], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1200000f], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000f], ch
add byte [rsi], cl
add byte [rcx + 0x4032], bh
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
sldt word [rax]
and al, byte [rax]
add byte [rsi + 0x404b], cl
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rdi + 0x10], al
add byte [rax], al
and al, byte [rax]
add cl, al
push rax
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x407cba
add byte [rax], al
and al, byte [rax]
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x407cd3
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4041], ah
add byte [rax], al
add byte [rsi + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x22000012
add byte [rsi], cl
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x407d04
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000012], bh
add byte [rsi], cl
add byte [rsi + rax*2 + 0x40], cl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4029], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x2f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0x12000013
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], bh
and eax, 0x40
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fist word [rbx]
add byte [rax], al
and al, byte [rax]
add bh, bh
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], bh
add byte [rax], al
add byte [rbp + 0x14], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x28], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdx + 0x120000], bh
add byte [rax], al
rcl byte [rbx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
adc al, 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x15], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rip + 0x110000], ss
adc byte [rax], al
and byte [rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
adc eax, 0x120000
add byte [rdi + rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rdx + 2], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
ficom word [rip + 0x120000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub edx, dword [rsi]
add byte [rax], al
and al, byte [rax]
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdx], cl
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000016], cl
add byte [rsi], cl
add byte [rax], dh
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000016], dh
add byte [rsi], cl
add dl, dh
add byte es:[rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
and al, byte [rax]
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdx + 0x220000], dh
add byte [rbx + 0x28], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rsi], bl
sbb byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
sbb byte [rax], al
add byte [rax], dl
add byte [rdx], bl
add byte [rax + 0x71], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x18], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4b], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x407f62
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], al
and eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
sbb byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000019], bh
add byte [rsi], cl
add byte [rsi], dh
push rdx
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2a], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x19], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + rsi + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx + 0x220000], dl
add dh, bh
sub byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x22000019
add byte [rsi], cl
add byte [rsi + 0x50], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x28], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rsi + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], dl
add byte [rax], al
add byte [rax], al
add cl, cl
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x404f], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rbx + 0x1b], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4044], bh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1b], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x404e], dh
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200001b], dh
add byte [rsi], cl
add byte [rdi + 0x52], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rbp + 0x1c], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx + 0x220000], dl
add byte [rdx + 0x4027], bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ch
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
cmp al, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
sbb eax, 0x220000
add byte [rbp + 0x50], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200001d], bl
add byte [rsi], cl
add byte [rdx + 0x53], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x2200001e
add byte [rsi], cl
add byte [rdi + 0x403b], dl
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x408148
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0x56000e002200001e]
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1f], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1100001f], cl
add bl, byte [rdx]
add byte [rax + 0x71], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbx + 0x110000], dl
sbb eax, dword [rax]
xor byte [rdx + 0x60], 0
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
add byte [rax], al
and al, byte [rax]
add byte [rcx], dl
push rbx
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
pop rax
jno 0x408253
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x50], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000020], dl
add byte [rsi], cl
add ah, ch
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x20], dl
add byte [rax], al
and al, byte [rax]
add ah, ah
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x20], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x4054], dl
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, dword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rax + rdx*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000020], dh
add byte [rsi], cl
add byte [rsi], bl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000021], ch
add byte [rsi], cl
add byte [rdx + 0x2c], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rsi + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x21], bl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4e], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0x21
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x402a], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000022], dl
add byte [rsi], cl
add byte [rbp + 0x4046], bh
add byte [rax], al
add byte [rbx], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000022], ah
add byte [rsi], cl
add byte [rax], ch
add byte es:[rax], al
add byte [rax], al
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4027], ch
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000023], bh
add byte [rsi], cl
add byte [rax + 0x403b], cl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x43], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x4083be
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x46], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000024], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rbp], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000025], al
add byte [rsi], cl
add byte [rbx + 0x4032], cl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
and eax, 0x100000
sbb eax, dword [rax]
jno 0x408463
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
and eax, 0x220000
add al, dl
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
and al, byte [rax]
add cl, ch
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000026], al
add byte [rsi], cl
add byte [rdi + rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add bh, cl
add byte es:[rax], al
and al, byte [rax]
add bl, bh
push rbx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3a], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add ah, bh
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x53], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4032], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000028], dh
add byte [rsi], cl
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x28], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
shr byte [rax], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x25], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild qword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4025], ch
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x29], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
sub eax, 0x40
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000029], dl
add byte [rsi], cl
add byte [rsi + 0x27], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000029], bh
add byte [rsi], cl
add dl, ah
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
pop rbp
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2a], cl
add byte [rax], al
and al, byte [rax]
add cl, ch
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200002a], bl
add byte [rsi], cl
add byte [rcx + 0x3e], al
add byte [rax], al
add byte [rax], al
add ah, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, byte [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x403a], bh
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200002b], ah
add byte [rsi], cl
add byte [rax + 0x4043], bl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax + rax], ebp
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], bh
cmp eax, 0x40
add byte [rax], al
ret
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add byte [rax + 0x6073], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1200002c], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200002c], dh
add byte [rsi], cl
add ah, dl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x46], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200002d], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2d], dh
add byte [rax], al
and al, byte [rax]
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
sub eax, 0x220000
add byte [rsi + 0x4b], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
add byte cs:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x408758
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add byte cs:[rax], al
and al, byte [rax]
add byte [0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200002e], ch
add byte [rsi], cl
add byte [rsp + rax*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte cs:[rax], al
and al, byte [rax]
add byte [rdx], ah
sub eax, 0x40
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x25], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2f], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
rcl byte [rax + rax*2], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0x1200002f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rsi + 0x40], cl
add byte [rax], al
loopne 0x4087fa
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0x12000030], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub esi, dword [rcx]
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
jno 0x40889b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
xor dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rsi], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x48], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
xor dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], dl
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x4088dc
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4034], ch
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000032], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdx], dl
xor eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x402a], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi], dh
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
xor eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
xor eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rdx*2 + 0x40], cl
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x34], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + rax*2 + 0x40], al
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000034], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x35], bh
add byte [rax], al
and al, byte [rax]
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
xor eax, 0x220000
add byte [rdi], cl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte ss:[rax], al
and al, byte [rax]
add byte [rsi + 0x402c], cl
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdi + 0x36], cl
add byte [rax], al
adc al, byte [rax]
add byte [rsi], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
test eax, 1
add byte [rax], al
add byte [rbp + 0x12000020], al
add byte [rbx], cl
add al, bl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte ss:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x408ab8
je 0x408abc
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x408a6e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x408aec
jb 0x408af2
pop rdi
jne 0x408afb
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x408af5
je 0x408af1
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x408b11
jb 0x408b17
pop rdi
jne 0x408b20
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x408b23
jns 0x408b13
outsb dx, byte gs:[rsi]
je 0x408b2a
jns 0x408aba
jb 0x408b1e
insd dword [rdi], dx
pop rdi
jne 0x408b30
insd dword [rdi], dx
jns 0x408ac6
pop rdi
pop rdi
jb 0x408b2c
insd dword [rdi], dx
pop rdi
jne 0x408b3e
insd dword [rdi], dx
jns 0x408b33
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x408b3e
jns 0x408b3e
outsb dx, byte gs:[rsi]
je 0x408b55
jns 0x408ae5
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x408b3c
xor dword [rcx], edi
jo 0x408b5d
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x408b75
jb 0x408b78
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x408b57
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x408b66
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408b85
jb 0x408b90
add byte [rdi + 0x5a], bl
push rbx
je 0x408b7b
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
pop rdx
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x31456969
cmp dword [rdi + 0x5f], ebx
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x408be1
je 0x408bd9
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x408be7
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x408bfd
jb 0x408c00
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x408c15
pop rdi
pop r15
pop rdi
pop rdx
cmp dword [rcx + 0x6c], esp
je 0x408c10
jb 0x408c1b
je 0x408c15
xor eax, 0x31787863
xor dword [rcx + 0x63], ebp
movsxd rax, dword [rax]
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x408c6a
jns 0x408c6a
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x408c7b
jns 0x408c7b
jae 0x408c92
jb 0x408c95
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x408c64
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x408c99
push r10
push rbx
je 0x408c71
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408cb0
movsxd rbx, dword [rdi + 0x73]
je 0x408cbe
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408cb9
je 0x408cce
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x408ca1
jb 0x408cd8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x408cdc
pop rdi
jb 0x408cdf
jb 0x408ce3
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x408cf9
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408cc8
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408d0f
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x408ceb
xor eax, 0x74695f5f
jb 0x408d21
movsxd rbp, dword [rdi + 0x6d]
jo 0x408d26
jbe 0x408d2a
insb byte [rdi], dx
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x408d36
insb byte [rdi], dx
jae 0x408d4e
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x5f006969
pop rdx
push rbx
je 0x408d30
xor bl, byte [rdi + 0x5f]
jne 0x408d71
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x408d8c
pop rdi
push r11
je 0x408d4a
xor ebp, dword [rbp + 0x6f]
jbe 0x408d83
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408d60
jo 0x408d8f
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x6153525f
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408db9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408dc2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408db6
push rbx
je 0x408da4
jo 0x408dd3
imul esi, dword [rdx + 0x49], 0x45456369
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x408df3
jb 0x408df6
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x408de0
push rsp
pop rdi
jo 0x408de4
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408dd0
pop rdi
pop rdi
jne 0x408e11
jne 0x408e07
jb 0x408e0c
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x408e26
jb 0x408e2d
push r11
je 0x408dee
jb 0x408e25
jbe 0x408e27
jb 0x408e37
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408e36
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408e4f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408e26
jo 0x408e55
imul esi, dword [rdx + 0x49], 0x53456369
je 0x408e33
jbe 0x408e64
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408e8f
xor dword [rip + 0x6574495f], esi
jb 0x408e83
insb byte [rdi], dx
jae 0x408e9b
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408e6f
pop rdi
pop rdi
imul ebp, dword [rsi + 0x74], 0x6f736f72
jb 0x408ebe
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
outsd dx, dword [rsi]
jo 0x408e99
push rbx
je 0x408e84
jb 0x408ebb
jbe 0x408ebd
jb 0x408ecd
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408ecc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408ee5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408ebc
jo 0x408eeb
imul esi, dword [rdx + 0x49], 0x53456369
je 0x408ec9
jbe 0x408efa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408f26
xor dword [rip + 0x6574495f], esi
jb 0x408f1a
insb byte [rdi], dx
jae 0x408f32
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408f0a
xor byte [rdi + 0x5f], bl
je 0x408f45
jb 0x408f4e
ja 0x408f40
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x408f4f
pop rdi
jb 0x408f5d
outsd dx, dword [rsi]
jb 0x408f3e
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408f67
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408f70
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408f64
push rbx
je 0x408f52
jo 0x408f81
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x408f77
pop rdi
jae 0x408fb8
jb 0x408fb5
jns 0x408f91
push rax
push rbx
je 0x408f80
jo 0x408faf
imul esi, dword [rdx + 0x49], 0x53456369
xor dword [rdi + 0x45], ebx
jbe 0x408fae
pop rdi
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x408fb4
imul eax, dword [rax + 0x40], 0x42494c47
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x408fb4
xor ebp, dword [rbp + 0x6f]
jbe 0x408fed
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x408ff5
push r11
je 0x408fc6
jb 0x408ffd
jbe 0x408fff
jb 0x40900f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40900e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409027
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408ffe
jo 0x40902d
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40900b
jbe 0x40903c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop r15
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x409032
jb 0x409069
jbe 0x40906b
jb 0x40907b
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40907a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409093
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40906a
jo 0x409099
imul esi, dword [rdx + 0x49], 0x53456369
je 0x409077
jbe 0x4090a8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
jo 0x4090c4
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x409098
pop rdi
jae 0x4090d9
jb 0x4090d6
jns 0x4090b2
push rax
push rbx
je 0x4090a1
jo 0x4090d0
imul esi, dword [rdx + 0x49], 0x45456369
jbe 0x4090cc
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4090b4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4090f5
push r11
je 0x4090c8
jo 0x4090f7
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4090e2
jae 0x409127
jo 0x4090fc
movsxd rax, dword [rbp + 0x76]
push rdx
push rsp
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4090f9
outsw dx, word [rsi]
jb 0x40913d
jb 0x40912d
push r11
je 0x409101
jo 0x409130
imul esi, dword [rdx + 0x49], 0x45456369
push r12
pop rdi
push rdx
push rbx
je 0x40910f
jb 0x409146
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40914a
pop rdi
jb 0x40914d
jb 0x409151
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x409168
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40916c
je 0x40914b
imul esp, dword [rbx + 0x45], 0x534b5262
je 0x40913f
jo 0x40916e
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor eax, 0x5f5f005f
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409193
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40919c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409190
push rbx
je 0x40917e
jo 0x4091ad
imul esi, dword [rdx + 0x49], 0x45456369
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409195
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4091d4
movsxd rbx, dword [rdi + 0x73]
je 0x4091e2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4091dd
je 0x4091f2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul ebp, dword ss:[rsi + 0x73], 0x45747265
insd dword [rdi], dx
push rdx
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push r11
je 0x4091e4
jb 0x40921b
jbe 0x40921d
jb 0x40922d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40922c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409245
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40921c
jo 0x40924b
imul esi, dword [rdx + 0x49], 0x53456369
je 0x409229
jbe 0x40925a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor al, 0x62
jae 0x409272
jbe 0x409210
pop rdi
pop rdx
push r11
je 0x40924e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40928d
movsxd rbx, dword [rdi + 0x73]
je 0x40929b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409296
je 0x4092ab
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x4092be
jae 0x4092c0
jb 0x409293
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40929d
jbe 0x4092ce
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4092a5
jo 0x4092d4
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
jb 0x4092e6
imul ebp, dword gs:[esi + 0x45], 0x5a5f0076
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4092f4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4092fd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4092f1
push rbx
je 0x4092df
jo 0x40930e
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4092f5
jbe 0x409326
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4092fd
jo 0x40932c
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409347
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x409323
xor eax, 0x61765f5f
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x40935d
imul esi, dword [rbp + 0x72], 0x30534e45
pop rdi
xor dword [rip + 0x6574495f], esi
jb 0x40936e
insb byte [rdi], dx
jae 0x409386
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
push rbx
je 0x409351
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409392
push r11
je 0x409365
jo 0x409394
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4093af
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4093b8
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4093ac
push rbx
je 0x40939a
jo 0x4093c9
imul esi, dword [rdx + 0x49], 0x45456369
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x4093e9
jb 0x4093ec
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x4a]
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x4093d6
push rsp
pop rdi
jo 0x4093da
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4093cb
outsw dx, word [rsi]
jb 0x40940f
jb 0x4093ff
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x4093d7
jb 0x40940e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409412
pop rdi
jb 0x409415
jb 0x409419
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x409430
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4093fa
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40942f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409439
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x409441
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x53], eax
je 0x409419
jb 0x409450
jbe 0x409452
jb 0x409462
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409461
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40947a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409451
jo 0x409480
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40945e
jbe 0x40948f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop r15
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40948b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4094ca
movsxd rbx, dword [rdi + 0x73]
je 0x4094d8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4094d3
je 0x4094e8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x409518
jb 0x40951b
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40950d
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40952e
jae 0x4094be
pop rdi
pop rdx
push r11
je 0x4094fb
jbe 0x40952c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x409503
jo 0x409532
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
cmp byte [r13 + 0x61], r13b
js 0x409543
jae 0x40954f
jp 0x40954d
jbe 0x4094eb
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x409532
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40953d
imul esi, dword [rbp + 0x72], 0x6177735f
jo 0x409557
push rbx
je 0x409542
jb 0x409579
jbe 0x40957b
jb 0x40958b
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40958a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4095a3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40957a
jo 0x4095a9
imul esi, dword [rdx + 0x49], 0x53456369
je 0x409587
jbe 0x4095b8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop r15
jbe 0x4095c0
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
jae 0x4095e9
jb 0x4095ed
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x4095c9
jbe 0x4095fa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4095d1
jo 0x409600
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x4095f8
jb 0x40962f
jbe 0x409631
jb 0x409641
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409640
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409659
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409630
jo 0x40965f
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40963d
jbe 0x40966e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40965d
jb 0x409694
jbe 0x409696
jb 0x4096a6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4096a5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4096be
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409695
jo 0x4096c4
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4096a2
jbe 0x4096d3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insd dword [rdi], dx
imul eax, dword [rbp + 0x6c], 0x4e5a5f00
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4096f0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409709
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4096e0
jo 0x40970f
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4096ed
jbe 0x40971e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x409738
insb byte [rdi], dx
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x40973c
je 0x409741
jb 0x40974a
ja 0x40971d
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x409727
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x409745
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40977e
je 0x409793
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x409760
jo 0x40978f
imul esi, dword [rdx + 0x49], 0x45456369
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40977e
xor al, 0x5f
pop rdi
jne 0x4097be
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x4097c5
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4097cc
push r8
push rbx
je 0x4097a7
jo 0x4097d6
imul esi, dword [rdx + 0x49], 0x53456369
xor bl, byte [rdi + 0x53]
push r11
xor dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
push rdx
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4097ff
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x70347453
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4097eb
jbe 0x40981c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409841
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x409854
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x40986e
jo 0x40985c
push r10
push r11
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409838
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409879
push r11
je 0x40984c
jo 0x40987b
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x40983b
pop rdi
pop rdx
push rbx
je 0x409872
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4098b3
push r11
je 0x409886
jo 0x4098b5
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x409875
pop rdi
pop rdx
push rbx
je 0x4098ac
jb 0x4098e3
jbe 0x4098e5
jb 0x4098f5
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4098f4
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40990d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4098e4
jo 0x409913
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4098f1
jbe 0x409922
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409915
jbe 0x409946
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40991d
jo 0x40994c
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409934
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x409945
jb 0x40997c
jbe 0x40997e
jb 0x40998e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40998d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4099a6
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40997d
jo 0x4099ac
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40998a
jbe 0x4099bb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
je 0x40999f
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409a04
jo 0x4099f2
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4099ce
jbe 0x4099ff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4099d6
jo 0x409a05
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x4099f4
jo 0x409a23
imul esi, dword [rdx + 0x49], 0x45456369
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x409a4e
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x409a24
xor bl, byte [rdi + 0x44]
jae 0x409a6d
jb 0x409a6a
jns 0x409a5c
jne 0x409a78
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x409a81
jb 0x409a7e
jns 0x409a5a
push rax
push rbx
je 0x409a49
jo 0x409a78
imul esi, dword [rdx + 0x49], 0x45456369
jbe 0x409a75
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x409a5e
xor byte [rdi + 0x5f], bl
jne 0x409a9f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409aba
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x409abb
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x409acf
push r11
je 0x409a8b
xor ebp, dword [rbp + 0x6f]
jbe 0x409ac4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409aa1
jo 0x409ad0
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409abd
xor dword [rdi + 0x5f], ebx
jo 0x409b06
jae 0x409afb
pop rdi
push 0x49706165
push rbx
je 0x409acd
jb 0x409b04
jbe 0x409b06
jb 0x409b16
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409b15
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409b2e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409b05
jo 0x409b34
imul esi, dword [rdx + 0x49], 0x53456369
je 0x409b12
jbe 0x409b43
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x409b72
xor dword [rdi + rbx*2], esi
je 0x409b6a
jb 0x409b66
insb byte [rdi], dx
jae 0x409b7e
pop rdi
jbe 0x409b6f
insb byte [rdi], dx
jbe 0x409b67
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x409b57
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x409b68
jb 0x409b9f
jbe 0x409ba1
jb 0x409bb1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409bb0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409bc9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409ba0
jo 0x409bcf
imul esi, dword [rdx + 0x49], 0x53456369
je 0x409bad
jbe 0x409bde
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
je 0x409bc2
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409c27
jo 0x409c15
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x409bec
xor dword [rdi + 0x5f], ebx
jne 0x409c2d
jne 0x409c23
jb 0x409c28
pop rdi
jo 0x409c2a
jb 0x409c3f
imul esi, dword [rcx + rbp*2 + 0x6f], 0x7453496e
xor dword [rsi], esi
jb 0x409c3c
jbe 0x409c3e
jb 0x409c4e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409c4d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409c66
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409c3d
jo 0x409c6c
imul esi, dword [rdx + 0x49], 0x53456369
je 0x409c4a
jbe 0x409c7b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x409ca6
xor dword [rip + 0x6574495f], esi
jb 0x409c9a
insb byte [rdi], dx
jae 0x409cb2
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409cc6
je 0x409ca5
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409cc3
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409cdc
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409cb3
jo 0x409ce2
imul esi, dword [rdx + 0x49], 0x53456369
je 0x409cc0
jbe 0x409cf1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rdx
push r11
je 0x409cd6
jb 0x409d0d
jbe 0x409d0f
jb 0x409d1f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409cf5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409d36
push r11
je 0x409d09
jo 0x409d38
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x409cf8
pop rdi
pop rdx
push rbx
je 0x409d2e
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409d89
push r11
je 0x409d45
xor ebp, dword [rbp + 0x6f]
jbe 0x409d7e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409d5b
jo 0x409d8a
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
xor ebx, dword [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x409d77
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409db8
push r11
je 0x409d8b
jo 0x409dba
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x409dcf
push rsp
jo 0x409dd2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409dc2
jbe 0x409d7f
pop rdi
pop rdx
push rbx
je 0x409df1
imul ecx, dword [rcx + 0x4e], 0x675f5f39
outsb dx, byte [rsi]
jne 0x409ded
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409e06
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409ddd
jo 0x409e0c
imul esi, dword [rdx + 0x49], 0x53456369
je 0x409dea
jbe 0x409e1b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
je 0x409dfe
jb 0x409e35
jbe 0x409e37
jb 0x409e47
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor dword [rip + 0x66666964], r14d
jb 0x409e50
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x409e6a
jo 0x409e58
push r10
push r11
pop rdi
push rbx
pop r15
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x409e6b
js 0x409e71
je 0x409e4a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6e5a5f00
ja 0x409e89
push rax
jbe 0x409e1f
pop rdi
pop rdx
push rbx
je 0x409e55
pop rdi
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x409ea2
jb 0x409ea9
push r11
je 0x409e6a
jb 0x409ea1
jbe 0x409ea3
jb 0x409eb3
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409eb2
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409ecb
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409ea2
jo 0x409ed1
imul esi, dword [rdx + 0x49], 0x53456369
je 0x409eaf
jbe 0x409ee0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x409f0b
xor dword [rip + 0x6574495f], esi
jb 0x409eff
insb byte [rdi], dx
jae 0x409f17
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409ef3
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x409ef9
jb 0x409f2b
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x409f48
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409f42
push rbx
je 0x409f19
jo 0x409f48
imul esi, dword [rdx + 0x49], 0x6c456369
push rax
push rbx
xor bl, byte [rdi + 0x52]
push rbx
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409f3a
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x409f8f
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x409fae
jae 0x409f8d
push rbx
je 0x409f78
xor dword [rbx + 0x68], esp
jb 0x409fac
je 0x409fc1
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x409f8c
xor esp, dword [rdx + 0x61]
jae 0x409fc9
movsxd rbx, dword [rdi + 0x6f]
jae 0x409fd9
jb 0x409fcc
insd dword [rdi], dx
movsxd rdx, dword [r15 + rbx*2 + 0x45]
push rbx
xor eax, 0x634b505f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x409fbf
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409ffe
movsxd rbx, dword [rdi + 0x73]
je 0x40a00c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a007
je 0x40a01c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x49], bl
pop r15
jae 0x40a046
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
js 0x40a051
outsb dx, byte [rsi]
push rdx
push rbx
je 0x40a021
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a060
movsxd rbx, dword [rdi + 0x73]
je 0x40a06e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a069
je 0x40a07e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul r12d, dword [r11 + 0x63], 0x4e5a5f00
push rbx
je 0x40a05b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a09a
movsxd rbx, dword [rdi + 0x73]
je 0x40a0a8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a0a3
je 0x40a0b8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a0a4
jae 0x40a0e9
jo 0x40a0be
imul esp, dword [rbx + 0x45], 0x74535276
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40a0c8
jbe 0x40a0f9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40a0d0
jo 0x40a0ff
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x40a11e
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r11
xor dword [rdi + 0x45], ebx
jbe 0x40a108
jo 0x40a115
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x40a106
jbe 0x40a137
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40a10e
jo 0x40a13d
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x40a167
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a162
je 0x40a177
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x40a14d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a18c
movsxd rbx, dword [rdi + 0x73]
je 0x40a19a
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
cmp byte [rdi + 0x52], bl
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a177
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a1b0
je 0x40a1c5
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40a192
jo 0x40a1c1
imul esi, dword [rdx + 0x49], 0x45456369
cmp byte [r13 + 0x61], r13b
js 0x40a1cc
jae 0x40a1d8
jp 0x40a1d6
push r10
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40a1af
xor byte [rdi + 0x49], bl
je 0x40a1e8
jb 0x40a1e4
jae 0x40a1ee
push r11
je 0x40a1be
jb 0x40a1f5
jbe 0x40a1f7
jb 0x40a207
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a206
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a21f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a1f6
jo 0x40a225
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a203
jbe 0x40a234
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40a254
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40a22d
jae 0x40a26a
jb 0x40a271
push r11
je 0x40a232
jb 0x40a269
jbe 0x40a26b
jb 0x40a27b
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a27a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a293
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a26a
jo 0x40a299
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a277
jbe 0x40a2a8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
jbe 0x40a2ad
pop rdi
push rbx
pop rdi
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x40a2ca
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x40a2df
pop rdi
jae 0x40a2f5
jb 0x40a2f8
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a2ef
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a2f8
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a2ec
push rbx
je 0x40a2da
jo 0x40a309
imul esi, dword [rdx + 0x49], 0x45456369
cmp byte [rbp + 0x61], ch
js 0x40a313
jae 0x40a31f
jp 0x40a31d
jbe 0x40a2bb
pop rdi
pop rdx
push rbx
je 0x40a2f8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a337
movsxd rbx, dword [rdi + 0x73]
je 0x40a345
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a340
je 0x40a355
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a36e
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40a34a
pop rdi
pop rdi
imul esi, dword [rbp + 0x72], 0x73656c5f
jae 0x40a385
imul esi, dword [rbp + 0x72], 0x5f007645
pop rdx
push rbx
je 0x40a36a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a3a9
movsxd rbx, dword [rdi + 0x73]
je 0x40a3b7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a3b2
je 0x40a3c7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x6d], eax
movsxd rdx, dword [rdx + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a3b7
jo 0x40a3e6
imul esi, dword [rdx + 0x49], 0x34456369
jae 0x40a405
jo 0x40a3d6
push rdx
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a3d2
jbe 0x40a403
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40a3da
jo 0x40a409
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor r12d, dword [r13 + 0x6e]
jbe 0x40a3bd
pop rdi
pop rdx
push rbx
push r11
je 0x40a3fa
jo 0x40a429
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40a410
jbe 0x40a441
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40a418
jo 0x40a447
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x40a42f
xor dword [rdi + 0x5f], ebx
jb 0x40a46b
jae 0x40a47b
outsd dx, dword [rsi]
push r11
je 0x40a442
jo 0x40a471
imul esi, dword [rdx + 0x49], 0x45456369
push rax
push rsp
pop rdi
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40a45d
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x40a463
jb 0x40a495
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40a4b2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a4ac
push rbx
je 0x40a483
jo 0x40a4b2
imul esi, dword [rdx + 0x49], 0x6c456369
push rax
push rbx
xor bl, byte [rdi + 0x52]
push rbx
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40a49d
pop rdi
pop rdi
jne 0x40a4de
jne 0x40a4d4
jb 0x40a4d9
pop rdi
jo 0x40a4db
jb 0x40a4f0
imul esi, dword [rcx + rbp*2 + 0x6f], 0x69705f6e
jbe 0x40a4f5
je 0x40a4d1
push rbx
je 0x40a4bc
jb 0x40a4f3
jbe 0x40a4f5
jb 0x40a505
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a504
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a51d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a4f4
jo 0x40a523
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a501
jbe 0x40a532
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40a55d
xor dword [rip + 0x6574495f], esi
jb 0x40a551
insb byte [rdi], dx
jae 0x40a569
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a540
xor bl, byte [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40a575
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40a57f
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x40a587
pop rdi
xor dword [rbp + 0x53], eax
je 0x40a55e
jb 0x40a595
jbe 0x40a597
jb 0x40a5a7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a5a6
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a5bf
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a596
jo 0x40a5c5
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a5a3
jbe 0x40a5d4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop r15
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a5cd
jo 0x40a5fc
imul esi, dword [rdx + 0x49], 0x61456369
push rbx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a612
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a62b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a602
jo 0x40a631
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a60f
jbe 0x40a640
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x40a65e
jbe 0x40a5f1
pop rdi
pop rdx
push rbx
je 0x40a629
xor byte [rdi + 0x5f], bl
movsxd rbp, dword [rdi + 0x70]
jns 0x40a65e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40a668
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x40a670
xor dword [rbp + 0x4c], eax
xor byte [rbp + 0x53], al
je 0x40a64a
jb 0x40a67c
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40a699
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a693
xor dword [r11d], r14d
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40a69c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40a6a6
pop rdi
push r11
je 0x40a678
jb 0x40a6af
jbe 0x40a6b1
jb 0x40a6c1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a6c0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a6d9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a6b0
jo 0x40a6df
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a6bd
jbe 0x40a6ee
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40a6e4
xor ebp, dword [rbp + 0x6f]
jbe 0x40a71d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a6fa
jo 0x40a729
imul esi, dword [rdx + 0x49], 0x45456369
jo 0x40a741
jbe 0x40a6d4
pop rdi
pop rdx
push rbx
je 0x40a70d
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40a742
push r10
push rbx
je 0x40a716
jo 0x40a745
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
je 0x40a721
jb 0x40a758
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40a75c
pop rdi
jb 0x40a75f
jb 0x40a763
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40a779
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40a747
xor bl, byte [rdi + 0x5f]
imul bp, word [rsi + 0x61], 0x5f6c
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40a799
jb 0x40a7a0
push r11
je 0x40a761
jb 0x40a798
jbe 0x40a79a
jb 0x40a7aa
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a7a9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a7c2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a799
jo 0x40a7c8
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a7a6
jbe 0x40a7d7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40a802
xor dword [rip + 0x6574495f], esi
jb 0x40a7f6
insb byte [rdi], dx
jae 0x40a80e
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a7e2
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40a82c
jb 0x40a82f
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40a7f4
jo 0x40a823
imul esi, dword [rdx + 0x49], 0x49456369
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40a820
push rsp
pop rdi
jo 0x40a824
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a843
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40a81f
xor al, 0x5f
je 0x40a858
jb 0x40a854
insb byte [rdi], dx
jae 0x40a86c
pop rdi
jbe 0x40a85d
insb byte [rdi], dx
movsxd rbp, dword [rcx + rcx*2 + 0x53]
je 0x40a834
jb 0x40a86b
jbe 0x40a86d
jb 0x40a87d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a88d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a864
jo 0x40a893
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a871
jbe 0x40a8a2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r11
pop rdi
push rsp
pop rdi
push rdx
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a8c6
movsxd rdi, dword [rax + 0x78]
jno 0x40a8b6
push rax
push rbx
je 0x40a8a5
jo 0x40a8d4
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a8b2
jbe 0x40a8e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a90b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40a8ec
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a92d
push r11
je 0x40a900
jo 0x40a92f
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a918
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a959
push r11
je 0x40a92c
jo 0x40a95b
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x40a945
xor ebp, dword [rbp + 0x6f]
jbe 0x40a97e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a95b
jo 0x40a98a
imul esi, dword [rdx + 0x49], 0x45456369
xor al, 0x62
jae 0x40a99a
jbe 0x40a938
pop rdi
pop rdx
push rbx
je 0x40a96f
jb 0x40a9a6
jbe 0x40a9a8
jb 0x40a9b8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a9b7
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a9d0
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a9a7
jo 0x40a9d6
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40a9b4
jbe 0x40a9e5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
jbe 0x40a998
pop rdi
pop rdx
push rbx
je 0x40aa0b
push r8
push rbx
je 0x40a9d7
jo 0x40aa06
imul esi, dword [rdx + 0x49], 0x45456369
push rdx
push r11
je 0x40a9e3
xor ebp, dword [rbp + 0x6f]
jbe 0x40aa1c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40aa0d
movsxd rbp, dword [rdi + 0x75]
je 0x40aa1e
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40aa55
jno 0x40aa3b
push rax
push rbx
je 0x40aa2a
jo 0x40aa59
imul esi, dword [rdx + 0x49], 0x45456369
push rdx
push r11
je 0x40aa36
xor ebp, dword [rbp + 0x6f]
jbe 0x40aa6f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5f], bl
jae 0x40aa8f
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x40aa5e
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40aaa8
jb 0x40aaab
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40aa70
jo 0x40aa9f
imul esi, dword [rdx + 0x49], 0x4a456369
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40aa9c
push rsp
pop rdi
jo 0x40aaa0
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40aa91
jbe 0x40aac2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40aa99
jo 0x40aac8
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x40aae7
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40aad1
jo 0x40aade
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40aace
jbe 0x40aaff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40aad6
jo 0x40ab05
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x40aabb
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push r11
je 0x40ab03
xor ebp, dword [rbp + 0x6f]
jbe 0x40ab3c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ab19
jo 0x40ab48
imul esi, dword [rdx + 0x49], 0x45456369
jbe 0x40aaf3
pop rdi
pop rdx
push rbx
je 0x40ab2a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ab6b
push r11
je 0x40ab3e
jo 0x40ab6d
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40ab2d
pop rdi
pop rdx
push r11
je 0x40ab65
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40aba6
push r11
je 0x40ab79
jo 0x40aba8
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x40abbd
push rsp
jo 0x40abc0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40abb0
jbe 0x40ab6d
pop rdi
pop rdx
push rbx
push r11
je 0x40abaa
jo 0x40abd9
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40abc1
jo 0x40abf0
imul esi, dword [rdx + 0x49], 0x45456369
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ac04
movsxd rdi, dword [rax + 0x78]
insb byte [rdi], dx
je 0x40abf4
push rax
push rbx
je 0x40abe3
jo 0x40ac12
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40abf0
jbe 0x40ac21
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ac49
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40ac2a
jb 0x40ac61
jbe 0x40ac63
jb 0x40ac73
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ac72
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ac8b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ac62
jo 0x40ac91
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40ac6f
jbe 0x40aca0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor al, byte [r13 + 0x53]
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40ac8b
xor dword [rdi + 0x5f], ebx
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x40acb0
push rbx
je 0x40ac9b
jb 0x40acd2
jbe 0x40acd4
jb 0x40ace4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ace3
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40acfc
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40acd3
jo 0x40ad02
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40ace0
jbe 0x40ad11
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40ad3c
xor dword [rip + 0x6574495f], esi
jb 0x40ad30
insb byte [rdi], dx
jae 0x40ad48
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40ad5b
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ad56
je 0x40ad6b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x40ad41
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ad80
movsxd rbx, dword [rdi + 0x73]
je 0x40ad8e
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
cmp byte [rdi + 0x53], bl
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40ad6e
jbe 0x40ad9f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40ad76
jo 0x40ada5
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
cmp dword [r8 + 0x75], r14d
jae 0x40adbf
pop rdi
movsxd rbp, dword [rbx + 0x45]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40ad99
xor eax, 0x6e755f5f
jne 0x40add0
jb 0x40add5
pop rdi
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x695f7261
outsb dx, byte [rsi]
jae 0x40ade4
jb 0x40adf5
push r11
je 0x40adb6
jb 0x40aded
jbe 0x40adef
jb 0x40adff
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40adfe
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ae17
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40adee
jo 0x40ae1d
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40adfb
jbe 0x40ae2c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40ae57
xor dword [rdi + rbx*2], esi
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x40ae62
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ae66
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ae6f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ae63
push rbx
je 0x40ae51
jo 0x40ae80
imul esi, dword [rdx + 0x49], 0x45456369
jae 0x40ae9f
jb 0x40ae9c
jns 0x40ae78
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x40ae86
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40aea3
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40ae7f
xor eax, 0x6574495f
jb 0x40aeb4
insb byte [rdi], dx
jae 0x40aecc
pop rdi
imul esi, dword [rbp + 0x72], 0x53496c63
je 0x40ae95
jb 0x40aecc
jbe 0x40aece
jb 0x40aede
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40aeee
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40aec5
jo 0x40aef4
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40aed2
jbe 0x40af03
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r11
pop r15
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40aef4
xor ebp, dword [rbp + 0x6f]
jbe 0x40af2d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40af0a
jo 0x40af39
imul esi, dword [rdx + 0x49], 0x45456369
xor al, byte [r13 + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x40af24
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40af63
movsxd rbx, dword [rdi + 0x73]
je 0x40af71
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40af6c
je 0x40af81
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [rbx + 0x61], ah
jo 0x40af82
movsxd rbp, dword [rcx + 0x74]
jns 0x40af6b
jbe 0x40af68
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40af73
pop rdi
pop rdi
jae 0x40afb0
jb 0x40afb7
push r11
je 0x40af78
jb 0x40afaf
jbe 0x40afb1
jb 0x40afc1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40afc0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40afd9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40afb0
jo 0x40afdf
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40afbd
jbe 0x40afee
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40b019
xor dword [rip + 0x6574495f], esi
jb 0x40b00d
insb byte [rdi], dx
jae 0x40b025
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40affa
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b033
je 0x40b048
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40b015
jo 0x40b044
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x50]
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5f], bl
jae 0x40b07a
pop rdi
jae 0x40b07e
jb 0x40b081
add byte [rdi + 0x5a], bl
push rbx
je 0x40b078
jno 0x40b05e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b07c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b095
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b06c
jo 0x40b09b
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b079
jbe 0x40b0aa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rdx
push r11
je 0x40b08f
jb 0x40b0c6
jbe 0x40b0c8
jb 0x40b0d8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b0ae
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b0e7
je 0x40b0fc
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40b0c9
jo 0x40b0f8
imul esi, dword [rdx + 0x49], 0x45456369
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40b119
jb 0x40b11c
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x49], ebx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40b108
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x40b10e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b12c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b145
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b11c
jo 0x40b14b
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b129
jbe 0x40b15a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40b148
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b17d
push r10
movsxd rax, dword [rbp + 0x4f]
push rbx
je 0x40b152
jb 0x40b189
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b18d
pop rdi
jb 0x40b190
jb 0x40b194
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40b1aa
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b1aa
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b1b3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b1a7
push rbx
je 0x40b195
jo 0x40b1c4
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
jae 0x40b1e7
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40b1c2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b203
push r11
je 0x40b1d6
jo 0x40b205
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40b1ff
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b23e
movsxd rbx, dword [rdi + 0x73]
je 0x40b24c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b247
je 0x40b25c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x40b26b
outsb dx, byte gs:[rsi]
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b24e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b283
push r10
imul eax, dword [rbp + 0x4f], 0x3174534e
jb 0x40b28f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b293
pop rdi
jb 0x40b296
jb 0x40b29a
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40b2b0
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b2b0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b2b9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b2ad
push rbx
je 0x40b29b
jo 0x40b2ca
imul esi, dword [rdx + 0x49], 0x45456369
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40b2df
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b2f8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b2cf
jo 0x40b2fe
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b2dc
jbe 0x40b30d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40b2be
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40b314
jbe 0x40b345
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40b31c
jo 0x40b34b
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x72
outsb dx, byte gs:[rsi]
jbe 0x40b300
pop rdi
pop rdx
push rbx
je 0x40b33a
jo 0x40b369
imul esi, dword [rdx + 0x49], 0x43456369
xor dword [rcx + 0x52], ecx
imul esp, dword [rbx + 0x76], 0x544f4545
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b35d
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x70
imul esi, dword [rdx + 0x49], 0x45636952
push rbx
je 0x40b369
jo 0x40b398
imul esi, dword [rdx + 0x49], 0x3174534e
pop rdi
pop rdi
movsxd rsp, dword gs:[rcx + 0x79]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x40b3c1
jb 0x40b3b8
jo 0x40b39a
push rsp
pop rdi
pop rdi
pop rdi
je 0x40b3d2
jo 0x40b3c0
push rbx
xor bl, byte [rdi + 0x49]
push rsp
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x40b3e3
jo 0x40b3d1
push r11
xor ebx, dword [rdi + 0x4f]
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40b3cb
jbe 0x40b3fc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40b3d3
jo 0x40b402
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40b424
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40b43c
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40b412
jo 0x40b41f
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b40f
jbe 0x40b440
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40b417
jo 0x40b446
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40b42e
xor ebx, dword [rdi + 0x5f]
push 0x5f706165
jae 0x40b46c
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rcx*2 + 0x53]
je 0x40b440
jb 0x40b477
jbe 0x40b479
jb 0x40b489
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b488
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b4a1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b478
jo 0x40b4a7
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b485
jbe 0x40b4b6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40b4e1
xor dword [rip + 0x6574495f], esi
jb 0x40b4d5
insb byte [rdi], dx
jae 0x40b4ed
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b4c5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b4fe
je 0x40b513
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40b4e0
jo 0x40b50f
imul esi, dword [rdx + 0x49], 0x45456369
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40b530
jb 0x40b533
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x4a], ebx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40b51f
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x40b525
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b511
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b54b
pop rdi
insd dword [rdi], dx
imul esp, dword fs:[rcx + 0x6e], 0x5f6f745f
imul si, word [rdx + 0x73], 0x4974
push rbx
je 0x40b52b
jb 0x40b562
jbe 0x40b564
jb 0x40b574
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b573
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b58c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b563
jo 0x40b592
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b570
jbe 0x40b5a1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40b5cc
xor dword [rip + 0x6574495f], esi
jb 0x40b5c0
insb byte [rdi], dx
jae 0x40b5d8
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x40b5ba
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b5f9
movsxd rbx, dword [rdi + 0x73]
je 0x40b607
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b602
je 0x40b617
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b602
insd dword [rdi], dx
js 0x40b61c
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x40b618
jb 0x40b64f
jbe 0x40b651
jb 0x40b661
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b660
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b679
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b650
jo 0x40b67f
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b65d
jbe 0x40b68e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
jbe 0x40b641
pop rdi
pop rdx
push rbx
je 0x40b677
xor dword [rdi + 0x5f], ebx
jae 0x40b6ba
jb 0x40b6c1
pop rdi
push 0x49706165
push rbx
je 0x40b687
jb 0x40b6be
jbe 0x40b6c0
jb 0x40b6d0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b6cf
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b6e8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b6bf
jo 0x40b6ee
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b6cc
jbe 0x40b6fd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40b728
xor dword [rip + 0x6574495f], esi
jb 0x40b71c
insb byte [rdi], dx
jae 0x40b734
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x40b71f
push rax
push rdx
push rbx
outsd dx, dword [rsi]
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40b75a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b773
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b74a
jo 0x40b779
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b757
jbe 0x40b788
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x62
jae 0x40b79e
jbe 0x40b73c
pop rdi
pop rdx
push rbx
je 0x40b773
xor ebp, dword [rbp + 0x6f]
jbe 0x40b7ac
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b789
jo 0x40b7b8
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [r13 + 0x53], eax
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x40b7a3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b7e2
movsxd rbx, dword [rdi + 0x73]
je 0x40b7f0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b7eb
je 0x40b800
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b823
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b81e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b837
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b80e
jo 0x40b83d
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b81b
jbe 0x40b84c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rdx
push r11
je 0x40b831
jb 0x40b868
jbe 0x40b86a
jb 0x40b87a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40b883
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40b85f
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x40b8ab
pop rdi
imul esi, dword [rbp + 0x72], 0x53496c63
je 0x40b877
jo 0x40b8a6
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40b87f
jb 0x40b8b6
jbe 0x40b8b8
jb 0x40b8c8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b8d8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
xor al, 0x5f
push rbx
je 0x40b8b4
jbe 0x40b8e5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rdx
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40b8ef
pop rdi
pop rdi
je 0x40b92b
jb 0x40b934
ja 0x40b926
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40b918
pop rdi
pop rdi
insb byte [rdi], dx
insb byte [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40b926
outsw dx, word [rsi]
jb 0x40b96a
jb 0x40b95a
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x40b932
jb 0x40b969
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b96d
pop rdi
jb 0x40b970
jb 0x40b974
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x40b98b
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40b95a
jbe 0x40b98b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40b962
jo 0x40b991
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40b9b3
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40b9cb
push r11
xor dword [rdi + 0x45], ebx
jbe 0x40b9a1
jo 0x40b9ae
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b99e
outsw dx, word [rsi]
jb 0x40b9e2
jb 0x40b9d2
push r10
imul eax, dword [rbp + 0x4f], 0x4e525f54
push rbx
je 0x40b9ab
jb 0x40b9e2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b9e6
pop rdi
jb 0x40b9e9
jb 0x40b9ed
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x40ba04
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40b9d0
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ba0a
je 0x40ba1f
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x40b9ea
xor esp, dword [rdx + 0x61]
jae 0x40ba27
movsxd rbx, dword [rdi + 0x6f]
jae 0x40ba37
jb 0x40ba2a
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40ba3a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ba79
movsxd rbx, dword [rdi + 0x73]
je 0x40ba87
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ba82
je 0x40ba97
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ba81
xor al, 0x5f
pop rdi
jo 0x40bab6
jb 0x40bacb
imul esp, dword [rcx + 0x6c], 0x726f735f
je 0x40baa9
push rbx
je 0x40ba94
jb 0x40bacb
jbe 0x40bacd
jb 0x40badd
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40badc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40baf5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bacc
jo 0x40bafb
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40bad9
jbe 0x40bb0a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40bb35
xor dword [rip + 0x6574495f], esi
jb 0x40bb29
insb byte [rdi], dx
jae 0x40bb41
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40bb1f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bb5e
movsxd rbx, dword [rdi + 0x73]
je 0x40bb6c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bb67
je 0x40bb7c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bb9c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40bba5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40bb99
push rbx
je 0x40bb87
jo 0x40bbb6
imul esi, dword [rdx + 0x49], 0x45456369
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40bb6b
pop rdi
je 0x40bbd2
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40bbc2
xor byte [rdi + 0x5f], bl
jo 0x40bc05
jo 0x40bbf7
push 0x49706165
push rbx
je 0x40bbd1
jb 0x40bc08
jbe 0x40bc0a
jb 0x40bc1a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bc19
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40bc32
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bc09
jo 0x40bc38
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40bc16
jbe 0x40bc47
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40bc72
xor dword [rip + 0x6574495f], esi
jb 0x40bc66
insb byte [rdi], dx
jae 0x40bc7e
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
js 0x40bc9c
pop rdi
jo 0x40bc8c
jb 0x40bc9c
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40bcb1
jae 0x40bc90
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bcb0
je 0x40bcc5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x40bc95
xor esp, dword [rdx + 0x61]
jae 0x40bcd2
movsxd rbx, dword [rdi + 0x6f]
jae 0x40bce2
jb 0x40bcd5
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rdx
push rbx
je 0x40bcb9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bcf8
movsxd rbx, dword [rdi + 0x73]
je 0x40bd06
imul ebp, dword [rsi + 0x67], 0x5f345349
push rbx
xor eax, 0x5f31545f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40bceb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40bd24
je 0x40bd39
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40bd06
jo 0x40bd35
imul esi, dword [rdx + 0x49], 0x45456369
jae 0x40bd55
jb 0x40bd52
jns 0x40bd2e
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x40bd3e
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x40bd65
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bd6f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40bd88
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bd5f
jo 0x40bd8e
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40bd6c
jbe 0x40bd9d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40bd89
jb 0x40bdc0
jbe 0x40bdc2
jb 0x40bdd2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bdd1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40bdea
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bdc1
jo 0x40bdf0
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40bdce
jbe 0x40bdff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor dword [r13 + 0x53], eax
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40bdeb
jb 0x40be22
jbe 0x40be24
jb 0x40be34
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40be33
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40be4c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40be23
jo 0x40be52
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40be30
jbe 0x40be61
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
jo 0x40be81
jbe 0x40be14
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40be82
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40be95
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40be65
jae 0x40beaa
jo 0x40be7f
imul eax, dword [rbp + 0x76], 0x535f5452
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40be7d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bebc
movsxd rbx, dword [rdi + 0x73]
je 0x40beca
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bec5
je 0x40beda
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40bef4
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40bf0d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bee4
jo 0x40bf13
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40bef1
jbe 0x40bf22
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
imul eax, dword [rbp + 0x6c], 0x4e5a5f00
push rbx
je 0x40bf10
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bf4f
movsxd rbx, dword [rdi + 0x73]
je 0x40bf5d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bf58
je 0x40bf6d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x40bf56
movsxd r8, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40bf53
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x40bf9f
pop rdi
push 0x49706165
push rbx
je 0x40bf65
jb 0x40bf9c
jbe 0x40bf9e
jb 0x40bfae
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bfad
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40bfc6
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bf9d
jo 0x40bfcc
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40bfaa
jbe 0x40bfdb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40c00a
xor dword [rip + 0x6574495f], esi
jb 0x40bffe
insb byte [rdi], dx
jae 0x40c016
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c023
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40c03c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40c013
jo 0x40c042
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40c020
jbe 0x40c051
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
jbe 0x40c002
pop rdi
pop rdx
push rbx
je 0x40c03a
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x40c078
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40c07f
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40c061
jo 0x40c090
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40c069
xor ebp, dword [rbp + 0x6f]
jbe 0x40c0a2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c089
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c0ca
push r11
je 0x40c09d
jo 0x40c0cc
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rbp + 0x61], ch
imul ebp, dword [rsi], 0x534e5a5f
je 0x40c0d1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c110
movsxd rbx, dword [rdi + 0x73]
je 0x40c11e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c119
je 0x40c12e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rax], al
jae 0x40c15d
insd dword [rdi], dx
je 0x40c148
add byte [rsi], ch
jae 0x40c160
jb 0x40c162
add byte [rsi], ch
jae 0x40c15c
jae 0x40c16a
jb 0x40c16c
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40c16d
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40c17b
outsb dx, byte cs:[esi]
jne 0x40c149
jne 0x40c187
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40c157
push 0x687361
jns 0x40c1a0
jae 0x40c1ad
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40c1a8
jae 0x40c1b0
jb 0x40c13e
outsb dx, byte cs:[esi]
jne 0x40c171
jbe 0x40c1aa
jb 0x40c1ba
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40c17e
jbe 0x40c1b7
jb 0x40c1c7
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40c1c2
insb byte [rdi], dx
jns 0x40c1d1
add byte [rsi], ch
jb 0x40c1cc
insb byte [rdi], dx
jo 0x40c1d8
je 0x40c16e
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40c1a7
outsd dx, dword [esi]
je 0x40c17d
je 0x40c1e5
js 0x40c1f6
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40c1fb
je 0x40c1f1
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40c214
jo 0x40c228
pop rdi
je 0x40c218
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40c226
jns 0x40c1c7
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40c242
jns 0x40c1d3
push 0x63
jb 0x40c1d8
jns 0x40c24a
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40c254
je 0x40c1ea
je 0x40c250
add byte [rsi], ch
jae 0x40c267
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40c1fe
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 4], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
or eax, 0x40
add byte [rax], al
test byte [rip], 0
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], bl
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x410463
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
fcom dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4015], al
add byte [rax], al
add byte [rax + 0x15], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4015], dl
add byte [rax], al
add byte [rax + 0x15], dl
add byte [rax], al
add byte [rdx + 0x3f], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx*2 + 0x40], al
add byte [rax], al
add al, 0x55
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
push rbp
add byte [rax], al
add byte [rax], al
add byte [rax], ah
push rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5a], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5a], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte fs:[rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add ah, dl
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add al, ch
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add al, bh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, bh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x40c85b
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
jno 0x40c8f3
add byte [rax], al
add byte [rax], al
add byte [rax + 0x71], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x40c933
add byte [rax], al
add byte [rax], al
add byte [rax + 0x71], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x71], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40c91a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x71], bl
add byte [rax], al
add byte [rax + 0x18], ch
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x76], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0x36]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
