call 0x401bb8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x4019d0
add ebx, ebx
je 0x401986
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x4019be
cmp rbp, -4
ja 0x4019be
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4019a6
add ecx, 4
mov dl, byte [rax]
je 0x4019ce
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x4019be
ret
cld
pop r11
cmp r8b, 2
je 0x4019e6
jmp 0x401a63
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x4019f6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x4019de
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401a0e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x4019fb
sub eax, 3
jb 0x401a2c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401a63
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401a53
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401a51
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401a40
cmp rbp, -0xd00
adc ecx, eax
call 0x401992
jmp 0x4019e6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401b3c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401ada
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401b26
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401af9
push 0x3a707474
jne 0x401b52
js 0x401b12
jae 0x401b4c
outsb dx, byte cs:[rsi]
je 0x401b0b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401b79
jb 0x401b6b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401b96
jb 0x401ba9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x213086
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x213086
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401a74
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401b9f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401b4d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add dword [rax], eax
jmp rbp
call 0x706f1c47
jb 0x401c5f
movsxd rbp, dword [rdi]
jae 0x401c59
insb byte [rdi], dx
js 0x401c5f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401c3f
cmp rsi, rcx
jae 0x401c47
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401c26
cmp al, 0x8f
ja 0x401c26
cmp byte [rsi - 2], 0xf
je 0x401c2c
sub al, 0xe8
jg 0x401c29
push rdi
cmp al, 1
ja 0x401c14
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401c17
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401c44
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401c9b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c2119
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401cdf
mov al, 0xa
jmp 0x401cdf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401cbb
inc ebx
mov al, 0
jmp 0x401ce3
mov al, 2
jmp 0x401ce3
mov al, 3
jmp 0x401ce3
mov al, 0x3c
jmp 0x401ce3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401d24
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401d36
jg 0x401d28
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a74ab
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401d82
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6eff
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401d8a
cmp esi, 0x21585055
jne 0x401d8e
jge 0x401d80
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401d83
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401d87
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401e33
pop rcx
or al, 0x3b
jb 0x401e39
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401dab
jmp 0x401dad
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661cee
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53f36
in eax, dx
jg 0x401de5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401e2b
mov bh, 0x2a
add edi, 0x10
jmp 0x401e28
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401e65
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401ea1
jne 0x401eb8
fstpnce st(6), st(0)
jle 0x401e81
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401eb7
jrcxz 0x401eeb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1be4f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401f6a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401f2a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582964ff
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401f9d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401f37
and ecx, 7
or al, 0xeb
jae 0x401fa2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401fd7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x402015
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401fce
push rax
call 0xffffffff868d1cbb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401fd8
std
cmp edi, esi
xchg eax, edi
jle 0x40202d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c965b9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40202b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x402019
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x402042
js 0x402082
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x402114
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad334f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x402135
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40213a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21bec
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4020c8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
jb 0x40214e
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
sub dl, byte [rdx + 0x100]
add byte [rax], al
add byte [rax], al
and bh, bh
call 0xffffffff81402188
or dword [rax], eax
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4021ee
je 0x4021f7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4021c0
mov dh, 0x7d
jbe 0x4021bf
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4021f8
sahf
sahf
add al, 0
cwde
add eax, 0x3f2d000
insb byte [rdi], dx
wait
add al, 6
add byte [rsi + 0xa], ah
stc
add al, 0xf2
add dword [rax], ecx
add byte [rax + 0xb800009], dh
jl 0x4021dc
stc
add byte [rdx], cl
add al, cl
or eax, dword [rax]
cmp byte [rsi], cl
cmp dword ds:[rax + rax*4 + 0xc], 0xd6000
adc byte [rax], dl
cwde
add byte [rax], ah
punpcklbw mm4, mm5
add byte [rbx + 0x37], bl
pop rdi
adc byte [rdi], dl
enter -0x6ff1, 0x4f
adc dword [rax], eax
movabs al, byte [0xe403f92928001228]
adc eax, dword [rax]
hlt
sub al, 0x14
add al, ch
sub eax, 0x79027c60
add byte [rip + 0x16f800], dl
add byte [rsi], ch
cmp dword ds:[rax + rax*4 + 0x17], 0x180800
clc
and byte [rdi], bh
sbb dword [rax], eax
add byte [rax], dh
sbb al, byte [rax]
call 0x208fb24b
sbb eax, dword [rax]
add byte [rcx], dh
sbb al, 0x47
repne outsb dx, byte [rsi]
retf 0x113
add al, 0
int1
dec dword [rsi]
loope 0x40221b
sbb edi, dword [rdi - 0x6dfd68e7]
in al, dx
adc byte [rdx], 0x40
sbb eax, eax
ja 0x402284
sbb dword [rsi], ebp
add byte [rbx], dl
pop rdi
enter 0x6760, -0x45
xor eax, 0x15f3330
push rbx
xchg eax, edx
shr dword [rsi + 0x477a4f84], 0x20
fcom dword [rbp - 0x6879e6f0]
movsd dword [rdi], dword ptr [rsi]
xlatb
in al, 0x60
stosd dword [rdi], eax
movabs al, byte [0x4d79c759c8024419]
add dword [rdi], edi
sub byte [rdi + 0x3c9c833e], bh
cmp dword [rbx + 1], edi
and byte [rdx], dl
movabs eax, dword es:[0xbb4f3101939ce128]
nop
sbb eax, 0x6f2fb06f
sub al, 0xbe
mov al, 0x10
retf 0x7623
push 0x2747ddcf
cmpsb byte [rsi], byte ptr [rdi]
test byte [rcx + 0x142ff32b], dh
add al, 0xc6
jnp 0x4022f6
div dword [rdi]
add al, byte [rdi - 0x61]
nop
lea edx, [rdi - 0x61]
add eax, 0x220206f
int 0xd9
retf
js 0x402274
outsd dx, dword [rsi]
sbb byte [rcx], al
adc cl, al
fst dword [rbx + 0x1bf0370d]
mov ebx, 0x2f6400b2
push rax
jns 0x4022f5
in al, 0xf7
sahf
movabs dword [0x86c21002a125005], eax
cmp dword [rcx + rbx*4 + 0x17], esi
pushfq
or eax, 0x18ad832
adc r8d, dword [r9]
int3
fadd dword [r8]
shl byte [rax], cl
fist dword [rdi]
out dx, eax
mov ecx, 0x5f610ec0
add eax, dword [rbx]
and dword [rax + rcx + 0x4f], esp
outsb dx, byte [rsi]
add ch, byte [rax + rcx - 0x45]
mov dl, 0xdf
movabs dword [0xe72190870b17c82f], eax
add dword [rdi + rax], eax
and cl, al
ror dword [rsi + 0x36], 0x40
and eax, ebx
xchg eax, edi
add al, 0x2f
in al, dx
and byte [rdi], cl
adc eax, 0x17740805
or byte [rdi], bl
xor dword [rdi], edx
adc dword [rdi + 0xc20c83b], eax
add al, 0xc7
adc byte [rdi + rax*2], 0x31
test byte [rsp + rdi - 0x627cfaec], bl
sbb ebx, edi
add dl, dl
outsd dx, dword [rsi]
adc byte [rdx - 0x778fda1], ch
sub esi, dword [rcx]
cmp dword [rsi + rsi*4], esp
add eax, 0x83242f95
pushfq
cmp al, 0x10
add ebp, ecx
nop
adc ecx, dword [rsi]
fimul dword ss:[rdi + 0x650726e0]
or ebp, esp
add eax, 0x3a05ea72
adc byte [rsi], dh
fist word gs:[rdi - 0x70e458fa]
movabs dword [0xda17bed843210e2f], eax
sbb al, 0xec
adc byte fs:[rdi + 0x3617fe22], ch
enter -0x31bf, -0x62
adc byte [rdi + rdi*4], ah
out 0xd8, al
nop
add cl, byte [rax]
inc dword [rcx]
cmp byte [rsi + 8], dh
mov ebx, 0x2f573390
scasb al, byte [rdi]
or byte [rdi + 0x5d8439c], cl
pop rdi
or qword [r8 - 0x32], rcx
js 0x402413
scasd eax, dword [rdi]
push rax
or dword [rdi - 0x40], edx
fadd dword [rip + 0x47097176]
test byte [rdi], dl
pushfq
cmp eax, dword [rsp + rcx + 0x9c8b521]
mov edi, 0x3c9ecf27
add byte [rip + 0x65d701db], ah
or dh, byte [rax]
and byte [rbx], al
or byte [rdx], 0x20
adc byte [rax - 0x64], bl
xchg eax, ebx
test byte [rcx], 0xe4
out 0xff, eax
fucomip st(0)
movsxd rsi, dword [rdx + 0x74]
jae 0x402458
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
mov dil, 0xf6
pop rbx
in eax, dx
push r11
push rsp
or eax, esp
jb 0x4024a9
imul ebx, dword [edx], 0xb7745f06
mov bh, 0x77
ljmp [rbp + 0x5f]
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x402478
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 - 0x14], esi
outsd dx, dword [rsi]
mov edi, 0x5f7372fd
jne 0x4024e4
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4024dd
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x46243538
jg 0x402478
or ebx, dword [rdi + 0x66]
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x4024e8
popfq
imul ebp
push rsi
call 0xb119e05
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x4024cd
lodsb al, byte es:[rsi]
sbb esi, dword [rax]
or eax, 0x2a74295f
fistp dword [rdx]
mov ebp, 0x70709cdd
and al, 0x5a
push rbx
je 0x402472
sub ch, byte [rcx + 0x13]
in eax, dx
mov ebp, 0x736fb6b5
push rdi
and esp, dword [rbx + 0x6f]
jo 0x402509
adc al, 0xaa
in eax, dx
scasb al, byte [rdi]
mov dh, 0x76
cmpsd dword [rsi], dword ptr [rdi]
jae 0x402509
imul ebp, dword [rsi + 0x4e497261], 0xdb732739
imul ch
outsb dx, byte [esi]
jne 0x402491
js 0x402554
xor dword [rdi], esi
or ch, byte [rsi + 0x12]
insd dword [rdi], dx
lea ebx, [rsi]
insd dword [rdi], dx
outsd dx, dword [rsi]
fbld tbyte [rsi]
push rax
xor al, 0x34
jo 0x40254e
imul ecx, dword [rax], 0xa456369
idiv ebp
mov bh, 0x3c
movsxd rdx, dword [rip + 0x535f3453]
add eax, 0x4e6c0045
push rbx
xor dword [rdi + 0x35], ebx
outsb dx, byte [rsi]
xchg ebp, ebp
cmp esp, dword [rdx + 0x73]
xor dword [rsi], eax
or r12b, spl
jae 0x40258a
lodsd eax, dword [rsi]
jge 0x4024d5
sbb eax, 0x442b5476
pop rdi
push rsp
xor byte [rdx], al
and al, 0xdb
jbe 0x402598
test dword [rsi], ebp
push rsi
xor eax, 0x355aa134
cwde
insb byte [rdi], dx
jg 0x40252f
in al, dx
ja 0x40257d
xor eax, 0x693178
xor dword [r13 + 0x54455250], r9d
push rsp
pop rcx
pop rdi
mov ch, 0xfd
or eax, 0x4e5546ff
push r12
pop rdi
or qword [rbx - 0x2a], r14
mov ch, 0x5b
sub esi, dword [rax + 0x395a065f]
movabs byte [0x3fb27639a1a16e5b], al
movsxd rsp, dword [rbx - 0xb]
cmp byte [rdi + 0x16], r13b
ret
mov ebx, 0x4629c37d
push rdx
movabs byte [0xb2796c1eb142444e], al
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
push rdx
fidiv word [rdi + 0x4f61c9f6]
push rbx
jge 0x40254a
sub byte [r10], r9b
or ebx, dword [rbx + 0x10646010]
int1
jbe 0x40259b
jb 0x402588
pop cx
jle 0x4025ed
movsxd rbx, dword [rdi]
add byte [rbx - 1], bh
in eax, dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
call 0xffffffff97f236b7
fst qword [rsi]
push rbx
jae 0x40261b
imul ebp, dword [rip - 0x43d4b9df], 0x63626938
mov esp, edi
add eax, 0xb8db6c8
je 0x402652
ja 0x40264c
sbb ah, byte fs:[rcx + 0x43]
outsb dx, byte [rsi]
and ebx, ebx
jbe 0x40266d
and al, 0x32
xor al, 0xfb
fcmovnu st(0), st(3)
fld xword [rdi + 0x75]
lahf
outsd dx, dword [rsi]
pop di
movabs al, byte [0x4b50746d4465676e]
movsxd rdi, dword [rdx + 0x2f]
lea ebx, [rbp - 0x55]
or dword [rsi], ebp
frstor dword [rdi + 0x67]
insd dword [rdi], dx
cmpsb byte [rsi], byte ptr [rdi]
rcl word [rax], 0x4a
jbe 0x402683
push rdx
ret
insb byte [rdi], dx
ja 0x40268e
fsub dword [rcx + 0x73]
rcr byte [rdx + 0x64], 0x6c
push rax
imul ebx, dword [rdi + 0x1b], 0xba36c1da
xor ah, byte [rsi + 0x11]
insb byte [rdi], dx
sbb bl, byte [rdi + 0x32]
push rax
jrcxz 0x4025fb
not byte [rip - 0x79b42f2f]
in al, 0x74
jns 0x4026be
sub cl, byte gs:[r8]
movabs r15, 0x1a69775f4d5f3c50
outsb dx, byte [rsi]
xor dword [rdx + 0x61], eax
lea eax, [rdx + rax*4]
or byte [rcx], al
mov al, 0x1d
sal dword [rcx], 0x74
jo 0x402683
xor dword [rdx], esi
jae 0x4026ec
xlatb
mov dh, 0xae
ret
nop
jb 0x4026a7
cmc
xor dword [rbx + 0x68], esp
int 0xe1
mov dh, 0x66
push rax
cmp eax, 0x556e5073
sbb bl, byte [rbx]
xchg eax, esi
int3
cmp dword [r14 + 0x5245f765], r8d
jmp qword [rbx - 0x2937a7d0]
push rbx
cmp bh, bh
jp 0x4026aa
mov bl, 0xdd
pop rbp
xor al, 0x49
jns 0x4026ed
xor dword [rbx + 0x63], edi
test dword [rbx + rdi + 0x4b], esp
sti
insd dword [rdi], dx
enter 0x696e, 0x64
lodsd eax, dword [rsi]
fist dword [rcx + 0x78615f61]
cmp al, 0xe2
push rbp
cmp bh, byte fs:[rsp + rcx]
add ebp, dword [rcx + 0x3f]
pop rdx
or edx, dword [rax + 0x54558452]
cdq
test dword [rcx + rcx], eax
sahf
xor byte [rdi - 0x5f], al
jo 0x402685
mov ah, 0x8b
movsxd rcx, dword [rcx + 0x48]
and ebp, dword [rdi + 0x4c040264]
push r12
pop rdi
fist dword [rdx]
push 0x430c0048
push rsp
movsd dword [rdi], dword ptr [rsi]
jmp 0x4026d1
stosd dword [rdi], eax
sbb ecx, dword [rdi - 0x78]
pop rdi
jne 0x402740
in al, dx
push rdx
sub esi, dword [rdi + rcx*2 + 0x36]
push rbx
hlt
push r10
mov r9b, 0xb0
imul eax, dword [rax + 0x6b6de145], 0x2da1690e
test byte [rax + 0x61], bl
xchg eax, edx
pop rdi
sbb r8, qword [rsi - 0x4b14e41c]
xor al, 0x63
adc al, 0xcf
pop rbp
cmp byte [rdx], dh
add al, 0x64
mov esp, 0x3c8d685f
ret 0x4963
jne 0x4026e6
push rdx
and byte [rax], bl
sbb bh, byte [rdi + 0x34]
jae 0x4027b9
jo 0x4026da
mov ebp, 0xcee1b149
or byte [rax], bh
outsd dx, dword [rsi]
mov r11d, 0xc037366d
adc esi, dword [rbx]
in eax, dx
rol byte [rdx - 0xdd28f33], 1
out 0x64, al
lodsb al, byte cs:[rsi]
pop rbp
push 0x3353a53f
test eax, 0xafe395d
out 0xe8, al
mov esp, 0x55f81562
xor eax, 0xb76d6c66
xor dl, byte [rsi]
outsd dx, dword [rsi]
push 0x6b6322f5
sal dword [rsi], cl
shr byte [r8 + 0x6b], cl
mov ebp, 0x738b3634
mov eax, 0x8d7cd591
pushfq
sbb eax, 0xb18cb70e
wait
cmp dword [r15], r8d
scasd eax, dword [rdi]
insd dword [rdi], dx
test dword [rbp - 0x42], ebx
mov bl, 0xda
pop rbx
insb byte [rdi], dx
sbb rdi, qword [rdi + 0x44]
jo 0x402803
mov edx, 0x6b5a369c
xchg eax, ebp
xor ch, byte [rsi + 0x47]
add al, 6
imul esp, dword [rip + 0x7215b6b9], 0x6f826fee
cmp al, byte [rdi]
mov bl, 0x44
add al, byte [rax + 0x3e]
movsxd rcx, eax
xor dword [rcx], edi
push rdx
jnp 0x402802
lodsb al, byte [rsi]
xchg eax, ebp
fimul dword [rbx]
jb 0x4027f7
mov dl, 0xd4
rol dword [rsi - 0x7e], 0x18
jo 0x402828
cwde
or ch, byte [rcx - 0x7b]
mov di, 0x4b32
lodsd eax, dword [rsi]
imul ebx, dword [rax + rcx], -3
jne 0x4027fb
shl dword [rbx - 0x67], 0x20
push rsi
mov ebx, 0x64434a49
and edi, ebp
insd dword [rdi], dx
outsb dx, byte [rsi]
cmp byte [rbp + 0x61], bl
adc eax, 0xab6558ab
test dword [rsi - 0x48], esp
cmp eax, 0x705f5783
cld
loopne 0x4027a4
imul edx, dword [rdi + 0x76504268], 0x30
sub esp, dword [rdi]
test ebp, ebp
pop rsi
movabs byte [0x776e7e332e31e27b], al
cmp eax, 0xb656c1c9
adc dl, byte [rbp + 0x7d]
lodsb al, byte fs:[rsi]
stosd dword [rdi], eax
je 0x4027fe
sbb r8, qword [rbx + 0x43]
xor al, bh
xor eax, dword [rbp + 0x70b61216]
jbe 0x402898
mov dl, 0x24
sbb esi, dword [rax + 0x3a]
pop rsp
jo 0x4028d5
in al, dx
xor ebp, eax
movsxd rcx, eax
or edx, dword [rbp + 0x6a64ca76]
sbb dword [rax + 0x65], ebp
sbb dword [rsi], r13d
push rax
or byte [rbp + rax*4 - 0x7cc7a579], cl
jb 0x402895
push rsp
or dword [rdi + 0x47], eax
adc al, byte [rsi + 0x38]
mov r15b, 0xe0
rcl dword [rsi], -0x29
add byte [rdx + 0x4e79734c], ch
jbe 0x40283d
adc dl, bl
je 0x402908
push -0x3c945235
or dword [rsi], ebx
push rdx
jo 0x4028a7
outsb dx, byte [rsi]
outsd dx, dword [rsi]
out dx, al
insd dword [rdi], dx
or eax, 0x67152d44
or eax, 0x75622ec6
push rsi
mov byte [rbp - 0x69], ch
cmc
sub eax, 0xb90d004c
cmp byte [rcx - 0x65], bl
mov ecx, 0x796409b7
outsb dx, byte [rsi]
sbb dword [r11 + 0x5870730], r11d
fmul qword [rdi + rbx*2]
sbb eax, dword [rbx + rdi*2]
lea eax, [rdx + 0x9282b1f]
mov dh, 0x67
loopne 0x40294a
cmp dword [rdx + rsi*2 + 0x2e], esi
or ch, byte [rdi + rbp*2]
out dx, al
test dword [rbx], esi
loope 0x4028f1
xor al, 5
mov ecx, 0x7a307b24
test byte [rdi - 0x1b], ch
push 0x726468b1
or eax, 0x2dd4d1b0
pop rbp
movsxd rsp, dword [rsi + 0x78]
jl 0x402975
insb byte [rdi], dx
or dword [rcx + 0x6cbd82ae], edi
adc dword [rdx + 0x43], ebx
sub esi, dword [rcx - 0x28]
or ebp, dword [rdx - 0xf]
movabs eax, dword [0x68006985bd9b3536]
jnp 0x40297f
mov dh, 0x35
push rbx
int 0xfc
add al, 0x56
push rdx
std
add byte [rax], al
mov cs, word [rax]
out dx, eax
add dword [rcx - 0x5834bf65], ebx
fild word [rdi]
int 0x90
or al, 0xc9
sbb al, 1
and eax, dword [rdi]
or dword [rdx + rsi], 0x20
push rsp
push rsp
and byte [rbx + rax*2], ah
xor ah, byte [rsp + rax]
xor dword [rip + 0x74320c83], esp
je 0x40297a
nop
fimul word [rip - 0x980bc]
ljmp [rdi - 0x68]
sbb dword [rax + rbx*4 + 0x38], esp
add eax, 0x9219a406
or byte [rsi + 0xb], cl
sal byte [rdx + 0x76], 1
nop
sar dword [rdi], -0x30
xor byte [rbx], al
sti
imul eax, dword [rsi], 0x183f6c99
push rsi
add esp, dword [rdi]
sub eax, 0x663f06a7
sub eax, 0x4922ee9
pop rsi
mov edi, 0x6f6724ff
iretd
mov edi, 0x43748044
add al, byte ss:[rdi]
imul edi, dword [rdi], -2
xchg byte [rip - 0x4f4f37ce], cl
rcl byte [rsi - 0x326b22db], 1
cmpsd dword [rsi], dword ptr [rdi]
jp 0x402a02
add al, 0x39
loope 0x402a04
movabs byte [0x858760c483f071f], al
inc dword [rdi + rdi + 0x20c83942]
or eax, 0xffffffc8
jo 0x4029ce
jo 0x4029e6
sbb dword cs:[rsi + 0x3378413], ecx
xchg eax, esi
xchg dword cs:[rdi], eax
lcall [rcx]
mov dl, 0xa1
in al, 0x1a
mov dword [rdi], edi
pop rbp
enter 0x641, 0x60
mov al, 1
adc byte [rdx + rcx], ah
fst dword [rax - 0x40c06bf9]
xchg eax, ecx
sub eax, 0x2f07dc30
setns byte [rbx + 0x3f9dd90c]
and byte [rdi], al
jg 0x4029cd
or esp, esp
xor dl, byte [rdi]
movabs dword [0x9ff072f08a4dcce], eax
insb byte [rdi], dx
sbb cl, byte [rdx - 0x57]
mov edi, 0x21723f60
sbb dword [rax + 0x3e], esp
add dword [rax], esp
adc ebp, dword [rax]
and al, 0x43
mov cl, 0x8f
sub byte fs:[rcx], bh
jae 0x402a35
jg 0x4029b4
mov edi, 0x85166e09
xchg dword [rdi], eax
adc al, 0xb2
mov esp, esp
int3
add ecx, ecx
and eax, 0xaf59b967
jg 0x4029ca
push -0x24f33e28
jo 0x402a86
mov edi, 0xa4064d10
sbb esp, edi
psubb mm3, mm1
mov ecx, 0xff07c100
add ch, byte [rdx + rsi + 0x68]
ljmp [rsi]
wait
sub eax, 0x1f9bf8e9
or al, 0xc9
leave
xor edi, dword [rdi - 0x10]
add dword [rsi], eax
adc byte [rax - 0x677cde93], dl
mov edi, 0x8b90722f
or byte [rcx], al
add esi, ecx
and eax, dword [rdx - 0x21]
xor byte [rdi], bh
call 0x4a594c37
or ch, al
rcr byte [rbp - 0x80], cl
cmp al, 0x7f
xor byte [rax], dl
jg 0x402aae
xchg cl, al
xor dword [rdi + 0x27648f30], edi
xor bh, byte [rdi + 0x17300115]
ret 0x2c38
xor al, 0x3f
sub dword [rbx + 0x7b111d], ebx
mov ebp, 0xc66c7f45
and bh, byte [rcx + 0x1e]
add dword [rbx + 0x60c9d900], edi
scasd eax, dword [rdi]
xor byte [rcx], dh
out dx, eax
or bl, byte [rdi]
mov ebx, dword [rdx + rax*8]
cmpsb byte [rsi], byte ptr [rdi]
lodsb al, byte [rsi]
dec dword [rcx]
jg 0x402b1b
cmp eax, dword [rax]
mov al, 0x48
sahf
test dword [rdx], ecx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 1], cl
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x76080216], ecx
sar byte [rbx - 0x76eb0d23], 0xe8
sbb eax, 0x9810000
add byte [rax], al
loopne 0x402b68
add byte [rax], al
add qword [r8], rax
fdiv st(4)
add byte [rax], al
add bh, bh
