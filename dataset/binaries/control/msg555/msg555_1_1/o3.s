xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60511f
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x4014d0
mov eax, 0
test rax, rax
je 0x4014d0
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401518
mov eax, 0
test rax, rax
je 0x401518
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x203f49], 0
jne 0x40153a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x203f36], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401550
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40154b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
lea r13, [rdi + 0x10]
push rbp
push rbx
mov rbx, rdi
sub rsp, 0x18
test esi, esi
mov qword [rdi], r13
mov dword [rsp + 8], esi
mov byte [rsp + 0xf], dl
mov qword [rdi + 8], 0
mov byte [rdi + 0x10], 0
jle 0x401670
mov r14d, ecx
mov rax, r13
xor r15d, r15d
xor r12d, r12d
jmp 0x401607
nop word [rax + rax]
movzx esi, byte [rsp + 0xf]
mov byte [rax + r15], sil
mov rax, qword [rbx]
mov qword [rbx + 8], rbp
mov byte [rax + rbp], 0
mov rax, qword [rbx]
mov rbp, qword [rbx + 8]
cmp r13, rax
lea r15, [rbp + 1]
je 0x401658
mov rdx, qword [rbx + 0x10]
cmp r15, rdx
ja 0x401638
add r12d, 1
cmp dword [rsp + 8], r12d
mov byte [rax + rbp], r14b
mov rax, qword [rbx]
mov qword [rbx + 8], r15
mov byte [rax + rbp + 1], 0
je 0x401670
mov r15, qword [rbx + 8]
mov rax, qword [rbx]
cmp r13, rax
lea rbp, [r15 + 1]
je 0x401660
mov rdx, qword [rbx + 0x10]
cmp rbp, rdx
jbe 0x4015b8
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r15
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rbx]
jmp 0x4015b8
nop dword [rax + rax]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
mov rdi, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rbx]
jmp 0x4015e5
nop word [rax + rax]
mov edx, 0xf
jmp 0x4015e0
nop
mov edx, 0xf
jmp 0x401614
nop word [rax + rax]
add rsp, 0x18
mov rax, rbx
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov rdi, qword [rbx]
mov rbp, rax
cmp rdi, r13
je 0x401692
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
nop word [rax + rax]
push r14
push r13
mov r13, rsi
push r12
push rbp
mov rbp, rdi
push rbx
sub rsp, 0xa0
mov rax, qword fs:[0x28]
mov qword [rsp + 0x98], rax
xor eax, eax
test edx, edx
je 0x401780
mov ebx, ecx
lea rdi, [rsp + 0x10]
mov esi, edx
mov r14d, ecx
movsx edx, bl
movsx ecx, r8b
call sym.alternate_abi:cxx11_
mov rcx, qword [r13 + 8]
test rcx, rcx
je 0x40172c
mov rdx, qword [r13]
cmp bl, byte [rdx]
lea rax, [rdx + 1]
lea rsi, [rdx + rcx]
jne 0x401721
jmp 0x401b2e
nop word cs:[rax + rax]
mov r12, rax
add rax, 1
cmp r14b, byte [rax - 1]
je 0x4017d8
mov rbx, rax
sub rbx, rdx
cmp rsi, rax
jne 0x401710
lea rax, [rbp + 0x10]
mov qword [rbp + 8], 0
mov byte [rbp + 0x10], 0
mov qword [rbp], rax
mov rdi, qword [rsp + 0x10]
lea rax, [rsp + 0x20]
cmp rdi, rax
je 0x401754
call sym.operatordelete
mov rcx, qword [rsp + 0x98]
xor rcx, qword fs:[0x28]
mov rax, rbp
jne 0x401b5a
add rsp, 0xa0
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop
lea rax, [rdi + 0x10]
mov rbx, qword [rsi + 8]
mov qword [rdi], rax
mov r12, qword [rsi]
mov rdi, r12
add rdi, rbx
je 0x4017a5
test r12, r12
jne 0x4017a5
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
cmp rbx, 0xf
mov qword [rsp + 8], rbx
ja 0x4019f0
cmp rbx, 1
je 0x401850
test rbx, rbx
mov rdx, rax
jne 0x401b42
mov qword [rbp + 8], rbx
mov byte [rdx + rbx], 0
jmp 0x401754
nop dword [rax]
cmp rbx, rcx
ja 0x401b9b
sub rcx, rbx
lea rax, [rsp + 0x80]
cmp rcx, 0xf
mov r14, rcx
mov qword [rsp], rcx
mov qword [rsp + 0x70], rax
ja 0x401a70
cmp rcx, 1
je 0x401860
test rcx, rcx
mov rdx, rax
jne 0x401b52
mov qword [rsp + 0x78], r14
mov byte [rdx + r14], 0
lea rax, [rsp + 0x40]
cmp qword [r13 + 8], rbx
mov r12, qword [r13]
cmovbe rbx, qword [r13 + 8]
mov qword [rsp + 0x30], rax
mov rax, r12
add rax, rbx
je 0x401871
test r12, r12
jne 0x401871
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
nop dword [rax]
movzx edx, byte [r12]
mov byte [rbp + 0x10], dl
mov rdx, rax
jmp 0x4017ca
movzx edx, byte [r12]
mov byte [rsp + 0x80], dl
mov rdx, rax
jmp 0x401814
cmp rbx, 0xf
mov qword [rsp + 8], rbx
ja 0x401a30
cmp rbx, 1
je 0x401aac
test rbx, rbx
lea rax, [rsp + 0x40]
jne 0x401b4a
mov qword [rsp + 0x38], rbx
mov byte [rax + rbx], 0
lea rdi, [rsp + 0x30]
mov rdx, qword [rsp + 0x18]
mov rsi, qword [rsp + 0x10]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
lea rdx, [rsp + 0x60]
mov qword [rsp + 0x50], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x401b02
mov qword [rsp + 0x50], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x60], rcx
mov rcx, qword [rax + 8]
lea rsi, [rsp + 0x60]
mov byte [rax + 0x10], 0
mov qword [rsp + 0x58], rcx
mov qword [rax], rdx
mov rcx, qword [rsp + 0x50]
mov qword [rax + 8], 0
mov r8, qword [rsp + 0x58]
mov rdx, qword [rsp + 0x78]
cmp rcx, rsi
lea rax, [r8 + rdx]
je 0x401af8
mov rsi, qword [rsp + 0x60]
cmp rax, rsi
mov rsi, qword [rsp + 0x70]
jbe 0x4019e0
lea rdi, [rsp + 0x80]
cmp rsi, rdi
je 0x401b38
mov rdi, qword [rsp + 0x80]
cmp rax, rdi
ja 0x4019e0
lea rdi, [rsp + 0x70]
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
lea rdx, [rbp + 0x10]
mov qword [rbp], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x401b19
mov qword [rbp], rcx
mov rcx, qword [rax + 0x10]
mov qword [rbp + 0x10], rcx
mov rcx, qword [rax + 8]
mov qword [rbp + 8], rcx
mov qword [rax], rdx
mov rdi, qword [rsp + 0x50]
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
lea rax, [rsp + 0x60]
cmp rdi, rax
je 0x4019a8
call sym.operatordelete
mov rdi, qword [rsp + 0x30]
lea rax, [rsp + 0x40]
cmp rdi, rax
je 0x4019bc
call sym.operatordelete
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x401740
call sym.operatordelete
jmp 0x401740
nop dword [rax]
lea rdi, [rsp + 0x50]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
jmp 0x401959
nop
lea rsi, [rsp + 8]
mov rdi, rbp
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rbp], rax
mov rax, qword [rsp + 8]
mov qword [rbp + 0x10], rax
mov rdx, rbx
mov rsi, r12
call sym.imp.memcpy
mov rbx, qword [rsp + 8]
mov rdx, qword [rbp]
jmp 0x4017ca
nop dword [rax + rax]
lea rsi, [rsp + 8]
lea rdi, [rsp + 0x30]
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0x30], rax
mov rax, qword [rsp + 8]
mov qword [rsp + 0x40], rax
mov rdx, rbx
mov rsi, r12
call sym.imp.memcpy
mov rbx, qword [rsp + 8]
mov rax, qword [rsp + 0x30]
jmp 0x401898
nop dword [rax]
lea rdi, [rsp + 0x70]
xor edx, edx
mov rsi, rsp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0x70], rax
mov rax, qword [rsp]
mov qword [rsp + 0x80], rax
mov rdx, r14
mov rsi, r12
call sym.imp.memcpy
mov r14, qword [rsp]
mov rdx, qword [rsp + 0x70]
jmp 0x401814
movzx eax, byte [r12]
mov byte [rsp + 0x40], al
lea rax, [rsp + 0x40]
jmp 0x401898
mov rbx, rax
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x401ad9
call sym.operatordelete
mov rdi, qword [rsp + 0x10]
lea rax, [rsp + 0x20]
cmp rdi, rax
je 0x401aed
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
nop dword [rax]
mov esi, 0xf
jmp 0x40191b
mov rcx, qword [rax + 0x10]
mov rbx, qword [rax + 0x18]
mov qword [rsp + 0x60], rcx
mov qword [rsp + 0x68], rbx
jmp 0x4018dd
mov rcx, qword [rax + 0x10]
mov rbx, qword [rax + 0x18]
mov qword [rbp + 0x10], rcx
mov qword [rbp + 0x18], rbx
jmp 0x40197d
mov r12, rdx
xor ebx, ebx
jmp 0x4017e1
mov edi, 0xf
jmp 0x401942
mov rdi, rax
jmp 0x401a0f
mov rdi, rax
jmp 0x401a53
mov rdi, rax
jmp 0x401a93
call sym.imp.__stack_chk_fail
mov rbx, rax
jmp 0x401ad9
mov rdi, qword [rsp + 0x50]
mov rbx, rax
lea rax, [rsp + 0x60]
cmp rdi, rax
je 0x401b7e
call sym.operatordelete
mov rdi, qword [rsp + 0x30]
lea rax, [rsp + 0x40]
cmp rdi, rax
je 0x401ac2
call sym.operatordelete
jmp 0x401ac2
mov rdx, rbx
mov esi, str.basic_string::substr
mov edi, str._s:___pos__which_is__zu____this__size____which_is__zu_
xor eax, eax
call sym.std::__throw_out_of_range_fmt
mov rbx, rax
jmp 0x401b7e
nop
nop word cs:[rax + rax]
push r15
push r14
mov r14d, r8d
push r13
push r12
mov r15d, edx
push rbp
push rbx
mov ebp, esi
mov rbx, rdi
mov edx, obj.std::piecewise_construct
mov r13d, r9d
sub rsp, 0x158
lea rsi, [rsp + 0xe8]
mov dword [rsp + 8], ecx
lea r12, [rsp + 0xd0]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x148], rax
xor eax, eax
lea r8, [rsp + 0x14]
lea rax, [rsp + 0x118]
lea rcx, [rsp + 0x20]
lea rdi, [rsp + 0xe0]
mov dword [rsp + 0xe8], 0
mov qword [rsp + 0xf0], 0
mov qword [rsp + 0x108], 0
mov qword [rsp + 0xf8], rsi
mov qword [rsp + 0x100], rsi
mov dword [rsp + 0x118], 0
mov qword [rsp + 0x120], 0
mov qword [rsp + 0x138], 0
mov qword [rsp + 0x128], rax
mov qword [rsp + 0x130], rax
mov byte [rsp + 0xd0], 0x52
mov qword [rsp + 0x20], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov dword [rax + 0x24], ebp
mov rax, qword [rsp + 0xf0]
mov byte [rsp + 0xd0], 0x4f
test rax, rax
je 0x402802
mov rdx, rax
lea rsi, [rsp + 0xe8]
jmp 0x401cdc
nop word cs:[rax + rax]
mov rsi, rdx
mov rdx, qword [rdx + 0x10]
test rdx, rdx
je 0x401ceb
cmp byte [rdx + 0x20], 0x4e
jg 0x401cd0
mov rdx, qword [rdx + 0x18]
test rdx, rdx
jne 0x401cdc
lea rdx, [rsp + 0xe8]
cmp rsi, rdx
je 0x401d02
cmp byte [rsi + 0x20], 0x4f
jle 0x40273b
lea r8, [rsp + 0x15]
lea rcx, [rsp + 0x30]
lea rdi, [rsp + 0xe0]
mov edx, obj.std::piecewise_construct
mov qword [rsp + 0x30], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rdx, qword [rsp + 0xf0]
mov dword [rax + 0x24], r15d
mov byte [rsp + 0xd0], 0x59
test rdx, rdx
je 0x40279c
mov rax, rdx
lea rsi, [rsp + 0xe8]
jmp 0x401d5c
nop dword [rax]
mov rsi, rax
mov rax, qword [rax + 0x10]
test rax, rax
je 0x401d6b
cmp byte [rax + 0x20], 0x58
jg 0x401d50
mov rax, qword [rax + 0x18]
test rax, rax
jne 0x401d5c
lea rax, [rsp + 0xe8]
cmp rsi, rax
je 0x401d82
cmp byte [rsi + 0x20], 0x59
jle 0x402727
lea r8, [rsp + 0x16]
lea rcx, [rsp + 0x40]
lea rdi, [rsp + 0xe0]
mov edx, obj.std::piecewise_construct
mov qword [rsp + 0x40], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rdx, qword [rsp + 0xf0]
mov ecx, dword [rsp + 8]
test rdx, rdx
mov dword [rax + 0x24], ecx
mov byte [rsp + 0xd0], 0x47
je 0x4027ad
mov rax, rdx
lea rsi, [rsp + 0xe8]
jmp 0x401ddc
mov rsi, rax
mov rax, qword [rax + 0x10]
test rax, rax
je 0x401deb
cmp byte [rax + 0x20], 0x46
jg 0x401dd0
mov rax, qword [rax + 0x18]
test rax, rax
jne 0x401ddc
lea rax, [rsp + 0xe8]
cmp rsi, rax
je 0x401e02
cmp byte [rsi + 0x20], 0x47
jle 0x402716
lea r8, [rsp + 0x17]
lea rcx, [rsp + 0x50]
lea rdi, [rsp + 0xe0]
mov edx, obj.std::piecewise_construct
mov qword [rsp + 0x50], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rdx, qword [rsp + 0xf0]
mov dword [rax + 0x24], r14d
mov byte [rsp + 0xd0], 0x42
test rdx, rdx
je 0x40277a
mov rax, rdx
lea rsi, [rsp + 0xe8]
jmp 0x401e5c
nop dword [rax]
mov rsi, rax
mov rax, qword [rax + 0x10]
test rax, rax
je 0x401e6b
cmp byte [rax + 0x20], 0x41
jg 0x401e50
mov rax, qword [rax + 0x18]
test rax, rax
jne 0x401e5c
lea rax, [rsp + 0xe8]
cmp rsi, rax
je 0x401e82
cmp byte [rsi + 0x20], 0x42
jle 0x402705
lea r8, [rsp + 0x18]
lea rcx, [rsp + 0x60]
lea rdi, [rsp + 0xe0]
mov edx, obj.std::piecewise_construct
mov qword [rsp + 0x60], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rdx, qword [rsp + 0xf0]
mov dword [rax + 0x24], r13d
mov byte [rsp + 0xd0], 0x56
test rdx, rdx
je 0x402529
lea rax, [rsp + 0xe8]
jmp 0x401edc
nop word [rax + rax]
mov rax, rdx
mov rdx, qword [rdx + 0x10]
test rdx, rdx
je 0x401eeb
cmp byte [rdx + 0x20], 0x55
jg 0x401ed0
mov rdx, qword [rdx + 0x18]
test rdx, rdx
jne 0x401edc
lea rdx, [rsp + 0xe8]
cmp rax, rdx
je 0x402531
cmp byte [rax + 0x20], 0x56
jg 0x402531
mov edx, dword [rsp + 0x190]
mov dword [rax + 0x24], edx
mov rax, qword [rsp + 0x120]
mov byte [rsp + 0xd0], 0x52
test rax, rax
je 0x4027f1
mov rdx, rax
lea rsi, [rsp + 0x118]
jmp 0x401f4c
nop word cs:[rax + rax]
mov rsi, rdx
mov rdx, qword [rdx + 0x10]
test rdx, rdx
je 0x401f5b
cmp byte [rdx + 0x20], 0x51
jg 0x401f40
mov rdx, qword [rdx + 0x18]
test rdx, rdx
jne 0x401f4c
lea rdx, [rsp + 0x118]
cmp rsi, rdx
je 0x401f72
cmp byte [rsi + 0x20], 0x52
jle 0x4026ee
lea r8, [rsp + 0x1a]
lea rcx, [rsp + 0x80]
lea rdi, [rsp + 0x110]
mov edx, obj.std::piecewise_construct
mov qword [rsp + 0x80], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rdx, qword [rsp + 0x120]
mov dword [rax + 0x24], 1
mov byte [rsp + 0xd0], 0x4f
test rdx, rdx
je 0x40278b
mov rax, rdx
lea rsi, [rsp + 0x118]
jmp 0x401fdc
nop word cs:[rax + rax]
mov rsi, rax
mov rax, qword [rax + 0x10]
test rax, rax
je 0x401feb
cmp byte [rax + 0x20], 0x4e
jg 0x401fd0
mov rax, qword [rax + 0x18]
test rax, rax
jne 0x401fdc
lea rax, [rsp + 0x118]
cmp rsi, rax
je 0x402002
cmp byte [rsi + 0x20], 0x4f
jle 0x4026da
lea r8, [rsp + 0x1b]
lea rcx, [rsp + 0x90]
lea rdi, [rsp + 0x110]
mov edx, obj.std::piecewise_construct
mov qword [rsp + 0x90], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rdx, qword [rsp + 0x120]
mov dword [rax + 0x24], 0x11
mov byte [rsp + 0xd0], 0x59
test rdx, rdx
je 0x4027be
mov rax, rdx
lea rsi, [rsp + 0x118]
jmp 0x40206c
nop word cs:[rax + rax]
mov rsi, rax
mov rax, qword [rax + 0x10]
test rax, rax
je 0x40207b
cmp byte [rax + 0x20], 0x58
jg 0x402060
mov rax, qword [rax + 0x18]
test rax, rax
jne 0x40206c
lea rax, [rsp + 0x118]
cmp rsi, rax
je 0x402092
cmp byte [rsi + 0x20], 0x59
jle 0x4026c6
lea r8, [rsp + 0x1c]
lea rcx, [rsp + 0xa0]
lea rdi, [rsp + 0x110]
mov edx, obj.std::piecewise_construct
mov qword [rsp + 0xa0], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rdx, qword [rsp + 0x120]
mov dword [rax + 0x24], 0x10
mov byte [rsp + 0xd0], 0x47
test rdx, rdx
je 0x4027cf
mov rax, rdx
lea rsi, [rsp + 0x118]
jmp 0x4020fc
nop word cs:[rax + rax]
mov rsi, rax
mov rax, qword [rax + 0x10]
test rax, rax
je 0x40210b
cmp byte [rax + 0x20], 0x46
jg 0x4020f0
mov rax, qword [rax + 0x18]
test rax, rax
jne 0x4020fc
lea rax, [rsp + 0x118]
cmp rsi, rax
je 0x402122
cmp byte [rsi + 0x20], 0x47
jle 0x4026b2
lea r8, [rsp + 0x1d]
lea rcx, [rsp + 0xb0]
lea rdi, [rsp + 0x110]
mov edx, obj.std::piecewise_construct
mov qword [rsp + 0xb0], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rdx, qword [rsp + 0x120]
mov dword [rax + 0x24], 0x110
mov byte [rsp + 0xd0], 0x42
test rdx, rdx
je 0x4027e0
mov rax, rdx
lea rsi, [rsp + 0x118]
jmp 0x40218c
nop word cs:[rax + rax]
mov rsi, rax
mov rax, qword [rax + 0x10]
test rax, rax
je 0x40219b
cmp byte [rax + 0x20], 0x41
jg 0x402180
mov rax, qword [rax + 0x18]
test rax, rax
jne 0x40218c
lea rax, [rsp + 0x118]
cmp rsi, rax
je 0x4021b2
cmp byte [rsi + 0x20], 0x42
jle 0x40269e
lea rbp, [rsp + 0xc0]
lea r8, [rsp + 0x1e]
lea rdi, [rsp + 0x110]
mov edx, obj.std::piecewise_construct
mov qword [rsp + 0xc0], r12
mov rcx, rbp
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rdx, qword [rsp + 0x120]
mov dword [rax + 0x24], 0x100
mov byte [rsp + 0xc0], 0x56
test rdx, rdx
je 0x40276d
lea rax, [rsp + 0x118]
jmp 0x40221c
nop word cs:[rax + rax]
mov rax, rdx
mov rdx, qword [rdx + 0x10]
test rdx, rdx
je 0x40222b
cmp byte [rdx + 0x20], 0x55
jg 0x402210
mov rdx, qword [rdx + 0x18]
test rdx, rdx
jne 0x40221c
lea rdx, [rsp + 0x118]
cmp rax, rdx
je 0x40266c
cmp byte [rax + 0x20], 0x56
jg 0x40266c
mov rbp, qword [rbx + 8]
mov dword [rax + 0x24], 0x101
test rbp, rbp
je 0x402813
lea r14, [rsp + 0xe8]
xor r12d, r12d
nop dword [rax]
mov rdx, qword [rsp + 0xf0]
mov r13, r12
add r13, qword [rbx]
test rdx, rdx
je 0x40264a
movzx eax, byte [r13]
mov rbp, r14
jmp 0x40229c
nop dword [rax]
mov rbp, rdx
mov rdx, qword [rdx + 0x10]
test rdx, rdx
je 0x4022aa
cmp byte [rdx + 0x20], al
jge 0x402290
mov rdx, qword [rdx + 0x18]
test rdx, rdx
jne 0x40229c
cmp rbp, r14
je 0x4022b4
cmp byte [rbp + 0x20], al
jle 0x402326
mov edi, 0x28
call sym.operatornew
mov r15, rax
movzx eax, byte [r13]
lea rdi, [rsp + 0xe0]
lea rdx, [r15 + 0x20]
mov dword [r15 + 0x24], 0
mov rsi, rbp
mov byte [r15 + 0x20], al
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_insert_hint_unique_pos
test rdx, rdx
je 0x402652
test rax, rax
jne 0x402763
cmp r14, rdx
je 0x402763
movzx eax, byte [rdx + 0x20]
xor edi, edi
cmp byte [r15 + 0x20], al
setl dil
mov rcx, r14
mov rsi, r15
mov rbp, r15
call sym.std::_Rb_tree_insert_and_rebalance
add qword [rsp + 0x108], 1
sub dword [rbp + 0x24], 1
js 0x4028f8
mov rbp, qword [rbx + 8]
add r12, 1
cmp rbp, r12
ja 0x402268
mov rax, qword [rsp + 0xf8]
lea rdx, [rsp + 0xe8]
cmp rax, rdx
je 0x402388
mov ecx, dword [rax + 0x24]
test ecx, ecx
jg 0x4028c4
lea r12, [rsp + 0xe8]
jmp 0x40237b
nop dword [rax + rax]
mov edx, dword [rax + 0x24]
test edx, edx
jg 0x4028c4
mov rdi, rax
call sym.std::_Rb_tree_increment
cmp rax, r12
jne 0x402370
xor r12d, r12d
test rbp, rbp
je 0x4024d6
nop dword [rax]
mov rcx, qword [rbx]
xor edx, edx
movzx r13d, byte [rcx + r12]
add r12, 1
mov rax, r12
div rbp
movzx ebp, byte [rcx + rdx]
mov rdx, qword [rsp + 0x120]
test rdx, rdx
je 0x40255a
mov rax, rdx
lea r14, [rsp + 0x118]
jmp 0x4023dc
nop
mov r14, rax
mov rax, qword [rax + 0x10]
test rax, rax
je 0x4023eb
cmp r13b, byte [rax + 0x20]
jle 0x4023d0
mov rax, qword [rax + 0x18]
test rax, rax
jne 0x4023dc
lea rax, [rsp + 0x118]
cmp r14, rax
je 0x402570
cmp r13b, byte [r14 + 0x20]
jl 0x402570
mov r13d, dword [r14 + 0x24]
lea r14, [rsp + 0x118]
jmp 0x402424
nop dword [rax]
mov r14, rdx
mov rdx, qword [rdx + 0x10]
test rdx, rdx
je 0x402433
cmp bpl, byte [rdx + 0x20]
jle 0x402418
mov rdx, qword [rdx + 0x18]
test rdx, rdx
jne 0x402424
lea rax, [rsp + 0x118]
cmp r14, rax
je 0x402446
cmp bpl, byte [r14 + 0x20]
jge 0x4024bf
mov edi, 0x28
call sym.operatornew
lea rdx, [rax + 0x20]
lea rdi, [rsp + 0x110]
mov byte [rax + 0x20], bpl
mov dword [rax + 0x24], 0
mov rsi, r14
mov r15, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_insert_hint_unique_pos
test rdx, rdx
je 0x402630
lea rcx, [rsp + 0x118]
cmp rcx, rdx
je 0x402759
test rax, rax
jne 0x402759
movzx eax, byte [rdx + 0x20]
xor edi, edi
cmp byte [r15 + 0x20], al
setl dil
lea rcx, [rsp + 0x118]
mov rsi, r15
mov r14, r15
call sym.std::_Rb_tree_insert_and_rebalance
add qword [rsp + 0x138], 1
test dword [r14 + 0x24], r13d
jne 0x402831
mov rbp, qword [rbx + 8]
cmp rbp, r12
ja 0x402398
mov rsi, qword [rsp + 0x120]
lea rdi, [rsp + 0x110]
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_erase
mov rsi, qword [rsp + 0xf0]
lea rdi, [rsp + 0xe0]
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_erase
mov rax, qword [rsp + 0x148]
xor rax, qword fs:[0x28]
jne 0x4028bf
add rsp, 0x158
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
lea rax, [rsp + 0xe8]
lea r8, [rsp + 0x19]
lea rcx, [rsp + 0x70]
lea rdi, [rsp + 0xe0]
mov edx, obj.std::piecewise_construct
mov rsi, rax
mov qword [rsp + 0x70], r12
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
jmp 0x401f06
lea rax, [rsp + 0x110]
lea r14, [rax + 8]
nop word cs:[rax + rax]
mov edi, 0x28
call sym.operatornew
lea rdx, [rax + 0x20]
lea rdi, [rsp + 0x110]
mov byte [rax + 0x20], r13b
mov dword [rax + 0x24], 0
mov rsi, r14
mov r15, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_insert_hint_unique_pos
test rdx, rdx
je 0x402610
test rax, rax
jne 0x40274f
lea rax, [rsp + 0x118]
cmp rax, rdx
je 0x40274f
movzx eax, byte [rdx + 0x20]
xor edi, edi
cmp byte [r15 + 0x20], al
setl dil
lea rcx, [rsp + 0x118]
mov rsi, r15
call sym.std::_Rb_tree_insert_and_rebalance
add qword [rsp + 0x138], 1
mov rdx, qword [rsp + 0x120]
mov r13d, dword [r15 + 0x24]
test rdx, rdx
jne 0x40240a
lea rax, [rsp + 0x110]
lea r14, [rax + 8]
jmp 0x402446
nop dword [rax + rax]
mov rdi, r15
mov qword [rsp + 8], rax
call sym.operatordelete
mov rax, qword [rsp + 8]
mov r15, rax
jmp 0x4025e2
nop word [rax + rax]
mov rdi, r15
mov qword [rsp + 8], rax
call sym.operatordelete
mov rax, qword [rsp + 8]
mov r14, rax
jmp 0x4024bf
mov rbp, r14
jmp 0x4022b4
mov rdi, r15
mov qword [rsp + 8], rax
call sym.operatordelete
mov rax, qword [rsp + 8]
mov rbp, rax
jmp 0x402326
lea rbp, [rsp + 0xc0]
lea r8, [rsp + 0x1f]
lea rdi, [rsp + 0x110]
mov rcx, r12
mov edx, obj.std::piecewise_construct
mov rsi, rax
mov qword [rsp + 0xd0], rbp
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
jmp 0x402246
mov dword [rsi + 0x24], 0x100
mov byte [rsp + 0xc0], 0x56
jmp 0x4021fc
mov dword [rsi + 0x24], 0x110
mov byte [rsp + 0xd0], 0x42
jmp 0x402169
mov dword [rsi + 0x24], 0x10
mov byte [rsp + 0xd0], 0x47
jmp 0x4020d9
mov dword [rsi + 0x24], 0x11
mov byte [rsp + 0xd0], 0x59
jmp 0x402049
mov dword [rsi + 0x24], 1
mov rdx, rax
mov byte [rsp + 0xd0], 0x4f
jmp 0x401fb9
mov dword [rsi + 0x24], r13d
mov byte [rsp + 0xd0], 0x56
jmp 0x401ec0
mov dword [rsi + 0x24], r14d
mov byte [rsp + 0xd0], 0x42
jmp 0x401e40
mov eax, dword [rsp + 8]
mov dword [rsi + 0x24], eax
mov byte [rsp + 0xd0], 0x47
jmp 0x401dc3
mov dword [rsi + 0x24], r15d
mov rdx, rax
mov byte [rsp + 0xd0], 0x59
jmp 0x401d40
mov edi, 1
jmp 0x4025c9
mov edi, 1
jmp 0x4024a3
mov edi, 1
jmp 0x40230f
lea rax, [rsp + 0x118]
jmp 0x402674
lea rax, [rsp + 0xe0]
lea rsi, [rax + 8]
jmp 0x401e82
lea rax, [rsp + 0x110]
lea rsi, [rax + 8]
jmp 0x402002
lea rax, [rsp + 0xe0]
lea rsi, [rax + 8]
jmp 0x401d82
lea rax, [rsp + 0xe0]
lea rsi, [rax + 8]
jmp 0x401e02
lea rax, [rsp + 0x110]
lea rsi, [rax + 8]
jmp 0x402092
lea rax, [rsp + 0x110]
lea rsi, [rax + 8]
jmp 0x402122
lea rax, [rsp + 0x110]
lea rsi, [rax + 8]
jmp 0x4021b2
lea rax, [rsp + 0x110]
lea rsi, [rax + 8]
jmp 0x401f72
lea rax, [rsp + 0xe0]
lea rsi, [rax + 8]
jmp 0x401d02
mov rax, qword [rsp + 0xf8]
lea rdx, [rsp + 0xe8]
cmp rax, rdx
jne 0x402356
jmp 0x4024d6
mov edx, 0xc
mov esi, str.FAIL_CHECK_3
mov edi, obj.std::cerr
call sym.std::__ostream_insert_char_std::char_traits_char__
mov rax, qword [rip + 0x2029f4]
mov rax, qword [rax - 0x18]
mov rbx, qword [rax + 0x605330]
test rbx, rbx
je 0x402959
cmp byte [rbx + 0x38], 0
je 0x40292c
movsx esi, byte [rbx + 0x43]
mov edi, obj.std::cerr
call sym.std::ostream::put
mov rdi, rax
call sym.std::ostream::flush
mov edi, 1
call sym.imp.exit
mov rsi, qword [rsp + 0x120]
lea rdi, [rsp + 0x110]
mov rbx, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_erase
mov rsi, qword [rsp + 0xf0]
lea rdi, [rsp + 0xe0]
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_erase
mov rdi, rbx
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
mov edx, 0xc
mov esi, str.FAIL_CHECK_2
mov edi, obj.std::cerr
call sym.std::__ostream_insert_char_std::char_traits_char__
mov rax, qword [rip + 0x202961]
mov rax, qword [rax - 0x18]
mov rbx, qword [rax + 0x605330]
test rbx, rbx
jne 0x402860
call sym.std::__throw_bad_cast
mov edx, 0xa
mov esi, str.FAIL_CHECK
mov edi, obj.std::cerr
call sym.std::__ostream_insert_char_std::char_traits_char__
mov rax, qword [rip + 0x20292d]
mov rax, qword [rax - 0x18]
mov rbx, qword [rax + 0x605330]
test rbx, rbx
jne 0x402860
call sym.std::__throw_bad_cast
mov rdi, rbx
call sym.std::ctype_char_::_M_widen_init
mov rax, qword [rbx]
mov esi, 0xa
mov rax, qword [rax + 0x30]
cmp rax, sym.std::ctype_char_::do_widen
je 0x40286e
mov rdi, rbx
call rax
movsx esi, al
jmp 0x40286e
call sym.std::__throw_bad_cast
nop
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x58
mov r15, qword [rdi]
mov rbp, qword [rsi]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x48], rax
xor eax, eax
mov rax, r15
sub rax, rbp
cmp rax, 0x87
jle 0x402b6a
test rdx, rdx
mov rbx, rdx
je 0x402b89
lea rax, [rsp + 0x40]
mov r13, rdi
mov r12, rsi
mov qword [rsp + 8], rax
lea rax, [rbp + 8]
mov rdi, r15
mov qword [rsp + 0x40], r15
sub rsp, 8
sub rbx, 1
mov qword [rsp + 0x18], rax
mov rax, r15
sub rax, rbp
sar rax, 3
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
shl rax, 3
sub rdi, rax
lea rax, [r15 - 8]
mov qword [rsp + 0x28], rdi
mov qword [rsp + 0x38], rax
push 0
mov rdi, qword [rsp + 0x18]
lea rcx, [rsp + 0x20]
lea rsi, [rsp + 0x40]
lea rdx, [rsp + 0x30]
call sym.std::__move_median_to_first_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
pop rax
mov ecx, dword [r15 - 8]
lea rsi, [r15 - 0x10]
mov rax, rbp
pop rdx
jmp 0x402a3c
nop dword [rax]
movzx edx, byte [r15 - 4]
cmp byte [rsi + 4], dl
jge 0x402a50
nop word [rax + rax]
sub rsi, 8
mov edi, dword [rsi]
lea r14, [rsi + 8]
mov rbp, r14
cmp ecx, edi
jg 0x402a38
jge 0x402a28
nop dword [rax + rax]
add rax, 8
mov edx, dword [rax - 8]
cmp ecx, edx
jl 0x402a50
jg 0x402a68
movzx r8d, byte [rax - 4]
cmp byte [r15 - 4], r8b
jl 0x402a50
cmp r14, rax
jbe 0x402a90
mov dword [rsi], edx
mov dword [rax - 8], edi
movzx ecx, byte [rax - 4]
movzx edx, byte [rsi + 4]
mov byte [rsi + 4], cl
mov byte [rax - 4], dl
mov ecx, dword [r15 - 8]
jmp 0x402a38
nop word cs:[rax + rax]
mov rax, qword [r12]
mov rsi, qword [rsp + 8]
lea rdi, [rsp + 0x30]
mov rdx, rbx
mov qword [rsp + 0x30], r14
mov qword [rsp + 0x40], rax
call sym.std::__introsort_loop_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long___gnu_cxx::__ops::_Iter_less_iter_
mov r15, qword [r13]
mov qword [r12], r14
mov rax, r15
sub rax, r14
cmp rax, 0x87
jle 0x402b6a
test rbx, rbx
jne 0x4029b2
sar rax, 3
mov rbx, rax
lea r12, [rbx - 2]
mov rdi, r15
sar r12, 1
lea rax, [r12*8]
sub rdi, rax
lea r13, [rdi - 8]
jmp 0x402afc
nop dword [rax]
sub r12, 1
sub rsp, 8
mov rcx, qword [r13]
mov qword [rsp + 0x48], r15
push 0
mov rdi, qword [rsp + 0x18]
mov rdx, rbx
mov rsi, r12
add r13, 8
call sym.std::__adjust_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
test r12, r12
pop rdi
pop r8
jne 0x402af8
mov eax, dword [r15 - 8]
add rbp, 8
mov rcx, qword [rbp - 8]
sub rsp, 8
mov rbx, r15
xor esi, esi
sub rbx, rbp
mov dword [rbp - 8], eax
movzx eax, byte [r15 - 4]
mov rdx, rbx
sar rdx, 3
mov byte [rbp - 4], al
mov qword [rsp + 0x48], r15
push 0
mov rdi, qword [rsp + 0x18]
call sym.std::__adjust_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
cmp rbx, 0xf
pop rcx
pop rsi
jg 0x402b27
mov rax, qword [rsp + 0x48]
xor rax, qword fs:[0x28]
jne 0x402b9f
add rsp, 0x58
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
sar rax, 3
mov rbx, rax
lea rax, [rsp + 0x40]
mov qword [rsp + 8], rax
jmp 0x402ada
call sym.imp.__stack_chk_fail
nop
nop word cs:[rax + rax]
push r15
push r14
mov r15d, r9d
push r13
push r12
mov r14d, ecx
push rbp
push rbx
mov rbp, rdi
mov ebx, edx
mov r12d, r8d
sub rsp, 0xf8
mov rax, qword fs:[0x28]
mov qword [rsp + 0xe8], rax
xor eax, eax
lea eax, [r9 + rdx]
mov r13d, dword [rsp + 0x130]
cmp eax, esi
jne 0x402bfb
cmp r9d, edx
je 0x40313b
mov eax, dword [rsp + 0x138]
add eax, r12d
cmp eax, esi
jne 0x402c17
cmp dword [rsp + 0x138], r12d
je 0x403151
lea eax, [r14 + r13]
cmp eax, esi
jne 0x402c28
cmp r14d, r13d
je 0x40316b
test r14d, r14d
jle 0x402c39
sub r13d, r14d
test r13d, r13d
jle 0x4030d7
test r15d, r15d
jle 0x402c49
sub ebx, r15d
test ebx, ebx
jle 0x4030d7
mov r9d, dword [rsp + 0x138]
test r9d, r9d
jle 0x402c67
sub r12d, dword [rsp + 0x138]
test r12d, r12d
jle 0x4030d7
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
mov qword [rsp + 0x40], 0
mov qword [rsp + 0x48], 0
mov qword [rsp + 0x50], 0
mov dword [rsp + 0x30], ebx
mov byte [rsp + 0x34], 0x52
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_emplace_back_aux_std::pair_int_char__
mov rax, qword [rsp + 0x48]
mov rdx, qword [rsp + 0x50]
mov dword [rsp + 0x30], r12d
mov byte [rsp + 0x34], 0x59
cmp rax, rdx
je 0x40311d
test rax, rax
je 0x402cc4
mov rcx, qword [rsp + 0x30]
mov qword [rax], rcx
add rax, 8
mov qword [rsp + 0x48], rax
cmp rax, rdx
mov dword [rsp + 0x30], r13d
mov byte [rsp + 0x34], 0x42
je 0x403104
test rax, rax
je 0x402ced
mov rdx, qword [rsp + 0x30]
mov qword [rax], rdx
add rax, 8
mov qword [rsp + 0x48], rax
mov r9, qword [rsp + 0x40]
cmp r9, rax
je 0x402e14
mov rcx, rax
mov esi, 0x3f
lea rdi, [rsp + 0x30]
sub rcx, r9
mov qword [rsp + 0x20], r9
mov qword [rsp + 0x10], r9
mov rdx, rcx
mov qword [rsp + 0x18], rcx
mov qword [rsp + 0x30], rax
sar rdx, 3
mov qword [rsp + 8], rax
bsr rdx, rdx
xor rdx, 0x3f
movsxd rdx, edx
sub rsi, rdx
mov rdx, rsi
lea rsi, [rsp + 0x20]
add rdx, rdx
call sym.std::__introsort_loop_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long___gnu_cxx::__ops::_Iter_less_iter_
mov rcx, qword [rsp + 0x18]
mov rax, qword [rsp + 8]
mov r9, qword [rsp + 0x10]
cmp rcx, 0x87
jle 0x402dee
lea r8, [rax - 0x80]
mov qword [rsp + 0x30], rax
sub rsp, 8
mov qword [rsp + 0x28], r8
mov qword [rsp + 0x10], r8
push 0
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
call sym.std::__insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
pop rdi
pop r8
mov r8, qword [rsp + 8]
mov r9, qword [rsp + 0x10]
cmp r9, r8
jne 0x402dc8
jmp 0x402e0f
nop word [rax + rax]
jg 0x402db8
cmp sil, byte [rax + 4]
jl 0x402dde
sub r8, 8
mov dword [rax - 8], ecx
mov byte [rax - 4], sil
cmp r9, r8
je 0x402e0f
movzx esi, byte [r8 - 4]
mov ecx, dword [r8 - 8]
mov rax, r8
nop dword [rax]
mov edx, dword [rax]
cmp ecx, edx
jge 0x402db0
mov dword [rax - 8], edx
movzx edx, byte [rax + 4]
add rax, 8
mov byte [rax - 0xc], dl
jmp 0x402dd8
mov qword [rsp + 0x20], r9
mov qword [rsp + 0x30], rax
sub rsp, 8
push 0
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
call sym.std::__insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
pop rcx
pop rsi
mov rax, qword [rsp + 0x40]
mov edx, dword [rax + 0x10]
add edx, dword [rax + 8]
cmp dword [rax], edx
jle 0x402e70
lea rdx, [rbp + 0x10]
mov qword [rbp + 8], 0
mov byte [rbp + 0x10], 0
mov qword [rbp], rdx
mov rdi, rax
call sym.operatordelete
mov rbx, qword [rsp + 0xe8]
xor rbx, qword fs:[0x28]
mov rax, rbp
jne 0x4031b7
add rsp, 0xf8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
add ebx, r12d
lea rax, [rsp + 0x70]
lea rdi, [rsp + 0x60]
add r13d, ebx
mov edx, 0x3f
movsxd rsi, r13d
mov qword [rsp + 0x60], rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_construct
mov rax, qword [rsp + 0x40]
mov esi, dword [rax]
test esi, esi
jle 0x402ec7
xor ecx, ecx
xor edx, edx
nop dword [rax]
movzx esi, byte [rax + 4]
mov rax, qword [rsp + 0x60]
add edx, 1
mov byte [rax + rcx], sil
mov rax, qword [rsp + 0x40]
add rcx, 2
mov esi, dword [rax]
cmp esi, edx
jg 0x402ea8
add esi, esi
lea ecx, [rsi - 1]
cmp r13d, ecx
jle 0x402f29
movsxd rcx, ecx
sub r13d, esi
lea rdx, [rcx + 1]
lea r8, [rdx + r13]
jmp 0x402f01
nop dword [rax]
mov byte [rsi + rcx], dil
mov rax, qword [rsp + 0x40]
mov rcx, rdx
sub dword [rax + 8], 1
cmp rdx, r8
je 0x402f29
add rdx, 1
mov rsi, qword [rsp + 0x60]
movzx edi, byte [rax + 0xc]
cmp byte [rsi + rcx - 1], dil
jne 0x402ee8
movzx eax, byte [rax + 0x14]
mov byte [rsi + rcx], al
mov rax, qword [rsp + 0x40]
mov rcx, rdx
sub dword [rax + 0x10], 1
cmp rdx, r8
jne 0x402efd
mov rsi, qword [rsp + 0x68]
xor edx, edx
test rsi, rsi
jne 0x402f49
jmp 0x402f80
nop word [rax + rax]
add rdx, 1
cmp rsi, rdx
jbe 0x402f80
mov rcx, rdx
add rcx, qword [rsp + 0x60]
cmp byte [rcx], 0x3f
jne 0x402f40
mov esi, dword [rax + 8]
test esi, esi
jle 0x4030be
sub esi, 1
add rdx, 1
mov dword [rax + 8], esi
movzx eax, byte [rax + 0xc]
mov byte [rcx], al
mov rsi, qword [rsp + 0x68]
mov rax, qword [rsp + 0x40]
cmp rsi, rdx
ja 0x402f49
mov edx, dword [rax + 8]
test edx, edx
jne 0x403185
mov eax, dword [rax + 0x10]
test eax, eax
jne 0x40319e
lea rsi, [rsp + 0x60]
lea rdi, [rsp + 0x80]
mov r8d, 0x4f
mov ecx, 0x42
mov edx, r14d
call sym.expand
lea rdi, [rsp + 0x60]
lea rsi, [rsp + 0x80]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x80]
lea rax, [rsp + 0x90]
cmp rdi, rax
je 0x402fe2
call sym.operatordelete
lea rsi, [rsp + 0x60]
lea rdi, [rsp + 0xa0]
mov r8d, 0x47
mov ecx, 0x52
mov edx, r15d
call sym.expand
lea rdi, [rsp + 0x60]
lea rsi, [rsp + 0xa0]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0xa0]
lea rax, [rsp + 0xb0]
cmp rdi, rax
je 0x40302e
call sym.operatordelete
mov edx, dword [rsp + 0x138]
lea rsi, [rsp + 0x60]
lea rdi, [rsp + 0xc0]
mov r8d, 0x56
mov ecx, 0x59
call sym.expand
lea rdi, [rsp + 0x60]
lea rsi, [rsp + 0xc0]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0xc0]
lea rax, [rsp + 0xd0]
cmp rdi, rax
je 0x40307e
call sym.operatordelete
lea rax, [rbp + 0x10]
lea rdx, [rsp + 0x70]
mov qword [rbp], rax
mov rax, qword [rsp + 0x60]
cmp rax, rdx
je 0x4030f0
mov qword [rbp], rax
mov rax, qword [rsp + 0x70]
mov qword [rbp + 0x10], rax
mov rax, qword [rsp + 0x68]
mov qword [rbp + 8], rax
mov rax, qword [rsp + 0x40]
test rax, rax
je 0x402e3a
jmp 0x402e32
sub dword [rax + 0x10], 1
movzx eax, byte [rax + 0x14]
mov byte [rcx], al
mov rsi, qword [rsp + 0x68]
mov rax, qword [rsp + 0x40]
jmp 0x402f40
lea rax, [rbp + 0x10]
mov qword [rbp + 8], 0
mov byte [rbp + 0x10], 0
mov qword [rbp], rax
jmp 0x402e3a
mov rax, qword [rsp + 0x70]
mov rdx, qword [rsp + 0x78]
mov qword [rbp + 0x10], rax
mov qword [rbp + 0x18], rdx
jmp 0x4030a2
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_emplace_back_aux_std::pair_int_char__
mov rax, qword [rsp + 0x48]
jmp 0x402cf6
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x40]
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_emplace_back_aux_std::pair_int_char__
mov rax, qword [rsp + 0x48]
mov rdx, qword [rsp + 0x50]
jmp 0x402ccd
mov ecx, 0x47
mov edx, 0x52
mov esi, ebx
call sym.alternate_abi:cxx11_
jmp 0x402e3a
mov ecx, 0x56
mov edx, 0x59
mov esi, r12d
mov rdi, rbp
call sym.alternate_abi:cxx11_
jmp 0x402e3a
mov ecx, 0x4f
mov edx, 0x42
mov esi, r13d
mov rdi, rbp
call sym.alternate_abi:cxx11_
jmp 0x402e3a
mov ecx, str.std::__cxx11::string_solve_int__int__int__int__int__int__int_
mov edx, 0x62
mov esi, str.sorted_code_control_msg555_msg555_1_1_B.cpp
mov edi, str.A_1_.first____0
call sym.imp.__assert_fail
mov ecx, str.std::__cxx11::string_solve_int__int__int__int__int__int__int_
mov edx, 0x63
mov esi, str.sorted_code_control_msg555_msg555_1_1_B.cpp
mov edi, str.A_2_.first____0
call sym.imp.__assert_fail
call sym.imp.__stack_chk_fail
mov rdi, qword [rsp + 0x60]
lea rdx, [rsp + 0x70]
mov rbx, rax
cmp rdi, rdx
je 0x4031d3
call sym.operatordelete
mov rdi, qword [rsp + 0x40]
test rdi, rdi
je 0x4031e2
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rbx, rax
jmp 0x4031d3
nop
mov eax, esi
ret
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x38
test rsi, rsi
mov qword [rsp + 0x28], rsi
je 0x4033b5
mov rbp, rdi
mov rax, rsi
mov rax, qword [rax + 0x18]
test rax, rax
mov qword [rsp + 8], rax
je 0x403392
mov rax, qword [rax + 0x18]
test rax, rax
mov qword [rsp + 0x10], rax
je 0x40336f
mov rax, qword [rax + 0x18]
test rax, rax
mov qword [rsp + 0x18], rax
je 0x40334c
mov rax, qword [rax + 0x18]
test rax, rax
mov qword [rsp + 0x20], rax
je 0x403329
mov r15, qword [rax + 0x18]
test r15, r15
je 0x403306
mov r13, qword [r15 + 0x18]
test r13, r13
je 0x4032ed
mov r12, qword [r13 + 0x18]
test r12, r12
je 0x4032d7
nop dword [rax]
mov r14, qword [r12 + 0x18]
test r14, r14
je 0x4032c0
nop word [rax + rax]
mov rsi, qword [r14 + 0x18]
mov rdi, rbp
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_erase
mov rbx, qword [r14 + 0x10]
mov rdi, r14
call sym.operatordelete
test rbx, rbx
mov r14, rbx
jne 0x4032a0
mov rbx, qword [r12 + 0x10]
mov rdi, r12
call sym.operatordelete
test rbx, rbx
je 0x4032d7
mov r12, rbx
jmp 0x403290
mov rbx, qword [r13 + 0x10]
mov rdi, r13
call sym.operatordelete
test rbx, rbx
je 0x4032ed
mov r13, rbx
jmp 0x403280
mov rbx, qword [r15 + 0x10]
mov rdi, r15
call sym.operatordelete
test rbx, rbx
je 0x403306
mov r15, rbx
jmp 0x403277
mov rax, qword [rsp + 0x20]
mov rbx, qword [rax + 0x10]
mov rdi, rax
call sym.operatordelete
test rbx, rbx
je 0x403329
mov qword [rsp + 0x20], rbx
mov rax, rbx
jmp 0x40326a
mov rax, qword [rsp + 0x18]
mov rbx, qword [rax + 0x10]
mov rdi, rax
call sym.operatordelete
test rbx, rbx
je 0x40334c
mov qword [rsp + 0x18], rbx
mov rax, rbx
jmp 0x403258
mov rax, qword [rsp + 0x10]
mov rbx, qword [rax + 0x10]
mov rdi, rax
call sym.operatordelete
test rbx, rbx
je 0x40336f
mov qword [rsp + 0x10], rbx
mov rax, rbx
jmp 0x403246
mov rax, qword [rsp + 8]
mov rbx, qword [rax + 0x10]
mov rdi, rax
call sym.operatordelete
test rbx, rbx
je 0x403392
mov qword [rsp + 8], rbx
mov rax, rbx
jmp 0x403234
mov rax, qword [rsp + 0x28]
mov rbx, qword [rax + 0x10]
mov rdi, rax
call sym.operatordelete
test rbx, rbx
je 0x4033b5
mov qword [rsp + 0x28], rbx
mov rax, rbx
jmp 0x403222
add rsp, 0x38
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
nop
push r15
push r14
push r13
push r12
mov r13, rdi
push rbp
push rbx
mov rbp, rcx
mov edi, 0x28
mov rbx, rsi
sub rsp, 0x18
call sym.operatornew
mov r14, rax
mov rax, qword [rbp]
lea rcx, [r13 + 8]
cmp rcx, rbx
movzx edx, byte [rax]
mov dword [r14 + 0x24], 0
mov byte [r14 + 0x20], dl
je 0x403518
movzx ebp, byte [rbx + 0x20]
mov r15, rbx
cmp dl, bpl
jge 0x4034b0
mov rbp, qword [r13 + 0x18]
cmp rbp, rbx
je 0x403600
mov rdi, rbx
mov qword [rsp + 8], rcx
mov byte [rsp + 7], dl
call sym.std::_Rb_tree_decrement
movzx edx, byte [rsp + 7]
mov rcx, qword [rsp + 8]
cmp dl, byte [rax + 0x20]
jle 0x403570
cmp qword [rax + 0x18], 0
cmove r15, rax
mov eax, 0
cmovne rax, rbx
cmp rcx, r15
je 0x4035f0
test rax, rax
jne 0x4035f0
movzx ebp, byte [r15 + 0x20]
xor edi, edi
cmp dl, bpl
setl dil
mov rdx, r15
mov rsi, r14
call sym.std::_Rb_tree_insert_and_rebalance
add qword [r13 + 0x28], 1
add rsp, 0x18
mov rax, r14
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
jle 0x4034f7
cmp qword [r13 + 0x20], rbx
je 0x403479
mov rdi, rbx
mov qword [rsp + 8], rcx
mov byte [rsp + 7], dl
call sym.std::_Rb_tree_increment
movzx edx, byte [rsp + 7]
mov rcx, qword [rsp + 8]
cmp dl, byte [rax + 0x20]
jge 0x403610
cmp qword [rbx + 0x18], 0
je 0x40347e
mov r15, rax
jmp 0x403467
mov r15, rbp
nop
test r15, r15
jne 0x403560
xor ebx, ebx
mov rdi, r14
call sym.operatordelete
add rsp, 0x18
mov rax, rbx
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
cmp qword [r13 + 0x28], 0
je 0x403529
mov r15, qword [r13 + 0x20]
cmp dl, byte [r15 + 0x20]
jg 0x403560
mov rbp, qword [r13 + 0x10]
test rbp, rbp
jne 0x403550
jmp 0x403670
nop word [rax + rax]
mov rax, qword [rbp + 0x10]
test rax, rax
je 0x403650
mov rbp, rax
movzx esi, byte [rbp + 0x20]
cmp dl, sil
jl 0x403540
mov rax, qword [rbp + 0x18]
jmp 0x403544
nop
xor eax, eax
jmp 0x403467
nop word [rax + rax]
mov rbx, qword [r13 + 0x10]
test rbx, rbx
jne 0x40358c
jmp 0x4035b6
nop dword [rax + rax]
mov rax, qword [rbx + 0x10]
test rax, rax
je 0x4035a0
mov rbx, rax
movzx esi, byte [rbx + 0x20]
cmp dl, sil
jl 0x403580
mov rax, qword [rbx + 0x18]
jmp 0x403584
nop dword [rax + rax]
cmp dl, sil
mov r15, rbx
jl 0x4035c0
cmp dl, sil
jle 0x4034f7
jmp 0x4034f0
mov rbx, rcx
nop dword [rax]
cmp rbp, rbx
je 0x4034eb
mov rdi, rbx
mov qword [rsp + 8], rcx
mov byte [rsp + 7], dl
mov r15, rbx
call sym.std::_Rb_tree_decrement
mov rcx, qword [rsp + 8]
movzx esi, byte [rax + 0x20]
mov rbx, rax
movzx edx, byte [rsp + 7]
jmp 0x4035a8
mov edi, 1
jmp 0x403487
nop word [rax + rax]
mov rax, rbx
jmp 0x403467
nop dword [rax + rax]
mov r12, qword [r13 + 0x10]
test r12, r12
jne 0x40362d
jmp 0x4036a4
nop
mov rax, qword [r12 + 0x10]
test rax, rax
je 0x403640
mov r12, rax
movzx esi, byte [r12 + 0x20]
cmp dl, sil
jl 0x403620
mov rax, qword [r12 + 0x18]
jmp 0x403625
nop
cmp dl, sil
mov r15, r12
jl 0x4036b0
mov rbx, r12
jmp 0x4035a8
cmp dl, sil
mov r15, rbp
jl 0x403673
cmp dl, sil
mov rbx, rbp
jle 0x4034f7
jmp 0x4034f0
nop dword [rax]
mov rbp, rcx
cmp qword [r13 + 0x18], rbp
je 0x4034eb
mov rdi, rbp
mov qword [rsp + 8], rcx
mov byte [rsp + 7], dl
mov r15, rbp
call sym.std::_Rb_tree_decrement
mov rcx, qword [rsp + 8]
movzx esi, byte [rax + 0x20]
mov rbp, rax
movzx edx, byte [rsp + 7]
jmp 0x403658
mov r12, rcx
nop word [rax + rax]
cmp qword [r13 + 0x18], r12
je 0x4036e0
mov rdi, r12
mov qword [rsp + 8], rcx
mov byte [rsp + 7], dl
mov r15, r12
call sym.std::_Rb_tree_decrement
mov rcx, qword [rsp + 8]
movzx esi, byte [rax + 0x20]
mov r12, rax
movzx edx, byte [rsp + 7]
jmp 0x403648
mov r15, r12
jmp 0x4034f0
nop dword [rax + rax]
push r14
push r13
mov r14, rsi
push r12
push rbp
mov rbp, rdi
push rbx
mov r8, qword [rbp + 8]
mov rdi, qword [rdi]
mov rdx, r8
sub rdx, rdi
mov rax, rdx
sar rax, 3
test rax, rax
je 0x4037b0
lea rcx, [rax + rax]
cmp rax, rcx
jbe 0x4037ba
mov rbx, -8
mov rdi, rbx
call sym.operatornew
mov r8, qword [rbp + 8]
mov rdi, qword [rbp]
lea r12, [rax + 8]
mov r13, rax
add rbx, rax
mov rdx, r8
sub rdx, rdi
add rdx, r13
je 0x40375a
mov rax, qword [r14]
mov qword [rdx], rax
cmp r8, rdi
je 0x403790
mov rdx, rdi
mov rcx, r13
nop dword [rax]
test rcx, rcx
je 0x403773
mov rsi, qword [rdx]
mov qword [rcx], rsi
add rdx, 8
add rcx, 8
cmp rdx, r8
jne 0x403768
lea rax, [rdi + 8]
sub rdx, rax
shr rdx, 3
lea r12, [r13 + rdx*8 + 0x10]
test rdi, rdi
je 0x40379a
call sym.operatordelete
mov qword [rbp], r13
mov qword [rbp + 8], r12
mov qword [rbp + 0x10], rbx
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop
mov ebx, 8
jmp 0x40372f
movabs rsi, 0x1fffffffffffffff
cmp rcx, rsi
ja 0x403728
test rcx, rcx
jne 0x4037e2
mov r12d, 8
xor ebx, ebx
xor r13d, r13d
jmp 0x40374f
shl rax, 4
mov rbx, rax
jmp 0x40372f
nop
push r15
lea r15, [rdi + 8]
push r14
push r13
push r12
mov r14, rdi
push rbp
push rbx
mov rbp, rsi
sub rsp, 0x18
cmp rsi, r15
je 0x4038c8
movzx r13d, byte [rdx]
cmp r13b, byte [rsi + 0x20]
jge 0x403868
mov r12, qword [rdi + 0x18]
cmp r12, rsi
mov rax, r12
mov rdx, r12
je 0x403854
mov rdi, rsi
call sym.std::_Rb_tree_decrement
cmp r13b, byte [rax + 0x20]
mov rdx, rax
jle 0x403928
cmp qword [rax + 0x18], 0
mov ebx, 0
mov rax, rbx
cmovne rax, rbp
cmovne rdx, rbp
add rsp, 0x18
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax + rax]
jle 0x4038b0
mov rdx, qword [rdi + 0x20]
cmp rdx, rsi
je 0x4039a0
mov rdi, rsi
call sym.std::_Rb_tree_increment
cmp r13b, byte [rax + 0x20]
mov rdx, rax
jge 0x4039b0
cmp qword [rbp + 0x18], 0
mov ebx, 0
mov rax, rbx
cmovne rax, rdx
cmove rdx, rbp
add rsp, 0x18
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
add rsp, 0x18
mov rax, rsi
xor edx, edx
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
cmp qword [rdi + 0x28], 0
je 0x4038db
mov rsi, qword [rdi + 0x20]
movzx eax, byte [rdx]
cmp byte [rsi + 0x20], al
jl 0x403910
mov rbx, qword [r14 + 0x10]
test rbx, rbx
je 0x403a20
movzx esi, byte [rdx]
jmp 0x403900
nop dword [rax]
mov rax, qword [rbx + 0x10]
test rax, rax
je 0x403a00
mov rbx, rax
movzx ecx, byte [rbx + 0x20]
cmp cl, sil
jg 0x4038f0
mov rax, qword [rbx + 0x18]
jmp 0x4038f4
nop
add rsp, 0x18
xor eax, eax
mov rdx, rsi
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
mov rbx, qword [r14 + 0x10]
test rbx, rbx
jne 0x403944
jmp 0x403978
nop dword [rax + rax]
mov rax, qword [rbx + 0x10]
test rax, rax
je 0x403958
mov rbx, rax
movzx edx, byte [rbx + 0x20]
cmp r13b, dl
jl 0x403938
mov rax, qword [rbx + 0x18]
jmp 0x40393c
nop dword [rax + rax]
cmp r13b, dl
mov rcx, rbx
jl 0x403980
xor eax, eax
cmp r13b, dl
cmovle rcx, rax
cmovle rax, rbx
mov r12, rcx
mov rdx, r12
jmp 0x403854
mov rbx, r15
nop dword [rax + rax]
cmp r12, rbx
je 0x403a74
mov rdi, rbx
call sym.std::_Rb_tree_decrement
mov rcx, rbx
movzx edx, byte [rax + 0x20]
mov rbx, rax
jmp 0x403960
nop dword [rax]
xor eax, eax
jmp 0x403854
nop word [rax + rax]
mov rbx, qword [r14 + 0x10]
test rbx, rbx
jne 0x4039cc
jmp 0x403a4d
nop
mov rax, qword [rbx + 0x10]
test rax, rax
je 0x4039e0
mov rbx, rax
movzx ecx, byte [rbx + 0x20]
cmp r13b, cl
jl 0x4039c0
mov rax, qword [rbx + 0x18]
jmp 0x4039c4
nop dword [rax + rax]
cmp r13b, cl
mov rdx, rbx
jl 0x403a50
xor eax, eax
cmp r13b, cl
cmovle rdx, rax
cmovle rax, rbx
jmp 0x403854
nop word [rax + rax]
cmp cl, sil
mov rbp, rbx
jg 0x403a23
xor eax, eax
cmp cl, sil
cmovge rbp, rax
cmovge rax, rbx
mov rdx, rbp
jmp 0x403854
nop dword [rax]
mov rbx, rbp
mov rbp, qword [r14 + 0x18]
mov qword [rsp + 8], rdx
cmp rbp, rbx
je 0x403a7b
mov rdi, rbx
mov rbp, rbx
call sym.std::_Rb_tree_decrement
mov rdx, qword [rsp + 8]
movzx ecx, byte [rax + 0x20]
mov rbx, rax
movzx esi, byte [rdx]
jmp 0x403a08
mov rbx, r15
mov rdx, qword [r14 + 0x18]
cmp rdx, rbx
je 0x4039a0
mov rdi, rbx
call sym.std::_Rb_tree_decrement
mov rdx, rbx
movzx ecx, byte [rax + 0x20]
mov rbx, rax
jmp 0x4039e8
xor eax, eax
jmp 0x403970
xor eax, eax
jmp 0x403a15
nop
mov rdx, qword [rsi]
mov rax, qword [rdi]
cmp rax, rdx
je 0x403b41
lea r9, [rax - 8]
cmp r9, rdx
je 0x403b41
push rbx
lea r10, [rax - 0x10]
jmp 0x403ac8
nop dword [rax + rax]
jg 0x403ab0
cmp byte [rax + 4], r11b
jg 0x403aef
mov byte [rax - 4], r11b
sub r10, 8
sub r9, 8
cmp qword [rsi], rbx
mov dword [rax - 8], r8d
je 0x403b40
mov rax, qword [rdi]
mov r8d, dword [r10]
cmp r8d, dword [rax - 8]
mov rbx, r10
movzx r11d, byte [r9 - 4]
jl 0x403b00
jg 0x403ae1
cmp r11b, byte [rax - 4]
jl 0x403b00
mov rax, r9
nop dword [rax]
mov edx, dword [rax]
cmp r8d, edx
jge 0x403aa8
mov dword [rax - 8], edx
movzx edx, byte [rax + 4]
add rax, 8
mov byte [rax - 0xc], dl
jmp 0x403ae8
nop
mov rdx, rax
sub rdx, r9
sar rdx, 3
test rdx, rdx
jle 0x403ab0
mov rax, r9
nop word [rax + rax]
mov ecx, dword [rax]
add rax, 8
mov dword [rax - 0x10], ecx
movzx ecx, byte [rax - 4]
mov byte [rax - 0xc], cl
sub rdx, 1
jne 0x403b18
mov rax, qword [rdi]
jmp 0x403ab0
nop word cs:[rax + rax]
pop rbx
ret
nop word cs:[rax + rax]
nop dword [rax]
mov rax, qword [rdx]
mov rdx, qword [rsi]
mov esi, dword [rax - 8]
mov r8d, dword [rdx - 8]
cmp esi, r8d
jg 0x403b6f
jl 0x403ba0
movzx r10d, byte [rax - 4]
cmp byte [rdx - 4], r10b
jge 0x403ba0
mov rcx, qword [rcx]
mov r9d, dword [rcx - 8]
cmp esi, r9d
jge 0x403bd0
mov rdx, qword [rdi]
mov ecx, dword [rdx - 8]
mov dword [rdx - 8], esi
movzx esi, byte [rax - 4]
mov dword [rax - 8], ecx
movzx ecx, byte [rdx - 4]
mov byte [rdx - 4], sil
mov byte [rax - 4], cl
ret
nop word [rax + rax]
mov rcx, qword [rcx]
mov r9d, dword [rcx - 8]
cmp r8d, r9d
jge 0x403c10
mov rax, qword [rdi]
mov ecx, dword [rax - 8]
mov dword [rax - 8], r8d
movzx esi, byte [rdx - 4]
mov dword [rdx - 8], ecx
movzx ecx, byte [rax - 4]
mov byte [rax - 4], sil
mov byte [rdx - 4], cl
ret
nop dword [rax]
jg 0x403bdd
movzx r11d, byte [rcx - 4]
cmp byte [rax - 4], r11b
jl 0x403b7b
cmp r8d, r9d
jl 0x403bed
jg 0x403bac
movzx eax, byte [rcx - 4]
cmp byte [rdx - 4], al
jge 0x403bac
mov rax, qword [rdi]
mov edx, dword [rax - 8]
mov dword [rax - 8], r9d
movzx esi, byte [rcx - 4]
mov dword [rcx - 8], edx
movzx edx, byte [rax - 4]
mov byte [rax - 4], sil
mov byte [rcx - 4], dl
ret
nop word [rax + rax]
jg 0x403c1d
movzx r11d, byte [rcx - 4]
cmp byte [rdx - 4], r11b
jl 0x403bac
cmp esi, r9d
jl 0x403bed
jg 0x403b7b
movzx edx, byte [rcx - 4]
cmp byte [rax - 4], dl
jl 0x403bed
jmp 0x403b7b
nop word cs:[rax + rax]
lea rax, [rdx - 1]
push r15
push r14
push r13
push r12
mov r10, rsi
mov r14, rax
push rbp
push rbx
shr r14, 0x3f
add r14, rax
mov qword [rsp - 8], rcx
sar r14, 1
cmp rsi, r14
jl 0x403ca5
jmp 0x403db4
nop dword [rax]
movzx r15d, byte [r11 - 4]
cmp r15b, byte [rbp - 4]
cmovle r11, rbp
cmovle r8, rcx
cmovle ebx, r13d
cmovle rax, r12
shl r10, 3
sub r9, r10
cmp rax, r14
mov dword [r9 - 8], ebx
movzx ecx, byte [r11 - 4]
mov byte [r9 - 4], cl
jge 0x403cf0
mov r10, rax
lea rcx, [r10 + 1]
mov r9, qword [rdi]
lea r12, [rcx + rcx]
shl rcx, 4
neg rcx
lea rax, [r12 - 1]
lea rbp, [r9 + rcx]
lea r8, [rax*8]
mov r13d, dword [rbp - 8]
neg r8
lea r11, [r9 + r8]
mov ebx, dword [r11 - 8]
cmp ebx, r13d
jg 0x403c89
jge 0x403c70
mov r11, rbp
mov r8, rcx
mov ebx, r13d
mov rax, r12
jmp 0x403c89
nop dword [rax]
test dl, 1
jne 0x403d0f
sub rdx, 2
mov rcx, rdx
shr rcx, 0x3f
add rdx, rcx
sar rdx, 1
cmp rdx, rax
je 0x403de8
mov rcx, qword [rsp - 8]
mov r9, qword [rdi]
mov r10d, ecx
shl rcx, 0x18
shr rcx, 0x38
cmp rax, rsi
jle 0x403de0
lea rdx, [rax - 1]
mov rdi, rdx
shr rdi, 0x3f
add rdi, rdx
mov rdx, rax
sar rdi, 1
nop
lea rax, [rdi*8]
mov r8, r9
sub r8, rax
mov r11d, dword [r8 - 8]
cmp r10d, r11d
jg 0x403d80
jl 0x403d5f
cmp cl, byte [r8 - 4]
jg 0x403d80
mov rax, rdx
shl rax, 3
sub r9, rax
mov r8, r9
mov dword [r8 - 8], r10d
mov byte [r8 - 4], cl
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
shl rdx, 3
mov rax, r9
sub rax, rdx
mov dword [rax - 8], r11d
movzx edx, byte [r8 - 4]
mov byte [rax - 4], dl
lea rax, [rdi - 1]
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
mov rdx, rdi
sar rax, 1
cmp rsi, rdi
jge 0x403d6c
mov rdi, rax
jmp 0x403d40
lea r8, [rsi*8]
mov rax, rsi
neg r8
test dl, 1
je 0x403cf5
mov r9, qword [rdi]
mov r10d, ecx
shl rcx, 0x18
shr rcx, 0x38
nop dword [rax]
add r8, r9
jmp 0x403d6c
nop dword [rax]
lea rax, [rax + rax + 1]
mov rdx, qword [rdi]
lea rcx, [rax*8]
add r8, rdx
neg rcx
lea r9, [rdx + rcx]
mov edx, dword [r9 - 8]
mov dword [r8 - 8], edx
movzx edx, byte [r9 - 4]
mov byte [r8 - 4], dl
mov r8, rcx
jmp 0x403d0f
nop dword [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x200fb6]
push rbp
lea rbp, [rip + 0x200fbe]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x403e76
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x403e60
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
jae 0x403f11
movsxd rbx, dword [rdi + 0x73]
je 0x403f1f
imul ebp, dword [rsi + 0x67], 0x75733a3a
jae 0x403f2b
jb str.FAIL_CHECK
and byte [rbx + 0x48], r8b
add byte [r14 + 0x41], al
and byte [rbx + 0x48], r8b
and byte [r10], sil
add byte [rsi + 0x41], al
and byte [rbx + 0x48], r8b
and byte [r11], sil
add byte [rcx + 0x5b], al
pop r11
xor dword [rbp + 0x2e], ebx
imul si, word [rdx + 0x73], 0x2074
cmp eax, 0x30203d
pop r11
xor bl, byte [rbp + 0x2e]
imul si, word [rdx + 0x73], 0x2074
cmp eax, 0x30203d
push r8
push r11
push rbx
add byte [r11 + 0x61], r8b
jae 0x403f72
and byte [rbx], ah
add byte [rdx], bh
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x5f203a73], ah
and eax, 0x5f203a73
pop rdi
jo 0x403f8f
jae 0x403f42
sub byte [rdi + 0x68], dh
imul esp, dword [rbx + 0x68], 0x20736920
and eax, 0x2029757a
and byte ds:[rax + rbp*2 + 0x69], dh
jae 0x403f65
jae 0x403fa4
jp 0x403fa2
sub byte [rcx], ch
and byte [rax], ch
ja 0x403fab
imul esp, dword [rbx + 0x68], 0x20736920
and eax, 0x29757a
add byte [rdx + 0x61], ah
jae 0x403fbd
movsxd rbx, dword [rdi + 0x73]
je 0x403fcb
imul ebp, dword [rsi + 0x67], 0x4d5f3a3a
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x403fda
jb 0x403fdd
movsxd rsi, dword [rax + 0x6e]
jne 0x403fda
insb byte [rdi], dx
and byte [rsi + 0x6f], ch
je 0x403f94
jbe 0x403fd7
insb byte [rdi], dx
imul esp, dword [rax + rax], 0
add byte [rbx + 0x6f], dh
jae 0x403ff1
jb 0x403ff8
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x404003
outsd dx, dword [rsi]
insb byte [rdi], dx
insd dword [rdi], dx
jae obj.std::piecewise_construct
xor eax, 0x6d2f3535
jae 0x404005
xor eax, 0x315f3535
pop rdi
xor dword [rdi], ebp
movsxd rsi, dword cs:[rax + 0x70]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dh
jae 0x404036
cmp bh, byte fs:[rdx]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
cmp bh, byte [rdx]
jae 0x404044
jb 0x40403b
outsb dx, byte [rsi]
and byte [ebx + 0x6f], dh
insb byte [rdi], dx
jbe 0x40403f
sub byte [rcx + 0x6e], ch
je 0x40400b
and byte [rcx + 0x6e], ch
je 0x404010
and byte [rcx + 0x6e], ch
je 0x404015
and byte [rcx + 0x6e], ch
je 0x40401a
and byte [rcx + 0x6e], ch
je 0x40401f
and byte [rcx + 0x6e], ch
je 0x404024
and byte [rcx + 0x6e], ch
je 0x404026
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
sar bh, 1
push rax
add byte [rax], al
add byte [rax], al
sar bh, cl
dec dword [rax + 5]
add byte [rax], al
inc dword [rax + 0x70000005]
inc eax
add byte [rax], al
add byte [rax - 0x2b], dh
call qword [rax + 1]
add byte [rax], al
movabs al, byte [0xc0000001a0ffffd6]
js 0x404045
add byte [rax], al
jmp 0x4914049
add byte [rax], al
mov al, 0xeb
call rax
add al, 0
add al, dh
int1
lcall [rax]
add dword [rax], eax
add byte [rax], al
call 0xffffffffd0404066
cmp byte [rdx], al
add byte [rax], al
idiv bh
jmp qword [rax - 0xffffffe]
idiv edi
jmp rax
add al, byte [rax]
add byte [rax - 0x2f000006], al
add eax, dword [rax]
add byte [rax - 5], dl
push rax
add eax, dword [rax]
add byte [rax - 4], al
dec dword [rax]
add al, 0
add byte [rax], ah
lcall [rax - 0x6ffffffb]
jmp rax
add eax, 0
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4040c7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test al, 0xd3
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4040f7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or bh, cl
push rax
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], r8b
add al, dl
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x404151
add esp, dword [rax + 0x3004011]
sbb ecx, dword [rdi + rax]
or byte [rax + 0x4c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sbb ah, dl
ljmp [rdx]
add dword [rax], eax
add byte [rsp + rdi*8], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bb], es
cmp byte [rbx + 0x500e4707], al
add ch, bh
or cl, byte [rsi]
cmp byte [rsi + rcx + 0x30], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax + rax], al
add byte [rax + rax], dh
add al, bh
call qword [rax + 0xb040000]
add byte [rdx + 0xe], al
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e44
rol byte [rcx], 1
add al, al
or cl, byte [rsi]
xor byte [rcx + 0xe], al
sub byte [rcx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], al
add byte [rax], r8b
add byte [rcx + rax], dl
add byte [rax], al
adc al, dh
inc esp
add dword [rax], eax
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx + 0x700e4407], al
add ebp, dword [rbx + 0x41380e01]
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte fs:[rax], al
add byte [rcx + rax], ah
add byte [rax + 0x18fffff1], dl
add eax, dword [rax]
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x500e4f07], al
add ch, byte [rdi + 0x44380e0a]
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax + 0xb], cl
add dl, byte [rbx + 0xa]
cmp byte [rsi + rcx + 0x30], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax + 0xb], cl
add byte [rax], al
add byte [rax], al
cmp al, 0
add byte [rax], al
int3
add dword [rax], eax
add byte [rax - 0xc], cl
inc byte [rax]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e44
add ch, byte [rcx + 0x41280e0a]
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdx + 0xb], al
add byte [rax], al
add byte [rax + rax + 0x20c0000], dl
add byte [rax], al
or ch, dh
dec dword [rdi + 2]
adc byte [rdi + 0x180e4602], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x500e4707], al
add dl, byte [rax + 0xa]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rsi + 0xb], al
jge 0x404337
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
or r9b, byte [rsi]
cmp byte [rsi + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbp + 0xb], al
add cl, byte [rdx + rcx + 0xe]
cmp byte [rsi + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbp + 0xb], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
add byte [rdx + rax], cl
add byte [rax - 0x28], al
lcall [rsi + 0x400000d]
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx - 0x6ff1abf9], al
add eax, dword [rbx]
cmp cl, byte [rcx]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add al, byte [rax]
add byte [rax - 0x3c00000a], ch
add byte [rax], al
add byte [rax], al
pop rbp
adc byte [rbx - 0x3c5bfdfe], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
sbb al, 3
add byte [rax], al
pop rax
idiv edi
jmp rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rbx + rax], dh
add byte [rax], al
xor al, bh
fild dword [rcx]
add byte [rax], al
add byte [rsi + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b9], es
cmp byte [rbx + 0x1210307], al
or cl, byte [rsi]
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdx + 0xb], al
add byte [rax], al
jl 0x404452
add byte [rax], al
jl 0x404459
add byte [rax], al
or ch, ah
inc dword [rdx + rax]
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x6ff1bbf9], al
add dword [rdx], eax
push rsp
cwde
add dword [rdi + 0xe], esi
movabs al, byte [0x900e4c01980e5a01]
add dword [rdx], eax
loope 0x4044a5
cwde
add dword [rbx + 0xe], ecx
movabs al, byte [0x900e4201980e5801]
add dword [rdx + 0xe], edx
cwde
add dword [rcx + 0xe], esp
movabs al, byte [0x900e4101980e4f01]
add dword [rsi + 0xa], edx
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rbx + rax - 0x19280000], ah
add byte [rax], al
add al, 0x5a
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx - 0x4ff1b0f9], al
add al, byte [rbx]
lodsb al, byte [rsi]
add dword [rsi], ecx
mov eax, 0xc00e4c02
add dl, byte [rax + 0xe]
mov eax, 0xb00e4202
add al, byte [rdx]
movsxd rcx, dword [rsi]
mov eax, 0xc00e4202
add dl, byte [rax + 0xe]
mov eax, 0xb00e4102
add al, byte [rdx]
or r9b, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
sbb al, 4
add byte [rax], al
mov al, 0xcc
push qword [rcx]
add al, byte [rax]
add byte [rax + rdi*2], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4802], al
mov es, word [rbx]
lea eax, [rsp + rcx*4]
add eax, 0x91030683
add dword [rsi], ebp
adc byte [rdx + 0x2e], dl
add byte [rdx], al
or cl, byte [rdi + r8]
or byte [rcx + 0xb], al
add byte [rax], al
adc al, 0
add byte [rax], al
lodsb al, byte [rsi]
add al, 0
add byte [rax + 0x26ffffce], bh
add byte [rax], al
add byte [rax], al
adc byte [rbp + 0xe], bl
or byte [rax], al
add byte [rax], r8b
add ah, al
add al, 0
add byte [rax + 0x65fffff8], al
add byte [rax], al
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x4045da
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
or al, 5
add byte [rax], al
test al, 0xf8
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or edi, dword [rcx + 0x2922401]
add byte [rbp + 0x502], ah
inc dword [rcx]
xor al, 0x43
ret 1
add byte [rdi + 0x89f0503], ah
add byte [rax + 0xa8f0504], dl
add byte [rbp + rax + 0x9c70196], dh
add dl, bl
add eax, 0x79c0000
add eax, 0xda00089f
add eax, 0xd00009bf
or byte [rip + 0xa8a0000], al
add eax, 0xff0009bf
inc dword [rcx]
adc ebx, eax
add eax, ebp
retf 0x19
cli
sbb dword [rip + 0x1a930000], eax
mov eax, dword [rcx]
retf 0x19
inc dword [rcx]
sbb ah, ch
add ebp, edi
add edi, dword [rdx + 0x881000c]
movabs eax, dword [0xba1e0ade000c8c01]
or al, 0
xchg eax, edi
or esp, dword [rbx - 0xffffff]
inc dword [rcx]
sbb ah, byte [rdi]
add eax, 0x84630000
add dword [rbx + 0x2900004], ecx
outsd dx, dword [rsi]
add byte [rax], al
test eax, 0x48b6203
add byte [rdi + 0x504], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rax + rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 4], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x404e51
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rsi + rdi + 0x40], dl
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x40aeb2
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 0x4006], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rip]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add al, ah
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx + 0x400b], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte es:[rax], al
add byte [rax], al
add byte [rax], al
adc byte ss:[rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], r8b
add byte [rax], al
add byte [rax], al
push rsi
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40505a
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4010], al
add byte [rax], al
add byte [rsi + 0x4010], dl
add byte [rax], al
add byte [rsi + 0x4010], ah
add byte [rax], al
add byte [rsi + 0x4010], dh
add byte [rax], al
add dh, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x10, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword es:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword ss:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], r8d
add byte [rax], al
add byte [rax], al
push rsi
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc word [rax], ax
add byte [rax], al
add byte [rax], al
jbe 0x4050db
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4011], al
add byte [rax], al
add byte [rsi + 0x4011], dl
add byte [rax], al
add byte [rsi + 0x4011], ah
add byte [rax], al
add byte [rsi + 0x4011], dh
add byte [rax], al
add dh, al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
out 0x11, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x405190
je 0x405199
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x4051a7
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x4051a4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 0x4006], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rdx + 0x400b], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add al, ah
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or dword [rax], eax
mov al, 0xc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax], dl
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
loopne 0x405271
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x4011f000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
lldt word [rsi + rdi + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
movabs al, byte [0x403e]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x4040], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40b38a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x604df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax], cl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], ah
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4014], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, ah
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], ah
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x54], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x604df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x15], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40b522
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x29], ah
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], ch
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sar byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2000001], dl
add byte [rsi], cl
add byte [rax + 0x14], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax + 0x10000], bh
sbb eax, dword [rax]
jno 0x4055b6
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
add dword [rax], eax
add byte [rcx], al
add byte [rdx], dl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
add dword [rax], eax
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
add dword [rax], eax
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add dword [rax], eax
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add al, byte [rax]
add byte [rax], al
add byte [rax + rax], dl
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add al, byte [rax]
add byte [rax], al
add byte [rax + rax], dl
call 0x40b672
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add al, byte [rax]
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x20000006], dh
add byte [rdx], bl
add byte [rax], cl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add al, byte [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ah
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx + 2], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x402b], dh
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x12000002
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 2], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x403e], dl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000006], bh
add byte [rsi], cl
add byte [rax + 0x14], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000002], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x120000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x15], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add bh, ah
add al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
add al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 4], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 3], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rdx], eax
add byte [rax], al
adc al, byte [rax]
lldt word [rsi + rdi + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x12000003
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
add eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x52], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add dl, bh
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 4], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x40585e
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x403a], al
add byte [rax], al
add bl, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add eax, 0x120000
add al, al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sahf
or eax, 0
add byte [rax], al
add rax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, 0x220000
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
loopne 0x4058d2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax], ch
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
adc byte [rax], al
movabs al, byte [0x40000000000403e]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 6], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x4016], ah
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 6
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
or byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
add byte [rax], al
and al, byte [rax]
add al, dl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop qword [rdi]
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
sbb byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x11000007], bl
add byte [rbx], bl
add byte [rax + 0x53], ah
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x11000007], dh
add bl, byte [rdx]
add byte [rax], dl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000007], bh
add byte [rsi], cl
add byte [rax], ah
add byte ds:[rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], bh
add byte [rax], dl
add byte [rbx], bl
add byte [rax], bl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000008], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, dh
add byte ss:[rax], al
add byte [rax], al
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 9], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3b], dl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte ss:[rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rdi + 2], cl
add byte [rax], al
add byte [rdx + rcx + 0x120000], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rdx]
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
js 0x405b3e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dh
add byte ss:[rax], al
add byte [rax], al
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], al
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
sbb byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xc], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
movabs al, byte [0x4011]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x405bae
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx + 0x120000], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x2200000c
add byte [rsi], cl
add byte [rax + 0x3c], al
add byte [rax], al
add byte [rax], al
add bl, bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + rcx], bl
add byte [rdx], ah
add byte [rsi], cl
add al, dh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x405c27
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
xor dword [rdx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
loopne 0x405c49
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rcx], bh
add byte [rdx], ah
add byte [rsi], cl
add al, dl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x405cd8
je 0x405cdc
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x405c8e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x405d0c
jb 0x405d12
pop rdi
jne 0x405d1b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x405d15
je 0x405d11
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x405d31
jb 0x405d37
pop rdi
jne 0x405d40
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x405d43
jns 0x405d33
outsb dx, byte gs:[rsi]
je 0x405d4a
jns 0x405cda
jb 0x405d3e
insd dword [rdi], dx
pop rdi
jne 0x405d50
insd dword [rdi], dx
jns 0x405ce6
pop rdi
pop rdi
jb 0x405d4c
insd dword [rdi], dx
pop rdi
jne 0x405d5e
insd dword [rdi], dx
jns 0x405d53
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405d5e
jns 0x405d5e
outsb dx, byte gs:[rsi]
je 0x405d75
jns 0x405d05
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x405d5c
xor dword [rcx], edi
jo 0x405d7d
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x405d95
jb 0x405d98
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x405d5c
pop rdi
pop rdi
imul ebp, dword [rsi + 0x74], 0x6f736f72
jb 0x405dab
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
outsd dx, dword [rsi]
jo 0x405d86
push rbx
je 0x405d71
jb 0x405da8
jbe 0x405daa
jb 0x405dba
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405db9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405dd2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x405da9
jo 0x405dd8
imul esi, dword [rdx + 0x49], 0x53456369
je 0x405db6
jbe 0x405de7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x405e13
xor dword [rip + 0x6574495f], esi
jb 0x405e07
insb byte [rdi], dx
jae 0x405e1f
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x2e], ebx
imul esi, dword [rbx + 0x72], 0x33372e61
add byte [rdi + 0x5a], bl
pop rdx
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x31456969
cmp dword [rdi + 0x5f], ebx
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x405e76
pop rdi
pop r15
pop rdi
pop rdx
cmp dword [rcx + 0x6c], esp
je 0x405e71
jb 0x405e7c
je 0x405e76
xor eax, 0x31787863
xor dword [rcx + 0x63], ebp
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x405e6d
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405eda
jns 0x405eda
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405eeb
jns 0x405eeb
jae 0x405f02
jb 0x405f05
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x405ed3
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x5f006969
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x405f15
imul eax, dword [rax + 0x40], 0x42494c47
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x405f25
pop rdi
pop rdi
je 0x405f61
jb 0x405f6a
ja 0x405f5c
pop rdi
movsxd rsp, dword [rcx + 0x73]
je 0x405f7c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405f4b
xor al, 0x5f
pop rdi
je 0x405f86
jb 0x405f8f
ja 0x405f81
outsd dx, dword [rsi]
jne 0x405f99
pop rdi
outsd dx, dword [rsi]
pop di
jb 0x405f8c
outsb dx, byte [rsi]
pop rdi
insw word [rdi], dx
je 0x405f83
movsxd rdi, dword [r10 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rax]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x405fc4
jb 0x405fc7
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x405fb9
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x405fda
jae 0x405f6a
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x405fb1
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x405ff6
jb 0x405ffa
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x405fd5
movsxd rsi, dword [rcx + rdi*2 + 0x70]
movsxd rax, dword gs:[r13 + 0x31]
xor ebx, dword [rdi + 0x4d]
pop rdi
ja 0x406018
outsb dx, byte gs:[rsi]
pop rdi
imul ebp, dword [rsi + 0x69], 0x40764574
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x406007
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406046
movsxd rbx, dword [rdi + 0x73]
je 0x406054
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40604f
je 0x406064
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x40606e
push r10
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40605c
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40607c
movsxd rsp, dword [rbp + 0x72]
jb 0x40608d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x4060da
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4060af
cmp byte [rdi + 0x52], bl
pop rdi
je 0x4060f7
pop rdi
movsxd rsi, dword gs:[rdx + 0x65]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4060e2
push rbx
je 0x4060c6
cmp byte [rdi + 0x52], bl
pop rdi
je 0x40610e
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x40610d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x406124
js 0x40612a
je 0x406103
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x406106
pop rdi
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x406153
jb 0x40615a
push r11
je 0x40611b
jb 0x406152
jbe 0x406154
jb 0x406164
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406163
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40617c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x406153
jo 0x406182
imul esi, dword [rdx + 0x49], 0x53456369
je 0x406160
jbe 0x406191
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4061bc
xor dword [rip + 0x6574495f], esi
jb 0x4061b0
insb byte [rdi], dx
jae 0x4061c8
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor eax, 0x63656863
imul edx, dword [rdx + 0x4b], 0x4e
push rbx
je 0x4061ab
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4061ea
movsxd rbx, dword [rdi + 0x73]
je 0x4061f8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4061f3
je 0x406208
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul r13d, dword [r9 + 0x69], 0x696969
pop rdi
pop rdx
push rbx
je 0x4061e8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406227
movsxd rbx, dword [rdi + 0x73]
je 0x406235
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406230
je 0x406245
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rax], esi
pop rdi
pop r15
jb 0x40624c
jo 0x406255
movsxd rsp, dword [rbp + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x406242
pop rdi
push rdx
pop rdi
je 0x406282
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x406254
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x406278
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40626a
insb byte [rdi], dx
jae 0x4062ad
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
cmp byte [r15 + 0x4d], r11b
pop rdi
jb 0x4062ad
jae 0x4062b3
push r8
push rbx
je 0x406284
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4062cc
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x4062a5
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x4062fa
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x49], bl
pop r15
jae 0x406322
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
js 0x40632d
outsb dx, byte [rsi]
push rdx
push rbx
je 0x4062fd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40633c
movsxd rbx, dword [rdi + 0x73]
je 0x40634a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406345
je 0x40635a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul r12d, dword [r11 + 0x63], 0x54495f00
pop r15
jb 0x406366
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x40637b
pop rdi
jae 0x406391
jb 0x406394
add byte [rdi + 0x5a], bl
push rbx
je 0x40635f
pop rdi
push rdx
pop rdi
je 0x40639f
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x406371
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x406395
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x406387
insb byte [rdi], dx
jae 0x4063ca
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r14b, byte [r10]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4063d7
movsxd rsp, dword [rbp + 0x5f]
push 0x5f746e69
jne 0x4063e4
imul esi, dword [rcx + 0x75], 0x52494965
push r11
je 0x4063b3
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x406405
jb 0x406408
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x4063cf
je 0x406411
jo 0x40640a
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
push r11
je 0x4063e3
pop rdi
push rdx
pop rdi
je 0x40642b
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x4063fe
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x406445
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40644f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
jo 0x40643b
push rsp
pop rdi
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x406434
movsxd rbp, dword [rdi + 0x75]
je 0x406445
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x406486
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x40646c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4064ab
movsxd rbx, dword [rdi + 0x73]
je 0x4064b9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4064b4
je 0x4064c9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x4064c9
jo 0x4064af
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4064b5
pop rdi
pop rdi
outsd dx, dword [rsi]
jae 0x4064fe
jb 0x4064f1
insd dword [rdi], dx
pop rdi
imul ebp, dword [rsi + 0x73], 0x49747265
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4064ff
je 0x406514
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x4064df
xor esp, dword [rdx + 0x61]
jae 0x40651c
movsxd rbx, dword [rdi + 0x6f]
jae 0x40652c
jb 0x40651f
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x6c]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
cmp dword [rax], eax
pop rdi
pop rdi
jae 0x406554
pop rdi
jae 0x406558
jb 0x40655b
add byte [rdi + 0x5a], bl
push rbx
je 0x40651f
cmp dword [rdi + 0x52], ebx
pop rdi
je 0x406566
pop rdi
imul ebp, dword [rsi + 0x73], 0x5f747265
outsb dx, byte [rsi]
pop rdi
jb 0x406569
insb byte [rdi], dx
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x62]
push rax
push rbx
je 0x406541
cmp byte [rdi + 0x52], bl
pop rdi
je 0x406589
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x406588
push rbx
xor byte [rdi + 0x52], bl
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
xor eax, 0x73756c66
push 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x4065ca
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4065c2
jbe 0x4065f3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4065ca
jo 0x4065f9
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40661b
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x406633
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x406609
jo 0x406616
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x406601
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40663b
pop rdi
insd dword [rdi], dx
imul esp, dword fs:[rcx + 0x6e], 0x5f6f745f
imul si, word [rdx + 0x73], 0x4974
push rbx
je 0x40661b
jb 0x406652
jbe 0x406654
jb 0x406664
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406663
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40667c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x406653
jo 0x406682
imul esi, dword [rdx + 0x49], 0x53456369
je 0x406660
jbe 0x406691
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4066bc
xor dword [rip + 0x6574495f], esi
jb 0x4066b0
insb byte [rdi], dx
jae 0x4066c8
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4066a2
cmp dword [rdi + 0x5f], ebx
je 0x4066de
jb 0x4066e7
ja 0x4066d9
insb byte [rdi], dx
outsd dx, dword [rsi]
imul esp, dword [ebx + 0x5f], 0x6f727265
jb 0x4066d6
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4066d4
pop rdi
push rdx
pop rdi
je 0x406714
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4066e6
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40670a
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x4066fc
insb byte [rdi], dx
jae 0x40673f
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r15b, byte [r9]
pop rdi
pop r15
je 0x40673f
imul ebp, dword [rsi + 0x73], 0x5f747265
push 0x5f746e69
jne 0x40675c
imul esi, dword [rcx + 0x75], 0x6f705f65
jae 0x40673c
push rbx
je 0x40672c
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x406773
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40677d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x406759
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406798
movsxd rbx, dword [rdi + 0x73]
je 0x4067a6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4067a1
je 0x4067b6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
jo 0x4067c8
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4067ae
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4067ed
movsxd rbx, dword [rdi + 0x73]
je 0x4067fb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4067f6
je 0x40680b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rdx], esi
pop rdi
pop r15
movsxd rbp, dword [rdi + 0x6e]
jae 0x406824
jb 0x406827
movsxd rsi, dword [rbp + rax*2 + 0x6d]
movsxd rax, dword [rax + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4067fe
cmp byte [rdi + 0x52], bl
pop rdi
je 0x406846
pop rdi
imul ebp, dword [rsi + 0x63], 0x656d6572
outsb dx, byte [rsi]
je 0x406831
push rbx
je 0x406815
cmp byte [rdi + 0x52], bl
pop rdi
je 0x40685d
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x40685c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x406841
jbe 0x406872
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x406849
jo 0x406878
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40689a
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4068b2
push r11
xor dword [rdi + 0x45], ebx
jbe 0x406888
jo 0x406895
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x406886
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4068c5
movsxd rbx, dword [rdi + 0x73]
je 0x4068d3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4068ce
je 0x4068e3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jne 0x4068f9
je 0x4068ed
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x406907
add byte [rdi + 0x5f], bl
js 0x406924
pop rdi
jo 0x406914
jb 0x406924
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x40693a
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x406949
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40695c
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
xor esi, dword [rax + 0x75]
je 0x406942
movsxd rax, dword [rax + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
insd dword [rdi], dx
insd dword [rdi], dx
movsxd rsi, dword [rax + 0x79]
pop r15
xor ch, byte [rsi]
xor dword [rax + rax], esi
pop rdi
pop rdx
push rbx
je 0x406955
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x4069a1
pop rdi
push 0x49706165
push rbx
je 0x406967
jb 0x40699e
jbe 0x4069a0
jb 0x4069b0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4069af
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4069c8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40699f
jo 0x4069ce
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4069ac
jbe 0x4069dd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x406a0c
xor dword [rip + 0x6574495f], esi
jb 0x406a00
insb byte [rdi], dx
jae 0x406a18
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x4069f8
movsxd rsi, dword [rcx + rdi*2 + 0x70]
movsxd rax, dword gs:[r13 + 0x38]
outsd dx, dword fs:[rsi]
pop rdi
ja 0x406a3a
outsb dx, byte gs:[rsi]
movsxd r8, dword [r8]
insd dword [rdi], dx
imul ebp, dword [rsi], 0x534e5a5f
je 0x406a1a
pop rdi
push rdx
pop rdi
je 0x406a5a
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x406a2c
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x406a50
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x406a42
insb byte [rdi], dx
jae 0x406a85
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r14b, byte [r10]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x406a92
movsxd rsp, dword [rbp + 0x5f]
push 0x5f746e69
jne 0x406a9f
imul esi, dword [rcx + 0x75], 0x524a4965
push r11
je 0x406a6e
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x406ac0
jb 0x406ac3
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x406a8a
je 0x406acc
jo 0x406ac5
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
push r11
je 0x406a9e
pop rdi
push rdx
pop rdi
je 0x406ae6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x406ab9
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x406b00
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x406b0a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
jo 0x406af6
push rsp
pop rdi
add byte [rax], al
jae 0x406b27
insd dword [rdi], dx
je 0x406b12
add byte [rsi], ch
jae 0x406b2a
jb 0x406b2c
add byte [rsi], ch
jae 0x406b26
jae 0x406b34
jb 0x406b36
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x406b37
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x406b45
outsb dx, byte cs:[esi]
jne 0x406b13
jne 0x406b51
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x406b21
push 0x687361
jns 0x406b6a
jae 0x406b77
insd dword [rdi], dx
add byte [rsi], ch
jns 0x406b72
jae 0x406b7a
jb 0x406b08
outsb dx, byte cs:[esi]
jne 0x406b3b
jbe 0x406b74
jb 0x406b84
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x406b48
jbe 0x406b81
jb 0x406b91
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x406b8c
insb byte [rdi], dx
jns 0x406b9b
add byte [rsi], ch
jb 0x406b96
insb byte [rdi], dx
jo 0x406ba2
je 0x406b38
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x406b71
outsd dx, dword [esi]
je 0x406b47
je 0x406baf
js 0x406bc0
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x406bc5
je 0x406bbb
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x406bde
jo 0x406bf2
pop rdi
je 0x406be2
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x406bf0
jns 0x406b91
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x406c0c
jns 0x406b9d
push 0x63
jb 0x406ba2
jns 0x406c14
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x406c1e
je 0x406bb4
je 0x406c1a
add byte [rsi], ch
jae 0x406c31
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x406bc8
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rdx]
add byte [rax], al
add byte [rax], al
add al, bl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 3], ch
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 6], al
add byte [rax], al
add byte [rdx], dl
add eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x400b], dl
add byte [rax], al
add byte [rdx + 0xb], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
loopne 0x406ded
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0xc
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], dh
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
or eax, 0x40
add byte [rax], al
adc byte [rip], cl
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
loopne 0x406eb1
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
lock adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
sub al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdi + 0x40], dl
add byte [rax], al
xchg eax, esp
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x403e], ah
add byte [rax], al
add byte [rax + 0x3e], ah
add byte [rax], al
add byte [rdi + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4040], ch
add byte [rax], al
add byte [rax + 0x40], ch
add byte [rax], al
add byte [rbp + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add al, ch
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosb byte [rdi], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x51], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x8000000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5c], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
