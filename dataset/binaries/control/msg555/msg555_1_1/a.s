xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60b187
push rbp
sub rax, obj.std::cin
cmp rax, 0xe
mov rbp, rsp
jbe 0x4017d0
mov eax, 0
test rax, rax
je 0x4017d0
pop rbp
mov edi, obj.std::cin
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.std::cin
push rbp
sub rsi, obj.std::cin
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401818
mov eax, 0
test rax, rax
je 0x401818
pop rbp
mov edi, obj.std::cin
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x209ca9], 0
jne 0x40183a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x209c96], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401850
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40184b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov dword [rbp - 0x2c], esi
mov eax, ecx
mov byte [rbp - 0x30], dl
mov byte [rbp - 0x34], al
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call 0x4015a0
mov dword [rbp - 0x1c], 0
mov eax, dword [rbp - 0x1c]
cmp eax, dword [rbp - 0x2c]
jge 0x4018ec
movsx edx, byte [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movsx edx, byte [rbp - 0x34]
mov rax, qword [rbp - 0x28]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add dword [rbp - 0x1c], 1
jmp 0x4018a0
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
mov rax, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401905
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0xc8
mov qword [rbp - 0xb8], rdi
mov qword [rbp - 0xc0], rsi
mov dword [rbp - 0xc4], edx
mov eax, ecx
mov edx, r8d
mov byte [rbp - 0xc8], al
mov byte [rbp - 0xcc], dl
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
cmp dword [rbp - 0xc4], 0
jne 0x401973
mov rdx, qword [rbp - 0xc0]
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x4016c0
jmp 0x401b51
movsx ecx, byte [rbp - 0xcc]
movsx edx, byte [rbp - 0xc8]
lea rax, [rbp - 0xa0]
mov esi, dword [rbp - 0xc4]
mov rdi, rax
call sym.alternate_abi:cxx11_
mov dword [rbp - 0xa4], 0
mov eax, dword [rbp - 0xa4]
movsxd rbx, eax
mov rax, qword [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
setb al
test al, al
je 0x401aa3
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
mov rax, qword [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call 0x401660
movzx eax, byte [rax]
cmp al, byte [rbp - 0xc8]
sete al
test al, al
je 0x401a97
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, qword [rbp - 0xc0]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov eax, dword [rbp - 0xa4]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, qword [rbp - 0xc0]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0x60]
lea rdx, [rbp - 0xa0]
lea rcx, [rbp - 0x80]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
mov rax, qword [rbp - 0xb8]
lea rdx, [rbp - 0x40]
lea rcx, [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
nop
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401adc
add dword [rbp - 0xa4], 1
jmp 0x4019a0
lea rax, [rbp - 0xa5]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xa5]
mov rax, qword [rbp - 0xb8]
mov esi, 0x407b83
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xa5]
mov rdi, rax
call sym.std::allocator_char_::_allocator
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401b51
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401b01
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401b12
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401b37
mov rbx, rax
lea rax, [rbp - 0xa5]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401b37
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0xb8]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401b6c
call sym.imp.__stack_chk_fail
add rsp, 0xc8
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x100
mov qword [rbp - 0xf8], rdi
mov dword [rbp - 0xfc], esi
mov dword [rbp - 0x100], edx
mov dword [rbp - 0x104], ecx
mov dword [rbp - 0x108], r8d
mov dword [rbp - 0x10c], r9d
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edx, dword [rbp - 0x100]
mov eax, dword [rbp - 0x10c]
add eax, edx
cmp eax, dword [rbp - 0xfc]
jne 0x401c02
mov eax, dword [rbp - 0x100]
cmp eax, dword [rbp - 0x10c]
jne 0x401c02
mov esi, dword [rbp - 0x100]
mov rax, qword [rbp - 0xf8]
mov ecx, 0x47
mov edx, 0x52
mov rdi, rax
call sym.alternate_abi:cxx11_
jmp 0x4024bf
mov edx, dword [rbp - 0x108]
mov eax, dword [rbp + 0x18]
add eax, edx
cmp eax, dword [rbp - 0xfc]
jne 0x401c44
mov eax, dword [rbp - 0x108]
cmp eax, dword [rbp + 0x18]
jne 0x401c44
mov esi, dword [rbp - 0x108]
mov rax, qword [rbp - 0xf8]
mov ecx, 0x56
mov edx, 0x59
mov rdi, rax
call sym.alternate_abi:cxx11_
jmp 0x4024bf
mov edx, dword [rbp + 0x10]
mov eax, dword [rbp - 0x104]
add eax, edx
cmp eax, dword [rbp - 0xfc]
jne 0x401c83
mov eax, dword [rbp + 0x10]
cmp eax, dword [rbp - 0x104]
jne 0x401c83
mov esi, dword [rbp + 0x10]
mov rax, qword [rbp - 0xf8]
mov ecx, 0x4f
mov edx, 0x42
mov rdi, rax
call sym.alternate_abi:cxx11_
jmp 0x4024bf
mov byte [rbp - 0xed], 0
cmp dword [rbp - 0x104], 0
jle 0x401ce4
mov eax, dword [rbp + 0x10]
sub eax, dword [rbp - 0x104]
mov dword [rbp + 0x10], eax
mov eax, dword [rbp + 0x10]
test eax, eax
jg 0x401ce4
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xc0]
mov rax, qword [rbp - 0xf8]
mov esi, 0x407b83
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4024bf
cmp dword [rbp - 0x10c], 0
jle 0x401d47
mov eax, dword [rbp - 0x100]
sub eax, dword [rbp - 0x10c]
mov dword [rbp - 0x100], eax
mov eax, dword [rbp - 0x100]
test eax, eax
jg 0x401d47
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xc0]
mov rax, qword [rbp - 0xf8]
mov esi, 0x407b83
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4024bf
cmp dword [rbp + 0x18], 0
jle 0x401da4
mov eax, dword [rbp - 0x108]
sub eax, dword [rbp + 0x18]
mov dword [rbp - 0x108], eax
mov eax, dword [rbp - 0x108]
test eax, eax
jg 0x401da4
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xc0]
mov rax, qword [rbp - 0xf8]
mov esi, 0x407b83
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4024bf
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::vector
mov byte [rbp - 0xe0], 0x52
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call sym.std::make_pair_int__char_
mov qword [rbp - 0xd0], rax
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::push_back
mov byte [rbp - 0xe0], 0x59
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x108]
mov rsi, rdx
mov rdi, rax
call sym.std::make_pair_int__char_
mov qword [rbp - 0xd0], rax
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::push_back
mov byte [rbp - 0xe0], 0x42
lea rax, [rbp - 0xe0]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.std::make_pair_int__char_
mov qword [rbp - 0xd0], rax
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::push_back
lea rax, [rbp - 0xd0]
lea rdx, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::rend
lea rax, [rbp - 0xe0]
lea rdx, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::rbegin
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
lea rax, [rbp - 0xc0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov ebx, dword [rax]
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov r12d, dword [rax]
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
add eax, r12d
cmp ebx, eax
setg al
test al, al
je 0x401f45
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xd0]
mov rax, qword [rbp - 0xf8]
mov esi, 0x407b83
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4023c8
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::allocator
mov edx, dword [rbp - 0x100]
mov eax, dword [rbp - 0x108]
add edx, eax
mov eax, dword [rbp + 0x10]
add eax, edx
movsxd rsi, eax
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xa0]
mov rcx, rdx
mov edx, 0x3f
mov rdi, rax
call 0x4015d0
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0xec], 0
lea rax, [rbp - 0xc0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
cmp eax, dword [rbp - 0xec]
setg al
test al, al
je 0x402007
mov eax, dword [rbp - 0xec]
add eax, eax
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401730
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
add dword [rbp - 0xec], 1
jmp 0x401fa1
lea rax, [rbp - 0xc0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
add eax, eax
sub eax, 1
mov dword [rbp - 0xe8], eax
mov edx, dword [rbp - 0x100]
mov eax, dword [rbp - 0x108]
add edx, eax
mov eax, dword [rbp + 0x10]
add eax, edx
cmp eax, dword [rbp - 0xe8]
jle 0x40213d
mov eax, dword [rbp - 0xe8]
sub eax, 1
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401730
movzx ebx, byte [rax]
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
cmp bl, al
sete al
test al, al
je 0x4020de
mov eax, dword [rbp - 0xe8]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401730
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
jmp 0x402131
mov eax, dword [rbp - 0xe8]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401730
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
add dword [rbp - 0xe8], 1
jmp 0x402028
mov dword [rbp - 0xe4], 0
mov eax, dword [rbp - 0xe4]
movsxd rbx, eax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
setb al
test al, al
je 0x40226b
mov eax, dword [rbp - 0xe4]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401730
movzx eax, byte [rax]
cmp al, 0x3f
sete al
test al, al
je 0x40225f
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
test eax, eax
setg al
test al, al
je 0x40220c
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov eax, dword [rbp - 0xe4]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401730
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
jmp 0x40225f
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov eax, dword [rbp - 0xe4]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401730
mov rbx, rax
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
movzx eax, byte [rax + 4]
mov byte [rbx], al
add dword [rbp - 0xe4], 1
jmp 0x402147
lea rax, [rbp - 0xc0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
test eax, eax
je 0x40229e
mov ecx, str.std::__cxx11::string_solve_int__int__int__int__int__int__int_
mov edx, 0x62
mov esi, str.sorted_code_control_msg555_msg555_1_1_B.cpp
mov edi, str.A_1_.first____0
call sym.imp.__assert_fail
lea rax, [rbp - 0xc0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::operator__
mov eax, dword [rax]
test eax, eax
je 0x4022d1
mov ecx, str.std::__cxx11::string_solve_int__int__int__int__int__int__int_
mov edx, 0x63
mov esi, str.sorted_code_control_msg555_msg555_1_1_B.cpp
mov edi, str.A_2_.first____0
call sym.imp.__assert_fail
lea rax, [rbp - 0x80]
mov edx, dword [rbp - 0x104]
lea rsi, [rbp - 0xa0]
mov r8d, 0x4f
mov ecx, 0x42
mov rdi, rax
call sym.expand
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x4014f0
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov edx, dword [rbp - 0x10c]
lea rsi, [rbp - 0xa0]
mov r8d, 0x47
mov ecx, 0x52
mov rdi, rax
call sym.expand
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x4014f0
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x40]
mov edx, dword [rbp + 0x18]
lea rsi, [rbp - 0xa0]
mov r8d, 0x56
mov ecx, 0x59
mov rdi, rax
call sym.expand
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x4014f0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rdx, [rbp - 0xa0]
mov rax, qword [rbp - 0xf8]
mov rsi, rdx
mov rdi, rax
call 0x4015b0
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_vector
jmp 0x4024bf
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4024a5
mov rbx, rax
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4024a5
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402491
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402491
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402491
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4024a5
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0xf8]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4024da
call sym.imp.__stack_chk_fail
add rsp, 0x100
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0xd8
mov qword [rbp - 0xc8], rdi
mov dword [rbp - 0xcc], esi
mov dword [rbp - 0xd0], edx
mov dword [rbp - 0xd4], ecx
mov dword [rbp - 0xd8], r8d
mov dword [rbp - 0xdc], r9d
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::map
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::map
mov byte [rbp - 0x90], 0x52
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov rdx, rax
mov eax, dword [rbp - 0xcc]
mov dword [rdx], eax
mov byte [rbp - 0x90], 0x4f
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov rdx, rax
mov eax, dword [rbp - 0xd0]
mov dword [rdx], eax
mov byte [rbp - 0x90], 0x59
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov rdx, rax
mov eax, dword [rbp - 0xd4]
mov dword [rdx], eax
mov byte [rbp - 0x90], 0x47
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov rdx, rax
mov eax, dword [rbp - 0xd8]
mov dword [rdx], eax
mov byte [rbp - 0x90], 0x42
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov rdx, rax
mov eax, dword [rbp - 0xdc]
mov dword [rdx], eax
mov byte [rbp - 0x90], 0x56
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov rdx, rax
mov eax, dword [rbp + 0x10]
mov dword [rdx], eax
mov byte [rbp - 0x90], 0x52
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov dword [rax], 1
mov byte [rbp - 0x90], 0x4f
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov dword [rax], 0x11
mov byte [rbp - 0x90], 0x59
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov dword [rax], 0x10
mov byte [rbp - 0x90], 0x47
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov dword [rax], 0x110
mov byte [rbp - 0x90], 0x42
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov dword [rax], 0x100
mov byte [rbp - 0x90], 0x56
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::operator__
mov dword [rax], 0x101
mov dword [rbp - 0xb8], 0
mov eax, dword [rbp - 0xb8]
movsxd rbx, eax
mov rax, qword [rbp - 0xc8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
setb al
test al, al
je 0x40279a
mov eax, dword [rbp - 0xb8]
movsxd rdx, eax
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401660
mov rdx, rax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call method.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___.operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov eax, dword [rax]
shr eax, 0x1f
test al, al
je 0x40278e
mov esi, str.FAIL_CHECK
mov edi, obj.std::cerr
call sym.std::operator___std::char_traits_char__
mov esi, sym.std::endl_char_std::char_traits_char__
mov rdi, rax
call sym.std::ostream::operator__
mov edi, 1
call sym.imp.exit
add dword [rbp - 0xb8], 1
jmp 0x402709
lea rax, [rbp - 0x80]
mov qword [rbp - 0x88], rax
mov rax, qword [rbp - 0x88]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::begin
mov qword [rbp - 0xa0], rax
mov rax, qword [rbp - 0x88]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::end
mov qword [rbp - 0x90], rax
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x4033ce
test al, al
je 0x402848
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::operator_
mov rax, qword [rax]
mov qword [rbp - 0xb0], rax
mov eax, dword [rbp - 0xac]
test eax, eax
jle 0x402837
mov esi, str.FAIL_CHECK_2
mov edi, obj.std::cerr
call sym.std::operator___std::char_traits_char__
mov esi, sym.std::endl_char_std::char_traits_char__
mov rdi, rax
call sym.std::ostream::operator__
mov edi, 1
call sym.imp.exit
lea rax, [rbp - 0xa0]
mov rdi, rax
call 0x4033f0
jmp 0x4027d1
mov dword [rbp - 0xb4], 0
mov eax, dword [rbp - 0xb4]
movsxd rbx, eax
mov rax, qword [rbp - 0xc8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
setb al
test al, al
je 0x40294d
mov eax, dword [rbp - 0xb4]
movsxd rdx, eax
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401660
movzx eax, byte [rax]
mov byte [rbp - 0xa0], al
mov eax, dword [rbp - 0xb4]
add eax, 1
movsxd rbx, eax
mov rax, qword [rbp - 0xc8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401660
movzx eax, byte [rax]
mov byte [rbp - 0x90], al
lea rdx, [rbp - 0xa0]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call method.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___.operator__
mov ebx, dword [rax]
lea rdx, [rbp - 0x90]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call method.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___.operator__
mov eax, dword [rax]
and eax, ebx
test eax, eax
setne al
test al, al
je 0x402941
mov esi, str.FAIL_CHECK_3
mov edi, obj.std::cerr
call sym.std::operator___std::char_traits_char__
mov esi, sym.std::endl_char_std::char_traits_char__
mov rdi, rax
call sym.std::ostream::operator__
mov edi, 1
call sym.imp.exit
add dword [rbp - 0xb4], 1
jmp 0x402852
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::_map
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::_map
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4029a2
jmp 0x40299d
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::_map
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::_map
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0xd8
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x64]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov dword [rbp - 0x44], 1
mov eax, dword [rbp - 0x64]
cmp dword [rbp - 0x44], eax
jg 0x402b45
lea rax, [rbp - 0x60]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x5c]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x58]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x54]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x50]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x4c]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x48]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov r8d, dword [rbp - 0x48]
mov edi, dword [rbp - 0x4c]
mov r9d, dword [rbp - 0x50]
mov r10d, dword [rbp - 0x54]
mov ecx, dword [rbp - 0x58]
mov edx, dword [rbp - 0x5c]
mov esi, dword [rbp - 0x60]
lea rax, [rbp - 0x40]
push r8
push rdi
mov r8d, r10d
mov rdi, rax
call sym.solve_abi:cxx11_
add rsp, 0x10
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
test rax, rax
sete al
test al, al
je 0x402abc
lea rax, [rbp - 0x40]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
jmp 0x402ae5
mov edi, dword [rbp - 0x48]
mov r9d, dword [rbp - 0x4c]
mov r8d, dword [rbp - 0x50]
mov ecx, dword [rbp - 0x54]
mov edx, dword [rbp - 0x58]
mov esi, dword [rbp - 0x5c]
lea rax, [rbp - 0x40]
sub rsp, 8
push rdi
mov rdi, rax
call sym.check
add rsp, 0x10
mov esi, str.Case__
mov edi, obj.std::cout
call sym.std::operator___std::char_traits_char__
mov rdx, rax
mov eax, dword [rbp - 0x44]
mov esi, eax
mov rdi, rdx
call 0x4014c0
mov esi, 0x407c0b
mov rdi, rax
call sym.std::operator___std::char_traits_char__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
mov esi, sym.std::endl_char_std::char_traits_char__
mov rdi, rax
call sym.std::ostream::operator__
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
add dword [rbp - 0x44], 1
jmp 0x4029dc
mov eax, 0
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x402b7a
jmp 0x402b75
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x402bbb
cmp dword [rbp - 8], 0xffff
jne 0x402bbb
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov edx, 0x40
mov rax, qword [rbp - 8]
bsr rax, rax
xor rax, 0x3f
cdqe
sub rdx, rax
mov rax, rdx
sub rax, 1
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int__
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_char_
movzx edx, byte [rax]
mov rax, qword [rbp - 8]
mov byte [rax + 4], dl
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_char_
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_int__
mov rcx, rax
lea rax, [rbp - 0x20]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::pair_int_char_::pair_int__char_void_
mov rax, qword [rbp - 0x20]
mov rdx, qword [rbp - 0x18]
xor rdx, qword fs:[0x28]
je 0x402cf3
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::__Rb_tree
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
add rax, rbx
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::capacity
cmp rax, qword [rbp - 0x18]
jae 0x402d85
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::capacity
cmp rax, qword [rbp - 0x18]
jb 0x402d85
mov eax, 1
jmp 0x402d8a
mov eax, 0
mov byte [rbp - 0x19], al
cmp byte [rbp - 0x19], 0
je 0x402db5
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x38]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::insert
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
jmp 0x402dd3
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call 0x4015b0
mov rax, qword [rbp - 0x28]
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x4015b0
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___std::pair_int_char__
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::emplace_back_std::pair_int_char__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::end
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::begin
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::iterator_std::random_access_iterator_tag_std::pair_int_char__long_std::pair_int_char___std::pair_int_char___::iterator
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rdx, qword [rdx]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
call sym.__gnu_cxx::__ops::__iter_less_iter
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402ff1
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_Rb_tree
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::_Rb_tree_node_std::pair_charconst_int___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_begin
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_erase
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_Rb_tree_impl_std::less_char__true_::__Rb_tree_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x68
mov qword [rbp - 0x78], rdi
mov qword [rbp - 0x80], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x80]
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::lower_bound
mov qword [rbp - 0x60], rax
mov ebx, 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::end
mov qword [rbp - 0x50], rax
mov r12d, 1
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::operator__
test al, al
jne 0x40313f
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::operator_
mov r13, rax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::key_comp
mov ebx, 1
mov rcx, qword [rbp - 0x80]
lea rax, [rbp - 0x62]
mov rdx, r13
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
test al, al
je 0x403146
mov eax, 1
jmp 0x40314b
mov eax, 0
test bl, bl
test r12b, r12b
test al, al
je 0x4031ac
mov rax, qword [rbp - 0x80]
mov rdi, rax
call sym.std::move_char__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::forward_as_tuple_char_
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_const_iterator_std::pair_charconst_int__::_Rb_tree_const_iterator
mov rax, qword [rbp - 0x78]
lea rcx, [rbp - 0x61]
lea rdx, [rbp - 0x40]
mov rsi, qword [rbp - 0x30]
mov r8, rcx
mov rcx, rdx
mov edx, obj.std::piecewise_construct
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov qword [rbp - 0x60], rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::operator_
add rax, 4
mov rbx, qword [rbp - 0x28]
xor rbx, qword fs:[0x28]
je 0x4031e0
jmp 0x4031db
test bl, bl
test r12b, r12b
nop
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_charconst__false_::_Head_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::_Tuple_impl_0ul_charconst__._Tuple_impl
nop
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x68
mov qword [rbp - 0x78], rdi
mov qword [rbp - 0x80], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x80]
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::lower_bound
mov qword [rbp - 0x60], rax
mov ebx, 0
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::end
mov qword [rbp - 0x50], rax
mov r12d, 1
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::operator__
test al, al
jne 0x4032f9
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::operator_
mov r13, rax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::map_char_int_std::less_char__std::allocator_std::pair_charconst_int___::key_comp
mov ebx, 1
mov rcx, qword [rbp - 0x80]
lea rax, [rbp - 0x62]
mov rdx, r13
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
test al, al
je 0x403300
mov eax, 1
jmp 0x403305
mov eax, 0
test bl, bl
test r12b, r12b
test al, al
je 0x40335b
mov rdx, qword [rbp - 0x80]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::tuple_charconst__.tuple
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_const_iterator_std::pair_charconst_int__::_Rb_tree_const_iterator
mov rax, qword [rbp - 0x78]
lea rcx, [rbp - 0x61]
lea rdx, [rbp - 0x40]
mov rsi, qword [rbp - 0x30]
mov r8, rcx
mov rcx, rdx
mov edx, obj.std::piecewise_construct
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_emplace_hint_unique_std::piecewise_construct_tconst__std::tuple_charconst___std::tuple___
mov qword [rbp - 0x60], rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::operator_
add rax, 4
mov rbx, qword [rbp - 0x28]
xor rbx, qword fs:[0x28]
je 0x40338f
jmp 0x40338a
test bl, bl
test r12b, r12b
nop
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::begin
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::end
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
setne al
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdi, rax
call sym.std::_Rb_tree_increment
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdi, rax
call sym.std::_Rb_tree_node_std::pair_charconst_int__::_M_valptr
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_int_char__::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x403569
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::construct_std::pair_int_char__std::pair_int_char___
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x403587
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_emplace_back_aux_std::pair_int_char__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4035d4
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::iterator_std::random_access_iterator_tag_std::pair_int_char__long_std::pair_int_char___std::pair_int_char___::iterator
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403646
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::operator_____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
test al, al
je 0x40372f
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov rdi, rax
call sym.std::__lg
lea rbx, [rax + rax]
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push r13
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rdx
mov rdi, rax
call sym.std::__final_insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x403744
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_Rb_tree_impl_std::less_char__true_::_Rb_tree_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Rb_tree_node_std::pair_charconst_int___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
cmp qword [rbp - 0x20], 0
je 0x4037ea
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_right
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_erase
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_left
mov qword [rbp - 8], rax
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_drop_node
mov rax, qword [rbp - 8]
mov qword [rbp - 0x20], rax
jmp 0x403798
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::lower_bound
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
sete al
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::key_comp
mov eax, ebx
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
movzx edx, byte [rax]
mov rax, qword [rbp - 0x18]
movzx eax, byte [rax]
cmp dl, al
setl al
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_char_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_char_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_char___false_::_Head_base_char_
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_char_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_char___::_Tuple_impl_char_
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_char___false_::_M_head
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_char___::_M_head
mov rdi, rax
call sym.std::forward_char___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_char___false_::_Head_base_char_
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_char___::_Tuple_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_char_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_char___::tuple_char_void_
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov qword [rbp - 0x60], rcx
mov qword [rbp - 0x68], r8
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::forward_std::tuple___
mov r12, rax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::forward_std::tuple_char____
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov rsi, rax
mov rax, qword [rbp - 0x48]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_create_node_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_key
mov rdx, rax
mov rcx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_insert_hint_unique_pos
mov qword [rbp - 0x30], rax
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
test rax, rax
je 0x403af0
mov rdx, qword [rbp - 0x28]
mov rsi, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_insert_node
jmp 0x403b1a
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_drop_node
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::_Rb_tree_iterator
mov rax, qword [rbp - 0x40]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x403b63
jmp 0x403b5e
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_drop_node
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x60
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov qword [rbp - 0x60], rcx
mov qword [rbp - 0x68], r8
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::forward_std::tuple___
mov r12, rax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::forward_std::tuple_charconst___
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov rsi, rax
mov rax, qword [rbp - 0x48]
mov rcx, r12
mov rdx, rbx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_create_node_std::piecewise_construct_tconst__std::tuple_charconst___std::tuple___
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_key
mov rdx, rax
mov rcx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_insert_hint_unique_pos
mov qword [rbp - 0x30], rax
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
test rax, rax
je 0x403c38
mov rdx, qword [rbp - 0x28]
mov rsi, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_insert_node
jmp 0x403c62
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_drop_node
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::_Rb_tree_iterator
mov rax, qword [rbp - 0x40]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x403cab
jmp 0x403ca6
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_drop_node
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x60
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::_Rb_tree_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403cfe
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::_Rb_tree_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403d4a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x20
mov rdi, rax
call method.__gnu_cxx::__aligned_membuf_std::pair_charconst_int__._M_ptr
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_int_char__::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x403df6
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_std::pair_int_char___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::construct_std::pair_int_char__std::pair_int_char___
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::construct_std::pair_int_char__std::pair_int_char___
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::pair_int_char___std::pair_int_char___std::allocator_std::pair_int_char___
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___std::pair_int_char__
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x40403b
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x403fea
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::destroy_std::pair_int_char__
jmp 0x40400c
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___._M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___std::pair_int_char__
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x404df0
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call 0x404e69
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4040ed
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x58
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x58]
mov rax, qword [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
cmp rax, 0x10
setg al
test al, al
je 0x404241
cmp qword [rbp - 0x68], 0
jne 0x40419f
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x30]
lea rcx, [rbp - 0x40]
lea rax, [rbp - 0x50]
sub rsp, 8
push r13
mov rsi, rcx
mov rdi, rax
call sym.std::__partial_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x404241
sub qword [rbp - 0x68], 1
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x50]
lea rdx, [rbp - 0x30]
lea rcx, [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rcx
mov rdi, rax
call sym.std::__unguarded_partition_pivot_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x68]
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x60]
mov rdx, qword [rbp - 0x50]
mov qword [rax], rdx
jmp 0x404117
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x404255
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
cmp rax, 0x10
setg al
test al, al
je 0x404338
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x48]
mov edx, 0x10
mov rsi, rcx
mov rdi, rax
call 0x4050e0
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
sub rsp, 8
push r13
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x48]
mov edx, 0x10
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rdx
mov rdi, rax
call sym.std::__unguarded_insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x40437a
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x40438f
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::_Rb_tree_node_std::pair_charconst_int___::allocator
mov rax, qword [rbp - 8]
mov dword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x18], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x20], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x28], 0
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_Rb_tree_impl_std::less_char__true_::_M_initialize
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x18]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_destroy_node
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_put_node
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_end
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_begin
mov rsi, rax
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rcx, rdx
mov rdx, rbx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_lower_bound
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_node
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::tuple___
mov r12, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::tuple_char____
mov rbx, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov rdx, rax
mov rsi, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov r8, r12
mov rcx, rbx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_construct_node_std::piecewise_construct_tconst__std::tuple_char____std::tuple___
mov rax, qword [rbp - 0x18]
add rsp, 0x30
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::_Rb_tree_node_base___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::_Rb_tree_node_base___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::_Rb_tree_node_base___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::_Rb_tree_node_base___
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::_Rb_tree_const_iterator_std::pair_charconst_int__::_M_const_cast
mov qword [rbp - 0x50], rax
mov rbx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_end
cmp rbx, rax
sete al
test al, al
je 0x4046f5
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::size
test rax, rax
je 0x40469d
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_rightmost
mov rax, qword [rax]
mov rdi, rax
call method.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___._S_key
mov rcx, rax
mov rax, qword [rbp - 0x58]
mov rdx, qword [rbp - 0x68]
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
test al, al
je 0x40469d
mov eax, 1
jmp 0x4046a2
mov eax, 0
test al, al
je 0x4046dd
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_rightmost
mov rdx, rax
mov qword [rbp - 0x38], 0
lea rcx, [rbp - 0x38]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call 0x404546
mov rax, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
jmp 0x404983
mov rdx, qword [rbp - 0x68]
mov rax, qword [rbp - 0x58]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_insert_unique_pos
jmp 0x404983
mov rax, qword [rbp - 0x50]
mov rdi, rax
call method.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___._S_key
mov rdx, rax
mov rax, qword [rbp - 0x58]
mov rcx, qword [rbp - 0x68]
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
test al, al
je 0x404830
mov rax, qword [rbp - 0x50]
mov qword [rbp - 0x40], rax
mov rbx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_leftmost
mov rax, qword [rax]
cmp rbx, rax
sete al
test al, al
je 0x404781
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_leftmost
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_leftmost
mov rcx, rax
lea rax, [rbp - 0x30]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::pair_std::_Rb_tree_node_base__std::_Rb_tree_node_base__::pair_std::_Rb_tree_node_base___std::_Rb_tree_node_base___void_
mov rax, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
jmp 0x404983
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x40591e
mov rax, qword [rax]
mov rdi, rax
call method.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___._S_key
mov rcx, rax
mov rax, qword [rbp - 0x58]
mov rdx, qword [rbp - 0x68]
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
test al, al
je 0x404818
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_right
test rax, rax
sete al
test al, al
je 0x4047f4
mov qword [rbp - 0x38], 0
lea rdx, [rbp - 0x40]
lea rcx, [rbp - 0x38]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call 0x404546
mov rax, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
jmp 0x404983
lea rdx, [rbp - 0x50]
lea rcx, [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_std::_Rb_tree_node_base__std::_Rb_tree_node_base__::pair_std::_Rb_tree_node_base___std::_Rb_tree_node_base___void_
mov rax, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
jmp 0x404983
mov rdx, qword [rbp - 0x68]
mov rax, qword [rbp - 0x58]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_insert_unique_pos
jmp 0x404983
mov rax, qword [rbp - 0x50]
mov rdi, rax
call method.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___._S_key
mov rcx, rax
mov rax, qword [rbp - 0x58]
mov rdx, qword [rbp - 0x68]
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
test al, al
je 0x40495c
mov rax, qword [rbp - 0x50]
mov qword [rbp - 0x40], rax
mov rbx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_rightmost
mov rax, qword [rax]
cmp rbx, rax
sete al
test al, al
je 0x4048b6
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_rightmost
mov rdx, rax
mov qword [rbp - 0x38], 0
lea rcx, [rbp - 0x38]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call 0x404546
mov rax, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
jmp 0x404983
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4033f0
mov rax, qword [rax]
mov rdi, rax
call method.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___._S_key
mov rdx, rax
mov rax, qword [rbp - 0x58]
mov rcx, qword [rbp - 0x68]
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
test al, al
je 0x404947
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_right
test rax, rax
sete al
test al, al
je 0x404926
mov qword [rbp - 0x38], 0
lea rdx, [rbp - 0x50]
lea rcx, [rbp - 0x38]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call 0x404546
mov rax, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
jmp 0x404983
lea rdx, [rbp - 0x40]
lea rcx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_std::_Rb_tree_node_base__std::_Rb_tree_node_base__::pair_std::_Rb_tree_node_base___std::_Rb_tree_node_base___void_
mov rax, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
jmp 0x404983
mov rdx, qword [rbp - 0x68]
mov rax, qword [rbp - 0x58]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_insert_unique_pos
jmp 0x404983
mov qword [rbp - 0x38], 0
lea rdx, [rbp - 0x38]
lea rcx, [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_std::_Rb_tree_node_base__std::_Rb_tree_node_base__::pair_std::_Rb_tree_node_base___void_
mov rax, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x404997
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call method.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___._S_value
mov rdx, rax
lea rax, [rbp - 9]
mov rsi, rdx
mov rdi, rax
call sym.std::_Select1st_std::pair_charconst_int__::operator__
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4049eb
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov qword [rbp - 0x50], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
cmp qword [rbp - 0x40], 0
jne 0x404a63
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_end
cmp rax, qword [rbp - 0x48]
je 0x404a63
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___._S_key
mov rbx, rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_key
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
test al, al
je 0x404a6a
mov eax, 1
jmp 0x404a6f
mov eax, 0
mov byte [rbp - 0x21], al
mov rax, qword [rbp - 0x38]
lea rcx, [rax + 8]
movzx eax, byte [rbp - 0x21]
mov rdx, qword [rbp - 0x48]
mov rsi, qword [rbp - 0x50]
mov edi, eax
call sym.std::_Rb_tree_insert_and_rebalance
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x28]
lea rdx, [rax + 1]
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x28], rdx
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::_Rb_tree_iterator
mov rax, qword [rbp - 0x20]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x404acc
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_node
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::tuple___
mov r12, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::tuple_charconst___
mov rbx, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov rdx, rax
mov rsi, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov r8, r12
mov rcx, rbx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_construct_node_std::piecewise_construct_tconst__std::tuple_charconst___std::tuple___
mov rax, qword [rbp - 0x18]
add rsp, 0x30
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::__aligned_membuf_std::pair_charconst_int__::_M_addr
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 8
call 0x402c0c
test rax, rax
je 0x404c28
mov rdx, qword [rbx]
mov qword [rax], rdx
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x404c8f
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::size
cmp rax, qword [rbp - 0x20]
ja 0x404cef
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::max_size
cmp rax, qword [rbp - 0x20]
jae 0x404cfd
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_char__std::allocator_std::pair_int_char___::max_size
jmp 0x404d01
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x404d15
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x404d48
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::allocate
jmp 0x404d4d
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_int_char___std::move_iterator_std::pair_int_char____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_int_char___std::move_iterator_std::pair_int_char____
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::pair_int_char____std::pair_int_char___std::pair_int_char__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::destroy_std::pair_int_char__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404e56
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 3
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rcx
mov rdi, rax
call sym.std::__heap_select_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x404f83
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x70
mov qword [rbp - 0x68], rdi
mov qword [rbp - 0x70], rsi
mov qword [rbp - 0x78], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x70]
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov rdx, rax
lea rax, [rbp - 0x60]
mov rcx, qword [rbp - 0x70]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x78]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x405dfe
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x50]
mov rcx, qword [rbp - 0x70]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x4050e0
mov rdx, qword [rbp - 0x70]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rcx, [rbp - 0x40]
lea rdx, [rbp - 0x20]
lea rsi, [rbp - 0x50]
lea rax, [rbp - 0x30]
sub rsp, 8
push r12
mov rdi, rax
call sym.std::__move_median_to_first_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x70]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x78]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x70]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x4050e0
mov rax, qword [rbp - 0x68]
lea rcx, [rbp - 0x20]
lea rdx, [rbp - 0x30]
lea rsi, [rbp - 0x40]
sub rsp, 8
push rbx
mov rdi, rax
call sym.std::__unguarded_partition_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x68]
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x4050d7
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdx, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::operator_
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x78
mov qword [rbp - 0x78], rdi
mov qword [rbp - 0x80], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rdx, qword [rbp - 0x80]
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call 0x404df0
test al, al
jne 0x4052b8
lea rax, [rbp - 0x70]
mov rcx, qword [rbp - 0x78]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x4050e0
mov rdx, qword [rbp - 0x80]
lea rax, [rbp - 0x70]
mov rsi, rdx
mov rdi, rax
call sym.std::operator_____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
test al, al
je 0x4052b9
mov rdx, qword [rbp - 0x78]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x40526f
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x60], rax
lea rax, [rbp - 0x50]
lea rcx, [rbp - 0x70]
mov edx, 1
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x78]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x90]
lea rcx, [rbp - 0x50]
lea rdx, [rbp - 0x30]
lea rsi, [rbp - 0x40]
mov rdi, rax
call sym.std::move_backward_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x78]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
jmp 0x4052a7
sub rsp, 8
push r13
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x30]
sub rsp, 8
push r12
mov rdi, rax
call sym.std::__unguarded_linear_insert_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x405176
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x4052cd
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::operator_____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
test al, al
je 0x405369
sub rsp, 8
push r12
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x20]
sub rsp, 8
push rbx
mov rdi, rax
call sym.std::__unguarded_linear_insert_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x40530d
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x40537e
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Rb_tree_node_std::pair_charconst_int___::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov dword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
mov rax, qword [rbp - 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 0x18], rdx
mov rax, qword [rbp - 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 0x20], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::_Rb_tree_node_std::pair_charconst_int__::_M_valptr
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_Node_allocator
mov rsi, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Rb_tree_node_std::pair_charconst_int____::destroy_std::pair_charconst_int__
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_Node_allocator
mov rcx, rax
mov rax, qword [rbp - 0x10]
mov edx, 1
mov rsi, rax
mov rdi, rcx
call sym.std::allocator_traits_std::allocator_std::_Rb_tree_node_std::pair_charconst_int____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
cmp qword [rbp - 0x20], 0
je 0x4054f1
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_key
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
xor eax, 1
test al, al
je 0x4054df
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_left
mov qword [rbp - 0x20], rax
jmp 0x405495
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_right
mov qword [rbp - 0x20], rax
jmp 0x405495
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::_Rb_tree_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40551c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_Node_allocator
mov esi, 1
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Rb_tree_node_std::pair_charconst_int____::allocate
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Rb_tree_node_base::_Rb_tree_node_base
mov rax, qword [rbp - 8]
add rax, 0x20
mov rdi, rax
call sym.__gnu_cxx::__aligned_membuf_std::pair_charconst_int__::__aligned_membuf
nop
leave
ret
nop
push rbp
mov rbp, rsp
push r14
push r13
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov rax, qword [rbp - 0x30]
mov rsi, rax
mov edi, 0x28
call 0x402c0c
test rax, rax
je 0x4055cb
mov rdi, rax
call sym.std::_Rb_tree_node_std::pair_charconst_int__::_Rb_tree_node
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_std::tuple___
mov r14, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::tuple_char____
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::_Rb_tree_node_std::pair_charconst_int__::_M_valptr
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_Node_allocator
mov r8, r14
mov rcx, r13
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Rb_tree_node_std::pair_charconst_int____::construct_std::pair_charconst_int__std::piecewise_construct_tconst__std::tuple_char____std::tuple___
jmp 0x40565c
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_put_node
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x30
pop rbx
pop r12
pop r13
pop r14
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::_Rb_tree_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4056b3
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x28]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x20
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_value
mov rdx, rax
lea rax, [rbp - 9]
mov rsi, rdx
mov rdi, rax
call sym.std::_Select1st_std::pair_charconst_int__::operator__
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x405727
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::_Rb_tree_node_std::pair_charconst_int_____
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::_Rb_tree_node_std::pair_charconst_int_____
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x60
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_begin
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_end
mov qword [rbp - 0x30], rax
mov byte [rbp - 0x41], 1
mov rax, qword [rbp - 0x38]
test rax, rax
je 0x40581b
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_key
mov rdx, rax
mov rax, qword [rbp - 0x58]
mov rcx, qword [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
mov byte [rbp - 0x41], al
cmp byte [rbp - 0x41], 0
je 0x405809
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_left
jmp 0x405815
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_S_right
mov qword [rbp - 0x38], rax
jmp 0x4057bf
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::_Rb_tree_iterator
cmp byte [rbp - 0x41], 0
je 0x405888
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::begin
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_iterator_std::pair_charconst_int__::operator__
test al, al
je 0x40587c
lea rdx, [rbp - 0x30]
lea rcx, [rbp - 0x38]
lea rax, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_std::_Rb_tree_node_base__std::_Rb_tree_node_base__::pair_std::_Rb_tree_node_std::pair_charconst_int_____std::_Rb_tree_node_std::pair_charconst_int_____void_
mov rax, qword [rbp - 0x20]
mov rdx, qword [rbp - 0x18]
jmp 0x4058f6
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x40591e
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___._S_key
mov rcx, rax
mov rax, qword [rbp - 0x58]
mov rdx, qword [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call sym.std::less_char_::operator__
test al, al
je 0x4058cf
lea rdx, [rbp - 0x30]
lea rcx, [rbp - 0x38]
lea rax, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_std::_Rb_tree_node_base__std::_Rb_tree_node_base__::pair_std::_Rb_tree_node_std::pair_charconst_int_____std::_Rb_tree_node_std::pair_charconst_int_____void_
mov rax, qword [rbp - 0x20]
mov rdx, qword [rbp - 0x18]
jmp 0x4058f6
mov qword [rbp - 0x28], 0
lea rdx, [rbp - 0x28]
lea rcx, [rbp - 0x40]
lea rax, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_std::_Rb_tree_node_base__std::_Rb_tree_node_base__::pair_std::_Rb_tree_node_base___void_
mov rax, qword [rbp - 0x20]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 8]
xor rsi, qword fs:[0x28]
je 0x40590a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x18
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdi, rax
call sym.std::_Rb_tree_decrement
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Rb_tree_node_std::pair_charconst_int__._M_valptr
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
push r14
push r13
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov qword [rbp - 0x48], r8
mov rax, qword [rbp - 0x30]
mov rsi, rax
mov edi, 0x28
call 0x402c0c
test rax, rax
je 0x4059b7
mov rdi, rax
call sym.std::_Rb_tree_node_std::pair_charconst_int__::_Rb_tree_node
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_std::tuple___
mov r14, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::tuple_charconst___
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::_Rb_tree_node_std::pair_charconst_int__::_M_valptr
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_get_Node_allocator
mov r8, r14
mov rcx, r13
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::_Rb_tree_node_std::pair_charconst_int____::construct_std::pair_charconst_int__std::piecewise_construct_tconst__std::tuple_charconst___std::tuple___
jmp 0x405a48
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Rb_tree_char_std::pair_charconst_int__std::_Select1st_std::pair_charconst_int___std::less_char__std::allocator_std::pair_charconst_int___::_M_put_node
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x30
pop rbx
pop r12
pop r13
pop r14
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_char__std::allocator_std::pair_int_char___::_M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_char___::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x405adb
mov rax, qword [rbp - 0x10]
jmp 0x405adf
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x405b51
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::pair_int_char____std::pair_int_char___
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rax, qword [rax]
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x60
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
sub rsp, 8
push r12
mov rsi, rdx
mov rdi, rax
call sym.std::__make_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x68]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x40697c
test al, al
je 0x405d1d
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x405d0c
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x405c5a
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x405d32
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
cmp rax, 1
setg al
test al, al
je 0x405de3
mov rax, qword [rbp - 0x50]
mov rdi, rax
call 0x406ace
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rcx, [rbp - 0x30]
lea rax, [rbp - 0x40]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x405d5b
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x405df8
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdx, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call 0x406aec
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x405fdc
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x405f22
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40610a
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x405f9e
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40610a
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40610a
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x406058
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40610a
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x4060d1
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40610a
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x28]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40611f
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x406194
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x406148
mov rax, qword [rbp - 0x38]
mov rdi, rax
call 0x406ace
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x4061ec
mov rax, qword [rbp - 0x38]
mov rdi, rax
call 0x406ace
jmp 0x4061a0
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x40697c
xor eax, 1
test al, al
je 0x40622e
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x28]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40627d
jmp 0x406278
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator__
jmp 0x406148
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 3
neg rdx
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4062e3
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::operator__
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov edx, dword [rax]
mov rax, qword [rbp - 0x10]
mov eax, dword [rax]
cmp edx, eax
jl 0x406344
mov rax, qword [rbp - 0x10]
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov eax, dword [rax]
cmp edx, eax
jl 0x40634b
mov rax, qword [rbp - 8]
movzx edx, byte [rax + 4]
mov rax, qword [rbp - 0x10]
movzx eax, byte [rax + 4]
cmp dl, al
jge 0x40634b
mov eax, 1
jmp 0x406350
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::operator__int_char_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::operator__
mov rdi, rax
call 0x406bae
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x4063e2
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x70
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov qword [rbp - 0x70], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x70]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x68]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x20]
lea rdx, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::__miter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x40]
lea rdx, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::__miter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x58]
lea rcx, [rbp - 0x10]
lea rdx, [rbp - 0x20]
lea rsi, [rbp - 0x40]
mov rdi, rax
call sym.std::__copy_move_backward_a2_true_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
jmp 0x40648e
jmp 0x406486
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x58]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4064a6
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x10]
add rax, 4
mov rdi, rax
call sym.std::forward_char_
movzx edx, byte [rax]
mov rax, qword [rbp - 8]
mov byte [rax + 4], dl
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x40], rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x406ace
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x40]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Val_less_iter::operator___std::pair_int_char__std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x4065c2
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x30]
mov qword [rax], rdx
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x406ace
jmp 0x406550
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4065fd
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Rb_tree_node_std::pair_charconst_int___::destroy_std::pair_charconst_int__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Rb_tree_node_std::pair_charconst_int___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Rb_tree_node_std::pair_charconst_int___::allocate
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov qword [rbp - 0x38], r8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::tuple___
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::tuple_char____
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov rdx, rax
mov rsi, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov r8, r12
mov rcx, rbx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Rb_tree_node_std::pair_charconst_int___::construct_std::pair_charconst_int__std::piecewise_construct_tconst__std::tuple_char____std::tuple___
nop
add rsp, 0x30
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Rb_tree_node_std::pair_charconst_int__._M_valptr
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 0x20
mov rdi, rax
call sym.__gnu_cxx::__aligned_membuf_std::pair_charconst_int__::_M_ptr
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov qword [rbp - 0x38], r8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::tuple___
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::tuple_charconst___
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov rdx, rax
mov rsi, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov r8, r12
mov rcx, rbx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Rb_tree_node_std::pair_charconst_int___::construct_std::pair_charconst_int__std::piecewise_construct_tconst__std::tuple_charconst___std::tuple____
nop
add rsp, 0x30
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_char__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x406804
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::pair_int_char____std::pair_int_char___
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x40
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
cmp rax, 1
setle al
test al, al
jne 0x40695b
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x28], rax
lea rax, [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x20]
mov rsi, qword [rbp - 0x28]
lea rax, [rbp - 0x30]
sub rsp, 8
push r12
mov rcx, qword [rbx]
mov rdi, rax
call sym.std::__adjust_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
cmp qword [rbp - 0x28], 0
je 0x40695e
sub qword [rbp - 0x28], 1
jmp 0x4068d5
nop
jmp 0x40695f
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x406973
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::base
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4069e2
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rax, qword [rax]
mov qword [rbp - 0x40], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
mov rax, qword [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov r12, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x30]
sub rsp, 8
push r13
mov rcx, qword [rbx]
mov rdx, r12
mov esi, 0
mov rdi, rax
call sym.std::__adjust_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x406ac3
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x407346
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 3
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x406b4c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::swap_int_char_
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax - 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Iter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______false_::_S_base
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x406c1c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
add rsp, -0x80
mov qword [rbp - 0x68], rdi
mov qword [rbp - 0x70], rsi
mov qword [rbp - 0x78], rdx
mov qword [rbp - 0x80], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x80]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x10]
lea rdx, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::__niter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rdx, qword [rbp - 0x78]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x30]
lea rdx, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::__niter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rdx, qword [rbp - 0x70]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
lea rax, [rbp - 0x50]
lea rdx, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__niter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x68]
lea rcx, [rbp - 0x10]
lea rdx, [rbp - 0x30]
lea rsi, [rbp - 0x50]
mov rdi, rax
call sym.std::__copy_move_backward_a_true_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x68]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x406ce7
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdx, rax
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__int_char_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::_Rb_tree_node_std::pair_charconst_int___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x406d82
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
shl rax, 2
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x58
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov qword [rbp - 0x60], rcx
mov qword [rbp - 0x68], r8
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov byte [rbp - 0x32], r12b
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::forward_std::tuple_char____
mov rdx, rax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_char___::tuple
lea r13, [rbp - 0x30]
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::forward_std::tuple___
mov byte [rbp - 0x31], bl
mov r12, qword [rbp - 0x50]
mov rsi, r12
mov edi, 8
call 0x402c0c
mov rbx, rax
test rbx, rbx
je 0x406e5c
movzx eax, byte [rbp - 0x31]
push rax
movzx eax, byte [rbp - 0x32]
push rax
mov rsi, r13
mov rdi, rbx
call sym.std::pair_charconst_int_::pair_char___
add rsp, 0x10
jmp 0x406e5c
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x402c1e
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x406e71
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::__aligned_membuf_std::pair_charconst_int__._M_addr
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Head_base_0ul_charconst__false_::_M_head
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_charconst__::_M_head
mov rdi, rax
call sym.std::forward_charconst__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Head_base_0ul_charconst__false_::_Head_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Tuple_impl_0ul_charconst__::_Tuple_impl
nop
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x58
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov qword [rbp - 0x60], rcx
mov qword [rbp - 0x68], r8
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov rdi, rax
call sym.std::forward_std::piecewise_construct_tconst__
mov byte [rbp - 0x32], r12b
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::forward_std::tuple_charconst___
mov rdx, rax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::tuple_charconst__::tuple
lea r13, [rbp - 0x30]
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::forward_std::tuple___
mov byte [rbp - 0x31], bl
mov r12, qword [rbp - 0x50]
mov rsi, r12
mov edi, 8
call 0x402c0c
mov rbx, rax
test rbx, rbx
je 0x406fee
movzx eax, byte [rbp - 0x31]
push rax
movzx eax, byte [rbp - 0x32]
push rax
mov rsi, r13
mov rdi, rbx
call sym.std::pair_charconst_int_::pair_charconst__
add rsp, 0x10
jmp 0x406fee
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x402c1e
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x407003
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x407577
test al, al
je 0x40708f
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::pair_int_char__
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::pair_int_char__std::pair_int_char__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::operator__
add qword [rbp - 0x18], 8
jmp 0x40703f
mov rax, qword [rbp - 0x18]
jmp 0x4070c8
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_char___
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x58
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov qword [rbp - 0x70], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x60]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x60]
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x68]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x38]
jle 0x4071f1
mov rax, qword [rbp - 0x38]
add rax, 1
add rax, rax
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
lea rdx, [rax - 1]
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x50]
mov rdx, qword [rbp - 0x38]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
test al, al
je 0x407188
sub qword [rbp - 0x38], 1
lea rax, [rbp - 0x40]
mov rdx, qword [rbp - 0x38]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdx, qword [rbp - 0x60]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x60], rax
jmp 0x40710b
mov rax, qword [rbp - 0x68]
and eax, 1
test rax, rax
jne 0x407297
mov rax, qword [rbp - 0x68]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x38]
jne 0x407297
mov rax, qword [rbp - 0x38]
add rax, 1
add rax, rax
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
lea rdx, [rax - 1]
lea rax, [rbp - 0x40]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdx, qword [rbp - 0x60]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x38]
sub rax, 1
mov qword [rbp - 0x60], rax
sub rsp, 8
push r13
call sym.__gnu_cxx::__ops::__iter_comp_val
add rsp, 0x10
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x30]
mov rsi, qword [rbp - 0x60]
lea rax, [rbp - 0x40]
sub rsp, 8
push r12
mov rcx, qword [rbx]
mov rdi, rax
call sym.std::__push_heap_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______long_std::pair_int_char____gnu_cxx::__ops::_Iter_less_val_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x4072fe
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char____::base
mov rax, qword [rax]
cmp rbx, rax
setb al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_char_::swap
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x18]
lea rdx, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Iter_base_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______false_::_S_base
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x407412
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x60
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x58], rdx
mov qword [rbp - 0x60], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov byte [rbp - 0x31], 0
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x48]
lea rcx, [rbp - 0x10]
lea rdx, [rbp - 0x20]
lea rsi, [rbp - 0x30]
mov rdi, rax
call sym.std::__copy_move_backward_true_false_std::random_access_iterator_tag_::__copy_move_b_std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______
mov rax, qword [rbp - 0x48]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4074a8
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x666666666666666
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rdx, [rbp + 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
push r9
push r8
mov rsi, rcx
mov rdi, rax
call sym.std::pair_charconst_int_::pair_char___0ul_
add rsp, 0x10
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x407511
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rdx, [rbp + 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
push r9
push r8
mov rsi, rcx
mov rdi, rax
call sym.std::pair_charconst_int_::pair_charconst__0ul_
add rsp, 0x10
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x407575
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::pair_int_char___
xor eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::pair_int_char__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 8
call 0x402c0c
test rax, rax
je 0x40761b
mov rdx, qword [rbx]
mov qword [rax], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov qword [rbp - 0x58], rdi
mov qword [rbp - 0x60], rsi
mov qword [rbp - 0x68], rdx
mov qword [rbp - 0x70], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x60]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
mov ebx, 0
mov rax, qword [rbp - 0x60]
cmp rax, qword [rbp - 0x68]
jle 0x4076ae
lea rax, [rbp - 0x50]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
mov ebx, 1
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x50]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_val::operator___std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char______std::pair_int_char__
test al, al
je 0x4076ae
mov eax, 1
jmp 0x4076b3
mov eax, 0
test bl, bl
test al, al
je 0x40773f
lea rax, [rbp - 0x30]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdx, qword [rbp - 0x60]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x60], rax
mov rax, qword [rbp - 0x60]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
jmp 0x407664
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdx, qword [rbp - 0x60]
mov rcx, qword [rbp - 0x58]
mov rsi, rcx
mov rdi, rax
call 0x4050e0
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x407791
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_int_
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 4]
mov rax, qword [rbp - 8]
add rax, 4
mov rsi, rdx
mov rdi, rax
call sym.std::swap_char_
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x40], rcx
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::operator____gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x18], 0
jle 0x407855
mov rax, qword [rbp - 0x38]
mov rdi, rax
call 0x406ace
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdi, rax
call sym.std::move_std::pair_int_char___
mov rbx, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call 0x406ace
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_char_::operator_
sub qword [rbp - 0x18], 1
jmp 0x407809
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call method.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____.reverse_iterator
mov rax, qword [rbp - 0x28]
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_char___::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_char___
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::get_0ul_char___
mov rdi, rax
call sym.std::forward_char___
movzx edx, byte [rax]
mov rax, qword [rbp - 8]
mov byte [rax], dl
mov rax, qword [rbp - 8]
mov dword [rax + 4], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Tuple_impl_0ul_charconst__::_M_head
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__get_helper_0ul_charconst__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::get_0ul_charconst__
mov rdi, rax
call sym.std::forward_charconst__
movzx edx, byte [rax]
mov rax, qword [rbp - 8]
mov byte [rax], dl
mov rax, qword [rbp - 8]
mov dword [rax + 4], 0
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_char___::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::reverse_iterator___gnu_cxx::__normal_iterator_std::pair_int_char___std::vector_std::pair_int_char__std::allocator_std::pair_int_char_____::operator_
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov rdi, rdx
call sym.std::operator__int_char_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
lea rax, [rbp - 0xc]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x407a43
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_char__
movzx eax, byte [rax]
mov byte [rbp - 9], al
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x18]
mov byte [rax], dl
lea rax, [rbp - 9]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x20]
mov byte [rax], dl
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x407ab5
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x203306]
push rbp
lea rbp, [rip + 0x20330e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x407b26
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x407b10
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae str.IMPOSSIBLE
jb 0x407c00
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x407c0b
outsd dx, dword [rsi]
insb byte [rdi], dx
insd dword [rdi], dx
jae 0x407c06
xor eax, 0x6d2f3535
jae 0x407c0d
xor eax, 0x315f3535
pop rdi
xor dword [rdi], ebp
movsxd rsi, dword cs:[rax + 0x70]
add byte [rcx + 0x5b], al
pop r11
xor dword [rbp + 0x2e], ebx
imul si, word [rdx + 0x73], 0x2074
cmp eax, 0x30203d
pop r11
xor bl, byte [rbp + 0x2e]
imul si, word [rdx + 0x73], 0x2074
cmp eax, 0x30203d
and byte [rbx + 0x48], r8b
add byte [r14 + 0x41], al
and byte [rbx + 0x48], r8b
and byte [r10], sil
add byte [rsi + 0x41], al
and byte [rbx + 0x48], r8b
and byte [r11], sil
add byte [rcx + 0x4d], cl
push r8
push r11
push rbx
add byte [r11 + 0x61], r8b
jae 0x407c6d
and byte [rbx], ah
add byte [rdx], bh
and byte [rax], al
jbe 0x407c75
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x407c89
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x407ca1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dh
jae 0x407cb6
cmp bh, byte fs:[rdx]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
cmp bh, byte [rdx]
jae 0x407cc4
jb 0x407cbb
outsb dx, byte [rsi]
and byte [ebx + 0x6f], dh
insb byte [rdi], dx
jbe 0x407cbf
sub byte [rcx + 0x6e], ch
je 0x407c8b
and byte [rcx + 0x6e], ch
je 0x407c90
and byte [rcx + 0x6e], ch
je 0x407c95
and byte [rcx + 0x6e], ch
je 0x407c9a
and byte [rcx + 0x6e], ch
je 0x407c9f
and byte [rcx + 0x6e], ch
je 0x407ca4
and byte [rcx + 0x6e], ch
je 0x407ca6
add byte [rax], al
add byte [rax], al
add dword [rbx], ebx
add edi, dword [rbx]
in al, 7
add byte [rax], al
sti
add byte [rax], al
add byte [rax], ah
cwde
push qword [rax]
or byte [rax], al
add al, dh
inc dword [rax]
or byte [rax], al
add dh, ah
wait
cmp byte [rcx], cl
add byte [rax], al
mov word [rdi + rdi*8 + 0x960ff], ds
add dh, dh
sahf
call qword [rax]
or al, byte [rax]
add byte [rsi - 0x58], ah
lcall [rax + 0xa]
add byte [rax], al
sub al, 0xad
inc dword [rax + 0xa]
scasd eax, dword [rdi]
jmp rax
sub byte [rax], al
add byte [rsi], bh
scasd eax, dword [rdi]
inc dword [rax]
sub dword [rax], eax
add byte [rbx - 0x51], dl
lcall [rax + 8]
add byte [rax], al
pop rcx
scasd eax, dword [rdi]
js 0x407cea
add byte [rax], al
pop rdi
scasd eax, dword [rdi]
lcall [rax + 0x65000008]
scasd eax, dword [rdi]
mov eax, 0x8c000008
scasd eax, dword [rdi]
fmul dword [rax]
add byte [rax], al
sahf
scasd eax, dword [rdi]
clc
or byte [rax], al
add byte [rbp - 0x77000051], ch
or dword [rax], eax
add byte [rbx - 0x57000051], bh
or dword [rax], eax
add dl, cl
scasd eax, dword [rdi]
dec eax
or dword [rax], eax
add byte [rbx], cl
mov al, 0xff
call 0x7a407d2e
mov al, 0xff
cmp byte [rdx], cl
add byte [rax], al
xchg eax, ebp
mov al, 0xff
push qword [rax - 0x5cfffff6]
mov al, 0xff
call rax
or al, byte [rax]
add byte [rbp - 0x4f], ch
clc
or al, byte [rax]
add byte [rcx + rsi*4 + 0xb18ffff], dh
add byte [rax], al
sal byte [rcx + 0xb40ffff], 1
add byte [rax], al
adc al, 0xb2
ljmp [rax + 0xb]
add byte [rax], al
and dh, byte [rdx + 0xb88ffff]
add byte [rax], al
push rsp
mov dl, 0xff
ljmp [rax - 0x77fffff5]
mov dl, 0xff
dec eax
or eax, dword [rax]
add byte [rdx + rsi*4 + 0xbe8ffff], bh
add byte [rax], al
enter -0x4e, -1
or byte [rax + rax], cl
add ch, dh
mov dl, 0xff
ljmp [rax]
or al, 0
add byte [rax - 0x4d], bh
call qword [rax + 0xc]
add byte [rax], al
cwde
mov bl, 0xff
push qword [rax + 0xc]
add byte [rax], al
mov ah, 0xb3
lcall [rax - 0x2ffffff4]
mov bl, 0xff
mov eax, 0x900000c
mov ah, 0xff
jmp rax
or al, 0
add byte [rax], bl
mov ah, 0xff
inc dword [rax]
or eax, 0xb56c0000
push qword [rax]
or eax, 0xb5860000
call qword [rax + 0xd]
add byte [rax], al
lodsb al, byte [rsi]
mov ch, 0xff
push qword [rax + 0xd]
add byte [rax], al
sal byte [rbp + 0xd90ffff], cl
add byte [rax], al
sbb dh, byte [rdi + 0xdc0ffff]
add byte [rax], al
xor al, 0xb7
jmp rax
or eax, 0xb74e0000
inc dword [rax]
add byte [rax], al
jo 0x407dad
jmp qword [rax]
add byte [rax], al
pushfq
mov bh, 0xff
inc dword [rax + 0xe]
add byte [rax], al
mov edx, 0x60ffffb7
add byte [rax], al
mov bh, 0xff
inc dword [rax - 0xdfffff2]
mov bh, 0xff
jmp qword [rax + 0x4200000e]
mov eax, 0xec8ffff
add byte [rax], al
push rax
mov eax, 0xee8ffff
add byte [rax], al
jp 0x407de6
dec dword [rax]
sldt word [rax]
mov byte [rax + 0xf28ffff], bh
add byte [rax], al
or bh, byte [rcx + 0xf48ffff]
add byte [rax], al
push rsi
mov ecx, 0xf68ffff
add byte [rax], al
cmp byte [rcx + 0xf88ffff], 0
add al, cl
mov ecx, 0xfa8ffff
add byte [rax], al
sar byte [rdx + 0xfd0ffff], 1
add byte [rax], al
in al, dx
mov edx, 0xff0ffff
add byte [rax], al
or byte [rbx + 0x1010ffff], bh
add byte [rax], al
outsb dx, byte [rsi]
mov ebx, 0x1030ffff
add byte [rax], al
cmp byte [rbx + 0x1050ffff], 0
add byte [rsi + 0x70ffffbb], ah
adc byte [rax], al
add al, cl
mov ebx, 0x1090ffff
add byte [rax], al
mov ebx, 0x10b0ffff
add byte [rax], al
adc byte [rdi + rdi*8 + 0x10d0ff], bh
add byte [rdx], bh
mov esp, 0x10f0ffff
add byte [rax], al
insb byte [rdi], dx
mov esp, 0x1110ffff
add byte [rax], al
popfq
mov esp, 0x1130ffff
add byte [rax], al
scasb al, byte [rdi]
mov esp, 0x1150ffff
add byte [rax], al
enter -0x44, -1
jo 0x407edb
add byte [rax], al
mov esp, 0x1190ffff
add byte [rax], al
adc byte [rbp + 0x11b0ffff], bh
add byte [rax], al
mov ebp, 0x11d0ffff
add byte [rax], al
push -0x43
push rax
adc dword [rax], eax
add byte [rdi + 0x10ffffbd], al
adc al, byte [rax]
add byte [rbp + 0x30ffffbd], dl
adc al, byte [rax]
add byte [rbx + 0x50ffffbd], ah
adc al, byte [rax]
add byte [rdx + 0x70ffffbd], dh
adc al, byte [rax]
add ah, ch
mov esi, 0x1298ffff
add byte [rax], al
cli
mov esi, 0x12b8ffff
add byte [rax], al
xor al, 0xc0
jmp rax
adc al, byte [rax]
add byte [rax + 0xffffc0], al
adc eax, dword [rax]
add ah, cl
sar bh, 0xff
and byte [rbx], dl
add byte [rax], al
sar bh, 0xff
adc eax, dword [rax]
add byte [rax], ch
sar edi, -1
adc eax, dword [rax]
add byte [rcx + rax*8 - 1], al
inc dword [rax + 0x79000013]
sar edi, -1
movabs al, byte [0xc0ffffc19f000013]
adc eax, dword [rax]
add al, bl
sar edi, -1
loopne 0x407f75
add byte [rax], al
ret 0xffc3
dec dword [rax]
adc al, 0
add bh, bl
ret
ljmp [rax]
adc al, 0
add byte [rdi], al
dec dword [rax + 0x14]
add byte [rax], al
outsd dx, dword [rsi]
ljmp [rax + 0x14]
add byte [rax], al
loopne 0x407f4b
call qword [rax + 0x1a000014]
mov eax, 0x7c000014
fcom dword [rax + rax]
add byte [rdi - 0x7000039], al
adc al, 0
add byte [rcx + 0x18ffffc7], bl
adc eax, 0xc7ac0000
cmp byte [rip - 0x381a0000], dl
lcall [rax + 0x15]
add byte [rax], al
xor cl, al
inc dword [rax + 0x3c000015]
enter -1, -0x60
adc eax, 0xc8b70000
dec eax
adc eax, 0xc8c60000
call 0x2407ff2
leave
dec dword [rax]
add byte [rax], al
leave
ljmp [rax]
add byte [rax], al
leave
dec dword [rax + 0x16]
add byte [rax], al
int 0xff
push qword [rax + 0x16]
add byte [rax], al
outsb dx, byte [rsi]
int 0xff
call qword [rax + 0x54000016]
mov eax, 0x6e000016
fcom dword [rsi]
add byte [rax], al
inc dword [rax]
add byte [rax], al
add al, 0xcf
jmp qword [rax]
add byte [rax], al
and bh, cl
inc dword [rax + 0x17]
add byte [rax], al
sub ecx, edi
jmp qword [rax + 0x17]
add byte [rax], al
pop rcx
iretd
inc dword [rax + 0x68000017]
iretd
jmp qword [rax - 0x4fffffe9]
iretd
inc eax
add byte [rax], al
pushfq
sar bh, 1
call 0xffffffffd040806c
sar bh, 1
dec dword [rax]
sbb byte [rax], al
add dh, dh
sar bh, 1
ljmp [rax]
sbb byte [rax], al
add byte [rdx - 0x2f], cl
call qword [rax + 0x18]
add byte [rax], al
jo 0x40803f
push qword [rax + 0x18]
add byte [rax], al
fcom st(1)
call qword [rax - 0x16ffffe8]
sar edi, 1
push qword [rax + 0x2c000018]
sar bh, cl
call rax
sbb byte [rax], al
add byte [rbx + rdx*8], cl
clc
sbb byte [rax], al
add byte [rax - 0x2c], ah
jmp qword [rax]
sbb dword [rax], eax
add byte [rdi + 0x40ffffd4], bl
sbb dword [rax], eax
add byte [rax - 0x2a], bl
ljmp [rax + 0x19]
add byte [rax], al
or bh, dl
call qword [rax + 0x24000019]
xlatb
push qword [rax + 0x66000019]
xlatb
call rax
sbb dword [rax], eax
add byte [rsi - 0x7000029], ah
sbb dword [rax], eax
add ah, bl
xlatb
jmp qword [rax]
sbb al, byte [rax]
add dh, ch
xlatb
inc dword [rax + 0x1a]
add byte [rax], al
sahf
fdivr st(7)
jmp qword [rax + 0x1a]
add byte [rax], al
fdivr st(7)
inc dword [rax - 0x2dffffe6]
fdivr st(7)
jmp qword [rax - 0x21ffffe6]
fdivr st(7)
inc eax
sbb al, byte [rax]
add byte [rdx], cl
fcos
jmp rax
sbb al, byte [rax]
add dl, ch
fcos
call qword [rax]
sbb eax, dword [rax]
add byte [rsi], dh
push qword [rax]
sbb eax, dword [rax]
add byte [rax - 0x26], cl
call qword [rax + 0x1b]
add byte [rax], al
pop rdx
push qword [rax + 0x1b]
add byte [rax], al
test eax, 0x90ffffda
sbb eax, dword [rax]
add byte [rax - 0x4f000026], bh
sbb eax, dword [rax]
add ah, bh
call rax
sbb eax, dword [rax]
add byte [rsp + rbx*8 + 0x1bf0ffff], cl
add byte [rax], al
sahf
fdiv st(7), st(0)
call qword [rax]
sbb al, 0
add cl, cl
fdiv st(7), st(0)
push qword [rax]
sbb al, 0
add ah, ah
fdiv st(7), st(0)
call qword [rax + 0x1c]
add byte [rax], al
neg ah
push qword [rax + 0x1c]
add byte [rax], al
jmp qword [rax - 0x1bffffe4]
inc eax
sbb al, 0
add al, dh
jmp rax
sbb al, 0
add byte [rsi + rbx*8], dl
inc dword [rax]
sbb eax, 0xde360000
jmp qword [rax]
sbb eax, 0xde610000
inc dword [rax + 0x1d]
add byte [rax], al
mov ebx, esi
jmp qword [rax + 0x1d]
add byte [rax], al
rcr esi, cl
inc dword [rax + 0x400001d]
jmp qword [rax + 0x1300001d]
inc eax
sbb eax, 0xdf500000
jmp rax
sbb eax, 0xdf5e0000
inc dword [rax]
add byte [rax], al
mov ebx, 0x28ffffe0
add byte [rax], al
jle 0x4081af
call qword [rax + 0x1e]
add byte [rax], al
mov ebp, 0x70ffffe1
add byte [rax], al
movabs eax, dword [0x1e90ffffe4]
out 0xff, al
push qword [rax + 0x6600001e]
out 0xff, al
call rax
add byte [rax], al
test dh, ah
push rax
add byte [rax], al
shl dh, cl
call qword [rax]
add byte [rax], al
adc al, 0xe7
push qword [rax]
add byte [rax], al
out 0xff, eax
call qword [rax + 0x1f]
add byte [rax], al
sub al, ch
js 0x408239
add byte [rax], al
call 0x1fd98221
add byte [rax], al
jp 0x40820e
mov eax, 0x8400001f
jmp 0x20218231
add byte [rax], al
nop
jmp 0x20418239
add byte [rax], al
sahf
jmp 0x20618241
add byte [rax], al
jmp 0x20818249
add byte [rax], al
bnd jmp 0x20a18251
add byte [rax], al
sbb al, 0xea
inc dword [rax - 0x77ffffe0]
ljmp [rax - 0x5dffffe0]
dec eax
and byte [rax], al
add al, al
call 0x2c408295
jmp 0x408276
call qword [rax]
and dword [rax], eax
add byte [rsi - 0x15], al
push qword [rax]
and dword [rax], eax
add byte [rbx + rbp*8 - 1], dl
call qword [rax + 0x21]
add byte [rax], al
xchg eax, esi
jmp 0x40828e
push qword [rax + 0x21]
add byte [rax], al
mov al, 0xeb
call qword [rax - 0x1effffdf]
jmp 0x40829e
push qword [rax - 0x3ffffdf]
in al, dx
fsub dword [rcx]
add byte [rax], al
in eax, dx
clc
and dword [rax], eax
add byte [rsi - 0x12], cl
jmp qword [rax]
and al, byte [rax]
add byte [rsi + rbp*8 - 1], ch
inc dword [rax + 0x22]
add byte [rax], al
out dx, al
jmp qword [rax + 0x22]
add byte [rax], al
out dx, eax
inc dword [rax + 0x2e000022]
out dx, eax
jmp qword [rax + 0x3f000022]
out dx, eax
inc eax
and al, byte [rax]
add byte [rsi - 0x1f000011], bl
and al, byte [rax]
add byte [rdx - 0x10], ch
inc dword [rax]
and eax, dword [rax]
add byte [rsi + 0x20fffff0], bl
and eax, dword [rax]
add byte [rsi + 0x40fffff0], ch
and eax, dword [rax]
add dl, dl
jmp qword [rax + 0x23]
add byte [rax], al
int1
inc dword [rax - 0x3ffffdd]
int1
push qword [rax + 0x16000023]
call rax
and eax, dword [rax]
add byte [rdi], ah
push rax
and eax, dword [rax]
add byte [rcx - 0xe], al
call qword [rax]
and al, 0
add byte [rax - 0xe], dl
push qword [rax]
and al, 0
add byte [rdx + 0x50fffff2], cl
and al, 0
add byte [rax + 0x70fffff2], dh
and al, 0
add byte [rsi - 0x5f00000d], cl
and al, 0
add byte [rdx - 0x3f00000d], ah
and al, 0
add byte [rdi - 0xc], cl
call 0xffffffff89408389
idiv bh
call qword [rax]
and eax, 0xf6c60000
push qword [rax]
and eax, 0xf6e60000
call qword [rax + 0x25]
add byte [rax], al
or al, 0xf7
push qword [rax + 0x25]
add byte [rax], al
xor eax, 0x90fffff7
and eax, 0xf7940000
push qword [rax + 0x2a000025]
clc
call rax
and eax, 0xf83e0000
push rax
and eax, 0xf8940000
call qword [rax]
add byte es:[rax], al
movabs byte [0xf700002630fffff8], al
clc
call qword [rax + 0x26]
add byte [rax], al
and cl, bh
push qword [rax + 0x26]
add byte [rax], al
stc
call qword [rax + 0x4e000026]
stc
push qword [rax + 0x5f000026]
stc
call rax
add byte es:[rax], al
movabs dword [0x18000026f0fffff9], eax
sti
lcall [rax]
add byte [rax], al
pop rcx
sti
cmp byte [rdi], ah
add byte [rax], al
sti
jmp qword [rax + 0x27]
add byte [rax], al
or eax, 0x80fffffc
add byte [rax], al
sub ah, bh
jmp qword [rax + 0x67000027]
cld
inc eax
add byte [rax], al
cmp esp, 0x27e0ffff
add byte [rax], al
pushfq
cld
inc dword [rax]
sub byte [rax], al
add bl, bl
cld
jmp qword [rax]
sub byte [rax], al
add byte [rdi*8 + 0x2840ffff], dl
add byte [rax], al
std
jmp qword [rax + 0x28]
add byte [rax], al
push rsi
std
inc dword [rax - 0x3affffd8]
std
jmp qword [rax + 0x38000028]
inc eax
sub byte [rax], al
add byte [rax - 2], dl
jmp qword [rax]
sub dword [rax], eax
add al, al
ljmp [rax + 0x29]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x408487
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
call 0x2b40841f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4084b7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
call 0xffffffffc140844c
add al, byte [rax]
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add bl, dh
cmpsb byte [rsi], byte ptr [rdi]
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add cl, bl
cmpsb byte [rsi], byte ptr [rdi]
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
mov edi, 0x6ffffa6
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rbp + 0x27ffffa6], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
sahf
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4085b9
add esi, eax
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
xchg eax, edx
jmp qword [rsi + 0x4000000]
add al, 0xa6
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pushfq
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rbx + rdx*4], ah
ljmp [rdx + 2]
add byte [rax], al
add al, 0x11
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
pop rbp
add cl, byte [rdi + rax]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x40860f
add byte [rax], al
sbb eax, 0xeffffa6
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rbx], cl
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 1
add byte [rax], al
cli
movsd dword [rdi], dword ptr [rsi]
inc dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x40866f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add dword [rax], eax
add byte [rbx], bl
cmpsb byte [rsi], byte ptr [rdi]
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add byte [rax], al
add dh, bl
xchg eax, esp
push qword [rax + 9]
add byte [rax], al
add al, 0x3c
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x61
or dword [rdi + rax], ecx
or byte [rax + rax], bl
add byte [rax], al
and al, 2
add byte [rax], al
cmp ah, byte [rsi + 0x1bffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rsi], al
sahf
inc esi
add al, 0
add byte [rsi + rdx*4], al
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
mov ecx, 0x8070c04
add byte [rax], al
sub al, 0
add byte [rax], al
insb byte [rdi], dx
add dword [rax], eax
add byte [rdx + 0x1d4ffff], ah
add byte [rax], al
add al, 0xa5
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
add dword [rsi], ebp
adc byte [rbx + 0x2e], dl
add byte [rdx], al
nop
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add al, byte [rax]
add ch, bl
movsd dword [rdi], dword ptr [rsi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0xcb000002
movsd dword [rdi], dword ptr [rsi]
dec edx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
ror byte [rdi + rax], 8
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 2
add byte [rax], al
insd dword [rdi], dx
cmpsb byte [rsi], byte ptr [rdi]
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add al, 2
add byte [rax], al
xchg eax, esp
cmpsb byte [rsi], byte ptr [rdi]
lcall [rbx]
add byte [rax], al
add byte [rcx + rdi*4], al
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 2
add byte [rax], al
mov byte [rsi + 0x44ffff], ah
add byte [rax], al
add al, 0xbd
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x4087eb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add eax, dword [rax]
add byte [rsi + 0xeffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x408811
add byte [rax], al
xchg eax, edx
cmpsb byte [rsi], byte ptr [rdi]
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add byte [rsi + 0x34ffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 3
add byte [rax], al
mov eax, 0x34ffffa6
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add ah, cl
cmpsb byte [rsi], byte ptr [rdi]
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add eax, dword [rax]
add byte [rax + 0x2dffffa6], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
inc dword [rdx]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
js 0x4088d3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 4
add byte [rax], al
and byte [rdi + 0x20ffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
add eax, dword [rax]
add byte [rax], ah
cmpsd dword [rsi], dword ptr [rdi]
lcall [rbx]
add byte [rax], al
add byte [rcx + rax*8], al
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], al
add byte [rdi], dl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add byte [rax], dl
cmpsd dword [rsi], dword ptr [rdi]
cmp dword [rax], eax
add byte [rax], al
add al, 0xc5
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x408963
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add al, 0
add byte [rcx], ah
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
in al, dx
add eax, dword [rax]
add byte [rax], dl
cmpsd dword [rsi], dword ptr [rdi]
call qword [rbx + 1]
add byte [rax], al
add al, 0xc9
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc014503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 5
add byte [rax], al
xor al, 0xa8
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 5
add byte [rax], al
test al, 0xff
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add eax, 0xa8340000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
jl 0x408a1a
add byte [rax], al
cmp ch, byte [rax + 0x148ffff]
add byte [rax], al
add al, 0xdc
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc013a03
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
add eax, 0xa9520000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add eax, 0xa94c0000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add eax, 0xa9460000
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 6
add byte [rax], al
test rax, 0x2bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 6
add byte [rax], al
push rsp
test eax, 0x1dffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
push rdx
test eax, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
test rax, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rip - 0x56b60000], es
call qword [rax]
add byte [rax], al
add al, 0xef
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 6
add byte [rax], al
jb 0x408afb
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
test eax, 0x2affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
push -0x57
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 7
add byte [rax], al
pop rax
test eax, 0x82ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 7
add byte [rax], al
mov edx, 0x4cffffa9
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
add byte [rax], al
out 0xa9, al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x408c15
add byte [rax], al
test eax, 0x48ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
xchg eax, esp
add byte [rax], al
sbb byte [rdx + 0x107ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70cf902
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xf8000007
stosb byte [rdi], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rdi]
add byte [rax], al
hlt
stosb byte [rdi], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
stosb byte [rdi], al
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 8
add byte [rax], al
stosd dword [rdi], eax
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 8
add byte [rax], al
sub byte [rbx + 0x25ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or byte [rax], al
add byte [rsi], ch
stosd dword [rdi], eax
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x408d1e
add byte [rax], al
xor byte [rbx + 0x22ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x58
or al, 7
or byte [rax + rax], bl
add byte [rax], al
pushfq
or byte [rax], al
add byte [rdx], dh
stosd dword [rdi], eax
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x38000008
stosd dword [rdi], eax
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rax]
add byte [rax], al
stosd dword [rdi], eax
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or byte [rax], al
add byte [rbx + rbp*4 - 1], dl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 9
add byte [rax], al
stosd dword [rdi], eax
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 9
add byte [rax], al
push rsi
stosd dword [rdi], eax
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or dword [rax], eax
add byte [rax - 0x55], dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x408e1f
add byte [rax], al
stosd dword [rdi], eax
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x408e37
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or dword [rax], eax
add byte [rax - 0x55], bl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x5e000009
stosd dword [rdi], eax
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rcx]
add byte [rax], al
jb 0x408e25
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or dword [rax], eax
add byte [rdi - 0x55], ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xa
add byte [rax], al
pop rbp
stosd dword [rdi], eax
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xa
add byte [rax], al
stosq qword [rdi], rax
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
or dword [rax], eax
add byte [rdx], bh
stosd dword [rdi], eax
cmp al, byte [rcx]
add byte [rax], al
add al, 0xf4
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x2e
add dword [rdi + rax], ecx
or byte [rax + rax], bl
add byte [rax], al
test byte [rdx], cl
add byte [rax], al
lodsb al, byte [rsi]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or dword [rax], eax
add byte [rdx], bh
lodsb al, byte [rsi]
cmp al, byte [rcx]
add byte [rax], al
add al, 0x14
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x2e
add dword [rdi + rax], ecx
or byte [rax + rax], bl
add byte [rax], al
int3
or al, byte [rax]
add byte [rbp + rbp*4 - 1], cl
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
or al, byte [rax]
add byte [rax - 0x53], bh
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0xb
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
lodsd eax, dword [rsi]
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xb
add byte [rax], al
movabs byte [0x3effffad], al
adc byte [rsi + 0x60d4302], al
jns 0x408fe7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or r8, qword [rax]
add al, al
lodsd eax, dword [rsi]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
or eax, dword [rax]
add byte [rbp + rbp*4 + 0x35ffff], bh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jo 0x409027
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rbx], cs
add byte [rax], al
shr dword [rbp + 0x26ffff], 1
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or eax, dword [rax]
add bh, dl
lodsd eax, dword [rsi]
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x409067
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
or al, byte [rax]
add al, dh
lodsd eax, dword [rsi]
add dword [rax], eax
add byte [rsp + rsi], al
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
loopne 0x409084
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
or eax, dword [rax]
add byte [rdx + 0x1dffffaf], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xc
add byte [rax], al
scasd eax, dword [rdi]
scasd eax, dword [rdi]
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xc
add byte [rax], al
mov bh, 0xaf
ljmp [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
push rsp
or al, 0
add bh, bh
scasd eax, dword [rdi]
push qword [rcx + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc016303
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
jl 0x409122
add byte [rax], al
mov cl, 0xff
cmp al, byte [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc012c03
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or al, 0
add byte [rdx - 0x4e], bl
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0
add byte [rdx + rsi*4 + 0xbffff], bl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xc
add byte [rax], al
xchg dword [rdx + 0x12ffff], esi
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xd
add byte [rax], al
jns 0x409154
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xd
add byte [rax], al
insb byte [rdi], dx
mov dl, 0xff
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x4091df
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or eax, 0xb2860000
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
or eax, 0xb2aa0000
dec dword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rip - 0x4d6c0000], cs
jnp 0x40922e
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x6f
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xd
add byte [rax], al
out 0xb2, eax
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, 0xb2d60000
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
ja 0x40928f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or eax, 0xb2f20000
inc dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jg 0x4092af
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xe
add byte [rax], al
mov bl, 0xff
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
ja 0x4092cf
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0xe
add byte [rax], al
xor dh, byte [rbx + 0x39cffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
xchg eax, edx
add ecx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
mov dh, 0xff
dec dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
jl 0x409324
add byte [rax], al
mov dh, 0xff
jmp rbp
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
fisttp dword [rdi + rax]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
xchg eax, esp
mov bh, 0xff
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
mov bh, 0xff
jnp 0x409366
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x6f
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
loop 0x409341
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0xf
add byte [rax], al
fdiv qword [rdi + 0x1bffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xf
add byte [rax], al
fdiv dword [rdi + 0xbffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
ret
mov bh, 0xff
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sldt word [rax]
sal dword [rdi + 0xfffff], 1
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], cs
add byte [rax], al
sal byte [rdi + 0x48ffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7e
or al, 7
or byte [rax + rax], ah
add byte [rax], al
lodsb al, byte [rsi]
sldt word [rax]
call 0xffffffffed409404
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x40946b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
lodsb al, byte [rsi]
mov eax, 0x33ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
sldt word [rax]
sar byte [rax + 0x26ffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0x10
add byte [rax], al
mov eax, 0x54ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x10
add byte [rax], al
mov eax, 0x26ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc byte [rax], al
add al, bh
mov eax, 0x68ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x409526
add byte [rax], al
mov ecx, 0x11ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc byte [rax], al
add byte [rcx], dh
mov ecx, 0x43ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], ah
add byte [rax], al
mov esp, 0x54000010
mov ecx, 0xe0ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x2c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 0x10
add byte [rax], al
or al, 0xba
call qword [rcx + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x48
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0x11
add byte [rax], al
cmp byte [rbx + 0x3fffff], bh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jp 0x4095c7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0x11
add byte [rax], al
push rdi
mov ebx, 0x1b9ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc01ab03
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
push rsp
adc dword [rax], eax
add al, ch
mov esp, 0xafffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x5d
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x409627
add byte [rax], al
jo 0x4095d7
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc dword [rax], eax
add byte [rbp + rdi*4 - 1], ch
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x409657
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0x8e000010
mov ebp, 0x3fffff
add byte [rax], al
add al, 0x5c
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x75
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
in al, 0x10
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
mov ebp, 0x36ffff
add byte [rax], al
add al, 0x60
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jno 0x4096a3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x12
add byte [rax], al
mov ah, 0xbd
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x12
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
mov ebp, 0xb0ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
adc r8b, byte [rax]
add byte [rsi], dh
mov esi, 0x27ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc al, byte [rax]
add byte [rsi], bh
mov esi, 0xbffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdx], ss
add byte [rax], al
sub bh, byte [rsi + 0xbffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc al, byte [rax]
add byte [rsi], dl
mov esi, 0x2bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
int3
adc dword [rax], eax
add byte [rdx], ah
mov esi, 0xdfffff
add byte [rax], al
add al, 0x64
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov es, word [r11]
lea eax, [rsp + rcx*4]
add eax, 0xcf020683
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc al, byte [rax]
add dl, dl
mov esi, 0x4bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0x13
add byte [rax], al
mov esi, 0x12ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x13
add byte [rax], al
mov esi, 0x12ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc eax, dword [rax]
add dl, ah
mov esi, 0x4fffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x409829
add byte [rax], al
adc dword [rdi + 0xeffff], edi
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc eax, dword [rax]
add byte [rax], al
mov edi, 0x44ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x409857
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x24000013
mov edi, 0x190ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ecx, dword [rbx + 0x8070c01]
add byte [rax + rax], bl
add byte [rax], al
fcom qword [rbx]
add byte [rax], al
xchg eax, esp
sar bh, 0xff
adc al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc eax, dword [rax]
add byte [rsi + 0x2bffffc0], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x14
add byte [rax], al
xchg eax, ecx
sar bh, 0xff
sbb al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x14
add byte [rax], al
mov eax, es
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
pop rsp
adc eax, dword [rax]
add byte [rsi - 0x40], bh
fild word [rax]
add byte [rax], al
add al, 0x80
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov es, word [r11]
lea eax, [rsp + rcx*4]
add eax, 0xcf020683
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], ss
add byte [rsi], ch
sar edi, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc al, 0
add byte [rcx + rax*8], bl
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc al, 0
add byte [rax], cl
sar edi, -1
and eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc al, 0
add byte [rcx + rax*8], cl
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x15
add byte [rax], al
sar edi, -1
sub eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x15
add byte [rax], al
sbb ecx, eax
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc rax, -0x3edd0000
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
adc eax, 0xc14b0000
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rip - 0x3ea40000], ss
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc eax, 0xc14b0000
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
int3
adc eax, 0xc1680000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
adc eax, 0xc1560000
lcall [rbp + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x51
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
adc al, 0x16
add byte [rax], al
mov eax, edx
inc ebx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov ecx, 0x8070c
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x16
add byte [rax], al
ret
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x409af7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
ret
jmp rsp
add al, byte [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ebx, edi
add cl, byte [rdi + rax]
or byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x409b2c
add byte [rax], al
or esi, eax
lcall [rsi + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ebx, dword [rcx + 1]
or al, 7
or byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x8e000016
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rsi]
add byte [rax], al
mov edi, es
dec dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add byte [rax], al
mov edx, 0x42ffffc7
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x78
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sbb al, 0x17
add byte [rax], al
fadd st(7), st(0)
call qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
cmp al, 0x16
add byte [rax], al
or al, 0xc8
inc esp
add byte [rax], al
add byte [rsp + rbx*4], al
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bh, byte [rdi + 0x8070c]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
test al, 0xc8
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], dl
add byte [rax], al
xchg eax, esi
enter -1, 0x44
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jg 0x409c3f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
mov edx, 0xaffffc8
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
add byte [rcx], al
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
add byte [rax], al
pushfq
leave
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
mov cl, cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x18
add byte [rax], al
jbe 0x409c73
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x18
add byte [rax], al
jl 0x409c93
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
sbb byte [rax], r8b
add byte [rdx + 0x2affffc9], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
sbb byte [rax], al
add byte [rcx + rcx*8 + 0x6cffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x60
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
sbb byte [rax], al
add al, bl
leave
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0x18
add byte [rax], al
ror cl, cl
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb byte [rax], al
add al, dl
leave
ljmp [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x60
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sbb byte [rax], al
add byte [rdx + rcx*8], dl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x19
add byte [rax], al
retf -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x19
add byte [rax], al
cld
leave
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x409df7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb dword [rax], eax
add byte [rsi], bl
retf -1
sbb al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x409e2f
add byte [rax], al
sbb dl, cl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pushfq
sbb dword [rax], eax
add byte [rcx], ch
retf -1
sbb eax, dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0xf
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb dword [rax], eax
add byte [rbx + rcx*8], bl
ljmp [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
in al, 0x19
add byte [rax], al
retf
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70cdc02
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1a
add byte [rax], al
int3
lcall [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rcx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1a
add byte [rax], al
and al, 0xcc
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb r8b, byte [rax]
add byte [rsi - 0x34], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x75
or al, 7
or byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
sbb al, byte [rax]
add byte [rsi + 0x20ffffcc], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdx], ds
add byte [rax], al
xchg ah, cl
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb al, byte [rax]
add byte [rdi - 0x34], dh
lcall [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
sbb al, byte [rax]
add byte [rsi - 0x34000034], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, dh
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
sbb al, byte [rax]
add byte [rdx - 0x33], ah
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1b
add byte [rax], al
jbe 0x409f77
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1b
add byte [rax], al
int 0xff
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb r8, qword [rax]
add byte [rdx - 0x33], ch
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
insb byte [rdi], dx
sbb al, byte [rax]
add byte [rsi - 0x21000033], dl
add byte [rax], al
add byte [rax + rsi*4], al
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x102e8d02
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sbb eax, dword [rax]
add byte [rsi + rcx*8 - 1], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x3e00001b
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rbx]
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
sbb eax, dword [rax]
add byte [rcx], ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x1c
add byte [rax], al
sbb dh, cl
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x40a0d7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x1c
add byte [rax], al
xor cl, dh
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
pop rsp
sbb eax, dword [rax]
add byte [rax], bh
fiadd word [rax]
add byte [rax], al
add al, 0xbf
cmpsd dword [rsi], dword ptr [rdi]
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x102e8d02
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], ds
add dh, ah
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb eax, dword [rax]
add dl, bl
ljmp [rbp + 0x4000000]
shl byte [rdi + 0xe410040], 1
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x2400000008070c], eax
add byte [rax], al
sbb al, 0
add byte [rdi - 0x31], bl
cmp al, byte [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc022c03
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
sbb al, 0
add byte [rcx - 0x2f], dh
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sbb al, 0x1d
add byte [rax], al
mov ss, ecx
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x1d
add byte [rax], al
mov ss, ecx
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb eax, 0xd1940000
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40a233
add byte [rax], al
popfq
sar edi, 1
lcall [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
sbb eax, 0xd1dc0000
call qword [rsi]
adc byte [rsi + 0x60d4302], al
add dl, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x5200001d
sar bh, cl
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rip - 0x2dba0000]
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
sbb eax, 0xd27c0000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x1e
add byte [rax], al
push -0x2e
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0x1e
add byte [rax], al
lahf
sar bh, cl
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
test al, 0xd2
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40a334
add byte [rax], al
test al, 0xd2
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
xchg eax, esi
sar bh, cl
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x8700001e
sar bh, cl
inc dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7a
or al, 7
or byte [rax + rax], ah
add byte [rax], al
fcomp qword [rsi]
add byte [rax], al
stosd dword [rdi], eax
sar bh, cl
push qword [rbp + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
imul eax, dword [rcx], 0xc
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x1f
add byte [rax], al
clc
sar edi, cl
inc dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x40a3bf
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 0x1f
add byte [rax], al
sbb esp, edx
lcall [rdx]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
nop
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
mov edx, esp
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
test esp, edx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], ds
add byte [rax], al
adc ah, 0xff
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x40a447
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
lahf
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
cdq
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x40a4a7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x20
add byte [rax], al
mov bl, 0xd4
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sub al, 0x20
add byte [rax], al
int3
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and byte [rax], r8b
add al, ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
and byte [rax], al
add dh, cl
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rax], fs
add byte [rax], al
sbb eax, 0x72ffffd5
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
and byte [rax], al
add byte [rax - 0x2b], dh
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and byte [rax], al
add byte [rax], bl
xchg bh, bh
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40a587
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
and byte [rax], al
add byte [rsi], dh
xchg bh, bh
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], cl
add byte [rax], al
sub ch, dl
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x40a5e2
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
push rsp
and dword [rax], eax
add byte [rax - 0x2b], dl
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or dword [rdi + 0x17], ecx
insb byte [rdi], dx
add byte [rcx + 0x501], al
inc dword [rcx]
pop rbp
sub eax, 0x2870000
add eax, 0xab0004a8
add al, byte [rip - 0x3afffb7d]
add al, byte [rip - 0x20fffc0e]
add al, byte [rip - 0x43fffc1f]
add eax, dword [rip - 0x3ffffb6c]
add al, 5
add byte [rax], al
inc dword [rcx]
push rsi
add dword [rsi - 0x2affffff], eax
add al, byte [rip - 0x47ffef1a]
add eax, dword [rip - 0x6affee7d]
add al, 5
movabs al, byte [0x12ac01ca04f80011]
add byte [rsi + 0x11bd0507], dh
add byte [rbp + 0x11d10508], cl
add dh, ah
or byte [rcx + 0x129806], bl
nop
syscall
in eax, 0x11
add al, al
syscall
cwde
adc al, byte [rax]
syscall
not byte [rcx]
add byte [rbx + 0x12980510], al
add byte [rcx + 0x12870510], bl
add dh, bh
adc bl, cl
add dword [rax], eax
add bh, bh
inc dword [rcx]
or esi, dword [rdx - 0x21]
xchg eax, ecx
or dword [rax], eax
mov dl, 9
add eax, 0xffff0000
add dword [rax], edx
and al, 0xbf
add dword [rax], eax
add byte [rcx + 0x3af7b02], cl
add ah, al
add eax, dword [rip - 0x10000]
add dword [rax], eax
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
rdmsr
add eax, 0x1830000
add eax, 0x8b0002b5
add bh, byte [rax]
add byte [rax], al
inc dword [rcx]
rdmsr
add eax, 0x1830000
add eax, 0x800002aa
add bh, byte [rax]
add byte [rax], al
inc dword [rcx]
add byte [rax], al
inc dword [rbx]
sbb eax, 0x5681401
add byte [rax], al
js 0x40a743
stc
add dword [rcx], eax
xchg eax, esp
add al, byte [rip - 0x58fffd67]
add al, byte [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add bh, bh
add ebx, dword [rip + 0x5681401]
add byte [rax], al
js 0x40a763
stc
add dword [rcx], eax
xchg eax, esp
add al, byte [rip - 0x58fffd67]
add al, byte [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add bh, bh
add esp, dword [rip + 0x1c221a01]
add byte [rax], al
mov ah, 1
add eax, 0xe60102d7
add dword [rdx], edi
add byte [rax], al
mov eax, dword [rbx]
rol byte [r11], 1
add dh, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
add ebx, dword [rcx]
add dword [rcx], edx
cwde
add dword [rip - 0x45fefe61], eax
add dword [rip - 0x32fffe41], eax
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rbx]
sbb dword [rcx], eax
adc dword [rax + 0x19f0501], ebx
add dword [rdx + 0x1bf0501], edi
add ch, cl
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rcx]
adc byte [rbx + 5], bl
movabs byte [0x1a01d01810001], al
movsd dword [rdi], dword ptr [rsi]
add dword [rip - 0x10000], eax
add dword [rbx], ecx
add dword [rip - 0x46fffe5b], eax
add dword [rip - 0x10000], eax
add dword [rbx], ecx
add dword [rip - 0x46fffe5b], eax
add dword [rip], eax
inc dword [rbx]
sbb dword [rcx], eax
movntps xmmword [rip + 0x18e0173], xmm0
add eax, 0xa1000193
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x402b
add byte [rax], al
add byte [rax], ah
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax + rax*2], 0
add byte [rax], al
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rbx + rdi*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 0x4007], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdi], 0
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
adc byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x400f], cl
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx], ah
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi + 0x60], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 0x14
add byte [rax], al
add byte [rax], al
add dh, al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add dh, ah
adc al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
push rsi
adc eax, 0x40
add byte [rax], al
adc ax, 0x40
add byte [rax], al
add byte [rax], al
jbe 0x40b08f
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4015], al
add byte [rax], al
add byte [rsi + 0x4015], dl
add byte [rax], al
add byte [rsi + 0x4015], ah
add byte [rax], al
add byte [rsi + 0x4015], dh
add byte [rax], al
add dh, al
adc eax, 0x40
add byte [rax], al
adc eax, 0x40
add byte [rax], al
out 0x15, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4016], al
add byte [rax], al
add byte [rsi + 0x4016], dl
add byte [rax], al
add byte [rsi + 0x4016], ah
add byte [rax], al
add byte [rsi + 0x4016], dh
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x17], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40b1f8
je 0x40b201
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40b20f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40b20c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 0x4007], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rdx], ah
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
mov byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax], bl
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, byte [rax]
js 0x40b2c2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0x4014], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
movabs al, byte [0x4014]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40176000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0x17], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rbx + rdi*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x7b], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + 0x407c], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax - 0x7c], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x411452
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x60adf800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax - 0x4f], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax + 0x60b1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4017], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], ah
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add al, dl
mov ah, 0x60
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x60adf800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x18], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x4115ea
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax + 0x407b], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add cl, dl
mov ah, 0x60
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x407b], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x407b], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x7c], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2000001], ah
add byte [rsi], cl
add byte [rax + 0x402b], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dl
add byte [rax], al
add al, byte [rax]
add byte [rsi + 0x402b], bh
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], bh
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
add byte [rsi + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dl
add byte [rcx], dl
add byte [rax + 0x407c], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000001], ch
add byte [rcx], bl
add byte [rax], al
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], bh
add byte [rax + rax], dl
clc
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
call 0x41176a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x20000028], dh
add byte [rdx], bl
add byte [rax - 0x4f], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x402d], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 2], dl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
xor byte [rcx + 0x60], 0
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], ah
add byte [rax], al
and al, byte [rax]
add cl, bl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000002], ah
add byte [rsi], cl
add byte [rsi], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rsi + 0x1b], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 9], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld qword [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x5b], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax], dh
add byte [rax], al
and al, byte [rax]
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x40b7a5
add byte [rax], al
and al, byte [rax]
add al, bl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rip + 0x22000004], bl
add byte [rsi], cl
add bh, ch
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 4
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loop 0x40b7ee
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x38], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add eax, 0x220000
add byte [rax + 0x5a], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 5], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x30], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000005], bl
add byte [rsi], cl
add byte [rsp + rdx*2 + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
add eax, 0x220000
add byte [rdx], ah
jne 0x40b893
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x22000006
add byte [rsi], cl
add byte [rsi + 0x59], dh
add byte [rax], al
add byte [rax], al
add bh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x39], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
and al, byte [rax]
add al, dl
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
and al, byte [rax]
add al, dl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], dl
add byte [rdx], ah
add byte [rsi], cl
add dl, bl
push rsi
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 7
add byte [rax], al
and al, byte [rax]
add byte [rbx + rdi + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and cl, byte [rax]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rax], ecx
add byte [rax], al
and al, byte [rax]
add ah, ah
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000008], dh
add byte [rsi], cl
add al, ah
push rax
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add cl, bh
cmp eax, 0x40
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x34], dh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword fs:[rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x7a], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x40b9a3
add byte [rax], al
and al, byte [rax]
add byte [rsp + rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx + rcx + 0x220000], ah
add byte [rsi*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp cl, byte [rdx]
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x7b], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xa], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4053], cl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xa], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + rbx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000a], ah
add byte [rsi], cl
add al, dl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4e], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1200000b], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000028], bh
add byte [rsi], cl
add byte [rax + 0x17], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, dl
add byte cs:[rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x404b], ah
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x55], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xc], dh
add byte [rax], al
and al, byte [rax]
add bh, bl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000c], dh
add byte [rsi], cl
add al, cl
push rsi
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
or eax, 0x220000
add byte [rdx + 0x4074], ch
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or rax, 0x220000
add byte [rsi + 0x34], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], ah
add byte [rdx], dl
add byte [rsi], cl
add byte [rsi + 0x18], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rcx + 0xd], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4045], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rcx + 0x220000], dh
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x39], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xe], dl
add byte [rax], al
and al, byte [rax]
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x3b], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], bh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000f], ah
add byte [rsi], cl
add byte [rsi], bl
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], bh
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rax], edx
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbx*2 + 0x40], dl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x10, 0
and al, byte [rax]
add byte [rsi + 0x406d], bl
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x11], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc word [rax], ax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x6b], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4039], dl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4038], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
sbb eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12], cl
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000012], al
add byte [rsi], cl
add byte [rax + 0x2f], cl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add ah, ah
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], al
add byte [rdx], dl
add byte [rdi], cl
add byte [rbx + rdi*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x13], al
add byte [rax], al
and al, byte [rax]
add ah, ch
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ss, word [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4039], dh
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x12000013
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
adc eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add cl, ah
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000014], dh
add byte [rsi], cl
add byte [rax + 0x37], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x14], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4d], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add bh, dh
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
adc eax, 0x220000
add byte [rcx + 0x4e], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rip + 0x220000], dl
add byte [rdx + 0x3d], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
adc eax, 0x220000
add byte [rdx], bh
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
adc eax, 0x220000
add byte [rsi + 0x55], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x2f], cl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rsi + rdx], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4038], dl
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x11000016], ah
add byte [rbx], bl
add byte [rax + 0x60b2], ah
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000016], bh
add byte [rsi], cl
add byte [rax + 0x2e], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4073], dh
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x40bf99
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000017], bl
add byte [rsi], cl
add byte [rbx + 0x78], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x403d], ch
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
prefetchnta byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add cl, bl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x18], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000018], cl
add byte [rsi], cl
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
sbb byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
jo 0x40c08b
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rdx + 0x19], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4038], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000019], dl
add byte [rsi], cl
add byte [rsi], bl
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000019], bh
add byte [rsi], cl
add byte [rcx + rdi*2], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x403a], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1a], ch
add byte [rax], al
and al, byte [rax]
add byte [rbx], ah
jbe 0x40c103
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, byte [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x406b], bh
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbp*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x3d], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dh
push 0x40
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rip + 0x220000], ebx
add dl, al
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1d], ah
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4040], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
ficomp word [rip + 0x120000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
sbb eax, 0x220000
add byte [rax + 0x4078], ch
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1e], ah
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1e], ch
add byte [rax], al
and al, byte [rax]
add byte [rdi], bl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x32], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 1], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200001f], bh
add byte [rsi], cl
add byte [rsi + 0x40], bl
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x20], cl
add byte [rax], al
adc al, byte [rax]
add dh, ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add dh, al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000020], cl
add byte [rsi], cl
add byte [rdi + rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rax*2 + 0x40], bh
add byte [rax], al
jnp 0x40c262
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x40c28b
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4038], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000021], bl
add byte [rsi], cl
add byte [rsi + 0x4074], bh
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4037], cl
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x59], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
and al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0x4015], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4044], dh
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x23], ch
add byte [rax], al
and al, byte [rax]
add byte [rcx + rdi*2], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
jne 0x40c373
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x24], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x24], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rdx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
and eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x110000
adc byte [rax], al
jnp 0x40c403
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x40c3f7
add byte [rax], al
adc al, byte [rax]
add byte [rcx + rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rdx + 2], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0x25
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x73], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte es:[rax], al
and al, byte [rax]
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rbx + 0x26], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
xor eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000026], bl
add byte [rsi], cl
add byte [rax + 0x4d], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
add byte es:[rax], al
and al, byte [rax]
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x406e], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000027], ch
add byte [rsi], cl
add ch, ch
sub eax, 0x40
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x27], bh
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x40], ch
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0x27
add byte [rax], al
and al, byte [rax]
add byte [rbx + rsi*2 + 0x40], cl
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x2f], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rcx + 0x20000028], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x10000028], dh
add byte [rdx], bl
add byte [rax - 0x4f], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], al
jns 0x40c56b
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
jo 0x40c583
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword ds:[rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x55], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x29], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4b], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000029], ah
add byte [rsi], cl
add byte [rsi + 0x406d], bl
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
sub al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2a], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x39], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200002a], dh
add byte [rsi], cl
add byte [rdx + 0x4045], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4039], dl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp], al
add byte [rax], al
and al, byte [rax]
add bl, dl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jl 0x40c655
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4077], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4035], cl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp + 0x220000], bh
add byte [rax + 0x4039], dl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rcx*2 + 0x40], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, dx
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp al, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x2200002c
add byte [rsi], cl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x67], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200002d], cl
add byte [rsi], cl
add al, al
jne 0x40c733
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp + 0x220000], dh
add byte [rdi + rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
sub eax, 0x220000
add byte [rdi + rcx*2 + 0x40], cl
add byte [rax], al
push rsp
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200002e], bl
add byte [rsi], cl
add byte [rsp + rsi*2], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4064], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x73], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200002f], al
add byte [rsi], cl
add byte [rsi + 0x44], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add dl, bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x406e], dl
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x67], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000030], dl
add byte [rsi], cl
add byte [rip + 0x403a], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
div byte [rax]
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4074], bh
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], r8d
add byte [rdx], ah
add byte [rsi], cl
add cl, bl
ja 0x40c853
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rdx], al
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4075], ah
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, ch
add byte [rax], al
add byte [rax], al
add ch, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
xor eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x33], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x42], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add bh, bl
jne 0x40c8fb
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rdi*2 + 0x40], dl
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x22000034
add byte [rsi], cl
add byte [rbx + 0x405b], dl
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dh, byte [rip + 0x220000]
add byte [rax], cl
add byte [eax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x35], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x34], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000035], ah
add byte [rsi], cl
add byte [rdx + 0x34], dh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x220000
add byte [rax + 0x407a], bh
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
xor eax, 0x220000
add ah, ch
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rsi], esi
add byte [rax], al
and al, byte [rax]
add byte [rsp + rax*2 + 0x40], bh
add byte [rax], al
jnp 0x40c982
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x22000036
add byte [rsi], cl
add dh, cl
push 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rsi], bl
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x75], dh
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rsi], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], ch
push rdi
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11000037], ah
add bl, byte [rdx]
add byte [rax + 0x60b1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rsi + 0x220000], ch
add dl, bh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
and al, byte [rax]
add dh, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x40ca52
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
sal byte [rbx + 0x60], 0
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rdi + 0x220000], dl
add byte [rax], bl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sar byte [rax], 0
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0x38
add byte [rax], al
and al, byte [rax]
add dh, cl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x22000039
add byte [rsi], cl
add byte [rbx + 0x79], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x39], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
cmp eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x11000039], cl
add bl, byte [rdx]
add byte [rax - 0x4f], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000039], bl
add byte [rsi], cl
add al, dh
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4043], bl
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
and edi, dword [rdx]
add byte [rax], al
and al, byte [rax]
add bh, bl
jne 0x40cb3b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3a], dl
add byte [rax], al
and al, byte [rax]
add ah, ch
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x40cb5c
add byte [rax], al
and al, byte [rax]
add cl, al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200003a], ah
add byte [rsi], cl
add dh, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], cl
xor eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200003b], cl
add byte [rsi], cl
add byte [rdx + 0x55], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
add byte ss:[rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x1240cbf0
add byte [rsi], cl
add al, dl
jp 0x40cbfb
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
jne 0x40cc13
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x3c], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x55], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x3c], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200003c], ah
add byte [rsi], cl
add dh, al
add byte [eax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], al
jns 0x40cc8b
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
cmp eax, 0x220000
add byte [rsi + 0x54], ch
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rbx + 0x2200003d], bl
add byte [rsi], cl
add byte [rdi + rdx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add ah, bh
cmp eax, 0x220000
add al, dl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte ds:[rax], al
and al, byte [rax]
add byte [rbp + 0x4078], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3e], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add byte ds:[rax], al
and al, byte [rax]
add byte [rax + 0x403d], ch
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200003e], ch
add byte [rsi], cl
add byte [rbx + rcx*2 + 0x40], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
and al, byte [rax]
add byte [rsi + 0x39], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte ds:[rax], al
and al, byte [rax]
add byte [rdx], ah
add byte [eax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], bh
push rdi
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x3f], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add byte [rax], al
and al, byte [rax]
add byte [rcx], cl
jae 0x40cdab
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rcx
add byte [rax], al
and al, byte [rax]
add dh, dl
xor eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0x40
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld qword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rcx], ch
add byte [r8], al
and al, byte [rax]
add byte [rbx], ah
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x41], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4056], dh
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000041], dh
add byte [rsi], cl
add byte [rcx + rdi*2], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x68], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000042], ch
add byte [rsi], cl
add byte [rbx], ah
sub eax, 0x40
add byte [rax], al
retf 0
add byte [rax], al
add byte [rax], al
add bl, bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x402e], ah
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [r8], al
and al, byte [rax]
add dl, bh
add byte fs:[rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add dh, al
add byte [r8], al
and al, byte [rax]
add byte [rdx + rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
add byte [r8], al
and al, byte [rax]
add byte [rbx + rbx*2 + 0x40], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], r8b
and al, byte [rax]
add byte [rdx + 0x63], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
add byte [rax], r8b
and al, byte [rax]
add byte [rsi], dl
push 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x44, 0
and al, byte [rax]
add byte [rdx + 0x4043], bl
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[r8], r8b
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x40cf3f
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x36], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], r8b
and al, byte [rax]
add byte [rbx + 0x404b], ch
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x46], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], cl
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax*2], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x3b], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi + rax*2], ch
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
xor byte [rcx + 0x60], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [r8], r8b
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rdi], eax
add byte [rdx], ah
add byte [rsi], cl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add byte [r8], r8b
and al, byte [rax]
add byte [rdx], ah
jne 0x40cfeb
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdi], bl
add byte ds:[rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000048], cl
add byte [rsi], cl
add byte [rdx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add dl, bl
add byte [rax], al
and al, byte [rax]
add bh, ah
js 0x40d033
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx*2], bl
add byte [rax], al
and al, byte [rax]
add dl, bh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x49], cl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4030], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x49], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + rbx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000049], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
add byte [r8], al
and al, byte [rax]
add byte [rsi + 0x45], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
add byte [r8], al
and al, byte [rax]
add byte [rcx + rdi*2], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x4a], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx*2 + 0x220000], bh
add byte [rcx*2 + 0x40], bl
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
and al, byte [rax]
add byte [rax + 0x4038], dl
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4b], ch
add byte [rax], al
and al, byte [rax]
add al, cl
jns 0x40d13b
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200004b], bl
add byte [rsi], cl
add byte [rax + 0x404b], ah
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
add byte [r8], al
and al, byte [rax]
add byte [rsi + 0x406b], ch
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], r8b
and al, byte [rax]
add byte [rsp + rdi + 0x40], dh
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4c], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
jne 0x40d19b
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, 0x4c
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
add byte [rax], r8b
and al, byte [rax]
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
add byte [rax], r8b
and al, byte [rax]
add byte [rbp + rdi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [r8], r8b
and al, byte [rax]
add byte [rdx + 0x2c], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
and al, byte [rax]
add dh, ah
push rbx
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200004d], ch
add byte [rsi], cl
add byte [rbx + rsi + 0x40], dh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisttp dword [rbp]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x402c], cl
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ecx, dword [rsi]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x4e], cl
add byte [rax], al
and al, byte [rax]
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx*2 + 0x220000], cl
add byte [rax + 0x3e], bl
add byte [rax], al
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], r8b
and al, byte [rax]
add byte [rax + 0x2e], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
add byte [rax], r8b
and al, byte [rax]
add dl, ch
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rcx + 0x4f], al
add byte [rax], al
and al, byte [rax]
add dh, bl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add byte [r8], r8b
and al, byte [rax]
add byte [rdi], bl
add byte ds:[rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
push rax
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x405e], bh
add byte [rax], al
add ah, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add ch, al
push rax
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
push rcx
add byte [rax], al
and al, byte [rax]
add bh, ah
js 0x40d333
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x51], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
push rcx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x5a], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
push rcx
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdx*2], bl
add byte [rax], al
and al, byte [rax]
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x52], bh
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x78], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
push rdx
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40], bl
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000053], bl
add byte [rsi], cl
add byte [rsp + rax*2], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
push rsp
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x405a], dh
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
push rsp
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x40], dl
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x54], bh
add byte [rax], al
and al, byte [rax]
add byte [rbx], bh
pop rbp
add byte [rax], al
add byte [rax], al
add bl, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
push rbp
add byte [rax], al
and al, byte [rax]
add byte [rdi + rsi + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
push rbp
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4053], cl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x55], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4030], bl
add byte [rax], al
add byte [rbx + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ss, word [rbp]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x55], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000055], dh
add byte [rsi], cl
add byte [rdx + 0x6d], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax], bl
add byte [rax], al
xchg dword [rsi], edx
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4049], bl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 1
add byte [rax], dl
add byte [rbx], bl
add al, bl
mov ah, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
push rsi
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdi
add byte [rax], al
and al, byte [rax]
add al, dl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x57], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4038], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x57], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
push 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0x12000057], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
push rdi
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x406e], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x45], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rcx
pop rax
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000058], bh
add byte [rsi], cl
add dl, ch
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x40d613
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4055], cl
add byte [rax], al
add bh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
pop rdx
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbp*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x5a], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40d65c
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
pop rdx
add byte [rax], al
and al, byte [rax]
add ch, ah
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200005a], ah
add byte [rsi], cl
add byte [rdx], cl
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
pop rdx
add byte [rax], al
and al, byte [rax]
add byte [rsi], bl
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
pop rbx
add byte [rax], al
and al, byte [rax]
add byte [rdx], cl
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
pop rbx
add byte [rax], al
and al, byte [rax]
add byte [rdx + rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbx*2], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], al
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200005b], dl
add byte [rsi], cl
add byte [rax + 0x4064], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
pop rbx
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x37], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx*2], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x66], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x5c], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4078], ch
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
pop rsp
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x38], ch
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add dl, bl
pop rsp
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3e], bl
add byte [rax], al
add byte [rax], al
add dl, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x402c], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x5d], dl
add byte [rax], al
and al, byte [rax]
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200005d], dl
add byte [rsi], cl
add byte [rdx + 0x4033], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x39], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
pop rbp
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4074], bh
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rsi], ebx
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0x4016], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1200005e], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200005e], bl
add byte [rsi], cl
add byte [rbx], ah
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
pop rsi
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
pop rdi
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jl 0x40d889
add byte [rax], al
and al, byte [rax]
add byte [rsi + rcx*2 + 0x40], ch
add byte [rax], al
loopne 0x40d83a
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc esp, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x56], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0xd4000e0022000060], eax
add byte [eax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4039], dh
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or esp, dword [rcx]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4078], ch
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x61], dh
add byte [rax], al
and al, byte [rax]
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
xor byte [rcx + 0x60], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000061], dh
add byte [rsi], cl
add byte [rax + 0x30], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x22000062
add byte [rsi], cl
add byte [rsi], bl
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
and al, byte [rax]
add ah, ah
imul eax, dword [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000062], dh
add byte [rsi], cl
add dh, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
movsxd rax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x63], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x40d9f5
add byte [rax], al
and al, byte [rax]
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte fs:[rax], al
and al, byte [rax]
add byte [rax], bh
push rdi
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x64], bh
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4039], bl
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000064], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000064], bh
add byte [rsi], cl
add byte [rsi + 0x59], dh
add byte [rax], al
add byte [rax], al
add bh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4078], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000065], ch
add byte [rsi], cl
add byte [rdi + rsi + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte gs:[rax], al
and al, byte [rax]
add byte [rdx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
and al, byte [rax]
add dh, dl
xor eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rsi], ah
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
add byte [rax], al
and al, byte [rax]
add al, dl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [eax], al
and al, byte [rax]
add dh, dl
jns 0x40dafb
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x12000067
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x67], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi], bl
push rbp
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add byte [eax], al
and al, byte [rax]
add byte [rax + 0x4062], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax], ebp
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], cl
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
push 0x220000
add byte [rdx + 0x4055], cl
add byte [rax], al
add bh, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
push 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0x69
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbx*2], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x69], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4078], ch
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
imul eax, dword [rax], 0xe002200
add bh, cl
jo 0x40dbd3
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx + rbp*2], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x406b], cl
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
push 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
imul eax, dword [rax], 0
and al, byte [rax]
add byte [rsi], ah
push rsp
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x6b], bh
add byte [rax], al
and al, byte [rax]
add byte [rbx], cl
pop rbx
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rax], 0
and al, byte [rax]
add byte [rax + 0x4039], dl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
imul eax, dword [rax], 0
and al, byte [rax]
add ah, ch
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x6c
add byte [rax], al
and al, byte [rax]
add ah, al
cmp eax, 0x40
add byte [rax], al
xor eax, 0
add byte [rax], al
add byte [rcx + 0x6c], cl
add byte [rax], al
adc al, byte [rax]
add byte [rcx + rbp + 0x40], ch
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add bl, dh
cmp eax, dword [rax]
add byte [rdx], dl
add byte [rbx], cl
add byte [rax + 0x4014], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x6c], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4074], bh
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
insb byte [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rbx + rdi + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
insb byte [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp al, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
insd dword [rdi], dx
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x40dd50
je 0x40dd54
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40dd06
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40dd84
jb 0x40dd8a
pop rdi
jne 0x40dd93
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x40dd8d
je 0x40dd89
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40dda9
jb 0x40ddaf
pop rdi
jne 0x40ddb8
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40ddbb
jns 0x40ddab
outsb dx, byte gs:[rsi]
je 0x40ddc2
jns 0x40dd52
jb 0x40ddb6
insd dword [rdi], dx
pop rdi
jne 0x40ddc8
insd dword [rdi], dx
jns 0x40dd5e
pop rdi
pop rdi
jb 0x40ddc4
insd dword [rdi], dx
pop rdi
jne 0x40ddd6
insd dword [rdi], dx
jns 0x40ddcb
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40ddd6
jns 0x40ddd6
outsb dx, byte gs:[rsi]
je 0x40dded
jns 0x40dd7d
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ddd4
xor dword [rcx], edi
jo 0x40ddf5
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40de0d
jb 0x40de10
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x40ddef
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x40ddfe
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40de1d
jb 0x40de28
add byte [rdi + 0x5a], bl
push rbx
je 0x40de13
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
pop rdx
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x31456969
cmp dword [rdi + 0x5f], ebx
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x40de79
je 0x40de71
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x40de7f
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x40de95
jb 0x40de98
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x40dead
pop rdi
pop r15
pop rdi
pop rdx
cmp dword [rcx + 0x6c], esp
je 0x40dea8
jb 0x40deb3
je 0x40dead
xor eax, 0x31787863
xor dword [rcx + 0x63], ebp
movsxd rax, dword [rax]
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40df02
jns 0x40df02
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40df13
jns 0x40df13
jae 0x40df2a
jb 0x40df2d
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x40defc
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40df31
push r10
push rbx
je 0x40df09
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40df48
movsxd rbx, dword [rdi + 0x73]
je 0x40df56
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40df51
je 0x40df66
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x40df39
jb 0x40df70
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40df74
pop rdi
jb 0x40df77
jb 0x40df7b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40df91
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40df60
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40dfa7
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40df83
xor eax, 0x74695f5f
jb 0x40dfb9
movsxd rbp, dword [rdi + 0x6d]
jo 0x40dfbe
jbe 0x40dfc2
insb byte [rdi], dx
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x40dfce
insb byte [rdi], dx
jae 0x40dfe6
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
push rbx
je 0x40dfb1
xor dword [rdi + 0x54], ebx
jne 0x40dff5
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rdx
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x5f006969
pop rdx
push rbx
je 0x40dfec
xor bl, byte [rdi + 0x5f]
jne 0x40e02d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40e048
pop rdi
push r11
je 0x40e006
xor ebp, dword [rbp + 0x6f]
jbe 0x40e03f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e01c
jo 0x40e04b
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x6153525f
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e075
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e07e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e072
push rbx
je 0x40e060
jo 0x40e08f
imul esi, dword [rdx + 0x49], 0x45456369
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x40e0af
jb 0x40e0b2
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x40e09c
push rsp
pop rdi
jo 0x40e0a0
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40e08c
pop rdi
pop rdi
jne 0x40e0cd
jne 0x40e0c3
jb 0x40e0c8
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40e0e2
jb 0x40e0e9
push r11
je 0x40e0aa
jb 0x40e0e1
jbe 0x40e0e3
jb 0x40e0f3
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e0f2
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e10b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e0e2
jo 0x40e111
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40e0ef
jbe 0x40e120
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40e14b
xor dword [rip + 0x6574495f], esi
jb 0x40e13f
insb byte [rdi], dx
jae 0x40e157
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40e12b
pop rdi
pop rdi
imul ebp, dword [rsi + 0x74], 0x6f736f72
jb 0x40e17a
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
outsd dx, dword [rsi]
jo 0x40e155
push rbx
je 0x40e140
jb 0x40e177
jbe 0x40e179
jb 0x40e189
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e188
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e1a1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e178
jo 0x40e1a7
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40e185
jbe 0x40e1b6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40e1e2
xor dword [rip + 0x6574495f], esi
jb 0x40e1d6
insb byte [rdi], dx
jae 0x40e1ee
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40e1c6
xor byte [rdi + 0x5f], bl
je 0x40e201
jb 0x40e20a
ja 0x40e1fc
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40e20b
pop rdi
jb 0x40e219
outsd dx, dword [rsi]
jb 0x40e1fa
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x40e1f4
insd dword [rdi], dx
jo 0x40e20e
movsxd rbp, dword [rcx + 0x53]
je 0x40e1fe
insb byte [rdi], dx
jae 0x40e241
movsxd rax, dword [r13 + 0x53]
push r11
je 0x40e20b
jo 0x40e23a
imul esi, dword [rdx + 0x49], 0x4569634b
cmp byte [r11 + 0x65], r13b
jns 0x40e246
movsxd rbp, dword [rdi + 0x6d]
jo 0x40e231
jbe 0x40e1ee
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e257
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e260
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e254
push rbx
je 0x40e242
jo 0x40e271
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e268
pop rdi
push rdx
pop rdi
je 0x40e2a8
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40e27a
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40e29e
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40e290
insb byte [rdi], dx
jae 0x40e2d3
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40e2ae
pop rdi
push rdx
pop rdi
je 0x40e2ee
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40e2c0
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40e2e4
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40e2d6
insb byte [rdi], dx
jae 0x40e319
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
pop rdi
pop r15
outsb dx, byte gs:[rsi]
jbe 0x40e2bb
pop rdi
pop rdx
push rbx
je 0x40e2f5
jo 0x40e324
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r9 + 0x4a], ecx
push rdx
push rbx
xor byte [rdi + 0x45], bl
push r11
je 0x40e30c
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40e35e
jb 0x40e361
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x40e328
je 0x40e36a
jo 0x40e363
jo 0x40e351
pop rdi
push r11
xor eax, 0x444a495f
jo 0x40e35c
xor byte [rdi + 0x45], bl
add byte [r15 + 0x5a], r11b
push rbx
je 0x40e34b
pop rdi
push rdx
pop rdi
je 0x40e38b
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40e35d
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40e381
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40e373
insb byte [rdi], dx
jae 0x40e3b6
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rbp, dword [rdi + 0x6e]
jae 0x40e3cc
jb 0x40e3cf
movsxd rsi, dword [rdi + rbx*2 + 0x6e]
outsd dx, dword [rsi]
push rdx
push r11
je 0x40e39a
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40e3ec
jb 0x40e3ef
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x40e3b6
je 0x40e3f8
jo 0x40e3f1
push rdx
push rbx
xor dword [rdi + 0x45], ebx
push r11
pop rdi
jbe 0x40e3ea
push rbx
je 0x40e3ce
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40e416
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
jo 0x40e402
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40e3ed
xor dword [rdi + 0x54], ebx
jne 0x40e431
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
movsxd r8, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40e417
pop rdi
jae 0x40e458
jb 0x40e455
jns 0x40e431
push rax
push rbx
je 0x40e420
jo 0x40e44f
imul esi, dword [rdx + 0x49], 0x53456369
xor dword [rdi + 0x45], ebx
jbe 0x40e44e
pop rdi
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40e43e
xor dword [rdi + 0x54], ebx
jne 0x40e482
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rdx
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40e46a
pop rdi
push rdx
pop rdi
je 0x40e4aa
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40e47c
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40e4a0
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40e492
insb byte [rdi], dx
jae 0x40e4d5
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
pop rdi
push rbx
pop rdi
imul esp, dword [rbp + 0x79], 0x45
push rax
push r11
je 0x40e4ab
cmp byte [rdi + 0x52], bl
pop rdi
je 0x40e4f3
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x40e4f2
add byte [rdi + 0x5a], bl
push rbx
je 0x40e4ca
outsw dx, word [rsi]
jb 0x40e50e
jb 0x40e4fe
push r11
je 0x40e4d3
je 0x40e515
jo 0x40e50e
push rdx
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x40e4e4
jb 0x40e51b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40e51f
pop rdi
jb 0x40e522
jb 0x40e526
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor al, 0x5f
xor al, 0x74
jns 0x40e53d
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40e507
xor dword [rdi + 0x54], ebx
jne 0x40e54b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
movsxd r8, dword [r13 + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x40e547
imul eax, dword [rax + 0x40], 0x42494c47
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40e547
xor ebp, dword [rbp + 0x6f]
jbe 0x40e580
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x40e588
push r11
je 0x40e559
jb 0x40e590
jbe 0x40e592
jb 0x40e5a2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e5a1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e5ba
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e591
jo 0x40e5c0
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40e59e
jbe 0x40e5cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop r15
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x40e5c5
jb 0x40e5fc
jbe 0x40e5fe
jb 0x40e60e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e60d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e626
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e5fd
jo 0x40e62c
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40e60a
jbe 0x40e63b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
jo 0x40e657
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40e62b
pop rdi
jae 0x40e66c
jb 0x40e669
jns 0x40e645
push rax
push rbx
je 0x40e634
jo 0x40e663
imul esi, dword [rdx + 0x49], 0x45456369
jbe 0x40e65f
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40e647
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e688
push r11
je 0x40e65b
jo 0x40e68a
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e675
jae 0x40e6ba
jo 0x40e68f
movsxd rax, dword [rbp + 0x76]
push rdx
push rsp
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40e688
pop rdi
push rdx
pop rdi
je 0x40e6d0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x40e6a1
jo 0x40e6d0
imul esi, dword [rdx + 0x49], 0x4569634b
jbe 0x40e67c
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40e6e6
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x6d5f6465
insd dword [rdi], dx
jne 0x40e702
push r11
je 0x40e6d4
jo 0x40e703
imul esi, dword [rdx + 0x49], 0x4569634b
pop rdi
pop r15
jb 0x40e6f8
jbe 0x40e6b5
pop rdi
pop rdx
push rbx
je 0x40e6f1
outsw dx, word [rsi]
jb 0x40e735
jb 0x40e725
push r11
je 0x40e6f9
jo 0x40e728
imul esi, dword [rdx + 0x49], 0x45456369
push r12
pop rdi
push rdx
push rbx
je 0x40e707
jb 0x40e73e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40e742
pop rdi
jb 0x40e745
jb 0x40e749
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x40e760
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40e764
je 0x40e743
imul esp, dword [rbx + 0x45], 0x534b5262
je 0x40e737
jo 0x40e766
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor eax, 0x5f5f005f
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
push r11
je 0x40e75c
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40e7a4
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x40e771
jo 0x40e7a0
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e7b6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e7bf
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e7b3
push rbx
je 0x40e7a1
jo 0x40e7d0
imul esi, dword [rdx + 0x49], 0x45456369
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e7b2
xor dword [rdi + 0x54], ebx
jne 0x40e7f6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rdx
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40e7dd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40e81c
movsxd rbx, dword [rdi + 0x73]
je 0x40e82a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40e825
je 0x40e83a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul ebp, dword ss:[rsi + 0x73], 0x45747265
insd dword [rdi], dx
push rdx
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push r11
je 0x40e82c
jb 0x40e863
jbe 0x40e865
jb 0x40e875
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e874
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e88d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e864
jo 0x40e893
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40e871
jbe 0x40e8a2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor al, 0x62
jae 0x40e8ba
jbe 0x40e858
pop rdi
pop rdx
push r11
je 0x40e896
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40e8d5
movsxd rbx, dword [rdi + 0x73]
je 0x40e8e3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40e8de
je 0x40e8f3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x40e906
jae 0x40e908
jb 0x40e8db
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e8e5
jbe 0x40e916
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40e8ed
jo 0x40e91c
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
jb 0x40e92e
imul ebp, dword gs:[esi + 0x45], 0x5a5f0076
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e93c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e945
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e939
push rbx
je 0x40e927
jo 0x40e956
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40e938
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40e980
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x40e94d
jo 0x40e97c
imul esi, dword [rdx + 0x49], 0x4569634b
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e964
jbe 0x40e995
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40e96c
jo 0x40e99b
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e9b6
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40e992
xor eax, 0x61765f5f
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x40e9cc
imul esi, dword [rbp + 0x72], 0x30534e45
pop rdi
xor dword [rip + 0x6574495f], esi
jb 0x40e9dd
insb byte [rdi], dx
jae 0x40e9f5
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
push rbx
je 0x40e9c7
pop rdi
push rdx
pop rdi
je 0x40ea07
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40e9d9
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40e9fd
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40e9ef
insb byte [rdi], dx
jae 0x40ea32
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
pop r15
jb 0x40ea3a
push 0x736f6d74
je 0x40ea1e
jbe 0x40e9db
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40ea45
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ea4e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ea42
push rbx
je 0x40ea2d
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40ea75
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x40ea42
jo 0x40ea71
imul esi, dword [rdx + 0x49], 0x4569634b
cmp byte [r13 + 0x61], r13b
js 0x40ea7d
jae 0x40ea89
jp 0x40ea87
jbe 0x40ea25
pop rdi
pop rdx
push rbx
je 0x40ea5c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ea9d
push r11
je 0x40ea70
jo 0x40ea9f
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40ea8b
jo 0x40eaba
imul esi, dword [rdx + 0x49], 0x31745350
cmp byte [rdi + 0x52], bl
pop rdi
je 0x40ead9
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x40ead8
push rbx
xor dword [rdi + 0x45], ebx
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x53], ebx
xor al, 0x5f
jbe 0x40eac8
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40eaca
pop rdi
push rdx
pop rdi
je 0x40eb0a
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40eadc
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40eb00
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40eaf2
insb byte [rdi], dx
jae 0x40eb35
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
pop rdi
push rbx
pop rdi
insb byte [rdi], dx
je 0x40eb1b
push rax
push rbx
je 0x40eb0b
cmp byte [rdi + 0x52], bl
pop rdi
je 0x40eb53
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x40eb52
add byte [rdi + 0x5a], bl
push rbx
je 0x40eb25
xor dword [rdi + 0x54], ebx
jne 0x40eb69
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
movsxd r8, dword [r13 + 0x45]
xor al, byte [r13 + 0x4f]
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40eb4d
je 0x40eb8f
jo 0x40eb88
push rdx
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40eb94
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40eb9d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40eb91
push rbx
je 0x40eb7f
jo 0x40ebae
imul esi, dword [rdx + 0x49], 0x45456369
cmp dword [rbx + 0x6f], esp
outsb dx, byte [rsi]
jae 0x40ebce
jb 0x40ebd1
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor bl, byte [rdi + 0x4a]
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x40ebbb
push rsp
pop rdi
jo 0x40ebbf
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40ebb2
pop rdi
push rdx
pop rdi
je 0x40ebf2
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40ebc4
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40ebe8
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40ebda
insb byte [rdi], dx
jae 0x40ec1d
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r14b, byte [r10]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40ec2a
movsxd rsp, dword [rbp + 0x5f]
push 0x5f746e69
jne 0x40ec37
imul esi, dword [rcx + 0x75], 0x524a4965
push r11
je 0x40ec06
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40ec58
jb 0x40ec5b
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x40ec22
je 0x40ec64
jo 0x40ec5d
push rdx
push rbx
xor dword [rdi + 0x45], ebx
push r11
pop rdi
push r11
je 0x40ec38
pop rdi
push rdx
pop rdi
je 0x40ec80
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x40ec53
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40ec9a
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40eca4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
jo 0x40ec90
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40ec80
outsw dx, word [rsi]
jb 0x40ecc4
jb 0x40ecb4
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x40ec8c
jb 0x40ecc3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40ecc7
pop rdi
jb 0x40ecca
jb 0x40ecce
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x40ece5
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40ecaf
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40ece4
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40ecee
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x40ecf6
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x53], eax
je 0x40ecce
jb 0x40ed05
jbe 0x40ed07
jb 0x40ed17
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ed16
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ed2f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ed06
jo 0x40ed35
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40ed13
jbe 0x40ed44
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop r15
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40ed40
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ed7f
movsxd rbx, dword [rdi + 0x73]
je 0x40ed8d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ed88
je 0x40ed9d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40edcd
jb 0x40edd0
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40edc2
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40ede3
jae 0x40ed73
pop rdi
pop rdx
push r11
je 0x40edb0
jbe 0x40ede1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40edb8
jo 0x40ede7
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
cmp byte [r13 + 0x61], r13b
js 0x40edf8
jae 0x40ee04
jp 0x40ee02
jbe 0x40eda0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ee09
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ee12
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ee06
push rbx
je 0x40edf1
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40ee39
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x40ee06
jo 0x40ee35
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40ee57
jb 0x40ee5a
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor al, 0x5f
push rdx
push r11
je 0x40ee23
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40ee75
jb 0x40ee78
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x40ee3f
je 0x40ee81
jo 0x40ee7a
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
jbe 0x40ee71
push rsp
pop rdi
jo 0x40ee75
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40ee71
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40ee7c
imul esi, dword [rbp + 0x72], 0x6177735f
jo 0x40ee96
push rbx
je 0x40ee81
jb 0x40eeb8
jbe 0x40eeba
jb 0x40eeca
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40eec9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40eee2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40eeb9
jo 0x40eee8
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40eec6
jbe 0x40eef7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop r15
jbe 0x40eeff
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40eeeb
je 0x40ef2d
jo 0x40ef26
movsxd r8, dword gs:[r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40ef00
xor dword [rdi + 0x54], ebx
jne 0x40ef44
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
movsxd r8, dword [r13 + 0x45]
xor cl, byte [r9 + 0x63]
push r12
pop rdi
add byte [rdi + 0x5f], bl
jae 0x40ef67
jb 0x40ef6b
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40ef45
je 0x40ef87
jo 0x40ef80
push r10
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x53], eax
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40ef60
jbe 0x40ef91
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40ef68
jo 0x40ef97
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x40ef8f
jb 0x40efc6
jbe 0x40efc8
jb 0x40efd8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40efd7
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40eff0
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40efc7
jo 0x40eff6
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40efd4
jbe 0x40f005
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40eff4
jb 0x40f02b
jbe 0x40f02d
jb 0x40f03d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f03c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f055
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f02c
jo 0x40f05b
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40f039
jbe 0x40f06a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insd dword [rdi], dx
imul eax, dword [rbp + 0x6c], 0x4e5a5f00
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40f087
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f0a0
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f077
jo 0x40f0a6
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40f084
jbe 0x40f0b5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x40f0cf
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40f09c
outsw dx, word ss:[rsi]
jb 0x40f0e7
jb 0x40f0d7
pop rdi
jae 0x40f0d6
je 0x40f0ee
jo 0x40f0e7
movsxd rax, dword gs:[rbp + 0x45]
push rbx
je 0x40f0b9
je 0x40f0fb
jo 0x40f0f4
jo 0x40f0dd
push rsp
pop rdi
push r11
xor ebx, dword [rdi]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x40f103
je 0x40f108
jb 0x40f111
ja 0x40f0e4
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40f0ee
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40f10c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f145
je 0x40f15a
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40f127
jo 0x40f156
imul esi, dword [rdx + 0x49], 0x45456369
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40f14b
pop rdi
push rdx
pop rdi
je 0x40f18b
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40f15d
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40f181
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40f173
insb byte [rdi], dx
jae 0x40f1b6
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40f18c
insd dword [rdi], dx
jo 0x40f1a6
movsxd rbp, dword [rcx + 0x53]
je 0x40f196
insb byte [rdi], dx
jae 0x40f1d9
movsxd rax, dword [r13 + 0x53]
push r11
je 0x40f1a3
jo 0x40f1d2
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40f1b7
xor al, 0x5f
pop rdi
jne 0x40f1f7
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x40f1fe
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40f205
push r8
push rbx
je 0x40f1e0
jo 0x40f20f
imul esi, dword [rdx + 0x49], 0x53456369
xor bl, byte [rdi + 0x53]
push r11
xor dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
push rdx
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40f206
xor dword [rdi + 0x54], ebx
jne 0x40f24a
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rdx
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x53], eax
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f25c
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x70347453
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40f248
jbe 0x40f279
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f29e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x40f2b1
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x40f2cb
jo 0x40f2b9
push r10
push r11
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f295
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f2d6
push r11
je 0x40f2a9
jo 0x40f2d8
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x40f298
pop rdi
pop rdx
push rbx
je 0x40f2cf
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f310
push r11
je 0x40f2e3
jo 0x40f312
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40f2d2
pop rdi
pop rdx
push rbx
je 0x40f309
cmp byte [rdi + 0x52], bl
pop rdi
je 0x40f351
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x40f350
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40f327
jb 0x40f35e
jbe 0x40f360
jb 0x40f370
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f36f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f388
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f35f
jo 0x40f38e
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40f36c
jbe 0x40f39d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40f38b
xor byte [rdi + 0x48], bl
pop rdi
jae 0x40f3ca
insd dword [rdi], dx
xor byte [rbp + 0x4f], al
movsxd rcx, dword [rdx + 0x30]
xor dword [r9 + 0x63], ecx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f3b4
movsxd rsp, dword [rbp + 0x72]
jb 0x40f3c5
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40f3ce
jbe 0x40f3ff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40f3d6
jo 0x40f405
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40f3ed
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x40f3fe
jb 0x40f435
jbe 0x40f437
jb 0x40f447
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f446
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f45f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f436
jo 0x40f465
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40f443
jbe 0x40f474
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
je 0x40f458
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40f4bd
jo 0x40f4ab
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40f487
jbe 0x40f4b8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40f48f
jo 0x40f4be
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40f4a6
xor bl, byte [rdi + 0x5f]
je 0x40f4db
push 0x65706c65
jb 0x40f4cc
insd dword [rdi], dx
xor byte [rbp + 0x4f], al
movsxd rcx, dword [rcx + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x40f4c5
xor dword [rdi + 0x54], ebx
jne 0x40f509
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor dword [rdi + 0x44], ebx
jo 0x40f500
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
push r11
je 0x40f4ee
jo 0x40f51d
imul esi, dword [rdx + 0x49], 0x45456369
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x40f548
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40f51e
xor bl, byte [rdi + 0x44]
jae 0x40f567
jb 0x40f564
jns 0x40f556
jne 0x40f572
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x40f57b
jb 0x40f578
jns 0x40f554
push rax
push rbx
je 0x40f543
jo 0x40f572
imul esi, dword [rdx + 0x49], 0x45456369
jbe 0x40f56f
pop rdi
push rbx
xor eax, 0x5a5f005f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f589
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40f592
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f586
push rbx
je 0x40f571
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40f5b9
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x40f586
jo 0x40f5b5
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f5cb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40f5d4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f5c8
push rbx
je 0x40f5b3
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40f5fb
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x40f5c8
jo 0x40f5f7
imul esi, dword [rdx + 0x49], 0x4569634b
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40f5da
cmp byte [rdi + 0x52], bl
pop rdi
je 0x40f622
pop rdi
movsxd rsi, dword gs:[rdx + 0x65]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40f60d
push rbx
je 0x40f5f1
cmp byte [rdi + 0x52], bl
pop rdi
je 0x40f639
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x40f638
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40f619
xor byte [rdi + 0x5f], bl
jne 0x40f65a
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40f675
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40f676
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40f68a
push r11
je 0x40f646
xor ebp, dword [rbp + 0x6f]
jbe 0x40f67f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f65c
jo 0x40f68b
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f679
xor dword [rdi + 0x54], ebx
jne 0x40f6bd
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
movsxd r8, dword [r13 + 0x45]
xor cl, byte [r9 + 0x63]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f69f
pop rdi
push rdx
pop rdi
je 0x40f6e7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x40f6b8
jo 0x40f6e7
imul esi, dword [rdx + 0x49], 0x4569634b
insd dword [rdi], dx
insd dword [rdi], dx
jbe 0x40f693
pop rdi
pop rdx
push rbx
je 0x40f6cd
jo 0x40f6fc
imul esi, dword [rdx + 0x49], 0x4569634b
xor cl, byte [r9 + 0x49]
push rdx
push rbx
xor byte [rdi + 0x45], bl
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r10
push rbx
je 0x40f6f0
je 0x40f732
jo 0x40f72b
jo 0x40f719
pop rdi
push r10
push rbx
xor al, 0x5f
jo 0x40f725
xor dword [rdi + 0x45], ebx
push r11
je 0x40f709
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x40f73f
je 0x40f757
jo 0x40f750
pop r8
jae 0x40f75a
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
pop r8
jae 0x40f768
push rsp
xor bl, byte [rdi + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x40f73b
outsw dx, word [rsi]
jb 0x40f77f
jb 0x40f76f
push r11
je 0x40f744
je 0x40f786
jo 0x40f77f
movsxd r8, dword gs:[r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x40f754
jb 0x40f78b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40f78f
pop rdi
jb 0x40f792
jb 0x40f796
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x40f7ad
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40f776
xor dword [rdi + 0x5f], ebx
jo 0x40f7bf
jae 0x40f7b4
pop rdi
push 0x49706165
push rbx
je 0x40f786
jb 0x40f7bd
jbe 0x40f7bf
jb 0x40f7cf
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f7ce
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f7e7
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f7be
jo 0x40f7ed
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40f7cb
jbe 0x40f7fc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40f82b
xor dword [rdi + rbx*2], esi
je 0x40f823
jb 0x40f81f
insb byte [rdi], dx
jae 0x40f837
pop rdi
jbe 0x40f828
insb byte [rdi], dx
jbe 0x40f820
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40f810
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x40f821
jb 0x40f858
jbe 0x40f85a
jb 0x40f86a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f869
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f882
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f859
jo 0x40f888
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40f866
jbe 0x40f897
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
je 0x40f87b
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40f8e0
jo 0x40f8ce
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40f8a5
xor dword [rdi + 0x5f], ebx
jne 0x40f8e6
jne 0x40f8dc
jb 0x40f8e1
pop rdi
jo 0x40f8e3
jb 0x40f8f8
imul esi, dword [rcx + rbp*2 + 0x6f], 0x7453496e
xor dword [rsi], esi
jb 0x40f8f5
jbe 0x40f8f7
jb 0x40f907
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f906
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f91f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f8f6
jo 0x40f925
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40f903
jbe 0x40f934
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40f95f
xor dword [rip + 0x6574495f], esi
jb 0x40f953
insb byte [rdi], dx
jae 0x40f96b
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f97f
je 0x40f95e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f97c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f995
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f96c
jo 0x40f99b
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40f979
jbe 0x40f9aa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rdx
push r11
je 0x40f98f
jb 0x40f9c6
jbe 0x40f9c8
jb 0x40f9d8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f9ae
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f9ef
push r11
je 0x40f9c2
jo 0x40f9f1
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x40f9b1
pop rdi
pop rdx
push rbx
je 0x40f9e7
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40fa42
push r11
je 0x40f9fe
xor ebp, dword [rbp + 0x6f]
jbe 0x40fa37
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40fa14
jo 0x40fa43
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
xor ebx, dword [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x40fa30
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fa71
push r11
je 0x40fa44
jo 0x40fa73
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x40fa88
push rsp
jo 0x40fa8b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40fa7b
jbe 0x40fa38
pop rdi
pop rdx
push rbx
je 0x40faaa
imul ecx, dword [rcx + 0x4e], 0x675f5f39
outsb dx, byte [rsi]
jne 0x40faa6
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40fabf
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40fa96
jo 0x40fac5
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40faa3
jbe 0x40fad4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
je 0x40fab7
jb 0x40faee
jbe 0x40faf0
jb 0x40fb00
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
xor dword [rip + 0x66666964], r14d
jb 0x40fb09
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x40fb23
jo 0x40fb11
push r10
push r11
pop rdi
push rbx
pop r15
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x40fb24
js 0x40fb2a
je 0x40fb03
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40fb0a
jo 0x40fb39
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r9 + 0x4a], ecx
movsxd r8, dword [r13 + 0x4a]
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r10
push rbx
je 0x40fb2b
je 0x40fb6d
jo 0x40fb66
jo 0x40fb54
pop rdi
push r10
push rbx
xor al, 0x5f
jo 0x40fb60
xor dword [rdi + 0x45], ebx
push r11
je 0x40fb44
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x40fb7a
je 0x40fb92
jo 0x40fb8b
pop rax
jae 0x40fb95
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
pop rax
jae 0x40fba3
push rsp
xor bl, byte [rdi + 0x45]
add byte [r15 + 0x5a], r11b
outsb dx, byte [rsi]
ja 0x40fbac
push rax
jbe 0x40fb42
pop rdi
pop rdx
push rbx
je 0x40fb78
pop rdi
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40fbc5
jb 0x40fbcc
push r11
je 0x40fb8d
jb 0x40fbc4
jbe 0x40fbc6
jb 0x40fbd6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40fbd5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40fbee
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40fbc5
jo 0x40fbf4
imul esi, dword [rdx + 0x49], 0x53456369
je 0x40fbd2
jbe 0x40fc03
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40fc2e
xor dword [rip + 0x6574495f], esi
jb 0x40fc22
insb byte [rdi], dx
jae 0x40fc3a
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40fc11
insd dword [rdi], dx
jo 0x40fc2b
movsxd rbp, dword [rcx + 0x53]
je 0x40fc1b
insb byte [rdi], dx
jae 0x40fc5e
movsxd rax, dword [r13 + 0x53]
push r11
je 0x40fc28
jo 0x40fc57
imul esi, dword [rdx + 0x49], 0x4569634b
imul r15d, dword [r8 + 0x45], 0x5f335352
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40fc70
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40fc79
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40fc6d
push rbx
je 0x40fc58
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40fca0
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x40fc6d
jo 0x40fc9c
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40fcbe
jb 0x40fcc1
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor al, 0x5f
push r10
push r11
je 0x40fc8a
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40fcdc
jb 0x40fcdf
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x40fca6
je 0x40fce8
jo 0x40fce1
push r10
push rbx
xor ebx, dword [rdi + 0x45]
push r11
pop rdi
jbe 0x40fcda
push rsp
pop rdi
jo 0x40fcde
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40fcca
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40fd03
je 0x40fd18
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40fce2
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40fd2a
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x40fcf7
jo 0x40fd26
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40fd49
jb 0x40fd4c
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor ebx, dword [rdi + 0x4a]
push rdx
push r11
je 0x40fd15
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40fd67
jb 0x40fd6a
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x40fd31
je 0x40fd73
jo 0x40fd6c
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
jbe 0x40fd65
push rbx
xor eax, 0x5f54505f
jo 0x40fd6b
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor eax, 0x63656863
imul edx, dword [rdx + 0x4b], 0x4e
push rbx
je 0x40fd65
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40fda4
movsxd rbx, dword [rdi + 0x73]
je 0x40fdb2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40fdad
je 0x40fdc2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul r13d, dword [r9 + 0x69], 0x696969
pop rdi
pop rdx
push rbx
je 0x40fda3
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x40fda9
jb 0x40fddb
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40fdf8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40fdf2
push rbx
je 0x40fdc9
jo 0x40fdf8
imul esi, dword [rdx + 0x49], 0x6c456369
push rax
push rbx
xor bl, byte [rdi + 0x52]
push rbx
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40fdea
pop rdi
push rdx
pop rdi
je 0x40fe2a
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40fdfc
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40fe20
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40fe12
insb byte [rdi], dx
jae 0x40fe55
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15 + rbx*2], r14d
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40fe5d
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r10
push r11
je 0x40fe36
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40fe88
jb 0x40fe8b
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x40fe52
je 0x40fe94
jo 0x40fe8d
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
push r8
push rbx
je 0x40fe67
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40feaf
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
jo 0x40fe9b
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40fe86
xor dword [rdi + 0x54], ebx
jne 0x40feca
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
movsxd r8, dword [r13 + 0x45]
xor dword [r9 + 0x63], ecx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40feaf
jo 0x40fede
imul esi, dword [rdx + 0x49], 0x4569634b
xor cl, byte [r9 + 0x49]
movsxd r8, dword [r13 + 0x49]
push r11
je 0x40fec4
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40ff16
jb 0x40ff19
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x40fee0
je 0x40ff22
jo 0x40ff1b
jo 0x40ff09
pop rdi
push r11
xor eax, 0x4449495f
jo 0x40ff14
xor byte [rdi + 0x45], bl
add byte [r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ff2e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ff37
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ff2b
push rbx
je 0x40ff16
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40ff5e
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x40ff2b
jo 0x40ff5a
imul esi, dword [rdx + 0x49], 0x4569634b
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ff45
pop rdi
push rdx
pop rdi
je 0x40ff85
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40ff57
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40ff7b
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40ff6d
insb byte [rdi], dx
jae 0x40ffb0
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
cmp byte [r15 + 0x4d], r11b
pop rdi
jb 0x40ffb0
jae 0x40ffb6
push r8
push rbx
je 0x40ff87
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x40ffcf
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ffa8
pop rdi
push rdx
pop rdi
je 0x40ffe8
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x40ffba
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x40ffde
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x40ffd0
insb byte [rdi], dx
jae 0x410013
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
cmp byte [r15 + 0x53], r11b
pop rdi
jbe 0x410012
insb byte [rdi], dx
jne 0x410019
push r8
push r11
je 0x40ffeb
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x410033
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x41000c
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x410032
pop rdi
push rdx
pop rdi
je 0x410072
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x410044
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x410068
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x41005a
insb byte [rdi], dx
jae 0x41009d
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
cmp byte [r11 + 0x65], r13b
jns 0x410099
movsxd rbp, dword [rdi + 0x6d]
jo 0x410084
jbe 0x410041
pop rdi
pop rdx
push rbx
je 0x41007b
jo 0x4100aa
imul esi, dword [rdx + 0x49], 0x4569634b
xor cl, byte [r9 + 0x4a]
push rdx
push rbx
xor byte [rdi + 0x45], bl
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r10
push rbx
je 0x41009e
je 0x4100e0
jo 0x4100d9
jo 0x4100c7
pop rdi
push r10
push rbx
xor al, 0x5f
jo 0x4100d3
xor dword [rdi + 0x45], ebx
push r11
je 0x4100b7
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x4100ed
je 0x410105
jo 0x4100fe
pop rax
jae 0x410108
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
pop rax
jae 0x410116
push rsp
xor bl, byte [rdi + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x4100e7
jo 0x410116
imul esi, dword [rdx + 0x49], 0x4569634b
xor cl, byte [r9 + 0x49]
push rdx
push rbx
xor byte [rdi + 0x45], bl
push r11
je 0x4100fe
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x410150
jb 0x410153
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x41011a
je 0x41015c
jo 0x410155
jo 0x410143
pop rdi
push r11
xor eax, 0x4449495f
jo 0x41014e
xor byte [rdi + 0x45], bl
add byte [r15 + 0x49], r11b
push rsp
pop r15
jb 0x41016d
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x410152
xor dword [rdi + 0x54], ebx
jne 0x410196
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rdx
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x53], eax
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4101b0
jae 0x41018f
push rbx
je 0x41017a
xor dword [rbx + 0x68], esp
jb 0x4101ae
je 0x4101c3
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x41018e
xor esp, dword [rdx + 0x61]
jae 0x4101cb
movsxd rbx, dword [rdi + 0x6f]
jae 0x4101db
jb 0x4101ce
insd dword [rdi], dx
movsxd rdx, dword [r15 + rbx*2 + 0x45]
push rbx
xor eax, 0x634b505f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4101c2
pop rdi
push rdx
pop rdi
je 0x410202
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4101d4
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x4101f8
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x4101ea
insb byte [rdi], dx
jae 0x41022d
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
push rdx
pop rdi
je 0x41023f
pop rdi
imul ebp, dword [rbp + 0x70], 0x3653496c
pop rdi
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop r15
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x41022c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41026b
movsxd rbx, dword [rdi + 0x73]
je 0x410279
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x410274
je 0x410289
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x49], bl
pop r15
jae 0x4102b3
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
js 0x4102be
outsb dx, byte [rsi]
push rdx
push rbx
je 0x41028e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4102cd
movsxd rbx, dword [rdi + 0x73]
je 0x4102db
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4102d6
je 0x4102eb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul r12d, dword [r11 + 0x63], 0x4e5a5f00
push rbx
je 0x4102c8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x410307
movsxd rbx, dword [rdi + 0x73]
je 0x410315
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x410310
je 0x410325
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x410311
jae 0x410356
jo 0x41032b
imul esp, dword [rbx + 0x45], 0x74535276
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x410332
insd dword [rdi], dx
jo 0x41034c
movsxd rbp, dword [rcx + 0x53]
je 0x41033c
insb byte [rdi], dx
jae 0x41037f
movsxd rax, dword [r13 + 0x53]
push r11
je 0x410349
jo 0x410378
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r9], r14d
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x41038b
jb 0x410387
outsd dx, dword [rsi]
jne 0x41039a
push r10
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x41036f
jbe 0x4103a0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x410377
jo 0x4103a6
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x4103c5
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r11
xor dword [rdi + 0x45], ebx
jbe 0x4103af
jo 0x4103bc
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x4103ad
jbe 0x4103de
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4103b5
jo 0x4103e4
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x4103d0
pop rdi
push rdx
pop rdi
je 0x410418
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x4103e9
jo 0x410418
imul esi, dword [rdx + 0x49], 0x4569634b
xor al, byte [r13 + 0x50]
push rbx
je 0x4103f7
cmp byte [rdi + 0x52], bl
pop rdi
je 0x41043f
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x41043e
add byte [rdi + 0x5a], bl
push rbx
je 0x410411
xor dword [rdi + 0x54], ebx
jne 0x410455
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
push rdx
movsxd rax, dword [r13 + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41047a
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x410475
je 0x41048a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x410460
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41049f
movsxd rbx, dword [rdi + 0x73]
je 0x4104ad
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
cmp byte [rdi + 0x52], bl
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41048a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4104c3
je 0x4104d8
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4104a5
jo 0x4104d4
imul esi, dword [rdx + 0x49], 0x45456369
cmp byte [r13 + 0x61], r13b
js 0x4104df
jae 0x4104eb
jp 0x4104e9
push r10
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4104c2
xor byte [rdi + 0x49], bl
je 0x4104fb
jb 0x4104f7
jae 0x410501
push r11
je 0x4104d1
jb 0x410508
jbe 0x41050a
jb 0x41051a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410519
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x410532
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x410509
jo 0x410538
imul esi, dword [rdx + 0x49], 0x53456369
je 0x410516
jbe 0x410547
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x410567
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x410540
jae 0x41057d
jb 0x410584
push r11
je 0x410545
jb 0x41057c
jbe 0x41057e
jb 0x41058e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41058d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4105a6
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41057d
jo 0x4105ac
imul esi, dword [rdx + 0x49], 0x53456369
je 0x41058a
jbe 0x4105bb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
jbe 0x4105c0
pop rdi
push rbx
pop rdi
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x4105dd
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x4105f2
pop rdi
jae 0x410608
jb 0x41060b
add byte [rdi + 0x5a], bl
push rbx
je 0x4105d0
je 0x4105ea
insd dword [rdi], dx
xor byte [rbp + 0x49], al
push rdx
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x4105e1
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x410608
pop rax
push rsp
pop rdi
push r11
je 0x4105fb
je 0x41063d
jo 0x410636
jo 0x410624
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x410649
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41064a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410653
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410647
push rbx
je 0x410635
jo 0x410664
imul esi, dword [rdx + 0x49], 0x45456369
cmp byte [rbp + 0x61], ch
js 0x41066e
jae 0x41067a
jp 0x410678
jbe 0x410616
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41067f
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x6d5f6465
insd dword [rdi], dx
jne 0x41069b
push r11
je 0x41066d
jo 0x41069c
imul esi, dword [rdx + 0x49], 0x4569634b
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4106b1
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x6d5f6465
insd dword [rdi], dx
jne 0x4106cd
push r11
je 0x41069f
jo 0x4106ce
imul esi, dword [rdx + 0x49], 0x4569634b
pop rdi
pop r15
jo 0x4106ef
jb 0x4106c2
jbe 0x41067f
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4106e8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4106f1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4106e5
push rbx
je 0x4106d0
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x410718
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x4106e5
jo 0x410714
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x410736
jb 0x410739
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor al, 0x5f
push r10
push r11
je 0x410702
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x410754
jb 0x410757
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x41071e
je 0x410760
jo 0x410759
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
jbe 0x410750
push rsp
pop rdi
jo 0x410754
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x410746
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x410785
movsxd rbx, dword [rdi + 0x73]
je 0x410793
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41078e
je 0x4107a3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41078f
outsw dx, word [rsi]
jb 0x4107d3
jb 0x4107c3
movsxd r8, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x41079c
jb 0x4107d3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4107d7
pop rdi
jb 0x4107da
jb 0x4107de
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x4107f5
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4107c2
jo 0x4107f1
imul esi, dword [rdx + 0x49], 0x31745350
cmp byte [rdi + 0x52], bl
pop rdi
je 0x410810
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x41080f
push rbx
xor dword [rdi + 0x45], ebx
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x53], ebx
xor al, 0x5f
jbe 0x4107ff
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4107fe
je 0x410840
jo 0x410839
movsxd r8, dword gs:[r13 + 0x45]
xor al, byte [r13 + 0x4f]
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410845
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x410821
pop rdi
pop rdi
imul esi, dword [rbp + 0x72], 0x73656c5f
jae 0x41085c
imul esi, dword [rbp + 0x72], 0x5f007645
pop rdx
push rbx
je 0x410841
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x410880
movsxd rbx, dword [rdi + 0x73]
je 0x41088e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x410889
je 0x41089e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x6d], eax
movsxd rdx, dword [rdx + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41088e
jo 0x4108bd
imul esi, dword [rdx + 0x49], 0x34456369
jae 0x4108dc
jo 0x4108ad
push rdx
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4108a9
jbe 0x4108da
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4108b1
jo 0x4108e0
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor r12d, dword [r13 + 0x6e]
jbe 0x410894
pop rdi
pop rdx
push rbx
je 0x4108cf
je 0x410911
jo 0x41090a
movsxd r8, dword gs:[r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x4108ea
jo 0x410919
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x410902
pop rdi
push rdx
pop rdi
je 0x410942
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x410914
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x410938
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x41092a
insb byte [rdi], dx
jae 0x41096d
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r14b, byte [r10]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x41097a
movsxd rsp, dword [rbp + 0x5f]
push 0x5f746e69
jne 0x410987
imul esi, dword [rcx + 0x75], 0x52494965
push r11
je 0x410956
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4109a8
jb 0x4109ab
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x410972
je 0x4109b4
jo 0x4109ad
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
push r11
je 0x410986
pop rdi
push rdx
pop rdi
je 0x4109ce
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x4109a1
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4109e8
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x4109f2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
jo 0x4109de
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4109ce
jbe 0x4109ff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4109d6
jo 0x410a05
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x4109f2
je 0x410a34
jo 0x410a2d
movsxd r8, dword gs:[r13 + 0x45]
xor dword [r9 + 0x49], ecx
movsxd rax, dword [rbp + 0x76]
jo 0x410a23
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x410a0e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410a47
je 0x410a5c
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x410a26
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x410a6e
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x410a3b
jo 0x410a6a
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x410a8d
jb 0x410a90
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor ebx, dword [rdi + 0x4a]
push rdx
push r11
je 0x410a59
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x410aab
jb 0x410aae
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x410a75
je 0x410ab7
jo 0x410ab0
push rdx
push rbx
xor bl, byte [rdi + 0x45]
push r11
pop rdi
jbe 0x410aab
push rbx
xor eax, 0x5f54505f
jo 0x410ab1
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x410a9c
xor dword [rdi + 0x5f], ebx
jb 0x410ad8
jae 0x410ae8
outsd dx, dword [rsi]
push r11
je 0x410aaf
jo 0x410ade
imul esi, dword [rdx + 0x49], 0x45456369
push rax
push rsp
pop rdi
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x410aca
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x410ad0
jb 0x410b02
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x410b1f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x410b19
push rbx
je 0x410af0
jo 0x410b1f
imul esi, dword [rdx + 0x49], 0x6c456369
push rax
push rbx
xor bl, byte [rdi + 0x52]
push rbx
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x410b0a
pop rdi
pop rdi
jne 0x410b4b
jne 0x410b41
jb 0x410b46
pop rdi
jo 0x410b48
jb 0x410b5d
imul esi, dword [rcx + rbp*2 + 0x6f], 0x69705f6e
jbe 0x410b62
je 0x410b3e
push rbx
je 0x410b29
jb 0x410b60
jbe 0x410b62
jb 0x410b72
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410b71
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x410b8a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x410b61
jo 0x410b90
imul esi, dword [rdx + 0x49], 0x53456369
je 0x410b6e
jbe 0x410b9f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x410bca
xor dword [rip + 0x6574495f], esi
jb 0x410bbe
insb byte [rdi], dx
jae 0x410bd6
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x410bad
xor bl, byte [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x410be2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x410bec
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x410bf4
pop rdi
xor dword [rbp + 0x53], eax
je 0x410bcb
jb 0x410c02
jbe 0x410c04
jb 0x410c14
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410c13
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x410c2c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x410c03
jo 0x410c32
imul esi, dword [rdx + 0x49], 0x53456369
je 0x410c10
jbe 0x410c41
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push r11
pop r15
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x410c3a
jo 0x410c69
imul esi, dword [rdx + 0x49], 0x61456369
push rbx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410c7f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x410c98
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x410c6f
jo 0x410c9e
imul esi, dword [rdx + 0x49], 0x53456369
je 0x410c7c
jbe 0x410cad
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x410ccb
jbe 0x410c5e
pop rdi
pop rdx
push rbx
je 0x410c9c
pop rdi
push rdx
pop rdi
je 0x410cdc
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x410cae
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x410cd2
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x410cc4
insb byte [rdi], dx
jae 0x410d07
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x410d0a
jb 0x410d06
outsd dx, dword [rsi]
jne 0x410d19
push r10
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x410ce9
xor byte [rdi + 0x48], bl
pop rdi
jae 0x410d28
insd dword [rdi], dx
xor byte [rbp + 0x52], al
movsxd rcx, dword [r10 + r12*2 + 0x30]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x410d15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410d4e
je 0x410d63
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x410d2d
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x410d75
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x410d42
jo 0x410d71
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x410d94
jb 0x410d97
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor ebx, dword [rdi + 0x49]
push rdx
push r11
je 0x410d60
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x410db2
jb 0x410db5
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x410d7c
je 0x410dbe
jo 0x410db7
push r10
push rbx
xor bl, byte [rdi + 0x45]
push r11
pop rdi
jbe 0x410db2
push rbx
xor eax, 0x5f54505f
jo 0x410db8
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x410da9
outsw dx, word [rsi]
jb 0x410ded
jb 0x410ddd
push r11
je 0x410db2
je 0x410df4
jo 0x410ded
movsxd r8, dword gs:[r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x410dc2
jb 0x410df9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x410dfd
pop rdi
jb 0x410e00
jb 0x410e04
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x410e1b
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x410de9
je 0x410e2b
jo 0x410e24
movsxd r8, dword gs:[r13 + 0x45]
xor dword [r9 + 0x4a], ecx
movsxd rax, dword [rbp + 0x76]
jo 0x410e1a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x410e08
jo 0x410e37
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r9 + 0x49], ecx
movsxd r8, dword [r13 + 0x49]
push r11
je 0x410e1d
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x410e6f
jb 0x410e72
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x410e39
je 0x410e7b
jo 0x410e74
jo 0x410e62
pop rdi
push r11
xor eax, 0x4449495f
jo 0x410e6d
xor byte [rdi + 0x45], bl
add byte [r15 + 0x5a], r11b
push rbx
je 0x410e56
xor byte [rdi + 0x5f], bl
movsxd rbp, dword [rdi + 0x70]
jns 0x410e8b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x410e95
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x410e9d
xor dword [rbp + 0x4c], eax
xor byte [rbp + 0x53], al
je 0x410e77
jb 0x410ea9
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x410ec6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x410ec0
xor dword [r11d], r14d
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x410ec9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x410ed3
pop rdi
push r11
je 0x410ea5
jb 0x410edc
jbe 0x410ede
jb 0x410eee
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410eed
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x410f06
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x410edd
jo 0x410f0c
imul esi, dword [rdx + 0x49], 0x53456369
je 0x410eea
jbe 0x410f1b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x410f11
xor ebp, dword [rbp + 0x6f]
jbe 0x410f4a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x410f27
jo 0x410f56
imul esi, dword [rdx + 0x49], 0x45456369
jo 0x410f6e
jbe 0x410f01
pop rdi
pop rdx
push rbx
je 0x410f3b
jo 0x410f6a
imul esi, dword [rdx + 0x49], 0x31745350
cmp byte [rdi + 0x52], bl
pop rdi
je 0x410f89
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x410f88
push rbx
xor dword [rdi + 0x45], ebx
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x76], ebx
push r12
pop rdi
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x410f78
pop rdi
push rdx
pop rdi
je 0x410fb8
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x410f8a
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x410fae
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x410fa0
insb byte [rdi], dx
jae 0x410fe3
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15 + rbx*2], r14d
pop r15
imul ebp, dword [rsi + 0x73], 0x5f747265
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r8
push rbx
je 0x410fc1
cmp byte [rdi + 0x52], bl
pop rdi
je 0x411009
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x411008
push rbx
pop r15
push rax
push rbx
je 0x410fdb
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x411023
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x410ff7
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41102c
push r10
push rbx
je 0x411000
jo 0x41102f
imul esi, dword [rdx + 0x49], 0x45456369
push rbx
je 0x41100b
jb 0x411042
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x411046
pop rdi
jb 0x411049
jb 0x41104d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x411063
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x411036
outsw dx, word [rsi]
jb 0x41107a
jb 0x41106a
push r10
push rax
push rbx
je 0x41103d
cmp byte [rdi + 0x52], bl
pop rdi
je 0x411085
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x411084
push r12
pop rdi
push rdx
push rbx
je 0x411059
jb 0x411090
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x411094
pop rdi
jb 0x411097
jb 0x41109b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x4110b2
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x41107c
xor bl, byte [rdi + 0x5f]
imul bp, word [rsi + 0x61], 0x5f6c
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4110ce
jb 0x4110d5
push r11
je 0x411096
jb 0x4110cd
jbe 0x4110cf
jb 0x4110df
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4110de
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4110f7
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4110ce
jo 0x4110fd
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4110db
jbe 0x41110c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x411137
xor dword [rip + 0x6574495f], esi
jb 0x41112b
insb byte [rdi], dx
jae 0x411143
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x411117
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x411161
jb 0x411164
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x411129
jo 0x411158
imul esi, dword [rdx + 0x49], 0x49456369
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x411155
push rsp
pop rdi
jo 0x411159
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x411178
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x411154
xor al, 0x5f
je 0x41118d
jb 0x411189
insb byte [rdi], dx
jae 0x4111a1
pop rdi
jbe 0x411192
insb byte [rdi], dx
movsxd rbp, dword [rcx + rcx*2 + 0x53]
je 0x411169
jb 0x4111a0
jbe 0x4111a2
jb 0x4111b2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4111c2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x411199
jo 0x4111c8
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4111a6
jbe 0x4111d7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r11
pop rdi
push rsp
pop rdi
push rdx
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4111fb
movsxd rdi, dword [rax + 0x78]
jno 0x4111eb
push rax
push rbx
je 0x4111da
jo 0x411209
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4111e7
jbe 0x411218
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411240
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x411228
pop rdi
push rdx
pop rdi
je 0x411268
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x41123a
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x41125e
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x411250
insb byte [rdi], dx
jae 0x411293
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
cmp byte [r15 + 0x53], r11b
pop rdi
jbe 0x411292
insb byte [rdi], dx
jne 0x411299
push r8
push r11
je 0x41126b
cmp byte [rdi + 0x52], bl
pop rdi
je 0x4112b3
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x4112b2
add byte [rdi + 0x5a], bl
push rbx
je 0x411285
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4112c6
push r11
je 0x411299
jo 0x4112c8
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4112b1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4112f2
push r11
je 0x4112c5
jo 0x4112f4
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x4112de
xor ebp, dword [rbp + 0x6f]
jbe 0x411317
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4112f4
jo 0x411323
imul esi, dword [rdx + 0x49], 0x45456369
xor al, 0x62
jae 0x411333
jbe 0x4112d1
pop rdi
pop rdx
push rbx
je 0x41130c
je 0x41134e
jo 0x411347
movsxd r8, dword gs:[r13 + 0x45]
xor cl, byte [r9 + 0x49]
movsxd rax, dword [rbp + 0x76]
jo 0x41133d
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41132f
pop rdi
push rdx
pop rdi
je 0x41136f
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x411341
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x411365
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x411357
insb byte [rdi], dx
jae 0x41139a
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15 + rbx*2], r14d
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x4113a2
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push rdx
push r11
je 0x41137b
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4113cd
jb 0x4113d0
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x411397
je 0x4113d9
jo 0x4113d2
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
push r8
push rbx
je 0x4113ac
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4113f4
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
jo 0x4113e0
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4113cb
jb 0x411402
jbe 0x411404
jb 0x411414
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411413
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41142c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x411403
jo 0x411432
imul esi, dword [rdx + 0x49], 0x53456369
je 0x411410
jbe 0x411441
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
jbe 0x4113f4
pop rdi
pop rdx
push rbx
je 0x411467
push r8
push rbx
je 0x411433
jo 0x411462
imul esi, dword [rdx + 0x49], 0x45456369
push rdx
push r11
je 0x41143f
xor ebp, dword [rbp + 0x6f]
jbe 0x411478
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x411460
outsw dx, word [rsi]
jb 0x4114a4
jb 0x411494
push r10
push rax
push rbx
je 0x411467
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4114af
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x41147c
jo 0x4114ab
imul esi, dword [rdx + 0x49], 0x4569634b
push r12
pop rdi
push rdx
push rbx
je 0x41148c
jb 0x4114c3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4114c7
pop rdi
jb 0x4114ca
jb 0x4114ce
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x4114e5
add byte gs:[r15 + 0x5f], r11b
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4114bd
insd dword [rdi], dx
jo 0x4114d7
movsxd rbp, dword [rcx + 0x53]
je 0x4114c7
insb byte [rdi], dx
jae 0x41150a
movsxd rax, dword [r13 + 0x53]
push r11
je 0x4114d4
jo 0x411503
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4114ee
pop rdi
push rdx
pop rdi
je 0x41152e
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x411500
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x411524
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x411516
insb byte [rdi], dx
jae 0x411559
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15 + rbx*2], r14d
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x411561
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push rdx
push r11
je 0x41153a
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x41158c
jb 0x41158f
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x411556
je 0x411598
jo 0x411591
push rdx
push rbx
xor dword [rdi + 0x45], ebx
push r11
pop rdi
push r8
push rbx
je 0x41156d
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4115b5
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
jo 0x4115a1
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41158e
movsxd rbp, dword [rdi + 0x75]
je 0x41159f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4115a5
insd dword [rdi], dx
jo 0x4115bf
movsxd rbp, dword [rcx + 0x53]
je 0x4115af
insb byte [rdi], dx
jae 0x4115f2
movsxd rax, dword [r13 + 0x53]
push r11
je 0x4115bc
jo 0x4115eb
imul esi, dword [rdx + 0x49], 0x4569634b
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4115cf
xor byte [rdi + 0x48], bl
pop rdi
jae 0x41160e
insd dword [rdi], dx
xor byte [rbp + 0x52], al
movsxd rcx, dword [r10 + r12*2 + 0x30]
xor al, byte [r13 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x4115f5
pop rdi
push rdx
pop rdi
je 0x41163d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x41160e
jo 0x41163d
imul esi, dword [rdx + 0x49], 0x4569634b
outsb dx, byte [rsi]
push r10
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x411657
jno 0x41163d
push rax
push rbx
je 0x41162c
jo 0x41165b
imul esi, dword [rdx + 0x49], 0x45456369
push rdx
push r11
je 0x411638
xor ebp, dword [rbp + 0x6f]
jbe 0x411671
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41165b
pop rdi
push rdx
pop rdi
je 0x41169b
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x41166d
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x411691
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x411683
insb byte [rdi], dx
jae 0x4116c6
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r12d, dword [r13 + 0x6e]
jbe 0x411665
pop rdi
pop rdi
jae 0x4116d9
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x4116a9
pop rdi
push rdx
pop rdi
je 0x4116f1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x4116c2
jo 0x4116f1
imul esi, dword [rdx + 0x49], 0x4569634b
jo 0x41170a
jbe 0x41169d
pop rdi
pop rdx
push rbx
je 0x4116db
pop rdi
push rdx
pop rdi
je 0x41171b
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4116ed
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x411711
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x411703
insb byte [rdi], dx
jae 0x411746
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
push rdx
pop rdi
je 0x411758
pop rdi
imul ebp, dword [rbp + 0x70], 0x3653496c
pop rdi
xor dword [rbp + 0x45], eax
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x411731
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x41177b
jb 0x41177e
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x411743
jo 0x411772
imul esi, dword [rdx + 0x49], 0x4a456369
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41176f
push rsp
pop rdi
jo 0x411773
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x411763
je 0x4117a5
jo 0x41179e
movsxd r8, dword gs:[r13 + 0x45]
xor cl, byte [r9 + 0x4a]
movsxd rax, dword [rbp + 0x76]
jo 0x411794
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x411784
outsw dx, word [rsi]
jb 0x4117c8
jb 0x4117b8
push r10
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x411792
jb 0x4117c9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4117cd
pop rdi
jb 0x4117d0
jb 0x4117d4
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x4117eb
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4117bc
pop rdi
push rdx
pop rdi
je 0x4117fc
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4117ce
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x4117f2
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x4117e4
insb byte [rdi], dx
jae 0x411827
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
cmp byte [r15 + 0x4d], r11b
pop rdi
imul ebp, dword gs:[esi + 0x45], 0x5a5f0076
push rbx
je 0x411807
jbe 0x411838
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x41180f
jo 0x41183e
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x41185d
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x411847
jo 0x411854
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x411846
pop rdi
push rdx
pop rdi
je 0x411886
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x411858
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x41187c
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x41186e
insb byte [rdi], dx
jae 0x4118b1
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
push rdx
pop rdi
je 0x4118c3
pop rdi
imul ebp, dword [rbp + 0x70], 0x3653496c
pop rdi
xor dword [rbp + 0x45], eax
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4118cf
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x6d5f6465
insd dword [rdi], dx
jne 0x4118eb
push r11
je 0x4118bd
jo 0x4118ec
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4118d4
jbe 0x411905
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4118dc
jo 0x41190b
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x4118c1
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push r11
je 0x411909
xor ebp, dword [rbp + 0x6f]
jbe 0x411942
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41191f
jo 0x41194e
imul esi, dword [rdx + 0x49], 0x45456369
jbe 0x4118f9
pop rdi
pop rdx
push rbx
je 0x411930
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x411971
push r11
je 0x411944
jo 0x411973
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x411933
pop rdi
pop rdx
push rbx
je 0x41196a
cmp byte [rdi + 0x52], bl
pop rdi
je 0x4119b2
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x4119b1
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x411989
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x4119ad
push rbx
je 0x41199b
jo 0x4119ca
imul esi, dword [rdx + 0x49], 0x4569634b
movsxd r13, dword [r13 + rax*2 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x4119b2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4119f3
push r11
je 0x4119c6
jo 0x4119f5
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x411a0a
push rsp
jo 0x411a0d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4119fd
jbe 0x4119ba
pop rdi
pop rdx
push rbx
je 0x4119f2
je 0x411a0c
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
push rdx
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x411a03
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x411a2a
pop rax
push rsp
pop rdi
push r11
je 0x411a1d
je 0x411a5f
jo 0x411a58
jo 0x411a46
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x411a6b
push r10
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x411a40
pop rdi
push rdx
pop rdi
je 0x411a80
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x411a52
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x411a76
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x411a68
insb byte [rdi], dx
jae 0x411aab
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15 + rbx*2], r14d
pop r15
insb byte [rdi], dx
outsd dx, dword [rsi]
ja 0x411ab1
jb 0x411aad
outsd dx, dword [rsi]
jne 0x411ac0
push r8
push rbx
je 0x411a89
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x411ad1
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
push rbx
pop rdi
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x411ab1
pop rdi
push rdx
pop rdi
je 0x411af1
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x411ac3
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x411ae7
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x411ad9
insb byte [rdi], dx
jae 0x411b1c
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r14b, byte [r15 + rbx*2]
pop r15
je 0x411b1c
imul ebp, dword [rsi + 0x73], 0x5f747265
jne 0x411b34
imul esi, dword [rcx + 0x75], 0x6f705f65
jae 0x411b14
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x411b0b
xor dword [rdi + 0x54], ebx
jne 0x411b4f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rdx
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x411b31
je 0x411b4b
insd dword [rdi], dx
xor byte [rbp + 0x4a], al
movsxd r8, dword [r13 + 0x45]
push rdx
push rbx
je 0x411b41
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x411b68
pop rax
push rsp
pop rdi
push r11
je 0x411b5b
je 0x411b9d
jo 0x411b96
jo 0x411b84
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x411ba9
push r10
push rbx
xor eax, 0x5a5f005f
push r11
je 0x411b78
pop rdi
push rdx
pop rdi
je 0x411bc0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x411b91
jo 0x411bc0
imul esi, dword [rdx + 0x49], 0x4569634b
jno 0x411baf
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x411bad
jo 0x411bdc
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x411bc4
jo 0x411bf3
imul esi, dword [rdx + 0x49], 0x45456369
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x411bd5
xor dword [rdi + 0x54], ebx
jne 0x411c19
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
movsxd r8, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x411bfa
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x411c42
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x411c0f
jo 0x411c3e
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r15 + 0x4d], r11d
pop rdi
jbe 0x411c4c
insb byte [rdi], dx
jo 0x411c62
jb 0x411c35
jbe 0x411bf2
pop rdi
pop rdx
push rbx
je 0x411c2c
jo 0x411c5b
imul esi, dword [rdx + 0x49], 0x31745350
cmp byte [rdi + 0x52], bl
pop rdi
je 0x411c7a
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x411c79
push rbx
xor dword [rdi + 0x45], ebx
xor cl, byte [r9 + 0x52]
push rax
push rbx
je 0x411c51
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x411c99
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
pop rdi
movsxd rbp, dword [r9 + 0x45]
push r11
cmp dword [rdi + 0x76], ebx
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411cae
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x411cb7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x411cab
push rbx
je 0x411c96
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x411cde
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x411cab
jo 0x411cda
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x411cfc
jb 0x411cff
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor al, 0x5f
push rdx
push r11
je 0x411cc8
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x411d1a
jb 0x411d1d
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x411ce4
je 0x411d26
jo 0x411d1f
push rdx
push rbx
xor ebx, dword [rdi + 0x45]
push r11
pop rdi
jbe 0x411d18
push rsp
pop rdi
jo 0x411d1c
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411d3a
movsxd rdi, dword [rax + 0x78]
insb byte [rdi], dx
je 0x411d2a
push rax
push rbx
je 0x411d19
jo 0x411d48
imul esi, dword [rdx + 0x49], 0x53456369
je 0x411d26
jbe 0x411d57
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411d7f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x411d60
jb 0x411d97
jbe 0x411d99
jb 0x411da9
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411da8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411dc1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x411d98
jo 0x411dc7
imul esi, dword [rdx + 0x49], 0x53456369
je 0x411da5
jbe 0x411dd6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor al, byte [r13 + 0x53]
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x411dc2
xor dword [rdi + 0x54], ebx
jne 0x411e06
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
movsxd r8, dword [r13 + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x411ded
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x411e34
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x411e3e
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x411e0b
jo 0x411e3a
imul esi, dword [rdx + 0x49], 0x4569634b
xor al, byte [r13 + 0x52]
push r11
je 0x411e1a
pop rdi
push rdx
pop rdi
je 0x411e62
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x411e3d
outsw dx, word [rsi]
jb 0x411e81
jb 0x411e71
push r11
je 0x411e46
je 0x411e88
jo 0x411e81
push r12
pop rdi
push rdx
push rbx
je 0x411e54
jb 0x411e8b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x411e8f
pop rdi
jb 0x411e92
jb 0x411e96
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x411ead
add byte gs:[r15 + 0x5a], r11b
push r11
je 0x411e7f
pop rdi
push rdx
pop rdi
je 0x411ebf
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x411e91
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x411eb5
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x411ea7
insb byte [rdi], dx
jae 0x411eea
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x411ec4
jo 0x411ef3
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r9 + 0x49], ecx
push rdx
push rbx
xor byte [rdi + 0x45], bl
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r10
push rbx
je 0x411ee7
je 0x411f29
jo 0x411f22
jo 0x411f10
pop rdi
push r10
push rbx
xor al, 0x5f
jo 0x411f1c
xor dword [rdi + 0x45], ebx
push r11
je 0x411f00
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x411f36
je 0x411f4e
jo 0x411f47
pop r8
jae 0x411f51
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
pop r8
jae 0x411f5f
push rsp
xor bl, byte [rdi + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x411f2c
xor dword [rdi + 0x5f], ebx
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x411f51
push rbx
je 0x411f3c
jb 0x411f73
jbe 0x411f75
jb 0x411f85
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x411f84
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x411f9d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x411f74
jo 0x411fa3
imul esi, dword [rdx + 0x49], 0x53456369
je 0x411f81
jbe 0x411fb2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x411fdd
xor dword [rip + 0x6574495f], esi
jb 0x411fd1
insb byte [rdi], dx
jae 0x411fe9
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x411ffc
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x411ff7
je 0x41200c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x411fe2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x412021
movsxd rbx, dword [rdi + 0x73]
je 0x41202f
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
cmp byte [rdi + 0x53], bl
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41200f
jbe 0x412040
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x412017
jo 0x412046
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
cmp dword [r8 + 0x75], r14d
jae 0x412060
pop rdi
movsxd rbp, dword [rbx + 0x45]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41203a
xor eax, 0x6e755f5f
jne 0x412071
jb 0x412076
pop rdi
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x695f7261
outsb dx, byte [rsi]
jae 0x412085
jb 0x412096
push r11
je 0x412057
jb 0x41208e
jbe 0x412090
jb 0x4120a0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41209f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4120b8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41208f
jo 0x4120be
imul esi, dword [rdx + 0x49], 0x53456369
je 0x41209c
jbe 0x4120cd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4120f8
xor dword [rdi + rbx*2], esi
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x412103
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4120d9
je 0x41211b
jo 0x412114
push rdx
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x53], eax
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412120
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x412129
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41211d
push rbx
je 0x41210b
jo 0x41213a
imul esi, dword [rdx + 0x49], 0x45456369
jae 0x412159
jb 0x412156
jns 0x412132
push rbx
xor bl, byte [rdi + 0x45]
jbe 0x412140
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41215d
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x412139
xor eax, 0x6574495f
jb 0x41216e
insb byte [rdi], dx
jae 0x412186
pop rdi
imul esi, dword [rbp + 0x72], 0x53496c63
je 0x41214f
jb 0x412186
jbe 0x412188
jb 0x412198
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4121a8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41217f
jo 0x4121ae
imul esi, dword [rdx + 0x49], 0x53456369
je 0x41218c
jbe 0x4121bd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r11
pop r15
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4121ae
xor ebp, dword [rbp + 0x6f]
jbe 0x4121e7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4121c4
jo 0x4121f3
imul esi, dword [rdx + 0x49], 0x45456369
xor al, byte [r13 + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4121de
pop rdi
push rdx
pop rdi
je 0x41221e
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4121f0
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x412214
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x412206
insb byte [rdi], dx
jae 0x412249
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
push rdx
pop rdi
je 0x41225b
pop rdi
imul ebp, dword [rbp + 0x70], 0x3653496c
pop rdi
xor dword [rbp + 0x45], eax
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x41223c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41227b
movsxd rbx, dword [rdi + 0x73]
je 0x412289
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x412284
je 0x412299
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [rbx + 0x61], ah
jo 0x41229a
movsxd rbp, dword [rcx + 0x74]
jns 0x412283
jbe 0x412280
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41228b
pop rdi
pop rdi
jae 0x4122c8
jb 0x4122cf
push r11
je 0x412290
jb 0x4122c7
jbe 0x4122c9
jb 0x4122d9
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4122d8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4122f1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4122c8
jo 0x4122f7
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4122d5
jbe 0x412306
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x412331
xor dword [rip + 0x6574495f], esi
jb 0x412325
insb byte [rdi], dx
jae 0x41233d
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x412312
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41234b
je 0x412360
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41232d
jo 0x41235c
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x50]
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x412355
je 0x412397
jo 0x412390
push r10
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x412372
pop rdi
push rdx
pop rdi
je 0x4123b2
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x412384
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x4123a8
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x41239a
insb byte [rdi], dx
jae 0x4123dd
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r14b, byte [r10]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4123ea
movsxd rsp, dword [rbp + 0x5f]
push 0x5f746e69
jne 0x4123f7
imul esi, dword [rcx + 0x75], 0x52494965
push r11
je 0x4123c6
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x412418
jb 0x41241b
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x4123e2
je 0x412424
jo 0x41241d
push r10
push rbx
xor dword [rdi + 0x45], ebx
push r11
pop rdi
push r11
je 0x4123f8
pop rdi
push rdx
pop rdi
je 0x412440
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x412413
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x41245a
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x412464
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
jo 0x412450
push rsp
pop rdi
add byte [rdi + 0x5f], bl
jae 0x41247c
pop rdi
jae 0x412480
jb 0x412483
add byte [rdi + 0x5a], bl
push rbx
je 0x412447
cmp dword [rdi + 0x52], ebx
pop rdi
je 0x41248e
pop rdi
imul ebp, dword [rsi + 0x73], 0x5f747265
outsb dx, byte [rsi]
pop rdi
jb 0x412491
insb byte [rdi], dx
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x62]
push rax
push rbx
je 0x412469
cmp byte [rdi + 0x52], bl
pop rdi
je 0x4124b1
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x4124b0
push rbx
xor byte [rdi + 0x52], bl
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4124c9
jno 0x4124af
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4124cd
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4124e6
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4124bd
jo 0x4124ec
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4124ca
jbe 0x4124fb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rdx
push r11
je 0x4124e0
jb 0x412517
jbe 0x412519
jb 0x412529
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x412502
jo 0x412531
imul esi, dword [rdx + 0x49], 0x4569634b
xor cl, byte [r9 + 0x4a]
push rdx
push rbx
xor byte [rdi + 0x45], bl
push r11
je 0x412519
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x41256b
jb 0x41256e
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x412535
je 0x412577
jo 0x412570
jo 0x41255e
pop rdi
push r11
xor eax, 0x444a495f
jo 0x412569
xor byte [rdi + 0x45], bl
add byte [r15 + 0x5a], r11b
push rbx
je 0x412551
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41258a
je 0x41259f
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x41256c
jo 0x41259b
imul esi, dword [rdx + 0x49], 0x45456369
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4125bc
jb 0x4125bf
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x49], ebx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x4125ab
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x4125b1
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4125cf
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4125e8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4125bf
jo 0x4125ee
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4125cc
jbe 0x4125fd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4125e8
xor bl, byte [rdi + 0x5f]
je 0x41261d
push 0x65706c65
jb 0x41260e
insd dword [rdi], dx
xor byte [rbp + 0x52], al
movsxd rcx, dword [r10 + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x412608
xor dword [rdi + 0x54], ebx
jne 0x41264c
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor bl, byte [rdi + 0x44]
jo 0x412643
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x41262d
insd dword [rdi], dx
jo 0x412647
movsxd rbp, dword [rcx + 0x53]
je 0x412637
insb byte [rdi], dx
jae 0x41267a
movsxd rax, dword [r13 + 0x53]
push r11
je 0x412644
jo 0x412673
imul esi, dword [rdx + 0x49], 0x4569634b
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x412659
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41268e
push r10
movsxd rax, dword [rbp + 0x4f]
push rbx
je 0x412663
jb 0x41269a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x41269e
pop rdi
jb 0x4126a1
jb 0x4126a5
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4126bb
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4126bb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4126c4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4126b8
push rbx
je 0x4126a6
jo 0x4126d5
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
jae 0x4126f8
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4126d6
jo 0x412705
imul esi, dword [rdx + 0x49], 0x31745350
cmp byte [rdi + 0x52], bl
pop rdi
je 0x412724
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x412723
push rbx
xor dword [rdi + 0x45], ebx
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x76], ebx
push r10
push r11
xor dword [rdi + 0x4f], ebx
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41270f
jo 0x41273e
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r9 + 0x4a], ecx
push rdx
push rbx
xor byte [rdi + 0x45], bl
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r10
push rbx
je 0x412732
je 0x412774
jo 0x41276d
jo 0x41275b
pop rdi
push r10
push rbx
xor al, 0x5f
jo 0x412767
xor dword [rdi + 0x45], ebx
push r11
je 0x41274b
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x412781
je 0x412799
jo 0x412792
pop rax
jae 0x41279c
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
pop rax
jae 0x4127aa
push rsp
xor bl, byte [rdi + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x412778
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4127b1
je 0x4127c6
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x412790
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4127d8
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x4127a5
jo 0x4127d4
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor eax, 0x3453505f
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4127cb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41280c
push r11
je 0x4127df
jo 0x41280e
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x412808
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x412847
movsxd rbx, dword [rdi + 0x73]
je 0x412855
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x412850
je 0x412865
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x412874
outsb dx, byte gs:[rsi]
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x412855
xor byte [rdi + 0x48], bl
pop rdi
jae 0x412894
insd dword [rdi], dx
xor byte [rbp + 0x4f], al
movsxd rcx, dword [rdx + 0x30]
xor cl, byte [r9 + 0x63]
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41287e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4128b3
push r10
imul eax, dword [rbp + 0x4f], 0x3174534e
jb 0x4128bf
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4128c3
pop rdi
jb 0x4128c6
jb 0x4128ca
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4128e0
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4128e0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4128e9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4128dd
push rbx
je 0x4128cb
jo 0x4128fa
imul esi, dword [rdx + 0x49], 0x45456369
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x41290f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x412928
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4128ff
jo 0x41292e
imul esi, dword [rdx + 0x49], 0x53456369
je 0x41290c
jbe 0x41293d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jbe 0x4128ee
pop rdi
pop rdx
push rbx
je 0x41292c
pop rdi
push rdx
pop rdi
je 0x41296c
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x41293e
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x412962
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x412954
insb byte [rdi], dx
jae 0x412997
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x412938
pop rdi
pop rdx
push rbx
je 0x412972
jo 0x4129a1
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r9 + 0x49], ecx
push rdx
push rbx
xor byte [rdi + 0x45], bl
push r11
je 0x412989
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4129db
jb 0x4129de
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x4129a5
je 0x4129e7
jo 0x4129e0
jo 0x4129ce
pop rdi
push r11
xor eax, 0x4449495f
jo 0x4129d9
xor byte [rdi + 0x45], bl
add byte [r15 + 0x5a], r11b
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4129e0
jbe 0x412a11
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4129e8
jo 0x412a17
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x72
outsb dx, byte gs:[rsi]
jbe 0x4129cc
pop rdi
pop rdx
push rbx
je 0x412a03
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x412a4b
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x412a18
jo 0x412a47
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r15 + 0x4d], r11d
pop rdi
jbe 0x412a55
insb byte [rdi], dx
jo 0x412a6b
jb 0x412a3e
jbe 0x4129fb
pop rdi
pop rdx
push rbx
je 0x412a35
jo 0x412a64
imul esi, dword [rdx + 0x49], 0x43456369
xor dword [rcx + 0x52], ecx
imul esp, dword [rbx + 0x76], 0x544f4545
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x412a58
pop rdi
push rdx
pop rdi
je 0x412a98
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x412a6a
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x412a8e
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x412a80
insb byte [rdi], dx
jae 0x412ac3
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [rip + 0x645f4d5f], r14d
jae 0x412ad8
jb 0x412ad5
jns 0x412ac7
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r8
push rbx
je 0x412aa2
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x412aea
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x412abe
insd dword [rdi], dx
jo 0x412ad8
movsxd rbp, dword [rcx + 0x53]
je 0x412ac8
insb byte [rdi], dx
jae 0x412b0b
movsxd rax, dword [r13 + 0x53]
push r11
je 0x412ad5
jo 0x412b04
imul esi, dword [rdx + 0x49], 0x4569634b
xor r12d, dword [r13 + 0x6e]
jbe 0x412ab3
pop rdi
pop rdx
push rbx
je 0x412af1
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x70
imul esi, dword [rdx + 0x49], 0x45636952
push rbx
je 0x412afd
jo 0x412b2c
imul esi, dword [rdx + 0x49], 0x3174534e
pop rdi
pop rdi
movsxd rsp, dword gs:[rcx + 0x79]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x412b55
jb 0x412b4c
jo 0x412b2e
push rsp
pop rdi
pop rdi
pop rdi
je 0x412b66
jo 0x412b54
push rbx
xor bl, byte [rdi + 0x49]
push rsp
xor byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x412b77
jo 0x412b65
push r11
xor ebx, dword [rdi + 0x4f]
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x412b5a
pop rdi
push rdx
pop rdi
je 0x412ba2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x412b73
jo 0x412ba2
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r13 + 0x50], eax
push rbx
je 0x412b81
cmp byte [rdi + 0x52], bl
pop rdi
je 0x412bc9
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x412bc8
add byte [rdi + 0x5a], bl
push rbx
je 0x412ba0
jbe 0x412bd1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x412ba8
jo 0x412bd7
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x412bf9
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x412c11
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x412be7
jo 0x412bf4
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x412be4
jbe 0x412c15
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x412bec
jo 0x412c1b
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x412c05
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x412c4c
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x412c56
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x412c23
jo 0x412c52
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r13 + 0x52], eax
push r11
je 0x412c32
pop rdi
push rdx
pop rdi
je 0x412c7a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x412c4f
xor ebx, dword [rdi + 0x5f]
push 0x5f706165
jae 0x412c8d
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rcx*2 + 0x53]
je 0x412c61
jb 0x412c98
jbe 0x412c9a
jb 0x412caa
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412ca9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x412cc2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412c99
jo 0x412cc8
imul esi, dword [rdx + 0x49], 0x53456369
je 0x412ca6
jbe 0x412cd7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x412d02
xor dword [rip + 0x6574495f], esi
jb 0x412cf6
insb byte [rdi], dx
jae 0x412d0e
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x412ce6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x412d1f
je 0x412d34
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x412d01
jo 0x412d30
imul esi, dword [rdx + 0x49], 0x45456369
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x412d51
jb 0x412d54
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor dword [rdi + 0x4a], ebx
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x412d40
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
jo 0x412d46
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x412d32
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x412d6c
pop rdi
insd dword [rdi], dx
imul esp, dword fs:[rcx + 0x6e], 0x5f6f745f
imul si, word [rdx + 0x73], 0x4974
push rbx
je 0x412d4c
jb 0x412d83
jbe 0x412d85
jb 0x412d95
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412d94
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x412dad
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x412d84
jo 0x412db3
imul esi, dword [rdx + 0x49], 0x53456369
je 0x412d91
jbe 0x412dc2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x412ded
xor dword [rip + 0x6574495f], esi
jb 0x412de1
insb byte [rdi], dx
jae 0x412df9
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x412ddb
pop rdi
push rdx
pop rdi
je 0x412e1b
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x412ded
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x412e11
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x412e03
insb byte [rdi], dx
jae 0x412e46
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r14b, byte [r9]
pop rdi
pop r15
je 0x412e46
outsd dx, dword [rsi]
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x412e3b
jbe 0x412df8
pop rdi
pop rdx
push rbx
je 0x412e2e
xor bl, byte [rdi + 0x5f]
je 0x412e63
push 0x65706c65
jb 0x412e54
insd dword [rdi], dx
xor byte [rbp + 0x52], al
movsxd rcx, dword [r9 + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x412e4e
xor dword [rdi + 0x54], ebx
jne 0x412e92
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push r11
xor bl, byte [rdi + 0x44]
jo 0x412e89
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x412e78
pop rdi
push rdx
pop rdi
je 0x412eb8
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x412e8a
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x412eae
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x412ea0
insb byte [rdi], dx
jae 0x412ee3
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
push rdx
pop rdi
je 0x412ef5
pop rdi
imul ebp, dword [rbp + 0x70], 0x3653496c
pop rdi
xor dword [rbp + 0x45], eax
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x412f01
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x6d5f6465
insd dword [rdi], dx
jne 0x412f1d
push r11
je 0x412eef
jo 0x412f1e
imul esi, dword [rdx + 0x49], 0x4569634b
pop rdi
pop r15
jb 0x412f13
jbe 0x412ed0
pop rdi
pop rdx
push rbx
je 0x412f07
xor dword [rdi + 0x54], ebx
jne 0x412f4b
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rdx
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x412f32
pop rdi
push rdx
pop rdi
je 0x412f72
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x412f44
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x412f68
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x412f5a
insb byte [rdi], dx
jae 0x412f9d
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
cmp byte [r15 + 0x53], r11b
pop rdi
jb 0x412fa4
push 0x53504574
je 0x412f74
cmp byte [rdi + 0x52], bl
pop rdi
je 0x412fbc
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x412fbb
add byte [rdi + 0x5a], bl
push rbx
je 0x412f8d
xor bl, byte [rdi + 0x5f]
je 0x412fc2
push 0x65706c65
jb 0x412fb3
insd dword [rdi], dx
xor byte [rbp + 0x4f], al
movsxd rcx, dword [rdx + 0x45]
push r10
push rsp
xor byte [rdi + 0x52], bl
push rbx
je 0x412fac
xor dword [rdi + 0x54], ebx
jne 0x412ff0
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x5458496c
pop rdi
push rbx
xor dword [rdi + 0x44], ebx
jo 0x412fe7
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push r11
je 0x412fd6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x413015
movsxd rbx, dword [rdi + 0x73]
je 0x413023
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x41301e
je 0x413033
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41301d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413056
je 0x41306b
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x413035
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x41307d
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x41304a
jo 0x413079
imul esi, dword [rdx + 0x49], 0x4569634b
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x41309c
jb 0x41309f
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor ebx, dword [rdi + 0x49]
push rdx
push r11
je 0x413068
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4130ba
jb 0x4130bd
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x413084
je 0x4130c6
jo 0x4130bf
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
jbe 0x4130b8
push rbx
xor eax, 0x5f54505f
jo 0x4130be
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4130b1
pop rdi
push rdx
pop rdi
je 0x4130f1
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4130c3
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x4130e7
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x4130d9
insb byte [rdi], dx
jae 0x41311c
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
pop r15
jb 0x41312b
jo 0x41311d
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r8
push rbx
je 0x4130f8
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x413140
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x413113
insd dword [rdi], dx
js 0x41312d
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x413129
jb 0x413160
jbe 0x413162
jb 0x413172
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413171
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41318a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x413161
jo 0x413190
imul esi, dword [rdx + 0x49], 0x53456369
je 0x41316e
jbe 0x41319f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
jbe 0x413152
pop rdi
pop rdx
push rbx
je 0x413188
xor dword [rdi + 0x5f], ebx
jae 0x4131cb
jb 0x4131d2
pop rdi
push 0x49706165
push rbx
je 0x413198
jb 0x4131cf
jbe 0x4131d1
jb 0x4131e1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4131e0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4131f9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4131d0
jo 0x4131ff
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4131dd
jbe 0x41320e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x413239
xor dword [rip + 0x6574495f], esi
jb 0x41322d
insb byte [rdi], dx
jae 0x413245
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x41321d
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x413265
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x413232
jo 0x413261
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x413248
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x413290
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x41325d
jo 0x41328c
imul esi, dword [rdx + 0x49], 0x4569634b
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x413272
insd dword [rdi], dx
jo 0x41328c
movsxd rbp, dword [rcx + 0x53]
je 0x41327c
insb byte [rdi], dx
jae 0x4132bf
movsxd rax, dword [r13 + 0x53]
push r11
je 0x413289
jo 0x4132b8
imul esi, dword [rdx + 0x49], 0x4569634b
imul r15d, dword [r8 + 0x45], 0x5f00634f
pop rdx
push rbx
je 0x41329d
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4132e5
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x4132b2
jo 0x4132e1
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4132f6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4132ff
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4132f3
push rbx
je 0x4132de
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x413326
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x4132f3
jo 0x413322
imul esi, dword [rdx + 0x49], 0x4569634b
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4132d9
pop rdi
pop rdx
push rbx
je 0x413317
pop rdi
push rdx
pop rdi
je 0x413357
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x413329
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x41334d
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x41333f
insb byte [rdi], dx
jae 0x413382
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r15b, byte [r9]
pop rdi
pop r15
je 0x413382
imul ebp, dword [rsi + 0x73], 0x5f747265
push 0x5f746e69
jne 0x41339f
imul esi, dword [rcx + 0x75], 0x6f705f65
jae 0x41337f
push rbx
je 0x41336f
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4133b6
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x4133c0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41339d
pop rdi
push rdx
pop rdi
je 0x4133dd
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4133af
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x4133d3
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x4133c5
insb byte [rdi], dx
jae 0x413408
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
pop rdi
push rbx
pop rdi
imul esp, dword [rbp + 0x79], 0x45
push rax
push r11
je 0x4133de
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x413426
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x41340e
push rax
push rdx
push rbx
outsd dx, dword [rsi]
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x413449
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x413462
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x413439
jo 0x413468
imul esi, dword [rdx + 0x49], 0x53456369
je 0x413446
jbe 0x413477
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x62
jae 0x41348d
jbe 0x41342b
pop rdi
pop rdx
push rbx
je 0x413462
xor dword [rdi + 0x54], ebx
jne 0x4134a6
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x49], al
movsxd r8, dword [r13 + 0x45]
xor dword [r9 + 0x63], ecx
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x413488
xor ebp, dword [rbp + 0x6f]
jbe 0x4134c1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x41349e
jo 0x4134cd
imul esi, dword [rdx + 0x49], 0x45456369
xor dword [r13 + 0x53], eax
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x4134b8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4134f7
movsxd rbx, dword [rdi + 0x73]
je 0x413505
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413500
je 0x413515
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4134fc
xor dword [rdi + 0x54], ebx
jne 0x413540
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rdx
movsxd rax, dword [r13 + 0x45]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41352a
jo 0x413559
imul esi, dword [rdx + 0x49], 0x31745350
cmp byte [rdi + 0x52], bl
pop rdi
je 0x413578
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x413577
push rbx
xor dword [rdi + 0x45], ebx
xor dword [r9 + 0x52], ecx
push rbx
xor dword [rdi + 0x76], ebx
push r10
push r11
xor dword [rdi + 0x4f], ebx
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41359c
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413597
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4135b0
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x413587
jo 0x4135b6
imul esi, dword [rdx + 0x49], 0x53456369
je 0x413594
jbe 0x4135c5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rdx
push r11
je 0x4135aa
jb 0x4135e1
jbe 0x4135e3
jb 0x4135f3
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4135fc
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4135d8
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x413624
pop rdi
imul esi, dword [rbp + 0x72], 0x53496c63
je 0x4135f0
jo 0x41361f
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4135f8
jb 0x41362f
jbe 0x413631
jb 0x413641
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x413651
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
xor al, 0x5f
push rbx
je 0x41362d
jbe 0x41365e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rdx
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41364c
cmp byte [rdi + 0x52], bl
pop rdi
je 0x413694
pop rdi
imul ebp, dword [rsi + 0x63], 0x656d6572
outsb dx, byte [rsi]
je 0x41367f
push rbx
je 0x413663
cmp byte [rdi + 0x52], bl
pop rdi
je 0x4136ab
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x4136aa
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x413691
pop rdi
push rdx
pop rdi
je 0x4136d1
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4136a3
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x4136c7
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x4136b9
insb byte [rdi], dx
jae 0x4136fc
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rbp, dword [rdi + 0x6e]
jae 0x413712
jb 0x413715
movsxd rsi, dword [rdi + rbx*2 + 0x6e]
outsd dx, dword [rsi]
push rdx
push r11
je 0x4136e0
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x413732
jb 0x413735
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x4136fc
je 0x41373e
jo 0x413737
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
jbe 0x41372e
push rbx
je 0x413712
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x41375a
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
jo 0x413746
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x413764
movsxd rdi, dword [rax + 0x78]
xor dword [rsi], esi
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdi + 0x6e], 0x6d5f6465
insd dword [rdi], dx
jne 0x413780
push r11
je 0x413752
jo 0x413781
imul esi, dword [rdx + 0x49], 0x4569634b
pop rdi
pop r15
jo 0x4137a2
jb 0x413775
jbe 0x413732
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x413784
pop rdi
pop rdi
je 0x4137c0
jb 0x4137c9
ja 0x4137bb
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4137ad
pop rdi
pop rdi
insb byte [rdi], dx
insb byte [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4137ba
je 0x4137fc
jo 0x4137f5
push rdx
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413802
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41380b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4137ff
push rbx
je 0x4137ea
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x413832
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x4137ff
jo 0x41382e
imul esi, dword [rdx + 0x49], 0x4569634b
jae 0x41384f
jb 0x41384c
jns 0x413828
push rbx
xor al, 0x5f
jbe 0x413836
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x413824
je 0x413866
jo 0x41385f
push rdx
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x41383e
je 0x413880
jo 0x413879
push r10
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x413858
outsw dx, word [rsi]
jb 0x41389c
jb 0x41388c
push r10
push r11
je 0x413860
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4138b2
jb 0x4138b5
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push r12
pop rdi
push rdx
push rbx
je 0x41387e
jb 0x4138b5
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4138b9
pop rdi
jb 0x4138bc
jb 0x4138c0
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x4138d7
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4138a6
outsw dx, word [rsi]
jb 0x4138ea
jb 0x4138da
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x4138b2
jb 0x4138e9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4138ed
pop rdi
jb 0x4138f0
jb 0x4138f4
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x41390b
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4138dc
pop rdi
push rdx
pop rdi
je 0x41391c
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4138ee
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x413912
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x413904
insb byte [rdi], dx
jae 0x413947
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x41391b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413954
je 0x413969
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x413933
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x41397b
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x413948
jo 0x413977
imul esi, dword [rdx + 0x49], 0x4569634b
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x41396a
jo 0x413999
imul esi, dword [rdx + 0x49], 0x4569634b
xor cl, byte [r9 + 0x4a]
movsxd r8, dword [r13 + 0x4a]
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r10
push rbx
je 0x41398b
je 0x4139cd
jo 0x4139c6
jo 0x4139b4
pop rdi
push r10
push rbx
xor al, 0x5f
jo 0x4139c0
xor dword [rdi + 0x45], ebx
push r11
je 0x4139a4
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x4139da
je 0x4139f2
jo 0x4139eb
pop rax
jae 0x4139f5
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
pop rax
jae 0x413a03
push rsp
xor bl, byte [rdi + 0x45]
add byte [r15 + 0x5a], r11b
push r11
je 0x4139d5
insb byte [rdi], dx
jae 0x413a18
movsxd rax, dword [r13 + 0x63]
insb byte [rdi], dx
push r10
movsxd rdx, dword [r11 + 0x32]
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4139ee
jbe 0x413a1f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4139f6
jo 0x413a25
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x413a47
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x413a5f
push r11
xor dword [rdi + 0x45], ebx
jbe 0x413a35
jo 0x413a42
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x413a32
outsw dx, word [rsi]
jb 0x413a76
jb 0x413a66
push r10
imul eax, dword [rbp + 0x4f], 0x4e525f54
push rbx
je 0x413a3f
jb 0x413a76
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x413a7a
pop rdi
jb 0x413a7d
jb 0x413a81
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x413a98
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413a94
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x413a9d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413a91
push rbx
je 0x413a7c
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x413ac4
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x413a91
jo 0x413ac0
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x413aa6
insd dword [rdi], dx
jo 0x413ac0
movsxd rbp, dword [rcx + 0x53]
je 0x413ab0
insb byte [rdi], dx
jae 0x413af3
movsxd rax, dword [r13 + 0x53]
push r11
je 0x413abd
jo 0x413aec
imul esi, dword [rdx + 0x49], 0x4569634b
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x413a9d
pop rdi
pop rdx
push rbx
je 0x413ad4
xor dword [rdi + 0x54], ebx
jne 0x413b18
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
movsxd r8, dword [r13 + 0x45]
xor al, byte [r13 + 0x4f]
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x413afb
jo 0x413b2a
imul esi, dword [rdx + 0x49], 0x4569634b
xor cl, byte [r9 + 0x4a]
movsxd r8, dword [r13 + 0x4a]
push r11
je 0x413b10
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x413b62
jb 0x413b65
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x413b2c
je 0x413b6e
jo 0x413b67
jo 0x413b55
pop rdi
push r11
xor eax, 0x444a495f
jo 0x413b60
xor byte [rdi + 0x45], bl
add byte [r15 + 0x5a], r11b
push rbx
je 0x413b4a
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413b84
je 0x413b99
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x413b64
xor esp, dword [rdx + 0x61]
jae 0x413ba1
movsxd rbx, dword [rdi + 0x6f]
jae 0x413bb1
jb 0x413ba4
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x413bb3
outsw dx, word [rsi]
jb 0x413bf7
jb 0x413be7
push r11
je 0x413bbc
je 0x413bfe
jo 0x413bf7
push r12
pop rdi
push rdx
push rbx
je 0x413bca
jb 0x413c01
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x413c05
pop rdi
jb 0x413c08
jb 0x413c0c
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x413c23
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413c1f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x413c28
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413c1c
push rbx
je 0x413c07
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x413c4f
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x413c1c
jo 0x413c4b
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x413c43
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x413c82
movsxd rbx, dword [rdi + 0x73]
je 0x413c90
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413c8b
je 0x413ca0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x413c8a
xor al, 0x5f
pop rdi
jo 0x413cbf
jb 0x413cd4
imul esp, dword [rcx + 0x6c], 0x726f735f
je 0x413cb2
push rbx
je 0x413c9d
jb 0x413cd4
jbe 0x413cd6
jb 0x413ce6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413ce5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x413cfe
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x413cd5
jo 0x413d04
imul esi, dword [rdx + 0x49], 0x53456369
je 0x413ce2
jbe 0x413d13
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x413d3e
xor dword [rip + 0x6574495f], esi
jb 0x413d32
insb byte [rdi], dx
jae 0x413d4a
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x413d24
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x413d6b
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x413d75
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
je 0x413d42
jo 0x413d71
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r11], r14d
pop rdi
pop r15
movsxd rbp, dword [rdi + 0x6e]
jae 0x413d96
pop rdi
movsxd rsp, dword [rcx + 0x73]
je 0x413d6d
jbe 0x413d2a
pop rdi
pop rdx
push rbx
je 0x413d67
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x413da6
movsxd rbx, dword [rdi + 0x73]
je 0x413db4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x413daf
je 0x413dc4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413de4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x413ded
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x413de1
push rbx
je 0x413dcf
jo 0x413dfe
imul esi, dword [rdx + 0x49], 0x45456369
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x413db3
pop rdi
pop rdx
push rbx
je 0x413de9
outsw dx, word ss:[rsi]
jb 0x413e34
jb 0x413e24
pop rdi
jae 0x413e23
je 0x413e3b
jo 0x413e34
movsxd rax, dword gs:[r13 + 0x45]
push rbx
je 0x413e06
je 0x413e48
jo 0x413e41
jo 0x413e2a
push rsp
pop rdi
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x413e1d
jo 0x413e4c
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r9 + 0x49], ecx
movsxd r8, dword [r13 + 0x49]
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r10
push rbx
je 0x413e3e
je 0x413e80
jo 0x413e79
jo 0x413e67
pop rdi
push r10
push rbx
xor al, 0x5f
jo 0x413e73
xor dword [rdi + 0x45], ebx
push r11
je 0x413e57
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x413e8d
je 0x413ea5
jo 0x413e9e
pop r8
jae 0x413ea8
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
pop r8
jae 0x413eb6
push rsp
xor bl, byte [rdi + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x413e87
jo 0x413eb6
imul esi, dword [rdx + 0x49], 0x31745350
cmp byte [rdi + 0x52], bl
pop rdi
je 0x413ed5
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x413ed4
push rbx
xor dword [rdi + 0x45], ebx
xor cl, byte [r9 + 0x52]
push rbx
xor dword [rdi + 0x76], ebx
push r12
pop rdi
push rdx
push r11
xor dword [rdi], ebx
pop rdi
je 0x413eed
add byte [rdi + 0x5a], bl
push rbx
je 0x413ecb
pop rdi
push rdx
pop rdi
je 0x413f0b
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x413edd
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x413f01
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x413ef3
insb byte [rdi], dx
jae 0x413f36
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x413f47
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x413f2c
xor byte [rdi + 0x5f], bl
jo 0x413f6f
jo 0x413f61
push 0x49706165
push rbx
je 0x413f3b
jb 0x413f72
jbe 0x413f74
jb 0x413f84
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x413f83
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x413f9c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x413f73
jo 0x413fa2
imul esi, dword [rdx + 0x49], 0x53456369
je 0x413f80
jbe 0x413fb1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x413fdc
xor dword [rip + 0x6574495f], esi
jb 0x413fd0
insb byte [rdi], dx
jae 0x413fe8
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x413fc7
pop rdi
push rdx
pop rdi
je 0x414007
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x413fd9
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x413ffd
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x413fef
insb byte [rdi], dx
jae 0x414032
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15 + rbx*2], r14d
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x41403a
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r10
push r11
je 0x414013
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x414065
jb 0x414068
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x41402f
je 0x414071
jo 0x41406a
push r10
push rbx
xor dword [rdi + 0x45], ebx
push r11
pop rdi
push r8
push rbx
je 0x414046
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x41408e
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
jo 0x41407a
push rsp
pop rdi
add byte [rdi + 0x5f], bl
js 0x4140ab
pop rdi
jo 0x41409b
jb 0x4140ab
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4140c0
jae 0x41409f
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4140bf
je 0x4140d4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x4140a4
xor esp, dword [rdx + 0x61]
jae 0x4140e1
movsxd rbx, dword [rdi + 0x6f]
jae 0x4140f1
jb 0x4140e4
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rdx
push rbx
je 0x4140c8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x414107
movsxd rbx, dword [rdi + 0x73]
je 0x414115
imul ebp, dword [rsi + 0x67], 0x5f345349
push rbx
xor eax, 0x5f31545f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4140fa
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x414133
je 0x414148
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x414115
jo 0x414144
imul esi, dword [rdx + 0x49], 0x45456369
jae 0x414164
jb 0x414161
jns 0x41413d
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x41414d
push rbx
xor bl, byte [rdi + 0x50]
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x41413c
jo 0x41416b
imul esi, dword [rdx + 0x49], 0x31745350
cmp byte [rdi + 0x52], bl
pop rdi
je 0x41418a
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
jae 0x414189
push rbx
xor dword [rdi + 0x45], ebx
xor dword [r9 + 0x52], ecx
push rax
push rbx
je 0x414161
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4141a9
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
pop rdi
movsxd rbp, dword [r9 + 0x45]
push r11
cmp dword [rdi + 0x76], ebx
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x41418c
xor byte [rdi + 0x48], bl
pop rdi
jae 0x4141cb
insd dword [rdi], dx
xor byte [rbp + 0x4f], al
movsxd rcx, dword [rdx + 0x30]
pop rdi
pop r15
push 0x45646165
push rdx
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x4141f2
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4141d1
pop rdi
push rdx
pop rdi
je 0x414211
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4141e3
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x414207
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x4141f9
insb byte [rdi], dx
jae 0x41423c
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rbp, dword [rdi + 0x6e]
jae 0x414252
jb 0x414255
movsxd rsi, dword [rdi + rbx*2 + 0x6e]
outsd dx, dword [rsi]
push r10
push r11
je 0x414220
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x414272
jb 0x414275
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x41423c
je 0x41427e
jo 0x414277
push r10
push rbx
xor dword [rdi + 0x45], ebx
push r11
pop rdi
jbe 0x414270
push rbx
je 0x414254
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x41429c
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
jo 0x414288
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414274
je 0x41428e
insd dword [rdi], dx
xor byte [rbp + 0x49], al
movsxd r8, dword [r13 + 0x45]
push rdx
push rbx
je 0x414284
xor esi, dword [rbp + rsi*2 + 0x70]
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4142ab
pop rax
push rsp
pop rdi
push r11
je 0x41429e
je 0x4142e0
jo 0x4142d9
jo 0x4142c7
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x4142ec
push r10
push rbx
xor eax, 0x5a5f005f
push rbx
push r11
je 0x4142bd
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x414305
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x4142d2
jo 0x414301
imul esi, dword [rdx + 0x49], 0x4569634b
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x414317
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x414330
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x414307
jo 0x414336
imul esi, dword [rdx + 0x49], 0x53456369
je 0x414314
jbe 0x414345
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x414331
jb 0x414368
jbe 0x41436a
jb 0x41437a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x414379
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x414392
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x414369
jo 0x414398
imul esi, dword [rdx + 0x49], 0x53456369
je 0x414376
jbe 0x4143a7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor dword [r13 + 0x53], eax
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x414393
jb 0x4143ca
jbe 0x4143cc
jb 0x4143dc
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4143db
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4143f4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4143cb
jo 0x4143fa
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4143d8
jbe 0x414409
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
jo 0x414429
jbe 0x4143bc
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x41442a
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x41443d
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x41440b
xor dword [rdi + 0x54], ebx
jne 0x41444f
insb byte [rdi], dx
pop rdi
imul ebp, dword [rbp + 0x70], 0x6d4c496c
xor byte [rbp + 0x4a], al
push rdx
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x414432
jae 0x414477
jo 0x41444c
imul eax, dword [rbp + 0x76], 0x535f5452
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41444a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x414489
movsxd rbx, dword [rdi + 0x73]
je 0x414497
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x414492
je 0x4144a7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x414495
pop rdi
push rdx
pop rdi
je 0x4144d5
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x4144a7
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x4144cb
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x4144bd
insb byte [rdi], dx
jae 0x414500
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
je 0x414500
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jbe 0x4144a8
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x414512
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x41452b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x414502
jo 0x414531
imul esi, dword [rdx + 0x49], 0x53456369
je 0x41450f
jbe 0x414540
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
imul eax, dword [rbp + 0x6c], 0x4e5a5f00
push rbx
je 0x41452c
je 0x41456e
jo 0x414567
push r10
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x414549
pop rdi
push rdx
pop rdi
je 0x414589
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x41455b
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x41457f
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x414571
insb byte [rdi], dx
jae 0x4145b4
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rbp, dword [rdi + 0x6e]
jae 0x4145ca
jb 0x4145cd
movsxd rsi, dword [rdi + rbx*2 + 0x6e]
outsd dx, dword [rsi]
push r10
push r11
je 0x414598
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4145ea
jb 0x4145ed
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x4145b4
je 0x4145f6
jo 0x4145ef
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
jbe 0x4145e6
push rbx
je 0x4145ca
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x414612
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
jo 0x4145fe
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4145ef
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x41462e
movsxd rbx, dword [rdi + 0x73]
je 0x41463c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x414637
je 0x41464c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x414635
movsxd r8, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x41463a
pop rdi
push rdx
pop rdi
je 0x41467a
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x41464c
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x414670
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x414662
insb byte [rdi], dx
jae 0x4146a5
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
je 0x4146b4
outsd dx, dword [rsi]
jae 0x4146be
jbe 0x41464d
pop rdi
pop rdx
push rbx
je 0x414687
jo 0x4146b6
imul esi, dword [rdx + 0x49], 0x4569634b
xor cl, byte [r9 + 0x49]
movsxd r8, dword [r13 + 0x49]
insd dword [rdi], dx
xor byte [rbp + 0x45], al
push r10
push rbx
je 0x4146a8
je 0x4146ea
jo 0x4146e3
jo 0x4146d1
pop rdi
push r10
push rbx
xor al, 0x5f
jo 0x4146dd
xor dword [rdi + 0x45], ebx
push r11
je 0x4146c1
xor bl, byte [rdi + 0x49]
outsb dx, byte [rsi]
js 0x4146f7
je 0x41470f
jo 0x414708
pop r8
jae 0x414712
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
pop r8
jae 0x414720
push rsp
xor bl, byte [rdi + 0x45]
add byte [r15 + 0x5a], r11b
push rbx
je 0x4146ed
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x414739
pop rdi
push 0x49706165
push rbx
je 0x4146ff
jb 0x414736
jbe 0x414738
jb 0x414748
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x414747
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x414760
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x414737
jo 0x414766
imul esi, dword [rdx + 0x49], 0x53456369
je 0x414744
jbe 0x414775
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
insb byte [rdi], dx
push rbx
xor al, 0x5f
push rbx
xor dword [rdi + 0x35], ebx
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4147a4
xor dword [rip + 0x6574495f], esi
jb 0x414798
insb byte [rdi], dx
jae 0x4147b0
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4147bd
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4147d6
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4147ad
jo 0x4147dc
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4147ba
jbe 0x4147eb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
jbe 0x41479c
pop rdi
pop rdx
push rbx
je 0x4147d3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x41480c
je 0x414821
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4147eb
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x414833
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
je 0x414800
jo 0x41482f
imul esi, dword [rdx + 0x49], 0x4569634b
jae 0x414851
jb 0x41484e
jns 0x41482a
push rbx
xor ebx, dword [rdi + 0x45]
jbe 0x41483a
push rbx
xor eax, 0x5f54505f
add byte [rdi + 0x5a], bl
push rbx
je 0x41482d
pop rdi
push rdx
pop rdi
je 0x41486d
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x41483f
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x414863
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x414855
insb byte [rdi], dx
jae 0x414898
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
jo 0x4148ac
je 0x414898
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r8
push rbx
je 0x414873
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x4148bb
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r11
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x41488e
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x4148cc
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4148d3
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4148b5
jo 0x4148e4
imul esi, dword [rdx + 0x49], 0x53456369
je 0x4148bd
xor ebp, dword [rbp + 0x6f]
jbe 0x4148f6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4148e1
je 0x414923
jo 0x41491c
movsxd r8, dword gs:[r13 + 0x45]
xor al, byte [r13 + 0x4f]
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4148f6
xor byte [rdi + 0x48], bl
pop rdi
jae 0x414935
insd dword [rdi], dx
xor byte [rbp + 0x52], al
movsxd rcx, dword [r10 + r12*2 + 0x30]
xor dword [r13 + 0x53], eax
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x41491b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41495c
push r11
je 0x41492f
jo 0x41495e
imul esi, dword [rdx + 0x49], 0x53456369
push r11
xor dword [rdi + 0x45], ebx
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rbp + 0x61], ch
imul ebp, dword [rsi], 0x534e5a5f
je 0x414960
jo 0x41498f
imul esi, dword [rdx + 0x49], 0x4569634b
xor dword [r9 + 0x4a], ecx
movsxd r8, dword [r13 + 0x4a]
push r11
je 0x414975
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4149c7
jb 0x4149ca
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x414991
je 0x4149d3
jo 0x4149cc
jo 0x4149ba
pop rdi
push r11
xor eax, 0x444a495f
jo 0x4149c5
xor byte [rdi + 0x45], bl
add byte [r15 + 0x5a], r11b
push rbx
je 0x4149b2
outsw dx, word [rsi]
jb 0x4149f6
jb 0x4149e6
push r11
je 0x4149bb
je 0x4149fd
jo 0x4149f6
push r10
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x4149cc
jb 0x414a03
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x414a07
pop rdi
jb 0x414a0a
jb 0x414a0e
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor al, 0x5f
xor al, 0x74
jns 0x414a25
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4149f6
pop rdi
push rdx
pop rdi
je 0x414a36
movsxd rdx, dword gs:[r11 + 0x74]
xor al, 0x70
imul esi, dword [rdx + 0x49], 0x4569634b
push rbx
je 0x414a08
xor byte [rdi + 0x53], bl
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rsi + 0x73]
je 0x414a2c
push rbx
xor bl, byte [rdi + 0x45]
push rbx
je 0x414a1e
insb byte [rdi], dx
jae 0x414a61
movsxd rax, dword [r13 + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor r14b, byte [r10]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x414a6e
movsxd rsp, dword [rbp + 0x5f]
push 0x5f746e69
jne 0x414a7b
imul esi, dword [rcx + 0x75], 0x524a4965
push r11
je 0x414a4a
xor dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x414a9c
jb 0x414a9f
movsxd rsi, dword [rdi + rbx*2 + 0x74]
push rbx
je 0x414a66
je 0x414aa8
jo 0x414aa1
movsxd r8, dword gs:[r13 + 0x45]
push rbx
pop rdi
push r11
je 0x414a7a
pop rdi
push rdx
pop rdi
je 0x414ac2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x414a95
xor ebx, dword [rdi + 0x52]
pop rdi
je 0x414adc
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x414ae6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
jo 0x414ad2
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x414ac3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x414b02
movsxd rbx, dword [rdi + 0x73]
je 0x414b10
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x414b0b
je 0x414b20
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rax], al
jae 0x414b4f
insd dword [rdi], dx
je 0x414b3a
add byte [rsi], ch
jae 0x414b52
jb 0x414b54
add byte [rsi], ch
jae 0x414b4e
jae 0x414b5c
jb 0x414b5e
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x414b5f
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x414b6d
outsb dx, byte cs:[esi]
jne 0x414b3b
jne 0x414b79
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x414b49
push 0x687361
jns 0x414b92
jae 0x414b9f
insd dword [rdi], dx
add byte [rsi], ch
jns 0x414b9a
jae 0x414ba2
jb 0x414b30
outsb dx, byte cs:[esi]
jne 0x414b63
jbe 0x414b9c
jb 0x414bac
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x414b70
jbe 0x414ba9
jb 0x414bb9
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x414bb4
insb byte [rdi], dx
jns 0x414bc3
add byte [rsi], ch
jb 0x414bbe
insb byte [rdi], dx
jo 0x414bca
je 0x414b60
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x414b99
outsd dx, dword [esi]
je 0x414b6f
je 0x414bd7
js 0x414be8
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x414bed
je 0x414be3
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x414c06
jo 0x414c1a
pop rdi
je 0x414c0a
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x414c18
jns 0x414bb9
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x414c34
jns 0x414bc5
push 0x63
jb 0x414bca
jns 0x414c3c
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x414c46
je 0x414bdc
je 0x414c42
add byte [rsi], ch
jae 0x414c59
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x414bf0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rdx]
add byte [rax], al
add byte [rax], al
add al, bl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add al, cl
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xa000000000004007]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdi], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
and cl, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400f], cl
add byte [rax], al
add byte [rax + 0xf], cl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], bh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4014], al
add byte [rax], al
add byte [rax + 0x14], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4014], ah
add byte [rax], al
add byte [rax + 0x14], ah
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x17], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x17], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x17], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x17], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
shl byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdi*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdi*2], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x7b], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x7b], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x407c], al
add byte [rax], al
add byte [rax + 0x7c], al
add byte [rax], al
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x7c], ch
add byte [rax], al
add byte [rax], al
add byte [rax - 0x7c], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x4150d6
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, ch
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
scasb al, byte [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add al, bh
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], dh
add byte [rax], al
add byte [rax], dh
add byte [rax], al
jo 0x415253
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x415233
add byte [rax], al
add byte [rax], al
add byte [rax - 0x4f], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rcx + 0x60], 0
add byte [rax + 0xb1], al
add byte [rax], al
add byte [rax + 3], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb1], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rdx + 1], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb1], bh
add byte [rax], al
add byte [rax], ah
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
fadd qword [rax]
add byte [rax], al
add byte [rax], al
add dl, bh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
