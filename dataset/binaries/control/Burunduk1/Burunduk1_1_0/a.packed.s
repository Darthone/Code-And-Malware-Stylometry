call 0x400e78
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400c90
add ebx, ebx
je 0x400c46
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400c7e
cmp rbp, -4
ja 0x400c7e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400c66
add ecx, 4
mov dl, byte [rax]
je 0x400c8e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400c7e
ret
cld
pop r11
cmp r8b, 2
je 0x400ca6
jmp 0x400d23
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400cb6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400c9e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400cce
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400cbb
sub eax, 3
jb 0x400cec
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400d23
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400d13
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400d11
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400d00
cmp rbp, -0xd00
adc ecx, eax
call 0x400c52
jmp 0x400ca6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400dfc
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400d9a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400de6
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400db9
push 0x3a707474
jne 0x400e12
js 0x400dd2
jae 0x400e0c
outsb dx, byte cs:[rsi]
je 0x400dcb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400e39
jb 0x400e2b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400e56
jb 0x400e69
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x2119a2
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x2119a2
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400d34
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400e5f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400e0d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f0f07
jb 0x400f1f
movsxd rbp, dword [rdi]
jae 0x400f19
insb byte [rdi], dx
js 0x400f1f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400eff
cmp rsi, rcx
jae 0x400f07
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400ee6
cmp al, 0x8f
ja 0x400ee6
cmp byte [rsi - 2], 0xf
je 0x400eec
sub al, 0xe8
jg 0x400ee9
push rdi
cmp al, 1
ja 0x400ed4
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400ed7
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400f04
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400f5b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c13d9
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400f9f
mov al, 0xa
jmp 0x400f9f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400f7b
inc ebx
mov al, 0
jmp 0x400fa3
mov al, 2
jmp 0x400fa3
mov al, 3
jmp 0x400fa3
mov al, 0x3c
jmp 0x400fa3
push rcx
rcr ah, 1
fstp st(7)
jle 0x400fe4
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400ff6
jg 0x400fe8
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a676b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401042
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb61bf
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40104a
cmp esi, 0x21585055
jne 0x40104e
jge 0x401040
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401043
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401047
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x4010f3
pop rcx
or al, 0x3b
jb 0x4010f9
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40106b
jmp 0x40106d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660fae
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf531f6
in eax, dx
jg 0x4010a5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4010eb
mov bh, 0x2a
add edi, 0x10
jmp 0x4010e8
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401125
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401161
jne 0x401178
fstpnce st(6), st(0)
jle 0x401141
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401177
jrcxz 0x4011ab
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b10f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40122a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4011ea
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582957bf
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40125d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x4011f7
and ecx, 7
or al, 0xeb
jae 0x401262
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401297
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4012d5
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40128e
push rax
call 0xffffffff868d0f7b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401298
std
cmp edi, esi
xchg eax, edi
jle 0x4012ed
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95879
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4012eb
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x4012d9
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401302
js 0x401342
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4013d4
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad260f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x4013f5
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4013fa
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20eac
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401388
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax - 0x5e], al
adc byte [rdx], 0
add byte [rax], al
and byte [rcx], al
dec dword [rax]
and al, byte [rax]
add dh, ah
or dword [rax], eax
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4014ae
je 0x4014b7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401480
mov dh, 0x7d
jbe 0x40147f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4014b8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5280006], bl
add byte [rax + rcx], bh
nop
invd
add byte [rax + 9], dh
add al, 9
jge 0x40149c
stc
add byte [rdx], cl
add byte [rax], dh
or eax, dword [rax]
clc
or bh, byte [rdi]
jle 0x401427
or al, 0
and byte [rbx], cl
or eax, 0x90c6000
lodsb al, byte [rsi]
sbb al, 0x20
add al, 0xf2
add edx, esi
add byte [rbx + rdx + 0x10], dh
add byte [rax - 0x4ff1a50], al
adc dword [rax], eax
enter -0x70ec, 0x12
adc eax, 0xc807f2ef
movlps qword [rax], xmm0
mov esp, 0xe8001416
sbb eax, 0xcac09f60
add byte [rip + 0x1617], dl
and byte [r15], r11b
and byte [rdi], dl
add byte [rax], cl
sbb byte [rax - 0x35], ah
add dword [rdx + 0x20191f47], esi
and byte [rdi + 0x20], cl
sbb al, byte [rax]
mov al, 0x1b
add al, al
in al, 0xdd
xchg eax, esp
sbb al, 0x13
add dword [rdi], edx
add al, 0
int1
inc ebx
xchg eax, ebp
mov cs, word [rbx + rbx]
mov edi, 0x360c9719
and al, 0x4d
add ah, byte [rax + 0xbe0171b]
cmp eax, ecx
nop
and byte cs:[rip - 0x422df27d], cl
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
enter 0x1701, 0x53
mov ebx, 0x7a4f2212
push rdi
xchg byte fs:[rdi + 0xce3a4a5], dl
xlatb
stosd dword [rdi], eax
mov byte [rax + 0x77d9360c], dl
mov dword [rax + 0x43], esp
xor cl, al
fisttp dword [rdx - 0x3e6f4018]
in al, 0
and edi, esi
mov word [rax + 0x4641c9c], ss
add dword [rax - 0x27cdbce0], edx
xor byte [rdi], dl
xchg eax, ecx
leave
xchg eax, edx
push rbp
add dword [rdi - 0x6c], ebx
nop
and dword [rcx], ebx
insb byte [rdi], dx
je 0x401595
cwde
xchg eax, esp
xchg eax, edx
xchg byte [r12 + rbx*4 - 0x4a], spl
movabs al, byte [0xc9fca4d719064864]
leave
and dword [rcx], ebx
test al, 0x1b
add ch, byte [rdx + rsi + 0x3d0c8324]
mov al, 0x5a
xor cl, al
nop
or al, 0xb4
js 0x40155c
or al, 0xc9
and byte [rbx - 0x69], al
mov esp, 0x24320cbf
add eax, -0x19
xchg ah, ah
in al, 0x90
lsl ecx, eax
sbb dword [rdx - 0x2fa033bf], edx
and dword [rcx], ebx
xchg byte [r8 + rdx*4 - 0x55], spl
fcom st(6)
nop
pushfq
sbb al, 0x92
fadd qword [rcx]
add al, 0xe0
and byte [rbx + 0x32], al
enter -0x1bd6, 0x4f
and al, 0x83
or al, 0xc9
call 0xffffffff9109025e
or al, 0x32
movsb byte [rdi], byte ptr [rsi]
int3
leave
and byte [rbx + 0x32], al
hlt
clc
sbb dword [rip - 0x37cdbe04], eax
test dword [rax + rax], ebx
adc al, 0x67
add al, 0xc
leave
and byte [rbx - 0x73], al
or byte [rbx - 0x7cdbcdf4], dh
or al, 0xdc
adc byte [rsi + 0x290e4e4], al
adc al, 0x28
sbb dword [rdx + 0x1c521841], edx
and dword [rcx], ebx
jge 0x401645
sbb dword [rax + rdx*4 - 0x5d], esp
sub byte [rax], cl
leave
imul edx, dword [rax - 0x68f247bf], -0x16
jb 0x4015c8
mov bl, 0x27
adc byte [rdx], 0x17
pop rsp
sbb al, byte [rdi]
or dword [r10 + r14*2], ecx
fcom qword [rip + 0x6437376f]
push rax
mov esi, 0x77125f07
pop rax
or byte [rbx - 0x77aeb8b9], al
pop rbp
sbb dword [rdi + rax + 0x4764ef05], edi
adc bl, byte [rax]
mov ebx, 0x2f7a4732
adc al, 0x6f
insb byte [rdi], dx
wait
mov edx, dword [rdi]
call 0xffffffffee465e14
xchg eax, ebp
mov r15d, 0x8f5a09d2
scasb al, byte [rdi]
add byte [rax], dl
or dl, ch
add byte [rsi - 0xe], dh
ja 0x401631
adc r11b, r15b
adc eax, dword [rdx]
mov al, 0x93
or dword [rdx + rbp], ecx
pop rdi
or byte [rbx + 0x7b773b2], bh
add dh, al
cmp eax, ecx
add eax, 0x7707da76
in al, dx
xor al, byte [rsp + rbx*4 + 0x2f038a3d]
div byte [rcx + 0x22caf605]
outsd dx, dword [rsi]
adc dword [rax], ecx
or al, 0x21
fdiv dword [r14]
push rbp
outsd dx, dword [rsi]
in al, 0x10
xor al, byte [rbp + rdi*4 + 0x61160909]
call 0x7f6e5e84
push 0x2e
nop
push rdi
or qword [rcx + r10 + 0x12c65b08], rdx
ljmp [rdi]
nop
xchg byte [rcx], ah
insb byte [rdi], dx
mov dh, 0x5f
sal bh, 1
adc byte [rip - 0x22f93e6e], bl
cmpsd dword [rsi], dword ptr [rdi]
loopne 0x40171c
or ah, byte [rdi]
pushfq
mov dl, 0xd8
ja 0x4016fe
sbb bl, byte [rdi + 0x66970a33]
sbb dword [rax + rdx*4 - 0x4d], esp
or eax, 0xb83fd92f
jbe 0x40177f
nop
and dword [rax + rax + 0x13], ecx
xlatb
mov dl, 0x59
jnp 0x401726
sub dword [rdi], eax
sbb esi, dword [rdi + 0x2f]
mov bl, 0xd8
sub esp, dword [rcx - 0x58f5a389]
push -0x37a210f6
mov bl, 0x17
xchg byte [rdi], al
or byte [rcx], ah
test byte [rax - 0x7013f9bf], dl
or byte [r8 - 0x7939b59c], r11b
out 0x77, eax
sbb ch, dh
sbb dl, byte [rdx]
sbb dl, byte [rax]
comiss xmm4, xmmword [rcx]
or byte fs:[rbx], bl
and al, 0x17
cmp al, 6
cmp edi, dword [rcx - 0x3e]
xchg byte [rbx], cl
leave
adc dword [rdi + 0x5d815677], esi
lahf
mov eax, dword [rdi - 0x41]
cld
pop rdi
adc esp, dword [rbx + 0x72]
je 0x4017e1
je 0x4017e5
movsxd rbx, dword cs:[rdi + 0x4a]
push r10
pop rdi
pop rbx
sti
lodsd eax, dword [rsi]
test byte [rcx + rcx*2 + 0x53], 0x54
or dword [rax + 0x65], edx
jb 0x4017eb
imul ebx, dword [edx], 0xdbdb5f06
mov ebx, 0x5f6d74ff
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4017ba
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rsi + rsi*8 - 0x49], esi
outsd dx, dword [rsi]
jb 0x40181d
pop rdi
jne 0x401826
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x40181f
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xf8243538
mov edi, 0x665f05fd
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x40182a
outsb dx, byte gs:[rsi]
je 0x401841
jns 0x401801
imul ebp
or dword [rdx], ecx
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401810
or eax, 0x1bac26dd
pop rdi
sub dword [rdx + rbp + 0x62], esi
pushfq
jo 0x40185b
mov dh, 0xd6
mov edi, 0x74535a24
xor qword [rcx], r15
jo 0x401861
movsxd rsp, dword gs:[rbp + 0x77]
cdq
sub eax, 0xdadd6e77
fistp word [rdi + 0x74637572]
sbb dh, byte [rbx]
jo 0x401882
movsxd rsp, dword [rcx - 0x27]
div byte [rbx + 0x673d72ce]
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x5b0c650f
fstp xword [rbp + 0x696738db]
outsd dx, dword [rsi]
pop rbp
cmp qword [rdx + r11], r9
jne 0x401805
mov dh, 0xdd
outsd dx, dword [rsi]
js 0x4018ac
xor r14b, byte [rcx]
mov bl, 0x65
cmpsb byte [rsi], byte ptr [rdi]
insb byte [rdi], dx
ja 0x40187f
fdivr dword [rdi + 0x6b]
pop rdi
jo 0x4018b5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
pop rax
jmp 0x401858
jnp 0x40186d
adc dword [rcx], esi
xchg eax, ebp
pop rdi
adc dh, byte [edi + 0x301edb37]
cmc
jo 0x4018a1
pop rbp
adc dh, byte [rcx]
xor eax, 0xdb3b7b6
js 0x401814
jae 0x4018bf
xor eax, 0xedf66153
or bl, bl
mov dh, 0x45
test al, 0x73
jne 0x4018e4
jae 0x4018a3
sub ebp, esp
fst qword [rax + rdi]
pop rdi
imul ebp, dword [rbp + 0x69], 0x5856417a
sub esi, dword [rdi + rsi + 0x20ff010a]
test dword [rbp + 0x45a5df85], esi
push r11
imul ecx, dword [rdx + 0x24], 0x3b5ac2b6
xor eax, 0x86a9a562
or eax, 0xb616c290
outsb dx, byte [rsi]
adc ah, byte [rcx - 0x28]
jbe 0x4018c6
mov ebx, 0x1c6b7787
xor al, 0x67
adc dword [rax + 0x7b], esi
pop rbx
push rdi
loop 0x40193b
ficom word [rax + 0x637086ca]
push 0x580427ac
movabs eax, dword [0x10b6402713629151]
enter 0x4f65, 0x77
insd dword [rdi], dx
jbe 0x40186f
test dword [rdi], esp
cmp dword [rsi], esp
or esi, dword [rbp + 0x79b0ae4b]
xor al, 0x6e
jmp 0x401913
outsb dx, byte [rsi]
xor dl, byte [rax + 0x1e11369b]
insd dword [rdi], dx
wait
retf 0x29de
outsd dx, dword [rsi]
jne 0x40197b
sub dh, byte [rax + 0x18]
jbe 0x401989
mov eax, 0x76ec81d2
imul edx, dword [rbp + 0x34], 0x362d3666
pop rbp
and eax, 0xd928306a
enter -0x4946, -0x36
int 0x15
jo 0x401920
pop rdx
retf
xor eax, 0x2e28371b
add eax, 0xdb206969
insb byte [rdi], dx
sub esi, dword [rbx]
xchg eax, esp
jb 0x40192a
cmp eax, 0xf48654d8
xor dword [rdi], esp
je 0x4019c1
jo 0x40199c
imul esi, dword [rdx], -0x70
and eax, 0x52a4e532
sub dword [rbp + rdi*4 - 0x18dc8bda], edx
int3
popfq
retf 0x1bb6
je 0x4019c3
jb 0x40198b
and eax, 0xa9db2012
jo 0x4019cb
outsb dx, byte [rsi]
int 0xe
sbb eax, ecx
cdq
xor al, 0x64
sub byte [rbp + 0x4e946db5], dl
and al, 0x6e
sbb byte [rsp + rdx*4 + 0x64], dh
and bh, byte [rcx]
jae 0x4019f3
xor eax, 0xd0ac2b93
mov bh, 0x65
xchg byte [rcx], ch
push rbp
push rsi
js 0x401997
sub al, 0x78
imul ecx, dword [rdx + rdi*2 - 0x3da3f0e4], 0xa1383b74
je 0x401951
ret
ror dword [rsi], 1
pop rdi
push rbx
and bh, byte [rbp - 0x487a9739]
movabs byte [0xff355a790df92264], al
mov ebx, 0x9738d8d
jbe 0x401996
and dword [r15 + 0x50], r11d
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
sahf
sub dword [rsi + 0x54434efd], 0x104e4f49
and byte [rsi], dh
xor byte [rbx - 0x23], dh
sbb byte [rsp + rbx*8 + 0x7a416962], dh
or eax, 0x5c0cdf77
push rbx
mov byte [rsi + rbx*2 + 0x4c], ah
wrmsr
mov esp, 0x69dbfb80
imul ebp, dword [rdi], 0x424f4c47
xor r10b, byte [rdi + rbx*2 - 0x7c65a0b7]
pop rbx
stosd dword [rdi], eax
movabs al, byte [0xeffbc4e9f2f3542]
mov al, 0x46
push rdx
pop r15
pop rdx
cmp byte [rbx - 0x50], bh
in eax, 0xc9
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
push rdx
sar r11, -0x25
push rbx
xchg eax, ebp
pop rdi
push rsp
sub byte [r8 - 0x187b27a5], r12b
adc byte fs:[rdi - 0x2232498e], ah
out dx, al
cmpsb byte [rsi], byte ptr [rdi]
pop rcx
sbb ebp, dword [r11 - 0x339c499e]
in eax, dx
and dl, cl
mov ecx, dword [rax + 0xf]
insd dword [edi], dx
cmpsd dword [rsi], dword ptr [rdi]
and eax, 0x5f4b120d
je 0x401aab
iretd
push rdx
scasb al, byte [rdi]
in eax, dx
ret 0x2e26
or al, 0x73
jae 0x401a18
jo 0x401ae4
jp 0x4019fa
movabs byte [0x12e325f434249fd], al
cwde
and dword [rcx + 0x3ee7ba19], edx
and edi, dword [rdx]
push cx
and al, 0xdd
or al, 0xb
xchg dword [rbp + 4], ebp
jae 0x401a65
and dh, byte [rcx + rcx*2]
xchg ch, bh
rcr esi, -0x6e
xor dword [r13 + 0x76], eax
and al, 0x58
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x8e
adc esp, dword [rcx]
fxch st(6)
jle 0x401b19
outsb dx, byte [rsi]
push rbp
sbb eax, eax
pop rbx
je 0x401a9d
pop rbp
mov esi, 0x45c32507
jb 0x401b2a
jb 0x401a80
mov ch, 0x3a
fiadd word [rcx + 0x67]
movsxd rcx, dword [r11]
xor dword [rbp + 0x72745f52], ebx
jbe 0x401b44
lodsd eax, dword [rsi]
mov esp, 0x61534510
add al, 0x45
jo 0x401b0d
push rdx
mov r14b, 0x25
in al, dx
push rbx
xor al, 0x5f
or dword [rsi + 0x31], 0x4d
mov ecx, 0x503d95b2
movsxd rcx, dword [r11 - 9]
mov sil, 0x25
hlt
sub ecx, dword [rcx + 0x54]
pop r15
sbb dword [rbx + rax*2], ecx
add eax, 0x1787e359
push rsp
ror dword [rbp + rbx*2 + 0x5a876563], 1
mov dh, byte [rax - 0x513d9bc8]
pop rdi
jne 0x401b6f
add byte [rax - 0x59b99992], dl
add al, 0xf6
xchg dword [rbp + 0x26c82e26], eax
xchg eax, esp
cdq
xchg eax, edx
imul r8d, dword [rsi + 0x655f409b], 0xbc6e48e1
insd dword [rdi], dx
rcl dword [rdx], cl
xor ch, byte [rcx + 0x4b]
movsxd rbp, dword [rsi + 0x52]
pop rdi
push -0x661cd388
jnp 0x401aef
leave
imul ebx, dword ss:[rax - 0x17], 0xcd8a6265
sbb al, 0xe4
or ah, byte [rcx]
jrcxz 0x401bc2
imul esi, dword [rbp + rdx*2 - 0x15], -0x55
mov al, 0x29
ret
lock sub byte [rbx - 0x45], cl
cmp bl, byte [rax]
mov cl, 0x35
and bh, byte [rdi + 0x5ada1665]
xor dword [rsi + 0x36], 0xb46d6d4e
outsb dx, byte [rsi]
scasb al, byte [rdi]
mov ebp, 0x5f83fd65
jbe 0x401bb2
sub esp, dword [rdi]
xchg eax, edx
test byte [rsi - 0x5d], ch
xchg eax, edi
loope 0x401bbc
xor edx, dword cs:[rax + rsi*2 + 0x336d7460]
mov ch, 0x46
push rbp
outsb dx, byte [rsi]
outsd dx, dword [rsi]
loope 0x401bfc
fstp dword [rcx]
scasb al, byte [rdi]
push rcx
movsb byte [rdi], byte ptr [rsi]
sbb eax, dword [rbx + 0x43]
push rdi
xor byte [rsi + 0x38], bh
lodsd eax, dword [rsi]
mov word [rsp + rdi*2], ss
and byte [r15], r13b
enter 0x61cd, 0x53
add byte [rsi], ch
jae 0x401b7b
jbe 0x401b96
jns 0x401c2a
je 0x401c34
push 0x5b72dd09
jo 0x401ba9
add byte [rax + 7], dh
outsb dx, byte [rsi]
outsd dx, dword [rsi]
clc
sub eax, 0x6d82a6e1
adc eax, 0x2e100d67
jne 0x401b7a
imul ebp, dword [rip + 0x2d6478d6], 0x69
ja 0x401bf3
jb 0x401c20
or dword [rbp + rsi*4 + 0x79647b99], ebx
outsb dx, byte [rsi]
sbb dword [r14 - 0x24], r14d
test byte [rcx], bl
xor byte [rbp + 0x2b], al
or al, 0x5f
sbb esp, dword [rax]
fsubr dword [rbx + 0x35]
xchg eax, esi
sub byte [rax], 9
mov bh, 0x3d
pop rbx
in al, dx
je 0x401c7f
or ch, byte [rdi + rbp*2]
or byte [rdx - 9], al
jb 0x401c44
sbb byte [rip - 0x6690db38], al
imul esi, dword [rax], 0x58
cmp eax, 0x368652e
push 0x6d060d49
ret
sub eax, 0x2e5f655d
adc dh, byte [rax - 0x63]
test eax, 0x116cbd5b
and eax, 0xd9b0e8d6
or ebp, dword [r10 - 0x2a]
movabs eax, dword [0x680037362d0b7b36]
jnp 0x401caa
imul ecx, dword [rsi], -0x66
movsxd rcx, dword [rcx - 0x2ad84fc]
cmp al, 0xd1
stosb byte [rdi], al
insb byte [rdi], dx
add byte [rax], al
stgi
test byte [rdx + 0x16], bl
xlatb
inc dword [rdi]
xchg byte [rax + rcx*2 - 0x32], ah
sbb al, 1
and esp, dword [rax + rdx*4 + 1]
imul eax, dword [rdi], 0x92195454
and dword [rcx], ebx
and byte [rcx + rsi], al
sbb dword [rax + rdx*4 + 0x21], esp
je 0x401cf4
and al, 0x1c
repne outsb dx, byte [rsi]
sub byte [rdi + rdi*2 - 0xa], al
ljmp [rdi - 0x68]
xor cl, al
and byte [rbx + 0x20053498], al
int 0x90
or al, 8
or r14, qword [rbx - 0x2fc9f37d]
rcr byte [rax + 2], 1
sti
xor ecx, eax
xchg eax, ebx
sbb byte [rsi + 0x78], dl
xor ebp, dword [rdx + 0x49]
add eax, edi
rcr byte [rbp + 0x24], cl
adc al, 3
pop rsi
mov edi, 0x8cdeceff
pop rdx
out dx, eax
mov edi, 0x6c86e932
add al, byte [rdi]
imul edi, dword [rdi], -2
cmp dword [rbx - 0x6d], esi
add dword [rax + 7], esi
cmpsd dword [rsi], dword ptr [rdi]
nop
fst qword [rbp + rcx*2 + 0x7aff0606]
add al, 0x84
stosb byte [rdi], al
and eax, 0xd83f093f
and esp, esp
xor bh, bh
test byte [rdi], bh
and byte [rbx + 0x3042320c], al
xor byte [rcx], ah
mov ecx, 0x1901c8e4
mov ss, word [rbx]
outsd dx, dword [rsi]
adc cl, byte [rsi + rax + 6]
out dx, eax
leave
or edi, edi
sbb cl, byte [rcx - 0x6c8fb1c1]
sub dh, byte [rdi - 0x37bf8ff9]
xchg byte [rax + rcx*2 + 0x10], ch
xchg eax, esp
and ecx, 0x7df5526
enter 0x6c8e, 0xf
popfq
jo 0x401d88
and bh, cl
fadd qword [rdi]
jg 0x401d35
movabs dword [0x9ff07e67250d2bf], eax
test eax, 0x293733bf
mov edi, 0xc9176428
add dword [r9 + 0x7339283f], r14d
adc ecx, dword [rdi + 0x6e547f07]
push rsi
test dword [rdi + rdi*4 - 0x59], esp
nop
or al, 0x25
jg 0x401d04
leave
cmp ebx, ecx
int 0xaa
iretd
jg 0x401d7f
xor al, 0x19
insb byte [rdi], dx
sub bl, bl
and eax, dword [rbx]
and eax, 0x719bc27
mov edi, 0xd2032610
or eax, 0xf80f3fe7
in al, dx
pop rsp
and al, 7
push rbx
add dword [rsi], esi
sbb dword [rdi + rdi*8 - 0x3264c0e2], esi
xchg eax, esi
je 0x401d94
wait
xchg ah, ah
in al, 0x99
jg 0x401d96
add dword [rsi], eax
adc al, cl
mov dh, 0x90
cwde
mov edi, 0x45c8391f
xor bl, byte [rdi]
or byte [rcx], al
add dword [rdi - 0x7d], esp
adc al, 0x21
jmp qword [rax]
mov al, 0xc9
nop
or al, 0x25
or dh, byte [rax - 0x47dfe88c]
jg 0x401ddd
or byte [rdx + rsi], cl
enter -0x3f80, -0x40
mov al, 0x23
adc dword [rax + 0x187f154f], -0x79
test dword [rax + rsi + 0x17], ebp
xor al, 0x3f
mov bl, 0xc3
adc dword [rbx + 0x23], edi
or eax, eax
xchg eax, esp
idiv dword [rcx]
movq qword [rax + 0x58], mm1
and byte [rbx + 0x3c9cd2d7], bh
imul esp, dword [rax], -1
fmul dword [rdi + rbx]
xchg eax, ebx
fadd dword [r8]
or dword [rdi - 0x30], edi
sub eax, 0xc9160000
xlatb
or ecx, dword [rcx]
add byte [rax], al
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip + 0xf080216], ecx
xlatb
popfq
movabs rsp, 0xe600002208d47c59
or dword [rax], eax
add al, cl
add byte [rax], al
add al, byte [r8]
jmp 0x401e39
add byte [rax], al
add bh, bh
