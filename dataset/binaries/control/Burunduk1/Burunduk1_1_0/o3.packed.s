call 0x400f88
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400da0
add ebx, ebx
je 0x400d56
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400d8e
cmp rbp, -4
ja 0x400d8e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400d76
add ecx, 4
mov dl, byte [rax]
je 0x400d9e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400d8e
ret
cld
pop r11
cmp r8b, 2
je 0x400db6
jmp 0x400e33
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400dc6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400dae
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400dde
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400dcb
sub eax, 3
jb 0x400dfc
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400e33
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400e23
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400e21
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400e10
cmp rbp, -0xd00
adc ecx, eax
call 0x400d62
jmp 0x400db6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400f0c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400eaa
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400ef6
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400ec9
push 0x3a707474
jne 0x400f22
js 0x400ee2
jae 0x400f1c
outsb dx, byte cs:[rsi]
je 0x400edb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400f49
jb 0x400f3b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400f66
jb 0x400f79
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211942
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211942
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400e44
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400f6f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400f1d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1017
jb 0x40102f
movsxd rbp, dword [rdi]
jae 0x401029
insb byte [rdi], dx
js 0x40102f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40100f
cmp rsi, rcx
jae 0x401017
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400ff6
cmp al, 0x8f
ja 0x400ff6
cmp byte [rsi - 2], 0xf
je 0x400ffc
sub al, 0xe8
jg 0x400ff9
push rdi
cmp al, 1
ja 0x400fe4
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400fe7
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401014
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40106b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c14e9
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4010af
mov al, 0xa
jmp 0x4010af
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x40108b
inc ebx
mov al, 0
jmp 0x4010b3
mov al, 2
jmp 0x4010b3
mov al, 3
jmp 0x4010b3
mov al, 0x3c
jmp 0x4010b3
push rcx
rcr ah, 1
fstp st(7)
jle 0x4010f4
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401106
jg 0x4010f8
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a687b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401152
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb62cf
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40115a
cmp esi, 0x21585055
jne 0x40115e
jge 0x401150
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401153
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401157
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401203
pop rcx
or al, 0x3b
jb 0x401209
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40117b
jmp 0x40117d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36610be
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53306
in eax, dx
jg 0x4011b5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4011fb
mov bh, 0x2a
add edi, 0x10
jmp 0x4011f8
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401235
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401271
jne 0x401288
fstpnce st(6), st(0)
jle 0x401251
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401287
jrcxz 0x4012bb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b21f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40133a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4012fa
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582958cf
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40136d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401307
and ecx, 7
or al, 0xeb
jae 0x401372
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4013a7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4013e5
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40139e
push rax
call 0xffffffff868d108b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4013a8
std
cmp edi, esi
xchg eax, edi
jle 0x4013fd
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95989
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4013fb
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x4013e9
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401412
js 0x401452
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4014e4
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad271f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401505
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40150a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20fbc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401498
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
jbe 0x401525
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax - 0x7e], al
mov dl, byte [rdx]
add byte [rax], al
add byte [rax], ah
add edi, edi
sbb byte [rdi], dl
add byte [rax], al
push rsi
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4015be
je 0x4015c7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401590
mov dh, 0x7d
jbe 0x40158f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4015c8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5100006], bl
add ah, dl
enter -0x37f9, 0xf
or byte [rax], al
or byte [rax], cl
or dword [rax], eax
test al, 0xe4
adc ecx, eax
adc ecx, dword [rdx]
add al, bl
or eax, dword [rax]
mov byte [rdx], cl
or esp, esp
add ecx, dword [rax + rax]
mov al, 0xd
add al, ah
or edi, ecx
add al, 0xf2
add dword [rsi], ecx
add al, dh
lldt word [rbx + rdx + 0xf9027c]
adc byte [rax], al
movabs al, byte [0x201cac0914480011]
adc r10b, byte [r15]
cmp ah, 1
adc eax, dword [rax]
adc al, 0
call 0x3e807607
cmp dword [rdx + 0x16f800], 0x9f201e00
add byte [rax], cl
sbb byte [rax], al
clc
nop
seto byte [rdi]
sbb dword [rax], eax
add byte [rax], ah
sbb al, byte [rax]
test al, 0xca
nop
sbb eax, dword [rax]
rcr byte [rbx + rdx], 0x62
repne outsb dx, byte [rsi]
add dword [rdi], edx
add al, 0
int1
dec dword [rbx + rbx]
in al, dx
cmpsb byte [rsi], byte ptr [rdi]
loope 0x4015ec
mov edi, 0x40029719
or eax, 0x92191740
sbb eax, dword es:[rax + 0x486f742e]
rol byte [rdi + rbx*2 - 0x59], 0xc8
test al, cl
add dword [rcx], 0x17
push rbx
sbb qword [r10 + 0x477aaec1], r10
loopne 0x4015d0
fcom dword [r13 - 0x285a68f0]
stosd dword [rdi], eax
sbb dword [rbp + rbp*8 + 0x14382738], -0x59
or eax, 0xe4e419cc
and byte [rax - 0x7c16a8f4], dh
test byte [rip + 0x37210007], ah
jbe 0x40160b
clc
push rdi
add eax, ebx
adc byte [rsi - 0x7f], dh
add byte [r15 + 0x12], r8b
push -0x73513b9b
mov bh, 0x25
psubusw mm2, qword [r8 + r14 + 0x142f3b76]
cmpsb byte [rsi], byte ptr [rdi]
test byte [rdi], bl
pop rdi
xchg r12d, r11d
add byte [rsi + 0x5a037c7b], al
push rdi
push 0x57786c2f
add byte [rbx + 0x13903717], dl
leave
xchg eax, ebx
sbb dword [rbp + 0x3801702], 0x10
or eax, 0xd83210dd
sub al, byte [rdi - 0x5d]
mov esi, 0x84362017
or al, 0x20
int 0xe1
mov r11b, 0x43
fcom dword [rax]
add cl, byte [rdi - 0x36131ba7]
and dword [rdi + rdx], eax
adc dword [rdi + 0x15], ebx
mov ecx, 0x22c5e40
popfq
fcom dword [r13 + 0x6b2f467f]
adc byte [rdx], dh
test byte [rdx + rcx*4], cl
movsb byte [rdi], byte ptr [rsi]
cmp byte [rax + rsi], ah
enter 0x60fd, 0xf
and al, byte [rbx]
movabs al, byte [0x760f11173e1f40bb]
cmp esp, 0x4d5fee5e
add esp, dword [rax + 0x47]
add ecx, dword [rax - 0x39]
adc byte [rdx + 0xf], bh
adc byte [rdi - 0x4c6de413], al
add ecx, dword [rdi + 0x277d180]
mov bl, 0xc3
sbb byte [rdx + 0xe0fddb8], dl
and dword [rcx], ebx
nop
shr ecx, 1
mov al, 0x83
pushfq
je 0x4016c5
mul byte [rax]
adc ecx, dword [rdi - 0x2684249b]
fnstenv [rcx + rdx]
loopne 0x401762
mov bl, 6
add al, 0xa7
pop rbp
cmpsd dword [rsi], dword ptr [rdi]
in al, dx
sbb esi, dword [rdi + 0x12]
add al, 0xef
test dword cs:[rbx + rdi], edi
test byte [rdi], dl
add dword [r15 + 8], r8d
and dword [rsi], eax
sbb esp, esp
in al, dx
add dword [rdi + rsi*2], -0x40
or byte [rdi - 0x69], al
sub dword [rcx], ebx
sbb eax, dword [rdx - 0x12]
sbb dh, byte [rax - 0xa3d8dbd]
add al, 0x37
rcl byte [rsi], 5
cmpsd dword [rsi], dword ptr [rdi]
enter 0x7125, -0x7a
add eax, 0x1f8b307
adc ch, byte [rdi + 0x47]
movsxd rsi, dword [edx + 0x74]
jae 0x401763
call rdx
mov bh, 0xac
movsxd rsp, ebx
pop rdi
push r10
pop rdi
push r11
push rsp
or edi, edi
pop rbx
sti
or eax, 0x657265d0
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
fcmovnu st(0), st(3)
mov ebx, 0x6f642173
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401824
jne 0x401840
add eax, 0x42dfb7f6
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x40183d
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x7d243538
movabs eax, dword [0x8696e69665ffdbf]
jb 0x401858
jns 0x401848
sbb eax, 0x66007972
int3
jge 0x4017ae
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x40182e
or eax, 0x9b76f5f
jmp 0x40182c
je 0x40182f
pushfq
jo 0x401879
and al, 0x5a
pop rdx
xor eax, 0xffb7fffb
jae 0x401882
insb byte [rdi], dx
jbe 0x40187b
jbe 0x40185d
xor dword [rcx], edi
xor dword [rax + 0x52], edx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
mov dl, 0xdb
test dword [rsi + 0x4c475fbf], esi
or qword [rbx - 0x7f], r14
pop rdi
pop rdx
out dx, eax
imul dh
push qword [rbx]
outsb dx, byte [rsi]
jae 0x401888
xor eax, 0x31787863
xor dword [rip + 0x384c7453], edi
adc al, 0x69
outsd dx, dword [rsi]
pop rsi
out dx, eax
std
ja 0x4018cb
push rdx
pop r15
cmp ecx, r15d
or edx, dword [rbx + 0x47f2d83d]
push rbp
and byte [rax + 0x44], cl
push rdx
pop rax
in al, dx
std
in eax, dx
push rbx
je 0x4018dc
push rsp
sub byte [r8 - 0x3d4a239c], r13b
ret 0x3910
pop cx
fstp xword [rdi + 0x4349bb1c]
jle 0x4018ca
xor byte [rax + rbp*2 + 0x72], dh
outsd dx, dword [rsi]
ja 0x4018fe
insb byte [rdi], dx
in eax, dx
pop rdx
imul ecx, dword [rcx], 0x34
sub dword [rsi], ebx
push rax
movsxd rax, dword [r8 + 0x40]
test dword [rdi - 0x73], esi
dec byte [rcx + 0x42]
pop r8
pop rax
pop rdi
xor ebp, dword [rcx]
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x443edd72
push 0x701c34c5
jb 0x4018d4
je 0x401934
ret 0x793
mov ebx, 0x2a6b6812
pop rdi
xor ch, byte [rsi]
insd dword [edi], dx
cwde
test byte [rdi - 0x4d], bh
imul edi, dword [rdx + 0x525f764a], -0x4b
insb byte [rdi], dx
jae 0x4018c7
mov dl, 0xc2
xchg byte [rbx - 0x4e], dh
jo 0x401968
fbstp tbyte [rcx + rax]
xor eax, 0x77b21086
mov ah, byte [rsp + rbp*2 + 0x50]
jbe 0x401974
pop rdx
or eax, 0x52e7bbd9
imul ebp, dword [rax + rdi + 0x5f], 0x853b6142
xchg dword [rdx + 0x4e], ebx
fidivr word [rax]
pop rdx
fcomp dword [rbx]
outsb dx, byte [rsi]
test esp, esi
cmp al, 0x34
xor dword [r13 + 0x76], eax
xlatb
and ebx, ecx
adc ch, byte [rbp + rbp*2 + 0x6d646e5d]
imul ecx, dword [rbx], -0x58
jl 0x4018f2
js 0x401976
mov al, 0xeb
mov esp, 0x1f375d6e
enter 0x3231, 0x62
imul eax, dword [rsi - 0x49], 0x8bdddad6
movsxd rbx, dword [r9d]
adc cl, byte [rdi + 0x1a745f52]
out dx, al
lodsd eax, dword [rsi]
xchg eax, ebp
jb 0x401946
adc byte [rbp + 0x53], al
add al, 0x22
sbb dl, byte [rdi]
insb byte [rdi], dx
pop r15
ret 0x6198
movsxd rsp, dword [rbp + 0x45]
push rbp
fcom dword [rsi + 0x6d6586b0]
mov ds, word [rcx + 0x31]
mov dh, 0x52
jnp 0x4019a2
push r12
or rax, 0x5b69f857
or al, 0x43
or edx, dword [rcx + 0x62]
sbb edi, dword [rax + 0x4f5d2ed1]
mov byte [rdi + rbx*2 + 0x75], ah
add byte [rbx + 0x63], dh
add bh, byte [rbx + 0x21]
jo 0x401a08
mov ebx, 0x4d903b3d
fcomp st(2)
push rsp
in al, dx
loop 0x401972
pop rbp
fstp dword [rbx - 0x55]
rcr dword [rdi + 0x65], cl
retf -0x4910
cvtps2pd xmm14, qword [r10 + rcx]
xor ch, byte [rcx + 0x4b]
movsxd rbp, dword [rsi - 0x35]
js 0x401953
mov dh, 0xe1
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
jnp 0x401a2f
lodsb al, byte [rsi]
xor byte [rax + 0xd], cl
hlt
mov al, byte [rdi]
loope 0x401a3e
imul esp, esp, 3
xor al, 0xa6
or rax, 0x61883917
mov edi, 0x32604521
and al, 0x10
test dword [rax + 8], eax
sar eax, 1
add al, byte [rax - 0x1192970e]
shl dword [rcx + 0xa], cl
rol dword [rdx - 0x10], 0x65
jae 0x401a38
imul esi, dword [rdi + r10*2 + 0x6e1175cc], -0x5c
and eax, 0x42b52ed7
lodsd eax, dword [rsi]
jbe 0x401a44
sub esp, dword [rdi]
fcomp st(2)
ficomp word [rdx]
pop rbx
xor ecx, edx
and byte [rbp + 0x6e], dl
ja 0x401a8d
mov ebx, 0x4c60ab5d
and dword [rsi + 0x42434346], edx
xor byte [rax], al
mov ebx, 0xb51e06ed
movsxd rsi, dword [rbx + 0x79]
insd dword [rdi], dx
je 0x401ab1
insd dword [rdi], dx
cmpsb byte [rsi], byte ptr [rdi]
push 0x70551e09
sal dword [rsi + 0x6e07b96e], 0x6f
sub rax, -0x3af298eb
sbb ch, byte [rdi]
cld
outsb dx, byte [esi]
jne 0x401a8b
jne 0x401aaf
sub eax, 0x360d2969
jae 0x401ad7
lodsd eax, dword [rsi]
ret 0x938
jns 0x401add
adc r10d, r14d
mov edx, 0x9a7619b3
imul ebx, dword [rbx - 0x509fa0f4], 0x481b70d1
sub byte [rcx], cl
xor edi, dword [rbp + rcx*4 - 0x3f8d8b24]
or ch, byte [rdi + rbp*2]
jne 0x401ac2
jb 0x401a9e
add eax, 0x656f2438
lar ecx, word [rdi + 0x68652eee]
pop rdi
push 0x690d7264
test eax, 0x175db86d
pop rdi
jo 0x401a42
retf
jb 0x401b14
mov ebp, 0x43c0116c
mov ah, 0x58
add ebx, 0xb
push 0x26
movabs eax, dword [0x6800872decd98e36]
jnp 0x401b2c
cmp esi, dword [rax + 0x46839ad]
add al, 0x52
std
add byte [rax], al
hlt
push rbp
or byte [rdi], bl
add dword [rdi], ebx
in al, 0xec
sysret
sbb al, 0x90
xchg byte [rcx], al
and eax, dword [rdi]
xchg eax, edx
sbb dword [rsp + rdx*2 + 0x20], edx
sbb dword [rdx + 0x31041921], edx
je 0x401a84
xchg eax, edx
je 0x401b27
xor r9b, al
and edi, ebp
jg 0x401b00
ljmp [rdi - 0x68]
cwde
leave
and byte [rbx + 0x805340c], al
add edx, edx
or al, 0x4e
or edx, eax
cmp dword ss:[rbx], edi
enter 0x40d0, 2
sti
xchg eax, esi
xor al, 0x83
sbb byte [rsi + 3], r10b
test byte [rdi], dh
or edi, edx
add al, byte [rdx + 0x5e45dd25]
mov edi, 0xece486ff
inc qword [r15]
mov edi, 0x92c10230
outsb dx, byte [rsi]
enter 0x6b07, 0x3f
dec byte [rdx + rsi*2]
mul byte [rsi + 0x27]
cmpsd dword [rsi], dword ptr [rdi]
movabs al, byte [0x537aff9b29841606]
cwde
wait
sbb al, 0xa8
jg 0x401b6f
sbb esp, ebp
enter -0x7b01, 0x3f
fcomp dword [rdx + r14*2 - 0x70]
fdiv dword [r8 - 0x7cdfe6ff]
xor byte [rax - 0x1bf9ec72], al
test byte [rdi], dh
movabs eax, dword [0xa1b219061aff0737]
mov dword [rdi], edi
mov al, 0xb0
nop
pop rbp
enter 0x3041, 1
adc byte [rdi], al
fsubr qword [rax + rcx]
fst dword [rdi + rdi - 0x6e26f811]
sub eax, 0x9d0f2f30
in al, 0x99
wait
or al, 0xf0
jg 0x401b52
or cl, cl
or edi, dword [rdi]
movabs dword [0x9ff07bfb37b3928], eax
outsd dx, dword [rsi]
push rsi
and dword [rcx - 0x57], ebp
mov edi, 0xd900757
and eax, 0xb1a5bf67
in al, 0xcc
int 0x80
xlatb
jg 0x401c23
sbb dword [rdx - 0x67c0405f], esi
and al, 0x17
leave
xor edi, dword [rdi - 0x34]
add ecx, ecx
jb 0x401bfd
and bl, bh
jg 0x401bfd
sbb ecx, dword [rdx - 0x25]
and eax, dword [rbx]
and eax, 0x4f126f67
call qword [rax]
add edx, edx
or eax, 0xf80f3fe7
in al, dx
pop rsp
and al, 7
push rbx
add dword [rsi], esi
pop rcx
mov al, 0x47
wait
int 0x96
je 0x401c12
wait
xchg ah, ah
in al, 0x99
jg 0x401c14
add dword [rsi], eax
adc al, cl
mov dh, 0x90
cwde
mov edi, 0x45c8391f
xor bl, byte [rdi]
or byte [rcx], al
add dword [rdi - 0x7d], esp
add byte [rcx], ah
and byte [rdi], bh
test al, 0xc9
nop
or al, 0x25
or ch, byte [rax - 0x47dfe88c]
jg 0x401c5b
or byte [rdx + rsi], cl
enter -0x3f80, -0x48
mov al, 0x23
adc dword [rax + 0x187f154f], -0x79
test dword [rax + rsi + 0x17], ebp
xor al, 0x3f
mov dl, 0xc3
adc dword [rbx + 0x48], edi
sahf
xor dword [rcx - 0x71], esp
jg 0x401c91
add esi, edx
sub ebx, dword [rbx - 0xfff444f]
and bh, bh
add dword [rcx + rdi + 0x1f088879], esp
xor edx, dword [rdx + 0x9b08727]
jg 0x401d04
sub dword [rbx], esi
add eax, 0x2c000000
add byte [rdx], dl
add byte [rax], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip + 0x2c080216], ecx
wait
mov ch, 0x2b
enter 0x43c6, 0x2f
sbb byte [rdi], dl
add byte [rax], al
push rsi
add byte [rax], al
sal byte [rdi], 1
add byte [rax], al
add byte [r8], al
leave
hlt
add byte [rax], al
add bh, bh
