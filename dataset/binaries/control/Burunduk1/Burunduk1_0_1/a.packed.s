call 0x400fa8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400dc0
add ebx, ebx
je 0x400d76
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400dae
cmp rbp, -4
ja 0x400dae
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400d96
add ecx, 4
mov dl, byte [rax]
je 0x400dbe
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400dae
ret
cld
pop r11
cmp r8b, 2
je 0x400dd6
jmp 0x400e53
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400de6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400dce
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400dfe
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400deb
sub eax, 3
jb 0x400e1c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400e53
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400e43
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400e41
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400e30
cmp rbp, -0xd00
adc ecx, eax
call 0x400d82
jmp 0x400dd6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400f2c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400eca
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400f16
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400ee9
push 0x3a707474
jne 0x400f42
js 0x400f02
jae 0x400f3c
outsb dx, byte cs:[rsi]
je 0x400efb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400f69
jb 0x400f5b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400f86
jb 0x400f99
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211e89
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211e89
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400e64
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400f8f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400f3d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1037
jb 0x40104f
movsxd rbp, dword [rdi]
jae 0x401049
insb byte [rdi], dx
js 0x40104f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40102f
cmp rsi, rcx
jae 0x401037
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401016
cmp al, 0x8f
ja 0x401016
cmp byte [rsi - 2], 0xf
je 0x40101c
sub al, 0xe8
jg 0x401019
push rdi
cmp al, 1
ja 0x401004
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401007
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401034
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40108b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1509
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4010cf
mov al, 0xa
jmp 0x4010cf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4010ab
inc ebx
mov al, 0
jmp 0x4010d3
mov al, 2
jmp 0x4010d3
mov al, 3
jmp 0x4010d3
mov al, 0x3c
jmp 0x4010d3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401114
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401126
jg 0x401118
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a689b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401172
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb62ef
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40117a
cmp esi, 0x21585055
jne 0x40117e
jge 0x401170
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401173
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401177
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401223
pop rcx
or al, 0x3b
jb 0x401229
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40119b
jmp 0x40119d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36610de
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53326
in eax, dx
jg 0x4011d5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40121b
mov bh, 0x2a
add edi, 0x10
jmp 0x401218
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401255
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401291
jne 0x4012a8
fstpnce st(6), st(0)
jle 0x401271
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4012a7
jrcxz 0x4012db
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b23f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40135a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40131a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582958ef
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40138d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401327
and ecx, 7
or al, 0xeb
jae 0x401392
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4013c7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401405
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4013be
push rax
call 0xffffffff868d10ab
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4013c8
std
cmp edi, esi
xchg eax, edi
jle 0x40141d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c959a9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40141b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401409
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401432
js 0x401472
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401504
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad273f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401525
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40152a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20fdc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4014b8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2b60ff04], al
add byte [rax], al
mov dh, 0xc
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4015de
je 0x4015e7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4015b0
mov dh, 0x7d
jbe 0x4015af
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4015e8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x4900006], bl
add byte [rsi], al
nop
nop
invd
add byte [rax], dh
or dword [rax], eax
mov al, 0xc8
nop
or al, byte [rax]
loopne 0x4015da
add byte [rax], bl
or ah, ch
adc ecx, eax
or al, 0
or eax, 0x8f092000
adc dword ds:[rbp + 0xf170e03], 0x13138400
pop rax
cmp eax, eax
out dx, eax
adc byte [rdi], dl
adc dword [rax + 0xe100e5], esi
insb byte [rdi], dx
adc al, 0x37
adc dl, byte [rip - 0x37f80de9]
movlps qword [rax], xmm0
movsb byte [rdi], byte ptr [rsi]
sbb edx, dword [rax + rax]
call 0x5397627
add byte [rip + 0x16f800], dl
add byte [rsi], bl
insd dword [rdi], dx
add bh, cl
add byte [rdi], dl
add byte [rax], cl
sbb byte [rdi], al
pop rbx
nop
sbb dword [rax], esp
add bh, byte [rcx + 2]
stc
sbb al, byte [rax]
sbb byte [rbx], 0
movabs al, byte [0x1701131c6ca6ef24]
add al, 0
int1
lcall [rdx]
scasb al, byte [rdi]
sub al, 0x76
or al, 0x1b
mov edi, 0x64029719
mov al, 0x21
imul esp, dword [rax + 0x1b], 0x921ba017
xchg byte [r14], bpl
loopne 0x401697
pop rdi
xor bl, al
and ch, bl
cmpsd dword [rsi], dword ptr [rdi]
test al, 1
push rbx
jb 0x40160f
sub esp, dword [rcx]
jp 0x4016ab
add byte [rdx], cl
mov ebx, 0x86172212
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
sbb eax, 0x27ab0867
cwde
xchg byte [rax + rsi*4 - 0x37], ah
ja 0x401641
cdq
fild dword [rsi]
sbb edx, dword [rdx - 0x401765bf]
test eax, 0x486c1906
test dword [rdi - 0x64], 0xc9c90d04
add dword [rax + 0x24320c30], esp
adc dword [rdi], -0x5f
movabs byte [0xa45f015590ece486], al
je 0x4016ae
sbb dword [rdx - 0x6b57e83f], edx
lodsb al, byte [rsi]
and dword [rcx], ebx
mov sil, 0xb0
xchg byte [r8 + rdx*4 - 0x29], spl
mov ah, 0xfc
nop
pushfq
sbb al, 0x92
mov eax, 0x20bc021b
xor cl, r8b
cmp eax, 0x83245ac0
or al, 0xc9
js 0x40169a
enter 0xc90, 0x32
xchg eax, edi
int3
mov edi, 0x324320c9
shl bh, 1
lsl ebx, eax
nop
and dword [rcx], ebx
fcomp qword [rdi - 0x20]
sbb dword [rdx - 0x1b7d79bf], edx
stosd dword [rdi], eax
sbb dword [rax + rcx*2 + 6], esp
call 0xffffffffc94d03d5
leave
and dword [rcx], eax
add al, 0xf0
sub cl, byte [rdx + rsi]
and al, 0x83
hlt
clc
xor cl, r8b
nop
js 0x40170e
movsb byte [rdi], byte ptr [rsi]
in al, 0x20
add byte [rsp + rcx*8], dl
sbb dword [rdx + 0x2008f204], edx
jb 0x401797
sbb dword [rip - 0x7cdbbef4], eax
or al, 0xc9
adc byte [rdi + 0x14], ah
enter 0xc90, 0x32
lea ebx, [rax]
mov bl, 0xc9
and byte [rbx + 0x32], al
sbb al, 0xdc
and byte [rax + rcx*2 + 0x4e], ah
add al, byte [rsi]
and al, 0x28
nop
and dword [rcx], ebx
sub byte [rdx + 0x2c], dl
sbb dword [rdx + 0x307d8641], edx
movabs dword [0xc97f08380641ac1c], eax
nop
sahf
mov word [rdi + rdx], cs
stc
xchg dword [rdx], edx
sbb byte [rdx + rcx*8 + 0x15], ah
push rdi
adc al, byte [rdi]
sbb esi, dword [rdx]
sub byte [rdi + 7], bl
adc bl, byte [rdi + 0x20]
add ebp, dword [rsp + rax*4]
shr dword [rdi], 0x47
scasb al, byte [rdi]
or al, 0xde
sub al, 7
add eax, 0x9473fd7
mov word [rbp + 0x19], ds
push rbp
adc al, 0x57
and al, 0x83
call 0xfffffffff7435f15
retf -0x58e0
jbe 0x4017ad
pop rdx
ja 0x40176d
xchg byte [rsi], ch
and al, byte [rdi]
adc byte [rsi + 0xe], cl
xor bl, al
xor eax, 0xeeeba17
xchg eax, r14d
xor dh, byte [rbx + 0x10]
or ecx, ebp
adc cl, ch
int 0xef
adc al, byte [rax + 0x760e0213]
jb 0x40175d
push qword [rdi + rcx + 0xc7a2f59]
in al, 0x20
xor byte [r9], r9b
sub dh, byte [rdi]
or byte [rbx + 0x18f6720c], al
or esp, dword [rax - 0x62]
xor cl, al
and byte [rax - 0x79], dl
adc edx, ecx
ror dword [rsi + 0xf], -0x11
mov ebx, 0xd8170008
and esp, ebp
retf -0x21e9
or bh, dl
or byte [rdx - 0xe], dh
in al, dx
and byte [rsi], ah
or dh, byte [rdi - 0x2c]
add edx, esi
xchg eax, ecx
ror dword [rsi + 0xe], -0x15
adc byte [rsi], ch
stc
mov al, 0x57
out 0x2c, eax
or dword [rdi + 0x51], ebx
or dword [rax - 0x69], esp
popfq
mov r14d, 0x17719b0d
or dword [rdx + rsi], 0xffffffc8
jp 0x401873
xchg eax, ecx
and dword [rax + rdx*4 - 0x4d], esp
adc bl, byte [rdi + 0x1a]
in al, dx
add eax, 0x4f09f3c2
sbb al, 0xa
xchg byte [rdx], dl
xchg eax, ebx
or dword [rdx + rsi*2], 0x14
insb byte [rdi], dx
adc byte [rcx], ah
sbb dword [rax + rdx*4 + 0x26], esp
push -0x6e
sbb al, 0xe4
in al, 0xd9
or byte [rdx], 0x8f
mov eax, 0xab23310
js 0x4017e5
int3
or al, bh
xor cl, byte [rdi]
xchg esp, esp
in al, 0x20
or edx, dword [rdx + 0x33]
or eax, dword [rbx + rax*2 - 0x5fb898ba]
jg 0x4018d3
or eax, edi
or eax, 0x740bd9c9
or ebp, edi
or al, 0x9d
loope 0x401818
xor al, 0xd0
or byte [rcx], dl
outsd dx, dword [rsi]
nop
lodsb al, byte [rsi]
or esp, dword [rdi - 0x37]
cmp esi, ebx
ret 0x20b
cmp esp, esp
in al, 0xe0
or al, 0x1b
or esi, dword [rax - 0x1813e6df]
cld
stc
sbb esp, dword [rax + rax*2 + 0x5e]
and eax, 0x8429240c
mov ebp, 0xc5a0e90
xlatb
mov edi, 0xa401b072
adc byte [rcx - 0x6cf2e7b9], al
or dword [rsi + rsi*2], 0x62
cmpsb byte [rsi], byte ptr [rdi]
adc r12b, byte [rcx]
sbb eax, 0xcc389064
emms
nop
js 0x4018d1
or al, 0x97
push 0x49
add ah, bl
add eax, 0x5a0d2d72
or eax, 0xdb243a0f
out dx, al
jo 0x401907
adc dword [rdx], eax
cmpsd dword [rsi], dword ptr [rdi]
nop
jl 0x401903
mov ebx, 0x2fa3bf40
mov byte [rbx - 0x4f898df4], al
or eax, 0xe3420cbf
xchg eax, ebx
pop rsi
enter 0xd93, 0x61
adc dword [rsi], edx
cmpsd dword [rsi], dword ptr [rdi]
cmp dword [rcx], edi
enter 0x10d9, 0x13
scasd eax, dword [rdi]
fnstenv [rbx + 0x10]
pop rsp
jbe 0x401933
sbb esp, dword [rdi + 0x4e102f19]
cmpsq qword [rsi], qword ptr [rdi]
mov bh, 0x17
sbb byte [rdi], ch
in al, 0xfb
adc dl, dl
pmaxsw mm1, qword [rsi]
xor cl, al
ja 0x4018cd
and esp, dword [rcx + 7]
add eax, 0xb04e4876
and eax, 0x1b06470f
in al, 0xe4
nop dword [r9]
jge 0x40195d
sbb esi, dword [rax + 0x82f116a]
xchg eax, ecx
jno 0x401939
leave
mov r12b, 0x12
adc byte [rbp - 0x787e84c4], al
sub al, 0x10
pop rdi
adc byte [r8], sil
pop rsi
or edi, ebp
imul edx, dword [rax], 0x32
jb 0x40198c
or al, 0xc9
stosd dword [rdi], eax
adc byte [rdi + 0x610ccce0], ah
sbb byte [r15], bpl
loope 0x4019a4
hlt
mov esp, 0xc843a40
adc edi, edx
xor eax, 0x178cf011
or byte [rdi], ah
push rbp
adc dword [rdi], ecx
cli
or ecx, dword [rax + rdi]
sbb dword [rdi + rbp*4 - 0x5b18df6e], 0x17
scasq rax, qword [rdi]
pop rdx
adc dword [rdi - 0x5c58ee94], edi
add al, 0xd6
or esp, dword [rcx - 0x2474e0ef]
push rdx
jg 0x401a23
jb 0x401a36
jae 0x401a38
jne 0x401a2c
movsxd rbx, dword cs:[rdi + 0x4a]
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
ljmp [rbp + 0x726564fd]
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401a0c
outsd dx, dword fs:[rsi]
in eax, dx
in eax, dx
outsd dx, dword [rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401a5c
jne 0x401a78
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401a03
add bh, bl
fld xword [rbp + 0x29]
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0x5add
cld
fisttp word [rax]
jb 0x401a90
jns 0x401a80
outsb dx, byte gs:[rsi]
je 0x401a97
jns 0x401a38
or ch, byte [rbp + 0x65]
jne 0x401a2f
out 0xbe, al
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401a66
or eax, 0xff74295f
mov bh, 0xdb
test byte [rdx], ch
pushfq
jo 0x401ab1
and al, 0x5a
push rbx
je 0x401a92
xor dword [rcx], edi
jo 0x401ab3
movsxd rbp, esp
fcmovnbe st(0), st(6)
fisub dword [rbp + 0x77]
cdq
sub eax, 0x729f6e77
jne 0x401abd
je 0x401a76
mov ecx, 0x70331b5b
jne 0x401ac7
jb 0x401aa4
adc al, 0x77
cmp ebx, ebx
jle 0x401aa4
imul esp, dword [rdi + 0x6e], 0x380c650f
imul ebp, dword [edi + 0x5d], 0xbb6b6dfb
cmp qword [rdx + r11], r9
jne 0x401ac8
js 0x401afe
xor r14b, byte [rcx]
mov bl, 0xfb
out dx, eax
fidiv dword [rsi + 0x6ca66665]
ja 0x401ad5
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0xcf605745
loopne 0x401aa8
xor byte [rbx], bl
sbb dword [rcx], edx
fild dword [rbx]
imul ebx, ebp, 0x31
xchg eax, ebp
pop rdi
adc dh, byte [eax]
cmc
jo 0x401a6b
loope 0x401aad
pop bp
adc dh, byte [rcx]
xor eax, 0xa5786540
fcomi st(6)
jbe 0x401b27
jae 0x401b15
xor eax, 0x45b66153
wait
ret 0x1dbe
test al, 0x73
jne 0x401b3a
jae 0x401af9
cmp byte [rdi - 0x7b], bl
jbe 0x401a64
mov ebp, 0x7a696d69
or al, byte [rcx]
fisttp dword [rdx]
imul edi, edi, 0x20
movsd dword [rdi], dword ptr [rsi]
push r11
imul esp, dword [rdi + 0x69f3b6b0], 0x4a
and al, 0x35
movsd dword [rdi], dword ptr [rsi]
test eax, 0x5856d6c2
xchg byte [rip + 0x61126e61], cl
push rdx
fsub dword [rcx - 0x79]
ja 0x401b7d
sbb al, 0xec
or bl, bl
xor al, 0x67
adc dword [rax + 0x7b], esi
adc byte [rsi + 0xb], ch
mov edx, esp
insd dword [rdi], dx
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
sub al, 0x14
push rdx
fldenv [rdi]
push rcx
xchg eax, ecx
add bl, byte [rcx + 0x27132b00]
mov al, 0x10
enter 0x4f16, 0x77
adc eax, 0x39aecdb6
or edi, dword es:[rcx + 0x4a]
mov dl, 0x76
leave
xor al, 0x6e
jmp 0x401aea
fstp dword ss:[rbx - 0x3d]
adc qword [r14], r11
sub dword [rdi + 0x75], ebp
jae 0x401b85
nop
mov ebp, 0x1870536d
jbe 0x401bdf
jbe 0x401bc6
imul edx, dword [rbp - 0x55], 0x343a5704
sub ax, 0x566a
fld dword [rsi - 0x50]
xor byte [rax], ch
fldenv [rbp + rcx*2 + 0x66]
add ebx, dword [rcx - 0x29]
int 0x15
jo 0x401b76
sub byte [rbx + rbx*2 + 0x6b], ah
mov ecx, 0x1705372e
insb byte [rdi], dx
sub ecx, edx
xor byte [rip + 0x7294330d], ch
jmp 0x401b8a
mov dl, 7
wait
xor dword [rdi], esp
je 0x401c17
jo 0x401bc5
xor dh, byte [rdx - 0x1ab295a9]
movsb byte [rdi], byte ptr [rsi]
je 0x401b83
push rsi
sub al, byte [rbp + 0x661be723]
je 0x401bee
xchg eax, ebp
mov ecx, 0x28726253
and eax, 0x34b6170
pop rcx
add ah, byte [rsi + rbp*2 - 0x67]
xor al, 0x8d
mov dl, 0xd9
and dword [rax + rbp + 0x4e], esp
and al, 0xa7
mov dl, 0xb6
and al, 0x6e
sbb byte [rbx + rsi*2 + 0x70], dh
adc eax, 0x354c929a
mov bh, 0x65
xchg bh, cl
jb 0x401b66
sub dword [rsi], esi
sub al, 0x78
imul ecx, dword [rbx - 0x48], 0x7a8c0aca
je 0x401c29
fadd dword [rcx - 0x5ec77e1d]
je 0x401ba7
add dword [rdi + 0x53], ebx
push -0x5d42ddc8
and cl, bh
rcr byte [rax], 0xad
stc
or eax, 0xfc53479
mov ecx, 0xbb5a0c6e
imul esp, dword [r8], 0x66f0d7a
scasb al, byte [rdi]
test eax, 0x3d646756
sub ecx, dword [rdi]
pop rsi
sar ch, 0xed
xor byte [rcx + 0x69], ch
xor r14b, byte [rbx + 0x5f]
pop r15
mov edi, 0x355c6d2d
jae 0x401c81
jbe 0x401c53
add byte [rdx], cl
push rdx
mov edx, esi
pop rdi
adc r9d, dword [rbx]
push rbp
fld dword [rbx + 0x4820482d]
push rdx
push rbx
ret 0xfde0
adc dh, byte [rsi]
push rsp
sub r10b, r8b
ja 0x401c3d
sub eax, 0xa310646c
jb 0x401bf5
pop rcx
movabs rax, qword [0x32044349456e107d]
pop rdi
push rsi
pushfq
movabs r12, 0x5365364835494814
out dx, al
mov dh, 0x8a
xor byte [rdi + 0x45], ch
jae 0x401cfa
movabs r15, 0x1550e863aeb3d8dd
insd dword [rdi], dx
jbe 0x401cdf
xor cl, ch
sbb al, 0xb2
xor byte [rdx], dh
xor dword [rax - 0x6928a4f5], edi
or edi, dword [rax]
xor al, 0x5f
or byte [rdx + 0x1f], ah
movsxd rax, dword [rdi]
xchg eax, ecx
push 0x377c90f4
mov bh, 0x7b
sub byte [rbx], dh
movabs byte [0x68b7476761237367], al
or dword [rcx + 0x771b9f3f], ecx
pop rdi
sub bh, bl
retf
sahf
mov word [rbp + 0x44], es
xor dword [rbp + 0x76], eax
pop rsp
fsub dword [rsi]
movsd dword [rdi], dword ptr [rsi]
outsd dx, dword [rsi]
jns 0x401d22
iretd
mov edx, 0x624c49ed
sbb dword [rbp + 0x65], eax
adc ecx, dword fs:[rcx + 0x50]
push rdi
or al, 0x1f
mov ah, 0x2e
push 0x67653453
insd dword [rdi], dx
int3
pop rbx
movups xmmword [rsi - 0x63], xmm1
rcl qword [rdx - 0x4e], cl
clc
fst st(6)
insb byte [rdi], dx
sub dword [ebx + 0x56], esi
insb byte [rdi], dx
push rax
jbe 0x401d65
sub al, 6
sti
pop rdi
movsd dword [rdi], dword ptr [rsi]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x6a
sub esi, dword ss:[rbx + 0x1b]
lea esi, [rsi + 0x4975565c]
jo 0x401d55
or al, 0xf1
insd dword [rdi], dx
push rdx
push rbx
mov cl, 0x8d
add dword [rcx + 0x4038714d], esp
jae 0x401d19
ret 0x5cca
ret
xor al, 0x49
pop rax
mov r12d, 0x9121965e
lock adc byte [rcx + 0x78], ch
mov r14b, 9
je 0x401d8d
add al, 8
pop rdi
pop rsp
mov al, 0x6c
jnp 0x401d3d
clc
mov bh, 0x8b
sbb byte [rbp + r9*8 - 0x62], r15b
movabs dword [0x9db53dec70e1b07], eax
push 0x6d18e42b
fsubr qword [rsi + 1]
ret 0x60f6
movabs eax, dword [0x54dbbb35012e325f]
jbe 0x401e0e
xor cl, byte [rbx + 0x29]
cmp byte [rax + 0x78], ah
test byte [rdi + 0x5d6a68f7], ah
xor byte [rax + 0x5e12af44], ch
cmp eax, dword [rsi + rbp*4 + 0x1624dd0]
sbb byte [rsi - 0x3d], ch
push rdx
hlt
xor byte [rsi + 0x31cc1247], 0x8d
ret 0x618c
retf -0x9ae
ficom dword [rax]
je 0x401e10
fmul dword [rbx - 0x27]
test dword [rsi + 0x15c03939], eax
push rsp
jo 0x401da2
int 0x52
fldcw word [rcx + rbp*8 - 0x18]
mov dl, 0xb0
xchg eax, edx
sub esp, ebx
enter 0x4406, 0x6a
pop rbx
push rdx
lodsd eax, dword [rsi]
pushfq
imul eax, dword [rbx + 0xc], 0xb5811b43
jle 0x401e36
push rsp
sti
insd dword [rdi], dx
xchg eax, esi
cwde
mov eax, 0x4f49b0d0
rcr byte fs:[rdi + 0x75], 0x5d
jo 0x401e54
and bl, byte cs:[rsi + 0x60]
sbb dword [rcx + rcx*4 - 0x3f], esp
and eax, 0xb7575444
or ch, cl
fadd st(1)
outsb dx, byte [rsi]
sbb ah, byte [rcx - 0x68]
add al, 0x48
insd dword [rdi], dx
movsb byte [rdi], byte ptr [rsi]
xor dword [rcx + 0x66], esp
mov dl, 0x1c
imul ebx, esi, 0x15b10160
fdivr st(7)
sbb dl, ch
lahf
jo 0xffffffffe5e170d1
and esi, dword [rax - 0x49a9e9dc]
ret 0x6d3b
and al, byte [rsp + rdx*2]
or byte [rip + 0x656f1954], ah
jle 0x401e81
adc dword [rax + 0x52dd330a], 0xdece5457
add eax, 0x86f9ef08
mov eax, 0xe182c32
cdq
xor ch, bh
xor bl, byte [rdi + 0xa]
test rax, -0x78b0e794
xchg byte [rsi + 0x2e1c1b83], al
pop rdi
push -0x6829c43c
xor al, 4
cmp byte [rip - 0xf89b4b0], ch
add dword [rbp + rsi*2 + 0x26ed3800], -0x25
mov bl, 7
or dword [rsi], edi
xor sil, byte [rdi]
jne 0x401e33
or al, 0x2e
sub dword [rsi + 0x4e], 0x64
fnstenv [rax + 0x319fb027]
lodsd eax, dword [rsi]
xor dword [rax], edi
and bl, byte [rbx]
ja 0x401ed4
mov al, 0x45
scasb al, byte [rdi]
xor al, 0x5f
sbb byte [rax], al
movsxd rbp, dword [rbx]
out 0x73, eax
add byte [rcx], dh
add r11b, bl
ret 0x1381
adc al, 0x62
movsxd rsp, dword [rbp - 0x25]
jbe 0x401f03
push rdi
adc al, 0x45
sub al, byte [rbp - 0x47]
shr dword [rdi + rsi], -0x1d
push 0x2e10096b
leave
xor byte [rax], cl
xor al, 0x3d
or dword [rcx], 0x50fc0213
xchg eax, ebx
mov bx, bp
std
je 0x401f5f
jmp 0x401f70
xor eax, 0x4a43485
stc
and esi, dword [rip + 0x212c61d3]
mov ch, 0
fcmovnb st(0), st(6)
xchg eax, edx
or ebp, ecx
test eax, 0xc2585fe8
push -0x109712cd
mov ebp, 0x1b45c9c2
cwde
pop rdx
movabs byte [0x37584966f43418b4], al
jb 0x401f49
or eax, 0x3372a6b9
pop rax
shr byte [rcx + 0x13], 1
mov r13b, 6
cmp ebp, dword [rax + 0xd]
sub dword [rbp - 0x37], esi
sub esi, dword [rsi]
pop rdi
and ebp, dword [rbx + 0x370d278c]
xor edx, dword [rbx + 0x35]
cmp dword [rdx - 0x7bf7a738], 4
sal ebx, cl
mov ah, 0x40
wait
jbe 0x401f8a
div byte gs:[rsi]
in al, 0x2a
movsb byte [rdi], byte ptr [rsi]
jge 0x401f93
cli
jae 0x401f11
mov dh, 0xf6
pop rdi
mov edi, 0xca7b4929
or ebx, dword [rcx]
or bl, byte [rbx - 0x27]
xor byte [rbx], bh
jge 0x401fea
sbb eax, dword [rax + 0x6600332e]
xlatb
cwde
je 0x401f7d
insd dword [rdi], dx
ret 0x6e53
ja 0x401ff8
test al, 0x55
adc ch, byte [rcx - 0x16]
jbe 0x401fc1
sbb eax, 0x6d755212
sbb eax, dword gs:[rbx + 0x43]
xor byte [rcx - 0x21bf71dc], cl
jbe 0x401f67
outsd dx, dword [rsi]
and dword [rbp - 0x8ce088], ebx
and eax, 0xf96152f1
xor al, 0x36
ffree st(2)
or esi, dword [rsi + rsi*2]
jae 0x402034
insd dword [rdi], dx
je 0x401fd7
fdiv qword [rax + 0x9687293]
lcall [rdi]
jo 0x401fa3
mov al, 0xdc
outsb dx, byte [rsi]
outsd dx, dword [rsi]
sub eax, 0x2d0d6715
jne 0x401fbd
xlatb
jne 0x402035
sub eax, 0xb7b9002e
mov cl, byte [rip + 0x64093852]
jns 0x40205d
sub r11, r8
pop rcx
wait
sbb dword [r14 + 0x64], r14d
sub byte [rcx - 0x40], dl
cdqe
or al, 0x5f
sbb ecx, esi
cmc
mov dh, 0x60
scasd eax, dword [rdi]
push rdi
sub byte [rcx], cl
movabs byte [0xa20cf6dc2677274], al
sub al, 0x6f
or byte [rdi - 0x22f70efb], dl
and ebx, dword [rsp + 0x6f]
int1
push 0x9d5acb7
fild qword [rax + 0x25]
or eax, 0xb55a215d
push rsi
movsxd rsp, dword [rbx + 0x2e]
pop rsi
fst dword [rdx + 0x6cbd5d72]
adc dword [rsi], esp
sub eax, 0xbb0e8d6
push -0x7f
movabs eax, dword [0x6800dd52decd9a36]
jnp 0x4020ad
fistp dword [rdx + 0x44be6ab]
push rdi
push rdx
std
add byte [rax], al
push rsp
push rbx
test byte [rax], al
add dword [rbx - 0x6d], esi
push rdi
sbb dword [rdx + 0x11c3921], edx
and edx, dword [rax + 0x7a40641]
push rsp
push rsp
xchg byte fs:[rax + 4], spl
xor dword [rax + rdx*4 + 0x41], esp
xchg byte [rsp + rsi*2 + 0x24], dh
jb 0x40204e
wait
movabs eax, dword [0x20c8986ffffff644]
or dword [rax + rbx*4], 0x30
add eax, 0x3243159b
or byte [rsi - 0x4d], cl
jbe 0x40202f
enter -0x3738, 1
sti
cdq
insb byte [rdi], dx
jb 0x4020b1
sbb byte [rsi - 0x65], dl
adc eax, 0x1f03692c
out dx, al
and bh, byte [rcx - 0x3e]
jne 0x4020bd
pop rsi
mov edi, 0x92c159bd
inc dword [rdi + 7]
or eax, 0xbf9c90d9
add al, byte es:[rdi]
imul ecx, eax, 0x20
add edx, edx
xor byte [rax], dh
push rbx
sbb esi, dword ss:[rsi]
adc byte [rdi - 0x59], 0xff
jp 0x402117
cmp dword [rax + rcx], ebp
push rbx
mov al, 7
fsub dword [rcx - 0x75]
add al, 0x3f
inc dword [rdi + rdi + 0x320c8320]
loopne 0x4020d6
add byte [rcx + 0x190138e4], bh
mov ss, word [rbx]
add dword [rdx + 0x7ff2e05], 0x84e4a1b2
lcall [rdx]
mov dword [rdi], edi
xchg eax, edx
sbb dword [rax + 0x40], eax
loopne 0x402127
mov dl, 0x21
sbb edx, dword [rax]
xchg eax, esp
sbb byte [rsi + 2], ch
xchg r12b, bpl
enter -0x62f1, 0x3f
xor byte [rdi + rdx], ah
jb 0x4020c0
xor byte [rdx + 0xa], dl
adc byte [rdi], dh
stosd dword [rdi], eax
xor spl, byte [rbx - 0x796df861]
xchg eax, edx
xor edi, edi
or dword [rcx + 0x49b99cbf], ebp
adc eax, 0xd9bf0747
add byte [rdx + 0x36], al
xchg eax, esp
mov cl, 0x3f
int3
int 0xff
jg 0x4021b5
add dword [rdi], esi
or dword [rax], 0x7ffbfc9
pop rcx
mov dl, 0
ja 0x4021e6
leave
fmul qword [rdx]
and al, 0x27
jmp 0x7ff3b3f9
cmp eax, 0xbd0e0edb
shl byte [r11 + rax + 0x37480777], 0x94
pushfq
call qword [rax]
out 0x3f, eax
sgdt [rdx + 0x7f80c9b]
lcall [rcx - 0x40]
mov dl, 0x73
outsd dx, dword [rsi]
xchg eax, esi
je 0x402199
clc
wait
jb 0x402135
wait
int 0x1f
jg 0x402196
nop
or dword [rbx + 0x7f], ebx
adc byte [rax + 0x2db20c91], bl
mov edi, 0x48541f1f
jb 0x4021c1
add dword [rcx], eax
leave
fldenv [rax + 0x57]
and byte [rdi], bh
or byte [rdx], 8
outsb dx, byte [rsi]
xor ah, byte [rax + rax*4]
jg 0x4021fe
and ch, bl
add eax, 0xa0083f10
xor al, byte [r12 + r9 + 0xe152090]
or ebx, ecx
jg 0x402210
xor al, 0x66
xchg dword [rbp + 0x11073f30], eax
jnp 0x402211
jo 0x4021b9
add bl, cl
mov edi, 0xcd95eb1e
or byte [rbx - 0xdf3800], bh
add dl, dl
pushfq
cmp al, 0x50
adc byte [rdi], bl
pop rdi
leave
xchg eax, ebx
fmul dword [r9]
jg 0x402224
xor dword [rbx + 0x11], esi
add byte [rcx], cl
add byte [rax], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip + 0x5d080216], ecx
sbb dl, byte [rdi + rsi*8 + 0x62]
jmp 0x6b8280
add byte [rsi - 0xffffff4], dh
add byte [r8], al
add byte [r8], al
hlt
add byte [rax], al
add bh, bh
