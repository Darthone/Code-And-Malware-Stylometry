call 0x400ca8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400ac0
add ebx, ebx
je 0x400a76
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400aae
cmp rbp, -4
ja 0x400aae
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400a96
add ecx, 4
mov dl, byte [rax]
je 0x400abe
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400aae
ret
cld
pop r11
cmp r8b, 2
je 0x400ad6
jmp 0x400b53
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400ae6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400ace
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400afe
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400aeb
sub eax, 3
jb 0x400b1c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400b53
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400b43
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400b41
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400b30
cmp rbp, -0xd00
adc ecx, eax
call 0x400a82
jmp 0x400ad6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400c2c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400bca
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400c16
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400be9
push 0x3a707474
jne 0x400c42
js 0x400c02
jae 0x400c3c
outsb dx, byte cs:[rsi]
je 0x400bfb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400c69
jb 0x400c5b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400c86
jb 0x400c99
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21156c
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21156c
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400b64
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400c8f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400c3d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f0d37
jb 0x400d4f
movsxd rbp, dword [rdi]
jae 0x400d49
insb byte [rdi], dx
js 0x400d4f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400d2f
cmp rsi, rcx
jae 0x400d37
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400d16
cmp al, 0x8f
ja 0x400d16
cmp byte [rsi - 2], 0xf
je 0x400d1c
sub al, 0xe8
jg 0x400d19
push rdi
cmp al, 1
ja 0x400d04
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400d07
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400d34
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400d8b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1209
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400dcf
mov al, 0xa
jmp 0x400dcf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400dab
inc ebx
mov al, 0
jmp 0x400dd3
mov al, 2
jmp 0x400dd3
mov al, 3
jmp 0x400dd3
mov al, 0x3c
jmp 0x400dd3
push rcx
rcr ah, 1
fstp st(7)
jle 0x400e14
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400e26
jg 0x400e18
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a659b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400e72
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb5fef
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400e7a
cmp esi, 0x21585055
jne 0x400e7e
jge 0x400e70
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400e73
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400e77
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x400f23
pop rcx
or al, 0x3b
jb 0x400f29
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400e9b
jmp 0x400e9d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660dde
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53026
in eax, dx
jg 0x400ed5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x400f1b
mov bh, 0x2a
add edi, 0x10
jmp 0x400f18
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x400f55
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x400f91
jne 0x400fa8
fstpnce st(6), st(0)
jle 0x400f71
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x400fa7
jrcxz 0x400fdb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1af3f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40105a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40101a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582955ef
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40108d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401027
and ecx, 7
or al, 0xeb
jae 0x401092
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4010c7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401105
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4010be
push rax
call 0xffffffff868d0dab
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4010c8
std
cmp edi, esi
xchg eax, edi
jle 0x40111d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c956a9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40111b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401109
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401132
js 0x401172
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401204
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad243f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401225
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40122a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20cdc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4011b8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add al, 0xb
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
add byte [rax + 0x90], ah
add byte [rax], al
add byte [rax], al
add dil, dil
rcr byte [rsi], 1
add byte [rax], al
or dword [r8], eax
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4012de
je 0x4012e7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4012b0
mov dh, 0x7d
jbe 0x4012af
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4012e8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x4280006], bl
add byte [rax], bh
add eax, 0xf902790
or byte [rax], al
pop rax
or dword [rax], eax
test al, 0xc8
nop
or al, byte [rax]
fmul dword [rbx]
add byte [rax - 0x37ec1bfa], dh
or al, 0
ror byte [rip - 0xdf89000], 1
or esp, esp
add ecx, dword [rsi]
add byte [rax + 0x1004000f], al
fild dword [rdx + rsi*8]
add dword [rax], edx
add byte [rax], dl
adc dword [rcx + rdx], eax
and byte [r15], r11b
adc al, byte [rax]
adc eax, dword [rax]
clc
add esp, esp
add ecx, eax
sbb eax, 0x8001460
or esp, esp
or esp, esp
adc eax, 0x161000
sbb byte [rdx + 0x3b], dh
mov sil, 0x17
pop rdi
sbb byte [rdi - 0x3f619fe0], ah
retf 0x1900
sbb al, byte [rax]
cmp byte [rbx + 0x1b409b29], 0x13
add dword [rdi], edx
add al, 0
sub ecx, dword [rbx - 0xe36e3]
or al, 0x1b
mov edi, 0x869a485e
sbb dword [rdi + 2], edi
mov al, 0x59
jb 0x4012d3
and ecx, edi
lock xor byte cs:[rax], cl
sbb esp, dword [rbx + rdi*2 - 0x58a0bbe9]
mov byte [rcx], al
jbe 0x40137b
push rbx
jp 0x4013a3
test al, cl
nop
or al, 0x50
xchg byte [rdi - 0x513de639], dl
movsd dword [rdi], dword ptr [rsi]
xlatb
stosd dword [rdi], eax
nop dword [rdx + rsi*4 + 0x49]
sbb byte [rdi - 0x3a], dh
sbb dword [rsi - 0x24de6f9c], eax
sbb ch, al
in al, dx
sar dword [rdi + 0x476294e0], -9
pushfq
sbb al, 0x64
nop
sbb al, 4
add dword [rax], esp
xor bl, r8b
nop
xor byte [rdi], dl
and dword [rbx - 0x32], eax
leave
and byte [rdx], ah
push rbp
add dword [rdi + 0x24], ebx
and dword [rcx], ebx
insb byte [rdi], dx
je 0x4013bc
sub byte [rcx - 0x7a], al
nop
xchg eax, esp
sub al, 0xb6
sbb dword [rdx - 0x36cb28d0], edx
and dword [rcx], ebx
cld
cmp byte [rbx], bl
add ah, byte [rbx + rax*4]
or al, 0xc9
cmp al, 0x3d
enter 0xc90, 0x32
pop rdx
js 0x401394
and byte [rbx + 0x32], al
xchg rax, rdi
xor r12b, byte [rbx + rax*4]
or al, 0xbf
push rax
out 0xe4, eax
in al, 0x90
or al, 0x54
lsl ebx, dword [rax + 0x19]
xchg eax, edx
xchg byte [r15], sil
pop rsp
pop rdi
sbb dword [rax + rcx*2 + 6], esp
xchg byte fs:[rax + rdx*4 + 0x21], ah
stosd dword [rdi], eax
push -0x6de3632a
insb byte [rdi], dx
add dword [rax + rsi*2], eax
xor cl, r8b
nop
sub dh, byte [rdi + rcx*2 - 0x7d]
or al, 0xc9
and byte [rax + 0x78], bh
jl 0x40139c
or al, 0x32
and al, 0xa4
and byte [rax], 0x43
xor cl, al
int3
test dl, dh
leave
mov byte [rcx], bl
add eax, 0x1921908c
xchg eax, r8d
xchg eax, edx
xchg byte [r12 + rdx*4 - 0x73], spl
cwde
sbb dword [rbx - 0x36362364], esi
and dword [rcx], ebx
movabs al, byte [0x280c832432a40602]
test al, 0x52
xor cl, al
nop
or al, 0xac
jge 0x4013fb
xor cl, al
and byte [rbx - 0x5d], al
mov eax, 0x83243a08
or al, 0xc9
rcl cl, 6
cmp eax, 0x474e48eb
enter -0x50fa, -0x2a
leave
xchg eax, ebx
sbb dword [rdi + rdx + 0x1407073e], 0xf
sar dword [rcx], -0x6c
rcl byte [rip + 0xc071b87], 0xce
test byte [rbp + 0x4012f08f], bh
sub dword [rdi - 0x10], ebx
and dword [rdi + 0x35], eax
add eax, 0x657620ca
out dx, eax
pop r15
insb byte [rdi], dx
in al, dx
pop rsi
adc eax, dword [rdi - 0x277ce891]
xchg eax, esp
shr byte [rdi - 0x7e], 0x47
xlatb
add dword [rsp + rbx*8], ecx
sub edi, dword [rdx - 0x1e58a5f8]
retf -0x74a4
pop rsi
cmp dl, ch
add byte [rbx + 0x6b3b071f], cl
cmpsb byte [rsi], byte ptr [rdi]
adc bl, al
cmpsd dword [rsi], dword ptr [rdi]
add dl, byte [rdi]
mov esi, 0x92ec1c08
cmp bh, dh
sub bl, byte [rdi - 0x65]
sbb eax, 0xecaec2
stosb byte [rdi], al
mov esi, 0x787b7607
xor dword [rdi - 0x30], 0xa71a1d07
pop rsp
pop qword [rsi]
or dword [rsp + rdi - 0x2cfec780], 0x76
ja 0x401543
add eax, 0x26f1795
cmp eax, dword [rbp + rbx*2 + 0x8025fdd]
ja 0x4014d4
test byte [rdx + rsi*8 + 0x76], bh
or eax, esp
and esp, dword [rax + 0x21]
nop
cmp edx, dword [r15]
xor byte [rdi - 0x2f], ah
or al, 0x20
frstor dword [rax + 0x2f]
and byte [rcx + rdx + 0xd], bh
rcr byte [r15 - 0x61a074f0], cl
add dl, dl
xor byte [rdi + rax*2 - 0x27ef3848], al
and byte [rip + 0x2217c5dd], bl
iretd
sub dword [rbx], ebp
ja 0x40156a
and al, 0xdb
xor ebx, ebx
add ch, byte [rdi]
jo 0x401523
ret 0xc90
push 0xf90dff4
cdq
adc byte [rsi + 0x65], cl
add al, 0x10
in al, dx
adc dh, al
xchg eax, ecx
adc byte [r15], r15b
sub al, 9
nop
sbb r12b, spl
push rsp
fist word cs:[rsi]
sahf
sbb eax, 0x9047a06c
add dword [rdi + 0x6a], ebx
call 0x2502620a
xchg eax, edi
xor sil, byte [rsi]
and dword [rip - 0x70a910b9], ebx
sbb edi, ecx
and dword [rbx + 0x5d], edx
jb 0x40158c
ja 0x4015c5
and dl, byte [rax + 0x782177ae]
and byte [rbp + 6], r14b
xchg eax, edx
sbb edi, dword [rbx + rbp*4 + 0x1f]
movsxd rsi, dword [rdx + 0x74]
jae 0x40160b
movsxd rbx, dword cs:[rbx + 0x6837ed5f]
dec dword [rdx + 0x43]
push rdx
pop rdi
push r11
push rsp
or dword [rax + 0x67657265], ecx
imul ebx, dword [rdx], 0x6ffeef6f
pop rdi
je 0x40162e
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4015ea
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
fistp qword [rsi - 5]
outsd dx, dword [rsi]
or dword [rdi + rbp*2 + 0x72], esi
jae 0x40163a
jne 0x401656
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x40164f
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xd817f6fe
cmp byte [rip + 0x69665f24], dh
outsb dx, byte [rsi]
imul ecx, dword [rax], 0x79617272
pop rdi
imul ebp
imul byte [rbp + 0x7972dd]
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401640
lodsb al, byte es:[rsi]
sbb esi, dword [rax]
or eax, 0x2a74295f
movsxd rdx, esi
mov edi, 0x70709cdd
and al, 0x5a
push rbx
je 0x401670
xor dword [rcx], edi
jo 0x401691
movsxd rsp, dword gs:[rbp + 0x77]
cdq
sub eax, 0xb6df60da
ja 0x4016a2
lahf
jb 0x4016ac
movsxd rsi, dword [rdx + rbx + 0x33]
jo 0x401633
mov bl, 0xce
fnsave dword [rbp + 0x63]
jb 0x401682
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0xdbbddb0f
fldenv [rbp + 0xc]
cmp byte [rdi + 0x69], ah
outsd dx, dword [rsi]
pop rbp
cmp qword [rsi + r14*4], r9
outsd dx, dword [rsi]
pop rbx
sbb dh, byte [rbp + 0x44]
js 0x4016dc
xor r14b, byte [rcx]
mov bl, 0x65
cmpsb byte [rsi], byte ptr [rdi]
insb byte [rdi], dx
fdivr dword [rdi - 0x29]
ja 0x4016b3
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
jmp 0x401686
jnp 0x401688
sbb dword [rcx], edx
xor dword [rbp - 0x24c898a1], edx
pop rax
adc dh, byte [rax]
cmc
jo 0x4016d1
pop rbp
mov bh, 0xb3
or eax, 0x353112b7
js 0x401644
jae 0x4016ef
in eax, dx
or bl, bl
mov dh, 0x35
push rbx
mov dh, 0x45
test al, 0xec
fst qword [rsi + rsi*8]
jae 0x40172a
jae 0x4016d7
cmp byte [rdi + 0x69], bl
insd dword [rdi], dx
imul edi, dword [rdx + 0x41], 0x2bb42b58
or al, byte [rcx]
jmp qword [rax]
mov ch, 0x85
fist word [rsi - 0x5b]
push r11
imul ecx, dword [rdx - 0x3e], 0x24853b5a
xor eax, 0x86a9a562
ret 0xb616
mov dh, 0xd
outsb dx, byte [rsi]
adc ah, byte [rcx + 0x76]
or bh, byte [rbx + 0x6b778790]
sbb al, 0x34
adc dword [eax + 0x64], ecx
push rdi
fdiv dword [rax + 0x7b]
retf 0x7086
pop rbx
loop 0x40176f
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
pop rax
movabs eax, dword [0x10b6271362915190]
enter 0x6504, 0x4f
ja 0x40178e
test dword [rbp + 0x26392740], eax
scasb al, byte [rdi]
mov al, 0x6d
or edi, dword [rcx + 0x4a]
xor al, 0x6e
xor dl, byte [rax - 0x6414914b]
adc dword ss:[rbx + 0x1e1adeca], ebx
sub dword [rdi + 0x75], ebp
jae 0x401763
jo 0x401753
rol byte [rcx + 0x7c766dec], cl
jbe 0x4017a4
imul edx, dword [rbp + 0x34], 0x5d823666
and eax, 0x306a2db8
sub byte [rdx - 0x26c9354a], bh
int 0x15
jo 0x401726
xor eax, 0x37f5c81b
sub byte [rsi], ch
imul esp, dword [rax], 0x17055adb
insb byte [rdi], dx
sub esi, dword [rbx]
xchg eax, esp
fcom dword [rsi + rax*4 + 0x69]
jb 0x40175e
hlt
xor dword [rdi], esp
imul esi, dword [rdx], -0x70
cmp eax, 0x25707974
xor ah, ch
sub dword [rbp + rdi*4 + 0x7426a452], edx
and ebx, dword [rbp - 0x18ad4936]
sbb esp, dword [rsi + 0x74]
jb 0x4017b3
fld xword [rcx + 0x702528cc]
outsb dx, byte [rsi]
sbb eax, ecx
adc bl, byte [rcx + 0x6db56434]
xchg eax, esp
int 0x28
and al, 0x6e
sbb byte [rdx + 0x39], ah
xchg eax, ebp
je 0x401825
jo 0x4017e9
sub ebp, dword [rax + rdx*8 - 0x799a486c]
sub dword [rsi + 0x78], edx
xchg eax, ebx
sub al, 0x78
imul ecx, dword [rdx + rdi*2 + 0x55c25c0f], 0xa1383b74
je 0x401793
ror dword [rsi], 0x1c
mov cl, 1
pop rdi
push rbx
and bh, byte [rbp + 0x40b78568]
movabs byte [0xc56f7ee80df92264], al
jns 0x40185f
xor dword [rsi + 5], ecx
xor al, 0x8d
jmp 0x40180d
rcr dword [rip - 0x3f96b037], cl
xor eax, 0x7a2ed735
or eax, 0x4b647564
mov eax, 0x39cdfdbf
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r13b, dil
loopne 0x4017de
or eax, dword [rcx - 0x7ea0b6a1]
js 0x401884
xchg eax, esp
push rdx
wait
sti
pop r15
or r11b, byte [rbx + rcx]
lahf
in al, dx
rcl dword [rsi + 0x48204855], 0x44
push rdx
push rbx
jle 0x4017cf
push rsp
sub r11b, r9b
cmp ebp, eax
adc byte fs:[rsi + 0x59448a72], bl
mov ah, 0x6d
jae 0x401815
sbb esp, dword [r10 - 0x7d9c529e]
jae 0x401826
sub al, 0xf
insd dword [edi], dx
sahf
and eax, 0xc4831b74
ror byte [rdx - 0x4d], cl
push rdx
xchg eax, edx
jae 0x4018fe
mov ebx, 0x8f7389b0
jo 0x4018fb
jp 0x4018d4
pop r15
xor ch, byte [rsi]
xchg eax, esi
jbe 0x40182a
push 0x32647c01
sti
xor eax, 0x19761273
mov dh, 0x20
xchg eax, esp
loop 0x4018dc
jrcxz 0x401918
lahf
sti
cmp dword [rbp + 0x49342ebb], 0x7a
xor dword [r13 + 0x76], eax
xor dword [rax + 0x58], ebx
pop rdi
xor ebp, dword [rsi]
xor al, 0x76
ret 0x9b5a
or eax, 0x5079f866
fldenv [rcx + 0x6b]
loop 0x401926
and dword [rcx - 0x50], esp
je 0x40187e
sbb dword [rdi + 0x5d0b2b92], edi
push r12
pop r15
pop rbx
or al, 0x43
push r12
scasb al, byte [rdi]
pop rbx
xlatb
xor eax, 0x764f1b03
jno 0x40194c
jne 0x40192b
fmul dword [rbx]
fldenv [rsi + 0x666e7800]
cmp eax, 0x3a56623b
adc cl, byte [rsi]
mov ch, 0x85
fisttp word [rdx]
cmp dword [rcx + 0x47], 0x52457849
jl 0x4018a7
add al, 0xe7
ficom word [rbx + 0x32]
add ah, byte [rdx]
xor dword [rcx + 0x33c25864], esi
pop rsp
adc ebx, dword [rdi + 0x68]
cli
cmp ebp, dword [rax + 0x18]
push rsi
push 0x4dc00cb3
int3
push rcx
int3
jne 0x4018b6
push -0x23709195
mov ebx, 0xc1646634
sub eax, 0xae3990de
mov bh, 0x65
popfq
loop 0x401999
enter 0x2b6, 0x68
sub eax, 0xdb50d374
sbb eax, 0xec65dc1d
push 0x6d797345
jae 0x401921
jbe 0x401968
je 0x4019d5
push -0x49a9c7f7
sbb ecx, ebx
insd dword [rdi], dx
jo 0x401974
outsb dx, byte [rsi]
outsd dx, dword [rsi]
sub rax, 0x76f66715
ror dword [rip + 0x75622eb6], -0x65
sub eax, 0x5bdc4869
imul esi, dword [rcx + 0x938d80d], 0x64
jns 0x4019fc
mov gs, ebp
lodsb al, byte [rsi]
int 7
sbb dword [r14 + 0x44], r14d
jae 0x40197e
sbb al, byte [rip + 0x5f0c6137]
sbb edx, dword [rdx + rax*2 - 0x3d]
pop rbx
or dh, dh
sub byte [rcx], cl
xchg eax, edx
je 0x401a1e
or al, 0x70
mov bh, 0x3d
or ch, byte [rdi + rbp*2]
or dl, dh
add eax, 0xf758f420
mov ah, byte [rdi + rbp*2]
shr byte [rsi], 1
push -0x4d267357
shr byte [rax - 0x11], cl
or eax, 0xe2d6d53a
mov al, 0xd9
xor dword [rbx], ecx
push 0x6a
jnp 0x401a23
sub eax, 0x56008724
imul ecx, dword [rbp + rbp*4 - 0x47], 0x475619a
cmovo ebp, ebx
je 0x401a2f
or byte [rax + 0x12f0000], dh
fsub qword [rdx + rbx*2]
add bl, bh
xchg byte [rax + rcx*2 - 0x32], ah
sbb al, 1
and esp, dword [rax + rdx*4 + 1]
imul eax, dword [rdi], 0x92195454
and dword [rcx], ebx
and byte [rcx + rsi], al
sbb dword [rax + rdx*4 + 0x21], esp
je 0x401a87
and al, 0x1c
repne outsb dx, byte [rsi]
sub byte [rdi + rdi*2 - 0xa], al
ljmp [rdi - 0x68]
xor cl, al
and byte [rbx + 0x20052898], al
int 0x90
or al, 8
or r14, qword [rbx - 0x3fc9f37d]
shr byte [rax + 1], 0xfb
xor ecx, eax
xchg eax, ebx
sbb byte [rsi + 0x78], dl
xchg eax, ebx
push 0x7cf0349
rcr byte [rbp + 0x24], cl
lidt [rsi - 0x41]
dec esi
fisub word [rdx + rbx*2]
test dword [rdi], 0x86e91ebf
insb byte [rdi], dx
add al, byte [rdi]
imul edi, dword [rdi], -2
cmp al, 0x73
xchg eax, ebx
add dword [rax + 7], ebx
mov edi, 0xc200050
xchg eax, edi
add bh, bh
jp 0x401ac5
adc ebx, esp
in al, 0xb0
test al, 7
xchg dword [rbp - 0x7b00cf70], eax
or dword [rdx + rsi], 0xffffffc8
fcomp st(0)
fadd st(2)
add byte [rdx], dh
and byte [rax], bl
mov ss, word [rbx]
fiadd word [rax + rbx*4]
or al, 6
outsd dx, dword [rsi]
enter -0x6d7a, 0x13
lcall [rdx]
mov dword [rdi], edi
fsub qword [rax + rdx*8 + 7]
movabs al, byte [0x3f9407106c86c851]
insb byte [rdi], dx
and ecx, 0x2f07e766
paddusb mm4, qword [rax + rcx*8 - 0x72]
popfq
add byte [rdi], 0x86
insb byte [rdi], dx
xor byte [rdx - 0x195cc0f0], al
mov qword [rdi], 0x50d242ff
jb 0x401ade
test eax, 0x373392bf
or ebx, dword [rdi + 7]
mov edi, 0xc84461f0
xchg byte [rcx + 0x4364973f], dh
leave
fst dword [rcx]
jg 0x401b49
mov edi, 0xce83d3f
xor ah, byte [rax + 0x60]
mul dword [rsi]
ja 0x401a8b
jg 0x401ac5
add edi, dword [rbx]
xchg dword [rdi], esi
and ecx, edi
xchg eax, edx
out 0x22, al
subps xmm0, xmmword [rax + 0x72726f0]
mov edi, 0x264190e1
wait
adc byte [rax], dl
mov edx, 0x67fe621
sbb byte [rdi], ah
sbb dword [rax], ebx
loopne 0x401b2c
test al, 0x90
or al, 0x32
adc byte [rax - 0x3233749f], bl
ja 0x401b3f
jg 0x401b41
cmp ebp, dword [rax + rcx + 0x3f3fefd9]
and byte [rdi], bh
xchg byte [rax + rbp + 0x39], ah
clc
mov ebx, 0x74dc100
jg 0x401b4f
adc esp, dword [rax]
or dword [rsi + rsi + 0x3f], 0xffffff80
jo 0x401ae8
or al, 0x12
push 0x30f0274
sub al, 0x24
fisttp dword [rbx + 0x3f3017cf]
xchg dword [rbp + 0x7f343830], eax
adc dword [rdi], esp
jo 0x401b3f
jnp 0x401b78
insd dword [rdi], dx
jg 0x401b88
retf
or byte [rip + 0x4ba7fbb], ah
jb 0x401b2f
or al, 0x87
jb 0x401b95
sbb eax, eax
mov edi, 0x2cf07f09
add al, al
and bh, byte [rcx + 0x7d]
or dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
and bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x4ff7fdea], ecx
neg byte [rip + 0x315e60d7]
cmp al, dl
add byte [rax], al
or dword [r8], eax
add byte [rax + 0x3f], al
add byte [rax], al
add byte [r8], al
or al, 0xf4
add byte [rax], al
add bh, bh
