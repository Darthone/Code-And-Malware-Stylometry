call 0x400de8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400c00
add ebx, ebx
je 0x400bb6
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400bee
cmp rbp, -4
ja 0x400bee
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400bd6
add ecx, 4
mov dl, byte [rax]
je 0x400bfe
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400bee
ret
cld
pop r11
cmp r8b, 2
je 0x400c16
jmp 0x400c93
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400c26
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400c0e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400c3e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400c2b
sub eax, 3
jb 0x400c5c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400c93
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400c83
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400c81
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400c70
cmp rbp, -0xd00
adc ecx, eax
call 0x400bc2
jmp 0x400c16
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400d6c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400d0a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400d56
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400d29
push 0x3a707474
jne 0x400d82
js 0x400d42
jae 0x400d7c
outsb dx, byte cs:[rsi]
je 0x400d3b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400da9
jb 0x400d9b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400dc6
jb 0x400dd9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211714
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211714
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400ca4
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400dcf
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400d7d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f0e77
jb 0x400e8f
movsxd rbp, dword [rdi]
jae 0x400e89
insb byte [rdi], dx
js 0x400e8f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400e6f
cmp rsi, rcx
jae 0x400e77
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400e56
cmp al, 0x8f
ja 0x400e56
cmp byte [rsi - 2], 0xf
je 0x400e5c
sub al, 0xe8
jg 0x400e59
push rdi
cmp al, 1
ja 0x400e44
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400e47
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400e74
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400ecb
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1349
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400f0f
mov al, 0xa
jmp 0x400f0f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400eeb
inc ebx
mov al, 0
jmp 0x400f13
mov al, 2
jmp 0x400f13
mov al, 3
jmp 0x400f13
mov al, 0x3c
jmp 0x400f13
push rcx
rcr ah, 1
fstp st(7)
jle 0x400f54
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400f66
jg 0x400f58
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a66db
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400fb2
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb612f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400fba
cmp esi, 0x21585055
jne 0x400fbe
jge 0x400fb0
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400fb3
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400fb7
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401063
pop rcx
or al, 0x3b
jb 0x401069
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400fdb
jmp 0x400fdd
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660f1e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53166
in eax, dx
jg 0x401015
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40105b
mov bh, 0x2a
add edi, 0x10
jmp 0x401058
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401095
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4010d1
jne 0x4010e8
fstpnce st(6), st(0)
jle 0x4010b1
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4010e7
jrcxz 0x40111b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b07f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40119a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40115a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829572f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4011cd
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401167
and ecx, 7
or al, 0xeb
jae 0x4011d2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401207
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401245
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4011fe
push rax
call 0xffffffff868d0eeb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401208
std
cmp edi, esi
xchg eax, edi
jle 0x40125d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c957e9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40125b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401249
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401272
js 0x4012b2
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401344
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad257f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401365
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40136a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20e1c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4012f8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
pop rsp
or dword [rax], eax
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
sub byte [rdx], ah
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
jmp rax
add byte [rax], al
xchg eax, edi
or dword [rax], eax
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40141e
je 0x401427
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4013f0
mov dh, 0x7d
jbe 0x4013ef
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401428
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x4480006], bl
add byte [rsi + 5], ch
nop
nop
invd
add byte [rax + 0x6de00009], dl
enter 0xa27, 0
sub byte [rsi], al
or eax, dword [rdi + rax]
cmp al, 0x81
jl 0x401396
or al, 0
and byte [rip - 0x7ec14000], cl
cmp al, 0x81
add al, dl
lldt word [rcx + rdx]
adc ebx, dword [rax + 0x39]
rcr byte [rdi + 0x10], 0x17
adc dword [rax - 0x1b], esp
add cl, ah
add byte [rdx + rdx + 0x37], bl
adc dl, byte [rdi]
in al, 3
enter 0x134f, 0
clc
sbb eax, 0x8001460
in al, 9
in al, 3
adc eax, 0x161000
sbb byte [rbx], bh
mov sil, 9
pop rdi
sbb byte [rcx + rcx], al
in al, 3
insb byte [rdi], dx
and byte [rdi], dl
sbb dword [rax], eax
wait
mov dl, 9
in al, 0x1a
add byte [rax + 0x1701131b], al
mov dl, 0xd8
xchg eax, ecx
mov esp, 0xfff10004
or al, 0x1b
mov edi, 0xb8699b61
sbb dword [rdi + 2], edi
enter 0xc90, 0x32
sbb eax, dword [rax + 0x2e]
movsb byte [rdi], byte ptr [rsi]
jnp 0x4014d0
xor al, byte [rax - 0x6f58a0bc]
and eax, 0x11b0644
push rbx
enter 0xc90, 0x76
jp 0x4014e8
movabs al, byte [0xd7a59784aec21986]
lodsd eax, dword [rsi]
insb byte [rdi], dx
mov dl, 0x49
movaps xmm6, xmmword [rdi - 0x38]
nop
and dword [rcx], ebx
sub ebp, ebx
sub bl, byte [rbp - 0x38]
rol dword [rsi + 0x24adbfea], -7
cmp eax, ecx
and byte [rbx + 0x20042c47], al
add dword [rax + rsi*4 + 0x21], esp
cmp dword [rax], esi
xor dl, byte [rdi]
xor dword [rip + 0x45864192], ebx
xor dl, byte [rdi + 1]
xor bl, al
nop
pushfq
pop rdi
xor al, 0x76
cmp byte [rcx + rcx*8], cl
and byte [rbx - 0x6a], al
cmp al, 0xb8
or al, 0x32
and al, 0x83
fld dword [rbx + rax*2 + 0x32]
enter -0x170, 0x48
sbb eax, 0x93921906
add cl, byte [rdi + rdi + 0x50]
and dword [rcx], ebx
pop rsp
push rsp
xchg byte [r8 + rdx*4 + 0x7a], spl
pop rax
cdq
sbb dword [rdx - 0x369f3ea4], edx
and dword [rcx], ebx
jmp 0x24432684
or dword [rcx + rcx*8], 0x68
cmp dword [rax + rcx*8 - 0x70], ebp
or al, 0x32
jo 0x4014b1
leave
and byte [rbx + 0x32], al
je 0x4014e0
js 0x40156e
and al, 0x83
or al, 0xd8
jl 0x40153e
add al, 0x64
nop
and dword [rcx], edi
sub byte [rsp + rax*4], 0x19
xchg eax, edx
xchg byte [r9 - 0x78], dl
jp 0x401564
mov word [rsi - 0x6f9b7970], fs
and esi, ecx
xchg eax, esp
hlt
pushfq
sbb al, 0x92
cwde
sbb eax, dword [rip - 0x37cdbc64]
nop
movabs al, byte [0xa88fa420c90c8369]
nop
or al, 0x32
and al, 0xb5
lodsb al, byte [rsi]
leave
and dword [rcx], edi
jrcxz 0x401557
add eax, 0x604b0e7
leave
mov ah, 0x2a
mov eax, 0x72724393
push rsp
mov esp, 0x9c83067f
sbb al, 0x92
shl byte [rbp - 0x78f737fa], 0xe4
in al, 0x20
retf
rcl cl, 1
leave
and byte [rdx], dl
or al, 0xaf
int1
in al, 0x20
adc byte [r15d], r10b
and dword ds:[rdi], eax
xchg dword [rdx], edx
sbb ah, ah
mov edx, dword [rip + 0x67073287]
ret 0xf2e
xchg eax, edi
adc dl, byte [rax + rax*2]
cmpxchg byte [rax], dl
pop rdi
adc byte [rbx - 0x10fa87ce], bh
pop rdi
and eax, 0x5f657630
jne 0x40160d
adc eax, dword [rdi + 0x36604a6c]
xchg byte [rdi], dl
outsd dx, dword [rsi]
cdq
out dx, al
xchg eax, ebp
xlatb
adc cl, byte [rcx]
pop rdx
cmpsd dword [rsi], dword ptr [rdi]
push rdi
fadd qword [rax]
movabs byte [0xbe158320b600d52f], al
movsd dword [rdi], dword ptr [rsi]
sbb ch, byte [rdi + 0x2760042f]
sbb ecx, esi
mov edx, 0x2111037
sbb dword [rbp + 0x16], -0x19
or dword [rdi], ecx
sub bl, byte [rdi - 0x36]
adc byte [rsi], dh
xor byte [rax], 0xd9
cmp edi, dword [rcx]
fsubr st(5)
pop rdi
mov bl, 0xa
pop rsp
cmpsd dword [rsi], dword ptr [rdi]
mul dword [rbp + 0x11]
sbb eax, dword [rdx - 0x3c]
outsd dx, dword [rsi]
jb 0x40162a
add bh, byte [rbx + 0x12]
or byte [rdi], ch
or byte [rdi + 0x3e], bl
in al, 0x20
or dword [rip + 0x24451775], 9
jb 0x40163c
sbb al, byte [rcx]
or byte [rdi + 0x5e], bl
ret 0x9086
pop r10
jns 0x40166f
xchg byte [rsi + rax + 0x2f809319], al
mov eax, 0xe900668e
and ah, dl
adc edi, esp
insb byte [rdi], dx
or byte [rbx], bl
xchg eax, edx
and bl, ah
pop rdi
test byte [rdi + 7], 0x90
xchg byte [rcx], ah
adc bh, dh
adc byte [rip - 0x36f27cf7], bl
or edi, ebx
lodsb al, byte [rsi]
sbb bl, 0x33
enter 0x820, 0x32
add al, byte [rdi + 0x70]
nop
or al, 0x36
and al, 0x3e
push -0x39f1b13f
push fs
adc byte [rbp - 0x71], ah
wait
mov dl, 0x91
pop rbx
sbb al, byte [rdi + 0x67]
mov ah, 0xd8
add eax, 0x9694876
out dx, eax
test dword [rdi], ebp
xchg eax, edx
mov bl, 0x43
xor bh, byte [rax - 0x5be8f8a3]
jbe 0x401704
sbb dword [rax], esi
movabs al, byte [0xb0790bb0868f0781]
and al, 0x87
ja 0x401668
sbb dword [rdx + rcx*2 - 0x3a], ebp
mov edi, 0xb08fa319
sbb al, 0x6c
mov al, 0x21
movsd dword [rdi], dword ptr [rsi]
shr byte [rdi], 0xed
add esi, dword [rax]
and al, 0x83
pushfq
test eax, 0x3939aba8
ret 0x3783
ud2
xchg eax, edi
jb 0x4016f5
mov ah, 0x1c
insb byte [rdi], dx
mov al, cl
or dword [rdi], 0x9d833a90
int3
push rbp
out 0xff, eax
pop rbx
dec dword [rdi]
movsxd rsi, dword [rdx + 0x74]
jae 0x401780
jne 0x401774
movsxd rsi, dword cs:[rbx + 0x5f]
push r10
pop rdi
push r11
push rsp
outsd dx, dword [rsi]
in eax, dx
xchg eax, edi
push 0x7265a809
imul ebx, dword gs:[edx], 0x6d745f06
outsd dx, dword [rsi]
outsd dx, dword [rsi]
out dx, eax
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401758
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
fcomp st(7)
jle 0x401742
jae 0x4017a8
jne 0x4017c4
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4017bd
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xfb243538
push rsi
pop rdi
imul bp, word [rsi + 0x69], 0x7208
jb 0x4017c8
jns 0x4017c8
outsb dx, byte gs:[rsi]
je 0x4017df
jns 0x40176f
or cl, byte [rip + 0x6d76fb98]
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x4017af
or eax, 0x13dbb75f
sub dword [rdx + rbp + 0x67], esi
movsxd rbp, dword [rdx - 0x62]
jo 0x4017fc
pop rdx
push rbx
fcmovnbe st(0), st(6)
push qword [rsp + rcx*2 + 0x31]
cmp dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
wait
jns 0x40180f
movabs eax, dword [0x746375ec1b5bb972]
sbb dh, byte [rbx]
jb 0x401825
movsxd rsp, dword [rcx + 0x74]
cmp ebx, ebx
jle 0x40178b
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x380c650f
imul ebp, dword [rbp + 0x6b], 0x6f6977bb
pop rdi
cmp qword [rdx + r11], r9
jne 0x401813
out dx, eax
fidiv dword [rsi + 0x4c7878fb]
xor dh, byte [rcx]
mov ch, 0x65
test al, 0x6c
jns 0x401820
imul ebx, dword [rdi + 0x70], 0x6f
iretd
loopne 0x4017ec
sti
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
or byte [rcx], bl
add ebp, dword [rbx - 0x23]
adc dword [rcx], esi
xchg eax, edi
pop rdi
adc ah, cl
mul byte [rsi - 0x25]
xor byte [rcx - 9], ah
jo 0x401842
pop rbp
adc dh, byte [rcx]
xor eax, 0x76f6db42
mov dh, 0x65
js 0x4017b5
leave
jae 0x401860
xor eax, 0x45b66153
ret 0x1dbe
test al, 0x73
jne 0x401885
jae 0x401844
jbe 0x4017ac
mov ebp, 0x695f389b
insd dword [rdi], dx
imul edi, dword [rdx + 0x41], 0xadb0a37
imul eax, dword [rbp - 0x5adf00ff], 0x45
cmpsd dword [rsi], dword ptr [rdi]
mov al, 0xb6
push r11
cmc
imul ecx, dword [rdx + 0x24], 0x56d66235
pop rax
imul esp, dword [rbp + 0x610d86a9], 0x17
push rdx
fadd st(2)
outsb dx, byte [rsi]
adc ah, byte [rcx - 0x79]
ja 0x4018c8
or bl, bl
sbb al, 0x34
adc dword [eax + 0x7b], esi
outsb dx, byte [rsi]
or ecx, dword [rcx - 0x1de19a14]
insd dword [rdi], dx
fisub word [rbx + 0x68]
adc al, 0x52
fst dword [rax]
lodsb al, byte [rsi]
push rcx
cdq
add byte [rbx], ch
sub al, 0x91
adc esp, dword [rdi]
adc al, cl
add cl, byte [rdi + 0x77]
mov dh, 0xcd
scasb al, byte [rdi]
mov al, 0x27
cmp dword [rsi], esp
or edi, dword [rcx + 0x4a]
mov dl, 0x76
leave
adc eax, 0x9beb6e34
pop rbx
ret
adc dword ss:[rsi], ebx
sub dword [rdi - 0x43], ebp
insd dword [rdi], dx
push rbx
fnstenv [rbp + 0x73]
sub dh, byte [rax + 0x18]
jbe 0x40192a
jbe 0x401911
imul eax, dword [rdi + rdx*2], 0x3455903a
sub ax, 0xd96a
mov al, 0xab
xor byte [rax], ch
fldenv [rbp + rcx*2 + 3]
pop rcx
xlatb
push rsi
int 0x15
jo 0x4018c1
pop rbx
imul edi, dword [rcx + 0x39302866], 5
insb byte [rdi], dx
xor byte [rip + 0x332b640d], ch
xchg eax, esp
jb 0x4018cb
mov dl, 7
wait
retf 0x31f4
je 0x401962
jo 0x401910
push rdi
push 0x4d
xor ah, bh
movsb byte [rdi], byte ptr [rsi]
push rsi
sub al, byte [rbp - 0x18dc8b4e]
sbb edx, dword [rbp + 0x66d953b9]
je 0x401964
jb 0x40192c
and eax, 0x3b640259
jo 0x40196c
outsb dx, byte [rsi]
cdq
mov dl, 0xd9
and dword [rbx], eax
xor al, 0x64
sub byte [rsi - 0x59], cl
mov dl, 0xb6
lea esp, [rsi + rbp*2]
sbb byte [rbx + rsi*2 + 0x70], dh
xchg eax, edx
and al, 0x35
mov bh, 0x65
jb 0x4018af
adc eax, 0xb8362986
retf -0x30f6
js 0x40199e
jp 0x4019ac
and ebx, 0x383b4b81
movabs eax, dword [0x5f01d8386816b174]
push rbx
and al, 0xbd
movabs byte [0xdf922f0ad18b664], al
jns 0x40196e
fbstp tbyte [rbp - 0x11]
add eax, 0x614d345a
sbb eax, 0x505f2645
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
cmc
or al, 0x74
in eax, dx
adc byte [rdi], r11b
xor al, 0xeb
xor eax, 0xa0c6eb9a
loope 0x4019ea
imul eax, dword [rsi + 0x7a], 0x66fe7c0d
loopne 0x401924
lea esp, [rbx + 0x51]
wrmsr
imul ebp, dword [rcx - 0x3a], 0x2fdfdc05
xor r11b, byte [rcx + 0x13be495f]
out dx, eax
mov edi, 0x5246ab83
pop r15
xor r11, qword [rsi]
insb byte [rdi], dx
jns 0x401968
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
push rdx
test cl, 0x3d
push rbx
mov dword [rdi + 0x54], ebx
sub r8b, r13b
loop 0x401a3a
adc byte [rbx - 0x485a908e], bl
cmp ebx, dword [rdi + 0x454e5944]
add byte [r10 + 0x4066741b], bpl
mov esi, esi
mov bh, 0x40
pop r15
xor ch, byte [rsi]
add dword [rdx + 0x3e], esp
and al, 0xda
mov dh, 0xbd
xchg dword [rdi - 0x689c3d9e], esi
pop rbx
jmp 0xf9dd394
insd dword [edi], dx
mov bl, 0x3d
mov word [rdx - 0x20], cs
mov esp, 0x526241c0
rol dword [rbx + 0x6c], -0x31
jae 0x401a80
jae 0x401a5a
mov bh, 0xb0
xor eax, 0x765165fb
sub al, 0x11
sub al, 0xcc
shr byte [rax], 1
push ax
pop rbx
insb byte [rdi], dx
imul dh
fdivr st(6)
jae 0x401a09
and dh, byte [rcx + rcx*2]
cwde
xor dword [r13 + 0x76], eax
and al, 0x8e
xchg dh, ah
addps xmm3, xmmword [rax + 0x5f]
xor ebp, dword [rsi]
xor al, 0x37
in eax, dx
insb byte [rdi], dx
sbb bl, bh
je 0x401a5d
movsxd r9, dword [rip + 0x6964fd33]
or byte [rsi], dh
mov ch, ch
insb byte [rdi], dx
neg byte [rsi + 0x57]
or ebx, dword [rdi - 0x4e999271]
xor eax, 0x776e9211
test dword [rdi + rdi*4 - 0x6e], esi
test eax, 0x448008ec
push r12
pop r15
pop rbx
movabs dword [0x342d626154a1430c], eax
xlatb
adc eax, 0x764f1b1a
or al, 0x75
sub al, 0x24
xor al, 0x75
xchg eax, edx
add dh, cl
outsb dx, byte [rsi]
cmp eax, 0x58123a50
cmp esp, dword [rcx - 0x48]
xchg eax, esp
mov ebp, 0x598383
mov eax, 0xeb639e30
and al, 0xf1
jae 0x401a82
push -0x796ac5c9
ret
adc dl, byte [rax - 0x479d9c33]
jo 0x401a45
or eax, 0x6b681ecc
add eax, dword [rbx + 0x5b]
je 0x401a9b
push rsi
or al, 0x2c
sti
cmp esi, dword [rdx + 0x65693c52]
mov eax, dword [rax]
add byte [r15 + 0x5e], r11b
mov edi, es
mov ebx, 0x94d8b94f
jno 0x401af1
or dword [rip + 0x4e6034e3], eax
jbe 0x401acc
jae 0x401b6e
insd dword [rdi], dx
xor dword [rdx + 7], esp
je 0x401b6d
push -0x3c945235
or dword [rsi], ebx
jo 0x401b0c
outsb dx, byte [rsi]
outsd dx, dword [rsi]
sal dword cs:[r14 + 0x2d49861b], 0x15
or eax, 0xe96c5a04
jbe 0x401b46
jne 0x401aad
sub eax, 0xd10d0046
imul esi, dword [rbx], -9
cmp byte [rcx], cl
jns 0x401b98
sbb dword [r13 - 0x68], r9d
imul edi, dword [rbx], 0x1a734476
or al, 0x5f
or dh, dh
sbb cl, ch
sbb edi, dword [rdi - 0x48f6d7f4]
cmp eax, 0x741adbc3
jb 0x401b4e
or ch, byte [rdi + rbp*2]
or byte [rax - 9], bl
jo 0x401b57
add eax, 0xda6f24ab
mov dl, 0xd6
and ah, dh
push 0xd3d68f9
mov al, 0xd9
movsb byte [rdi], byte ptr [rsi]
fnstcw word [rdx]
xor dword [rbx], ecx
sbb al, 0x2d
loop 0x401bd9
mov eax, 0x3561248f
ret
insb byte [rdi], dx
not byte [rsi + 0x69]
outsb dx, byte [rsi]
add al, 0x10
pop rbx
jae 0x401bde
jmp 0x401b84
add byte [rsp + rcx + 0x13fa068], dh
xlatb
nop
pushfq
mov ecx, 0x3f071759
sbb al, 3
ror byte [rcx + rcx*8], cl
add dword [rbx], esp
push rsp
xor cl, r8b
and byte [rax + 4], dl
and byte [rbx + 0x32], al
and al, 0x31
je 0x401b87
push rax
xor cl, al
je 0x401bd3
jg 0x401ba8
cmp esp, esp
ljmp [rdi - 0x68]
cwde
and dword [rcx], ebx
nop
xor byte [rip + 0x406c1908], al
or r9, rax
enter 0x26c9, 0x67
add byte [rcx], 0xfb
rcl dword [rdx + 0x56189066], 1
add ecx, dword [rax - 0x62]
fild word [rdi]
and eax, 0xa4b50901
mov ebx, 0x7ffbf5e
fst dword [rax - 0x40f84264]
and byte [rdx], al
add edx, edx
or eax, 0x90fe3f6b
shr byte [rsi], 0x79
out 7, al
mov edi, 0xff020050
leave
sbb byte [r10 + 0x53], dil
loopne 0x401c1b
and dword [rdi], esp
mov eax, 0xff483f07
push rax
xchg eax, ebx
ror dword [rsi], -0x7c
or al, 0xc8
fstp dword [rbx - 0x27c0f881]
sbb byte [rsi], ah
xor dword [rax], 0xffffff80
mov ss, word [rbx]
xchg eax, edx
adc esp, dword [rsi]
add dword [rdi + 0x191aff07], edi
enter -0x767a, 0x3f
and byte [rax], ah
and dword fs:[rbx], ecx
movabs al, byte [0x7f94364320c8071f]
rol al, 0x32
and al, 0x43
xor cl, byte [rax]
or byte [rbp + 0x4320c839], bl
rcl al, 1
or dword [rdx + 0x72], eax
fadd dword [rdx]
movabs dword [0x9ff07d721373392], eax
or dword [rcx], edx
xchg eax, edx
xchg byte [rcx + 0x48bb3fbf], ch
sahf
mov ecx, 0x13cbf07
mov cl, 0x3f
cdq
wait
adc al, 0x21
cmpsd dword [rsi], dword ptr [rdi]
jg 0x401cb5
leave
insb byte [rdi], dx
mov edi, 0x250dc83f
outsb dx, byte [esi]
jg 0x401c65
leave
mov r9b, byte [r9 - 0x2d]
add ebx, edi
mov ecx, 0x7e1cec8
mov esp, 0xfa4b159
leave
and byte [rdi + 0x86e3fe1], bh
nop
adc byte [rax], dl
out 0x7f, al
sbb dword [rax - 0x7ce7e7fa], edx
or al, 0xc9
leave
loopne 0x401cc6
adc byte [rax + 0x242a9373], bl
xchg dword [rdi], eax
jg 0x401d12
jbe 0x401caa
and al, byte [rdi]
out dx, eax
or dword [rdi + 0x20], 0x9370603f
and dword [rcx], ebx
clc
xchg eax, ebx
int 0x2e
jg 0x401ce9
adc edi, dword [rdi]
or byte [rbx], 0x39
enter 0x7020, 0x30
add al, 0xee
push rax
lsl ebx, edi
xor byte [rax], bh
sub al, 0x64
xor al, 0x7f
retf -0x789a
test dword [rdi], eax
adc dword [rbx], edi
or byte [rip + 0x377d7027], ah
jg 0x401d21
cmp al, 0xeb
xchg eax, ebp
int 0xbb
add byte [rax + 0xd08bf20], ch
fadd dword [rax]
rcr byte [rsi + rbx + 0x167f0960], cl
leave
xchg eax, ebx
mov r8b, 0x2d
int 9
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x6ef7fdea], ecx
jp 0x401cdd
mov edx, ebp
adc eax, 0x1fe07509
add byte [rax], al
xchg eax, edi
or dword [rax], eax
add byte [rax + 0x40], dl
add byte [rax], al
add byte [r8], al
pop rsi
hlt
add byte [rax], al
add bh, bh
