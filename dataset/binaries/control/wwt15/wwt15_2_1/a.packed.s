call 0x400ca8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400ac0
add ebx, ebx
je 0x400a76
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400aae
cmp rbp, -4
ja 0x400aae
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400a96
add ecx, 4
mov dl, byte [rax]
je 0x400abe
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400aae
ret
cld
pop r11
cmp r8b, 2
je 0x400ad6
jmp 0x400b53
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400ae6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400ace
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400afe
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400aeb
sub eax, 3
jb 0x400b1c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400b53
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400b43
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400b41
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400b30
cmp rbp, -0xd00
adc ecx, eax
call 0x400a82
jmp 0x400ad6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400c2c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400bca
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400c16
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400be9
push 0x3a707474
jne 0x400c42
js 0x400c02
jae 0x400c3c
outsb dx, byte cs:[rsi]
je 0x400bfb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400c69
jb 0x400c5b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400c86
jb 0x400c99
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211554
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211554
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400b64
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400c8f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400c3d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f0d37
jb 0x400d4f
movsxd rbp, dword [rdi]
jae 0x400d49
insb byte [rdi], dx
js 0x400d4f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400d2f
cmp rsi, rcx
jae 0x400d37
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400d16
cmp al, 0x8f
ja 0x400d16
cmp byte [rsi - 2], 0xf
je 0x400d1c
sub al, 0xe8
jg 0x400d19
push rdi
cmp al, 1
ja 0x400d04
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400d07
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400d34
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400d8b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1209
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400dcf
mov al, 0xa
jmp 0x400dcf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400dab
inc ebx
mov al, 0
jmp 0x400dd3
mov al, 2
jmp 0x400dd3
mov al, 3
jmp 0x400dd3
mov al, 0x3c
jmp 0x400dd3
push rcx
rcr ah, 1
fstp st(7)
jle 0x400e14
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400e26
jg 0x400e18
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a659b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400e72
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb5fef
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400e7a
cmp esi, 0x21585055
jne 0x400e7e
jge 0x400e70
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400e73
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400e77
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x400f23
pop rcx
or al, 0x3b
jb 0x400f29
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400e9b
jmp 0x400e9d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660dde
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53026
in eax, dx
jg 0x400ed5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x400f1b
mov bh, 0x2a
add edi, 0x10
jmp 0x400f18
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x400f55
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x400f91
jne 0x400fa8
fstpnce st(6), st(0)
jle 0x400f71
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x400fa7
jrcxz 0x400fdb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1af3f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40105a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40101a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582955ef
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40108d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401027
and ecx, 7
or al, 0xeb
jae 0x401092
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4010c7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401105
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4010be
push rax
call 0xffffffff868d0dab
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4010c8
std
cmp edi, esi
xchg eax, edi
jle 0x40111d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c956a9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40111b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401109
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401132
js 0x401172
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401204
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad243f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401225
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40122a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20cdc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4011b8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
sbb al, 0xb
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
sub byte [rax + 0x90], ah
add byte [rax], al
add byte [rax], al
add dil, dil
cmp byte [rdi], bl
add byte [rax], al
push rdx
or dword [rax], eax
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4012de
je 0x4012e7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4012b0
mov dh, 0x7d
jbe 0x4012af
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4012e8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x4480006], bl
add byte [rax + 5], ch
nop
nop
invd
add byte [rax - 0x3727fff7], cl
enter 0xa27, 0
and byte [rsi], al
or eax, dword [rax]
clc
in al, 3
in al, 0x13
or al, 0
and byte [rdi], al
or eax, 0x9f6c000
in al, 9
add al, dl
lldt word [rax + rdx]
pop rdi
wait
ror dl, 1
adc byte [rdi], dl
adc dword [rcx], ebx
in eax, 0
adc dword [rdi], eax
adc dl, byte [rdi]
in al, 3
enter 0x134f, 0
clc
sbb eax, 0x8001460
in al, 9
in al, 3
adc eax, 0x161000
sbb byte [rbx], bh
mov sil, 9
pop rdi
sbb byte [rcx + rcx], al
in al, 3
insb byte [rdi], dx
and byte [rdi], dl
sbb dword [rax], eax
wait
mov dl, 9
in al, 0x1a
add byte [rax + 0x1701131b], al
mov dl, 0xd8
xchg eax, ecx
mov esp, 0xfff10004
or al, 0x1b
mov edi, 0xb8699b61
sbb dword [rdi + 2], edi
enter 0xc90, 0x32
sbb eax, dword [rax + 0x2e]
movsb byte [rdi], byte ptr [rsi]
jnp 0x40138f
xor al, byte [rax - 0x6f58a0bc]
and eax, 0x11b0644
push rbx
enter 0xc90, 0x76
jp 0x4013a7
movabs al, byte [0xd7a59784aec21986]
lodsd eax, dword [rsi]
insb byte [rdi], dx
mov dl, 0x49
movaps xmm6, xmmword [rdi - 0x38]
nop
and dword [rcx], ebx
sub ebp, ebx
sub cl, byte [rcx]
mov ecx, 0xbfea86cd
sub dword [r10 + 7], r12d
sbb dword [rax + rdx*4 - 7], esp
sub al, 4
and byte [rcx], al
or al, 0x36
and al, 0x27
xor byte [rdx], dh
xor dword [rbx + 0x32], eax
enter 0x4590, 0x32
push rdi
sbb edx, dword [rdx + 0x345f01b3]
jbe 0x4013bb
cmp byte [rcx], ah
sbb dword [rax + rcx*2 - 0x6a], esp
cmp al, 0x41
xchg byte [rax + rdx*4 - 0x48], ah
sbb dword [rdx + 0x2048fe44], edx
jb 0x40142f
sbb eax, 0x243f4c02
or dword [rcx + rcx*8], 0x50
pop rsp
push rsp
enter 0xc90, 0x32
jp 0x401426
cdq
leave
and byte [rbx + 0x32], al
pop rsp
shl dword [rax + 0x39], 0x24
or dword [rcx + rbp*8], 0x64
adc dword [rbx], eax
nop
and dword [rcx], edi
push -0x6de693c7
xchg byte [r9 + 0x70], spl
test byte [rcx], bl
je 0x40139f
js 0x40137b
nop
and eax, ebx
jl 0x4013fd
add al, 0xc
xor ah, byte [rdi]
sub byte [rsp + rax*4], 0x43
xor cl, al
nop
push rcx
mov byte [rdx - 0x7d], bh
or al, 0xc9
and byte [rsi + 0x320c9090], cl
and al, 0xce
xchg eax, esp
xchg eax, ebx
xor cl, r8b
hlt
cwde
sbb eax, dword [rip - 0x6de6f9b8]
pushfq
movabs al, byte [0x928fa46964192190]
xchg byte [r8 + rbp*4 - 0x4b], spl
lodsb al, byte [rsi]
jb 0x40147d
sbb esi, ebx
mov al, 4
leave
and byte [rbx + 0x72], al
mov ah, 0x2a
mov eax, 0xc83243a
push rsp
mov esp, 0x7272067f
shl byte [r13 - 0x6c6d37fa], 0x83
or al, 8
retf
rcl dh, 1
xchg eax, ecx
pushfq
sbb al, 0xd1
popfq
insb byte [rdi], dx
jb 0x401499
loopne 0x401472
jns 0x4014e2
mov al, 0x93
push rsi
adc byte [rdi], al
sub ecx, dword [rdi]
cmp al, 0x87
adc bh, byte [rax]
adc eax, 0x1207219f
ret 0x5f6e
adc al, byte [rax + 0x17]
ja 0x401505
cmpxchg byte [rax], dl
cmp r8d, dword [r15]
add eax, 0x92bb1065
ja 0x4014d3
and eax, 0x2f647630
adc ebx, dword [rdi + 0x6c411775]
xchg dword [rax - 0x11f9ffb9], ecx
xchg eax, ebp
out dx, eax
retf 0x5a08
mov edi, 0xdcd65763
xchg eax, ecx
add byte [rbp - 0x7c63f1e9], ah
popfq
insb byte [rdi], dx
cmpsd dword [rsi], dword ptr [rdi]
adc byte [rdx], al
or dl, dl
or al, 0x76
pop rcx
cvtpi2ps xmm0, qword [rdi - 0x4b]
and byte [rdx + 0x43], ah
fadd dword [rax]
scasd eax, dword [rdi]
pop rdi
sbb eax, edx
scasb al, byte [rdi]
sub al, 0x3f
fmul dword [rdi + 0x5cd17ed]
jb 0x4014f1
adc cl, byte [rax]
cdq
adc eax, ecx
fnstenv [rbx + 0x24400f1d]
out dx, eax
lodsb al, byte [rsi]
xor dword [rax + 0x4b4360c5], edx
and bh, 0xe3
or al, 0x20
fnsave dword [rax + 0x5f]
and byte [rdi + rax*4 - 0x5b793de5], cl
and byte [rbx + 0x147ae5f], bl
movsb byte [rdi], byte ptr [rsi]
or al, cl
xchg eax, edi
adc byte [rdx - 0xa], dh
in al, 0xd9
sbb eax, dword [rdx]
mov edi, 0x1a420c0
xlatb
fild word [rcx + rsi*8 - 0x1718909e]
add dh, byte [rdx]
fcom dword [rax - 0xb8fb894]
push 0x43b39302
add dword [rcx], ecx
movsb byte [rdi], byte ptr [rsi]
mov al, 0x93
pop rsp
or edi, ebx
movabs al, byte [0x13669991ec2f650f]
adc byte [rdi + 0x1f], bl
or edi, ebp
imul edi, dword [rdx + 0x22473b0b], 0x641b2e68
nop
rcl dword [rdi], 0x51
sub byte [rdi + 0x76], al
movabs al, byte [0x387c84c843770770]
sub dword [rdx + 0x67], esp
jl 0x401595
sti
in al, 0x60
xlatb
movabs al, byte [0xc27981bf015888d0]
sub dword [rcx], ebx
sbb dword [rax + 0x22806709], ecx
or al, 0xc9
leave
or ecx, dword [rdx + 0x739e8809]
mul ah
and byte [rdi], bl
or byte [rdi], cl
or eax, 0xa900fd5b
outsd dx, dword [rsi]
movsxd rsi, dword [rdx + 0x74]
jae 0x401562
jle 0x40155a
std
jmp qword [rsi + 0x2e]
movsxd rax, dword [rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or eax, ebx
jb 0x40162b
imul esi, esi, 0x1ad6ffee
pop rdi
je 0x40163e
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4015fa
outsd dx, dword fs:[rsi]
pop rdi
or ebp, ebp
mov bh, 0xff
mul byte [rdx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x40164a
jne 0x401666
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x40165f
sub dword gs:[rdi + 0x7f], ebp
cmp ebp, 0x35372e64
cmp byte [rip + 0x69665f24], dh
outsb dx, byte [rsi]
imul ecx, dword [rax], 0xb9617272
outsd dx, dword [rsi]
mov bh, 0xff
jns 0x40166e
outsb dx, byte gs:[rsi]
je 0x401685
jns 0x401615
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401651
cmp eax, 0xd80dd61
pop rdi
sub dword [rdx + rbp + 0x67], esi
movsxd rbp, dword [rdx - 0x53]
std
jg 0x4015ea
sahf
jo 0x4016a2
pop rdx
push rbx
je 0x401683
xor dword [rcx], edi
jo 0x4016a4
movsxd rsp, dword gs:[rbp + 0x77]
wait
mov ch, 0xc1
mov esi, 0xa16e796d
jb 0x4016bf
movsxd rsi, dword [rdx + rbx + 0x33]
jb 0x40163d
popfq
mov ebx, 0x74616377
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0xb77bb60f
mov bl, 0x65
or al, 0x38
imul ebp, dword [rcx + 0x6f], 0x394e0e5f
or al, 0x6d
mov ebx, 0x751ab6df
js 0x4016ef
xor r14b, byte [rcx]
mov ch, 0x65
test al, 0x6c
outsb dx, byte [rsi]
mov al, 0xff
scasb al, byte [rdi]
jns 0x4016c6
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
or eax, 0x19080cf6
adc dword [rcx], esi
xchg eax, edi
pop rdi
outsd dx, dword [esi]
mov dh, 0x3d
mov al, 0x12
xor byte [rcx - 9], ah
jo 0x4016e4
pop rbp
outsd dx, dword [rsi]
sbb ebp, dword [esi + 0x12]
xor dword [rip - 0x5a879abe], esi
leave
jae 0x401702
xor eax, 0x6db611db
push rbx
mov dh, 0x45
test al, 0x73
fdivr dword [rbx + 0x6275ec29]
jae 0x4016ea
cmp byte [rdi + 0x69], bl
insd dword [rdi], dx
imul edi, dword [rdx + 0x41], 0x576856b0
or al, byte [rcx]
jmp qword [rax]
imul ecx, dword [rbx], -0x41
lodsd eax, dword [rsi]
movsd dword [rdi], dword ptr [rsi]
push r11
cmc
imul ecx, dword [rdx + 0x24], 0xa76b585
xor eax, 0x86a9a562
test dword [rip + 0x610d6d6c], ebp
outsb dx, byte [rsi]
adc ah, byte [rcx - 0x13]
adc al, 0x76
and dword [rdi + 0x341c6b77], eax
adc dword [eax + 0x70b0aec8], edx
jnp 0x401773
xchg eax, ebp
or eax, 0x6de2b6e1
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
mov al, 0xc2
and dword [rcx - 0x6f], edx
adc esp, dword [rdi]
insb byte [rdi], dx
and dword [rax + 0x774f6509], edx
in al, dx
or cl, byte [rbx]
and dword [rdi], 0x5c972639
fisttp dword [rbx]
jns 0x401782
xor al, 0x6e
fsub qword [rax + 0x6b]
jmp 0x4016db
adc dword ss:[rsi], esi
xchg eax, ebp
mov ebp, 0x6f291e35
jne 0x4017be
sub dh, byte [rax + 0x18]
movsd dword [rdi], dword ptr [rsi]
add ebx, ecx
jbe 0x4017d0
jbe 0x4017b7
imul edx, dword [rbp + 0x34], 0xbb043666
jo 0x40178d
push 0x30
sub byte [rbp + 0x6d], dh
xchg eax, ebp
insd dword [rdi], dx
fldenv [rbp + rcx*2 - 0x33]
adc eax, 0x366b9670
nop
cmc
sub byte [rax], dh
cmp edx, edx
mov sil, 0xb5
add eax, 0x332b6c17
xchg eax, esp
mov al, 0xa9
or al, 0xd3
jb 0x401771
hlt
xor dword [rdi], esp
and byte fs:[rbx + 0x74], bh
jns 0x401800
and eax, 0x2852e732
jnp 0x40173c
movsb byte [rdi], byte ptr [rsi]
je 0x4017be
cmp edx, dword [rbp + 0x1be7a56d]
je 0x401806
jb 0x4017ce
mov sil, 0x53
cdq
and eax, 0x6e4b6170
sbb eax, 0x99259032
xor al, 0x64
imul ebx, ebx, 0x28
wait
sub byte [rsi + 0x24], cl
outsb dx, byte [rsi]
sbb byte [rcx + rcx*8 + 0x44], dh
jb 0x4017ee
jae 0x401836
xor eax, 0x29a15857
mov bh, 0x65
xchg byte [rcx], ch
lodsb al, byte ss:[rsi]
or al, 0x26
js 0x401840
jp 0x4017f8
mov eax, 0x3b74ab84
cmp byte [rcx + 0x1d838674], ah
cmp byte [rcx + 0x24535f01], dh
mov ebp, 0x816f0ad1
movabs byte [0x8b6fb6fe0df92264], al
jns 0x401814
add rax, 0x7661b33
xor ch, byte [rdi + 0x6f]
jmp 0x401820
call 0x251a4c12
sal byte [rip + 0x588dd735], 1
imul esi, dword [rip + 0x7c6b0d7a], 0xcdfdbf64
rcl byte [rdx + 0x40], 0xf
xor byte [rcx + 0x69], ch
lea ecx, [rbx]
mov eax, 0x5f88324c
lodsq rax, qword [rsi]
fldenv [rdx + rbx*8]
jg 0x40187f
push rdx
pop r15
or r12b, byte [rdx]
or esp, dword [rdi + rcx - 0x4a]
cmp al, 0x47
push rbp
and byte [rax + 0x44], cl
push rdx
cmp eax, 0xfc4bf783
push rbx
push r12
sub r9b, r10b
mov r15b, 0xb0
or dword [rax + rdx - 0x65], esp
jb 0x4018e8
sub edi, dword [rbp + 0x59448edd]
add byte [r9 + 0x4066741b], bl
fisttp dword [rsi - 0x4c]
mov edi, 0x43424949
pop rdi
xor ch, byte [rsi]
add dword [rcx - 0x4d], edx
mov esi, 0x6d122edc
movsxd rdx, dword [rbx + 0x6d670f46]
scasd eax, dword [rdi]
and byte [rcx - 0x77c63a0c], dh
retfq
push rdx
lodsb al, byte [rsi]
xor ebp, dword [rbp - 0x1e]
rol byte [rbx + 8], cl
jae 0x40191c
test eax, 0x1ee67570
mov al, 0x45
or byte [rcx + 0x47], bl
jae 0x4018d6
in al, dx
fxch st(0), st(5)
lodsd eax, dword [rsi]
and al, 0x34
test byte [r11 + 0x31], al
jbe 0x401930
pop rax
pop rax
pop rdi
xor esi, dword [rbp + 0x2ec86cd2]
xor al, 0x5c
mov byte [rdi - 0x79], ch
insd dword [rdi], dx
mov dword [rcx - 0x459ed075], edx
je 0x40189b
clc
xchg eax, ebp
pop rbp
push r12
pop r15
int1
mov dl, 0x5b
or al, 0x43
pop rcx
push rsp
jne 0x4018cf
mov edx, 0x4f1b11ae
jbe 0x40195d
jno 0x40195a
jne 0x401947
add byte [rax + 0x6f], ah
and al, 0x34
xchg byte [rsi + 8], ch
cmp eax, 0xe9420b3b
sbb al, 0x61
fnstenv [r14 + 0x7364b82e]
adc eax, 0x6885b619
cmp byte [rcx + 0x5d], dh
or byte [rbp - 0x40e674ca], al
xchg eax, esi
mov r9d, 0x7a826330
push 0x440a7b6b
loop 0x401969
push rsp
xor al, 0xf5
in eax, dx
imul byte [rsi]
fcomp st(0), st(0)
xor cl, byte [rcx + 0x7b]
push rdx
in al, dx
push rbx
xor al, byte [rdx]
adc eax, 0x5c81dab6
imul esp, dword [rsi - 0x4c], 0x6cfb65f4
outsb dx, byte [rsi]
enter 0x6493, -0x3a
mov eax, 0xb4530065
and dword [rcx + 0x7e52b9c0], esp
mov ebx, 0x739b8eed
jns 0x4019da
and ah, byte [rdx + 7]
je 0x4019e4
push 0x61b435b9
or dword [rsi], ebx
or byte [rax + 7], dh
outsb dx, byte [rsi]
outsd dx, dword [rsi]
and bl, al
jbe 0x4019e5
insd dword [rdi], dx
sub rax, -0x74f298eb
sub eax, 0x2edaeedd
jne 0x401944
sub eax, 0xf10d001c
insd dword [rdi], dx
out 0xde, al
pop rdx
cmp byte [rcx], cl
jns 0x401a0f
or dword [r11], r14d
insd dword [rdi], dx
sbb dword [esi + 0x44], esi
jae 0x4019ae
or al, 0xc1
pop rsi
movabs dword [0xb609284eb51b5fb9], eax
js 0x401a07
mov dh, 0x74
jb 0x4019e3
or ch, byte [rdi + rbp*2]
jmp 0x4019e3
loope 0x4019d0
or byte [rip - 0x3490db6a], al
sbb al, byte [rsi + rbx - 0x30979ad2]
push -0x64c9f2ed
xor dword [rbx + 0x3a], ebx
cmc
xor dword [rbx], ecx
test eax, 0x6a1c5ac5
mov cs, word [rdi - 0x33cc5bdc]
outsw dx, word [rsi]
add byte [rsi + 0x69], dl
mov word [rdx*2 + 0x335735b6], es
jmp 0x4019fc
add byte [rsp + rcx + 0x5b1b3578], dh
nop
pushfq
mov ecx, 0x3f076f49
sbb al, 3
ror byte [rcx + rcx*8], cl
add dword [rbx], esp
push rsp
xor cl, r8b
and byte [rax + 4], dl
and byte [rbx + 0x32], al
and al, 0x31
je 0x4019ff
push rax
xor cl, al
je 0x401a4b
jg 0x401a20
cmp esp, esp
ljmp [rdi - 0x68]
cwde
and dword [rcx], ebx
nop
xor byte [rip + 0x406c1908], al
or r9, rax
enter 0x26c9, 0x67
add byte [rcx], 0xfb
rcl dword [rdx + 0x56189066], 1
add ecx, dword [rax - 0x62]
add dword [rcx - 0x4c], ebx
movsb byte [rdi], byte ptr [rsi]
mov ebx, 0x5fffbf5e
fst dword [rax - 0x40f84264]
and byte [rdx], al
add edx, edx
or eax, 0x88fe3f6b
shr byte [rsi], 0x79
out 7, al
mov edi, 0xff020050
leave
sbb byte [r10 + 0x53], dil
fmul dword [rbx]
and dword [rdi], esp
mov eax, 0xff483f07
xchg eax, r11d
ror dword [rsi], -0x7c
or al, 0xc8
fstp dword [rbx - 0x27c0f829]
sbb cl, al
xor byte [rax + 0x722e138e], al
ret 0x9b
pop qword [rdi]
lcall [rdx]
test byte [rdx], cl
fst dword [rax - 0x77]
insb byte [rdi], dx
fadd qword [rdi]
movabs al, byte [0x3f9486c864dc0710]
rol byte [rdi], 0xd9
xchg eax, ecx
sub eax, 0x9d0f2f30
jg 0x401ab3
and byte [rbx + 0x42d0d00c], al
or byte [rax], cl
leave
or edi, dword [rdi]
movabs dword [0x9ff075f84dcce4a], eax
sbb bpl, byte [rcx + 0x50d9dfbf]
jb 0x401ad5
mov edi, 0xce3fb1f0
fmul qword [rax + rcx + 0x547f07e7]
xchg eax, ebx
and dword [rbx], ebx
movabs rdi, 0x7f07733c9177683f
je 0x401b0c
leave
sub dword [rsi], esp
add ebx, dword [rdi]
out 0x22, al
cmp eax, dword [rdi - 0xf2ac0d1]
xchg eax, edx
emms
wait
pop rsp
cmp byte [rdi - 0x45efc01f], 0x21
nop
adc r14b, spl
jg 0x401b39
sbb dword [rax + rax*2 + 0x18], esp
sbb al, ah
add dword [rdx + rsi], ecx
and al, 0x27
adc byte [rax - 0x6f573234], bl
fild word [rdi]
jg 0x401b52
fldenv [rcx - 0x75]
out dx, eax
sub byte [rcx], bh
cmp ebp, dword [rdi + rcx*4 - 0x3e9fc0e0]
xchg byte [r8 + rdi*8 + 0x60], r12b
jg 0x401bad
mov ebx, 0x3f13fe00
adc byte [rdx], 0xf2
and byte [rbx + 0x208b870], al
movabs eax, dword [0x30301737030f0c8e]
cmp byte [rsp], ch
xor al, 0x7f
retf -0x789a
test dword [rdi], eax
adc dword [rbx], edi
or byte [rip + 0x36db7027], ah
jg 0x401b9c
cmp al, 0xeb
xchg eax, ebp
int 0xbb
add byte [rax + 0xc90bf20], ch
fadd dword [rax]
rcr byte [rsi + rbx + 0x167f0961], cl
leave
xchg eax, ebx
cmp byte [rip + 0x9a3], bpl
add byte [rax], al
add byte [rax], al
or dword [rax], eax
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x77f7fdea], ecx
neg dword [rsp + rdx + 0x71]
cmc
fidivr word [rax]
add byte [rax], al
push rdx
or dword [rax], eax
add byte [rax + 0x4900003f], ch
add al, byte [rax]
ret 0xf4
add byte [rax], al
