call 0x400cb8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400ad0
add ebx, ebx
je 0x400a86
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400abe
cmp rbp, -4
ja 0x400abe
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400aa6
add ecx, 4
mov dl, byte [rax]
je 0x400ace
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400abe
ret
cld
pop r11
cmp r8b, 2
je 0x400ae6
jmp 0x400b63
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400af6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400ade
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400b0e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400afb
sub eax, 3
jb 0x400b2c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400b63
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400b53
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400b51
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400b40
cmp rbp, -0xd00
adc ecx, eax
call 0x400a92
jmp 0x400ae6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400c3c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400bda
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400c26
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400bf9
push 0x3a707474
jne 0x400c52
js 0x400c12
jae 0x400c4c
outsb dx, byte cs:[rsi]
je 0x400c0b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400c79
jb 0x400c6b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400c96
jb 0x400ca9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21155c
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21155c
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400b74
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400c9f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400c4d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f0d47
jb 0x400d5f
movsxd rbp, dword [rdi]
jae 0x400d59
insb byte [rdi], dx
js 0x400d5f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400d3f
cmp rsi, rcx
jae 0x400d47
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400d26
cmp al, 0x8f
ja 0x400d26
cmp byte [rsi - 2], 0xf
je 0x400d2c
sub al, 0xe8
jg 0x400d29
push rdi
cmp al, 1
ja 0x400d14
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400d17
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400d44
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400d9b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1219
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400ddf
mov al, 0xa
jmp 0x400ddf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400dbb
inc ebx
mov al, 0
jmp 0x400de3
mov al, 2
jmp 0x400de3
mov al, 3
jmp 0x400de3
mov al, 0x3c
jmp 0x400de3
push rcx
rcr ah, 1
fstp st(7)
jle 0x400e24
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400e36
jg 0x400e28
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a65ab
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400e82
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb5fff
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400e8a
cmp esi, 0x21585055
jne 0x400e8e
jge 0x400e80
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400e83
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400e87
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x400f33
pop rcx
or al, 0x3b
jb 0x400f39
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400eab
jmp 0x400ead
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660dee
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53036
in eax, dx
jg 0x400ee5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x400f2b
mov bh, 0x2a
add edi, 0x10
jmp 0x400f28
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x400f65
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x400fa1
jne 0x400fb8
fstpnce st(6), st(0)
jle 0x400f81
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x400fb7
jrcxz 0x400feb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1af4f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40106a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40102a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582955ff
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40109d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401037
and ecx, 7
or al, 0xeb
jae 0x4010a2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4010d7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401115
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4010ce
push rax
call 0xffffffff868d0dbb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4010d8
std
cmp edi, esi
xchg eax, edi
jle 0x40112d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c956b9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40112b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401119
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401142
js 0x401182
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401214
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad244f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401235
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40123a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20cec
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4011c8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
adc al, 0xb
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
and byte [rax + 0x90], ah
add byte [rax], al
add byte [rax], al
add dil, dil
cmp byte [rdi], bl
add byte [rax], al
push rbx
or dword [rax], eax
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4012ee
je 0x4012f7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4012c0
mov dh, 0x7d
jbe 0x4012bf
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4012f8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x4480006], bl
add byte [rax + 5], ch
nop
nop
invd
add byte [rax - 0x3727fff7], cl
enter 0xa27, 0
and byte [rsi], al
or eax, dword [rax]
clc
in al, 3
in al, 0x13
or al, 0
and byte [rdi], al
or eax, 0x9f6c000
in al, 9
add al, dl
lldt word [rax + rdx]
pop rdi
lahf
ror dl, 1
adc byte [rdi], dl
adc dword [rax], eax
sbb byte [rcx], dl
and byte [r15], r11b
and byte [rdx], dl
add byte [rax + 0x13], dh
add al, bh
add esp, esp
add ecx, eax
sbb eax, 0x8001460
or esp, esp
or esp, esp
adc eax, 0x161000
sbb byte [rbx + rdi + 0x40], ch
mov dh, 0x17
pop rdi
sbb byte [rax], al
in al, 9
in al, 3
sbb dword [rax], eax
sbb al, byte [rax]
cmp byte [rbx + rbx*4 + 0x131b09b2], 1
add al, 0
int1
mov eax, 0xc91d8b2
sbb edi, dword [rdi - 0x649ecde7]
imul edi, dword [rdi + 2], 0x1b1740f0
xor cl, al
nop
or al, 0x40
sbb byte cs:[rbx], 0xa4
jnp 0x4013a2
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
nop
add dword [rdi], edx
jbe 0x40138c
push rbx
jp 0x4013b4
test al, cl
nop
or al, 0xa0
xchg byte [rdi - 0x513de639], dl
movsd dword [rdi], dword ptr [rsi]
xlatb
lodsd eax, dword [rsi]
nop dword [rdx + rsi*4 + 0x49]
sub byte [rdi - 0x38], dh
sub dword [rsi - 0x22de6f9c], eax
sub ch, dl
nop
or dword [rcx + 0x2947bfcd], edi
stc
sbb dword [rsp + rbp + 4], esp
and byte [rcx], al
xor byte [rax + 0x3224360c], dl
xor dword [rbx + 0x45c83243], esi
xor dl, byte [rdi + 1]
pop rdi
sbb edx, dword [rdx + 0x38177634]
nop
and dword [rcx], ebx
xchg eax, esi
cmp al, 0xb8
xchg eax, edx
xchg byte [r8 + rax*2 - 0x27], spl
jb 0x40140e
sbb esi, edi
sbb rax, 0x4320c902
jb 0x40141d
push rax
xor ah, byte [rbx + rax*4]
or al, 0x5c
push rsp
jp 0x40140d
enter 0xc90, 0x58
cdq
pop rsp
or al, 0xc9
and byte [rbx - 0x3f], al
jmp 0xffffffff83644d25
adc dword fs:[rbx], eax
push 0x21906486
cmp dword [rcx + 6], ebp
sbb dword [rdx + 0x74847041], edx
and dword [rcx], ebx
lodsq rax, qword fs:[rsi]
js 0x40142c
xchg dword [rax + rdx*4 - 0x28], esp
jl 0x40140e
add al, 0x80
nop
or al, 0x32
and al, 0x2c
test byte [rax], ah
xor cl, r8b
push rcx
mov byte [rdx + 0x24], bh
or dword [rcx + rcx*8], 0xffffff8c
cmpsb byte [rsi], byte ptr [rdi]
nop
enter 0xc90, 0x32
xchg eax, esp
hlt
xchg eax, edx
xchg eax, ebx
xor bl, byte [r8 + 0x649c051b]
sbb dword [rbx - 0x60], eax
imul esp, dword [rax + rdx*4 + 0x21], 0xa88fa419
sbb dword [rdx - 0x534a79bf], edx
fidiv word [rdx + 0x72]
mov al, 4
mov ah, 0xc
leave
and byte [rbx + 0x2a], al
mov eax, 0x243a4e54
cmp dword [rdi + rdi*2 + 0xcc04706], 0x72
jb 0x4014a9
movsd dword [rdi], dword ptr [rsi]
enter 0x1c08, -0x6e
xchg eax, ebx
or ebx, 6
rcl cl, 1
jb 0x401446
xchg eax, ecx
pushfq
xor byte [rbx + 0x476c9d67], dl
loopne 0x401483
cmp byte [rcx + 0x72], bh
mov al, 0x56
adc byte [rdi], al
sub ecx, dword [rdi]
adc eax, 0x12873dbb
lahf
and dword [rdi], eax
adc cl, byte [rdi + 0x12]
sbb byte [rcx + r9 - 0x1db588d1], bl
cmp eax, 0x73b47c0
add eax, 0x4195d807
in al, dx
ja 0x401512
sbb ecx, 0x9f13c094
jne 0x4014ce
xchg dword [rdi + 6], edx
mov cl, 0x29
mov byte [rdi - 0x11], al
retf 0x373
sbb byte [rax - 0x6e40a5f8], bh
mov dl, 0xe1
pop rbp
pop rcx
add byte [rbp + 0x10101f17], ah
jno 0x4014e5
jbe 0x4014db
or byte [rdi], cl
add ecx, dword [rax + 0x33]
fsubr dword [rdx]
mov r13b, 0x20
mov dl, 0x88
or eax, 0x5faf1761
and dword [rax + rcx - 0x45], ebp
fmul dword [rdi + 0x347617ed]
enter 0x812, -0x67
adc dword [rdi], ecx
and al, 0xd
and dword [rdi - 0x31], esp
out dx, eax
lodsb al, byte [rsi]
xor dword [rbx + 0x74], ecx
adc dword [rdi], -0x80
out 0x70, eax
pop rdi
and byte [rdx - 0x737fcc72], dl
xchg dword [rax], esp
and dword [rax + rcx + 0x1b], ebp
wait
pop rdi
scasb al, byte [rdi]
nop
xchg al, cl
xchg eax, edi
adc byte [rbx], bl
add bh, byte [rdi - 0x26367440]
xchg eax, ebx
and byte [rcx + rax - 0x4d902a29], ah
jge 0x40154f
out 0xe8, eax
add al, byte [rdi + 0x70]
leave
hlt
push 0x9700901
movsb byte [rdi], byte ptr [rsi]
or dword [rdx - 0x2061b13f], ebx
movabs al, byte [0x47b02e10132f650f]
pop di
or edi, ebp
cmp eax, dword [rsi]
sbb esp, dword [rcx + rbp*8 + 0x2e682247]
push rcx
cmp ebp, dword [rax + rdx*4 + 0x41]
sub byte [rdi + 7], al
fldenv [rcx]
cmp dword [rax + 0x38770770], esp
sub dword [rdx - 0x7d], esp
or eax, 0x7c671321
xlatb
movabs al, byte [0x15888d093ec6464]
mov edi, 0xe42f1981
or dword [rdi - 0x7f98f678], esp
and cl, byte [rdx + 0x24308309]
mov byte [rsi - 0x315b39e1], bl
fst dword [rbx + 0x17060f08]
or eax, 0xf56fff6f
add esp, dword [rbx + 0x72]
je 0x401631
mov ah, 0x66
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
pop rbx
sti
movsd dword [rdi], dword ptr [rsi]
test byte [rcx + rcx*2 + 0x53], 0x54
or eax, ebx
jb 0x40163c
imul ebx, dword [edx], 0xdbdb5f06
mov ebx, 0x5f6d74ff
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40160b
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rsi + rsi*8 - 0x49], esi
outsd dx, dword [rsi]
jb 0x40166e
pop rdi
jne 0x401677
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401670
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xfe243538
mov edi, 0x665f05fd
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x40167b
outsb dx, byte gs:[rsi]
je 0x401692
jns 0x401622
add sp, si
mov esi, 0x656d0add
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401662
or eax, 0x84f6ed5f
jne 0x401660
je 0x401663
movsxd rbp, dword [edx - 0x62]
jo 0x4016af
mov dh, 0xb5
idiv bh
pop rdx
push rbx
je 0x401694
xor dword [rcx], edi
jo 0x4016b5
movsxd rsp, dword gs:[rbp + 0x77]
wait
jns 0x4016c2
movabs eax, dword [0x74637572fb06d6ee]
sbb dh, byte [rbx]
jb 0x4016d8
movsxd rsp, dword [rcx + 0x74]
mov dh, 0x9f
jne 0x4016a8
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x380c650f
fcmovnu st(0), st(2)
out dx, al
imul ebp, dword [rcx + 0x6f], 0x394e0e5f
or al, 0x1a
jne 0x4016c6
mov ebx, 0x787eedb6
js 0x4016d5
xor dh, byte [rcx]
mov ch, 0x65
test al, 0x6c
jns 0x4016d3
imul ebx, dword [rdi + 0x33], -0x48
sar esi, 0x70
outsd dx, dword [rsi]
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
or byte [rcx], bl
rcr byte [rdx + 0x37], 0xd8
adc dword [rcx], esi
xchg eax, edi
pop rdi
adc bh, byte [eax + 0x30f6d9bd]
div dword [rax + 0x3e]
pop rbp
adc dh, byte [rcx]
xor eax, 0x6d9dbdb6
js 0x401668
leave
jae 0x401713
xor eax, 0xb0b66153
outsd dx, dword [rsi]
fadd dword [r13 + 0x1e]
test al, 0x73
jne 0x401738
jae 0x4016f7
pop rbp
out dx, eax
cmpsb byte [rsi], byte ptr [rdi]
cmp byte [rdi + 0x69], bl
insd dword [rdi], dx
imul edi, dword [rdx + 0x41], 0x5ac2b637
movabs eax, dword [0x2dac29a520ff010a]
cld
push r11
cmc
imul ecx, dword [rdx + 0x24], 0xdad615b5
xor eax, 0x86a9a562
or eax, 0xb0b61485
outsb dx, byte [rsi]
adc ah, byte [rcx - 0x79]
ret 0x53b6
fdiv dword [rdi + 0x6b]
sbb al, 0x34
adc dword [eax + 0x7b], esi
fild dword [rdx + 0x22]
mov ebx, 0x6de21e65
fisub word [rbx - 0x7b]
push rsp
test byte ss:[rax - 0x54], ch
push rcx
ror byte es:[rdx], 0xb
xchg eax, ecx
adc esp, dword [rdi]
add al, 0xb2
test dword [rax + 0x4f], eax
ja 0x4017a9
mov bl, 0x2b
sub al, 0x27
cmp dword [rsi], esp
or edi, dword [rcx - 0x54]
pop rbp
jb 0x4016cd
xor al, 0x6e
jmp 0x4016e8
jo 0x4016e3
xor dword [rsi], 0x6f291e11
fist dword [rsi + rsi*8 + 0x6f]
jne 0x4017cf
sub dh, byte [rax + 0x18]
jbe 0x4017dd
jbe 0x4017c4
imul eax, ecx, 0x55640e95
xor al, 0x66
sub eax, 0xec11b66a
sub dh, byte [rax]
sub cl, bl
mov ch, 0x55
int 0x15
jo 0x401774
pop rdx
scasb al, byte [rdi]
fnstenv [rdi]
sub byte [rax], dh
cmp dword [rip + 0x34b4c17], eax
fldcw word [rbx + rbp + 0x33]
xchg eax, esp
jb 0x40177e
in al, dx
shl dword [rsi + 0x2731f432], 0x74
jns 0x40180d
and eax, 0x81935a95
xor ah, bh
movsb byte [rdi], byte ptr [rsi]
xchg eax, ebp
movabs rax, qword [0x54ee65e7237426ec]
mov dh, 0x1b
je 0x401817
jb 0x4017df
and eax, 0x4ed90096
jo 0x40181f
outsb dx, byte [rsi]
cdq
insb byte [rdi], dx
jbe 0x40178c
xor al, 0x64
sub byte [rsi - 0x57], cl
lodsb al, byte [rsi]
insd dword [rdi], dx
movabs dword [0xc91324a674186e24], eax
jae 0x401847
xor eax, 0x615c98b7
test dword [rbp - 0x7a], esp
sub dword [rsi], esi
scasb al, byte [rdi]
mov dl, 0xc2
xor ebp, dword [rsi]
js 0x401851
jp 0x40185f
loopne 0x401865
loopne 0x401801
cmp edi, dword [rax]
movabs eax, dword [0x5f01760e1a05b174]
push rbx
and al, 0xbd
movabs byte [0xdf92264bc2b462d], al
jns 0x401821
movabs al, byte [0x661b33054ebedbfb]
xor ch, byte [rdi + 0x6f]
xor al, 0x37
lodsd eax, dword [rsi]
fisub dword [eax + edx*8]
pop rax
imul esi, dword [rip + 0x5cd4d703], 0x7c6b0d7a
push rdx
loopne 0x40182c
div byte [rdi]
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r15b, dil
sbb eax, 0x5f882e34
lodsq rax, qword [rsi]
push rdx
pop r15
xchg eax, ebx
push 0x470b220a
push rbp
int1
xchg eax, ebx
cmp eax, 0x482048d8
push rdx
cmp eax, 0x5346464f
or al, 0xde
push r12
sub r9b, r10b
jbe 0x40187d
ffree st(2)
adc byte [rbx + 0x59448e72], bl
imul byte [rbp + 0x4349f4]
cdq
sbb esi, dword [rsi + 0x40]
pop r15
xor ch, byte [rsi]
mov ah, 0x6d
cmp edx, ecx
add dword [rcx - 0x4d], edx
mov esi, 0x73179363
mov ebx, 0x670f4648
insd dword [rdi], dx
scasd eax, dword [rdi]
cmp dword [rax - 0x2d3b7cb5], ecx
retfq
push rdx
lodsb al, byte [rsi]
or byte [r11 + 0x64], sil
int 0xb4
mov dword [rbx - 0x57], esi
jo 0x401932
out 0x1e, al
ret
and dword [rdi - 0x16], eax
jae 0x401875
and al, 0x34
and qword [r15 - 0x50], rdi
ja 0x401854
xor dword [r13 + 0x76], eax
insb byte [rdi], dx
pop rax
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x46
mov bl, 0x5c
mov byte [rdi - 0x75], ch
xchg eax, ebp
sbb eax, 0x612f25b6
mov edx, 0xcb5dc074
loop 0x401947
xor al, byte [rcx + rcx*2 + 0x54]
pop r15
pop rbx
mov edx, 0xc6c5fc6
pop r9
push rsp
adc dword [rbx], ebx
rcl r12b, 1
jne 0x4018f3
jbe 0x40196e
jno 0x40196b
jne 0x401958
add byte [rsi - 0x427edc92], al
xchg eax, ecx
or byte [rip + 0x2f651c3b], bh
or byte [rbp - 0x49bbb39f], ah
fdivr dword [rdx]
or dword [rsi], ebp
mov eax, 0x68857364
sub al, 6
cmp byte [rcx + 0x5d], dh
sbb dword [rcx + 0x42bfda14], ecx
xchg eax, esi
retf
sbb al, 0xe5
ret 0x687a
imul edi, dword [rbx + 0x54], 0x63
sub edx, dword [rax]
mov dword [rsi*8 + 0x7b4932ed], esi
jb 0x40192a
mov ebx, 0xec4b5270
push rbx
xor al, byte [rdx]
adc eax, 0x6adb2169
mov ah, 0xf4
xchg eax, ebx
add ch, bh
mov bl, 0xb9
mov eax, 0xb4530065
mov ecx, 0x84843a3b
push rdx
jle 0x401912
jae 0x4019f2
xchg byte [rbp + 0x226db6ec], bl
je 0x4019f5
push -0x291a72f7
rcr byte [rsi], 1
or byte [rax + 7], dh
outsb dx, byte [rsi]
outsd dx, dword [rsi]
insd dword [rdi], dx
mov ebx, 0x49db608b
sub eax, 0xda0d6715
jne 0x401951
imul ebp, dword [rip + 0x2d6474b6], 0x1c
add byte [rip - 0x62f6c70f], cl
mov ch, 0x99
jnp 0x401a14
jns 0x401a20
sbb dword [r14 - 0x1a], r14d
int3
mov ah, 0x44
jae 0x4019bf
or al, 0x5f
sbb esi, dword [rbp - 0x7284fad3]
sub byte [rcx], r9b
mov dh, 0x74
xchg ebx, ebx
sahf
loope 0x401a42
and ecx, dword [rdx]
sub al, 0x6f
or byte [rax], cl
jp 0x401984
jnp 0x401a12
add eax, 0xcb6f2496
push 0x106b596c
iretd
push 0x713a0d13
fsubr dword [rsi + rax*8 - 0xb]
xor dword [rbx], ecx
push -0x43
movsd dword [rdi], dword ptr [rsi]
imul ecx, dword [rsi + 0xa4248f], 0x56
pop rsp
int 0x30
wait
imul ecx, dword [rsp + rcx*4 + 4], 0xd954d533
jmp 0x401a0d
add byte [rbx], bl
sal dword es:[rdx], 1
loopne 0x401a6f
outsd dx, dword [rsi]
and al, 0x43
jb 0x401a00
sbb al, 1
or dword [rax + rcx*2], 0x33
and eax, dword [rdi]
push rsp
push rsp
nop
or al, 0xc9
and byte [rax], ah
add al, 0x20
or dword [rcx + rcx*8], 0x31
je 0x401aa7
nop
ja 0x401a79
leave
and al, 0x44
jg 0x401a31
ljmp [rdi + 0x41]
sbb esp, esp
cwde
cwde
xor byte [rcx - 0x7a], ch
nop
add eax, 0x1d0b4e08
mov al, 1
enter -0x37c1, -0x80
add dword [rcx + 0x26], eax
wait
pushfq
sti
sbb byte [rbx + 0x569a4b45], bl
add esi, dword [rdi]
out dx, al
and bh, byte [rcx - 0x3e]
add dword [rsi - 0x41], ebx
mul byte [rsi - 0x2f]
xchg eax, edx
lcall [rdi + 7]
mov edi, 0x72436437
and byte [rdx], al
imul edi, dword [rdi], -0x67
wait
or al, 0x48
dec byte [rax + 0x61bf07]
mov ebx, 0x20050e4
jp 0x401ae5
loopne 0x401aba
xchg dword [rip + 0x3b07d83f], eax
sub al, 0x84
pushfq
inc qword [rdi + rdi + 0x64d166f]
xlatb
add byte [rdx], dh
and byte [rdi + 0x3f], ah
fcomp dword [rax]
add al, byte [rbx + rcx]
ret 0x138e
pop qword cs:[rbx - 0x37]
or dword [rdi + 7], ebp
lcall [rdx]
mov dword [rbx + 0x13], esi
sub ah, byte [rdi + rdi + 0x27]
sbb esi, dword [rdx + 0x10a03921]
xchg eax, esp
sal byte [rax - 0x6d], 0x21
rol byte [rdi], 0x2f
xor ah, byte [rdi + rax*2 - 0x4a]
setge byte [rdi - 0x30]
sub eax, 0xd00c8390
or byte [rbx], dl
and ah, byte [rdi + rax*4]
movabs dword [0x9ff07733928695f], eax
test eax, 0x59b99bf
and edi, ebx
mov edi, 0xc9436422
clc
mov cl, 0x3f
sub byte [rcx], bh
jae 0x401b3c
out 7, eax
jg 0x401b61
int3
xchg byte [r15 + rdi*4 + 0x3f], r13b
jo 0x401b1c
jg 0x401b4b
fld qword [rbp - 0xe]
je 0x401b1d
leave
add ebx, dword [rsi + rbx*8]
movsb byte [rdi], byte ptr [rsi]
cwde
mov ebp, esp
vmlaunch
wait
adc al, 0x77
mov edi, 0x726c9906
loope 0x401b7a
adc byte [rax], dl
add ecx, ebp
xchg byte [rax - 0x1a], al
jg 0x401b4a
pushfq
sbb al, 0x64
nop
sbb byte [rax], bl
loopne 0x401b4d
xor cl, al
nop
adc byte [rax - 0x5cc8cdd3], bl
fild word [rdi]
jg 0x401b0b
and ah, byte [rdi + rax*4 + 7]
out dx, eax
xchg eax, edx
movabs eax, dword [0x402f8603f20ece4]
sbb dword [rax + 7], esp
jg 0x401b7e
xor bl, cl
in al, dx
adc edi, dword [rdi]
xor byte [rax + 0x32], 0x48
enter -0x477d, 8
add cl, byte [rdi]
nop
insb byte [rdi], dx
xchg dword [rdx], edi
add esi, dword [rdi]
xor byte [rsi], dl
ret 0xb0e0
xor al, 0x7f
shr byte [rcx], 0x9b
sbb eax, 0xdb007b11
and edx, dword ss:[rsp + rbx*4 + 0xbb0c7f]
jae 0x401b97
lodsb al, byte [rsi]
push rdi
test al, 0x20
mov edi, 0xe1e0c90
add ecx, dword [rax + 0x61]
or dword [rdi + 0x38], edi
sub eax, 0x4f245800
movabs dword [9], eax
and al, 0xff
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x56f7fdea], ecx
cli
mov dl, 0x44
mov esi, 0x1f387e
add byte [rbx + 9], dl
add byte [rax], al
test al, 0x3f
add byte [rax], al
add al, byte [r8]
hlt
add byte [rax], al
add bh, bh
