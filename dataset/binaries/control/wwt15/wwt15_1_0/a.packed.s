call 0x400df0
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400c08
add ebx, ebx
je 0x400bbe
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400bf6
cmp rbp, -4
ja 0x400bf6
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400bde
add ecx, 4
mov dl, byte [rax]
je 0x400c06
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400bf6
ret
cld
pop r11
cmp r8b, 2
je 0x400c1e
jmp 0x400c9b
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400c2e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400c16
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400c46
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400c33
sub eax, 3
jb 0x400c64
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400c9b
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400c8b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400c89
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400c78
cmp rbp, -0xd00
adc ecx, eax
call 0x400bca
jmp 0x400c1e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400d74
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400d12
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400d5e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400d31
push 0x3a707474
jne 0x400d8a
js 0x400d4a
jae 0x400d84
outsb dx, byte cs:[rsi]
je 0x400d43
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400db1
jb 0x400da3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400dce
jb 0x400de1
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21171c
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21171c
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400cac
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400dd7
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400d85
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f0e7f
jb 0x400e97
movsxd rbp, dword [rdi]
jae 0x400e91
insb byte [rdi], dx
js 0x400e97
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400e77
cmp rsi, rcx
jae 0x400e7f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400e5e
cmp al, 0x8f
ja 0x400e5e
cmp byte [rsi - 2], 0xf
je 0x400e64
sub al, 0xe8
jg 0x400e61
push rdi
cmp al, 1
ja 0x400e4c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400e4f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400e7c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400ed3
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1351
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400f17
mov al, 0xa
jmp 0x400f17
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400ef3
inc ebx
mov al, 0
jmp 0x400f1b
mov al, 2
jmp 0x400f1b
mov al, 3
jmp 0x400f1b
mov al, 0x3c
jmp 0x400f1b
push rcx
rcr ah, 1
fstp st(7)
jle 0x400f5c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400f6e
jg 0x400f60
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a66e3
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400fba
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6137
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400fc2
cmp esi, 0x21585055
jne 0x400fc6
jge 0x400fb8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400fbb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400fbf
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40106b
pop rcx
or al, 0x3b
jb 0x401071
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400fe3
jmp 0x400fe5
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660f26
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5316e
in eax, dx
jg 0x40101d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401063
mov bh, 0x2a
add edi, 0x10
jmp 0x401060
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x40109d
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4010d9
jne 0x4010f0
fstpnce st(6), st(0)
jle 0x4010b9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4010ef
jrcxz 0x401123
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b087
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4011a2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401162
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295737
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4011d5
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40116f
and ecx, 7
or al, 0xeb
jae 0x4011da
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40120f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40124d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401206
push rax
call 0xffffffff868d0ef3
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401210
std
cmp edi, esi
xchg eax, edi
jle 0x401265
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c957f1
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401263
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401251
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40127a
js 0x4012ba
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40134c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2587
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40136d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401372
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20e24
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401300
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
push rsp
or dword [rax], eax
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
and byte [rdx], ah
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
jmp rax
add byte [rax], al
cwde
or dword [rax], eax
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401426
je 0x40142f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4013f8
mov dh, 0x7d
jbe 0x4013f7
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401430
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x4480006], bl
add byte [rsi + 5], ch
nop
nop
invd
add byte [rax + 0x6de00009], dl
enter 0xa27, 0
sub byte [rsi], al
or eax, dword [rdi + rax]
cmp al, 0x81
jl 0x40139e
or al, 0
and byte [rip - 0x7ec14000], cl
cmp al, 0x81
add al, dl
lldt word [rcx + rdx]
add esp, dword [rcx + rdi - 0x40]
pop rdi
adc byte [rcx], dl
ror dl, 1
adc dword [rax], eax
adc dl, byte fs:[rdx]
enter -0x6ff9, -0x61
adc eax, dword [rax]
clc
sbb eax, 0x8001460
enter -0x37ed, 7
adc eax, 0x161000
sbb byte [rsi - 0x80], dh
insb byte [rdi], dx
adc edx, dword [rdi]
pop rdi
sbb byte [rbx + rdx], al
enter -0x27f9, 0x20
sbb dword [rax], eax
sbb dh, byte [rdi]
adc ecx, eax
add byte [rax + 0x1701131b], al
mov cl, 0x23
jns 0x40147e
add cl, dh
dec dword [rbx + rbx]
mov edi, 0x70d336c2
sbb dword [rdi + 2], edi
nop
and dword [rcx], ebx
sbb eax, dword fs:[rax + 0x2e]
test qword [rsi + 0x5f448064], -0x77b56f59
or al, 0x36
add dword [rdi], edx
push rbx
xchg rax, r9
and dword [rcx], ebx
in al, dx
jp 0x4014ef
movabs al, byte [0xd7a597095d843386]
lodsd eax, dword [rsi]
fsub dword [rbx + rdx*4 - 0x72]
movaps xmm6, xmmword [rdi - 0x38]
leave
and byte [rbx + 0x32], al
sub ebp, ebx
sub bh, byte [rbx - 0x15f27c70]
mov edi, 0x47f924ad
jb 0x40145e
sub al, 4
and byte [rcx], al
leave
jb 0x401509
xor dl, byte [rdi]
xor dword [rbx], edi
and al, 0x83
or al, 0x45
xor dl, byte [rdi + 1]
pop rdi
mov al, 0x21
cmp dword [rsi + rsi*2], esi
cmp byte [rcx], bl
xchg eax, edx
xchg byte [r14 + 0x6419b83c], dl
fld dword [rdi + rax*4 + 0x64]
nop
and esi, edi
sbb rax, 0x24320c02
push rax
xor cl, r8b
nop
pop rsp
push rsp
jp 0x401495
or al, 0xc9
and byte [rax - 0x67], bl
pop rsp
nop
or al, 0x32
and al, 0xc1
xchg eax, ebx
xor cl, r8b
jmp 0x4843268b
sbb dword [rdx - 0x6f93c698], edx
and dword [rcx], ebx
jo 0x4014b8
xchg eax, edx
xchg byte [r12 + rsi*2 - 0x53], spl
js 0x4015ae
sbb eax, ebx
jl 0x401545
add al, 0xc9
and byte [rbx + 0x72], al
sub byte [rsp + rax*4], 0x32
and al, 0x83
or al, 0x51
mov byte [rdx + 0x32], bh
enter 0xc90, -0x74
cmpsb byte [rsi], byte ptr [rdi]
nop
or al, 0xc9
and byte [rbx - 0x32], al
xchg eax, esp
hlt
cmp dword [rcx], edi
and al, 0x83
cwde
sbb eax, dword [rip - 0x6f9b7964]
and dword [rbx - 0x60], eax
imul esp, dword [rdi + 0x1c], 0x8fa44192
add eax, 0x3921a8b7
cmp dword [rsi*4 + 0xe4eac05], esp
leave
leave
fiadd word [rip - 0x4bf9fb50]
jb 0x4015fd
sub al, byte [rsi]
mov eax, 0x921c9c54
xchg eax, ebx
mov esp, 0x19c0067f
in al, 0xe4
nop
movsd dword [rdi], dword ptr [rsi]
enter 0x3908, 0x24
retf
rcl cl, 1
jb 0x40155c
adc cl, byte [rdi + rbp*4]
int1
cmp dword [rbx + 0x4d], edi
adc byte [rdi], dl
and dword ds:[rdi], eax
mov edi, dword [rax]
xchg eax, esp
shl byte [rax], 0x15
xchg dword [rdx], esi
cmp byte [rbx], dl
jbe 0x401643
adc dl, byte [eax + eax*2]
jnp 0x401552
test dword [rax], esi
pop rdi
add eax, 0xc195d883
out dx, eax
pop rdi
pop r15
sub dword [rcx + 0x2f752bb1], eax
adc eax, dword [rdi - 0x4cfdac9e]
xchg byte [rdi], dl
outsd dx, dword [rsi]
cdq
xor byte [r8 - 0x51], r14b
or al, 0xd7
adc cl, byte [rcx]
pop rdx
cmpsd dword [rsi], dword ptr [rdi]
mov ebp, 0xa206e6b2
add byte [rsi - 0x53e6f9f9], dh
movsd dword [rdi], dword ptr [rsi]
sbb ch, byte [rdi + 0x7ba042f]
cmp ebx, ecx
jo 0x40164b
adc byte [rcx], dl
add dl, byte [rdi]
or dword [rcx], ebx
in al, dx
mov dl, 0x38
cvtpi2ps xmm3, qword [rdi - 0x36]
xchg byte [rax - 0x26df5bff], dh
in eax, dx
xor bl, al
leave
rcr dword [rdi - 0x4d], 0xa
pop rsp
cmpsd dword [rsi], dword ptr [rdi]
imul dword [rbx]
mov ebx, eax
adc ah, al
outsd dx, dword [rsi]
nop
mov bl, 0x17
fcom dword [rdx]
or byte [rdi], ch
or byte [rdi + 0x3e], bl
sbb dword [rbp + rsi*2 + 0x17], ebp
and al, 9
sbb dh, byte [rdx + 0x76]
nop
xchg eax, ebx
add dword [rsi - 0x3a], ecx
or byte [rdi + 0x5e], bl
adc byte [rsi], dh
test byte [rdx + rbx*2], cl
jns 0x401678
and al, 0x34
enter -0x7f6d, 0x2f
mov eax, 0x334742f
and spl, dl
adc edi, esp
and byte [rcx + 0x43], ah
fcom dword [rax + 0x47f65fe3]
cmp byte [rax - 0x8eff3cc], al
adc byte [rip + 0x486c1909], bl
fild qword [rdi + r11 - 0x61267fe9]
or byte [rdx], dh
add al, byte [rdi + 0x70]
xchg byte [rax + rsi*4 + 0x21], ah
push 0x72760c4b
xor byte [rdi], cl
movabs al, byte [0x8d94d8325b8f6510]
sbb al, byte [rdi + 0x67]
mov ah, 0xc1
mov al, 0x43
imul ecx, dword [rcx], 0x902f85ef
pushfq
sbb eax, 0x75db892
movsb byte [rdi], byte ptr [rsi]
mov bl, 0x43
xor cl, al
xor byte [rax + 0x368f0781], ah
test byte [rbp - 0x38], bl
mov al, 0x24
xchg dword [rdi - 0x64], esi
mov edi, 0x325360c9
sbb dword [rbx + 0x60e4b08f], esp
or dword [rip + 0x2fc017a5], 0xffffffed
add eax, dword [rcx - 0x57561be7]
stosd dword [rdi], eax
enter 0x11c9, 0x1e
ud2
xchg eax, edi
jb 0x4016fe
mov ah, 0xe4
xor cl, byte [r8 + 0xf812fc8]
adc ah, 0x19
in al, dx
int3
push rbp
out 0xfb, eax
cli
jg 0x401774
jb 0x401787
jae 0x401789
jne 0x40177d
movsxd rsi, dword cs:[rbx + 0x5f]
push r10
pop rdi
push r11
push rsp
or edi, edi
lodsd eax, dword [rsi]
std
push rsi
nop
jb 0x401792
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
in eax, dx
in eax, dx
frstor dword [rbp + 0x73]
and dword [rdi + rbp*2 + 0x5f], esp
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4017ad
jne 0x4017c9
add bh, bl
fld xword [rdi + 0x42]
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4017c6
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x6e243538
pop rdi
imul bp, word [rsi + 0x69], 0x7208
jb 0x4017d1
jns 0x4017d1
outsb dx, byte gs:[rsi]
je 0x4017e8
jns 0x401778
or ch, byte [rbp + 0x65]
mov edx, 0x20df7301
jne 0x4017f0
insd dword [rdi], dx
jns 0x4017b8
or eax, 0xff74295f
jbe 0x401808
ret 0x672a
movsxd rbp, dword [rdx - 0x62]
jo 0x401805
pop rdx
push rbx
je 0x4017e6
xor dword [rcx], edi
jo 0x40181b
fistp dword [rdx - 5]
imul esp, dword [rbp + 0x63], 0x2f9b7765
jns 0x401818
movabs eax, dword [0x836b773a74637572]
sbb dh, byte [rbx]
jb 0x40182e
movsxd rsp, dword [rcx + 0x74]
outsb dx, byte [esi]
fcmovne st(0), st(7)
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x380c650f
imul ebp, dword [rcx + 0x6f], 0xf76d6dbf
pop rdi
cmp qword [rdx + r11], r9
jne 0x40181c
js 0x401852
xor r14b, byte [rcx]
lcall [rbp - 0x25]
jbe 0x401797
test al, 0x6c
jns 0x401829
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0xdc19ec45
push rdi
xor byte [rbx], bl
or byte [rcx], bl
adc dword [rbx + 0x60], edi
lodsd eax, dword [rsi]
sbb esi, dword [rcx]
xchg eax, edi
pop rdi
adc dh, byte [eax]
div dword [rsi]
fcomp st(0), st(6)
insb byte [rdi], dx
jo 0x40184b
pop rbp
adc dh, byte [rcx]
xor eax, 0x6c786542
fcmovnu st(0), st(6)
movsd dword [rdi], dword ptr [rsi]
leave
jae 0x401869
xor eax, 0x45b66153
push rbx
fdiv dword [rdi + 0x73a83623]
jne 0x40188e
jae 0x40184d
cmp al, dl
scasb al, byte [rdi]
mov al, 0x77
pop rdi
imul ebp, dword [rbp + 0x69], 0xa37417a
jle 0x401898
lodsd eax, dword [rsi]
add edi, edi
and byte [rbp + 0x414d4345], ah
push rbx
in eax, dx
adc al, 0xd6
cmc
imul ecx, dword [rdx + 0x24], 0xd8a56235
fimul dword [rdx]
imul ebp, dword [rcx + 0x6e610d86], -0x14
or bl, byte [rbx + 0x12]
and dword fs:[rdi + 0x5d1c6b77], eax
fld xword [rcx]
xor al, 0x67
adc dword [rax + 0x7b], esi
ret 0x216d
xchg eax, ecx
loop 0x4018e5
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
test dword [rdx + 0x2a], eax
sbb esp, dword [rdi]
push rcx
xchg eax, ecx
and byte [rbx], dl
test dword [rdx + 0x13], esp
add bl, cl
ja 0x4018b9
ret 0xd9b6
adc eax, 0x790b2639
mov ecx, 0x9beb6e34
jnp 0x401910
mov eax, 0x1e1136c9
sub dword [rdi + 0x75], ebp
jae 0x4018d9
mov dl, 0xb7
insd dword [rdi], dx
sub dh, byte [rax + 0x18]
jbe 0x401933
jbe 0x40191a
imul edx, dword [rbp - 0x6b], 0x34074ae0
sub ax, 0x2a6a
fisttp dword [rax]
jbe 0x4018f9
sub cl, bl
insb byte [rdi], dx
and bl, ch
fcmove st(0), st(5)
adc eax, 0x2837f570
insb byte [rdi], dx
imul ebp, dword [rip + 0x53930d7], 0x17
insb byte [rdi], dx
sub ebx, dword [rcx]
cmpsb byte [rsi], byte ptr [rdi]
movsd dword [rdi], dword ptr [rsi]
xor dword [rbx], 0xf4eb7294
mul byte [rax + 0x53]
xor dword [rdi], esp
je 0x40196b
jo 0x401919
test byte [rdx - 0x53], 0xc9
xor ah, bh
movsb byte [rdi], byte ptr [rsi]
je 0x4018d9
movsq qword [rdi], qword ptr [rsi]
push rax
and esp, edi
sbb esp, dword [rsi + 0x74]
cmpsd dword [rsi], dword ptr [rdi]
xor dh, byte [rdi + 0x2a]
jb 0x401935
and eax, 0x4b206170
sub byte [rbx + rcx*2 + 0x6e], 0x99
push rcx
cmp esp, dword ss:[rsp + rsi + 0x64]
sub byte [rsi - 0x1c], cl
push rsp
mov dh, 0x24
outsb dx, byte [rsi]
sbb byte [rbx + rsi*2 + 0x70], dh
push rbx
xchg eax, edx
mov dword [rip + 0x198665b7], esi
scasb al, byte [rdi]
mov al, 0x29
or dword cs:[rdi + 0x59], edx
loope 0x4019b5
imul ecx, dword [rdx + rdi*2 + 0x703b3b74], 0xa138703c
je 0x4018fb
add dword [rdi + 0x53], ebx
fiadd word [rdx]
or eax, 0xa2bd2407
and bl, ch
movabs dword [0x5a054e19790df915], eax
std
mov ebx, 0x614d34ee
sbb eax, 0x505f2645
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
mov spl, 0x9e
sub dword [rsi - 0x14cbe0f0], 0x7353e135
fstp qword [rax]
imul ebp, dword [rcx + 0x46], 0x8d7c0d7a
fcmovnu st(0), st(7)
or al, 0x5c
movsxd rdx, dword fs:[rcx + 0xf]
xor byte [rcx + 0x69], ch
sar byte [r8 + 0x4f4cfb80], 1
xor r11b, byte [rcx + 0x76be495f]
loop 0x4019ab
ja 0x40195b
push rdx
pop r15
xor r9, qword [rbx]
fld dword [rbx + 0x4e474f2d]
push rbp
and byte [rax + 0x44], cl
push rdx
cmp eax, 0x3edfde0c
push rbx
mov dword [rdi + 0x54], ebx
sub r10b, r12b
ffree st(2)
adc byte fs:[rbx - 0x5209608e], bl
hlt
jbe 0x401a2c
pop rcx
add byte [r10 + 0x4066741b], bpl
push r15
sub cl, dl
dec byte [rcx + 0x42]
pop r15
xor ch, byte [rsi]
add dword [rdx + 0x3e], esp
xchg dword [rbx - 0x484924bc], ecx
ret 0x9763
pop rbx
cvttps2pi mm7, qword [rbp + 0x31]
mov bh, 0x67
insd dword [rdi], dx
mov bl, 0x3d
mov word [rdx - 0x20], cs
push rdx
cmp byte [rax - 0x3f], cl
insb byte [rdi], dx
iretd
jae 0x401a89
jae 0x401a5b
mov edx, 0xfb9616e7
push rcx
jbe 0x401a5b
adc dword [rax], ebp
fild dword [rbp + rax*4 + 0x6c5b5019]
jae 0x4019fd
fisttp qword [rdx + rdx*8]
and dh, byte [rcx + rcx*2]
cwde
xor dword [r13 + 0x76], eax
and al, 0xc1
rcl eax, 1
cld
pop rax
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x37
in eax, dx
insb byte [rdi], dx
sbb byte [rbp + 0x6b], al
fild word [rbp + 0x330d636e]
std
imul ecx, dword fs:[rax], 0xb2578a36
popfq
int 0xde
or ebx, dword [rdi + 0x6e666d8f]
cmp eax, 0x774226b6
test dword [rax + rcx - 0x1e], esi
push rdi
xor dl, byte [rbp + 0x54494480]
pop r15
ret 0x6c5f
retf
movabs dword [0xae1a626154a1430c], eax
test esi, esp
mov edx, 0x8f764f1b
or al, 0x75
xchg eax, edx
mov eax, dword [rbp - 0x31ff597c]
outsb dx, byte [rsi]
cmp eax, 0x474a103b
add ah, byte [rcx - 0x7d]
add al, 0x97
mov dl, 0x77
pop rcx
add byte [rsi - 0x48], al
xor cl, dh
ret 0x6c73
popfq
jae 0x401a8b
push -0x4f6fc5c9
sal byte [rax + 0x58], cl
int 0x63
or qword [r15 + 0xd426e18], rsi
int3
push 0x606a746b
push 0xc56cc0b
sub al, 0x68
jg 0x401b25
push rsi
cmp al, 0x69
mov eax, dword gs:[rax]
add byte [r15 - 0x40], r11b
mov esi, ecx
pop rax
mov ebx, 0x94d8b94f
sub dword [rsi], ecx
and dword [rcx - 0x2a9fcb1d], esp
fmul st(1)
outsb dx, byte [rsi]
jnp 0x401b70
jns 0x401b6c
xor dword [rdx + 7], esp
je 0x401b76
push 0x75b96309
insd dword [rdi], dx
jo 0x401b15
outsb dx, byte [rsi]
outsd dx, dword [rsi]
xchg byte cs:[rsi + 0x28], ch
fdiv dword [rsi + 0x49]
sub eax, 0x40d6715
jne 0x401b7a
mov ebp, dword [rip + 0x2d6492dd]
add byte [rip + 0x6d6738d1], r9b
out 0xde, al
or dword [rcx + rdi*2 + 0x6e], esp
sbb dword [r14 - 0x47], r14d
or dword [rbx], esi
insd dword [rdi], dx
jae 0x401b59
or al, 0x5f
sbb ebx, dword [rbx]
rcr dword [rsi - 0x5d], -0x41
or al, 0x28
or dword [rdx], ebx
je 0x401b2d
mov dh, 0x67
js 0x401bc3
add eax, 0x86f2c0a
jmp 0x401b77
add eax, 0xda6f24ab
push -0x7be529a5
stc
push 0x1c3a0d3d
wait
xor al, 0xe
xor dword [rbx], ecx
push -0x62
movabs dword [0xae5661248fb85ac5], eax
cbw
int 0x69
outsb dx, byte [rsi]
add al, 0x5d
adc al, 2
insb byte [rdi], dx
imul eax, dword [rax - 0x15], 0
add byte [rbx + 0x3f0d0196], cl
add edi, edx
sbb dword [rdx + 0x3f073733], edx
sbb al, 1
and dword [rbx], esp
push rsp
sbb dword [rax + 4], edx
sbb dword [rax + rcx*2 - 0x7a], esp
xor dword [rsp + rsi*2 - 0x44], esi
sbb ecx, dword [rdx + 6]
and al, 0x44
jg 0x401bb1
ljmp [rdi + 0x32]
enter -0x78e0, -0x68
cwde
xor byte [rbx], dh
and al, 0x83
or al, 5
or byte [rsi + 0x20], cl
or dword [rip + 0x3fc80b48], 0xffffffc8
xor bl, cl
in al, 0xec
add byte [rcx], 0xfb
sbb byte [rdx + rbx*2], ch
ror byte [rsi + rdx*2], cl
add ebx, edi
leave
adc ebx, esi
and eax, 0xa1375e01
xchg eax, esi
je 0x401bb2
inc dword [rdi]
and dword [rbx], ebx
xchg eax, edx
mov bl, 0xbf
and byte [rdx], al
fsub qword [rax + rax*2 - 0x46]
imul edi, dword [rdi], -2
nop
add ebx, eax
and eax, 0x50bfcf
add bh, bh
jp 0x401c49
cmp dword [rax + rcx], ebp
push rbx
loopne 0x401c20
and esp, esp
add al, 0x3f
call qword [rbx]
push 0x32
fadd dword [rdi + rdi + 0x1907f42]
cmp dword [rbx + 7], edi
fcomp dword [rax]
shl byte [rax + rdx + 6], 0x8e
adc eax, dword [rsi]
push rax
jb 0x401bfc
and al, 0xbf
lcall [rdx]
and byte [rbx + 0x3f89d90c], al
and byte [rax], ah
xchg byte [rsp], ch
shl dword [rax + 0x694071f], 0x19
enter -0x3f81, -0x40
or byte [rax - 0x7a], cl
or byte fs:[rbp + 0x64190720], bl
rcl al, 1
or dword [rax + r9*2 + 0xe], eax
pop rbx
movabs dword [0x9ff07d726e67250], eax
and dword [rdx - 0x2e], eax
test eax, 0x64073fbf
leave
xor edi, dword [rdi + 0x3fb10144]
cmp dword [rbx - 0x6d], esi
and ah, byte [rdi + 0x4d6c7f07]
xchg byte [rax + rbp - 0x41], ch
sar byte [rdx + 0x7cce4a1], 1
jg 0x401c6e
leave
mov esp, 0x3693149
fild word [rdi]
xor al, 0x17
fnstcw word [rcx]
je 0x37d647e8
mov edi, 0x2e4d932
loope 0x401cf8
adc dl, dl
or eax, 0xe6100c81
jg 0x401cc8
cmp eax, ecx
and byte [rbx], al
sbb byte [rax], bl
loopne 0x401ccb
nop
and dword [rcx], edi
adc byte [rax - 0x7aad919c], bl
xchg dword [rdi], eax
jg 0x401d29
enter 0x5b0e, 7
out dx, eax
leave
fldenv [rcx]
and byte [r15], r15b
clc
or byte [rsi + 0x32], ch
and al, 0x60
jg 0x401d54
mov dl, 0xd9
add eax, 0x803f13fe
and dword [rdi], eax
sbb dword [rax + 0x30], esi
add al, 0xcc
sbb eax, 0x30fc8ea
fbld tbyte [rdi]
adc byte [rsi], al
xchg dword [rbp + 0x4e7f343f], eax
fldlg2
mov al, 7
adc dword [rbx], edi
jge 0x401d4f
sbb dword [rcx + 0xc7f04e4], esp
mov ebx, 0xb2bd6793
add byte [rax + 0xd08bf20], ch
or byte [rbx], bl
or dword [rdi - 0x40], edi
and bh, byte [rcx + 0x72]
mov al, 0x2d
int 9
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rcx], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip + 0x6d080216], ecx
jge 0x401d04
js 0x401d28
adc cl, dl
mov eax, esp
add byte [rax], al
cwde
or dword [rax], eax
add byte [rax + 0x40], dl
add byte [rax], al
add byte [r8], al
add al, 0xf4
add byte [rax], al
add bh, bh
