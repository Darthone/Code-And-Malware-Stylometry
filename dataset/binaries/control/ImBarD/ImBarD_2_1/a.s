xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6060bf
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x400b60
mov eax, 0
test rax, rax
je 0x400b60
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400ba8
mov eax, 0
test rax, rax
je 0x400ba8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x205519], 0
jne 0x400bca
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x205506], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400be0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400bdb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x158
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rip + 0x2054a4]
mov rdx, rax
mov esi, 0x403c70
mov edi, str.input.txt
call sym.imp.freopen
mov rax, qword [rip + 0x205493]
mov rdx, rax
mov esi, 0x403c7d
mov edi, str.output.txt
call sym.imp.freopen
lea rax, [rbp - 0x140]
mov rsi, rax
mov edi, 0x403c8b
mov eax, 0
call sym.imp.scanf
mov dword [rbp - 0x134], 0
mov eax, dword [rbp - 0x140]
cmp dword [rbp - 0x134], eax
jge 0x401629
mov eax, dword [rbp - 0x134]
add eax, 1
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
lea rdx, [rbp - 0x138]
lea rax, [rbp - 0x13c]
mov rsi, rax
mov edi, str._d__d
mov eax, 0
call sym.imp.scanf
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4017b2
mov eax, dword [rbp - 0x13c]
movsxd rcx, eax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xe0]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4017b2
mov eax, dword [rbp - 0x13c]
movsxd rcx, eax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xc0]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
mov dword [rbp - 0x130], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x130], eax
jge 0x400d93
mov eax, dword [rbp - 0x130]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rbx, rax
mov eax, dword [rbp - 0x130]
movsxd rdx, eax
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rdx, rbx
mov rsi, rax
mov edi, str._lld__lld
mov eax, 0
call sym.imp.scanf
add dword [rbp - 0x130], 1
jmp 0x400d2e
lea rax, [rbp - 0x60]
mov rdi, rax
call method.std::allocator_std::vector_longlong_std::allocator_longlong___.allocator
lea rax, [rbp - 0x141]
mov rdi, rax
call 0x4017b2
mov qword [rbp - 0x40], 0
mov eax, dword [rbp - 0x13c]
movsxd rsi, eax
lea rcx, [rbp - 0x141]
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x80]
mov rdi, rax
call 0x4018b0
mov eax, dword [rbp - 0x13c]
movsxd rsi, eax
lea rcx, [rbp - 0x60]
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::vector
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
lea rax, [rbp - 0x141]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
mov dword [rbp - 0x12c], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x12c], eax
jge 0x400ea0
mov dword [rbp - 0x128], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x128], eax
jge 0x400e97
mov eax, dword [rbp - 0x128]
movsxd rbx, eax
mov eax, dword [rbp - 0x12c]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rsi, rax
mov edi, str._lld
mov eax, 0
call sym.imp.scanf
add dword [rbp - 0x128], 1
jmp 0x400e3f
add dword [rbp - 0x12c], 1
jmp 0x400e27
movabs rax, 0xde0b6b3a7640000
mov qword [rbp - 0xf8], rax
mov dword [rbp - 0x124], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x124], eax
jge 0x400f7a
mov dword [rbp - 0x120], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x120], eax
jge 0x400f6e
mov eax, dword [rbp - 0x120]
movsxd rbx, eax
mov eax, dword [rbp - 0x124]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
cmp rax, -1
sete al
test al, al
je 0x400f62
mov eax, dword [rbp - 0x120]
movsxd rbx, eax
mov eax, dword [rbp - 0x124]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
movabs rcx, 0xde0b6b3a7640000
mov qword [rax], rcx
add dword [rbp - 0x120], 1
jmp 0x400ed7
add dword [rbp - 0x124], 1
jmp 0x400ebb
mov dword [rbp - 0x11c], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x11c], eax
jge 0x40116d
mov dword [rbp - 0x118], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x118], eax
jge 0x401161
mov dword [rbp - 0x114], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x114], eax
jge 0x401155
mov eax, dword [rbp - 0x11c]
movsxd rbx, eax
mov eax, dword [rbp - 0x118]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rdx, qword [rax]
movabs rax, 0xde0b6b3a763ffff
cmp rdx, rax
jg 0x401057
mov eax, dword [rbp - 0x114]
movsxd rbx, eax
mov eax, dword [rbp - 0x11c]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rdx, qword [rax]
movabs rax, 0xde0b6b3a763ffff
cmp rdx, rax
jg 0x401057
mov eax, 1
jmp 0x40105c
mov eax, 0
test al, al
je 0x401149
mov eax, dword [rbp - 0x114]
movsxd rbx, eax
mov eax, dword [rbp - 0x118]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov r13, rax
mov eax, dword [rbp - 0x11c]
movsxd rbx, eax
mov eax, dword [rbp - 0x118]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov r12, qword [rax]
mov eax, dword [rbp - 0x114]
movsxd rbx, eax
mov eax, dword [rbp - 0x11c]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
add rax, r12
mov qword [rbp - 0x40], rax
mov eax, dword [rbp - 0x114]
movsxd rbx, eax
mov eax, dword [rbp - 0x118]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::min_longlong_
mov rax, qword [rax]
mov qword [r13], rax
add dword [rbp - 0x114], 1
jmp 0x400fbc
add dword [rbp - 0x118], 1
jmp 0x400fa0
add dword [rbp - 0x11c], 1
jmp 0x400f84
fld xword [rip + 0x2b4d]
fstp xword [rbp - 0xf0]
lea rax, [rbp - 0x141]
mov rdi, rax
call sym.std::allocator_std::vector_longdouble_std::allocator_longdouble___::allocator
lea rax, [rbp - 0x142]
mov rdi, rax
call sym.std::allocator_longdouble_::allocator
fld xword [rbp - 0xf0]
fadd st(0)
fstp xword [rbp - 0x80]
mov eax, dword [rbp - 0x13c]
movsxd rsi, eax
lea rcx, [rbp - 0x142]
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::vector
mov eax, dword [rbp - 0x13c]
movsxd rsi, eax
lea rcx, [rbp - 0x141]
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::_vector
lea rax, [rbp - 0x142]
mov rdi, rax
call sym.std::allocator_longdouble_::_allocator
lea rax, [rbp - 0x141]
mov rdi, rax
call sym.std::allocator_std::vector_longdouble_std::allocator_longdouble___::_allocator
mov dword [rbp - 0x110], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x110], eax
jge 0x401365
mov dword [rbp - 0x10c], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x10c], eax
jge 0x401359
mov eax, dword [rbp - 0x10c]
movsxd rbx, eax
mov eax, dword [rbp - 0x110]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rbx, qword [rax]
mov eax, dword [rbp - 0x110]
movsxd rdx, eax
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
cmp rbx, rax
setle al
test al, al
je 0x40134d
mov eax, dword [rbp - 0x10c]
movsxd rbx, eax
mov eax, dword [rbp - 0x110]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::operator__
mov r12, rax
mov eax, dword [rbp - 0x10c]
movsxd rbx, eax
mov eax, dword [rbp - 0x110]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
mov qword [rbp - 0x170], rax
fild qword [rbp - 0x170]
fstp xword [rbp - 0x170]
mov eax, dword [rbp - 0x110]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
mov qword [rbp - 0x160], rax
fild qword [rbp - 0x160]
fld xword [rbp - 0x170]
fdivrp st(1)
fstp xword [r12]
add dword [rbp - 0x10c], 1
jmp 0x401232
add dword [rbp - 0x110], 1
jmp 0x401216
mov dword [rbp - 0x108], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x108], eax
jge 0x401545
mov dword [rbp - 0x104], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x104], eax
jge 0x401539
mov dword [rbp - 0x100], 0
mov eax, dword [rbp - 0x13c]
cmp dword [rbp - 0x100], eax
jge 0x40152d
mov eax, dword [rbp - 0x108]
movsxd rbx, eax
mov eax, dword [rbp - 0x104]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::operator__
fld xword [rax]
fld xword [rbp - 0xf0]
fucomip st(1)
fstp st(0)
jbe 0x401434
mov eax, dword [rbp - 0x100]
movsxd rbx, eax
mov eax, dword [rbp - 0x108]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::operator__
fld xword [rax]
fld xword [rbp - 0xf0]
fucomip st(1)
fstp st(0)
jbe 0x401434
mov eax, 1
jmp 0x401439
mov eax, 0
test al, al
je 0x401521
mov eax, dword [rbp - 0x100]
movsxd rbx, eax
mov eax, dword [rbp - 0x104]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::operator__
mov r12, rax
mov eax, dword [rbp - 0x108]
movsxd rbx, eax
mov eax, dword [rbp - 0x104]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::operator__
fld xword [rax]
fstp xword [rbp - 0x170]
mov eax, dword [rbp - 0x100]
movsxd rbx, eax
mov eax, dword [rbp - 0x108]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::operator__
fld xword [rax]
fld xword [rbp - 0x170]
faddp st(1)
fstp xword [rbp - 0x40]
mov eax, dword [rbp - 0x100]
movsxd rbx, eax
mov eax, dword [rbp - 0x104]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::operator__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::min_longdouble_
fld xword [rax]
fstp xword [r12]
add dword [rbp - 0x100], 1
jmp 0x4013a7
add dword [rbp - 0x104], 1
jmp 0x40138b
add dword [rbp - 0x108], 1
jmp 0x40136f
mov dword [rbp - 0xfc], 0
mov eax, dword [rbp - 0x138]
cmp dword [rbp - 0xfc], eax
jge 0x4015da
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x80]
mov rsi, rax
mov edi, str._d__d
mov eax, 0
call sym.imp.scanf
mov eax, dword [rbp - 0x80]
sub eax, 1
mov dword [rbp - 0x80], eax
mov eax, dword [rbp - 0x40]
sub eax, 1
mov dword [rbp - 0x40], eax
mov eax, dword [rbp - 0x40]
movsxd rbx, eax
mov eax, dword [rbp - 0x80]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::operator__
fld xword [rax]
fstp qword [rbp - 0x158]
movsd xmm0, qword [rbp - 0x158]
mov edi, str._.10lf
mov eax, 1
call sym.imp.printf
add dword [rbp - 0xfc], 1
jmp 0x40154f
mov edi, 0xa
call sym.imp.putchar
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_vector
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_vector
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
add dword [rbp - 0x134], 1
jmp 0x400c6a
mov eax, 0
mov rcx, qword [rbp - 0x28]
xor rcx, qword fs:[0x28]
je 0x40172f
jmp 0x40172a
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
jmp 0x401710
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
jmp 0x401688
mov rbx, rax
lea rax, [rbp - 0x141]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
jmp 0x401701
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::_vector
jmp 0x4016b9
mov rbx, rax
lea rax, [rbp - 0x142]
mov rdi, rax
call sym.std::allocator_longdouble_::_allocator
lea rax, [rbp - 0x141]
mov rdi, rax
call sym.std::allocator_std::vector_longdouble_std::allocator_longdouble___::_allocator
jmp 0x4016ed
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_vector
jmp 0x4016ed
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_vector
jmp 0x401701
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x158
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x401778
cmp dword [rbp - 8], 0xffff
jne 0x401778
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_longlong_.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_base
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_M_default_initialize
jmp 0x401845
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_longlong__longlong_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_M_fill_initialize
jmp 0x401913
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_fill_initialize
jmp 0x4019b5
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong____std::vector_longlong_std::allocator_longlong___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
cmp rdx, rax
jge 0x401a4e
mov rax, qword [rbp - 0x10]
jmp 0x401a52
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_longdouble_.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longdouble_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::_M_fill_initialize
jmp 0x401aef
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_longdouble__longdouble_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x402110
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longdouble_std::allocator_longdouble___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_M_fill_initialize
jmp 0x401bd5
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::vector_longdouble_std::allocator_longdouble____std::vector_longdouble_std::allocator_longdouble___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 4
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
fld xword [rax]
mov rax, qword [rbp - 8]
fld xword [rax]
fucomip st(1)
fstp st(0)
jbe 0x401c8e
mov rax, qword [rbp - 0x10]
jmp 0x401c92
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_create_storage
jmp 0x401d1f
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_longlong__unsignedlong_longlong_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_longlong__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_longlong__unsignedlong_longlong_longlong_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_create_storage
jmp 0x401ec5
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_std::vector_longlong_std::allocator_longlong____unsignedlong_std::vector_longlong_std::allocator_longlong___std::vector_longlong_std::allocator_longlong___
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong____
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_longdouble_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_M_create_storage
jmp 0x402039
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_longdouble__unsignedlong_longdouble_longdouble_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_longdouble__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_longdouble_std::allocator_longdouble___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_M_create_storage
jmp 0x40219b
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_std::vector_longdouble_std::allocator_longdouble____unsignedlong_std::vector_longdouble_std::allocator_longdouble___std::vector_longdouble_std::allocator_longdouble___
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_longdouble_std::allocator_longdouble____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_longlong_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x40235a
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_longlong__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_longlong__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_longlong__unsignedlong_longlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
lea rdx, [rcx + rax]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x4024be
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_longlong_std::allocator_longlong____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_std::vector_longlong_std::allocator_longlong____unsignedlong_std::vector_longlong_std::allocator_longlong___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::vector_longlong_std::allocator_longlong____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x402962
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 4
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x4025ee
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longdouble__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_longdouble__unsignedlong_longdouble_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_longdouble__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::allocator_std::vector_longdouble_std::allocator_longdouble___.allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longdouble_std::allocator_longdouble___std::allocator_std::vector_longdouble_std::allocator_longdouble____::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
lea rdx, [rcx + rax]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402728
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_longdouble_std::allocator_longdouble____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_std::vector_longdouble_std::allocator_longdouble____unsignedlong_std::vector_longdouble_std::allocator_longdouble___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::vector_longdouble_std::allocator_longdouble____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4027d4
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::allocate
jmp 0x4027d9
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_longlong__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_true_::__uninit_fill_n_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4028c4
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_longlong_std::allocator_longlong____::allocate
jmp 0x4028c9
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_false_::__uninit_fill_n_std::vector_longlong_std::allocator_longlong____unsignedlong_std::vector_longlong_std::allocator_longlong___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x40295f
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_longlong_std::allocator_longlong___
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong___
add qword [rbp - 8], 0x18
jmp 0x40293a
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longdouble_::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4029b4
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longdouble__::allocate
jmp 0x4029b9
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longdouble_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_true_::__uninit_fill_n_longdouble__unsignedlong_longdouble_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longdouble_std::allocator_longdouble___::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x402a7c
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_longdouble_std::allocator_longdouble____::allocate
jmp 0x402a81
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longdouble_std::allocator_longdouble___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_false_::__uninit_fill_n_std::vector_longdouble_std::allocator_longdouble____unsignedlong_std::vector_longdouble_std::allocator_longdouble___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x402b17
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_longdouble_std::allocator_longdouble___
mov rdi, rax
call sym.std::_Destroy_std::vector_longdouble_std::allocator_longdouble___
add qword [rbp - 8], 0x18
jmp 0x402af2
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov qword [rbp - 0x10], 0
lea rdx, [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_longlong__unsignedlong_longlong_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402bc9
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x30], 0
je 0x402ca3
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::vector_longlong_std::allocator_longlong___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::vector_longlong_std::allocator_longlong___std::vector_longlong_std::allocator_longlong__const__
sub qword [rbp - 0x30], 1
add qword [rbp - 0x18], 0x18
jmp 0x402c72
mov rax, qword [rbp - 0x18]
jmp 0x402cdc
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longdouble_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_longdouble__unsignedlong_longdouble_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longdouble_std::allocator_longdouble___::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x30], 0
je 0x402e41
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::vector_longdouble_std::allocator_longdouble___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::vector_longdouble_std::allocator_longdouble___std::vector_longdouble_std::allocator_longdouble__const__
sub qword [rbp - 0x30], 1
add qword [rbp - 0x18], 0x18
jmp 0x402e10
mov rax, qword [rbp - 0x18]
jmp 0x402e7a
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_longdouble_std::allocator_longdouble____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::_vector
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402eda
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_longlong__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402f54
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::vector_longlong_std::allocator_longlong__const__
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x18
call 0x401790
mov rbx, rax
test rbx, rbx
je 0x402fe0
mov rsi, r13
mov rdi, rbx
call method.std::vector_longlong_std::allocator_longlong__.vector
jmp 0x402fe0
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x4017a2
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longdouble_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40301c
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 4
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_longdouble__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_longdouble__unsignedlong_longdouble_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longdouble_std::allocator_longdouble___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x403096
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::vector_longdouble_std::allocator_longdouble__const__
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x18
call 0x401790
mov rbx, rax
test rbx, rbx
je 0x403122
mov rsi, r13
mov rdi, rbx
call method.std::vector_longdouble_std::allocator_longdouble__.vector
jmp 0x403122
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x4017a2
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_longlong__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x10], rax
cmp qword [rbp - 0x10], 0
je 0x40319d
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 8]
mov qword [rax], rdx
sub qword [rbp - 0x10], 1
add qword [rbp - 0x18], 8
jmp 0x40317f
mov rax, qword [rbp - 0x18]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xaaaaaaaaaaaaaaa
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_longlong_std::allocator_longlong__._M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_longlong__::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__longlong_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x4032c0
jmp 0x4032bb
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xfffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_longdouble__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
fld xword [rax]
fstp xword [rbp - 0x10]
mov rax, qword [rbp - 0x30]
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x18], 0
je 0x403337
mov rax, qword [rbp - 0x28]
fld xword [rbp - 0x10]
fstp xword [rax]
sub qword [rbp - 0x18], 1
add qword [rbp - 0x28], 0x10
jmp 0x40331b
mov rax, qword [rbp - 0x28]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xaaaaaaaaaaaaaaa
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_longdouble_std::allocator_longdouble__._M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_longdouble__::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_longdouble_::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::_M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longdouble_std::allocator_longdouble__::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____longdouble__longdouble_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x40345a
jmp 0x403455
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_longdouble_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longdouble_std::allocator_longdouble__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4034e4
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403545
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40359a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longdouble__::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40364c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4036ad
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403702
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____longdouble__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_longlong_::allocator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x402962
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____longdouble__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____longdouble__
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____longdouble__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_longlong__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_longlongconst__longlong__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_longdouble__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_longdoubleconst__longdouble__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_longlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_longdouble_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x403b19
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longdoubleconst__std::vector_longdouble_std::allocator_longdouble___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x403b9a
mov rax, qword [rbp - 8]
shl rax, 4
mov rdx, rax
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
shl rax, 4
mov rdx, rax
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop word [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x202206]
push rbp
lea rbp, [rip + 0x20220e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x403c26
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x403c10
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0x3b9a
add byte [rax], al
add byte [rax], al
jb 0x403ce6
add byte [rcx + 0x6e], ch
imul ebp, dword [rsi + 0x70], 0x742e7475
js 0x403cf0
add byte [rdi + 0x74], dh
add byte [rdi + 0x75], ch
outsd dx, dword [rsi]
jne 0x403cf7
jo 0x403cfa
je 0x403cb5
je 0x403d01
je 0x403c8b
and eax, 0x61430064
jae 0x403cf7
and byte [rbx], ah
and eax, 0x25003a64
and eax, 0x64252064
add byte [rip + 0x20646c6c], ah
and eax, 0x20646c6c
and eax, 0x646c6c
and eax, 0x646c6c
and byte [rip + 0x6c30312e], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x403cff
imul ecx, dword [rbx], -0x22
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
in al, dx
add eax, 0xbc0000
add byte [rax], al
int3
cmp byte [rsi], al
add byte [rax], al
xor dh, cl
dec dword [rax]
add byte [rax], al
iretd
inc eax
add byte [rax], al
insd dword [rdi], dx
dec dword [rax + 0x1e]
add byte [rax], al
stosd dword [rdi], eax
ljmp [rax + 0x1e]
add byte [rax], al
rcr dl, 0xff
jmp qword [rax + 6]
add byte [rax], al
rcr dl, cl
inc dword [rax - 0x1dfffffa]
push rax
add byte [rax], al
call qword [rax]
add byte [rax], al
sbb bl, bl
push qword [rax]
add byte [rax], al
jl 0x403d09
lcall [rax + 7]
add byte [rax], al
rcr bl, 0xff
inc dword [rax - 0x1ffffff9]
jmp qword [rax + 0x4a000007]
fdiv st(7), st(0)
dec eax
add byte [rax], al
fdiv st(7), st(0)
call 0xffffffff82403d5c
fdiv st(7), st(0)
dec dword [rax]
or byte [rax], al
add ah, ch
fdiv st(7), st(0)
push qword [rax]
or byte [rax], al
add byte [rax], dh
lcall [rax + 8]
add byte [rax], al
pop rcx
js 0x403d7a
add byte [rax], al
test ch, bl
lcall [rax - 0x5ffffff8]
mov eax, 0xbc000008
fmul dword [rax]
add byte [rax], al
fdivp st(7)
inc dword [rax]
or dword [rax], eax
add byte [rdx - 0x22], ch
ljmp [rax]
or dword [rax], eax
add byte [rsi + 0x48ffffde], al
or dword [rax], eax
add byte [rdx + 0x68ffffde], ah
or dword [rax], eax
add byte [rdi + rbx*8], cl
call qword [rax + 0x50000009]
mov eax, 0x7a000009
fmul dword [rcx]
add byte [rax], al
clc
or dword [rax], eax
add ah, al
lcall [rax]
or al, byte [rax]
add al, dl
cmp byte [rdx], cl
add byte [rax], al
fcomp st(0), st(7)
lcall [rax + 0xa]
add byte [rax], al
clc
js 0x403df4
add byte [rax], al
push rsi
loopne 0x403dee
jmp qword [rax - 0x59fffff6]
loopne 0x403df6
dec eax
or al, byte [rax]
add dl, ch
loopne 0x403dfe
call 0xfffffffff8403e0f
loopne 0x403e06
dec dword [rax]
or eax, dword [rax]
add byte [rdx], ah
loope 0x403e0e
ljmp [rax]
or eax, dword [rax]
add byte [rdx - 0x1f], ch
dec dword [rax + 0xb]
add byte [rax], al
jbe 0x403dff
ljmp [rax + 0xb]
add byte [rax], al
loope 0x403e26
dec dword [rax - 0x61fffff5]
loope 0x403e2e
ljmp [rax - 0x3fffff5]
loope 0x403e36
call rax
or eax, dword [rax]
add byte [rsi - 0x1e], bl
clc
or eax, dword [rax]
add byte [rsi + 0x18ffffe2], ah
or al, 0
add byte [rdx + 0xc38ffff], dh
add byte [rax], al
fsubrp st(2)
lcall [rax + 0xc]
add byte [rax], al
loop 0x403e5e
js 0x403e6e
add byte [rax], al
mul dl
lcall [rax + 0x1200000c]
jrcxz 0x403e6e
mov eax, 0x7000000c
jrcxz 0x403e76
jmp rax
or al, 0
add al, al
jrcxz 0x403e7e
dec dword [rax]
or eax, 0xe4080000
ljmp [rax]
or eax, 0xe4160000
dec dword [rax + 0xd]
add byte [rax], al
in al, 0xff
ljmp [rax + 0xd]
add byte [rax], al
in al, 0xff
dec dword [rax + 0x5800000d]
in al, 0xff
ljmp [rax + 0x7400000d]
in al, 0xff
dec eax
or eax, 0xe4d20000
push rax
or eax, 0xe5340000
lcall [rax]
add byte [rax], al
jl 0x403eab
cmp byte [rsi], cl
add byte [rax], al
mov ah, ch
lcall [rax + 0xe]
add byte [rax], al
mov ah, 0xe5
js 0x403ee8
add byte [rax], al
in eax, 0xff
lcall [rax + 0x5800000e]
out 0xff, al
mov eax, 0x8d00000e
out 0xff, al
fmul dword [rsi]
add byte [rax], al
mov dh, 0xe6
clc
add byte [rax], al
fsubr st(6), st(0)
lcall [rax]
sldt word [rax]
out 0xff, eax
cmp byte [rdi], cl
add byte [rax], al
pop rax
out 0xff, eax
lcall [rax + 0xf]
add byte [rax], al
mov esp, 0x78ffffe7
sldt word [rax]
int1
out 0xff, eax
lcall [rax + 0x2200000f]
call 0xff93f29
add byte [rax], al
call 0x10193f31
add byte [rax], al
xchg eax, edx
call 0x10393f39
add byte [rax], al
in al, dx
call 0x10593f41
add byte [rax], al
and ecx, ebp
cmp byte [rax], dl
add byte [rax], al
push rdx
jmp 0x10993f51
add byte [rax], al
js 0x403f3f
js 0x403f6a
add byte [rax], al
ret 0xffe9
lcall [rax + 0x26000010]
mov eax, 0x5b000010
fcom dword [rax]
add byte [rax], al
mov edx, gs
clc
adc byte [rax], al
add byte [rdx + 0x18ffffea], dh
adc dword [rax], eax
add al, bl
cmp byte [rcx], dl
add byte [rax], al
or ebp, ebx
lcall [rax + 0x11]
add byte [rax], al
cmp ebx, ebp
js 0x403fab
add byte [rax], al
jmp 0x403f9e
lcall [rax + 0x71000011]
jmp 0x403fa6
mov eax, 0xa2000011
jmp 0x403fae
fcom dword [rcx]
add byte [rax], al
enter -0x15, -1
clc
adc dword [rax], eax
add bl, bh
jmp 0x403fbe
lcall [rax]
adc al, byte [rax]
add byte [rcx], ch
in al, dx
cmp byte [rdx], dl
add byte [rax], al
pop rdx
in al, dx
lcall [rax + 0x12]
add byte [rax], al
xchg eax, edx
in al, dx
js 0x403fec
add byte [rax], al
mov eax, 0x98ffffec
adc al, byte [rax]
add bl, ch
in al, dx
mov eax, 0x19000012
in eax, dx
fcom dword [rdx]
add byte [rax], al
in eax, dx
clc
adc al, byte [rax]
add byte [rdx - 0x13], bl
lcall [rax]
adc eax, dword [rax]
add byte [rax + 0x38ffffed], al
adc eax, dword [rax]
add byte [rbx + 0x58ffffed], dh
adc eax, dword [rax]
add cl, ah
in eax, dx
js 0x40402d
add byte [rax], al
adc ch, dh
lcall [rax + 0x4a000013]
out dx, al
mov eax, 0x59000013
out dx, al
fcom dword [rbx]
add byte [rax], al
test dh, ch
clc
adc eax, dword [rax]
add byte [rdi + 0x18ffffee], ah
adc al, 0
add bl, bh
out dx, al
cmp byte [rax + rax], dl
add byte [rax], ch
out dx, eax
lcall [rax + 0x14]
add byte [rax], al
out dx, eax
js 0x40406e
add byte [rax], al
out dx, eax
lcall [rax - 0x7affffec]
out dx, eax
mov eax, 0x13000014
jmp rax
adc al, 0
add byte [rcx], ah
inc dword [rax]
adc eax, 0xf03c0000
jmp qword [rax]
adc eax, 0xf04b0000
inc dword [rax + 0x15]
add byte [rax], al
jbe 0x40407e
jmp qword [rax + 0x15]
add byte [rax], al
cdq
inc dword [rax - 0x39ffffeb]
jmp qword [rax - 0x2affffeb]
inc eax
adc eax, 0xf1000000
jmp rax
adc eax, 0xf1230000
inc dword [rax]
add byte [rax], al
mov cl, 0xf1
ljmp [rax]
add byte [rax], al
mov edi, 0x48fffff1
add byte [rax], al
int1
ljmp [rax + 0x16]
add byte [rax], al
sbb al, 0xf2
dec dword [rax + 0x54000016]
ljmp [rax - 0x60ffffea]
dec eax
add byte [rax], al
lodsd eax, dword [rsi]
call 0x1c40410b
lcall [rax]
add byte [rax], al
pop rsi
cmp byte [rdi], dl
add byte [rax], al
xchg eax, esi
lcall [rax + 0x17]
add byte [rax], al
loope 0x404101
js 0x404129
add byte [rax], al
out dx, eax
lcall [rax + 0x5e000017]
hlt
dec eax
add byte [rax], al
jb 0x40411a
call 0xffffffff8c404144
hlt
dec dword [rax]
sbb byte [rax], al
add ah, dl
hlt
ljmp [rax]
sbb byte [rax], al
add al, ch
hlt
dec dword [rax + 0x18]
add byte [rax], al
cld
cmc
js 0x404162
add byte [rax], al
adc dh, dh
lcall [rax + 0x2a000018]
idiv bh
mov eax, 0x6e000018
idiv bh
fcomp dword [rax]
add byte [rax], al
idiv bh
clc
sbb byte [rax], al
add byte [rbp + 0x28fffff7], dl
sbb dword [rax], eax
add byte [rdi + rsi*8 + 0x1948ffff], ah
add byte [rax], al
retf -9
ljmp [rax + 0x19]
add byte [rax], al
clc
dec dword [rax + 0x24000019]
clc
ljmp [rax + 0x78000019]
clc
dec eax
sbb dword [rax], eax
add ah, cl
clc
call 0xfffffffffd4041be
clc
dec dword [rax]
sbb al, byte [rax]
add byte [rcx + rdi*8], cl
ljmp [rax]
sbb al, byte [rax]
add byte [rdx], dh
stc
dec dword [rax + 0x1a]
add byte [rax], al
jle 0x4041b7
ljmp [rax + 0x1a]
add byte [rax], al
stc
dec dword [rax - 0x1fffffe6]
stc
ljmp [rax + 0x3400001a]
cli
dec eax
sbb al, byte [rax]
add byte [rbp - 6], ah
call 0xffffffff8e4041ff
cli
dec dword [rax]
sbb eax, dword [rax]
add byte [rbx + 0x28fffffa], ch
sbb eax, dword [rax]
add ah, bl
cli
dec dword [rax + 0x1b]
add byte [rax], al
sti
ljmp [rax + 0x1b]
add byte [rax], al
and edi, ebx
dec dword [rax + 0x5400001b]
sti
ljmp [rax - 0x7effffe5]
sti
dec eax
sbb eax, dword [rax]
add byte [rsi - 0x17000005], ch
sbb eax, dword [rax]
add dl, bh
sti
call qword [rax]
sbb al, 0
add byte [rsi - 4], al
cmp byte [rax + rax], bl
add byte [rax - 4], ah
lcall [rax + 0x1c]
add byte [rax], al
mov eax, 0x80fffffc
sbb al, 0
add dl, dl
cld
jmp qword [rax + 0x2a00001c]
std
dec eax
sbb al, 0
add byte [rax], bh
std
call 0x52404279
std
dec dword [rax]
sbb eax, 0xfd830000
ljmp [rax]
sbb eax, 0xfd910000
dec dword [rax + 0x1d]
add byte [rax], al
stosd dword [rdi], eax
std
ljmp [rax + 0x1d]
add byte [rax], al
fdiv st(5), st(0)
dec dword [rax - 0x6ffffe3]
std
ljmp [rax + 0x5e00001d]
dec eax
sbb eax, 0xfe7b0000
call 0xffffffffde4042ba
dec dword [rax]
add byte [rax], al
in al, dx
ljmp [rax]
add byte [rax], al
add bh, bh
dec dword [rax + 0x7000001e]
call rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4042df
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, cl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x40430f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov al, 0xc6
push qword [rax]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rax - 0x2c], bl
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rdx - 0x2c], cl
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x404391
add eax, eax
or al, byte [rax]
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x2c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
pop rsi
enter -1, 0x47
or eax, dword [rax]
add byte [rsp + rdi*4], al
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea r8, [rbx]
mov word [rbx + rax*4], es
add eax, 0xc0b3603
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add dl, ch
sar edi, cl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
add dh, ah
sar edi, cl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
add dl, ah
sar edi, cl
jmp qword [rdx]
add byte [rax], al
add al, 1
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0x1c000000
inc dword [rax + rax]
add byte [rcx + rdx], al
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x404453
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword fs:[rax], eax
add byte [rax], bh
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 1
add byte [rax], al
cmp ah, dl
ljmp [rdx]
add byte [rax], al
add al, 0x15
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add dword [rax], eax
add byte [rdx - 0x2c], bh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add dword [rax], eax
add byte [rsi - 0x2c], dh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add dword [rax], eax
add byte [rdx - 0x2c], dh
ljmp [rdx]
add byte [rax], al
add al, 0x25
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rsp + rdx*8 + 0x44ffff], dh
add byte [rax], al
add al, 0x35
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x40452b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 2
add byte [rax], al
rcl ah, 1
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add al, byte [rax]
add cl, bl
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404570
add byte [rax], al
in al, 0xd4
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add al, byte [rax]
add al, ah
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 2
add byte [rax], al
fcom st(0), st(4)
ljmp [rdx]
add byte [rax], al
add al, 0x39
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rsi], bl
inc dword [rax + rax]
add byte [rcx + rcx*2], al
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x4045fb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 3
add byte [rax], al
cmp dl, ch
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 3
add byte [rax], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add al, byte [rax]
add byte [rdx], dh
ljmp [rdx]
add byte [rax], al
add al, 0x4d
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
add al, byte [rax]
add byte [rbp + rdx*8 - 1], dh
inc dword [rax + rax]
add byte [rbx*2 + 0x4100405c], al
adc byte [rsi + 0x60d4302], al
jg 0x40468b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add eax, dword [rax]
add byte [rax + 0x29ffffd5], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x9a000003
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add eax, dword [rax]
add byte [rbp + rdx*8 + 0xbffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 4
add byte [rax], al
nop
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 4
add byte [rax], al
jl 0x404707
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
js 0x404727
lcall [rsi]
add byte [rax], al
add al, 0x61
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 4
add byte [rax], al
scasb al, byte [rdi]
call qword [rax]
add byte [rax], al
add al, 0x6d
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
add al, 0
add dh, dl
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x4047bf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add al, 0
add dl, bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add al, 0
add al, ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 5
add byte [rax], al
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 5
add byte [rax], al
sbb dl, dh
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add rax, -0x29fa0000
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add eax, 0xd5f20000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 5
add byte [rax], al
out dx, al
lcall [rsi]
add byte [rax], al
add al, 0x71
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 5
add byte [rax], al
and al, 0xd6
jmp qword [rcx]
add byte [rax], al
add al, 0x7d
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rip - 0x29a20000]
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add eax, 0xd6860000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 6
add byte [rax], al
je 0x4048e8
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 6
add byte [rax], al
jle 0x404908
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
push -0x2a
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404974
add byte [rax], al
push rsi
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 6
add byte [rax], al
push rdx
lcall [rsi]
add byte [rax], al
add al, 0x81
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
mov dh, dl
call qword [rax]
add byte [rax], al
add al, 0x8d
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
add byte [rax], al
mov al, 0xd6
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 7
add byte [rax], al
fcom st(6)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 7
add byte [rax], al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
rcl dh, 1
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
mov esp, 0xbffffd6
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], es
add byte [rax], al
test al, 0xd6
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 7
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
lcall [rsi]
add byte [rax], al
add al, 0x91
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
add byte [rax], al
fcmovbe st(0), st(6)
jmp qword [rcx]
add byte [rax], al
add al, 0x9d
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add byte [rax], al
adc al, 0xd7
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 8
add byte [rax], al
cmp al, 0xd7
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 8
add byte [rax], al
sub dl, bh
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or byte [rax], al
add byte [rdi + rdx*8], dh
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x404b76
add byte [rax], al
pop rsi
xlatb
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
or byte [rax], al
add byte [rax + 0x35ffffd7], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jo 0x404baf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xad000008
xlatb
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rax]
add byte [rax], al
mov dh, 0xd7
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or byte [rax], al
add byte [rdi + rdx*8 + 0x31ffff], bh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 9
add byte [rax], al
xlatb
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 9
add byte [rax], al
clc
xlatb
jmp qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
or dword [rax], eax
add byte [rax + rbx*8], bh
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404c6f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404c77
add byte [rax], al
push rcx
fdivr st(7)
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or dword [rax], eax
add byte [rdx - 0x28], ah
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x68000009
fdivr st(7)
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fmul qword [rcx]
add byte [rax], al
xchg eax, edx
fdivr st(7)
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
or dword [rax], eax
add ah, cl
fdivr st(7)
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404d0f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xa
add byte [rax], al
loope 0x404cea
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xa
add byte [rax], al
fdivr st(7)
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or al, byte [rax]
add al, bh
fdivr st(7)
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x404d78
add byte [rax], al
and bl, cl
jmp qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
or al, byte [rax]
add byte [rsi - 0x27], ah
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404daf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x7b00000a
fcos
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rdx]
add byte [rax], al
mov ecx, ds
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or al, byte [rax]
add byte [rdx + 0x26ffffd9], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xb
add byte [rax], al
cwde
fcos
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xb
add byte [rax], al
stosd dword [rdi], eax
fcos
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
pop rsp
or eax, dword [rax]
add byte [rcx + 0x29ffffd9], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404e79
add byte [rax], al
ret 0xffd9
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or eax, dword [rax]
add byte [rcx + 0x31ffffd9], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xc200000b
fcos
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rbx]
add byte [rax], al
enter -0x27, -1
xor eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or eax, dword [rax]
add bl, bl
fcos
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
sbb al, 0xc
add byte [rax], al
jmp 0x32404eee
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xc
add byte [rax], al
cli
fcos
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x404f4f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or al, 0
add byte [rdx], dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404f7a
add byte [rax], al
sbb dl, bl
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or al, 0
add byte [rbx], ch
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
mov esp, 0x3900000c
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rax + rax]
add byte [rdx - 0x26], cl
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or al, 0
add byte [rdx], bh
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xd
add byte [rax], al
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xd
add byte [rax], al
push rbx
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
pop rsp
or eax, 0xda610000
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40507b
add byte [rax], al
jb 0x40504c
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x40508f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or eax, 0xda8a0000
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x7900000d
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rip - 0x257c0000]
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or eax, 0xda870000
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0xe
add byte [rax], al
mov ebx, 0x2dffffda
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xe
add byte [rax], al
enter -0x26, -1
sldt word [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
mov bh, 0xda
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40517c
add byte [rax], al
ret 0xffda
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0xe
add byte [rax], al
dec dword [rsi + 0x4000000]
movsb byte [rdi], byte ptr [rsi]
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
test byte [rdi + rax], cl
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
sub ebx, ebx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xe
add byte [rax], al
sbb ebx, ebx
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xf
add byte [rax], al
adc al, 0xdb
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xf
add byte [rax], al
add ebx, ebx
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word fs:[rax]
adc ebx, ebx
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], cl
add byte [rax], al
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sldt word [rax]
or eax, 0x2affffdb
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
sbb bl, bl
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sldt word fs:[rax]
sbb ebx, ebx
dec dword [rsi + 0x4000000]
mov esp, 0x4100405c
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
test byte [rdi + rax], cl
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x10
add byte [rax], al
sbb ebx, 0xeffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x10
add byte [rax], al
outsd dx, dword [rsi]
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc byte [rax], r8b
add byte [rdx - 0x25], ch
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x40535f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc byte [rax], al
add byte [rbx + rbx*8 + 0x38ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x40537f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax], ss
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
adc byte [rax], al
add bh, cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
adc byte [rax], r8b
add byte [rbp + 0x6fffffdb], bh
add byte [rax], al
add byte [rsp + rdx*8], al
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc byte [rax], al
add ah, bh
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x40540f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x11
add byte [rax], al
fdiv st(7), st(0)
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x40542f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x11
add byte [rax], al
fdiv st(7), st(0)
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
adc dword [rax], eax
add byte [rcx - 0x24], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
cld
adc byte [rax], al
add byte [rdi - 0x24], cl
ljmp [rdi]
add byte [rax], al
add al, 0xe0
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc dword [rax], eax
add byte [rsi + 0x14ffffdc], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc dword [rax], eax
add byte [rdx + 0x1affffdc], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc dword [rax], eax
add byte [rsp + rbx*8 - 1], bh
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0x12
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
fdiv st(7), st(0)
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc dword [rax], eax
add byte [rax + 0x13ffffdc], bl
add dword [rax], eax
add byte [rsp + rbp*8], al
pop rsp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
adc al, byte [rax]
add byte [rbp + rbx*8 - 1], bh
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x405580
add byte [rax], al
jo 0x40554f
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc al, byte [rax]
add byte [rdx - 0x23], ch
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x4055af
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x8e000012
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
pop rsp
adc al, byte [rax]
add byte [rdx + 0x13ffffdd], al
add dword [rax], eax
add byte [rsp + rax], al
pop rbp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0x13
add byte [rax], al
fdivp st(7)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x13
add byte [rax], al
push rsp
fdivp st(7)
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc r8, qword [rax]
add byte [rdx - 0x22], bl
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
adc eax, dword [rax]
add byte [rsi + 0xeffffde], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rbx], ss
add byte [rax], al
je 0x405660
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
adc eax, dword [rax]
add byte [rax + 0x54ffffde], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
adc eax, dword [rax]
add ah, bl
fdivp st(7)
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc eax, dword [rax]
add ch, ch
fdivp st(7)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x14
add byte [rax], al
fcomp st(0), st(6)
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x14
add byte [rax], al
loop 0x405700
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 0
add byte [rsi], cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc al, 0
add ah, bh
fdivp st(7)
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rax + rax], ss
add byte [rax], dh
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
adc al, 0
add byte [rdi + rbx*8 - 1], ah
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc al, 0
add byte [rbp - 0x21], dh
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc al, 0
add byte [rsi - 0x21], bh
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x15
add byte [rax], al
jnp 0x4057e1
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x15
add byte [rax], al
mov edi, ds
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc rax, -0x206a0000
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc eax, 0xdf930000
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rip - 0x205c0000], ss
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc eax, 0xdfb10000
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
and al, 0
add byte [rax], al
int3
adc eax, 0xdfbe0000
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
adc eax, 0xdfe20000
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x16
add byte [rax], al
loopne 0x405912
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 0x16
add byte [rax], al
add al, ah
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
xor al, ah
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rsi], dl
add byte [rax], al
sub ah, al
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
pop rdx
loopne 0x4059a2
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
loopne 0x4059c2
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
loopne 0x4059e2
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x17
add byte [rax], al
push rbx
loopne 0x405a02
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x17
add byte [rax], al
loopne 0x405a22
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
cmp esp, eax
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
loopne 0x405a62
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], ss
add byte [rax], al
loopne 0x405a82
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
mov fs, eax
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
mov esp, eax
jmp qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
add byte [rax], al
loopne 0x405ae2
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x18
add byte [rax], al
mov esp, 0xeffffe0
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x18
add byte [rax], al
sbb eax, 0x3effffbc
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x405b3f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb byte [rax], r8b
add byte [rbx], bh
mov esp, 0x15ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax + rbx], ch
add byte [rax - 0x20], dh
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x405b9a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
mov ah, 0x18
add byte [rax], al
cwde
loopne 0x405baa
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
xor ecx, dword [r13 - 0x19ffffff]
add dword [rip - 0x62ffeb30], eax
add al, byte [rip - 0x70ffeb16]
add eax, dword [rip - 0x24ffe978]
add eax, dword [rip - 0x4ffea71]
add eax, dword [rip - 0x6cffeb02]
add eax, 0x15f405
or eax, dword [rip - 0x18ffea40]
or eax, dword [rip - 0x3ffea51]
adc dh, byte [rdx - 0x1d]
adc eax, 0xcf14e500
add dword [rax], eax
add bh, bh
inc dword [rcx]
or al, 0x27
add eax, 0x53a0000
add byte [r14 + 5], dl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add byte [rax], al
inc dword [rbx]
adc eax, 0x53d0d01
push rsp
add dword [rdx + 0xa], ebp
je 0x405cb1
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rbx]
adc eax, 0x53d0d01
push rsp
add dword [rdx + 0xa], ebp
je 0x405cc9
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rbx], 1
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x17], bh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rsp + rdi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], ch
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 1
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dh
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4007], ah
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
or dword [rax], eax
add byte [rax], al
add byte [rax], al
out 9, al
add byte [rax], al
add byte [rax], al
add dh, dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte es:[rax]
add byte [rax], al
add byte [rax], al
or al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
or r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x406074
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400a], al
add byte [rax], al
add byte [rsi + 0x400a], dl
add byte [rax], al
add byte [rsi + 0x400a], ah
add byte [rax], al
add byte [rsi + 0x400a], dh
add byte [rax], al
add dh, al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0xa, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x406130
je 0x406139
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x406147
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x406144
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], ch
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x4007], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0x4009], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
ror byte [rcx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x400af000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sldt word [rsp + rdi + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x3c], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add al, dl
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rbx + rbx*2 + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
call 0x40c33a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x605df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x6060], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x605df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
call 0x40c4d2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], ch
add byte [rax], dl
add byte [rax + 0x3c], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add cl, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x3c], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x3c], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x3c], ch
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add byte [rip + 0x4017], bh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add byte [rbx + 0x17], bh
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], al
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
mov eax, 0x405b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], dl
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], ah
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
sar byte [rax + rax*2], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], dh
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], cl
add byte [rax + rax], dl
clc
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 1], bl
add byte [rax + rax], dl
call 0x40c652
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000001], ch
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000001], dh
add byte [rsi], cl
add dl, ah
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
adc eax, dword [rax]
add byte [rax], ah
add byte [rdx], bl
add byte [rax + 0x6060], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x3a], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4036], dh
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + 2], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4020], dl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4023], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000002], dh
add byte [rsi], cl
add byte [rdx + 0x402e], ch
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd word [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4029], cl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000003], bl
add byte [rsi], cl
add byte [rax], ch
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor eax, 0
add byte [rax], al
add byte [rbx + rax], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ch
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop qword [rbx]
add byte [rax], al
and al, byte [rax]
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add dh, cl
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rsp + rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x2c], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rdi + 0x22000004], bl
add byte [rsi], cl
add byte [rdx + 0x40], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add cl, dl
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rax + rax], 0
adc al, byte [rax]
add byte [rax + 0x3c], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add eax, 0x220000
add byte [rcx + 0x38], dl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rbp + rax], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbx + 0x40], ch
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosb byte [rdi], al
add eax, 0x220000
add byte [rsi + rsi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 5, 0
and al, byte [rax]
add byte [rdx + rdi + 0x40], ch
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rsi + 0x12000013], dl
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rsi], eax
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000006], cl
add byte [rsi], cl
add byte [rdx], ah
add byte es:[rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000006], ah
add byte [rsi], cl
add byte [rdx + 0x4034], bl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
sbb eax, 0x40
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x33], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x2f], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 7], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x1e], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000007], bl
add byte [rsi], cl
add byte [rsi], ch
xor byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x22000007
add byte [rsi], cl
add byte [rcx + 0x28], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
and dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rax], cl
add byte [rax], al
and al, byte [rax]
add dh, bl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x2d], ch
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rbp + 0x22000008], dh
add byte [rsi], cl
add byte [rax + 0x4031], bh
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add dl, dl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bl
and eax, 0x40
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc ecx, dword [rcx]
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x34], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 9], cl
add byte [rax], al
and al, byte [rax]
add ah, ch
add byte cs:[rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx], ch
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000009], al
add byte [rsi], cl
add byte [rbp + 0x2f], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 9
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x120000], al
sldt word [rsp + rdi + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ch
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, cl
sbb eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0xa
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x37], bl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbx + 0xa], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200000a], al
add byte [rsi], cl
add ch, cl
xor eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1200000a], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x401f], ch
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbx + 0x40], cl
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rsi + 0x40], ah
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbx + 0x40], dl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 0xb
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror dword [rbx], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x31], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x20], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rsi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000c], bh
add byte [rsi], cl
add byte [rdx], dh
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add bh, ah
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x401f], ch
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
or eax, 0x220000
add byte [rcx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x220000
add dl, dh
sbb eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4028], bl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000d], ch
add byte [rsi], cl
add byte [rax + 0x4031], bh
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add dl, cl
or eax, 0x220000
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
or eax, 0x220000
add bl, cl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx], bl
add byte [rax], al
and al, byte [rax]
add bl, dh
sub eax, 0x40
add byte [rax], al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x406cd0
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4027], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000e], al
add byte [rsi], cl
add byte [rdx + 0x4017], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx + 0x120000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4017], dl
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000e], dh
add byte [rsi], cl
add bl, bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4030], bh
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
and al, byte [rax]
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xf], dl
add byte [rax], al
and al, byte [rax]
add byte [rdi], al
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000f], dl
add byte [rsi], cl
add byte [rax + 0x4018], dh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0xf
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x2f], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0xf, al
add byte [rax], al
and al, byte [rax]
add cl, ch
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x10
add byte [rax], al
and al, byte [rax]
add byte [rdi + rbx + 0x40], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [r8], r8b
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x40], cl
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x10], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx], al
add byte ss:[rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12000010], ch
add byte [rax], al
add byte [rax + 0xa], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
adc byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or edx, dword [rcx]
add byte [rax], al
and al, byte [rax]
add ah, bl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x37], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx + 0x220000], cl
add byte [rax + 0x4027], ch
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000011], dh
add byte [rsi], cl
add byte [rdx + 0x1c], cl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
adc dword [rax], eax
add byte [rcx], dl
add byte [rax], dl
add byte [rax + 0x3c], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fist word [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1b], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x22000012
add byte [rsi], cl
add byte [rbp + 0x23], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + rbx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12], dl
add byte [rax], al
and al, byte [rax]
add dh, ah
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000012], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000012], bl
add byte [rsi], cl
add dh, ah
and byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x22000012
add byte [rsi], cl
add byte [rcx + rsi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rbx], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 0x13], cl
add byte [rax], al
and al, byte [rax]
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x406fbd
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
adc eax, dword [rax]
add byte [rax], dl
add byte [rdx], bl
add byte [rax + 0x6060], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000013], bl
add byte [rsi], cl
add byte [rax + 0x401c], ah
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x401f], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x2b], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dh
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x1b], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1f], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000014], ah
add byte [rsi], cl
add byte [rdx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, cl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x15
add byte [rax], al
and al, byte [rax]
add ah, dh
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dl, byte [rip + 0x220000]
add byte [rdx + 0x22], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x15], ah
add byte [rax], al
and al, byte [rax]
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x15], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x26], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 0x15
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x2d], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
adc eax, 0x220000
add bl, dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x16], al
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbx + 0x40], ch
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x407140
add byte [rax], al
and al, byte [rax]
add byte [rax + rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000016], cl
add byte [rsi], cl
add byte [rdx], bl
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000016], bh
add byte [rsi], cl
add byte [rsi + 0x402d], dl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
shl byte [rax + 0x60], 0
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0x17
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4018], dh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x22000017
add byte [rsi], cl
add byte [rax + 0x35], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x17], al
add byte [rax], al
and al, byte [rax]
add dl, dh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x17], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x26], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x3b], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ebx, dword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rcx], ch
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax], ebx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x38], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x18], ah
add byte [rax], al
and al, byte [rax]
add byte [rsp + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbx + 0x220000], al
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000018], dh
add byte [rsi], cl
add cl, cl
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
sbb dword [rax], eax
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x6060], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx], dl
add byte [rax], al
and al, byte [rax]
add cl, al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x19], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4039], ah
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr dword [rcx], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x401f], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4030], bh
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb bl, byte [rdx]
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
sbb eax, 0x40
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1a], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1a], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fstp dword [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rdx], dh
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4029], bh
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1b], ah
add byte [rax], al
and al, byte [rax]
add al, cl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, byte [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
and dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0x1b
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4018], dl
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax + rax], ebx
add byte [rdx], dl
add byte [rsi], cl
add al, dl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1c], ah
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x402d], ah
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200001c], bl
add byte [rsi], cl
add byte [rax], dh
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4021], ah
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x220000
add byte [rcx + rbx + 0x40], bh
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1d], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200001d], al
add byte [rsi], cl
add byte [rdx + 0x29], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200001d], dl
add byte [rsi], cl
add byte [rax], dl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0x1d
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
sbb eax, 0x220000
add al, bh
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x19], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x407538
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4030], dh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200001e], bh
add byte [rsi], cl
add byte [rdi + 0x402e], cl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x40], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1a], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
and al, byte [rax]
add byte [rbp + rsi + 0x40], bl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea ebx, [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x29], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200001f], bl
add byte [rsi], cl
add byte [rsi + 0x1e], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
mov eax, 0x6060
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x1d], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add al, dl
sub eax, 0x40
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul esp, dword [rax], 0x220000
add bl, ah
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000020], dl
add byte [rsi], cl
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x12000020
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1e], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x37], bl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rax + 0x21], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword gs:[rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x3a], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], cl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisub dword [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x2a], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x402e], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x23], al
add byte [rax], al
and al, byte [rax]
add byte [rbx], bl
sub eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x40777d
add byte [rax], al
and al, byte [rax]
add dl, cl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000023], bh
add byte [rsi], cl
add byte [rbx + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x24], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x401d], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x24], bh
add byte [rax], al
and al, byte [rax]
add ah, bl
xor eax, 0x40
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000024], bl
add byte [rsi], cl
add byte [rax], bl
and eax, 0x40
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add ch, cl
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x36], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
and eax, 0x220000
add byte [rax], dl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
and eax, 0x220000
add byte [rbx + rdi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000025], dl
add byte [rsi], cl
add byte [rsi], ch
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0x22000025
add byte [rsi], cl
add byte [rsi + 0x1b], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
and eax, 0x220000
add byte [rax], ah
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
and eax, 0x220000
add byte [rdx], bh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb esp, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1c], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte es:[rax], al
and al, byte [rax]
add cl, bh
sub byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x407918
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4037], dh
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000026], bh
add byte [rsi], cl
add byte [rdx + 0x25], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, al
add byte es:[rax], al
and al, byte [rax]
add byte [rax + 0x4039], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x27], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x3a], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x401c], ah
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x10000001], dl
add byte [rbx], bl
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x1b], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x1e], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x28], al
add byte [rax], al
and al, byte [rax]
add dh, dh
add byte es:[rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdx + 0x12000028], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000028], bl
add byte [rsi], cl
add byte [rdx + 0x19], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0x28
add byte [rax], al
and al, byte [rax]
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rcx], ch
add byte [rax], al
and al, byte [rax]
add dh, cl
and al, byte [rax]
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x29], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx], ch
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rcx], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x30], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x22000029
add byte [rsi], cl
add byte [rbx + 0x402a], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
sub al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
sub al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2a], al
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbx + 0x40], dl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ebp, dword [rdx], 0x220000
add byte [rbp + 0x40], cl
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200002a], dl
add byte [rsi], cl
add byte [rsi + 0x402d], dl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x20], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x12407b5f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1e], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword ds:[rax]
add byte [rdx], ah
add byte [rsi], cl
add bl, cl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub eax, 0
add byte [rax], al
add byte [rdi + 0x2200002b], al
add byte [rsi], cl
add byte [rdx + 0x4026], dl
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0x2b
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add dl, dh
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add al, bl
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2c], cl
add byte [rax], al
and al, byte [rax]
add byte [rdi + rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax + rax], ch
add byte [rax], dl
add byte [rdx], bl
add byte [rax + 0x6060], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200002c], cl
add byte [rsi], cl
add byte [rcx + rbx + 0x40], bh
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200002c], dh
add byte [rsi], cl
add al, cl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fsubr dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4017], ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rax], ah
sub eax, 0x120000
add byte [rax], al
ror byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2d], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4017], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2d], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x403b], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200002d], cl
add byte [rsi], cl
add dh, bl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add cl, dl
sub eax, 0x220000
add byte [rdx + 0x28], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
sub eax, 0x220000
add byte [rdi + rsi + 0x40], ch
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
and al, byte [rax]
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x407d40
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rsi], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x1e], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
add byte cs:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld xword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x402a], dh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x40], ch
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rdi], 0x220000
add byte [rbp + 0x40], bh
add byte [rax], al
xor eax, 0
add byte [rax], al
add byte [rax + 0x2200002f], dh
add byte [rsi], cl
add byte [rdx + 0x4027], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
and al, byte [rax]
add cl, dh
and eax, 0x40
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
add byte [rax], al
and al, byte [rax]
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax], esi
add byte [rax], al
and al, byte [rax]
add al, ah
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdi
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + 0x40], cl
add byte [rax], al
xor eax, 0
add byte [rax], al
add byte [rdx + 0x22000030], bl
add byte [rsi], cl
add byte [rdx + 0x33], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000030], dh
add byte [rsi], cl
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x22407e95
add byte [rsi], cl
add byte [rdx + rbx + 0x40], cl
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dh, byte [rcx]
add byte [rax], al
and al, byte [rax]
add dl, bh
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x31], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4021], ah
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x28], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000031], dh
add byte [rsi], cl
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
int1
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x1a], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
xor dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], al
add byte [rax], al
adc al, byte [rax]
add dh, dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or r8d, dword [r8]
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
sbb al, 0
add byte [rdx], dl
add byte [rbx], cl
add byte [rax + 0x4009], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, bh
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x32], dl
add byte [rax], al
and al, byte [rax]
add cl, dh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rsi], bh
add byte [rdx], ah
add byte [rsi], cl
add dh, dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000032], dl
add byte [rsi], cl
add ah, bl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000032], bh
add byte [rsi], cl
add byte [rcx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x408040
je 0x408044
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x407ff6
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x408074
jb 0x40807a
pop rdi
jne 0x408083
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x40807d
je 0x408079
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x408099
jb 0x40809f
pop rdi
jne 0x4080a8
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x4080ab
jns 0x40809b
outsb dx, byte gs:[rsi]
je 0x4080b2
jns 0x408042
jb 0x4080a6
insd dword [rdi], dx
pop rdi
jne 0x4080b8
insd dword [rdi], dx
jns 0x40804e
pop rdi
pop rdi
jb 0x4080b4
insd dword [rdi], dx
pop rdi
jne 0x4080c6
insd dword [rdi], dx
jns 0x4080bb
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4080c6
jns 0x4080c6
outsb dx, byte gs:[rsi]
je 0x4080dd
jns 0x40806d
insd dword [rdi], dx
imul ebp, dword [rsi + 0x2e], 0x707063
pop rdi
pop rdx
push rbx
je 0x4080c7
xor dword [rcx], edi
jo 0x4080e8
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x408100
jb 0x408103
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x4080e2
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x4080f1
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408110
jb 0x40811b
add byte [rdi + 0x5a], bl
push rbx
je 0x408106
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
xor r13, qword [rbp + 0x6f]
add byte fs:[rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x408146
je 0x40813e
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x40814c
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x408162
jb 0x408165
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x40817a
pop rdi
pop r15
insd dword [rdi], dx
imul ebp, dword [rsi], 0x52465f5f
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4081bd
jns 0x4081bd
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4081ce
jns 0x4081ce
jae 0x4081e5
jb 0x4081e8
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x4081b5
xor bl, byte [rdi + 0x44]
jae 0x4081fe
jb 0x4081fb
jns 0x4081ed
jne 0x408209
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x408212
jb 0x40820f
jns 0x4081eb
push rax
push rbx
je 0x4081dc
jbe 0x40820d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40820c
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4081f4
xor byte [rdi + 0x49], bl
je 0x40822d
jb 0x408229
jae 0x408233
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408236
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40824f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40822a
jbe 0x40825b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x408276
push r11
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x408253
jbe 0x408284
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r12d, dword gs:[r13 + 0x6e]
jbe 0x408232
pop rdi
pop rdx
push rbx
je 0x40826e
jbe 0x40829f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x40829d
pop rdi
jae 0x4082de
jb 0x4082db
jns 0x4082b7
push rax
js 0x4082b6
jbe 0x4082c7
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4082e1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4082ea
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4082de
js 0x4082dc
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4082a6
pop rdi
pop rdx
push rbx
je 0x4082dd
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40831e
push rbx
xor dword gs:[r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40831c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40835d
js 0x40834e
js 0x408344
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
js 0x408380
add byte [rdi + 0x5a], bl
push rbx
je 0x40834b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40838c
push r11
je 0x408361
jbe 0x408392
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408387
js 0x40837d
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x4083b1
pop rdi
jae 0x4083c3
outsd dx, dword [rsi]
jb 0x4083b3
insd dword [edi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4083c0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4083d9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4083b4
jbe 0x4083e5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4083ce
xor byte [rdi + 0x5f], bl
jne 0x40840f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40842a
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40842b
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40843f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40842e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408447
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40843d
je 0x408422
jbe 0x408453
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408448
js 0x40843e
push r8
js 0x408444
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x408444
xor bl, byte [rdi + 0x5f]
jne 0x408485
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor byte [rbp + 0x45], al
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40847b
jbe 0x4084ac
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4084a1
js 0x408497
insd dword [rdi], dx
push rbx
xor al, 0x5f
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40849e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4084df
js 0x4084d0
js 0x4084c6
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4084d0
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408511
push rbx
xor al, byte gs:[r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x408506
xor byte [rdi + 0x5f], bl
jne 0x408547
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x408562
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x408563
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x408577
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408566
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40857f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40855a
jbe 0x40858b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40857b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4085bc
js 0x4085ad
js 0x4085a3
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x408572
pop rdi
pop rdx
push r11
je 0x4085af
jbe 0x4085e0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x408590
pop rdi
pop rdx
push rbx
je 0x4085c7
xor byte [rdi + 0x49], bl
je 0x408600
jb 0x4085fc
jae 0x408606
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408609
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408622
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x408618
je 0x4085fd
jbe 0x40862e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408623
js 0x408619
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x408649
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x408620
xor bl, byte [rdi + 0x44]
jae 0x408669
jb 0x408666
jns 0x408658
jne 0x408674
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x40867d
jb 0x40867a
jns 0x408656
push rax
push rbx
je 0x408647
jbe 0x408678
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40866d
js 0x408663
jbe 0x408677
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40865f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4086a0
push rbx
xor dword gs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x408656
pop rdi
pop rdx
push rbx
je 0x408693
pop rdi
jae 0x4086d4
jb 0x4086d1
jns 0x4086ad
push rax
jbe 0x4086bd
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4086d7
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x4086e9
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x4086fe
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4086eb
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4086e3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408724
js 0x408715
js 0x40870b
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408708
jbe 0x408739
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408725
outsw dx, word [rsi]
jb 0x408769
jb 0x408759
push r10
push r11
je 0x408731
jbe 0x408762
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408757
js 0x40874d
push r12
pop rdi
push rdx
push rbx
je 0x408743
jb 0x40877a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40877e
pop rdi
jb 0x408781
jb 0x408785
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x40879c
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408798
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4087a1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408795
push rbx
je 0x408785
jbe 0x4087b6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4087ab
js 0x4087a1
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40879e
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4087b9
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
js 0x40880d
js 0x4087e7
push rsp
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4087e7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408828
push r11
je 0x4087fd
jbe 0x40882e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x4087f0
pop rdi
pop rdx
push rbx
je 0x408827
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408868
push r11
je 0x40883d
jbe 0x40886e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408863
js 0x408859
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40886c
xor bl, byte [rdi + 0x5f]
jne 0x4088ad
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor dword [rbp + 0x45], eax
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4088b9
jbe 0x4088ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4088df
js 0x4088d5
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4088d1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408912
push rbx
xor dword gs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x408949
jb 0x40894c
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40893e
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40895f
jae 0x4088ef
pop rdi
pop rdx
push rbx
je 0x408926
xor byte [rdi + 0x49], bl
je 0x40895f
jb 0x40895b
jae 0x408965
push r8
js 0x408950
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x408975
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408950
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
js 0x408991
js 0x40896b
push rsp
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40897b
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40897e
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x4089c8
jb 0x4089cb
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x408992
jbe 0x4089c3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4089b8
js 0x4089ae
push rdx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x4089c4
push rsp
pop rdi
jo 0x4089c8
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x4089bc
jbe 0x4089ed
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4089e2
js 0x4089d8
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x4089d9
jbe 0x408a0a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4089f8
pop rdi
jae 0x408a39
jb 0x408a36
jns 0x408a12
push rax
js 0x408a44
jbe 0x408a23
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408a45
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408a5e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x408a54
je 0x408a39
jbe 0x408a6a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408a5f
js 0x408a55
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x408a88
je 0x408a8d
jb 0x408a96
ja 0x408a69
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
jo 0x408aac
je 0x408a9c
push 0x40407261
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x408a81
xor byte [rdi + 0x49], bl
je 0x408aba
jb 0x408ab6
jae 0x408ac0
push r8
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x408ad0
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408aae
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408afe
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408b07
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408afb
xor al, byte gs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408b22
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408b2b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408b1f
push rbx
je 0x408b0f
jbe 0x408b40
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408b35
js 0x408b2b
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x408b37
jbe 0x408b68
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte gs:[r13 + 0x6d]
push rdx
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x408b86
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408b8f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408b83
push rbx
je 0x408b73
jbe 0x408ba4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408b99
js 0x408b8f
cmp byte [r13 + 0x61], r13b
js 0x408bb0
jae 0x408bbc
jp 0x408bba
jbe 0x408b58
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408bc1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408bca
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408bbe
js 0x408bbc
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x408bfc
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
push r11
je 0x408bda
jbe 0x408c0b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x408bee
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
js 0x408c13
push rbx
je 0x408c03
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x408c68
jo 0x408c56
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x408c2d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408c6e
push rbx
xor r8b, byte gs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408c4d
xor bl, byte [rdi + 0x5f]
jne 0x408c8e
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x408ca9
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408c9a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408cb3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408c8e
jbe 0x408cbf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x408cb7
xor bl, byte [rdi + 0x44]
jae 0x408d00
jb 0x408cfd
jns 0x408cef
jne 0x408d0b
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x408d14
jb 0x408d11
jns 0x408ced
push rax
js 0x408cec
jbe 0x408cfe
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408d18
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408d21
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408d15
xor dword gs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x408d0a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408d4b
push r11
je 0x408d20
jbe 0x408d51
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x408d46
jbe 0x408d77
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408d6c
js 0x408d62
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
js 0x408d38
pop rdi
pop rdx
push rbx
je 0x408d6f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408db0
push r11
je 0x408d85
jbe 0x408db6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408dab
js 0x408da1
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x408db1
jbe 0x408de2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408dd7
js 0x408dcd
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
js 0x408ddf
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x408dd6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408e0f
je 0x408e24
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x408df3
jbe 0x408e24
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408e19
js 0x408e0f
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x50]
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x408e1c
xor bl, byte [rdi + 0x5f]
jne 0x408e5d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor byte [rbp + 0x45], al
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x408e53
jbe 0x408e84
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor al, 0x5f
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
js 0x408e8c
xor al, byte [r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
js 0x408e9c
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x408eca
js 0x408ed0
je 0x408ea9
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6e5a5f00
ja 0x408ee8
push rax
jbe 0x408e7e
pop rdi
pop rdx
push rbx
je 0x408eb5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408eee
je 0x408f03
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
js 0x408f1d
add byte [rdi + 0x5a], bl
push rbx
je 0x408ee7
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x408f31
jb 0x408f34
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x408efb
jbe 0x408f2c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rdx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x408f2d
push rsp
pop rdi
jo 0x408f31
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408f4f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408f58
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408f4c
push rbx
je 0x408f3c
jbe 0x408f6d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408f62
js 0x408f58
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408f51
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408f8a
je 0x408f9f
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x408f6e
jbe 0x408f9f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408f94
js 0x408f8a
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x408f94
jbe 0x408fc5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408fba
js 0x408fb0
xor al, byte [r13 + 0x6d]
push rdx
js 0x408fc6
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408faf
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x408ff9
jb 0x408ffc
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x408fc3
jbe 0x408ff4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408fe9
js 0x408fdf
push r10
push r11
xor bl, byte [rdi + 0x45]
jbe 0x408ff5
push rsp
pop rdi
jo 0x408ff9
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408fe5
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409019
pop rdi
jae 0x40905a
jb 0x409057
jns 0x409033
push rax
push rbx
je 0x409024
jbe 0x409055
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40904a
js 0x409040
push r11
xor bl, byte [rdi + 0x45]
jbe 0x409056
pop rdi
push rbx
xor al, 0x5f
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409078
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409081
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409075
xor dword gs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4090a0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x4090b2
imul esi, dword [rbx + rsi*2 + 0x49], 0x65496153
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x4090c7
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4090b4
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4090b3
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x409108
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
push r11
je 0x4090f5
jbe 0x409126
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40911b
js 0x409111
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40910f
jbe 0x409140
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40912d
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409188
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409177
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409190
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x409186
je 0x40916b
jbe 0x40919c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409191
js 0x409187
push r8
js 0x40918d
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40918b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4091cc
js 0x4091bd
js 0x4091b3
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4091bb
jbe 0x4091ec
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
imul r15d, dword gs:[r8 + 0x45], 0x495f006d
pop r15
jae 0x409212
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x4091e3
jbe 0x409214
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40920c
pop rdi
pop rdi
jne 0x40924d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40925d
je 0x409252
outsb dx, byte [rsi]
pop rdi
push r8
js 0x409267
js 0x409241
push rsp
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
xor dword gs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x409252
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409293
js 0x409284
js 0x40927a
xor dword [r9], r15d
pop rdi
pop r15
je 0x40929e
push rsp
jo 0x4092a1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409291
jbe 0x40924e
jae 0x4092b3
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x40929e
pop rdi
jae 0x4092df
jb 0x4092dc
jns 0x4092b8
push rax
jbe 0x4092c9
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x4092b8
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
js 0x409303
js 0x4092dd
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4092ff
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4092e8
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x40930d
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x40932e
insb byte [rdi], dx
jne 0x409335
push r12
pop rdi
pop rdi
pop rdi
je 0x409352
jo 0x409340
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409351
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40935a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40934e
js 0x40934c
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409379
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409382
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409376
cmp byte gs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40933e
pop rdi
push r12
pop r15
jb 0x4093aa
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x4093bf
pop rdi
jae 0x4093d5
jb 0x4093d8
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4093ce
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4093d7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4093cb
js 0x4093c9
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4093f2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4093fb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4093ef
xor dword gs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4093e5
pop rdi
pop rdi
jne 0x409426
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x409436
je 0x40942b
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x409449
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x409452
je 0x409447
outsb dx, byte [rsi]
push r8
js 0x40945a
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409434
jbe 0x409465
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40945d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40949e
push r11
je 0x409473
jbe 0x4094a4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409499
js 0x40948f
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x4094bb
push rsp
jo 0x4094be
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4094ae
jbe 0x40946b
pop rdi
pop rdx
push rbx
je 0x4094a2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4094e3
push r11
je 0x4094b8
jbe 0x4094e9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x409500
push rsp
jo 0x409503
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4094f3
jbe 0x4094b0
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40951a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409523
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409517
cmp byte gs:[r13 + 0x61], r13b
js 0x409534
jae 0x409540
jp 0x40953e
jbe 0x4094dc
pop rdi
pop rdx
push r11
je 0x409519
jbe 0x40954a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40953f
js 0x409535
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x4094fa
pop rdi
pop rdx
push rbx
je 0x409537
pop rdi
jae 0x409578
jb 0x409575
jns 0x409551
push rax
push rbx
je 0x409542
jbe 0x409573
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x409574
pop rdi
push rbx
xor al, 0x5f
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
js 0x40957a
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409571
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4095b2
push r11
je 0x409587
jbe 0x4095b8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4095e7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4095f0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4095e4
xor dword gs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4095e4
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40963f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40962e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409647
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409622
jbe 0x409653
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409642
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409683
js 0x409674
js 0x40966a
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x409639
pop rdi
pop rdx
push rbx
je 0x409675
jbe 0x4096a6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40969b
js 0x409691
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409689
xor bl, byte [rdi + 0x44]
jae 0x4096d2
jb 0x4096cf
jns 0x4096c1
jne 0x4096dd
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x4096e6
jb 0x4096e3
jns 0x4096bf
push rax
jbe 0x4096d0
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4096ea
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4096f3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4096e7
push rbx
je 0x4096d7
jbe 0x409708
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rbx + 0x74], dh
imul ebp, dword fs:[rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x409708
jbe 0x409739
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40972e
js 0x409724
xor dword [r13 + 0x6d], eax
push rdx
js 0x40973a
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x40972a
jbe 0x40975b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409750
js 0x409746
xor r12d, dword [r13 + 0x6e]
jbe 0x409709
pop rdi
pop rdx
push rbx
je 0x409746
pop rdi
jae 0x409787
jb 0x409784
jns 0x409760
push rax
push rbx
je 0x409751
jbe 0x409782
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409777
js 0x40976d
jbe 0x409780
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x409768
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4097a9
push r11
je 0x40977e
jbe 0x4097af
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4097ac
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x4097e2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4097ec
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x4097c5
jb 0x4097f7
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x409814
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40980e
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x409816
insd dword [rdi], dx
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x409803
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524578
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40981a
movsxd rbp, dword [rdi + 0x70]
jns 0x409834
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409852
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40986b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x409861
je 0x409846
jbe 0x409877
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40986c
js 0x409862
push r8
js 0x409868
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40986c
jbe 0x40989d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409892
js 0x409888
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x409883
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4098c4
push rbx
xor dword gs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40987a
pop rdi
pop rdx
push rbx
je 0x4098b1
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x4098e7
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4098f1
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x4098ca
jb 0x4098fc
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x409919
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409913
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40991b
insd dword [rdi], dx
js 0x409905
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409913
xor al, 0x5f
pop rdi
jne 0x409954
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x409935
jbe 0x409966
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40995b
js 0x409951
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x409961
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x409997
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4099a1
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x4099ab
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4099c4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40999f
jbe 0x4099d0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4099f2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4099fb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4099ef
xor r8b, byte gs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4099e3
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x409a2d
jb 0x409a30
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x4099f7
jbe 0x409a28
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r10
push r11
xor bl, byte [rdi + 0x45]
jbe 0x409a29
push rsp
pop rdi
jo 0x409a2d
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
jae 0x409a56
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x409a26
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409a67
js 0x409a58
js 0x409a4e
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x409a4e
jbe 0x409a7f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte gs:[r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x409a66
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409aaa
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409ac3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x409ab9
je 0x409a9e
jbe 0x409acf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409ac4
js 0x409aba
push rbx
je 0x409aae
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409b13
jo 0x409b01
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409ad8
xor byte [rdi + 0x49], bl
je 0x409b11
jb 0x409b0d
jae 0x409b17
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409b1a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409b33
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409b0e
jbe 0x409b3f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x409b5a
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409b31
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409b6a
je 0x409b7f
imul esi, dword [rbx + rsi*2 + 0x49], 0x65496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x409b64
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409ba5
js 0x409b96
js 0x409b8c
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409b89
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409bca
push r11
je 0x409b9f
jbe 0x409bd0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x409b92
pop rdi
pop rdx
push rbx
je 0x409bce
jbe 0x409bff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409bf4
js 0x409bea
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x409be7
jbe 0x409c18
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409c0d
js 0x409c03
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x409c10
xor al, 0x5f
pop rdi
jne 0x409c51
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x409c32
jbe 0x409c63
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x409c5f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409c98
je 0x409cad
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x409c7c
jbe 0x409cad
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte gs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x409c9c
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x409cd2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409cdc
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x409ce6
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409cff
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x409cf5
je 0x409cda
jbe 0x409d0b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409d00
js 0x409cf6
push r8
js 0x409cfc
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409cfb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409d3c
push r11
je 0x409d11
jbe 0x409d42
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409d32
jbe 0x409d63
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x409d5b
js 0x409d51
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409d83
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409d8c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409d80
push rbx
je 0x409d70
jbe 0x409da1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte gs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
xor dword gs:[r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409dc7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409dd0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409dc4
push rbx
je 0x409db4
jbe 0x409de5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409dfb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409e04
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409df8
push rbx
je 0x409de8
jbe 0x409e19
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409e0e
js 0x409e04
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409e2f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409e38
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409e2c
push rbx
je 0x409e1c
jbe 0x409e4d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409e42
js 0x409e38
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rbp + 0x65], ch
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409e6a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x409e4f
jbe 0x409e80
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x409e78
js 0x409e6e
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x409e7d
outsw dx, word [rsi]
jb 0x409ec1
jb 0x409eb1
push r10
push r11
je 0x409e89
jbe 0x409eba
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r12
pop rdi
push rdx
push rbx
je 0x409e9b
jb 0x409ed2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409ed6
pop rdi
jb 0x409ed9
jb 0x409edd
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x409ef4
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x409ec4
pop rdi
jae 0x409f05
jb 0x409f02
jns 0x409ede
push rbx
je 0x409ece
jbe 0x409eff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x409ef9
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409ee3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409f24
js 0x409f15
js 0x409f0b
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
xor r8b, byte gs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409f22
xor bl, byte [rdi + 0x5f]
jne 0x409f63
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409f7e
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409f6f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409f88
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x409f7e
je 0x409f63
jbe 0x409f94
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409f89
js 0x409f7f
push r8
js 0x409fb8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
xor al, byte gs:[r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409f9c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409fdd
push r11
je 0x409fb2
jbe 0x409fe3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409fd8
js 0x409fce
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdi
jae 0x40a014
pop rdi
jae 0x40a018
jb 0x40a01b
add byte [rdi + 0x5a], bl
push rbx
je 0x409fe4
jbe 0x40a015
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a00a
js 0x40a000
xor r14b, byte [r9]
pop rdi
pop r15
jne 0x40a033
je 0x40a028
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x5f006d45
pop rdx
push rbx
je 0x40a012
jbe 0x40a043
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte gs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a058
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a061
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a055
push rbx
je 0x40a045
jbe 0x40a076
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a067
xor dword [rdi + 0x5f], ebx
jb 0x40a0a3
jae 0x40a0b3
outsd dx, dword [rsi]
push r11
je 0x40a07c
jbe 0x40a0ad
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a0a2
js 0x40a098
push r8
push rsp
pop rdi
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40a099
jbe 0x40a0ca
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40a0c2
js 0x40a0b8
push r11
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5f5f006d
jae 0x40a0f9
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a106
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a10f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a103
push rbx
je 0x40a0f3
jbe 0x40a124
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a119
js 0x40a10f
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a13a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a153
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40a149
je 0x40a12e
jbe 0x40a15f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a154
js 0x40a14a
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x40a14f
jbe 0x40a180
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a175
js 0x40a16b
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40a163
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a1a7
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a1c0
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a19b
jbe 0x40a1cc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x40a1ab
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a210
jo 0x40a1fe
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a1d4
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
insd dword [rdi], dx
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a21b
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x40a204
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x40a229
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x40a24a
insb byte [rdi], dx
jne 0x40a251
push r12
pop rdi
pop rdi
pop rdi
je 0x40a26e
jo 0x40a25c
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40a23a
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a27e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a297
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40a28d
je 0x40a272
jbe 0x40a2a3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a298
js 0x40a28e
push rbx
je 0x40a282
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a2e7
jo 0x40a2d5
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a2ac
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40a2fd
je 0x40a2f2
outsb dx, byte [rsi]
push r8
js 0x40a305
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a2d9
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a31a
push r11
je 0x40a2ef
jbe 0x40a320
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40a315
xor dword [rdi + 0x5f], ebx
jb 0x40a351
jae 0x40a361
outsd dx, dword [rsi]
push r11
je 0x40a32a
jbe 0x40a35b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push rsp
pop rdi
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40a342
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a37b
je 0x40a390
imul esi, dword [rbx + rsi*2 + 0x49], 0x65496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40a372
movsxd rbp, dword [rdi + 0x70]
jns 0x40a38c
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a3aa
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a3c3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a39e
jbe 0x40a3cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a3f0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a3f9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a3ed
js 0x40a3eb
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
js 0x40a423
add byte [rdi + 0x5a], bl
push rbx
je 0x40a3f4
pop rdi
jae 0x40a435
jb 0x40a432
jns 0x40a40e
push rax
push rbx
je 0x40a3ff
jbe 0x40a430
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40a42e
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a448
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a451
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a445
push rbx
je 0x40a435
jbe 0x40a466
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a44a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a48b
js 0x40a47c
js 0x40a472
xor dword [r9], r15d
pop rdi
pop r15
je 0x40a496
push rsp
jo 0x40a499
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a489
jbe 0x40a446
pop rdi
pop rdx
push r11
je 0x40a483
jbe 0x40a4b4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x40a49a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a4db
push rbx
xor dword gs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x40a4d4
jbe 0x40a505
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a4fa
js 0x40a4f0
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x40a4ea
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a52b
push rbx
xor dword gs:[r9], r15d
pop rdi
pop r15
je 0x40a536
push rsp
jo 0x40a539
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a529
jbe 0x40a4e6
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a54f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a558
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a54c
push rbx
je 0x40a53c
jbe 0x40a56d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte gs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a584
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a59d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a578
jbe 0x40a5a9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x62
jae 0x40a5bb
jbe 0x40a559
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a5c3
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a5cc
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a5c0
js 0x40a5be
cmp byte [rbp + 0x61], ch
js 0x40a5dd
jae 0x40a5e9
jp 0x40a5e7
jbe 0x40a585
pop rdi
pop rdx
push rbx
push r11
je 0x40a5c4
jbe 0x40a5f5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a5de
jbe 0x40a60f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
push r11
je 0x40a605
jbe 0x40a636
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte gs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a61b
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524565
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40a630
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40a64e
jbe 0x40a67f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a674
js 0x40a66a
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a670
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a6a9
je 0x40a6be
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
xor r14d, dword [r15]
jae 0x40a6c0
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x40a6c9
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x40a6ea
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40a6eb
jb 0x40a6ee
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a6bc
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a6fd
push rbx
xor dword gs:[r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40a710
pop rdi
jae 0x40a722
outsd dx, dword [rsi]
jb 0x40a712
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40a6ec
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a730
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a749
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a724
jbe 0x40a755
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x40a734
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a799
jo 0x40a787
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a791
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a79a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a78e
push rbx
je 0x40a77e
jbe 0x40a7af
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte gs:[r13 + 0x61], r13b
js 0x40a7bb
jae 0x40a7c7
jp 0x40a7c5
jbe 0x40a763
pop rdi
pop rdx
push rbx
je 0x40a799
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40a7cf
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40a7d9
pop rdi
xor byte [rbp + 0x50], al
push rax
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a7f7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a800
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a7f4
js 0x40a7f2
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40a7f1
jbe 0x40a822
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte gs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a806
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a847
push r11
je 0x40a81c
jbe 0x40a84d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a842
js 0x40a838
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40a80f
pop rdi
pop rdx
push rbx
je 0x40a846
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a887
push r11
je 0x40a85c
jbe 0x40a88d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rsi + 0x72], ah
outsd dx, dword gs:[rsi]
jo 0x40a8bd
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40a8a3
jbe 0x40a8d4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40a8cc
js 0x40a8c2
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40a8d1
jbe 0x40a902
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a907
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a948
js 0x40a939
js 0x40a92f
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40a95b
pop rdi
jae 0x40a96d
outsd dx, dword [rsi]
jb 0x40a95d
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40a93d
jbe 0x40a96e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a963
js 0x40a959
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a951
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a98a
je 0x40a99f
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a9b1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a9ba
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a9ae
push rbx
je 0x40a99e
jbe 0x40a9cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte gs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40a986
pop rdi
pop rdx
push rbx
je 0x40a9bd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a9f6
je 0x40aa0b
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40a9da
jbe 0x40aa0b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x50]
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40aa1d
pop rdi
pop rdi
je 0x40aa59
jb 0x40aa62
ja 0x40aa54
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40aa76
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40aa7f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40aa73
js 0x40aa71
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40aa9a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40aaa3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40aa97
xor al, byte gs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40aac2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40aacb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40aabf
push rbx
je 0x40aaaf
jbe 0x40aae0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte gs:[r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40aac8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ab09
push rbx
xor dword gs:[rbp + 0x76], r8d
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40ab06
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ab47
push r11
je 0x40ab1c
jbe 0x40ab4d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ab42
js 0x40ab38
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40ab3e
xor bl, byte [rdi + 0x5f]
jne 0x40ab7f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor dword [rbp + 0x45], eax
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
js 0x40abab
js 0x40ab85
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40ab86
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40abc7
push r11
je 0x40ab9c
jbe 0x40abcd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40abec
pop rdi
jae 0x40abfe
outsd dx, dword [rsi]
jb 0x40abee
insd dword [edi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40abfb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ac04
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40abf8
js 0x40abf6
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40abf1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ac32
push rbx
xor dword gs:[r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40ac16
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ac57
push rbx
xor dword gs:[r9], r15d
pop rdi
pop r15
je 0x40ac62
push rsp
jo 0x40ac65
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ac55
jbe 0x40ac12
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ac7b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ac84
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ac78
push rbx
je 0x40ac68
jbe 0x40ac99
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ac8e
js 0x40ac84
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40ac50
pop rdi
je 0x40acb7
add byte [rdi + 0x5a], bl
push rbx
je 0x40ac93
jbe 0x40acc4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40acbc
js 0x40acb2
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40acb2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40acf3
js 0x40ace4
js 0x40acda
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40acfa
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ad12
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ad2b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ad06
jbe 0x40ad37
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte gs:[r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
js 0x40ad65
pop rdi
jo 0x40ad55
jb 0x40ad65
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
js 0x40ad56
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40ad80
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ad99
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40ad8f
je 0x40ad74
jbe 0x40ada5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ad9a
js 0x40ad90
xor al, 0x62
jae 0x40adb7
jbe 0x40ad55
pop rdi
pop rdx
push rbx
je 0x40ad8c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40adcd
push r11
je 0x40ada2
jbe 0x40add3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40adc8
js 0x40adbe
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x40add8
jbe 0x40ae09
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40adfe
js 0x40adf4
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40adf1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ae2a
je 0x40ae3f
imul esi, dword [rbx + rsi*2 + 0x49], 0x65496153
xor r14d, dword [r15]
jae 0x40ae41
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x40ae4a
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x40ae6b
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40ae6c
jb 0x40ae6f
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40ae3d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ae7e
push r11
je 0x40ae53
jbe 0x40ae84
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ae79
js 0x40ae6f
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x40aeaa
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40ae82
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40aec3
push r11
je 0x40ae98
jbe 0x40aec9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40aebe
js 0x40aeb4
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40ae8b
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40aef9
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40af0c
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40aeda
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40aef8
jbe 0x40af29
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40af1a
xor al, 0x5f
pop rdi
jne 0x40af5b
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
js 0x40af72
js 0x40af7f
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40af54
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40af8a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40af94
pop rdi
xor byte [rbp + 0x50], al
js 0x40af8a
js 0x40af81
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40af80
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40afc1
push rbx
xor dword gs:[r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
js 0x40afc5
xor dword [r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40afbf
xor al, 0x5f
pop rdi
jne 0x40b000
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40afff
jbe 0x40b030
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b025
js 0x40b01b
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b017
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x40b02c
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40b091
jo 0x40b07f
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40b056
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b097
push r11
je 0x40b06c
jbe 0x40b09d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b092
js 0x40b088
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b09e
jbe 0x40b0cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte gs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40b0b6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b0f7
push r11
je 0x40b0cc
jbe 0x40b0fd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b0f2
js 0x40b0e8
push r11
push r11
xor bl, byte [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b0ed
jbe 0x40b11e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[r13 + 0x6d], eax
push rdx
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b109
xor byte [rdi + 0x49], bl
je 0x40b142
jb 0x40b13e
jae 0x40b148
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b14b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b164
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40b15a
je 0x40b13f
jbe 0x40b170
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b165
js 0x40b15b
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40b18b
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b162
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b1a3
push r11
je 0x40b178
jbe 0x40b1a9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40b19c
jbe 0x40b1cd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b1c2
js 0x40b1b8
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40b1ba
jbe 0x40b1eb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40b1e3
js 0x40b1d9
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
xor dword gs:[rbp + 0x76], r8d
add byte [rbx + 0x74], dh
outsd dx, dword fs:[rsi]
jne 0x40b240
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
xor al, byte gs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b250
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b259
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b24d
push rbx
je 0x40b23d
jbe 0x40b26e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b263
js 0x40b259
xor al, byte [r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40b25c
pop rdi
jae 0x40b29d
jb 0x40b29a
jns 0x40b276
push rbx
je 0x40b266
jbe 0x40b297
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b28c
js 0x40b282
jbe 0x40b291
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b280
jbe 0x40b2b1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword gs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40b299
jbe 0x40b2ca
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40b2b8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b2f9
push r11
je 0x40b2ce
jbe 0x40b2ff
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor ebx, dword [rdi]
add byte [rsi], ch
jae 0x40b335
insd dword [rdi], dx
je 0x40b320
add byte [rsi], ch
jae 0x40b338
jb 0x40b33a
add byte [rsi], ch
jae 0x40b334
jae 0x40b342
jb 0x40b344
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40b345
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40b353
outsb dx, byte cs:[esi]
jne 0x40b321
jne 0x40b35f
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40b32f
push 0x687361
jns 0x40b378
jae 0x40b385
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40b380
jae 0x40b388
jb 0x40b316
outsb dx, byte cs:[esi]
jne 0x40b349
jbe 0x40b382
jb 0x40b392
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40b356
jbe 0x40b38f
jb 0x40b39f
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40b39a
insb byte [rdi], dx
jns 0x40b3a9
add byte [rsi], ch
jb 0x40b3a4
insb byte [rdi], dx
jo 0x40b3b0
je 0x40b346
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40b37f
outsd dx, dword [esi]
je 0x40b355
je 0x40b3bd
js 0x40b3ce
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40b3d3
je 0x40b3c9
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40b3ec
jo 0x40b400
pop rdi
je 0x40b3f0
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40b3fe
jns 0x40b39f
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40b41a
jns 0x40b3ab
push 0x63
jb 0x40b3b0
jns 0x40b422
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40b42c
je 0x40b3c2
je 0x40b428
add byte [rsi], ch
jae 0x40b43f
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40b3d6
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rip + 0x40], al
add byte [rax], al
sub byte [rip], al
add byte [rax], al
ret 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xa000000000004007]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4009], bl
add byte [rax], al
add byte [rax + 9], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
ror byte [rcx], 0
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3c], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3c], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add al, dl
cmp al, 0
add byte [rax], al
add byte [rax], al
add ah, ch
add eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbx*2 + 0x40], bh
add byte [rax], al
mov esp, 0x5b
add byte [rax], al
add byte [rax + 1], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
pop rbp
add byte [rax], al
add byte [rax], al
add al, ch
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], ch
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], bh
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], bh
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0xb2
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
fcomp dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
jg 0x40bbb3
add byte [rax], al
add byte [rax], al
add al, dh
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
