call 0x401110
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400f28
add ebx, ebx
je 0x400ede
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400f16
cmp rbp, -4
ja 0x400f16
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400efe
add ecx, 4
mov dl, byte [rax]
je 0x400f26
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400f16
ret
cld
pop r11
cmp r8b, 2
je 0x400f3e
jmp 0x400fbb
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400f4e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400f36
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400f66
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400f53
sub eax, 3
jb 0x400f84
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400fbb
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400fab
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400fa9
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400f98
cmp rbp, -0xd00
adc ecx, eax
call 0x400eea
jmp 0x400f3e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401094
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401032
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40107e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401051
push 0x3a707474
jne 0x4010aa
js 0x40106a
jae 0x4010a4
outsb dx, byte cs:[rsi]
je 0x401063
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4010d1
jb 0x4010c3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4010ee
jb 0x401101
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211be0
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211be0
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400fcc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x4010f7
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x4010a5
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f119f
jb 0x4011b7
movsxd rbp, dword [rdi]
jae 0x4011b1
insb byte [rdi], dx
js 0x4011b7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401197
cmp rsi, rcx
jae 0x40119f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40117e
cmp al, 0x8f
ja 0x40117e
cmp byte [rsi - 2], 0xf
je 0x401184
sub al, 0xe8
jg 0x401181
push rdi
cmp al, 1
ja 0x40116c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40116f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x40119c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4011f3
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1671
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401237
mov al, 0xa
jmp 0x401237
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401213
inc ebx
mov al, 0
jmp 0x40123b
mov al, 2
jmp 0x40123b
mov al, 3
jmp 0x40123b
mov al, 0x3c
jmp 0x40123b
push rcx
rcr ah, 1
fstp st(7)
jle 0x40127c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x40128e
jg 0x401280
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6a03
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4012da
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6457
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4012e2
cmp esi, 0x21585055
jne 0x4012e6
jge 0x4012d8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4012db
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4012df
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40138b
pop rcx
or al, 0x3b
jb 0x401391
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401303
jmp 0x401305
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661246
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5348e
in eax, dx
jg 0x40133d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401383
mov bh, 0x2a
add edi, 0x10
jmp 0x401380
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4013bd
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4013f9
jne 0x401410
fstpnce st(6), st(0)
jle 0x4013d9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40140f
jrcxz 0x401443
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b3a7
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4014c2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401482
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295a57
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4014f5
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40148f
and ecx, 7
or al, 0xeb
jae 0x4014fa
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40152f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40156d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401526
push rax
call 0xffffffff868d1213
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401530
std
cmp edi, esi
xchg eax, edi
jle 0x401585
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95b11
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401583
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401571
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40159a
js 0x4015da
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40166c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad28a7
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40168d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401692
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21144
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401620
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
fadd dword [rax + rax]
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax - 0x78], al
sub byte [rax], dl
add byte [rax], al
add byte [rax], ah
add edi, edi
test al, 0x15
add byte [rax], al
mov esp, 0x2000006
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401746
je 0x40174f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401718
mov dh, 0x7d
jbe 0x401717
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401750
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5280006], bl
add byte [rsi], al
nop
nop
invd
add byte [rax], bh
or dword [rax], eax
fsubr dword [rip + 0xa27d807]
add byte [rax], ah
or byte [rdi - 0x7ec1f6f5], cl
jl 0x4016be
or al, 0
or eax, 0x9f0b2000
add byte [rax], dh
sldt word [rsi + rdx + 0x201f204f]
adc byte [rax], al
nop
adc dword [rax], eax
call 0x208c44df
adc bl, byte [rdi]
jbe 0x40179e
jle 0x40177b
add byte [rax + rbx + 0x17601d14], cl
stc
add al, 0xf2
add byte [rip + 0x16f800], dl
add byte [rsi], bl
insd dword [rdi], dx
add bh, cl
add byte [rdi], dl
add byte [rax], cl
sbb byte [rdi], al
pop rbx
nop
sbb dword [rax], esp
add bh, byte [rcx + 2]
stc
sbb al, byte [rax]
test al, 0x1b
add al, al
and al, 0xef
cmpsb byte [rsi], byte ptr [rdi]
insb byte [rdi], dx
sbb al, 0x13
add dword [rdi], edx
add al, 0
int1
lcall [rdx]
scasb al, byte [rdi]
sub al, 0x76
or al, 0x1b
mov edi, 0x19029719
ret 0x406e
adc eax, 0x801b1740
xchg byte [rax + rdx*4 + 0x21], ah
rol byte cs:[rsp + rcx + 0x36], 0x48
neg dword [rdi - 0x59]
rol byte [rcx], 1
push rbx
sbb esp, ebp
mov byte [rdi + 0x7a], cl
loopne 0x40182c
or dword [rcx - 0x5a6879df], edx
pushfq
sbb eax, 0xaed78436
adc al, 0x8f
jo 0x4017af
and byte [rbx - 0x71372e3e], al
xor edx, dword [rdi + rbx + 0x18883fd1]
test byte [rip + 0x37df5c21], cl
add byte [rdi - 0x4f], al
sub esp, dword [rbx]
jmp 0x401801
lahf
inc byte [rdi + 0x25]
mov word [rbp + 9], ds
not dword [rax + rbx*4]
adc al, 0x1f
fisubr word [rcx]
and eax, 0x1380717
add r11b, r8b
mov ebp, 0x2ad6f32
pop rdx
mov esp, 0x416e6b2b
add byte [rbp + 0x17], dl
xchg eax, ebx
sbb dword [rbp + 0x216df3c], 0x17
mov cl, 2
xor rbx, rax
leave
adc byte [rip + 0x2065472a], dl
test byte [rip + 0x17740361], cl
mov byte [rdi - 0x54], dh
enter 0x3610, -0x64
pop rdi
or byte [rbx], bl
ret 0xb6ae
rcl byte [rdi], 1
enter 0x6421, -0xb
adc al, 2
jmp 0x7061048c
or dh, byte [rdi + 0x53]
and byte [rsi], al
lodsb al, byte [rsi]
add byte [rdi + 0x11], ch
xchg eax, edi
add al, 0xc2
xchg byte [rax - 0x6e81a03f], dl
insb byte [rdi], dx
add byte [rcx + 0x18], ch
stosd dword [rdi], eax
scasd eax, dword [rdi]
adc byte [rax + 0x5d833d5f], bh
push rdx
out dx, eax
or byte [rdi], dl
retf
add cl, cl
mov r10b, 0x2f
mov eax, 0xd8b017d7
leave
and dword [rsp], ecx
ja 0x4018d3
xchg eax, edx
scasb al, byte [rdi]
xor esi, esp
movabs r8, 0x12002f67243bf03
fcomp dword [rdx + rsi]
test byte [rip + 0x4d173121], cl
popfq
fcom dword [r8]
jae 0x40192d
xchg eax, ecx
add esp, dword [rcx]
cmp ecx, esp
xchg eax, ebp
out dx, eax
cwde
add ebp, dword [rdi - 0x793de620]
mov al, 0xb9
int3
in al, 0x90
pushfq
jo 0x4018d6
test dword [rbx], 0x384c87f
rol cl, cl
mov ebp, 0x9ad12bf
clc
add dword [rdx], edx
out 0xee, eax
movsxd rsi, dword [rdx + 0x74]
jae 0x4018c2
inc esi
mov bh, 0x64
movsxd rbx, ebx
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
ljmp [rbp + 0x726564fd]
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401933
outsd dx, dword fs:[rsi]
in eax, dx
in eax, dx
outsd dx, dword [rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401983
jne 0x40199f
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x40192a
add bh, bl
fld xword [rbp + 0x29]
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xbedd
fisttp word [rax]
jb 0x4019b7
jns 0x4019a7
jb 0x4019c5
add byte [rsi + 0xa], ah
insd dword [rdi], dx
jne 0x401956
out 0xbe, al
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x40198d
or eax, 0xdf74295f
outsb dx, byte [rsi]
in eax, dx
test byte [rdx], ch
insd dword [rdi], dx
adc bl, byte [rdi + 0x47277070]
mov dil, 0xf7
fild dword [rcx + 0x4c]
jae 0x401993
pop rdi
pop r15
adc ebx, dword [rdx + 0x53]
sti
out dx, eax
fsubp st(5)
je 0x4019d1
cmp byte [rdx], dl
imul ebp, dword [rdi + 0x37], 0x4152464a
pop r15
insb byte [rdi], dx
stc
mov al, 0x99
ror byte [rbx], cl
push rbp
and byte [rsi - 5], dil
leave
push rdx
push rbx
cmc
push rsp
adc esi, esi
sub byte [rcx - 0x42edef9c], al
pop rbp
out dx, al
pop rdx
pop cx
wait
insd dword [rdi], dx
jae 0x401a4b
push 0x40fbbb7f
pop r15
xor ch, byte [rsi]
add dword [rcx], eax
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0xad62ec2
xor al, 0xa5
test byte [rdi], 0x67
insd dword [rdi], dx
test byte [rdi - 0x4d], bh
cmp dword [rax + 0x525f764a], ecx
pop rsp
insb byte [rdi], dx
jae 0x4019ed
sti
xchg dword [rbx + 0x59], esi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x401a4b
pop rax
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0xd9
mov dl, 0xdb
insd dword [rdi], dx
jo 0x401a83
je 0x401a7a
push 0x3419606b
xlatb
mov esi, 0x617863fd
pop rdi
jb 0x401a9a
push 0x1a776f72
xor byte [rcx + 0x2dae8585], bh
xor dword [rbx], ebx
cmp byte [rbx], cl
mov ebx, 0x740a15bb
jle 0x401a94
xor al, 0x49
mov bh, 0x43
xor dword [rbp + 0x58], eax
cmp ecx, esp
sub dword [rdi + 0x23be448f], ebx
mov ebx, 0x615d237d
popfq
js 0x401abe
fsub st(3)
push rdi
jb 0x401abf
pop rbp
push r12
pop r15
imul edi, esp, -0x4f
sub eax, 0x543c430c
and ebx, dword [rbx]
pop rdi
push 0x764faeb7
jno 0x401ad5
jne 0x401ab7
pop rax
jae 0x401ade
outsb dx, byte [rsi]
sub eax, 0x66b217b0
cmp eax, 0x8417b23b
lodsd eax, dword [rsi]
push rsp
xchg eax, ebx
jg 0x401ad2
mov dh, 0x6d
pushfq
add al, 0x97
jmp 0x401afa
jae 0x401a1c
push -0x487b4e7d
pop rbp
cmp byte fs:[rsi - 0x20789dde], cl
adc byte [rdx], cl
jae 0x401a70
movsxd rbp, dword [rbx + 0x62]
mov cs, word [rbx + 0x16]
or ch, byte [rbx - 0x5ecb93f7]
and eax, dword [rcx + 0x706f65f0]
sbb al, 0x15
jbe 0x401aef
test dh, dl
lea esi, [rip + 0x37318a7c]
movsd dword [rdi], dword ptr [rsi]
mov byte [rax - 0x6a], dl
and ah, byte [rbx]
add bh, byte [rdx - 0x4093dad1]
movsxd rdi, dword [rbp + 0x41]
loop 0x401b4c
rol bh, cl
cmp eax, eax
in eax, 0x32
js 0x401b1c
rcr dword [rdx + 0x2b], 1
mov ch, 0x7d
cmp eax, 0x86b444ff
in al, dx
and dword [rbx + 0x6b307677], edi
outsb dx, byte [rsi]
ja 0x401b69
pop rax
push rbp
imul esi, dword [rdi + rax*8], -0x2a
adc dl, byte [rbx + 0x64]
pop rbx
jmp 0xffffffff902436a1
scasb al, byte [rdi]
xchg eax, ebp
push rbx
xor byte [rdx + 0x10797063], ah
adc bh, byte [rsi]
mov esp, 0x6f3e3431
jne 0x401afa
cmp ebx, ecx
insd dword [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rbx + 0x79]
insd dword [rdi], dx
jp 0x401b8a
je 0x401b9d
push 0x736dcb09
or al, 0x86
mov dh, byte [rax + 7]
outsb dx, byte [rsi]
outsd dx, dword [rsi]
stosd dword [rdi], eax
movzx esi, byte [rbp - 0x7e]
sub eax, 0x670d6715
outsb dx, byte [rsi]
jne 0x401b73
test al, 0x42
lodsb al, byte [rsi]
cmp dword [rbp + r13 + 0x69], esp
ror byte [rip - 0x4233258a], 1
mov ch, 0x38
or dword [rcx + rdi*2 + 0x6e], esp
pop r8
jmp 0x401b2f
sbb dword [rsi - 0x31], esi
imul edx, eax, 0xbd825f0c
push rdx
rcr dword [rbx], 0x68
sub byte [rcx], cl
insd dword [rdi], dx
iretd
mov dh, 0x4d
je 0x401bea
stosb byte [rdi], al
or ch, byte [rdi + rbp*2]
rcr byte [rbp - 0x72f73c64], 1
add eax, 0x966f244e
cmp eax, 0x2e238f58
push 0x72646837
or eax, 0xe856f1ae
pop rbp
movsxd rbp, ebp
movsxd rsp, dword cs:[rbp + 0x70]
fnstsw dword [rbp - 0x46da4c9f]
insb byte [rdi], dx
adc dword [rdi + 0x6d6b0b43], edi
mov cl, 0xd6
push -2
movabs eax, dword [0xd9b31cd568ff6936]
jnp 0x401c18
and eax, 0xd6010a04
fsubr qword [rbp - 0x7b]
add byte [rax], al
or dword [rax + 0x1af3e2c], esi
lahf
leave
nop
pushfq
mov ebp, 0x11c3f07
and byte [rbx], al
ror byte [rbx], cl
push rsp
and al, 0x43
xor cl, al
push rsp
and byte [rax + rcx*8], al
and byte [rbx + 0x32], al
xor dword [rsp + rsi*2 - 0x1c], esi
fst qword [rax + 0x32]
and al, 0x44
jg 0x401be8
ljmp [rdi - 0x70]
cmp dword [rax + 0x219a3498], ebx
sbb dword [rbp + rax + 8], esp
or r8, qword [rdi]
sbb dword [rax + rax*2 - 0x30], ebp
rcr byte [rax + 2], 1
nop
leave
sti
sbb byte [rsi - 0x40], ah
xchg eax, edx
push si
add esp, dword [rdi - 0x45]
sahf
fld qword [rcx]
pop rsi
mov edi, 0xa4b019bd
dec dword [rdi - 0x6f26f2f9]
pushfq
mov edi, 0x6b070232
enter 0x320, -0x2e
cmp byte [rax], bh
push rbx
sbb esi, dword ss:[rsi]
movabs al, byte [0x82c39377affa757]
push rbx
fadd dword [rdi]
and esp, esp
add al, 0x3f
call qword [rbx - 0x7b27cda0]
and byte [rdi + 0x3f077b3c], dl
mov al, 1
sbb dword [rdx], esp
enter 0xc20, -0x72
adc eax, dword [rsi]
sub byte [rcx], bh
loope 0x401c3f
sysret
lcall [rdx]
nop
xchg byte [r9 + rcx*4 + 0x3f], bpl
jb 0x401cb3
add dword [rax], edx
xchg eax, esp
or al, 0x37
or dword [rdx + 0x7f], eax
jbe 0x401cf6
or ecx, dword [rdi]
popfq
xor byte [rdx], al
jns 0x401c80
jg 0x401cf0
or esp, dword [rdx + rax*2 - 0x5cc0278e]
sbb cl, byte [rdx - 0x32]
fiadd word [rdi]
dec dword [rcx]
test eax, 0x48549bd9
mov edi, 0x36bf075f
leave
pop rax
mov cl, 0x3f
call 0xffffffff83652941
or al, 0xe8
cmp al, 0xbf
int3
int 0x82
nop
jg 0x401cd6
leave
add ecx, ecx
fsubr qword [rdi + rbp*2]
jg 0x401c60
rcl byte [rax - 0x4024e45a], 0xe
add eax, dword [rbx - 0x37]
fnstcw word [rbx]
test dword [rdi], 0xb8e710ff
leave
xor byte [rdi + rdi + 0xf], 0xf8
sub al, 0x3b
and bh, bh
pop rbp
or byte [rbp + 6], 0xef
clc
out 0x66, al
mov bl, 0x25
wait
jg 0x401c9e
and dword [rcx], edi
jns 0x401d02
add dword [rsi], eax
adc byte [rdx + rsi*4], cl
sub eax, 0x1fbf9864
jb 0x401cb2
or byte [rcx], al
add dword [rip + 0x37558767], esp
and byte [rdi], bh
test al, 0xb8
leave
nop
or al, 0xa
test al, 7
xor byte [rdi + rdx + 0x20], 0x7f
adc byte [rdi], bh
or byte [rdx - 0x6a], bl
stosd dword [rdi], eax
leave
sar byte [rdi + 0x3c9d9027], 0x48
adc eax, 0x16173001
ret 0xb0e0
xor al, 0xbf
shr byte [rcx], 0x9b
sbb eax, 0x3b007b11
sub eax, 0x9c942336
mov edi, 0x7300bb1e
repne lodsb al, byte [rsi]
push rdi
and bh, bh
or byte [rdi], bl
add ecx, dword [rax + 0x32]
or dword [rdi + 0x30], edi
sub dword [rax], eax
pop rax
and al, 0x4f
or eax, dword [rax + rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0xff
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip + 0x44080216], ecx
xor esi, esi
movabs eax, dword [0xbc000015a82dab4e]
add byte [rax], al
add byte ss:[rax], al
add byte [r8], al
int 0xf4
add byte [rax], al
add bh, bh
