call 0x401e68
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401c80
add ebx, ebx
je 0x401c36
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401c6e
cmp rbp, -4
ja 0x401c6e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x401c56
add ecx, 4
mov dl, byte [rax]
je 0x401c7e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401c6e
ret
cld
pop r11
cmp r8b, 2
je 0x401c96
jmp 0x401d13
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401ca6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401c8e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401cbe
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401cab
sub eax, 3
jb 0x401cdc
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401d13
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401d03
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401d01
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401cf0
cmp rbp, -0xd00
adc ecx, eax
call 0x401c42
jmp 0x401c96
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401dec
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401d8a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401dd6
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401da9
push 0x3a707474
jne 0x401e02
js 0x401dc2
jae 0x401dfc
outsb dx, byte cs:[rsi]
je 0x401dbb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401e29
jb 0x401e1b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401e46
jb 0x401e59
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x215fec
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x215fec
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401d24
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401e4f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401dfd
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f1ef7
jb 0x401f0f
movsxd rbp, dword [rdi]
jae 0x401f09
insb byte [rdi], dx
js 0x401f0f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401eef
cmp rsi, rcx
jae 0x401ef7
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401ed6
cmp al, 0x8f
ja 0x401ed6
cmp byte [rsi - 2], 0xf
je 0x401edc
sub al, 0xe8
jg 0x401ed9
push rdi
cmp al, 1
ja 0x401ec4
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401ec7
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401ef4
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401f4b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c23c9
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401f8f
mov al, 0xa
jmp 0x401f8f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401f6b
inc ebx
mov al, 0
jmp 0x401f93
mov al, 2
jmp 0x401f93
mov al, 3
jmp 0x401f93
mov al, 0x3c
jmp 0x401f93
push rcx
rcr ah, 1
fstp st(7)
jle 0x401fd4
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401fe6
jg 0x401fd8
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a775b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x402032
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb71af
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40203a
cmp esi, 0x21585055
jne 0x40203e
jge 0x402030
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x402033
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x402037
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x4020e3
pop rcx
or al, 0x3b
jb 0x4020e9
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40205b
jmp 0x40205d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661f9e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf541e6
in eax, dx
jg 0x402095
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4020db
mov bh, 0x2a
add edi, 0x10
jmp 0x4020d8
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x402115
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x402151
jne 0x402168
fstpnce st(6), st(0)
jle 0x402131
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x402167
jrcxz 0x40219b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1c0ff
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40221a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4021da
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582967af
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40224d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x4021e7
and ecx, 7
or al, 0xeb
jae 0x402252
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x402287
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4022c5
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40227e
push rax
call 0xffffffff868d1f6b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x402288
std
cmp edi, esi
xchg eax, edi
jle 0x4022dd
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c96869
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4022db
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x4022c9
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x4022f2
js 0x402332
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4023c4
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad35ff
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x4023e5
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4023ea
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21e9c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x402378
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
int3
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
adc byte [rax], cl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp qword [rax]
pop rbx
add byte [rax], al
std
adc eax, 0x20000
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40249e
je 0x4024a7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x402470
mov dh, 0x7d
jbe 0x40246f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4024a8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5280006], bl
add dl, ch
enter -0x37f9, 0xf
or byte [rax], al
and byte [rdi], al
or dword [rax], eax
movabs al, byte [0xbe8000a13c813e4]
add byte [rax - 0x1bf60df7], bl
add ecx, dword [rax + rax]
ror byte [rip + 0x1f0af000], 0x60
fild dword [rcx]
add al, 0xb
sldt word [rdi - 0x70]
seto byte [rax + rdx]
add byte [rax + 0x11], dl
add byte [rax], al
nop
rcl byte [rdx], 1
pop qword [rdx - 0x11]
in al, dx
jb 0x40243f
cld
adc eax, dword [rax]
mov esp, 0x605d145b
or esp, esp
add dword [rip + 0x16f800], edx
add byte [rsi - 7], bl
add al, 0xf2
add dword [rdi], edx
add byte [rax], cl
sbb byte [rax], al
clc
pop rdi
jl 0x402460
cld
add byte [rcx], bl
add byte [rax], al
sbb al, byte [rax]
test al, 0x36
cmp dword [rcx + rax*4], 0x1cc0001b
adc edi, dword [rbx]
xchg eax, edx
ja 0x402549
add dword [rdi], edx
add al, 0
int1
dec dword [rbx + rbx]
xor al, 0xd
push rdi
mov edi, 0x30029719
xor bl, r8b
nop
sbb edx, dword [rdi]
jo 0x40253d
out dx, al
or eax, 0x44b020c9
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
adc byte [rcx], bl
insb byte [rdi], dx
nop
rol byte [rcx], 1
push rbx
xor bl, r8b
xchg eax, ebp
jp 0x40256d
rol byte [rsi + 0x2212bb08], 1
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
leave
sbb eax, 0x6027ae67
ja 0x4024f9
xchg byte [rax + rsi*4 - 0x37], ah
rcr eax, 1
sbb edx, dword [rdx + 0x6217ed61]
rol dword [rsi], 0x19
cli
push -0x1be640f8
in al, dx
leave
add al, byte [rcx]
cmp eax, 0x323e1717
movabs eax, dword [0x321b97157b064184]
add dword [rdi + 0x17549fb8], r14d
mov al, 0x10
outsd dx, dword [rsi]
and esi, dword [rsi + 0x25]
mov al, 0x17
jae 0x4025c3
outsd dx, dword [rsi]
cmpsb byte [rsi], byte ptr [rdi]
test byte [rcx + 0x142f892b], dh
xchg eax, edi
and esi, dword [rsi]
and eax, 0xad7f17cc
out 0x9c, eax
insb byte [rdi], dx
mov edx, 0x22efb62b
loop 0x4025c2
cmp byte [rsi], al
nop
in eax, 0x60
iretd
xchg eax, edx
adc esp, dword [rax]
cmc
cmp eax, ebx
leave
shr dword [rdi], 0x53
cmp cl, byte [rsi]
add r12b, byte [rax]
sbb dword [rsp + rdi + 0x6a5436b0], 7
sbb esp, esp
in al, 0x90
and byte [rax - 0x68], cl
xchg byte [rbx], ah
cmp eax, ecx
and byte [rdi], ah
mov al, 0xaa
leave
cmp dword [rdx - 0x22], eax
mov byte [rcx], ch
xchg eax, esi
add eax, 0x33
jrcxz 0x4025df
add edx, dword [rdx]
sbb dword [rbp + rbx + 0x285f031d], 0x35
or al, 0x72
jb 0x4025ae
and al, 0x63
nop
xchg eax, ebx
adc esi, 0x37
sbb eax, 0x9c8393ce
sbb al, 0x24
cmp byte [rip + 0x320e0444], ch
enter 0x55c9, 0x2c
mov ds, word [rdi - 0x6f8ddd7c]
shl r10, 1
xlatb
or al, 0x72
pop rsi
not byte [rdx]
ja 0x402656
cmp al, 0x90
pushfq
sbb al, 0xe4
add al, byte [rsi]
add eax, 0xf6720c51
in al, 0x7c
add eax, 0x1b2f1cac
stosb byte [rdi], al
nop
xchg eax, ebx
sbb dword [rsi + rsi + 0x53], -0x38
add al, 0xde
or edi, dword [rbx]
cmp dl, bh
xchg eax, esi
adc esi, dword [rdi - 0x31]
in al, 0xc9
sar dword [rax + 0x6210f2a], 0x2a
sub dword [rax + rdx*4 + 0x6602f67], edi
ja 0x402614
mov es, word [rsi]
mov ebx, 0x22c72790
cmpsb byte es:[rsi], byte ptr [rdi]
xor al, 0x39
enter 0x2720, 0x4c
in al, 0x26
sbb eax, 0x39072793
push rax
add al, 7
push rdx
xor eax, dword [rbp + 0x13c6793c]
add dword [rdi + 0x21], ebp
outsd dx, dword [rsi]
cmp dword [rcx], edi
fsub dword [rdi + 0x17]
or ebx, dword [rbx + 0x4116b0bd]
movsx edi, word [rdx + 0x4e41c907]
sahf
xlatb
sub byte [r9], sil
call 0x2f4a0a9e
in al, 0x28
and dword [rax], ebp
or bh, al
fisub word [rbx]
in al, 9
insb byte [rdi], dx
or byte [rdi + 0x8b52d69], dl
mov ebx, 0xb8bf6790
xor edx, edx
sbb byte [rip + 0x217a7657], r12b
add al, 9
pop rdi
add byte [rbx], dl
enter 0xe13, 0x61
or dword [rdi], eax
xor al, 0x7a
and edi, ecx
pop rsi
or r15, r13
in al, dx
insb byte [rdi], dx
or dword [rsi - 0x62], ecx
mov ebp, 0x9801740
mov edi, 0x166f2f7d
test byte [rbx + 9], al
sbb dword ss:[rdx + rdx*4 + 0x47ca2e70], edi
fstp st(2), st(0)
or dword [rsi - 0x8d86f44], ebx
sub ch, byte [rdx]
or eax, ecx
sbb eax, 0x30bd2724
push rdi
adc al, 0xa
pop rdi
pop rsi
and esp, ebp
add bh, byte [rbx]
push rbx
or ah, byte [rdi + 0xbb0176d]
jns 0x4026d2
or al, byte [rdi]
int 0x35
test al, 0x2f
in al, 0x19
xchg ebp, ecx
or ah, byte [rdi]
scasb al, byte [rdi]
int1
cmp eax, ecx
leave
rcl dword [rdi], 0x32
sub al, 0x23
xor ecx, dword [rbx]
and byte [rbx + 0x1a8c3c9c], al
push 0x54
sahf
sbb al, 0xec
in al, 0xa4
xor dword [rdi + rbx*2], edx
nop
or edx, dword [rsp + rbx + 0x42f605e1]
mov ah, 0xb
ror dword [rbx], cl
cmp al, 0xe9
test dword [rdx + rdi], edi
sbb esi, eax
or ebp, dword [rdi]
xor eax, ecx
xchg eax, ebx
sbb dword [rdx + rbx + 0x20400c2e], 0x5d
enter 0x5e33, 0x4e
or al, 0xcf
add al, 0x37
mov eax, 0x8393841c
xor ch, byte [rax]
sysret
out 0xc, eax
and edi, ecx
jp 0x4026f7
or ecx, dword [rip + 0x5e214497]
enter 0x7813, 0x42
or eax, 0x701df2b7
or eax, 0x4f2178c
xchg dword [rax - 0xf252d8], ebx
in al, 0xd9
or ecx, edx
or eax, 0xd717ceef
or eax, 0x2793907
push rdi
retf
sub byte [rsi], ch
sbb al, 0xe
mov esp, 0x2df32790
ja 0x4027bb
outsd dx, dword [rsi]
nop
pushfq
mov ebp, 0xe872790
pop rdi
mov dl, 0x72
test byte [rdx], 0xe1
xchg eax, esp
jg 0x40276e
nop
enter -0x7c6d, 0xc
adc dh, byte [rsi + 0x5e27db0e]
enter 0x5e93, -0x17
mov edi, 0x4e0f1e30
pop rsi
enter 0x5733, 0x3a
push rdx
sysret
jns 0x402855
nop
sub dl, byte [r8 - 0x1ee74ff1]
add eax, 0xfb10bd2
out 0xf, al
fcomip st(2)
in al, dx
test dword [rcx + rbp*8], edi
sub dword [rax + rdx], edx
pop rdi
test byte [rdi], bl
test byte [rdi], dl
adc r15b, r14b
or al, 0x2d
outsd dx, dword [rsi]
in al, dx
test dword [rcx + rax*4], edi
adc byte [rdi + 0x10ad3602], al
sti
add eax, 0x40f490d6
or dl, bh
adc byte [rdi - 0x3a], bh
and dword [rcx], edi
jmp 0x402810
adc byte [rdi], bl
sbb cl, byte [rbx]
adc dword [rdi + 0x79390727], ebx
fcomp qword [rbx]
adc dword [rbx + 0x21], edi
iretd
cmp byte [rsp + rcx*4], ah
adc dword [rdi], edi
test al, 0x27
jbe 0x4027f7
sbb al, 0x20
adc byte [rsi], al
lodsb al, byte [rsi]
rcl byte [rcx], 1
add al, 0x4f
ror byte [rbx], 0x79
jb 0x402831
adc dword [rdx + 0x1b], esi
or eax, 0x8360e412
pushfq
mov bh, 0x5d
sub dword [rdi - 0x530dedbb], edi
push rsp
sbb dl, byte [rdx + 0x12]
out 0x34, al
ret
nop
xchg byte [rdx], dl
cdq
in al, 9
test byte [rax], ah
jg 0x402835
adc dl, byte [rdi - 0x61bdcea4]
sbb al, 0xe4
and byte [r11], r10b
sbb ch, byte [rbx]
mov esp, 0x48f16790
adc esp, edi
in al, dx
jbe 0x4028a6
and byte [rip - 0x6f80dfa3], cl
adc byte [rbx], bl
xchg eax, edx
mov bl, 0xe
popfq
adc edi, dword [rdi - 0x60]
rcl dword [rdi], 0x13
jp 0x4028c9
mov edx, 0xa713e51f
adc byte [rsi - 0x38], bl
ja 0x4028df
xor byte [rdi + rcx*2], dl
pop rsi
adc al, 0xc1
in al, 9
jbe 0x4028df
movabs dword [0xe8224cc85e04f217], eax
adc al, 0x27
int3
xor al, byte [rbp + 0x14178b3c]
adc eax, 0xeb34f49f
test dword [rcx], edi
xor dl, byte [rip + 0x65225a4f]
adc eax, 0xf1279037
add dh, byte [rdx + 0x15]
in al, 9
mov esp, 0x46cf15b6
sub eax, 0xe8415e6
leave
sbb dword [rdi + 0x471643f3], eax
or edi, dword [rcx - 0x3a]
or esi, dword [rcx + 0x16]
iretd
sbb al, r11b
test dword [rsp + rdi*4], edi
mov dl, byte [rdi]
sub bh, byte [rcx + 0xb9a0117]
cmp dword [rsi - 0x8ee0ed3], edx
add eax, 0x82eb072
add al, 0x17
jmp 0x4028aa
cmp al, 0xe1
and eax, 0x35489717
test dword [rdx], 0xf23c85e1
and al, 0x69
mov ebp, 0xadf46790
fisttp word [rbx + 0x3b]
add ebx, dword [rax]
jb 0x4028d5
xchg eax, ebx
sub dword [rdx], ebx
sub ebx, dword [rcx]
sbb ah, ah
or edi, dword [rcx + 0x7e]
cmp byte [rdi + 0x18], ah
ja 0x4029cb
xor al, 0xd8
add eax, 0x18842f46
mov dl, 0x17
retf
sar dword [rax], 0x39
leave
cmp ah, byte [rbp - 0x49]
or byte [rcx], bl
adc dword [rsi + 0x2964870], ebx
mov eax, 0xc1971914
and al, 0x4e
sahf
int1
movsxd rbx, dword [rcx]
iretd
movabs byte [0x1919439086045839], al
lahf
leave
or ebx, dword [rdx]
sbb dh, byte [rdi - 0x50]
sbb al, byte [rcx + 0x7f8c0bc5]
sbb r9b, r15b
pop rsi
enter 0x7893, 0x68
sbb dl, byte [rdi + 0x1ad93a08]
adc dword [rdi], -0xe
sub al, 0xcf
cmp esi, dword cs:[rdx]
sbb eax, dword [rdi + 0x4f]
loop 0x402937
cmp al, 0xbb
sub dword [rbp + 0x1b], esp
enter 0x2f1c, 0x30
jp 0x4029df
mov bl, byte [rbx]
jg 0x40298c
sbb edx, esp
or edi, dword [rcx + 2]
seto byte [rax]
jrcxz 0x4029e7
leave
sahf
iretd
add dword [rcx + rdi*2], ebx
ret 0xe10b
sar byte [rbx], 1
jg 0x4029ef
sbb al, 0x67
sub esp, dword [rdi]
or edi, dword [rcx - 0x2e]
or esp, dword [rax + 0x1c]
ja 0x40298f
sub eax, 0xc27243a4
sahf
sbb al, 0x7f
xor ah, bh
sbb al, 0x2f
jb 0x4029ec
movabs byte [0x4f2119bc1d2e6121], al
js 0x402a26
push rdx
sbb eax, 0x76211caf
and dword [rdi + 0x78], ecx
xchg byte [rip - 0x69d69d99], bl
loop 0x4029a8
or al, 0x10
retf 0x671d
leave
or dword [rsi + rdi*8 + 0x36f8571d], edi
jns 0x4029fb
or eax, dword [rdi + rsi*4]
ja 0x402a82
sbb dword [rbx], ecx
jns 0x402a0a
or edi, dword [rcx + 0x1e]
mov cl, 0x30
ror byte [rbx], 0x79
ret 0x1ebf
xchg eax, edi
in al, 0x1e
in al, 0xc
and dil, r11b
pop rdi
jo 0x402a7e
in al, 9
xchg dword [rbx], esp
jg 0x4029f2
xor eax, 0x8cf21f8d
or byte [rdi], al
popfq
outsb dx, byte [rsi]
and ecx, ecx
jne 0x402a7e
adc byte [rbp + 0x47], dl
cmp dword [rcx - 0x3e], edi
loopne 0x402a91
xchg eax, edi
jbe 0x402a92
and byte [rcx], cl
mov esp, 0x1af62790
and byte [rdi], ah
enter 0xe13, -0x37
shr byte [rcx + 0x20], 1
jrcxz 0x402ab7
and ecx, esp
cwde
pop rbp
xchg eax, ebp
clc
add r15b, byte [r8 + r8*2 + 0x6720b978]
and byte [rdi + 0x4ea40bc], dl
or dword [rcx], esp
dec dword [rax + 0x21]
in al, 0xa4
pop rax
push rdi
and dword gs:[rdi + 0x61], esi
mov ebp, 0xd6876790
and edi, ebp
cli
xor bh, byte [rdx]
jns 0x402ab2
sahf
cmp dword [rbp + 0x2809bf22], ebp
sahf
or ebx, edx
and al, byte [rdi + 0x42f42a50]
sahf
and eax, dword [rdi]
sub dword [rsi], 0xe04e2343
nop
pushfq
sbb esi, dword [rcx + 0x23]
retf -0x61be
jo 0x402b30
mov edi, 0x2b546723
cmp ah, byte [rdi]
hlt
out dx, eax
and eax, edi
pop rsp
and al, 0x42
sahf
mov ebp, 0x244b2f40
mov edx, 0x790bc01d
idiv byte [rsi + 0x24]
fdiv qword [rip + 0x102249b]
outsd dx, dword [rsi]
int 0x24
fucomip st(1)
test dword [rsp + rbp*2], ebx
pop rdi
and eax, 0xf6790b8f
add dl, byte [rdx + 0x25]
mov esp, 0x23217a3b
rcl byte [rcx - 0x42d1e0db], 0x25
sbb al, 0x92
mov bl, 0xef
push rsi
fisub dword [rip + 0x2042097]
mov esp, 0x25fe1c90
loopne 0x402acb
cmp al, 0xe1
sbb esp, dword [rsi]
jg 0x402bb6
sbb al, 0x31
sahf
mov ebp, 0xf9d79190
jno 0x402b7d
pop rdi
xor eax, 0xf19e4e37
mov ebp, 0x25623f26
pop rcx
leave
leave
out dx, al
mov byte es:[rdi + 0x27], bl
movabs dword [0x179b333ed7cf2177], eax
fild word [rip + 0x3ae42f42]
pop rdx
and dword [rcx], edi
jmp 0xffffffffd8ff2d1c
in al, dx
add eax, 0x52172807
cmp r12b, byte [r9]
mov byte [rax], ch
xlatb
mul byte [rsi]
mov ch, byte [rax]
js 0x402b21
mov esp, 0x289ff7c0
int 0x28
test byte [rbx], dl
jb 0x402baf
fild word [rdx]
or byte [rcx], ch
add ah, byte [rcx + 0x22cef217]
cmp dword [rcx], ebp
int1
sahf
push rdx
sub dword [rdi + 0x29802b29], edx
jb 0x402b57
xchg eax, ebx
xor byte [rbx - 0x42], cl
sub dword [rdi], edx
fmul dword [rbx]
jns 0x402b57
sub al, byte [rbx]
sub bh, byte [rdi + 0xe09021f]
sub r14b, byte [r15 - 0x5f]
adc ecx, dword [rax]
jo 0x402c4f
sub al, byte [rdi]
xchg eax, ecx
sub ah, byte [rdi + 0x2f04813]
leave
sub bl, byte [rdi - 0x17]
or eax, dword [rsi + rcx]
ja 0x402c00
sub ebx, dword [rdi - 0x3b9c6f63]
sub edx, dword ds:[rdi]
retf
sub eax, dword [rdi - 0x1bd0a9d5]
or dword [rdi + 0x2bca2692], ecx
mov al, 0xe2
add eax, 0x17272bf2
sub al, 9
in al, 0x49
ja 0x402bf7
and byte [rdx + 0x2c], cl
leave
in al, 0x24
mov byte [rdi + rbp], ch
sbb al, ch
or esp, dword [rsi + rcx*2]
sub al, 0xaf
mov bl, 0x2c
test dword [rbx + rdi*2], edi
sbb dword [rdi - 0x5d58d328], 0x10270117
call 0x206f5929
sub eax, 0x8c85e090
push rdi
rol byte [rcx + 0x2d], 0xa7
leave
pop rcx
sub rax, 0x2d8dae4f
pushfq
je 0x402c61
sub dword [rdi - 0x2f], edi
sub eax, 0xe4e472ef
and byte [rbx - 0x53d20dda], al
or edi, dword [rcx + 0x16]
xchg dword [rsi], edi
mov bh, 0xcc
add ch, cl
add eax, 0xdf2e70c2
sub dword [rsi], 0x77
jns 0x402c58
and esp, ebp
ret
fld xword [rsi]
mov cl, 0x2a
in al, 0xd9
or ebx, dword [rbx]
lodsb al, byte [rsi]
and edx, dword [rsi - 0x6d]
pop rsi
enter 0x2241, 0x3a
sub dword [rdi], 0x5e0b02d7
enter 0x25bc, -0x50
imul eax
test dword [rsp + rbp*2], ebx
rol byte [rdi - 0xf], 0x25
sti
nop
mov ebp, 0x30191fc0
fnstsw ax
xor dh, ah
sahf
mov ebp, 0x8c773057
and al, 0x9a
xor byte [rbx], cl
test byte [rbx], dl
or byte [rdi - 0x73b0cf49], cl
and bpl, r8b
jmp 0x314a6407
and byte [r15], r8b
sbb esp, esp
cli
movsxd rsi, dword [rcx]
pop rcx
adc byte [rsi - 0x6b], bl
xor edi, ebx
mov dh, 0x31
scasd eax, dword [rdi]
add eax, 0x2ee42f42
int1
xor dword [rdi - 0x44], esi
nop
adc eax, esp
xor dword [rdi - 0x38], edi
adc dh, byte [rdx]
push rbx
fld qword [rsi + rdx]
fist word [r10]
push rdi
xor byte [rbx - 0xe], 0x64
test byte [rbx], 0x47
or ecx, dword [rbx]
sbb byte [rbp + 0x321f3f12], bh
jg 0x402d6f
in al, 0x60
pop rdi
int1
sub al, 0x7c
xor cl, byte [rdi + 0x5e21027]
xchg eax, ebp
xor bh, byte [rdi]
mov ecx, 0x81217f32
adc al, 0x97
cmp byte [rdx + 0x74], dh
jae 0x402da9
jne 0x402d9d
in eax, dx
call rsi
pop r15
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x402db3
imul esi, esi, 0x1ad6ffee
pop rdi
je 0x402dc6
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x402d82
outsd dx, dword fs:[rsi]
pop rdi
or ebp, ebp
mov bh, 0xff
mul byte [rdx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x402dd2
jne 0x402dee
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x402de7
sub dword gs:[rdi + 0x7f], ebp
cmp ebp, 0x35372e64
cmp byte [rip + 0x69665f24], dh
outsb dx, byte [rsi]
imul ecx, dword [rax], 0xdf617272
outsb dx, byte [rsi]
add eax, 0x655f79fe
outsb dx, byte [rsi]
je 0x402e0d
jns 0x402d66
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x402d68
mov edx, 0xd327301
pop rdi
sub dword [rdx + rbp - 1], esi
outsd dx, dword [rsi]
mov bh, 0x76
insd dword [rdi], dx
adc bl, byte [rdi + 0x5a277070]
push rbx
je 0x402e0a
xor dword [rcx], edi
jo 0x402e2b
movsxd rsp, dword gs:[rbp - 0x27]
mov bh, 0xad
mov ch, 0x77
pushfq
xor byte [rdx + 0x6e], bh
movabs byte [0xbd836b1a74637572], al
fstp xword [rax]
imul rbp, qword [rdi + 0x3e], -0x787dccd7
fcmovne st(0), st(7)
cmp dh, byte [rdi + 0x63]
test byte [rdi + 0x67], cl
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0xb5ad650f
fnsave dword [rdi + 0xc]
xor r13, qword [rbp + 0x6f]
xor al, 0x31
and eax, 0xd8dbb9ad
imul esp, dword [rbx + 0x7a], 0x7a693469
or eax, 0xfedf345a
fld xword [rsi + 0x64]
xchg eax, ebx
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
mov ebx, 0x4c41ddf7
xor dh, byte [rbp + 0x62]
pop rdi
pop r15
wait
mov edi, 0x4d415246
pop r15
xchg eax, esi
wait
ror byte [rdx], 1
or r8d, dword [r15 + 0x4e]
push rbp
test qword [rdi + 0x4820c1ec], rbx
push rdx
push rbx
push -0x7b
fdivr st(3)
push rsp
sub r14b, r14b
adc dh, dl
fucomp st(6)
mov edx, 0x44d4729e
pop rcx
mov r11b, 0x4e
leave
clc
jle 0x402e60
xor dword [rdx], esi
setnp byte [rdi + 0x79]
xor byte [rbp + 0x45], al
cmp dword [rsi + 0x7c667b70], ebp
adc ecx, dword [rcx + 0x50]
and dword [rsi], esi
jbe 0x402eb4
sti
outsd dx, dword [rsi]
test byte [rcx + 0x65], 0x53
add eax, dword [rbp]
jbe 0x402f09
push rbx
pop rdi
pop rbp
sub byte [rdx + rbx*8], bl
xor byte [rbp + 0x4947a6dd], bh
movabs rax, qword [0x784f751638c1617d]
js 0x402ee6
or ah, byte [rax]
fisttp qword [rsi]
scasb al, byte [rdi]
movabs eax, dword [0x654b4b3c1f69bd6d]
movsxd rbx, dword [rbx + 0x2c]
or byte [rbp + 0x71], 0x2d
push rbx
int 0x4d
fstpnce st(0), st(0)
push rbx
pop rax
sub byte [r11], sil
int 0x79
mov es, word [rbp + 0x1a1b7b29]
xor dword [rax - 0x244be6b3], esi
adc cl, byte [rdx]
movsb byte [rdi], byte ptr [rsi]
js 0x402f00
insd dword [rdi], dx
push rdx
insd dword [rdi], dx
sbb ebx, edi
and bp, word [rdx + 0x78cbdf38]
mov edx, 0x1c6e1231
fsubr dword [rdx + 0x5f779433]
jrcxz 0x402edc
pop rsp
mov al, 0x6d
and rax, 0xffffffffb3450c38
jbe 0x402f35
wait
mov ebp, 0x75562749
jp 0x402f49
jl 0x402f75
pop rdx
sub ax, 0x72f0
je 0x402f88
mov al, 0xed
pushfq
pop r15
xor ch, byte [rsi]
add dword [rip + 0xac9783e], esi
cmpsb byte [rsi], byte ptr [rdi]
imul edi, dword [rax + 0x33], 0x2cb6406a
sub dword [rbp - 0x5f], 0x38f22e6d
leave
je 0x402ef4
or eax, dword [rip + 0x37402253]
jl 0x402f3e
fisttp qword [rsi + rbp*2]
cmp al, 0xdd
test esi, ebx
scasb al, byte [rdi]
push rbp
or byte [rcx + 0x33453143], cl
push rbp
je 0x402f6f
mov bh, 0x67
xor dword [rdx], 0x6e753630
push rax
insb byte [rdi], dx
fsubr st(3)
fsub dword [rip + 0x311f7970]
mov dh, 0x1b
adc al, 0x2d
push rbx
fldcw word [rbp + 0x78]
rol byte [rax], 0xad
movabs eax, dword [0x2439064b78d0c35]
and ecx, dword [rsp + 0x327542b0]
xlatb
outsb dx, byte [rsi]
sal byte [r15 + r14*2 + 0x30], cl
xor eax, 0xc3dc5016
jl 0x402f6e
pop rax
insd dword [rdi], dx
push rbx
xor al, 0x5f
movabs eax, dword [0xee54d0d870902c5d]
adc dword [rip - 0x651f64be], 0x36027e69
fcmovnu st(0), st(0)
jrcxz 0x403002
xor bl, byte [r11 + 0x24]
pop rdi
movabs byte [0xc2f563b52ac42162], al
xchg eax, edi
xor al, 0xac
test byte [rax], al
movsd dword [rdi], dword ptr [rsi]
mov dh, 9
mov al, 0x95
fadd qword [rax + rdi*4 + 0x76]
pop rsi
add ebp, dword [rdi]
nop
pop rbx
xor eax, 0x1d6ea462
pop rdx
or dword [rbx + 0x41dad290], ebp
pop rax
sub edi, dword [rcx - 0x2e]
xor dword [rdx + 0x22], ebp
imul edx, dword [rsi - 0x4e], 0xb816a49
jmp 0x32238860
cmc
push 0x2c
nop
mov eax, 0x1ad6e105
cwde
retf 0x73cf
xor spl, byte [r14 - 0x7f]
in eax, dx
mov dh, 0x5d
mov byte [rdx + 0x3c64585f], ch
cmpsb byte [rsi], byte ptr [rdi]
adc al, byte [rdi + rsi + 0x69]
pop r9
cdq
push rdx
cmp al, 0xb9
or ebp, dword [rdi + rdi*4 - 0x6e]
sbb byte [rdi - 0x80], dh
adc bpl, byte fs:[r8]
jge 0x403019
xchg eax, esp
jmp 0x5f92d293
retf
fcmovb st(0), st(4)
mov dh, 0x35
sbb r11, qword [rdi + 6]
cmp ch, byte [rsi + 0x63]
enter -0x4096, 0x61
sti
hlt
xor al, 0x74
jns 0x4030cd
mov sil, 0x69
adc dl, byte [rsi - 0x4a]
push rbx
or al, 0x36
sub eax, 0xdb4f206
pop rbx
sbb dh, byte gs:[rcx]
jmp 0x4030bb
and byte [rip + 0x788c72b2], bh
sub eax, 0x295816c2
wait
hlt
retf 0x5648
wait
jge 0x403060
sahf
or ebp, dword [rcx + 0x11]
xor dh, byte [rbx]
xchg eax, edi
scasb al, byte [rdi]
mov dl, 0x27
xor ecx, edi
or byte [rcx + 0x48], bl
mov esi, 0xac7b33cc
adc dword [rax], ebx
mov r8b, 0x71
xor cl, byte [rdx - 0x5f]
mov al, 0x98
mov ecx, 0x583b636e
mov ah, 0x4f
mov dl, 0x4a
jbe 0x403118
sti
insb byte [rdi], dx
pop rax
pop r11
jae 0x40311a
movsxd rdx, dword [rdx]
dec byte fs:[rax - 0x4f]
cmp ebx, -0x7d
ror dword [rdi], 0x64
insb byte [rdi], dx
push rax
jbe 0x403130
pop rax
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x32
sbb byte [rsi], dl
fist word [rdi + 0x43]
push rsp
mov esp, 0x4ae04535
ficom dword [rax + 0x50]
jo 0x403138
fimul word [rdx]
movsxd rcx, esp
lea esp, [rcx + 0x36]
sbb al, 0x16
adc cl, byte [rcx + 0x3d5a240c]
pushfq
cmp esp, dword [rbx + rbx*2]
push rdx
sub byte [rbp - 0x54], bl
jnp 0x403115
cmp esp, esi
pop rdi
loope 0x4030e4
mov dh, 0xa9
je 0x403178
pop rdi
ja 0x403100
jmp 0x6a57ba94
loope 0x403141
xor dword [rsi], ebp
xor esp, dword [rbx + 0x75]
je 0x403184
push 0x2892b090
pop rdx
enter 0x2565, 0x38
xor dword [rbx - 0x6c], 0xffffffe0
sbb al, 0xc7
adc dh, byte [rcx + rcx*2]
and eax, edx
nop
mov esi, 0x6565a481
movabs eax, dword [0xe498a36890318976]
adc ebp, 0x5a2e6d84
cmp byte gs:[rax], cl
wait
or al, 0x82
movsxd rdi, dword [r8]
movabs dword [0x9e0b7d785c58d4cc], eax
xor eax, dword [rsi - 0xcd3943f]
mov ebp, 0x84ac61af
jg 0x4031c3
add bl, al
xor dl, dl
or ebx, dword [rdi + 0x1c]
pop rdi
leave
xchg eax, esi
insd dword [rdi], dx
sbb al, 0x2e
add dword [r8], 0x10eb134e
sbb al, 0x34
adc dl, dh
out dx, eax
pop rdi
ret
push rsi
and cl, ch
adc dl, bl
pop rbx
and eax, 0x89a4036
xor r8b, bpl
cmp dword [rdx], esp
mov dword [rbx], esi
push rax
movabs dword ss:[0x310c8586ac963139], eax
pop rsp
jbe 0x4031ed
add al, 0xce
push rsp
sbb dword [rcx], r14d
and bl, byte [rcx + 0x6f]
ret 0xf020
pop rdx
mov word [rsi + rbp*4], es
xor byte [rdx - 0x29], bl
js 0x403210
lodsb al, byte [rsi]
nop
push rcx
sub byte [rbx - 0x6d214d09], ah
or dword [rdx], esi
adc dword [0xffffffff92c1cc91], eax
jrcxz 0x403207
int3
nop
mov cl, 0xb2
insd dword [rdi], dx
in al, 0x52
and eax, 0x32e83674
xlatb
outsw dx, word gs:[rsi]
test dword [0x66ebbd7c], esi
popfq
retf
mov esp, 0x788b4043
push rsi
pop rcx
test eax, 0x6eda4647
ja 0x4031dd
ficom word [rbx + 0x2d]
adc edi, dword gs:[rax - 0x32]
jae 0x4031aa
and byte [rax + 0x20], bl
sub dword [rax - 0x59], 0x4ad6146e
push -0x3ded32d4
push rcx
or byte [rdx + 0x38], bh
ja 0x4031bb
je 0x4031ca
adc dl, ah
pop rsp
js 0x4031ef
scasb al, byte [rdi]
xor dh, byte [rax]
ror r10, 0x62
nop
sub ebx, dword [rcx - 0x7d]
xchg eax, edi
mov dl, 0x90
and byte [rax + 0x5d], ah
xor ch, byte [rbp + 0x34e4ce92]
pop rdi
enter -0x376c, 0x65
push rsi
jb 0x4032ae
nop
add al, 0x44
pop rbx
mov dl, 0xa0
xchg eax, ecx
xor al, 0xbd
or al, 0x43
movabs byte [0x3850626154bb05dd], al
movsb byte [rdi], byte ptr [rsi]
xchg eax, esi
xor bl, byte [rdx - 0xe7ef9bd]
retfq
jb 0x40327c
jno 0x403251
fcom qword [rcx]
or dword [rax + 0x5a48deb2], esi
mov ch, 0xac
fisttp dword [rdi]
cld
enter -0x57f7, 0x69
js 0x40329f
fst dword [r14 + 0x6a]
sbb eax, 0x969f6418
cmp eax, 0x70b2d364
xor eax, dword [rsi + 0x59]
or bl, byte [rcx]
pop rax
sbb cl, cl
push rdx
out dx, eax
mov ax, word [rdx + 0x14]
pop rbp
insb byte [rdi], dx
mov ecx, dword [rsi]
add al, byte [rdi]
add ah, byte [rcx]
mov word [rcx + 0x46], fs
ror dword [rcx + 3], 1
cmp dword [rdi - 0x2a], esp
sub eax, 0x3d196b63
jo 0x4032e2
xor esi, dword [rbx + 8]
ret 0x2462
shr dword [rsi + 0x7b], -0x5b
sbb dword [rcx + 0x65657256], edx
or bh, al
rol dword [rsi], 1
mov dl, 0x9b
xchg dword [rcx + rax*8], ebp
sbb al, 0xa
test qword [rdi + 0x73584966], 0x46b90b72
mov esp, esp
or edi, dword [rip - 0x2d8d2892]
jne 0x4032e0
mov ebx, 0x750c76ed
lahf
cmp byte [r14 - 0x57167ccb], r8b
loopne 0x40331c
cmp al, 0x56
fcom dword [rdi + 0x50c918f1]
movabs dword gs:[0x61256ea181615b12], eax
fcmovne st(0), st(2)
movabs dword [0x3065848378917c6c], eax
or eax, 0x64365d8
test eax, 0x1b387d31
retf 0x5258
xchg dword [rsi + 0x7f], edx
push rax
adc byte [rsi], al
and dword [rcx + 0x5584ed31], ebx
or byte [rbx + 0x1c], ah
mov edx, 0x5b0ae122
movabs al, byte [0x8108e7835085804a]
and eax, 0x5e1d6941
or byte [rcx + 0x441d8959], al
pop rax
xchg eax, ecx
add byte [rbx], dl
mov al, 0x89
xchg eax, esp
insd dword [rdi], dx
xor esi, dword [rdx + rcx - 0x1f9faa6c]
mov dh, 0x52
sub eax, 0x95b69310
add byte [r9], cl
loop 0x40335c
jb 0x40337f
xchg dword [rdi], edx
shl dword [rbp + 0x39], 1
ret 0x16a
std
xor al, 0xc4
sbb al, 0x30
retf -0x37b8
xchg eax, ebp
jae 0x4033c6
adc byte [rcx - 0x293a99dc], ch
sub al, 0x99
sub byte [rcx], ah
sbb byte [rbx], cl
div byte [rdx]
movsb byte [rdi], byte ptr [rsi]
sub ax, 0x51c3
adc dword [rdx + 0x6d], esi
test dword [rip + 0x5dab36df], esp
mov eax, 0x6f91b315
insd dword [rdi], dx
movsxd rsp, dword [rbx - 0x73]
in al, 0x61
lea edx, [rdi + 0x6761bd54]
fidiv word [rbx]
out 0x7a, eax
pop rbp
mov esp, 0x4f501765
out 0x99, eax
xor eax, 0xc1bf0ae1
xor ebp, dword [rbp + 0x14]
lodsd eax, dword [rsi]
lcall [rdi + 2]
add ebx, -0x40
or byte [rbx], 0x34
ficomp dword [rax + 0x410c2574]
xor al, 0x6f
or cl, byte [rbx + 0x2b810427]
mov ecx, 0x865f782a
rcl cl, cl
and byte [rcx + 0x34f65ab3], dl
add dword [rsi - 0x4c], edx
add eax, 0xf248b958
push rax
test byte [rbx], dh
xor al, 5
in al, dx
nop
xor dword [rax - 0x6e50cbce], ebp
and ch, byte [rcx]
mov dh, 0x43
xor dh, byte [rdx + 0x4d65487c]
cmp byte [rbp + 0x59], bh
or ah, byte [rip + 0x324d1953]
sti
cmp rax, 0x7569bc30
jae 0x4034a3
pop rdi
push 0x2c89964e
pop rax
and ebx, esp
je 0x4033cb
xchg eax, ebp
add dword [rbx + 0x13577732], edx
stosb byte [rdi], al
cmp dword [rcx - 0x1cba7faa], eax
adc al, cl
adc dword [rsi + 0x2b], edx
jnp 0x4034bc
push rsi
or byte [rdi], al
jle 0x40349a
push rsi
sub eax, 0xab209383
sub dword [r8 + r11*2], r8d
adc dl, byte [rdx + 0x63]
and dword [rcx + 0x20], edx
or ch, ch
sub al, 0x10
cld
xchg eax, edx
cld
mov dh, 0x4a
adc byte [rbp + rcx + 0x49], 0x91
mov ah, 0x12
or eax, 0xc234903a
pop rdx
xchg eax, ebx
cmp al, al
or al, byte [rcx + rsi*2 - 0x34f1ddbc]
push 0x36
pop rdx
and al, byte [rdi + 0xc28592f]
cwde
push rdi
or al, 0xc8
movsd dword [rdi], dword ptr [rsi]
fmul qword [rax - 0x27b9eb94]
xor esi, dword [rcx + 0x68]
pushfq
insd dword [rdi], dx
ror dword [rdx + 8], 1
and al, 0x46
sbb al, 0xb6
movabs byte [0x68902312d4571a94], al
push rdi
jge 0x40346e
xlatb
retf 0x4406
iretd
js 0x403518
scasb al, byte [rdi]
rol byte [rdx + rsi + 0x40], 5
stosb byte [rdi], al
mov esp, ss
mov byte [rax + rax + 0x471d8909], dl
and dl, byte [rdx + rdx*2]
mov cl, 0x87
push rsi
fidiv dword [rdx]
xchg eax, ecx
sub edx, edi
in eax, 0x80
sub dword [rbx + 0x31], ecx
xor cl, byte [rax - 0x40]
mov dl, 0x21
loopne 0x4034cc
push rsi
mov ah, 0xa
xor bh, ah
and al, 6
or byte [rip + 0x646461b5], dh
jb 0x403545
mov cl, 0xb2
cqo
outsd dx, dword [rsi]
leave
xchg eax, ebx
imul edx, dword [rcx + rsi*2 - 0x1f2ab609], 0x46
stosd dword [rdi], eax
mov ch, 0xed
movsxd rbp, dword [rbx - 0x71]
push -0x746136fd
hlt
pop rsp
xor al, 0xd6
loope 0x4034b1
enter 0x1910, -0xc
xor dword [rax + 9], ebx
xchg eax, esp
ret 0x7459
adc byte [rsi], al
sub dword [rdx], esi
cld
or al, 0x11
xchg eax, edx
and byte [rbx], bl
in eax, 0x49
movsb byte [rdi], byte ptr [rsi]
add cl, byte [rcx]
sbb edx, ebx
add byte [rdx + 1], dh
enter 0x4d6d, 0x30
and dh, al
xor eax, 0x1e0b3121
stosb byte [rdi], al
pushfq
sbb byte [r11], r12b
and dword [rsi + 0x5f], eax
lodsd eax, dword [rsi]
jns 0x403534
push rsi
cmp ch, byte [rbp - 0x6b9f3f1c]
adc dl, dl
xor byte [rax], dl
or byte [rax + rbx], al
xor al, 0x7b
mov al, 0x90
add bl, byte [rcx + 0x21]
xchg dword [rcx - 0x73], ebx
xor ah, byte [rax + 0x4adbc1d]
cdq
or al, byte [rbx + 0x200c4480]
adc al, 0x42
not ebx
add dword [rax], 0xb616ad59
push rdi
and rax, rsp
test r12b, r8b
or cl, byte [rbx - 0x61]
xchg dword [rbx], eax
and al, 0xc
fnstenv [esp + ebx*4]
movabs dword [0x42b0e278a88f782c], eax
jne 0x403546
sbb dword ss:[rbp + 0x611aceb2], ecx
enter -0x31b8, -0x80
adc eax, 0x8046517
push rax
sbb byte [rdx + r11], spl
sbb dword [rbp + 0x203aba18], ebp
ror byte [rbx + 0x6ef83733], 1
je 0x4035be
popfq
pop rsp
fcom qword [rbx]
push rsp
xor byte [rax + r9*4], al
jmp 0x4035f3
test byte [rax + 0x8885e82], dl
lodsb al, byte [rsi]
push rbp
leave
insd dword [rdi], dx
mov cl, 0x42
sbb byte [rcx + rsi*8 - 0x22beb4b2], al
mov word [rdx], ss
rcl cl, cl
cld
xor edi, ebx
and dword [rsi], esp
add ebx, dword [rdx + rdx*4 + 4]
xor al, 0xc
and al, 0x12
sub bh, byte [rax - 0x5e]
mov word [rax], cs
xchg eax, ebp
add al, 0xde
or cl, byte [rcx]
sub bh, byte [rbx]
xor eax, 0x6d8f8568
lodsb al, byte [rsi]
call 0x46093ebc
sbb byte [rbx + 0x32], dl
xchg rax, rbp
enter -0x6a0e, -0x7c
mov cl, 0xc8
or byte [rbx], ah
and rax, 0x58684ad5
jp 0x403601
pop rdx
sbb dword [rax + rdi*2], ecx
adc byte [rbp + 0x10df8441], 0x52
movsd dword [rdi], dword ptr [rsi]
pop rbp
out 0x72, al
sbb esi, dword [rcx - 0x56]
outsb dx, byte [rsi]
int 0x5f
sbb byte [rdi + 0x4e140481], cl
mov cl, 0x83
jo 0x403664
retf
adc eax, 0x20649d64
and al, 0x60
ja 0x4036e6
add cl, bl
stosb byte [rdi], al
stosd dword [rdi], eax
jb 0x40367c
and dl, byte [rip - 0x36bf6574]
stosb byte [rdi], al
push rsp
push rax
lodsq rax, qword [rsi]
in al, dx
out 0x69, eax
movsd dword [rdi], dword ptr [rsi]
enter -0x31f8, 0x31
ror dword [rax - 0x66], 1
add dl, byte [rdi]
cmpsd dword [rsi], dword ptr [rdi]
sahf
xor esp, dword [rcx - 0x6b]
test byte [r10], r15b
test byte [rsi + 0x49], al
rol dword [rax], 0x1f
adc byte [rdx], dl
xchg eax, ebx
rcr eax, 0x30
sub esi, dword [rbp + 0x4c]
pop rax
leave
loop 0x4036d7
or dword [rdi + rsi*8 + 0x60], ebx
xor cl, byte [rdx]
mov dh, 0xc8
rol byte [eax + 0x6b604e04], 0x4a
loope 0x4036af
jbe 0x4036dd
ror esp, 0x67
pop rdi
jo 0x4036f6
push rsp
add ebx, eax
add r13d, dword [rsi - 0x23]
fmul dword [rax - 0x44]
xchg eax, esp
mov cl, 0x12
xor byte [rcx], bh
jnp 0x4036d7
adc ch, byte [rbx]
test eax, 0x59fb0114
sub eax, 0x8885604a
int3
add cl, cl
xor edx, ecx
or al, 0x56
and eax, 0x94b06513
cmc
and byte [rax], dl
sbb eax, 0x3d6d776e
sub eax, 0xf5b22367
push rdx
push rbp
imul ebp, ebp, 0xbd751b82
push rdx
jne 0x40377c
xchg eax, ebx
adc eax, dword [r10 + 0x60]
rcl dword [rdi + 0x30], 1
test eax, 0x56832af1
test eax, 0x131106
push rbx
or edi, ecx
or byte [rcx + 0x78baf595], cl
push rax
js 0x403754
push rdx
sub qword [rcx + 0x27], rbp
ret 0x5661
mov word [rdx + 0x10], cs
out dx, eax
mov dh, 0
stosd dword [rdi], eax
insb byte [rdi], dx
movsb byte [rdi], byte ptr [rsi]
mul dword [rbp - 0x5c]
adc dl, al
movabs byte [0x28da982b2992f614], al
sub al, 0x56
or byte [rbx - 0x7ad4f02d], al
lodsb al, byte [rsi]
adc cl, byte [rdx - 0x1ba027b0]
sub dl, byte [rsi - 0x4e4afbc0]
xchg eax, edx
and dword [rax + 0x41], eax
xor byte [rbx], ch
movabs eax, dword [0x5958128aa665814]
insd dword [rdi], dx
jp 0x4037ea
xchg eax, esp
call 0xcec9ff3
loop 0x40372a
or al, 0x6f
jne 0x4037fc
xchg eax, edx
pop rax
nop
sub eax, 0x205b0c8d
xchg eax, edi
sub byte [rax - 0x53], bl
test byte [rbx - 0x69], dl
xchg eax, edx
mov edx, 0x5c40854
lodsd eax, dword [rsi]
jbe 0x4037ff
enter 0x31, 0x2e
jae 0x403824
insd dword [rdi], dx
je 0x403823
sbb cl, byte [rdx]
ret
push 0x70da2c09
xor eax, 0x6e07dcb0
outsd dx, dword [rsi]
fild qword cs:[rip + 0x4370bf34]
mov al, 0xd
add dword [rsi], ebp
jne 0x403820
sub eax, 0xcc006469
mov ebp, 0x680d636d
jo 0x403844
or dword [rcx + rdi*2 + 0x6e], esp
add ecx, dword [rsi]
fiadd dword [rbp + 0x19]
jbe 0x403816
and bh, byte [rbx + 0xc309b84]
pop rdi
sbb esi, dword [rax + 0x4428616c]
outsd dx, dword [rsi]
sub ebx, eax
or dword [rbp - 0x3f528d8c], edi
insd dword [rdi], dx
scasd eax, dword [rdi]
jb 0x40380e
sub al, 0x6f
or dl, dh
adc bl, bl
add esi, dword [rdx + 5]
xchg eax, edx
and al, 0x6f
adc dword [rbp - 0x61], esp
adc al, 0x3d
push 0x7264681c
or eax, 0xbbb7815d
pop rbp
movsxd rsp, dword [rbx + 0x5f]
movsxd rsp, dword cs:[rbp + 0x70]
stosd dword [rdi], eax
mov ebp, 0x23259b6c
jb 0x403842
or ebx, r14d
sub eax, 0xa12b6a0e
imul esp, dword ss:[rbx], 0xf66cc56b
push 0x42a5e7b
push rcx
rcl dword [rdx - 3], 0
add byte [rdx], cl
mov edx, 0x19f55a2
outsb dx, byte [rsi]
push rdx
mov dl, 0x77
xor spl, byte [r15 + r12*2]
sbb al, 1
and esi, dword [rdx]
enter 0x3480, 7
push rsp
push rsp
or al, 0xc9
nop
or al, 0x20
add al, 0x31
or al, 0x32
enter 0x7490, 0x74
and al, 0xe
jns 0x4038b1
xchg eax, esp
idiv dil
ljmp [rdi - 0x68]
sbb dword [rax + rdx*4 + 0x41], esp
cwde
xor al, 5
mov word [rdx + 0x48], gs
or byte [rsi + 0x3b], cl
or dword [rdx + rsi*2], 0xffffffd8
rcl al, 1
pop rax
ret 0x9364
mov bl, 2
sti
sbb byte [rdi], bh
xchg eax, ebx
add edx, edx
or al, 0x56
add ebp, dword [rax]
add eax, 0xc9e48bba
sub byte [rip - 0x40a1fe3e], al
cmp dword [rcx + 0x72], edi
xor ah, byte [rbx + rbx + 0x70221b2]
imul edi, dword [rdi], -2
enter 0x3bd9, 7
and byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
adc byte [rax], 0xa6
insb byte [rdi], dx
xor al, byte [rsi]
jp 0x40392e
or dword [rsi + 0x72], ebp
pop rax
movabs al, byte [0xff48c842c3b03f07]
test byte [rdi], bh
sbb dword [rdx + rax*2 - 0x18], esp
call 0xffffffffc9b239b8
mov al, 1
sbb dword [rsi - 0x6576c8ed], ecx
or al, 6
mov dl, 0xa1
in al, 0x84
lcall [rdx]
mov dword [rdi], edi
enter 0x641, 0x19
rol al, 0x30
add dword [rax], ecx
fst dword [rax - 0x6bf8efa3]
add al, bl
int 0x8a
test dword [rdi], 0x1d908a2f
setge byte [rdi]
cmp dword [rbx + rdi], 0x7f0b1f04
xor ecx, ecx
and dword [rbx], edi
insb byte [rdi], dx
add byte [rbx - 0x5bc3bb01], ah
movabs eax, dword [0x2dbfa9093c44e4e4]
ror ebp, -0x7a
push rax
jmp qword [rax + 0x43]
jbe 0x4038df
jg 0x403902
sar byte [rdi - 0x1c], 1
and bh, byte [rcx]
enter -0x1330, 5
mov edi, 0x845026e0
mov edi, 0x48bb2107
sahf
cld
sbb cl, cl
jg 0x4039b1
in al, 0xc9
mov esp, 0x605bbc5b
add dword [rax - 0x2422cb68], ecx
add ebp, dword [rax]
cmp ecx, esp
int 0xf7
mov edi, 0x90193710
outsb dx, byte [rsi]
out 0x3f, eax
psubb mm0, qword [rdi]
out 2, eax
add al, 0xff
add byte [rbx + 0x5eef88a4], bl
int 0x66
movabs r10, 0xccf272433f1f9bf8
jg 0x40399b
add dword [rsi], eax
adc byte [rbx + rbx*2 - 0x38], ah
and byte [rax - 0x1be3a041], bl
and bl, byte [rcx]
pop rdi
or byte [rcx], al
add esp, ebp
popfq
stosb byte [rdi], al
nop
sbb dword [rdx + 0xaa8e4a1], edx
test al, 0xee
add al, byte [rdi + rsi]
jg 0x4039e2
sbb dword [rdi], eax
sbb dword [rax + 0x60b8c008], edx
mov edi, 0xc94393b2
sbb byte [rip + 0x42173001], dl
sbb byte [rsi + rdx], bl
xor al, 0xbf
pop rsp
fdiv dword [rdx + 0x7b1107c3]
mov dl, 0x33
leave
or dword [rdi - 0x30d844e2], edi
jp 0x403a65
add al, dh
fcomp dword [rsi]
adc byte [rsi], dh
xor byte [rdi + rsi], 9
jg 0x40398f
in al, 0xc8
jg 0x403a05
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x5bf7fdea], ecx
push -8
mov dh, 4
jne 0x403aab
push rcx
and byte [rbx], bl
add ch, bh
adc eax, 0xbbd80000
add byte [rax], al
add al, byte [r8]
mov cl, 0xf4
add byte [rax], al
add bh, bh
