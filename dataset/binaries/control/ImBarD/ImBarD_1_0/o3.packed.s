call 0x401298
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x4010b0
add ebx, ebx
je 0x401066
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x40109e
cmp rbp, -4
ja 0x40109e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x401086
add ecx, 4
mov dl, byte [rax]
je 0x4010ae
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x40109e
ret
cld
pop r11
cmp r8b, 2
je 0x4010c6
jmp 0x401143
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x4010d6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x4010be
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x4010ee
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x4010db
sub eax, 3
jb 0x40110c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401143
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401133
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401131
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401120
cmp rbp, -0xd00
adc ecx, eax
call 0x401072
jmp 0x4010c6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40121c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x4011ba
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401206
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x4011d9
push 0x3a707474
jne 0x401232
js 0x4011f2
jae 0x40122c
outsb dx, byte cs:[rsi]
je 0x4011eb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401259
jb 0x40124b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401276
jb 0x401289
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x212291
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x212291
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401154
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x40127f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40122d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add dword [rax], eax
jmp rbp
call 0x706f1327
jb 0x40133f
movsxd rbp, dword [rdi]
jae 0x401339
insb byte [rdi], dx
js 0x40133f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40131f
cmp rsi, rcx
jae 0x401327
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401306
cmp al, 0x8f
ja 0x401306
cmp byte [rsi - 2], 0xf
je 0x40130c
sub al, 0xe8
jg 0x401309
push rdi
cmp al, 1
ja 0x4012f4
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x4012f7
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401324
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40137b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c17f9
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4013bf
mov al, 0xa
jmp 0x4013bf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x40139b
inc ebx
mov al, 0
jmp 0x4013c3
mov al, 2
jmp 0x4013c3
mov al, 3
jmp 0x4013c3
mov al, 0x3c
jmp 0x4013c3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401404
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401416
jg 0x401408
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6b8b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401462
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb65df
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40146a
cmp esi, 0x21585055
jne 0x40146e
jge 0x401460
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401463
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401467
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401513
pop rcx
or al, 0x3b
jb 0x401519
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40148b
jmp 0x40148d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36613ce
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53616
in eax, dx
jg 0x4014c5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40150b
mov bh, 0x2a
add edi, 0x10
jmp 0x401508
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401545
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401581
jne 0x401598
fstpnce st(6), st(0)
jle 0x401561
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401597
jrcxz 0x4015cb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b52f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40164a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40160a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295bdf
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40167d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401617
and ecx, 7
or al, 0xeb
jae 0x401682
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4016b7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4016f5
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4016ae
push rax
call 0xffffffff868d139b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4016b8
std
cmp edi, esi
xchg eax, edi
jle 0x40170d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95c99
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40170b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x4016f9
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401722
js 0x401762
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4017f4
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2a2f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401815
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40181a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc212cc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4017a8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + 0x928200], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dil, dil
cmp byte [rcx], bl
add byte [rax], al
fild word [rdi]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4018ce
je 0x4018d7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4018a0
mov dh, 0x7d
jbe 0x40189f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4018d8
sahf
sahf
add al, 0
cwde
add eax, 0x3f2d800
cdq
add eax, 0x9fc0007
cld
add cl, bh
add dword [rax], ecx
add byte [rax + 0xa], al
or dword [rax], eax
add byte [rbx], cl
cmp dword ds:[rax + rax*4 + 0xa], 0xb7800
mov byte [rip + 0x403e409f], cl
or al, 0
mov al, 0xd
add byte [rax], ah
cmovg esp, dword [rax]
and byte [rsi], cl
add byte [rax], dh
sldt word [rdi + 0x1c900f90]
adc byte [rax], al
nop
adc dword [rax], eax
adc ecx, eax
enter 0x1d18, 0x12
add byte [rax + 0x13], ch
add cl, bh
add esp, esp
add byte [rdi + rbx], ch
adc al, 0
call 0x7cc07926
add bh, byte [rcx + 0x15]
add al, bh
add byte [rax], al
enter -0x7eca, 0x7c
add byte [rax], cl
sbb byte [rdi + 0x2f], al
jl 0x40188e
sub eax, 0x17301907
sbb al, byte [rax]
enter -0x7eca, 0x3c
sbb dword [rbx], 0x131ce000
cmp edx, dword [rdx + 0x17015377]
add al, 0
int1
dec dword [rbx + rbx]
or eax, 0x19bf1657
xchg eax, edi
add ah, al
sbb dword [rax + 0x42], eax
xor ah, byte [rcx + 0x17]
sbb esp, dword [rax]
sbb bh, byte [rbp + 0x2ee41921]
pop rdi
cmp ebx, ebx
xor eax, 0x15f3338
push rbx
nop
or al, 0x76
and eax, 0x80477a4f
ret 0x84ae
enter -0x687a, -0x5b
xlatb
mov al, 0x41
sbb ebp, dword [rsi + 0x5f22b047]
cmp dword [rbx], edi
sbb dword fs:[rdi + 0x50010726], esp
ret 0x2739
cmp dword [rdi], esi
ja 0x40199d
cmp ebx, esi
push rdi
sub byte [rdi], bl
and al, 0x17
sbb eax, 0xf8c2160
xor byte [r14 - 0x14], r8b
retf 0x6888
mov bh, 0x43
cmovge r9d, dword [r9]
movsxd rdx, dword [rdi + 0x59]
adc al, 0x37
push 0x46
insb byte [rdi], dx
cdqe
jge 0x4019ed
xchg dword [rdi], eax
nop
lea edx, [rdi - 9]
add edx, dword [rdi + 0x20]
xchg byte [rcx], al
sbb dword [rbx + rcx*8 + 0x18578d78], eax
or byte [rdi + rcx - 0x12653511], bl
add bh, al
sbb al, 0x10
jb 0x401a3d
cmp byte [rbx + 0x2f], bl
xlatb
jbe 0x4019c0
in al, 0xfb
add esi, dword [rax + 0x288f2a19]
add cl, byte [rcx]
push rdi
jbe 0x4019dc
enter -0x2e00, 0x12
pop rdi
jns 0x4019b9
ror dword [rcx], 1
int 0x22
loopne 0x4019a1
and al, byte [rbx - 0x2e10dcf3]
jg 0x401a07
jbe 0x40197a
mov ebp, 0x3f47031a
and byte [rbx - 0x28], al
pop rsi
js 0x401a47
xor eax, dword [rax + 0x209d1334]
mov ecx, 0x560360c8
adc edi, esi
add al, 0x5f
enter 0xc34, 0x61
fild dword [r15 - 0xb]
not dword [rax]
pushfq
cmp eax, 0x4028039
add byte [rdx], dh
or byte [rbx - 0x4e], al
cmp eax, 0x2f021583
fsub dword [rcx]
cmp dword [rcx], edi
enter 0x2020, 0x10
add dword [rax], edi
popfq
jo 0x401a88
rol byte [rbp + 4], 1
not dword [rax]
or esp, esp
and byte [rbx + 0x45565bf], al
xchg eax, esp
jge 0x4019d8
mov al, 0xa5
add al, byte [rip - 0x7970e441]
mov al, 0xb
in al, dx
add eax, 0x42172a2f
jbe 0x401a6d
sbb dword [rdx + 0x6c], eax
add dword gs:[rdi - 0x7a], esi
nop
or edi, dword [rcx + 0x40]
xor eax, ecx
jns 0x4019f6
sbb eax, 0xd7062d42
jne 0x401a82
leave
sbb dword [rdi + 0x67c1ae4], esp
lock and dword [rax + rcx + 0x1b], ebp
mov r13b, 0x17
movsb byte [rdi], byte ptr [rsi]
or edi, dword [rcx - 0x3e]
enter -0x20fa, 0x30
xor eax, dword [rdx]
mov edi, 0xc49384e7
jg 0x401ae2
or bh, byte [rdi + 0x4f]
cli
add dword [rdx], edx
fbld tbyte [rbx + 0x72]
je 0x401b1c
and al, 0x66
std
call rdx
movsxd rbp, dword cs:[rbx + 0x5f]
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x401b27
imul ebp, ebp, 0x1aadffdd
pop rdi
je 0x401b3a
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401af6
outsd dx, dword fs:[rsi]
pop rdi
or ebx, ebx
outsd dx, dword [rsi]
in eax, dx
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401b46
jne 0x401b62
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401b5b
sub dword gs:[rdi + rbx*8 - 2], esp
add bh, bl
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0x7208
jb 0x401b66
jns 0x401ac5
fnstsw dword [rsi - 0x6a9aa030]
jb 0x401b88
add byte [rsi + 0xa], ah
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401a9e
jne 0x401b1f
out 0x32, al
or eax, 0x2a74295f
mov bh, 0xdf
outsb dx, byte [rsi]
in eax, dx
insd dword [rdi], dx
adc bl, byte [rdi + 0x5a277070]
push rbx
je 0x401b9e
jae 0x401ad4
je 0x401b67
imul dword [rbp + 0x6331f735]
push 0x2a239961
packsswb mm0, qword [rbp + 0x45]
push rdx
adc ebp, dword [rbp + 0x335bf6b5]
jno 0x401bc1
imul esp, dword [rbx + 0x5f], 0x4dbab46f
adc eax, 0x6ff6b5bf
mov byte [rbp + 0x53], 0x35
pop rdi
push rax
movsxd rdi, dword [r11]
mov ebp, 0x6f727014
jo 0x401b98
fisubr word [rax - 5]
xor dh, byte [rdi]
jae 0x401bec
and byte [rdi + 0x49], bl
pop rdi
mov ebx, 0x5cf63b77
pop rax
cmp byte [rdx], r10b
imul ebp, dword [rdi + 0x7c], 0x6452468f
adc ebx, edx
in eax, dx
or r10b, byte [rdi]
or edx, dword [rbx + 0x47f2d83d]
push rbp
and byte [rax + 0x44], cl
push rdx
in al, dx
std
test byte [rsi + 0x46], 0x53
jae 0x401c05
sub r14b, r8b
jb 0x401b91
fcmovb st(0), st(2)
adc byte [rbp + 0x59446607], cl
in eax, dx
jbe 0x401bb3
jle 0x401bfe
movsxd rbx, dword [rdi]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi - 0x73]
lea ebp, [rdx + 0x7437ac15]
push -0x2124a530
mov ecx, 0x446c5f77
or dword [edx + 0x3f], ecx
fld xword [rip - 0x2cad519c]
sub bl, byte [rsi]
imul esp, dword [rdx - 6], 0x45db6d63
push 0x4e3a68d2
cmp al, 0x37
wait
ret 0x63f6
js 0x401c85
xor dword [rax], eax
xor bl, byte [rcx]
sbb byte [rdi], bl
cmp al, 0xbc
adc cl, byte [rdx]
sbb byte [rdi], bh
push rbx
pop rax
movabs eax, dword [0xacc35d8445231133]
mov al, 0x5b
xor al, 0x31
insd dword [edi], dx
mov dil, 6
fcmovnb st(0), st(1)
clc
jbe 0x401c99
push rdx
insb byte [rdi], dx
pop rsp
jae 0x401c5d
pop rdx
fnsave dword [rsi + 0x47]
mul byte [rsp + rbp*2 + 0x50]
jbe 0x401be2
jo 0x401cbf
je 0x401cb5
xchg dword [rax + 0x6b], ebp
push rbp
fmul st(1)
sbb esp, 0x5f
xor ch, byte [rsi]
movabs al, byte [0x304d5f39f6866856]
fdiv qword [rbp - 0x10]
movsb byte [rdi], byte ptr [rsi]
ret 0x861a
add dword [rax], esi
mov dword [rsi], edi
mov bh, 0x86
adc eax, 0x30b671b6
add dh, byte [rcx]
pop rdi
outsd dx, dword [esi]
adc al, 0x1c
push rbx
pop r15
movabs al, byte [0x29be101a35dc3738]
xor al, 0x49
mov esp, 0x8f453143
or dword [rcx], ecx
test byte [rsi + 0x77], dh
ja 0x401cd8
mov ch, 0x65
in al, 1
or ch, byte [rcx + 0x5f]
scasb al, byte [rdi]
pop rsp
pop rcx
enter 0x785a, 0x3c
sbb dword [rbp + 0x44], ebx
sub eax, 0x9795b5a9
out dx, eax
mov byte [rsi + 0xcb4fc6b], ch
xchg byte [r9 + r12*2 + 0x62], dl
or ebx, dword [rbx]
jbe 0x401c77
fild qword [rax - 0x49]
jno 0x401d2a
jne 0x401d0c
pop rbp
jae 0x401d33
outsb dx, byte [rsi]
lodsd eax, dword [rsi]
sub eax, 0x3b3d17b0
push rsp
xchg eax, ebx
xchg eax, edi
mov dl, 0x17
mov word [rcx - 0x7c], fs
mov sil, 0x2e
mov ebx, 0xf00c30d4
push rbx
xor al, 0x3f
jne 0x401d63
clc
sbb al, byte [rbp + 0x736423d2]
in eax, 0x63
fsub dword [rsp + rdi]
xchg eax, esi
int1
jge 0x401ce3
fild dword [rax - 0x28]
hlt
xor al, 0x73
ja 0x401d6a
jo 0x401cd2
xor al, 0x5f
xlatb
fcom qword [rax + 0x5f36319e]
fldenv [rdx + rsi*8 - 0x47]
sbb eax, 0x4ab35956
fistp dword [rbp + 0x58]
je 0x401d2e
push rbx
xor ebp, dword [rcx + 0xdf8395d]
imul eax, ebx, 0x9073f3bc
movsxd rbp, dword [rbx - 0x4f]
test byte [rbp + 0x5247adf4], ch
insb byte [rdi], dx
sub ebp, dword [rcx + 0x6b]
popfq
mov al, 0x69
int3
imul esp, dword [rbp - 0x36c46df0], 0x676f3931
jp 0x401cf7
xlatb
ret 0x8c88
jo 0x401d9c
outsb dx, byte [rsi]
mov ebx, 0x50455c32
jrcxz 0x401dd4
sbb eax, 0x195b0a96
pop rbp
imul esp, dword [rdi], 0xa703fad8
pop rbp
sub dword [rdx + 0x75], esi
movsxd rsi, dword [rsp + rax + 0x63]
or ah, byte [rcx + 0x3487409b]
mov dword [rdx + rdi*2 - 0x51], ebp
nop
nop
or byte [rbp + 0x7f], ah
push rbx
or eax, 0x9f6da15a
pop rdi
mov esp, 0x802b7454
imul edx, dword [rdi], 0x68
jbe 0x401dcc
sub byte [rsi + rsi*8], ah
pop rdx
movabs al, byte [0x776e552025319641]
mov dl, 0xbb
or eax, 0x596964d7
sbb eax, 0xbc434343
in al, dx
jbe 0x401dfa
xor byte [rax], al
or ebx, dword [rax + rsi*2 + 0x3431f279]
test eax, 0xc578cb09
movabs dword [0x7973bb6ec9d8b305], eax
insd dword [rdi], dx
je 0x401e4a
push -0x6491a4f7
imul edx, dword [rdi + rsi*2 + 0x6f6e0770], 0x2e
outsd dx, dword [rsi]
or edi, dword [rdi - 0x50]
lodsd eax, dword [rsi]
sub eax, 0x670d6715
outsb dx, byte [rsi]
jne 0x401e20
jne 0x401df1
pop rbx
imul esi, dword [rcx + 0x57692dd2], 0xd
out 0x38, eax
or dword [rsi + rbp*8 - 0x54], esp
int 0xdc
jns 0x401e76
sbb dword [r14 - 0x44], r14d
rcr ah, 1
test byte [rbp + 0x5f0cbd69], dh
sbb edi, ebp
outsd dx, dword [rsi]
sub ebx, eax
sub edx, dword [rax + rbp]
or dword [rsp + rsi*2 - 0x923468e], edx
sbb r9b, byte [rdx]
sub al, 0x6f
or byte [rsp + rdi], dl
ja 0x401df0
add eax, 0x106f24ad
push 0x483d96e8
or byte [rax + 0x64], ch
jb 0x401e4e
pop rbp
movsxd rax, dword [rcx + 0x53ef5aeb]
js 0x401ead
jo 0x401eb1
mov ebp, 0x8702116c
int 0x96
or ebp, dword [r10 + 0x1e]
fstp dword [rbx + 0x68]
mov cl, 0xa1
xchg byte ss:[rax], al
push 0x1cd1337b
mov bl, 0x5e
call 0xffffffff8092cb71
add eax, 0xfd5b60
add byte [rsi], ah
mov dl, 0xea
add dword [rdi], esp
and al, 0x43
jb 0x401e75
sbb al, 1
or dword [rax + rcx*2], 0x33
and eax, dword [rdi]
push rsp
push rsp
nop
or al, 0xc9
and byte [rax], ah
add al, 0x20
or dword [rcx + rcx*8], 0x31
je 0x401f0c
nop
ja 0x401ede
leave
and al, 0x44
jg 0x401e96
ljmp [rdi + 0x41]
sbb esp, esp
cwde
cwde
imul eax, dword [rsi + 0x8059064], 0x70240b4e
xchg eax, ebx
add eax, ebx
mov esp, 0x36326c99
sti
sbb byte [rcx], ah
xchg eax, esi
int 6
push rsi
and bh, byte [rdi]
not dword [rdi]
leave
adc ebx, esi
and al, 4
pop rsi
and edx, dword [rsi + 0x1fffbf74]
outsb dx, byte [rsi]
enter -0x4fd2, -0x41
add al, byte [rdi]
imul edi, dword [rdi], -0xa
xchg eax, edx
inc byte [rdi + 7]
cmpsd dword [rsi], dword ptr [rdi]
sub dword [rbx + 0x6c0720c], ebx
call qword [rbx + 0x7aba4b11]
add al, 0x6f
or eax, ebx
enter 0x3f09, 0x78
inc dword [rsi]
sbb dword [rax + rsi*4 - 0x7c], esp
js 0x401f83
add byte [rdx - 0x37], dh
adc byte [r10], al
sbb dword [rdx + rax*4 + 0x138ec20c], ecx
fild word [rsi + 0x7de1392]
lcall [rdx]
mov dword [rdi], eax
sbb dword [rax + rcx*8 + 0x3f], esp
mov al, 0xb0
jo 0x401f2c
jbe 0x401f50
adc byte [rdi], al
xchg eax, esp
sal byte [rax - 0x6d], 0x22
sysret
xor ah, byte [rdi + rax*2 - 0x4a]
setge byte [rdi]
xor byte [rip + 0x76e6790], ch
jg 0x401f9b
or eax, 0x87242033
movabs dword [0x9ff0773392869df], eax
test eax, 0x19b99bf
and dword [rdi + 0x6420bf07], ecx
leave
mov byte [rcx + 0x7339283f], dh
mov bl, 0xf7
jg 0x401fbc
int3
xchg byte [r15 + rdi*4 + 0x3f], r13b
push -0x36f780f9
add ecx, ecx
xchg eax, edx
mov bl, 0xdc
movsb byte [rdi], byte ptr [rsi]
inc dword [rdi]
jg 0x401ffd
adc byte [rbx - 0x66], cl
xchg bl, bl
cmpsb byte [rsi], byte ptr [rdi]
leave
fstp dword [rbx + 0x10ff076f]
out 0xb8, eax
leave
xor byte [rdi + rdi + 0xf], 0xf8
sub al, 0x3b
and bh, bh
pop rbp
or byte [rbp + 0x46], 0x67
clc
out 0x66, al
mov bl, 0x25
wait
jg 0x401f49
and dword [rcx], edi
jns 0x401fad
add dword [rsi], eax
adc byte [rdx + rsi*4], cl
sub eax, 0x2fbf9864
jb 0x401f5d
or byte [rcx], al
add ecx, ecx
fldenv [rax + 0x40]
out dx, eax
xor byte [rdi], bh
enter 0x326e, 0x24
or cl, r8b
and ch, bl
add eax, 0x3f107f08
or byte [rax - 0x1fcdf37d], dl
fsub dword [rax + 2]
insb byte [rdi], dx
mov al, 0x21
mov ecx, 0x307f1520
sbb byte [rdi + 0x3f343f85], al
cmp byte [rbp - 0x4d], ah
ret
adc dword [rbx], edi
in al, dx
retf
pop rax
and al, 0xcf
jg 0x40202c
add dword [rbx + 0x6420f480], edi
xlatb
fadd st(0)
add ecx, dword [rax - 0x29]
push qword [rbx]
or dword [rdi + 0x58], edi
and al, 0x4f
adc byte [rdx], bh
fadd qword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x5cf7fdea], ecx
mov ch, 0xe3
movabs byte [0x19389fc2386b], al
fild word [rdi]
add byte [rax], al
adc byte [rdx], cl
add byte [rcx + 1], cl
add byte [rsp + rsi*8], cl
add byte [rax], al
add bh, bh
