call 0x401120
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400f38
add ebx, ebx
je 0x400eee
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400f26
cmp rbp, -4
ja 0x400f26
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400f0e
add ecx, 4
mov dl, byte [rax]
je 0x400f36
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400f26
ret
cld
pop r11
cmp r8b, 2
je 0x400f4e
jmp 0x400fcb
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400f5e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400f46
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400f76
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400f63
sub eax, 3
jb 0x400f94
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400fcb
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400fbb
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400fb9
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400fa8
cmp rbp, -0xd00
adc ecx, eax
call 0x400efa
jmp 0x400f4e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x4010a4
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401042
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40108e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401061
push 0x3a707474
jne 0x4010ba
js 0x40107a
jae 0x4010b4
outsb dx, byte cs:[rsi]
je 0x401073
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4010e1
jb 0x4010d3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4010fe
jb 0x401111
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21265b
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21265b
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400fdc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401107
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x4010b5
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f11af
jb 0x4011c7
movsxd rbp, dword [rdi]
jae 0x4011c1
insb byte [rdi], dx
js 0x4011c7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x4011a7
cmp rsi, rcx
jae 0x4011af
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40118e
cmp al, 0x8f
ja 0x40118e
cmp byte [rsi - 2], 0xf
je 0x401194
sub al, 0xe8
jg 0x401191
push rdi
cmp al, 1
ja 0x40117c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40117f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x4011ac
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401203
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1681
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401247
mov al, 0xa
jmp 0x401247
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401223
inc ebx
mov al, 0
jmp 0x40124b
mov al, 2
jmp 0x40124b
mov al, 3
jmp 0x40124b
mov al, 0x3c
jmp 0x40124b
push rcx
rcr ah, 1
fstp st(7)
jle 0x40128c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x40129e
jg 0x401290
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6a13
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4012ea
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6467
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4012f2
cmp esi, 0x21585055
jne 0x4012f6
jge 0x4012e8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4012eb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4012ef
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40139b
pop rcx
or al, 0x3b
jb 0x4013a1
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401313
jmp 0x401315
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661256
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5349e
in eax, dx
jg 0x40134d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401393
mov bh, 0x2a
add edi, 0x10
jmp 0x401390
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4013cd
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401409
jne 0x401420
fstpnce st(6), st(0)
jle 0x4013e9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40141f
jrcxz 0x401453
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b3b7
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4014d2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401492
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295a67
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401505
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40149f
and ecx, 7
or al, 0xeb
jae 0x40150a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40153f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40157d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401536
push rax
call 0xffffffff868d1223
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401540
std
cmp edi, esi
xchg eax, edi
jle 0x401595
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95b21
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401593
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401581
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x4015aa
js 0x4015ea
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40167c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad28b7
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40169d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4016a2
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21154
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401630
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
popfq
or al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dh
sub byte [rax + 0x90], cl
add byte [rax], al
add byte [rax], al
add dil, dil
push 0x4200001b
or byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401756
je 0x40175f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401728
mov dh, 0x7d
jbe 0x401727
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401760
sahf
sahf
add al, 0
cwde
add eax, 0x1f90e000
and byte [rdi + 0x6400006], bl
add byte [rdx + 0xb], al
fsub dword [rdi]
nop
invd
add byte [rax + 0xc200009], dl
jl 0x401745
sub eax, dword [rdi]
or dl, byte [rdi]
or eax, dword [rax]
or byte [rdi], cl
cmp dword ds:[rax + rax*4 + 0xc], 0xd3000
loopne 0x401766
lahf
add al, dh
lldt word [rax + 0x201f204f]
adc byte [rax], al
movabs al, byte [0x12204fb00ff80011]
add byte [rax + 0x21], cl
pop rdi
adc eax, dword [rax]
add dl, dh
enter 0x22cc, 0x14
add al, ch
sub eax, 0xc09f2060
retf 0x1715
add byte [rax], al
mov dl, 0x4d
and byte [rdi], bl
add byte [rax], cl
sbb byte [rdi + 0x2f], al
retf
add dword [rcx], ebx
xor byte [rdi], dl
sbb al, byte [rax]
call 0x208fa7b1
sbb eax, dword [rax]
add byte [rcx], dh
sbb al, 0x47
repne outsb dx, byte [rsi]
retf 0x113
add al, 0
int1
dec dword [rsi]
loope 0x401781
sbb edi, dword [rdi - 0x6dfd68e7]
in al, dx
and byte [rcx], dl
sbb esp, dword [rax + 0x6c]
sbb dword [rsi], ebp
movabs al, byte [0x1b7c9d83225f44]
pop rax
xor eax, dword [rcx]
push rbx
mov ebx, 0x477a4f12
shl byte [rcx + 0x57], 0x42
xchg byte fs:[rdi - 0x5b26285b], dl
jrcxz 0x4017fa
scasb al, byte [rdi]
test al, 0x77
fcom dword [rax - 0x7036c9f4]
pop rcx
fsubr dword [rdi]
leave
xor bpl, byte [r9 - 0x2755e813]
and byte [rbx + 0x8b0fa0c], al
mov edi, 0x393d9c83
add al, byte [rcx]
cmp dword [rdi], ebx
xor dl, byte ds:[rax + rsi + 0x157720c8]
xchg eax, edi
mov r14b, 0x39
add dword [rdi + 0x1549fc8], r14d
ret 0x1778
outsd dx, dword [rsi]
scasb al, byte [rdi]
movsb byte [rdi], byte ptr [rsi]
fsub dword [rax - 0x50]
jae 0x40187e
xchg eax, esp
xor byte [rsi + 0x65], dh
outsd dx, dword [rsi]
mov dword [rdi], ebp
adc al, 0x97
cmpsb byte [rsi], byte ptr [rdi]
test cl, bl
jg 0x4017f5
add r9b, r11b
js 0x4018b2
out 0xb6, eax
add al, 0xb7
and byte [rbp + rdi*4 + 0x1b6778c], bl
lea esi, [rdi - 0x33e8fee8]
xchg byte [rdi + 0x65], dh
int 0xed
add al, ah
test byte [rbp + rbx + 0x432090ce], bl
lock sbb dword [rsp + rdi - 0xffb45c7], 0x10
sub al, byte [rcx]
jmp 0xffffffff8e42a8ae
and ah, ch
and dword [rbp + rbx*4 - 0x4f], esp
and cl, byte [rdi + 0x22b21f8c]
sbb dword [rbp + rax*4 + 0x7605afea], 8
mov ebx, 0x32377fe
or al, 0x21
enter 0x5c42, -0x58
je 0x4018e8
add al, byte [rbx + 0x47cd6fb0]
and ah, ch
adc byte [rdx], dh
sub cl, 0x2e
add al, 0x17
add al, 0x9a
or edi, dword [rax + 0x11]
outsd dx, dword [rsi]
add al, 0x60
xchg dword [rax - 0x6578d03f], edx
add al, 0x77
xor byte ss:[rsp + rbx*2 - 0x4c], 0xf
adc cl, al
or ebp, esp
adc byte [rbx], cl
add eax, 0x3f055b17
outsd dx, dword [rsi]
pop rdx
xchg eax, ebp
ja 0x40194e
sbb dword [rax + rcx*2 - 0x4a], ebp
add bl, byte [rdi - 8]
jp 0x401919
leave
and byte [rdi], ah
adc byte [rcx], al
xchg eax, ecx
in al, dx
in al, 0xeb
or eax, 0x20f7779e
jbe 0x401963
cmpsb byte [rsi], byte ptr [rdi]
sbb dword [rsi - 0x5845a0f0], ebp
nop
fcom dword [r8]
sub dword [rsi], eax
sahf
sbb eax, 0x95432e42
add dword [rdi + 0x60], esi
xor esi, dword [rax + 0x5b42ec21]
jns 0x401937
and dword [rcx + 0x708e8641], ecx
xchg eax, esp
jl 0x4018b1
mov al, 0xd6
and al, 7
out dx, eax
sbb cl, cl
leave
or ebp, esp
sub eax, dword [rdi]
pop rdi
movabs al, byte [0x17da2f660d843610]
test byte [rbx - 0x38], al
cmp al, 8
not dword [rax + 0x33]
cmp al, 0x39
pop rax
out 0x11, al
push rbx
or eax, 0x2738b00f
jg 0x401905
lahf
movsxd rsi, dword [rdx - 0x25]
mov edi, 0xe47374d0
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
ljmp [rbp + 0x726564fd]
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4019b0
outsd dx, dword fs:[rsi]
in eax, dx
in eax, dx
outsd dx, dword [rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401a00
jne 0x401a1c
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4019a7
add bh, bl
fld xword [rbp + 0x29]
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xb856
rcr edi, 1
or byte [rdx + 0x72], dh
jns 0x401a24
push rbp
jb 0x401a42
or dword [rdx], ecx
sbb esi, dword [rax]
imul ebp
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401a09
or eax, 0x6b76295f
lodsb al, byte [rsi]
je 0x401a0a
insd dword [rdi], dx
adc bl, byte [rdi - 0x24d88f90]
pop rdx
sti
lcall [rdx + 0x53]
je 0x401a3b
xor dword [rcx], edi
jo 0x401a5c
movsxd rsp, dword gs:[rbp + 0x77]
pushfq
xor byte [rdx + 0x6e], bh
movabs byte [0x746375727d9dbbd8], al
sbb bh, byte [rax]
imul rbp, qword [rdi + 0x3e], -0x488c53d7
xor eax, dword ss:[rdx - 0x7b9e9c79]
adc al, 0xdb
jge 0x4019d2
std
imul esp, dword ss:[rdi + 0x6e], 0x4c0c650f
xor ebp, dword [rbp + 0x6f]
xor al, 0x31
mov ebx, 0x455add8d
and eax, 0x697a6369
xor al, 0x69
jp 0x401a47
outsd dx, dword [rsi]
mov dh, 0xdd
pop rdx
xor al, 0x6e
xchg eax, ebx
divps xmm1, xmm2
std
in eax, dx
xor byte [rcx + 0x69], ch
xor r11b, byte [rdi]
pop rdi
pop r15
adc ebx, edx
jg 0x401a54
wait
mov edi, 0x4d415246
pop r15
or r8b, byte [rdi + 0x3d]
fdiv st(2)
or eax, dword fs:[rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
push rdx
jnp 0x401a38
xchg eax, ebx
push rbx
push 0x54
sub r14b, r14b
pop rbp
mov bh, 0xb0
or dword [rax + rdx - 0x62], esp
jb 0x401a66
mov dil, 0xdb
mov cl, 0xdb
pop rcx
enter 0x6333, 0x1f
mov ebx, 0x43fa946d
pop rax
pop rax
pop rdi
xor ebx, dword [rdx + 0x741172cb]
adc bp, word [rbp + 0x3b]
mov ah, 7
pop rdi
xor ch, byte [rsi]
add dword [rsp + rcx*8 - 0x1249289e], ecx
and dh, byte [rbx + 0x4e3981ac]
cmp rsi, qword [r15]
jae 0x401b3e
sti
movsxd rdi, dword [rax + 0x78]
xor dword [rax], eax
xor ah, byte [rbx + rsi*2 + 0x351ce1f6]
ret
pop rbx
jnp 0x401b49
movsxd rbx, dword [r9]
adc ah, byte [rbx + 0x68]
bnd je 0x401b60
outsb dx, byte [rsi]
div dword [rsi + 0x4510737b]
push rbx
add al, 0x45
jmp 0x401b1d
in al, dx
insd dword [rdi], dx
or dword [rbx], ebp
popfq
jno 0x401b63
xor dword [rax + 0x4f], edx
push rsi
imul ch
sub ah, byte [rcx - 8]
push r11
xor al, 0x5f
jg 0x401aaa
sub eax, 0x6e923734
in eax, dx
cmp al, 0x4a
jbe 0x401b7b
push rdx
fsub qword [rbx + 0x3b]
sbb byte [rbp + 0x73596c43], al
cli
sub ebp, dword [rbp + rax*4 + 0x35]
insd dword [rdi], dx
pop rdx
ret 0x6856
or eax, 0xeb02306a
and edx, dword [rdx + 2]
loope 0x401b29
lea ebp, [rcx]
push rbx
pop r15
mov esp, 0x12a2d938
test byte [rsi + 0x346529bb], 0x49
jo 0x401b93
xor dword [rbp + 0x76], eax
xchg eax, edi
or dword [rdi - 0x6bbdef27], eax
out dx, al
imul ebx, dword [rbx + 0x61], 0x1b
insb byte [rdi], dx
cmpsb byte [rsi], byte ptr [rdi]
movabs byte [0x1a210901c6193c78], al
jo 0x401b7a
mov ecx, 0x50f095b2
movsxd rbx, dword [r9]
test eax, 0x6e92db44
sub esp, ebx
pop r15
mov eax, 0x846d430c
ror byte [rdi - 0x4a], cl
push rsp
popfq
insb byte [rdi], dx
pop bp
jbe 0x401ba1
adc esi, dword [rbx]
pushfq
outsd dx, dword [rsi]
in al, dx
push rsi
sub byte [rdi - 0x63], dh
insd dword [rdi], dx
sub ecx, dword [rsi + 0x76885f35]
pop rax
nop
rcl dword [rcx - 0x31], 1
movabs dword [0x5f64384f4957ba5d], eax
jne 0x401b85
in al, dx
jnp 0x401bdd
movsxd rbp, dword [rcx + 0x73]
movsb byte [rdi], byte ptr [rsi]
outsb dx, byte [rsi]
mov ecx, 0x1613cacc
fiadd dword [rdx]
jrcxz 0x401c36
nop
and byte [r15], dl
xchg eax, edx
fsub qword [rbp + 0x74]
sbb al, 0x22
insd dword [rdi], dx
movsxd rcx, dword [rdi + 0x33]
int3
xchg eax, esi
sbb qword [r15 - 0x22], rbp
sub ecx, eax
sbb dword [rsp + rbx*8 + 0x6a], esp
sbb byte [rax + 0x7475bf34], dl
insd dword [rdi], dx
jmp 0x64b832aa
jae 0x401c31
push 0x2bbde979
adc eax, 0xfdd52d66
add al, 0xf8
lodsd eax, dword [rsi]
pop rsp
cli
or eax, 0xda6b6307
push 0x4438936b
ret 0x6cb2
imul esp, dword [rdi + 0x74806136], 0x78611572
sbb eax, 0x78cadf9a
outsb dx, byte [rsi]
push rdx
jne 0x401c3c
imul esi, edx, 0xe502b6ca
imul edx, dword [rdi], 0xd6176c6f
mov dh, 0xd6
push rax
cli
push rbx
cmc
sbb eax, 0x7248c366
or ebx, edx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
xor dword [rbx], edx
lodsd eax, dword [rsi]
xor ah, byte [rsi]
cmp dword [rbx + 0x6005a8df], eax
fsub qword [rsi]
sar dword [rdi + 0x24a75f36], cl
cmp al, 0x86
mov al, 0xfa
outsd dx, dword gs:[rsi]
add eax, edx
mov dh, 3
lodsb al, byte [rsi]
and dword [rdi + 0x68], esp
pop rdi
int 0x2e
rol byte [rcx - 0x5d], 1
add al, 0xa3
cmp al, 0x74
scasd eax, dword [rdi]
jbe 0x401c9e
mov ebp, 0x21d70141
sbb eax, 0x2e3120da
xor eax, dword [rbp + 0x7c21b0a5]
jp 0x401c59
fmul qword [rdx]
imul ebp, dword [rbp - 0x3c], -0x6d
retf
lodsd eax, dword [rsi]
sti
retf -0x669e
cmpsb byte [rsi], byte ptr [rdi]
sal dword [rbp + 0x23776e55], cl
push rdi
movabs byte [0xf21e5a3d40646061], al
mov word [rsi + 0x43], gs
sbb sil, byte [r8]
out 0x69, al
js 0x401d09
sbb dword [rbx], eax
mov eax, fs
mov esi, 0x370b76c1
xor eax, 0x6d797338
sub al, 0x62
je 0x401d2d
imul ebp, dword [rdx - 0x3d], 0x4e
push 0x70c96109
pop rbx
ret
jb 0x401d38
outsd dx, dword [rsi]
sbb ch, byte cs:[rip + 0x5a0d6715]
outsd dx, dword [rsi]
jl 0x401c5e
xchg eax, edx
jne 0x401d06
jne 0x401c9f
sub eax, 0x6f730c69
lodsd eax, dword [rsi]
or eax, 0x64093884
jns 0x401d58
adc eax, dword [rsi + 0x194536b3]
jbe 0x401d5b
mov word [rbx + 0xc309b82], es
pop rdi
sbb esi, dword [rsi]
and bl, dh
rcr dword [rsi + 0x28], 9
and al, 0x74
jb 0x401d14
mov eax, 0xa3599ed
sub al, 0x6f
or byte [rsi + rbx + 0x5e13ba1], ah
or byte [rdi + rbp*2], ah
push 0x2c1ecb74
jl 0x401d8b
jb 0x401d33
pop rbp
movsxd rdx, dword [rbp - 0x48]
sub r10d, dword [r14]
jo 0x401da5
or al, 0xd8
insb byte [rdi], dx
jbe 0x401d66
pop qword [rbx + 0xb]
test dword [rsi], edx
sub esi, dword [rdx + rbp*2 + 0x43]
movabs eax, dword [0x6800bd9b34cd4936]
jnp 0x401daa
mov al, 4
push rbp
mov dh, 0x35
and dword [r10 - 3], edx
add byte [rax], al
sub al, 1
mov edx, 0xf7016f60
and al, 0x67
outsb dx, byte [rsi]
push rdx
pop rdi
sbb al, 0x80
xor al, 0x43
xor al, byte [rcx]
and eax, dword [rdi]
nop
or al, 0x32
enter 0x5454, 0x20
enter 0xc90, -0x37
add al, 0x31
je 0x401db3
xchg eax, esp
or al, 0x32
je 0x401da5
jg 0x401d14
jns 0x401d7e
ljmp [rdi - 0x68]
cwde
sbb dword [rsp + rax*2 + 5], esp
or byte [rsi], al
sbb edx, dword [rax - 0x1ff4b19a]
loopne 0x401d50
leave
fld dword [rcx + 0x60]
add edi, ebx
mov cl, 0xa4
sbb dword [rax + rbx + 0x56], esp
add edx, dword [rdx + 0x2759bc27]
add dword [rip + 0x2ee92c56], eax
pop rsi
mov edi, 0x24364fff
outsd dx, dword [esi]
mov edi, 0xc9070248
xor byte [rbx + rax*2 + 0x6b], 0x3f
nop
sbb dword es:[rcx + rdi*4 + 0x690a707], -0x3b
xchg eax, edx
outsb dx, byte [rsi]
retf 0x7aff
add al, 0x84
pushfq
lahf
js 0x401e29
cmp ebp, dword [rdi + rdi*8]
test byte [rdi], bh
xchg eax, edi
sbb al, 0x64
nop
cwde
cwde
jo 0x401df9
sbb dword [rax + 0x138e200c], eax
mov ah, 0x64
adc eax, 0x1aff074f
enter 0xd90, 0x25
mov dword [rdi], edi
xor ah, ch
xor dh, byte [rax]
mov al, 1
adc byte [rdi], al
push rax
enter -0x6b7a, 0x3f
mov gs, word [rcx + rax*4 - 0x1f]
setge bh
fsub qword [rax + rcx*8 + 0x3f]
jg 0x401dd1
cmovs ecx, dword [rsi]
pop rbx
and byte [rdi], bh
movabs dword [0x9ff07df4166e672], eax
or eax, dword [rdx - 0x2e]
push rax
test eax, 0x928647bf
xor esi, dword [rdi]
mov edi, 0x1906b156
insb byte [rdi], dx
enter -0x7c1, 0x7f
clc
and dword [r9], ebx
movabs rdi, 0x847f07079b99e48b
add dword [rcx - 0x366debe7], edi
ror dword [rip + 0x7f7f6725], cl
fisttp dword [rsi]
in al, dx
mov r9b, byte [r9 + 3]
inc dword [rax - 0x46]
movabs eax, dword [0xdc100b0f3fe710e4]
clc
jmp qword [rsi]
sub edx, dword [rsi + 0x373ff39d]
fst dword cs:[rdx - 0x7c03fd2]
wait
xchg eax, edi
movsb byte [rdi], byte ptr [rsi]
jo 0x401e52
xchg dword [rdi + 0x21], edi
or dword [rcx + rcx*8], 6
adc byte [rax + 0x6d90648b], bl
mov edi, 0x420b2f2f
jb 0x401e45
or byte [rcx], al
add dword [rdi + 0x6ce4a19], ecx
xor byte [rdi], bh
call 0xffffffff9c7c9ece
and eax, ebp
jg 0x401ef8
rcr byte [rbp + 0x10], cl
jg 0x401ed7
xor dword [rdi], edi
clc
in al, 0x20
add ah, byte [rax]
and dword [rbx], ebx
insb byte [rdi], dx
adc eax, 0x3f17307f
in al, dx
mov al, 0x10
xor al, 0x3f
adc dword [rbx + 0x67], edi
adc al, 0x4a
fld dword [rax]
insd dword [rdi], dx
jg 0x401f11
retf 0x2c66
xchg eax, edx
add dword [rbx - 0x61b19700], edi
cmc
xor byte [rcx], dh
inc eax
or dword [rdi], ebx
leave
and dword [rax + rax + 9], ebp
jg 0x401efc
cmp al, byte [rax]
add byte [rbx + 0x40850e4], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp bh, 0
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip + 0x21080216], ecx
shl dh, cl
cmc
mov edx, 0x1b684ecd
add byte [rax], al
or byte [rax], al
add byte [rax + 0x4c], ah
add byte [rax], al
add byte [r8], al
hlt
add byte [rax], al
add bh, bh
