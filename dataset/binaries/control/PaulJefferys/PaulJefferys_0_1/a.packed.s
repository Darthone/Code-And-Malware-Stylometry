call 0x400d48
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400b60
add ebx, ebx
je 0x400b16
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400b4e
cmp rbp, -4
ja 0x400b4e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400b36
add ecx, 4
mov dl, byte [rax]
je 0x400b5e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400b4e
ret
cld
pop r11
cmp r8b, 2
je 0x400b76
jmp 0x400bf3
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400b86
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400b6e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400b9e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400b8b
sub eax, 3
jb 0x400bbc
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400bf3
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400be3
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400be1
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400bd0
cmp rbp, -0xd00
adc ecx, eax
call 0x400b22
jmp 0x400b76
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400ccc
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400c6a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400cb6
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400c89
push 0x3a707474
jne 0x400ce2
js 0x400ca2
jae 0x400cdc
outsb dx, byte cs:[rsi]
je 0x400c9b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400d09
jb 0x400cfb
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400d26
jb 0x400d39
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x2116f7
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x2116f7
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400c04
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400d2f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400cdd
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f0dd7
jb 0x400def
movsxd rbp, dword [rdi]
jae 0x400de9
insb byte [rdi], dx
js 0x400def
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400dcf
cmp rsi, rcx
jae 0x400dd7
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400db6
cmp al, 0x8f
ja 0x400db6
cmp byte [rsi - 2], 0xf
je 0x400dbc
sub al, 0xe8
jg 0x400db9
push rdi
cmp al, 1
ja 0x400da4
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400da7
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400dd4
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400e2b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c12a9
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400e6f
mov al, 0xa
jmp 0x400e6f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400e4b
inc ebx
mov al, 0
jmp 0x400e73
mov al, 2
jmp 0x400e73
mov al, 3
jmp 0x400e73
mov al, 0x3c
jmp 0x400e73
push rcx
rcr ah, 1
fstp st(7)
jle 0x400eb4
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x400ec6
jg 0x400eb8
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a663b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x400f12
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb608f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x400f1a
cmp esi, 0x21585055
jne 0x400f1e
jge 0x400f10
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x400f13
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x400f17
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x400fc3
pop rcx
or al, 0x3b
jb 0x400fc9
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x400f3b
jmp 0x400f3d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660e7e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf530c6
in eax, dx
jg 0x400f75
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x400fbb
mov bh, 0x2a
add edi, 0x10
jmp 0x400fb8
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x400ff5
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401031
jne 0x401048
fstpnce st(6), st(0)
jle 0x401011
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401047
jrcxz 0x40107b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1afdf
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4010fa
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4010ba
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829568f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40112d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x4010c7
and ecx, 7
or al, 0xeb
jae 0x401132
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401167
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4011a5
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40115e
push rax
call 0xffffffff868d0e4b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401168
std
cmp edi, esi
xchg eax, edi
jle 0x4011bd
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95749
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4011bb
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x4011a9
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x4011d2
js 0x401212
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4012a4
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad24df
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x4012c5
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4012ca
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20d7c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401258
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
ror dword [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dh
or ch, byte [rdx]
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
inc eax
sbb byte [rax], al
add dl, cl
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40137e
je 0x401387
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401350
mov dh, 0x7d
jbe 0x40134f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401388
sahf
rcr byte [rsi + 0x47980004], 5
add al, bl
nop
and byte [rdi + 0x5480006], bl
add byte [rax + 0x5604fb08], ah
or byte [rdi], dl
or dword [rax], eax
push 0x604f8f09
in eax, 0
or dl, byte [rdi]
or eax, dword [rax]
js 0x401377
push rsi
mov al, 0xb
ja 0x401385
mov al, 0xed
add cl, bh
or eax, 0xe0cf000
add al, 0xd
enter -0x37f9, 0xf
sldt esp
adc dword [rax], edx
add al, dl
jb 0x401313
insd dword [rdi], dx
adc edx, dword [rcx]
sbb dword [rdx], edx
xlatb
adc al, byte [rdi]
enter -0x4fd9, 0x17
adc eax, dword [rax]
add al, 0x14
adc al, 4
add dl, dh
add al, ch
sbb eax, 0xf8001560
add bh, cl
add cl, bh
add byte [rax], al
add byte [rax], cl
jle 0x40133d
jl 0x4013d7
add al, bh
sbb dword [rax], eax
add byte [rax], ah
sahf
sbb al, byte ds:[rax]
mov eax, 0xc9e0001b
mov ebx, 0x131c9b29
add dword [rdi], edx
add al, 0
int1
inc dword [rsi + 0xc1d8b2b]
sbb edi, dword [rdi + 0x6c199719]
add dh, byte [rax]
sbb edx, dword [rdi]
jo 0x401375
nop
and dword [rsi], ebp
mov al, 0x44
sbb esp, ebp
insb byte [rdi], dx
neg dword [rdi + 0x35]
lock and dword [rdi + 1], ebx
push rbx
xor bl, al
xchg eax, ebp
adc byte [rdi + 0x7a], cl
sar byte [r11 - 0x79bcddee], 1
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
sbb eax, 0x27ae0867
jb 0x4013cb
leave
ja 0x4013e7
or byte [rsi], ah
fadd dword [rbx + 0x2f60c90d]
in eax, dx
and al, 0xfa
cmpsd dword [rsi], dword ptr [rdi]
pop rbx
adc byte [rdi], dl
sahf
xor al, cl
leave
sub al, byte [r9]
stc
adc eax, 0x9439e519
jg 0x401481
add dword [rdx], edx
xchg dword [rax + 8], ebx
jrcxz 0x401457
push rdi
mov r11d, 0x58076232
cwde
ljmp [rbx + 0x47]
ret 0x95d8
adc dword [rdi - 0x7f], edx
adc al, 0x7f
mov dh, 0x12
push bx
xchg eax, edx
xor r12b, r11b
sub esp, dword [rbx]
iretd
add ebx, dword [rdx - 0x61]
wait
xor ah, bh
scasb al, byte [rdi]
add ch, al
pushfq
and dword [rax + rcx - 0x24], esp
hlt
ror dword [rsi + 0x36], 0x4f
rcl byte [rcx], 2
sahf
add ebp, esp
sbb al, 0xec
mov dl, 0x37
sub cl, byte [rdi + 0x15000204]
sbb eax, edx
scasb al, byte [rdi]
adc edx, dword [rdi]
pop rdi
mov al, 0xb
in al, dx
xchg eax, ebp
add cl, byte [rdi - 0x4c4de8b4]
imul eax, dword [rsi + 0xe8f226b], 0x11
and esp, dword [rax - 0x50]
and esp, ebp
test dword [rdi], ebp
lahf
adc byte [rax + 0xf486c21], dh
cmpsd dword [rsi], dword ptr [rdi]
loopne 0x40150b
rcr byte [rax - 0x79], 1
and eax, 0x116f1703
and byte ss:[rdi], ah
add al, 0x5f
jle 0x4014d9
insb byte [rdi], dx
add byte [rcx - 0x48], ch
cwde
adc byte [rbp - 0x308c3da1], ah
and dword [rcx], edi
add dword [rbx], ebx
hlt
cwde
nop
xchg eax, ebx
out dx, eax
pop rbp
out dx, eax
ja 0x401507
and al, 8
insb byte [rdi], dx
mov sil, 0x67
add bl, byte [rdi - 0x38]
ljmp [rdi]
leave
adc ecx, dword [rsi - 0x2a]
adc byte [rcx], al
add al, 0x48
leave
push rax
push rdx
add al, 0x47
rol byte [rbx + rdx*4 + 0x2f5f6c65], 0xe
adc dword [rbp + 7], esp
loope 0x4014ab
or al, 0x36
stosd dword [rdi], eax
add al, 0xaf
jnp 0x40159c
cmp al, 0x20
adc dword [rdi], edi
mov byte [rdi + rax], 0x1b
cmpsd dword [rsi], dword ptr [rdi]
fadd dword [rip + 0x4d229c2]
out dx, al
nop
add eax, 0x105f018d
insb byte [rdi], dx
or byte [rbx + 0x2f552690], bh
jae 0x401561
leave
fldenv [rcx]
ret 0xd705
ror byte [rdx], 6
leave
fldcw word [rcx]
stc
mov edi, 0x2f06111a
shl byte [rdi], 1
mov ebp, 0x6320ec0
pop rdi
pop rdi
not byte [rdx]
out 0xec, eax
and byte [rbp + 2], ah
out dx, eax
imul esi, edi, 0x1fa17c2
movsxd rsi, dword [rdx + 0x74]
jae 0x4015b7
movsxd rcx, dword cs:[rbx - 0x240253]
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x4015f8
imul ebx, dword [edx], 0xddeded06
lcall [rdi + 0x74]
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4015c7
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or ebx, edi
fld xword [rdi - 1]
je 0x401624
jb 0x40162a
pop rdi
jne 0x401633
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x40162c
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xd0243538
inc byte [rdx]
pop rdi
imul bp, word [rsi + 0x69], 0x7208
jb 0x401637
jns 0x401637
out 0xbe, al
fnstsw dword [rsi + 0x7972ad]
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x40161d
or eax, 0x37584ed
pop rdi
sub dword [rdx + rbp + 0x6d], esi
adc ch, byte [rbx - 1]
fild qword [rsi - 0x61]
jo 0x40166e
pop rdx
push rbx
je 0x40164f
xor dword [rcx], edi
jo 0x401670
movsxd rsp, dword gs:[rbp + 0x77]
pushfq
xor byte [rdi + 0x7a5b6fb3], dh
outsb dx, byte [rsi]
movabs byte [0x6948381a74637572], al
outsd dx, dword [rsi]
out dx, al
jnp 0x401660
sub dword [rbx], esi
xchg dword [rbx + 0x61], esp
test ch, ch
mov dh, 0x9f
jne 0x40167d
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x340c650f
xor ebp, ebx
outsb dx, byte [rsi]
lodsd eax, dword [rsi]
cmp eax, 0x7263691d
imul ebp, dword [rcx + rbp*2], 0x6edb377a
int 0xd
push rdx
sub al, 0x6e
mov esp, dword fs:[rbp + 0x59]
movd mm4, esp
div byte [rax]
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r13b, byte [rdi + 0x5f]
sti
fstp st(5), st(0)
mov al, 0x6f
jne 0x4016d3
pop rdi
push rdx
pop r15
or r15b, byte [rdi]
pop rbx
sahf
insb byte [rdi], dx
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
out dx, eax
jle 0x40163c
push rdx
push rbx
push rsp
sub r11b, r13b
out dx, al
adc byte fs:[rsi + 0x7fdb6672], bl
ja 0x40165f
pop rcx
mov r11b, 0x4e
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x4016f7
xchg rax, r10
leave
sbb bh, ch
pop r8
pop rax
pop rdi
xor ebp, ebx
imul ebp, dword [rbp + 0x47], 0x7269bcb6
push rdx
pop rdi
call 0xffffffff849dd034
mov dh, 0xf3
movsxd rcx, eax
xchg eax, ebp
packuswb mm5, qword [rbp - 0x1c]
cld
and ah, bh
mov ebp, dword [rbx - 0x46]
jbe 0x401743
push rdx
sti
insb byte [rdi], dx
jae 0x40175e
movabs eax, dword [0xcb0a38744af83bb0]
and eax, 0xfb777b0
xor al, 0x49
movabs eax, dword [0x760f6c5776453143]
cwde
mov r11b, 0x1e
pop rdi
xor ch, byte [rsi]
add dword [rip + 0x3866850a], esi
jge 0x40169d
add edx, dword [rbp - 0x52f4f0c2]
in eax, dx
jo 0x40170d
jbe 0x401787
push rbx
add esp, dword [rbx + 0x1b]
pop rcx
fcmovnu st(0), st(2)
js 0x40178c
int1
outsd dx, dword [rsi]
js 0x401785
xor esi, dword [rdi + 0x19]
mov edi, 0x49442992
push rsp
pop r15
scasd eax, dword [rdi]
pop rax
jrcxz 0x4016cd
insd dword [rdi], dx
or al, 0x43
lodsd eax, dword [rsi]
push rsp
xchg eax, esp
je 0x40174d
mov ebx, 0x75491985
xor dword [rbx + 0x68], esp
retf
push rbp
jo 0x401705
jo 0x4017c3
packsswb mm0, qword [rbp + 0x15]
mov dword [rbp - 0x7b], edx
push -0x16900298
jg 0x40177e
xchg eax, ebp
idiv byte [rbp + 0x5345fe12]
xor eax, 0x634b505f
je 0x4017af
movsd dword [rdi], dword ptr [rsi]
js 0x4017c1
retf -0x2236
in al, dx
xor dword [rdx], esi
xor al, 0x33
imul ebp, dword [rsi + 0x67], 0x84a5b75a
not dword [rbx + 0x61]
pop rdi
sal byte [rcx], 1
stosb byte [rdi], al
fld xword ss:[rsi]
pop rbp
cmp byte [r15 + r11*2 + 0x75], r12b
mov ecx, 0xb42c26b7
add eax, 0x4b610fd0
xor byte [rax + 0x2e], al
enter 0x447f, 0xd
ret
jo 0x40177f
out dx, eax
pop rdx
imul esp, dword [rsi + 0xecf341e], 0xca638e60
lock xor dword [rax + rbp*2], esi
imul esp, dword [rsi - 0x6b], 0x1e086cad
push 0x65
jrcxz 0x401765
xchg eax, esi
mov esi, 0x68ff73b9
push -0x70
or edi, dword [rbx + 0x2c]
pop rax
outsd dx, dword [rsi]
ror byte [rdx + 0x18], 1
movabs eax, dword [0x6337b2a6dd1a040b]
popfq
insb byte [rdi], dx
cmpsb byte [rsi], byte ptr [rdi]
retf -0x2073
adc byte [rdi + rax], ch
movsxd rbp, dword [rbx - 0x22]
push -0x34b7f295
fmul dword [rbp + 0x6c]
push rax
adc dword [rcx - 0x7a], ebp
movabs dword [0x2e95c41e43ef911c], eax
nop
push rdx
push rax
cld
xchg eax, edx
sub dword [rbx + 7], 0x6f6c45df
int3
mov edx, 0x38c2ab0e
insb byte [rdi], dx
in eax, dx
call 0x7b257d82
xor bh, ah
pop rdi
sbb ebp, dword [rdi + 0x654790c7]
jno 0x401840
pop rdi
push -0x60
push rax
push 0x10592569
je 0x4017f7
pop rdx
scasb al, byte [rdi]
fld qword [rbx + 0x24283076]
scasb al, byte [rdi]
hlt
xor dword [rsi], ebp
movsd dword [rdi], dword ptr [rsi]
add dword [rdx], 0x552033b7
outsb dx, byte [rsi]
jp 0x401875
push rdx
or byte [rdi + rdi*4 + 2], dh
lodsd eax, dword [rsi]
mov eax, dword [rbx + 0x43]
xor byte [rcx + rcx*8 + 0x4fabbb6e], ah
jae 0x4018e2
insd dword [rdi], dx
je 0x4018e1
outsb dx, byte [rsi]
sbb eax, 0x968d86d
in al, 0x70
outsb dx, byte [rsi]
outsd dx, dword [rsi]
mov al, 0xad
pop rbx
sub rax, 0x620d6715
movsd dword [rdi], dword ptr [rsi]
mov esi, 0x622e7591
jne 0x40183a
sub eax, 0x9b0d1469
mov ecx, 0x38c5d6b7
or dword [rcx + rdi*2 + 0x6e], esp
test byte [r9], r11b
fcomp qword [rcx + 0x19]
jbe 0x401842
cmc
or al, 0x60
scasd eax, dword [rdi]
fcomp qword [rdi + 0x1b]
fld xword [rbx + 0x1cf60928]
outsd dx, dword [rsi]
adc dword [rcx + 0xa737274], 0x2c
fxch st(0), st(3)
mov ecx, 0x60086fdc
add eax, 0xd96f24f3
add ecx, 0x63
out dx, al
push 0x7264687b
or eax, 0x6e856836
pop rbp
movsxd rsi, dword [rcx]
jo 0x40190e
add edi, edx
mov ch, 0xca
mov ebp, 0x6296116c
and eax, 0xb439b0e
push 0x42
movabs eax, dword [0x68006436d0b7b366]
jnp 0x40195a
mov dh, 0x66
movabs byte [0xd000fd5220049739], al
stosd dword [rdi], eax
add eax, eax
add byte [rbx], bl
xchg eax, ebx
mov bl, 0x37
or edx, dword [rsi + 0x3f07b7b6]
and dword [rcx], ebx
xchg eax, edx
sbb al, 1
and eax, dword [rdi]
sbb dword [rax + rax*2 + 0x54], esp
push rsp
and byte [rax - 0x7a], cl
add al, 0x31
sbb dword [rsp + rsi*2 + 0x74], esp
and al, 0x20
xchg dword [rbx + rbx - 0x980bc], edi
ljmp [rdi - 0x68]
or dword [rdx + rsi], 0xffffffc8
cwde
cmp al, 5
or byte [rip + 0x4e243348], cl
or ebx, eax
in al, 0xec
and byte [rbx + 0x270d83f], al
sti
ror byte [rdx + rsi], cl
fnstcw word [rdi]
sbb byte [rsi + 3], dl
adc ebx, esi
test byte [rax + 0x7f], bl
xchg eax, esi
je 0x40197e
leave
push rdi
add ebx, dword [rsi - 0x41]
call qword [rdx - 0x58dec84d]
mov edi, 0x21ba4034
sbb eax, dword [rdx]
imul edi, dword [rdi], -2
fsub qword [rax + rbx*8 + 7]
cmpsd dword [rsi], dword ptr [rdi]
nop
xchg eax, ebx
jp 0x4019dd
add al, 0x4e
js 0x4019a5
test dword [rdi], 0x1d83303f
inc dword [rdi + r15 - 0x37cdf1be]
and byte [rax + 0x1001e098], bl
nop
sbb qword [r14 + 0x1466f013], rcx
xchg eax, esp
pushfq
lcall [rdx]
mov dword [rdi], edi
movabs al, byte [0x110150a020c8390b]
and dword [rbx], ebx
mov dl, 0x10
xchg eax, esp
mov dl, 5
xchg byte [rbx + 0xf2f0797], bl
xchg dword [rcx], edx
and dword [rbx], edi
popfq
mov edi, 0x2436430d
mov al, 0xc2
adc byte [rdi], bh
movabs dword [0x21ff077f24203373], eax
imul ebp, dword [rax], 0xbfa90939
sub byte [rcx], bl
mov al, 0xd0
rol byte [rax + 0x6e], 1
test byte [rcx + rsi*4 + 0x37], ah
nop
or al, 0x25
push rsp
mov edi, 0xc9b82792
push 0x19c3f07
enter -0x36d2, 0x3f
xchg dword [rdi], esi
xchg eax, esp
pushfq
in eax, 7
jg 0x401a34
fisttp dword [rsi]
or esp, dword [rsi]
add ebp, dword [rdi - 0x1b5e45f9]
test byte [rdi + 0xf3fe710], bh
adc ah, bl
clc
jmp qword [rcx]
xchg eax, esi
popfq
or esi, ebx
cmpsd dword [rsi], dword ptr [rdi]
xchg eax, edx
shl byte cs:[rsi], 0x1e
clc
wait
cmp al, 0x73
mov bl, 0xd9
jg 0x401a43
add dword [rdx], esi
enter -0x6370, 6
adc byte [rax + 0x16d90648], bl
mov edi, 0x24201f1f
mov ecx, 0xa1010108
in al, 0x6c
xor byte [rdi], ch
and byte [rdi], bh
mov eax, 0x92193704
or bh, byte [rax - 0x6fe680f9]
out dx, al
add dl, byte [rax]
or al, ah
pop rsp
enter 0x641, -0x38
xor byte [rip - 0x27c9bde0], al
nop
adc eax, 0x6117307f
and dword [rbx + rax*8 + 0x73f343f], ecx
pushfq
mov dl, 0xd9
adc dword [rbx], edi
xor byte [edi + 0x1e], bh
mov dl, 0x65
sub al, 0x92
add dword [rbx - 0x30d8cc00], edi
sbb ah, byte [rcx]
lcall [rax]
or dword [rdi], ebx
in al, 0x10
or byte ss:[rcx], 0x7f
sbb byte [rdx], ch
add byte [rax + 0x64ff245], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax - 1], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip + 0x50080216], ecx
jp 0x401b54
insb byte [rdi], dx
and ebp, ecx
in al, dx
rcr byte [rax], 0
add dl, cl
add byte [rax], al
mov byte [rcx], bh
add byte [rax], al
add al, byte [r8]
add al, 0xf4
add byte [rax], al
add bh, bh
