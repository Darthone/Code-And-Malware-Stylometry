call 0x401008
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400e20
add ebx, ebx
je 0x400dd6
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400e0e
cmp rbp, -4
ja 0x400e0e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400df6
add ecx, 4
mov dl, byte [rax]
je 0x400e1e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400e0e
ret
cld
pop r11
cmp r8b, 2
je 0x400e36
jmp 0x400eb3
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400e46
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400e2e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400e5e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400e4b
sub eax, 3
jb 0x400e7c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400eb3
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400ea3
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400ea1
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400e90
cmp rbp, -0xd00
adc ecx, eax
call 0x400de2
jmp 0x400e36
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400f8c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400f2a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400f76
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400f49
push 0x3a707474
jne 0x400fa2
js 0x400f62
jae 0x400f9c
outsb dx, byte cs:[rsi]
je 0x400f5b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400fc9
jb 0x400fbb
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400fe6
jb 0x400ff9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211bbf
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211bbf
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400ec4
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400fef
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400f9d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1097
jb 0x4010af
movsxd rbp, dword [rdi]
jae 0x4010a9
insb byte [rdi], dx
js 0x4010af
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40108f
cmp rsi, rcx
jae 0x401097
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401076
cmp al, 0x8f
ja 0x401076
cmp byte [rsi - 2], 0xf
je 0x40107c
sub al, 0xe8
jg 0x401079
push rdi
cmp al, 1
ja 0x401064
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401067
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401094
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4010eb
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1569
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x40112f
mov al, 0xa
jmp 0x40112f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x40110b
inc ebx
mov al, 0
jmp 0x401133
mov al, 2
jmp 0x401133
mov al, 3
jmp 0x401133
mov al, 0x3c
jmp 0x401133
push rcx
rcr ah, 1
fstp st(7)
jle 0x401174
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401186
jg 0x401178
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a68fb
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4011d2
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb634f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4011da
cmp esi, 0x21585055
jne 0x4011de
jge 0x4011d0
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4011d3
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4011d7
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401283
pop rcx
or al, 0x3b
jb 0x401289
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4011fb
jmp 0x4011fd
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x366113e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53386
in eax, dx
jg 0x401235
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40127b
mov bh, 0x2a
add edi, 0x10
jmp 0x401278
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4012b5
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4012f1
jne 0x401308
fstpnce st(6), st(0)
jle 0x4012d1
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401307
jrcxz 0x40133b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b29f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4013ba
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40137a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829594f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4013ed
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401387
and ecx, 7
or al, 0xeb
jae 0x4013f2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401427
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401465
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40141e
push rax
call 0xffffffff868d110b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401428
std
cmp edi, esi
xchg eax, edi
jle 0x40147d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95a09
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40147b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401469
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401492
js 0x4014d2
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401564
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad279f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401585
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40158a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc2103c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401518
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
and dword [rip + 0xe0000], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
shr byte [rax + 0x9080], 0
add byte [rax], al
add byte [rax], al
and byte [rcx], al
dec eax
sbb byte [rax], al
add ah, cl
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40163e
je 0x401647
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401610
mov dh, 0x7d
jbe 0x40160f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401648
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d800
and byte [rdi + 0x5a80006], bl
add byte [rax + 9], dl
enter -0x6fd9, 0xf
or byte [rax], al
nop
or dword [rax], eax
xor byte [rdx], cl
in al, 0x13
enter 0xa07, 0
or eax, dword [rax]
mov byte [rdx + rsi*8], cl
or esp, esp
add ecx, dword [rax + rax]
mov al, 0xd
add byte [rax], dh
sti
add al, 0xf2
add dword [rsi], ecx
add byte [rax + 0xf], al
add byte [rsi + rdx - 0x1a9fb0a1], ah
add byte [rax], dl
adc dword [rax], eax
clc
add dword [rdx + 0x5f12204d], esi
inc byte [rax]
stc
adc eax, dword [rax]
mov ah, 0x18
adc al, 0
call 0x14247686
pop rax
sbb dword [rip + 0x1617], edx
or esp, esp
add edx, dword [rdi]
add byte [rax], cl
sbb byte [rax], al
clc
stc
add cl, bh
add dword [rcx], ebx
add byte [rax], al
and byte [rdx], bl
add al, dl
insb byte [rdi], dx
add bh, byte [rcx + 2]
sbb eax, dword [rax]
loopne 0x4016ab
adc esi, dword [rsi + 0x24]
out dx, eax
cmpsb byte [rsi], byte ptr [rdi]
add dword [rdi], edx
add al, 0
int1
dec dword [rbx + rbx]
outsb dx, byte [rsi]
sbb ch, byte [rsi - 0x68e640d4]
add dl, byte [rax + 0x15]
and dword [rcx], ebx
ret 0x1b17
nop
mov dword [rsi - 0x2fd16f9c], 0x1b5f44
and dword [rdx], esi
fmul st(1)
lock and dword [rcx], eax
push rbx
xchg byte [r8 + r14*4 + 0x2b], r12b
jp 0x40170f
lock xchg byte [rax], dl
jbe 0x4016f2
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
cmp dword [rcx], edi
fsubr dword [rsi + 0x7614a08f]
ret 0xc250
in al, 0x41
popfq
jo 0x401706
cmp ecx, esi
sar dword [rdi], 1
mov al, 0x18
fstp st(0), st(0)
adc byte [rsi], dh
test byte [rdi], dh
add byte [rdi - 0x15], al
add eax, 0x8caec425
lahf
inc byte [rdi - 9]
fst dword [rax + rsi + 0x14981476]
and eax, 0xa778ca17
test byte [rdi], al
cmp byte [rcx], al
outsd dx, dword [rsi]
mov ecx, 0xbff70c01
add bl, byte [rdx + 0x3f]
scasb al, byte [rdi]
lodsb al, byte [rsi]
add byte [rax + 0x17], bl
jbe 0x40172b
ret
add ah, byte [rax]
adc eax, 0xc843742a
push -0x27dfe873
adc byte [rdx], dh
sbb byte [rax + rsi*4 + 0x610c8a47], 0x43
fsub dword [rcx]
in al, dx
retf -0xae1
sbb al, byte [rdx]
or byte [rdi + 0x34], dh
movabs eax, dword [0x9f2148615a800f11]
in al, dx
adc byte [rdi], 0x73
add eax, dword [rax]
and ah, byte [rax - 0x53]
fst dword [rax]
cmp dword ss:[rdi + 0x53], eax
fild word [rcx]
movsb byte [rdi], byte ptr [rsi]
mov ebx, 0x77780d90
and byte [rsi + rsi*2], cl
pop rcx
xchg eax, ecx
xchg eax, esp
mov dword [rdi + rbp], 0x30d200a3
test byte [rbp + 0x1d3e10c7], bh
fmul st(2)
mov ebp, 0x629b11e7
xchg eax, ebx
add dh, ch
add al, byte [rax - 0x67]
push rbx
nop
or cl, bh
add bl, byte [rdx]
add rax, 0x9b27679
adc byte [rcx], al
out dx, eax
sbb al, 3
leave
fldenv [rcx]
cmp dword [rax + 0x58], edx
add eax, dword [rdi - 0x28]
in al, dx
leave
xor ecx, dword [rsi]
add edi, dword gs:[rdi]
xor byte [rsi], dl
add byte gs:[rdi - 0x28], al
and dword [rcx], ebx
in al, 0x75
mov cl, 3
xlatb
in al, dx
leave
mov bl, 0x17
add al, 0xbf
and byte [rsi + 0x76170320], dl
add byte [rcx + 0xf1013e6], al
add al, 0x47
and dword [rbx - 0x28], eax
add eax, 0x3a56173a
cmp eax, dword [rsp + rcx + 0x7701206e]
push -0x326cdef2
mov ebp, 0x7b02050c
and edi, ecx
mov edi, 0x5119300
and eax, 0x39ec21df
add dword [rip + 0x486c1aef], 0x588384e
test eax, 0xb0866a47
and ecx, eax
fisub dword [rdx]
and dword [rbx + 0x35fef74], eax
add eax, 0x24bc2722
scasd eax, dword [rdi]
push rdi
scasd eax, dword [rdi]
outsd dx, dword [rsi]
mov dh, 0xc0
scasb al, byte [rdi]
sub al, 0xf
cli
pop rdi
or dword [rdi + 0x63fffffc], edi
jb 0x4018b8
jae 0x4018ba
jne 0x4018ae
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
add byte [rbp + 0x72], ah
fdivp st(5)
fstp st(2), st(0)
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40188f
outsd dx, dword fs:[rsi]
pop rdi
std
neg bh
fimul word [rbx]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4018df
jne 0x4018fb
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4018f4
in eax, dx
mov al, 0xbf
sub dword [rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xdb08
in eax, dx
or edi, ebp
jb 0x401913
jns 0x401903
fnsave dword gs:[rdx + 0x79]
add byte [rsi + 0xa], ah
insd dword [rdi], dx
and byte gs:[rbp + 0x58], dh
out dx, al
insd dword [rdi], dx
insd dword [rdi], dx
jns 0x4018e9
or eax, 0x2a74295f
std
in eax, dx
insd dword [rdi], dx
adc bl, byte [rdi + 0x47277070]
fstp st(6), st(0)
outsb dx, byte [rsi]
mov ah, 0x2e
jae 0x4018f7
pop rdi
xor al, 0x6f
jne 0x40194e
adc ebx, dword [rdx + 0x53]
je 0x40192b
out dx, al
mov edi, 0x1238b77b
imul ebp, dword [rdi + 0x37], 0x4152464a
pop r15
mov al, 0xe5
ret
ror byte [rbx], cl
push rbp
and bl, dil
in eax, dx
jnp 0x40194b
push rdx
push rbx
cmc
push rsp
sub byte [r13 - 0x7e27b27b], r8b
adc byte fs:[rdx], dl
jg 0x401993
mov ecx, 0x4466076b
pop rcx
jle 0x401975
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x401971
imul ebp, edi, 0x40dbfd1a
pop r8
pop rax
pop rdi
xor ebp, dword [rsi + 0x62696c32]
movsxd rdx, dword [rcx + 0x2c]
or dh, byte [rdi]
test al, 0xf9
movsd dword [rdi], dword ptr [rsi]
mov dh, 0x2d
jg 0x4018ee
mov esi, 0x7268741a
outsd dx, dword [rsi]
ja 0x4019b4
sbb ah, byte fs:[rcx + 0x49]
wait
adc eax, 0x3476d91e
insd dword [edi], dx
mov al, 0x87
in eax, dx
and ah, bh
jbe 0x4019ca
push rdx
test byte [rbx + 0x6c], al
jae 0x4018f3
jg 0x40194f
neg byte [rdx + 0x64]
insb byte [rdi], dx
push rax
pop r13
xor eax, 0x70797463
movsxd rbp, ebp
dec dword [rcx + 0x63]
xor dword [r11], r14d
pop rdi
pop r15
ja 0x4019fb
mov ecx, 0xe62d45b6
jge 0x4019ca
xor dword [rcx], esi
mov bl, 0x74
cmp byte [rax], dh
jae 0x40192c
push rsp
xchg eax, esi
mov dl, 0xd9
out dx, al
xor al, 0x49
and eax, 0xc1273143
mov word [rcx - 0x7e9e27c3], fs
pop rdi
xor ch, byte [rsi]
add ebp, esp
enter 0x56da, -8
movsxd rdi, dword [rax + 0x61]
adc bl, byte [rdx - 0x12e6c388]
xchg eax, ebp
pop rsp
pop rcx
pop rbp
push r12
movsb byte [rdi], byte ptr [rsi]
jrcxz 0x401962
insd dword [rdi], dx
sbb dword [rbx + 0xc], esp
push rsp
insb byte [rdi], dx
mov ebx, 0x4f1b5d75
jbe 0x401a49
jno 0x401a46
jne 0x401a28
sub bl, cl
fsubr dword [rax]
and byte [r9 - 0x5e], 0xd8
push 0x6976b1ee
xor dword [rax], esi
sti
xchg eax, edx
xor al, 0x61
and dword [rsi + rsi*4], edx
pop rdi
or eax, 0x45456449
push rdx
adc dl, byte [rdx - 0x29]
add byte [rax - 0x32], dh
shr byte [rdx + 0x40], 1
xchg eax, ecx
cmp ecx, dword [rdx + 9]
mov cs, word [rip + 0x349c19c3]
movsxd rcx, dword [rdi + rdx*2 + 0x76]
movabs eax, dword [0x690769c534b4486b]
jbe 0x401a85
push 0x60a484b4
adc esi, dword [rcx]
movsxd rbp, dword [rax + 0x72]
sub ebp, dword [rbx - 0x28]
fcomp qword [rdi + 0x65]
fidiv dword [rbx + 0x71]
fistp qword [r14 + rax*2 + 0x739a752b]
add eax, 0x72a73d25
xchg dword [rbp + 0xc], esp
xchg eax, ecx
pop rax
outsd dx, dword [rsi]
int 6
and edx, dword [rax + rcx*2]
outsd dx, dword [rsi]
xor eax, 0xc15ac09b
push rax
and edi, ebp
cmp al, 0x52
jmp 0x401a70
movsb byte [rdi], byte ptr [rsi]
xor esp, dword [rbx - 0x1d]
xor ah, dh
and al, 0xb4
lea ebp, [rbp + 0x53]
push rax
xor dword [rbx], esi
xchg eax, ebp
sbb byte [rsi + rax*2 + 0x76657a57], al
mov bl, 0xad
push 0x54
pop rbx
fld st(2)
outsd dx, dword [rsi]
xor eax, 0x68886c66
loope 0x401ab3
sbb dword [rbx - 0x47], ebx
mov cl, 0x63
imul esp, edx, 0x68
imul esi, dword [rdx + 0x6c], 4
ret 0x3a56
cmp dword [rcx - 8], ebp
sub dword [rcx + 0x51], 0x4472b5ed
movabs byte [0x49498e8da51aa518], al
fldcw word [r14 + 0x1a]
wait
sub bl, byte [rcx]
enter 0x6f4e, 0x73
std
mov byte [rdi + rax*8], 0x17
int1
cmp dword [rbp + 0x58], eax
push rdi
mov word [rbp + 0x33436f71], ss
sbb al, 0x86
sub al, 0x15
insb byte [rdi], dx
jp 0x401a9d
ror byte gs:[rdx], 1
cmp al, 0x3d
ret
cli
js 0x401b07
xchg eax, esi
mov ebx, 0x34a35ad5
fld qword [rbp + 0x30766745]
sub byte [rsi + 0x6f], ch
mov ch, 0x5c
and al, 0x92
out 0x31, eax
xor esp, dword cs:[rax]
push rbp
outsb dx, byte [rsi]
fild word [rsi + 0x6ed395ab]
adc byte [rbp + 0x6d], al
mov eax, 0xcf1bac43
mov edx, 0xaf303f43
xor esi, dword [rax - 0x45]
movsxd r10, dword [rip - 0x767e69d3]
cmp byte [rsp + rdx + 0x29006427], dl
add cl, byte [rdi + 0x2f]
js 0x401b03
not byte [rsi + 0x23]
push rbp
jae 0x401ba5
insd dword [rdi], dx
movsb byte [rdi], byte ptr [rsi]
je 0x401acc
fidiv dword [rax + 0x9687293]
xchg rax, r13
jo 0x401b9c
pop rbx
mov bh, 0xdc
outsb dx, byte [rsi]
outsd dx, dword [rsi]
lodsb al, byte cs:[rsi]
sub eax, 0x880d6715
insd dword [rdi], dx
outsb dx, byte [esi]
jne 0x401b7e
jne 0x401b6c
sub eax, 0x9b0d0077
mov ecx, 0x382456b7
or dword [rcx + rdi*2 + 0x6e], esp
or dword [r11 - 0x23], r13d
pop rcx
sbb dword [rsi - 7], esi
imul edi, edx, 0x2ad7b00c
mov eax, 0xf83a1b5f
sub byte [rcx], cl
jnp 0x401b21
mov bh, 0x41
je 0x401bf2
or bpl, byte [r11 + r15]
loopne 0x401be2
outsb dx, byte [rsi]
outsd dx, dword [rsi]
or byte [rdx + 0x1e246505], al
or al, 0x1e
movabs eax, dword [0x64685168652e4d6f]
jb 0x401b50
out dx, al
jbe 0x401b69
or eax, 0xee63635d
movsxd rsp, dword [rbp + 0x70]
rcr byte [rbx - 0x4228fed3], cl
insb byte [rdi], dx
adc ecx, ebx
or edx, r8d
and eax, 0xa1186a0e
cdq
mov bl, 0xb7
ret
add byte [rax + 0x7b], ch
pop rsi
and al, al
mov dh, 0xe6
movabs al, byte [0xd1960000fd52f604]
stosd dword [rdi], eax
or dword [rbx], ebx
jg 0x401bf2
xchg eax, edx
mov bl, 0x37
or edi, dword [rdi + 0x401c3f07]
and dword [rcx], ebx
add dword [rbx], esp
sbb dword [rsp + rdx*2 + 0x54], esp
and byte [rax + rcx*2 - 0x7a], ah
add al, 0x31
je 0x401c0d
sbb dword [rsp + 0x44], esi
jg 0x401bc2
and byte [rdi - 0x944], al
outsd dx, dword [rsi]
cwde
cwde
and al, 0x83
or al, 0x32
cmp al, 5
or byte [rbx + 0x4e33480d], al
or ebx, eax
fcomp st(1)
in al, 0xec
and al, dl
add bh, bl
pop rax
ror byte [rdx + rsi], cl
sbb byte [rsi + 3], dl
leave
adc ebx, esi
test byte [rdi + 0x3a73f07], al
and dword [rsi - 0x40a1e88c], edx
ljmp [rdi + 0x37b02ec8]
mov edi, 0x19370702
nop
outsb dx, byte [rsi]
imul edi, dword [rdi], -2
nop
fldenv [rax + rdx*4 + 0x33]
cmpsd dword [rsi], dword ptr [rdi]
movabs al, byte [0x4f7a4dd25884ff06]
add al, 0xff
test dword [rax + 0x3f07de13], edx
xor byte [rdx], dh
enter -0x78a0, -1
test byte [rdi], bh
in al, 0x92
or dword [rax], 0x28
add bl, byte [rcx]
add eax, 0x8e018419
adc eax, dword [rsi]
and eax, 0x3f19bc27
lcall [rdx]
xor cl, al
nop
or eax, 0xb0b03f89
xchg ah, ch
add byte [rcx], 0x10
xchg eax, esp
loope 0x401cf5
enter -0x60c1, 7
enter 0x6c8e, -0x7f
setge byte [rdi]
fsub qword [rax + rax*2 + 7]
xor byte [rdx + 0x40], ah
xchg byte [rax + rdx + 0x3f], bpl
movabs dword [0x9ff07cf66e67250], eax
add eax, dword [rdx - 0x2e]
test eax, 0xc8074fbf
xchg byte [rdx - 0x4eb740cd], dl
sbb dword [rax + rdi*8 + 0x7f], ebp
clc
wait
adc al, 0x21
sbb dword [rdi - 0x746df899], edi
in al, 0x99
jg 0x401d4c
add ecx, ecx
mov ecx, 0x78f1149
jg 0x401cf5
sub eax, dword [rdi]
or al, 0x25
fist dword [rbx]
lahf
outsd dx, dword [esi]
sub al, 0x17
call qword [rax]
add edx, edx
or eax, 0xf3fe725
clc
pop rsp
and al, 0x26
push rbx
sbb dword ss:[rcx + 0x1e0f3fec], esi
int 0x96
je 0x401d0d
clc
wait
in al, 0xe4
cdq
wait
jg 0x401d07
add dword [rsi], eax
mov dh, 0x90
xchg byte [r8], dl
cwde
mov edi, 0xc83245c8
or byte [rbx + 0x1392101], al
add dword [rdi + 0x20], ecx
nop
or al, 0x25
ror byte [rdx], 1
and byte [rax + 0x7f07d0c9], bh
adc byte [rdx], dh
enter 0x7480, 0x3f
or al, ah
loopne 0x401d8a
xor ah, byte [rcx]
js 0x15601fcb
or ebx, ecx
jg 0x401d85
xor al, 0x66
xchg dword [rbp + 0x11073f30], eax
jnp 0x401da9
sahf
jno 0x401d2e
add byte [rbp + 0x11e7f30], al
sub ebx, dword [rbx + 0x1800bbb1]
and edi, edi
add dword [rcx + rdi + 0x1f094879], esp
xor dl, byte [rdx + 0x9b08727]
jg 0x401de2
sub ah, byte [rip + 6]
sub al, 0
adc al, byte [rax]
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x34f7fdea], ecx
ret 0xf4bc
xor cl, byte [rcx - 2]
enter 0x18, 0
int3
add byte [rax], al
test al, 0x39
add byte [rax], al
add byte [r8], al
xor dh, ah
add byte [rax], al
add bh, bh
