call 0x400ee8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400d00
add ebx, ebx
je 0x400cb6
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400cee
cmp rbp, -4
ja 0x400cee
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400cd6
add ecx, 4
mov dl, byte [rax]
je 0x400cfe
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400cee
ret
cld
pop r11
cmp r8b, 2
je 0x400d16
jmp 0x400d93
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400d26
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400d0e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400d3e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400d2b
sub eax, 3
jb 0x400d5c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400d93
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400d83
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400d81
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400d70
cmp rbp, -0xd00
adc ecx, eax
call 0x400cc2
jmp 0x400d16
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400e6c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400e0a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400e56
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400e29
push 0x3a707474
jne 0x400e82
js 0x400e42
jae 0x400e7c
outsb dx, byte cs:[rsi]
je 0x400e3b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400ea9
jb 0x400e9b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400ec6
jb 0x400ed9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211e2f
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211e2f
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400da4
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400ecf
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400e7d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f0f77
jb 0x400f8f
movsxd rbp, dword [rdi]
jae 0x400f89
insb byte [rdi], dx
js 0x400f8f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400f6f
cmp rsi, rcx
jae 0x400f77
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400f56
cmp al, 0x8f
ja 0x400f56
cmp byte [rsi - 2], 0xf
je 0x400f5c
sub al, 0xe8
jg 0x400f59
push rdi
cmp al, 1
ja 0x400f44
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400f47
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400f74
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400fcb
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1449
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x40100f
mov al, 0xa
jmp 0x40100f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400feb
inc ebx
mov al, 0
jmp 0x401013
mov al, 2
jmp 0x401013
mov al, 3
jmp 0x401013
mov al, 0x3c
jmp 0x401013
push rcx
rcr ah, 1
fstp st(7)
jle 0x401054
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401066
jg 0x401058
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a67db
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4010b2
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb622f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4010ba
cmp esi, 0x21585055
jne 0x4010be
jge 0x4010b0
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4010b3
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4010b7
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401163
pop rcx
or al, 0x3b
jb 0x401169
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4010db
jmp 0x4010dd
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x366101e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53266
in eax, dx
jg 0x401115
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40115b
mov bh, 0x2a
add edi, 0x10
jmp 0x401158
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401195
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4011d1
jne 0x4011e8
fstpnce st(6), st(0)
jle 0x4011b1
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4011e7
jrcxz 0x40121b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b17f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40129a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40125a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x5829582f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4012cd
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401267
and ecx, 7
or al, 0xeb
jae 0x4012d2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401307
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401345
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4012fe
push rax
call 0xffffffff868d0feb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401308
std
cmp edi, esi
xchg eax, edi
jle 0x40135d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c958e9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40135b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401349
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401372
js 0x4013b2
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401444
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad267f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401465
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40146a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20f1c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4013f8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
movabs eax, dword [0x20000000e000002]
add byte [rax], al
add byte [rax], al
movabs dword [0x9082], eax
add byte [rax + 0x1958ff04], al
add byte [rax], al
add ecx, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40151e
je 0x401527
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4014f0
mov dh, 0x7d
jbe 0x4014ef
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401528
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d800
and byte [rdi + 0x5600006], bl
add dl, al
or al, cl
nop
invd
add al, bh
or dword [rax], eax
mov byte [rcx], cl
in al, 0x13
enter 0xa07, 0
mov eax, 0xbb0000b
or esp, esp
add ecx, dword [rax + rax]
ror byte [rip - 0x6f2d000], 1
add al, 0xf2
add dword [rsi], ecx
add byte [rax + 0xf], al
add ah, ah
sbb byte [rbp + 2], ch
stc
add byte [rax], dl
add al, dh
adc dword [rdi - 0x7f], eax
xchg eax, ebp
add eax, dword [rcx + rbx - 0x1be8edb1]
movups xmm7, xmmword [rsi]
adc eax, dword [rax]
xor al, 0x1b
adc al, 0
call 0xffffffff817e7567
xchg eax, ebp
add dword [rip + 0x1617], edx
lahf
add byte [rax], cl
sbb byte [rax], al
clc
seto byte [rdi]
and byte [rcx], bl
add byte [rax], al
and byte [rdx], bl
add byte [rsi], ah
nop
nop
rcr byte [rbx], 0
loopne 0x40158c
repne outsb dx, byte [rsi]
retf 0x113
add al, 0
int1
dec dword [rsi]
loope 0x401549
sbb edi, dword [rdi + 0x48029719]
sbb edx, dword [rdx - 0x4fe8e490]
mov ebp, 0x2e641921
pop rdi
cmp ebx, ebx
xor eax, 0x15f21f0
push rbx
jbe 0x4015c9
jp 0x4015ee
adc byte [rsi], cl
push rdi
in al, 0x86
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
fldenv [rbx - 0x7d851f4]
ja 0x4015f0
and dword [rdi], ecx
leave
popfq
fsubr dword [rdi]
xor bl, al
nop
or al, 0xf9
in eax, dx
cli
in al, 0xec
cli
cmpsd dword [rsi], dword ptr [rdi]
jbe 0x4015eb
sahf
adc cl, byte [rsi - 0x62]
sbb al, 0x2a
add dword [rax + rbx], edx
adc eax, 0x38dc857f
xchg dword [rsi], edi
add dword [rdi - 0x7a7fe4d0], ebx
xor dh, bl
push rdi
mov r9b, 0x2b
and esi, dword [rsi + 0x58]
cwde
ljmp [rbx + 0x47]
and eax, 0x57195d8c
sub dword [rdi], 0x2b627f14
xchg eax, edx
add r11b, r8b
mov ebp, 0x39acf32
pop rdx
lahf
mov al, 0x2b
imul ebp, dword [rsi - 0x52], 0x2f
add ch, al
ret
sbb dword [rdx - 0x7a], eax
fdivr st(4), st(0)
jne 0x401635
loopne 0x40162d
sahf
add esp, dword [rbp - 0x19]
xchg eax, edi
sub cl, byte [rdi - 0x53fffdfc]
fcom dword [rax]
jbe 0x401650
pop rdi
test byte [ebp + 0x60], bl
scasd eax, dword [rdi]
add cl, byte [rdi + 0x20c8174c]
pop rbp
xor ebp, dword [rbx + 0x22]
cmpsd dword [rsi], dword ptr [rdi]
sub dword [rdx], edx
jns 0x401641
xor r15d, dword [r9 + r10 + 0x6f]
sub al, 0x60
cmp byte [rax], 1
and dword ss:[rdi - 0x1fff38e4], ebx
test dword [rdi + 0xb], ebx
cmp ebx, eax
adc byte [rdi - 0x58f3bfe9], bl
sbb eax, 0xc4b086c2
xlatb
loopne 0x4016c3
and eax, 0x76204b03
adc dword [rdi], 0xc357a76f
add eax, 0x5f04b072
jle 0x401691
cwde
test dword [rsi], 0x10480361
movsd dword [rdi], dword ptr [rsi]
pop rdi
cmp dword [rcx], eax
cmp dword [rcx], edi
mov ecx, 0x2277efc5
add ch, bh
iretd
and byte [rdi], ah
fist word [rdi]
and al, 8
add ch, byte [rcx + rbx*8 - 0x2fa09370]
ljmp [rdi]
not dword [rdx + 0x109c2793]
add dword [rdi], ebx
add al, 0x80
ficom word [rax + 0x4521d9c]
enter 0x2f5f, -0x28
adc byte [rsi - 0x42], cl
fistp word [rax]
int1
test byte [rbx + 0x32], al
nop
stosd dword [rdi], eax
add al, 0xdf
cmp al, 0x18
jnp 0x4016d0
in al, dx
test dword [rdi - 0x3a], ebp
add al, 0x8f
and byte [rsi], ah
and byte [rbx], al
js 0x40174f
cmpsb byte [rsi], byte ptr [rdi]
cmp ebx, ecx
adc byte [rdi + 0x87204d7], bh
mov ebx, 0x17f31f40
or eax, dword [rip + 0x5eceb36]
lea eax, [rcx]
pop rdi
push 0x36102fc7
test byte [rdx + rbx*2 + 0x78], cl
in al, dx
mov dword [rip - 0x33d6bf41], 0x8604872f
or eax, 0x2ce717e4
in al, 0xec
xchg eax, esp
jl 0x401714
sbb dh, byte [rbx]
adc al, ah
pop rbp
xchg dword [rsi + rax + 0x5f], edx
insb byte [rdi], dx
or dword [rdi], eax
imul edi, edi, 0x1f094036
imul ebp, dword [rdi], 0x6f2c03f4
movsxd rsi, dword [rdx + 0x74]
jae 0x4016fb
sti
mov bh, 0xff
test dword [rbx - 0x2d], esp
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x4017c4
imul ebx, dword [edx], 0x5bffbbdb
pop rdi
je 0x4017d7
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401793
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx - 0x49]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4017e3
jne 0x4017ff
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4017f8
sub dword gs:[rsi + rbp - 0x41], esp
std
add eax, 0x383537f6
xor eax, 0x69665f24
outsb dx, byte [rsi]
imul ecx, dword [rax], 0x79617272
pop rdi
jge 0x401761
jge 0x40174b
and eax, 0x66007972
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x4017c0
jmp 0x4017bf
int3
xor cl, byte [rip + 0x2a74295f]
mov edi, 0x616ddadd
adc bl, byte [rdi + 0x5a277070]
push rbx
je 0x40181b
xor dword [rcx], edi
jo 0x40183c
movsxd rsp, dword gs:[rbp + 0x77]
fbstp tbyte [esi + 0x7a309cd6]
outsb dx, byte [rsi]
movabs byte [0xdad381a74637572], al
imul byte [rsi + 0x48]
imul ebp, dword [rdi + 0x3e], 0x87823329
insd dword [rdi], dx
jmp 0x4017d2
movsxd rsp, dword [rcx - 0x7c]
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0xdd8d650f
pop rdx
fisttp dword [rsp + rsi]
xor dword [rsi], ebp
cmp eax, 0x7263691d
imul esi, dword [rsi + 0x2cbb9add], 0x520d7a69
sub al, 0x6e
mov esp, dword fs:[rbp + 0x59]
enter -0x1203, 0x6f
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r14b, sil
mov edi, 0x5fe7ddbb
mov r8b, 0x6f
jne 0x40189f
pop rdi
push rdx
pop r15
or r14b, byte [rsi + 0x3f84d93c]
or eax, dword [rdi + 0x4e]
push rbp
and byte [rdi], bpl
cld
cmovs eax, dword fs:[rdx + rdx*2 + 0x40]
push rbx
push rsp
sub eax, 0x4cdec26c
sub r14b, r13b
adc bh, bh
out dx, al
jb 0x401846
sahf
jb 0x4018d8
pop rcx
mov r11b, 0x4e
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x4018c3
xchg eax, ebx
xchg eax, ebp
cli
mov bh, 0x40
pop r8
pop rax
pop rdi
xor esp, dword [rbx + 0x16]
imul ecx, dword [rsi + 0x6925796c], 0x5f2e5272
mov ebx, 0xe8db6d08
movsxd rcx, eax
xchg eax, ebp
packuswb mm5, qword [rbp + 0x41]
clc
jae 0x40188f
imul edi, dword [rdx + 0x525f764a], -5
ja 0x4018ae
insb byte [rdi], dx
jae 0x40192e
clc
je 0x4018f7
or cl, bl
out dx, eax
outsb dx, byte [rsi]
test ebp, edx
sysenter
movabs rax, qword [0x30ec1e5776453143]
mov r11b, 0x1e
pop rdi
xor ch, byte [rsi]
or cl, ch
jo 0x4018b5
add dword [rip - 0x6afc7783], esi
pop rdx
fist dword [rip + 0x704f483e]
in eax, dx
jbe 0x401953
push rbx
mov dl, 0xb6
mov ch, 0x1f
add esp, dword [rbx + 0x78]
int1
outsd dx, dword [rsi]
js 0x401951
xor edi, dword [rsi + 0x25]
push rbx
ja 0x401946
push r12
pop r15
xor ch, byte [rdi + 0x54ad430c]
xchg eax, esp
ja 0x401920
mov cl, 0x74
sbb dword [rcx + 0x75], ecx
xor dword [rbx + 0x68], esp
retf
pop rsi
loope 0x4018f8
or dl, byte [rbp + 0x42]
packsswb mm0, qword [rbp + 0x15]
mov dword [rbp + 0x55e0d0d1], ebp
std
outsd dx, dword [rsi]
jmp 0x7b55989b
and eax, 0x45950bfc
push rbx
xor eax, 0x634b505f
je 0x40197b
movsd dword [rdi], dword ptr [rsi]
xchg eax, ebp
mov ebx, 0x4678edd9
xor dword [rdx], esi
xor al, 0x33
imul ebp, dword [rsi + 0x67], 0x95ef094b
pop rdx
push rbx
pop rdi
sal byte [rsi + 0x316eba5d], 1
stosb byte [rdi], al
cmp byte [r15 + r11*2 + 0x75], r12b
mov ecx, 0x6c0b6858
mov bh, 0xd0
punpcklwd mm0, qword [rax + 0x4b4d905c]
jg 0x4019bd
xchg cl, ah
pushfq
out dx, eax
pop rdx
imul esp, dword [rsi + 0x1b1cc01d], 0xca63341e
lock xor dword [rbx + rbx*2], esi
fst dword [rax]
sahf
push 0x6a1e6669
xor ebp, dword gs:[rip + 0x73b92b7d]
ljmp [rax + 0x42]
neg byte [rax - 0x3a]
push -0x2b
pop rax
outsd dx, dword [rsi]
xchg eax, ebp
xor byte [rdx + 0x21], al
or eax, dword [rbx + 0x4a1654d]
movsxd rbx, dword [rbp + 0x107d6c45]
sbb bl, byte [rbp + 0x69]
jbe 0x401979
imul esp, dword [rdx - 0x55], 0x31
fmul st(2)
fild word [rdi]
movsxd rbp, dword [rbx - 0x1d]
push -0x6e93ad95
or eax, 0x1655cb48
imul esi, esp, 0x1ca38652
and ecx, r9d
movabs dword [0xe407015094902eb5], eax
test eax, 0x456c8192
insb byte [rdi], dx
outsd dx, dword [rsi]
sbb cl, cl
xchg dword fs:[rbx], esi
fdivr dword [rax + 0x2a]
imul edx, esi, 0x6c5ae465
pop rdi
xchg byte [rbx + rdx*2 - 0x29], ch
pushfq
xor byte [rcx], cl
pop rdi
pop rdx
fstp xword [rax + 0x3d]
xchg eax, ebx
xchg dword cs:[rdi - 0x7a], ebx
imul esi, dword [rbp + 0x7b140d5b], 0x76a57432
xor byte [rax], ch
mov eax, 0x24cb40bd
rcl byte [rsi], 1
xor dword [rsi], ebp
xor esp, dword [rax]
push rbp
outsb dx, byte [rsi]
adc eax, 0x9c140d28
push r10
iretd
pop rbp
movabs al, byte [0xe9c6303f4343a8fb]
jae 0x401a03
jbe 0x401a1e
jns 0x401ab2
je 0x401abc
push 0x6b72dd09
push 0x1e
jo 0x401a5b
outsb dx, byte [rsi]
outsd dx, dword [rsi]
sub rax, 0x6d8205f0
adc eax, 0x75b30d67
jne 0x401a1b
sub edi, dword [rbp + 0x692d64c8]
or eax, 0xdace38c5
int3
mov ebp, 0x6e796409
sbb dword [r14 - 0x1a], r14d
int3
loope 0x401a1d
or al, 0x5f
sbb ebx, ebx
sbb eax, dword [rbx + rdi*2]
lodsd eax, dword [rsi]
int 0x28
or dword [rbx - 0x18491a8c], esi
js 0x401b08
xchg eax, ebp
or ch, byte [rdi + rbp*2]
or bh, al
mov edx, 0x582ce03
adc eax, 0x2eee6f24
fnsave dword gs:[rdx - 0x62977cf9]
push 0x5d0d7264
movsxd rbp, dword [rbx + 0x6d]
ror byte [rdx], 1
xor dword [rsi], ebp
mov byte [rax - 0x14], dh
mov ebp, 0xae025b36
insb byte [rdi], dx
adc dword [rax - 0x3a5ef4bd], edi
sbb al, 0x6a
movabs eax, dword fs:[0x68006f66cc736436]
jnp 0x401b35
mov ah, 4
xchg eax, ebp
insd dword [rdi], dx
int 0x44
push rdx
std
add byte [rax], al
sub al, 0xa3
pop rdi
add dword [rsi], ebx
and al, 0x67
outsd dx, dword [rsi]
sbb al, 0x80
xor al, 0x43
xor al, byte [rcx]
and eax, dword [rdi]
nop
or al, 0x32
enter 0x5454, 0x20
enter 0xc90, -0x37
add al, 0x31
je 0x401b3e
xchg eax, esp
or al, 0x32
je 0x401b30
jg 0x401a9f
jns 0x401b09
ljmp [rdi - 0x68]
cwde
sbb dword [rsp + rdi + 5], esp
or byte [rsi], al
sbb edx, dword [rax - 0x27f4b19a]
fdiv dword [rdx - 0x77be2637]
add bh, bl
mov cl, 0xa4
sbb dword [rax + rbx + 0x56], esp
add edx, dword [rdx + 0x1719bc27]
add eax, dword [rsi + 0x2c]
jmp 0xffffffffffff7976
and al, 0x67
outsd dx, dword [rsi]
mov edi, 0xc9070236
xor byte [rbx + rax*2 + 0x6b], 0x3f
clc
sbb dword es:[rcx + rdi*4 + 0x690a707], -0x3c
xchg eax, edx
outsb dx, byte [rsi]
retf 0x7aff
add al, 0x84
pushfq
pop word [rdi]
xor byte [rcx + 6], al
cmp ebp, dword [rdi + rdi*8]
test byte [rdi], bh
xchg eax, edi
sbb al, 0x64
nop
mov eax, 0x1901f8b8
enter 0xc20, 0x20
mov ss, word [rbx]
cmp ecx, esp
int 0x28
outsd dx, dword [rsi]
lcall [rdx]
xchg byte [r8 + rbp - 0x77], bpl
shl byte [rdi + rdx + 0x72], 1
nop
shl byte [rax + 1], 1
adc byte [rdi], al
sub dword [rdx + 0x36], eax
xchg eax, esp
jbe 0x401c10
or ecx, dword [rdi + rbp]
setge byte [rdi]
jns 0x401b9a
jg 0x401b5c
or eax, dword [rdx + 0x72]
fadd dword [rdx]
movabs dword [0x9ff071709373392], eax
sbb dword [rax], edx
xchg eax, edx
xchg byte [rcx - 0x6bc9b041], ch
pushfq
mov ecx, 0xb150bf07
xor esi, dword [rdi]
or eax, dword [rdx - 0x31]
jg 0x401c45
enter -0x6d7a, 0x54
mov edi, 0x245c983f
iretd
fadd qword [rdi]
jg 0x401b8b
add ecx, ecx
retf
int 0x8a
nop
jg 0x401b93
outsb dx, byte [rsi]
sub byte [rcx], bh
adc ebx, ebx
add esp, dword [rdi + 0x6f]
call qword [rax]
add edx, edx
or eax, 0xf3fe725
clc
pop rsp
and al, 0x26
push rbx
sbb dword ss:[rcx + 0x1e3f3fec], esi
int 0x96
je 0x401c25
clc
wait
in al, 0xe4
cdq
wait
jg 0x401c1f
add dword [rsi], eax
mov dh, 0x90
xchg byte [r8], dl
cwde
mov edi, 0xc83245c8
or byte [rbx + 0x1392101], al
add dword [rdi + 0x20], ecx
nop
or al, 0x25
ror byte [rdx], 0x17
and byte [rax + 0x7f07c0c9], bh
adc byte [rdx], dh
enter 0x7480, 0x3f
or al, ah
rol byte [rbx + 0x32], 1
and dword [rdi], ecx
mov byte [rdx + rax + 0x20], bh
adc eax, 0x60d90b0e
jg 0x401c9d
xor al, 0x66
xchg dword [rbp + 0x11073f30], eax
jnp 0x401cc1
sahf
jno 0x401c46
add byte [rcx], cl
xor dword [rdi + 0x1e], edi
add dword [rbx - 0x38], ebp
xchg eax, esi
mov cl, 0xbb
out 0x21, eax
inc dword [rax]
rcr byte [rsp + rdi + 0x361f0990], cl
leave
xchg eax, ebx
fmul dword [r9]
jg 0x401c31
sub dh, byte [rcx + 6]
add byte [rax], al
add byte [rsi], dl
add byte [rcx], cl
add byte [rax], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x49080216], ecx
push rsp
cmpsd dword [rsi], dword ptr [rdi]
movsb byte [rdi], byte ptr [rsi]
adc ebx, dword [rax + 0x19]
add byte [rax], al
add ecx, dword [rax]
add byte [rax], al
sub byte [rdx], bh
add byte [rax], al
add al, byte [r8]
xchg eax, esp
hlt
add byte [rax], al
add bh, bh
