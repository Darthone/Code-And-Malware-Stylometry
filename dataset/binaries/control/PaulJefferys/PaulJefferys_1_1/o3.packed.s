call 0x401c00
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401a18
add ebx, ebx
je 0x4019ce
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401a06
cmp rbp, -4
ja 0x401a06
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4019ee
add ecx, 4
mov dl, byte [rax]
je 0x401a16
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401a06
ret
cld
pop r11
cmp r8b, 2
je 0x401a2e
jmp 0x401aab
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401a3e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401a26
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401a56
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401a43
sub eax, 3
jb 0x401a74
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401aab
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401a9b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401a99
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401a88
cmp rbp, -0xd00
adc ecx, eax
call 0x4019da
jmp 0x401a2e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401b84
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401b22
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401b6e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401b41
push 0x3a707474
jne 0x401b9a
js 0x401b5a
jae 0x401b94
outsb dx, byte cs:[rsi]
je 0x401b53
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401bc1
jb 0x401bb3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401bde
jb 0x401bf1
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x213bb9
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x213bb9
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401abc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401be7
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401b95
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f1c8f
jb 0x401ca7
movsxd rbp, dword [rdi]
jae 0x401ca1
insb byte [rdi], dx
js 0x401ca7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401c87
cmp rsi, rcx
jae 0x401c8f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401c6e
cmp al, 0x8f
ja 0x401c6e
cmp byte [rsi - 2], 0xf
je 0x401c74
sub al, 0xe8
jg 0x401c71
push rdi
cmp al, 1
ja 0x401c5c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401c5f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401c8c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401ce3
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c2161
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401d27
mov al, 0xa
jmp 0x401d27
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401d03
inc ebx
mov al, 0
jmp 0x401d2b
mov al, 2
jmp 0x401d2b
mov al, 3
jmp 0x401d2b
mov al, 0x3c
jmp 0x401d2b
push rcx
rcr ah, 1
fstp st(7)
jle 0x401d6c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401d7e
jg 0x401d70
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a74f3
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401dca
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6f47
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401dd2
cmp esi, 0x21585055
jne 0x401dd6
jge 0x401dc8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401dcb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401dcf
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401e7b
pop rcx
or al, 0x3b
jb 0x401e81
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401df3
jmp 0x401df5
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661d36
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53f7e
in eax, dx
jg 0x401e2d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401e73
mov bh, 0x2a
add edi, 0x10
jmp 0x401e70
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401ead
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401ee9
jne 0x401f00
fstpnce st(6), st(0)
jle 0x401ec9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401eff
jrcxz 0x401f33
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1be97
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401fb2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401f72
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58296547
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401fe5
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401f7f
and ecx, 7
or al, 0xeb
jae 0x401fea
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40201f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40205d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x402016
push rax
call 0xffffffff868d1d03
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x402020
std
cmp edi, esi
xchg eax, edi
jle 0x402075
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c96601
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x402073
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x402061
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40208a
js 0x4020ca
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40215c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad3397
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40217d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x402182
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21c34
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x402110
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
outsd dx, dword [rsi]
add eax, 0xe0000
add byte [rax], al
add al, byte [rax]
add byte [rax], al
shl byte [rdx], 0x8a
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add edi, edi
push rax
add byte [rax], al
or byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x402236
je 0x40223f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x402208
mov dh, 0x7d
jbe 0x402207
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x402240
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d800
and byte [rdi + 0x6800006], bl
add byte [rdx - 0x6fd827f5], bl
invd
add al, ch
or dword [rax], eax
test al, 0xc
ja 0x402287
add ch, byte [rbx]
or dl, byte [rdi]
or eax, dword [rdi]
enter -0x6ff1, 0xf
or al, 0
add byte [rax], dl
or eax, 0xe403e409
add byte [rax], dl
adc cl, byte [rsi]
add byte [rax], ah
add al, 0xf2
add edx, esi
add byte [rbx + rsi + 0x2c00010], dh
stc
add cl, bh
adc dword [rax], eax
xor al, 0x12
add al, cl
mov ebx, 0x137c201c
add byte [rdi + rsi + 0x1f], ch
adc al, 0x3d
jl 0x402263
jns 0x402263
adc eax, 0x16f800
add byte [rsi], bh
cmp dword ds:[rax + rax*4 + 0x17], 0x180800
clc
and byte [rdi], bh
sbb dword [rax], eax
add byte [rax + 0x1a], al
add byte [rax], bl
nop
seto byte [rcx + 0x1b]
add byte [rax + 0x1c], al
repne outsb dx, byte [rsi]
retf 0x113
add al, 0
int1
dec dword [rbx + rbp*8]
js 0x4022c3
jnp 0x4022b5
mov edi, 0x170eb589
leave
and byte [rbx], dl
jb 0x4022cd
sbb eax, dword [rax + 0x36]
and al, 0x83
or al, 0x2e
add byte [rdi + rbx*2 - 0x6f], 0xc1
sbb eax, dword ds:[rax]
push rax
add dword [rdi], edx
push rbx
and al, 0x83
pop rbp
or dword [rdi + 0x7a], ecx
movabs al, byte [0xd7a5978632212bb0]
enter -0x3e37, -0x7a
scasb al, byte [rdi]
push rax
sub byte [rsi + 9], dh
xor al, dl
add byte [rsi + 0x1f], 0x85
in al, dx
cmp byte [rdi], al
sar dword [rdi], 1
push 0x10d84337
ret 0x37df
add byte [rdi - 0x15], al
adc byte [rbx - 0x60fa9dce], bh
inc byte [rdi + 0x53]
ret 0x95d8
not dword [rax + rbx*4]
adc al, 0x1f
and eax, 0x66129de3
cmp byte [rcx], al
outsd dx, dword [rsi]
add ecx, eax
sub edi, dword [rsp + rax + 0x6041203f]
xor dword [rsp + rsi*2], 0x2f
and ah, byte [rdi - 0x20]
push rbp
push rdi
int3
in eax, dx
add byte [rdx - 0x113627e9], bh
or al, 0xd1
mov r8b, 0x33
add dl, byte [rdi]
sbb dword [rbp + 0x4c0393c], -0x30
sub byte [rdx], ch
loope 0x402391
test byte [rsi], 0x21
add ah, byte [rdi - 0x2dffeae9]
or al, 0x21
sub dword [rdx], edx
and dword [rbx - 0x38], eax
cmp eax, 0x4301db6e
fcom dword [rbp + 0x2fc26775]
fsubr qword [rdi]
adc byte [rsi], cl
add dword [rbx], eax
add r12, qword [r8 + r9 + 0xb]
mov byte [rdx + 0x60], al
nop
and ecx, esp
rcl byte [rdi + 0x74], 0x17
enter 0x37c2, 4
and dl, byte [rdi]
adc dword [rbx + 0x27080d83], edx
add al, 0xa7
xor dword [rcx], eax
in al, 0xe4
fld dword [rax + 0x2c5472e]
movabs al, byte [0xc7103fba8e900760]
add al, 0xa7
imul edi, dword [rdx + 0x51d5ec0], 0x1177bd5f
in al, dx
mov word [rip - 0x3093bda0], es
and byte [rdi], ah
or byte [rax - 0x63d788fe], dl
lodsb al, byte [rsi]
fst dword [rax + 0x10f72f9c]
add dword [rbx], ebx
xchg eax, edx
xchg eax, ebx
mov bl, 5
loopne 0x4023b5
pop r15
outsd dx, dword [rsi]
and ah, bh
xor ebx, dword [rbp + rbx + 0xf652702]
cmpsd dword [rsi], dword ptr [rdi]
test cl, bl
nop
movsd dword [rdi], dword ptr [rsi]
fcom dword [r13 + r15 + 0x2fb1a71b]
int3
leave
xlatb
or al, 0x61
call 0xffffffffe46ab317
add eax, 0x43becf2
cmp r8b, byte [r15]
push rdx
mul ah
leave
or edi, dword [rdi + rax + 0x50]
xor edx, ebp
add dword [rdi], ebp
or ebp, esp
adc byte [rdx - 0x17], dh
cmp byte [rax], cl
xlatb
ret 0xe42e
leave
and byte [rcx], al
mov byte [rsi - 0x73], al
and dword [rax + rcx + 0x1b], esp
fcom qword [rdi]
clc
and dword [rdi], edx
enter 0x91e, 0x66
test byte [rcx], cl
loope 0x4023c4
int1
jnp 0x12002b40
in al, 5
jb 0x40247e
lodsb al, byte [rsi]
or dword [rcx], ebx
or al, byte [rdx - 0x7a]
mov al, 0xb
sub al, 0x17
pushfq
jne 0x402452
sbb dword [rbp + 0x70], ebx
or al, byte [rdi]
shr byte [rsi + rcx*8], 1
add dword [rbx], -0x59
or ah, bh
adc byte [rdx], bh
mov esp, 0x60f162a
mov edi, 0x72630fd1
je 0x4024dc
mov word [rsi + 0x66], fs
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
pop r11
sti
or eax, 0x95453da
jb 0x4024e7
imul ebx, dword [edx], 0xdbdb5f06
mov ebx, 0x5f6d74ff
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4024b6
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rsi + rsi*8 - 0x49], esi
outsd dx, dword [rsi]
jb 0x402519
pop rdi
jne 0x402522
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x40251b
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xa3243538
mov edi, 0x665f05fd
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x402526
std
out dx, al
fld xword [rbp - 0x7e868d90]
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x40250b
pop rax
or eax, 0x2a74295f
insd dword [rdi], dx
mov ch, 0xfd
in eax, dx
adc bl, byte [rdi + 0x47277070]
jae 0x4024ad
fstp st(6), st(0)
pop r15
xor al, 0x6f
jne 0x402574
adc ebx, dword [rdx + 0x53]
je 0x402551
cmp byte [rdx], dl
imul ebp, dword [rdi + 0x66], 0x377bbfee
push rdx
pop r15
sar byte [rbx - 0x50], cl
in eax, 0xc3
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
push rdx
fdivr st(3)
in eax, dx
push rbx
cmc
push rsp
sub byte [r9 + 0x4d85856b], r8b
adc byte fs:[rdx], dl
out dx, al
pop rbx
ja 0x4024ff
pop rcx
jle 0x40259b
jg 0x402585
jbe 0x4025b6
movsxd rbp, ecx
mov ebp, 0x49badf6d
or dh, byte [rdi]
sub al, 0x63
js 0x4025d6
xor dword [rax], eax
xor bh, bh
jae 0x4025cd
movsxd rax, dword [rsi + 0x2ed6f6b7]
jb 0x4025a8
movsxd rbx, dword [r9d]
adc ah, byte [rbx + 0x68]
movabs r15, 0x4510734b446b6dee
push rbx
add al, 0x45
push rbx
xor eax, 0x6fd8e5fc
xchg eax, esi
xor dword [rbp + 0x76], r8d
int3
xor dh, byte [rax]
je 0x4025fc
jb 0x402605
ja 0x4025f7
mov bh, 0xd6
pop rdx
sub edx, dword [rcx + rdi + 9]
ja 0x4025fd
push rax
movsxd rbp, dword [r13 + 0x4063edfe]
scasb al, byte [rdi]
pop r8
pop rax
pop rdi
xor esi, dword [rax]
js 0x402625
mov al, 0xdd
imul byte [rbx + r14*2 + 0x45]
imul edx, dword [rsi], 0x76626935
movsxd rcx, dword [rip + 0x21a11639]
jb 0x40261c
xor dword [rsi], esi
js 0x402633
mov bh, 0xb6
xchg eax, ebx
sbb dl, byte fs:[rdi + 0x67347674]
insd dword [rdi], dx
and ah, bh
push rsi
loopne 0x4025ba
sub dword [rdx + 0x76], ecx
pop rdi
push rdx
std
sub ebx, edi
xchg ebp, ebp
insb byte [rdi], dx
jae 0x4025e9
pop rdx
insb byte [rdi], dx
push rax
jbe 0x402577
imul bh
fidiv word [rsi - 0x5caa2b5]
jns 0x40266f
retf
xor dword [rbx], esi
pop rdi
pop r15
ja 0x402671
mov ch, 0xd7
insb byte [rdi], dx
test byte [rdi], ch
sub eax, 0x1b30ff2e
out dx, al
sub al, byte [rcx + 0x65a55539]
out 0xc2, al
sbb dh, byte [rdi + 0x52458c61]
push rbx
xor dh, byte [rax + 0x2d]
jbe 0x40267a
pop rdi
loopne 0x40264f
sbb dword [rbp - 0x64], ebp
mov ebp, 0x311ac551
xor ebp, dword cs:[rbp + 0x38]
jae 0x402651
mov dl, 0xdd
int 0xf6
ret 0x4934
xchg eax, ebx
xor dword [r13 - 0x7efcc7b4], edx
mov edi, 0x83b77d32
cmp eax, 0x6cb64826
pop rdi
xor ch, byte [rdx - 0x29bdcad2]
mov edx, 0x78c9ab60
sbb dword [rbx], esi
or eax, dword [rcx]
adc bl, byte [rcx]
jo 0x40269f
stc
mov es, word [rdx - 0x1f]
push rdx
jl 0x4026d7
movsxd rbx, dword [rbx]
sbb ah, byte [rdx]
mov ecx, 0x1e080212
add al, 0x44
fist dword [rdx + 0x54492bda]
int1
or al, 0x43
jmp 0xffffffffef8fed4a
push rsp
sbb dword [rbx], 0x4b64884f
add edx, eax
jbe 0x4026fc
jne 0x4026de
mov esp, 0x66c8bb5f
cmp dword [rbp + 0x6d], esp
wait
movsxd rbp, dword [rbx + 0x26]
mov r11b, 0xd2
pop rbx
in al, dx
push r10
sbb rax, 0x4f7044a1
xchg eax, ecx
cdq
ret 0x5b42
xchg eax, edi
mov al, 0x48
push -0x22
mov cl, 0x22
movsxd rbx, dword [rax - 0x24]
imul esp, dword [rdi + 0x6e], 0x256c2845
in al, dx
jne 0x402709
pop rdi
cmp ebp, ebx
out 0x4c, eax
and dword [rcx - 0x1b2a50b6], edi
loope 0x4026bc
xor al, 0x2c
mov al, 0xba
xor al, 0x63
jrcxz 0x4026b3
cmp eax, 0x31b1803b
xor al, 0x82
imul esp, dword [rsi - 0x7c], 0x35e921b
insb byte [rdi], dx
insd dword [rdi], dx
test byte [rdx - 0x18], dl
movabs eax, dword [0xd4259c73649c0ad5]
jbe 0x402764
sub ch, byte [rdi - 0x4f9390a8]
and dword [rsi + 0x6f], esp
xor eax, 0xdc342b02
push rax
sub al, 0x97
cmp al, 0x20
pop rax
nop
outsb dx, byte [rsi]
push rdx
xor esp, dword fs:[rbx + 0x37]
pop rdx
movabs eax, dword [0x3353c23f2dca7a61]
test esi, ebp
push -0x57c6776b
cmpsb byte [rsi], byte ptr [rdi]
mov dl, 0x8d
invd
jmp 0x6ca65cb3
mov word [rax - 0x24], gs
insd dword [rdi], dx
imul eax, dword [rsi], -0x49
and bl, byte [rbx + 0x6f]
add esp, dword [rsi + 0x6d]
add eax, dword [rcx + 0x616ca4b4]
out 0x61, al
xor eax, 0x538f6b18
sub al, 0x3e
push rcx
imul ebx, esp, 0xb0803024
or eax, 0xc2390969
mov word [rip + 0x676fee02], ss
pop rbp
rcr dword [rsi - 0x74], -0x7b
xor al, 0x28
xor rax, 0xa657074
stosb byte [rdi], al
movsb byte [rdi], byte ptr [rsi]
xor eax, 0x7caba058
fld xword ss:[r14 + 0x1c]
add eax, 0x1c6b2b49
mov ebx, 0xac2b7970
fnsave dword [rax + 0x4f]
stosd dword [rdi], eax
movabs dword [0x216d6d6fe4aac08b], eax
adc esi, -0x7f
bnd je 0x4027eb
sbb esi, dword [rax + rbx + 0x37161348]
lodsd eax, dword [rsi]
ror dword [rip + 0x63ab2c60], 1
xor al, 0x40
insb byte [rdi], dx
jmp 0x4027bf
test r8, rcx
mov dword [rdx - 0x3a], esp
adc ebp, dword [rdi - 0x749153fd]
leave
test dh, dl
push -0x4c
test dword [rdi + rbx*2 - 0x37], ecx
push rbx
jrcxz 0x402764
adc dword [rdx + 0x6a63b45b], esi
jbe 0x402810
mov bl, 0x38
and al, 0x13
test dword [rdi], ebp
outsb dx, byte [rsi]
ja 0x40284c
sub ebx, ebx
movabs eax, dword [0xe5b0fba964605512]
sbb dh, byte [rcx]
insd dword [rdi], dx
imul eax, dword [rbx + 0x43], 0x17
xor byte [rdx + 0x3d6c642d], dl
xor esi, dword [rax - 0x59]
loopne 0x40282d
sub al, 0x2e
imul esp, dword [rcx - 0x79864a93], 0x162d3231
mov fs, word [rsi + 0x3a312a38]
test dword [rdi], edx
and al, byte [rdx - 0x1b]
loopne 0x402895
jns 0x402891
or al, 0xb4
mov ebx, 0x72740762
push 0x586b1e09
outsb dx, byte [rsi]
sbb eax, 0x6e077003
outsd dx, dword [rsi]
adc al, 0x2d
adc eax, 0x6c102fa5
or eax, 0x622e75c2
jne 0x40283b
mov bh, 0xd6
sub eax, 0xff0d004c
cmp byte [rcx], cl
jns 0x40281b
pop rcx
wait
mov ecx, 0x45074f6e
sbb dword [rsi + 0x61], esi
wait
mov al, 0x42
imul esp, dword [rdx + 0xc], 0x2dc01b5f
add al, 0x7b
test dword [rdi], ecx
sub byte [rcx], cl
sbb eax, 0x67b6e174
loopne 0x4028ec
or ch, byte [rdi + rbp*2]
or byte [rsi + rbp*8 + 0x5b83390], al
push rdi
and al, 0x6f
mov ch, 0x2d
jnp 0x4028bc
jp 0x4028bc
push 0x726468bc
or eax, 0xd4d0b16b
pop rbp
movsxd rsi, edi
js 0x4028fe
jo 0x4028a8
mov ebp, 0xae465b36
insb byte [rdi], dx
adc dword [rbx + rax*2 + 0xb], eax
movabs eax, dword [0xc436a1dd6a1c5ac5]
jae 0x402882
outsw dx, word [rsi]
add byte [rax + 0x7b], ch
pop rsi
stc
add al, 0x95
insd dword [rdi], dx
int 0x54
push rdx
std
add byte [rax], al
mov byte [r14 + 0x3f015758], spl
leave
cdq
wait
sbb al, 0x20
int 0x90
or al, 1
and eax, dword [rdi]
and al, 0x83
or al, 0x32
push rsp
push rsp
and byte [rdx], dh
and al, 0x43
xor al, byte [rcx + rsi]
je 0x4028f8
and eax, 0x24740c83
nop
fidivr word [r15 - 0xa]
ljmp [rdi - 0x68]
cwde
xchg eax, edx
sbb dword [rax - 0x5bf93ef8], edi
sbb dword [rsi + 0xb], ecx
fdivr dword [rdi]
insb byte [rdi], dx
jb 0x402984
nop
fsubr dword [rax + 0x3f06fb03]
sub eax, 0x18990669
push rsi
add esp, esp
or dword [rdi + 0x12], ebp
sysret
sbb dword [rip - 0x7445b4bc], eax
pop rsi
mov edi, 0xd9c90dff
wait
mov edi, 0x2032024e
fst qword [rax - 0x1c094f9]
call 0x6ea74a0b
cmpsd dword [rsi], dword ptr [rdi]
rol byte [rsi], 0xb4
movsb byte [rdi], byte ptr [rsi]
wait
mov dl, 0xff
jp 0x40299c
add al, 0x21
mov esp, 0x3f078749
xor byte [rax - 0xf4f13f], dl
test byte [rdi], bh
and eax, 0xd8641907
fadd dword [rax]
add esp, dword [rcx]
or byte [rbx], al
enter -0x71e7, 0x13
or dword cs:[rdi + 6], ebp
add al, 0x8f
ljmp [rax]
leave
sbb cl, byte [rcx - 0x13e9e4c1]
nop
call qword [rax]
fcomp dword [rsi]
or bl, cl
nop
or eax, 0x2d3f9407
xor ah, bl
sub al, 0x27
wait
or al, 0xd9
xchg eax, ecx
setge byte [rdi]
and byte [rdi], al
or esp, esp
cdq
jg 0x402934
and dword [rdi], edi
fsubr qword [rax + rcx + 0x70fa3c9]
sbb cl, byte [rdx - 0x32]
dec dword [rcx]
test eax, 0x26e672bf
ja 0x4029c0
mov edi, 0xd90a0ca1
push rax
mov cl, 0x3f
sbb ecx, dword [rdx - 0x32]
fadd qword [rdi]
jg 0x402a2d
mov edi, 0x93733c3f
and eax, ecx
jg 0x402977
add ah, byte [rcx - 0x366e8dbe]
leave
xor esi, dword [rdi]
jg 0x4029ee
add ebx, ebx
int 0xa0
and eax, 0x9f0e661d
mov edx, 0x7ece4a1
call qword [rax]
out 0x3f, eax
movups xmm3, xmm4
clc
dec dword [rcx - 0xcf4626a]
xchg eax, edi
xchg eax, edx
shl byte cs:[rsi], 0x3e
clc
wait
cmp al, 0x73
mov bl, 0xd9
jg 0x402a03
add dword [rdx], esi
enter -0x6370, 6
adc byte [rax + 0x16d90648], bl
mov edi, 0x24283f3f
mov ecx, 0x45010108
repne insb byte [rdi], dx
mov al, 0xf
sbb byte [rcx], al
fadd qword [rdx + rcx]
leave
or ch, byte [rdi + 0xbba4007]
adc byte [rdi + 0x10], bh
or byte [rbx], dl
sub ch, al
outsd dx, dword fs:[rsi]
jbe 0x402aae
adc byte [rdx + 0x7f154f48], dl
loopne 0x402a02
nop
or eax, 0x343f1730
wait
sbb eax, 0x7bfc216
adc dword [rbx], edi
sahf
shr byte [rcx], 0x58
push rsi
mov edi, 0x2bd6011e
wait
mov cl, 0xbb
add byte [rax + 0x41], ah
inc dword [rcx]
movsb byte [rdi], byte ptr [rsi]
cmp dword [rcx + 0x68], edi
or bl, byte [rdi]
xor dl, byte [rdx + 0x9b08727]
jg 0x402a4a
xchg rax, r8
or al, byte [rax]
add byte [rax], al
sub al, 0
adc al, byte [rax]
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x43f7fdea], ecx
enter 0x7b7f, -0x13
mov dword [rcx - 0x5e], esp
push rax
add byte [rax], al
or byte [rax], al
add byte [rax + 0x5f], bh
add byte [rax], al
add al, byte [r8]
mov bl, 0xf4
add byte [rax], al
add bh, bh
