call 0x401fb8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401dd0
add ebx, ebx
je 0x401d86
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401dbe
cmp rbp, -4
ja 0x401dbe
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x401da6
add ecx, 4
mov dl, byte [rax]
je 0x401dce
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401dbe
ret
cld
pop r11
cmp r8b, 2
je 0x401de6
jmp 0x401e63
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401df6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401dde
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401e0e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401dfb
sub eax, 3
jb 0x401e2c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401e63
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401e53
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401e51
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401e40
cmp rbp, -0xd00
adc ecx, eax
call 0x401d92
jmp 0x401de6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401f3c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401eda
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401f26
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401ef9
push 0x3a707474
jne 0x401f52
js 0x401f12
jae 0x401f4c
outsb dx, byte cs:[rsi]
je 0x401f0b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401f79
jb 0x401f6b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401f96
jb 0x401fa9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x215bd0
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x215bd0
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401e74
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401f9f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401f4d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f2047
jb 0x40205f
movsxd rbp, dword [rdi]
jae 0x402059
insb byte [rdi], dx
js 0x40205f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40203f
cmp rsi, rcx
jae 0x402047
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x402026
cmp al, 0x8f
ja 0x402026
cmp byte [rsi - 2], 0xf
je 0x40202c
sub al, 0xe8
jg 0x402029
push rdi
cmp al, 1
ja 0x402014
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x402017
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x402044
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40209b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c2519
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4020df
mov al, 0xa
jmp 0x4020df
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4020bb
inc ebx
mov al, 0
jmp 0x4020e3
mov al, 2
jmp 0x4020e3
mov al, 3
jmp 0x4020e3
mov al, 0x3c
jmp 0x4020e3
push rcx
rcr ah, 1
fstp st(7)
jle 0x402124
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x402136
jg 0x402128
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a78ab
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x402182
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb72ff
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40218a
cmp esi, 0x21585055
jne 0x40218e
jge 0x402180
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x402183
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x402187
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x402233
pop rcx
or al, 0x3b
jb 0x402239
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4021ab
jmp 0x4021ad
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36620ee
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf54336
in eax, dx
jg 0x4021e5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40222b
mov bh, 0x2a
add edi, 0x10
jmp 0x402228
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x402265
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4022a1
jne 0x4022b8
fstpnce st(6), st(0)
jle 0x402281
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4022b7
jrcxz 0x4022eb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1c24f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40236a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40232a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582968ff
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40239d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x402337
and ecx, 7
or al, 0xeb
jae 0x4023a2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4023d7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x402415
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4023ce
push rax
call 0xffffffff868d20bb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4023d8
std
cmp edi, esi
xchg eax, edi
jle 0x40242d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c969b9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40242b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x402419
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x402442
js 0x402482
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x402514
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad374f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x402535
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40253a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21fec
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4024c8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add byte [rip + 0xe0000], 0
add byte [rdx], al
add byte [rax], al
add byte [rax - 0x58], al
mov dl, byte [rax]
add byte [rax], al
add byte [rax], ah
add edi, edi
add byte [rax], al
imul edx, dword [rbx], 0
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4025ee
je 0x4025f7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4025c0
mov dh, 0x7d
jbe 0x4025bf
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x402578
sahf
sahf
add al, 0
cwde
add eax, 0x905fd800
and byte [rdi + 0x6e00006], bl
add byte [rcx + 0xe5604f9], bh
or byte [rdi], dl
or dword [rax], eax
sub byte [rsi], cl
jl 0x4025dc
stc
add byte [rdx], cl
add byte [rax + 0xb], bl
add al, dl
adc dword [rsi], edi
cmp dword [rax + rax*4 + 0xc], 0xdf000
push rax
adc al, 0x9f
add byte [rax + 0xf], ah
add byte [rdx + rax*2], dh
and byte [r15], r11b
and byte [rax], dl
add byte [rax + 0x11], al
add al, al
seto byte [rdi + 0x20]
adc al, byte [rax]
cwde
adc r8d, dword [rax]
add dl, dh
enter 0x56fc, 0x14
add al, ch
pop rbp
add cl, bh
add al, 0xf2
adc eax, 0x16f800
add byte [rsi - 0x70], bl
insd dword [rdi], dx
add bh, cl
add byte [rax], cl
sbb byte [rdi + 0x5f], al
cld
add byte [rbx + 0xe], bl
sbb dword [rax + 0x17], esp
sbb al, byte [rax]
cmp dword ss:[rax + rax*4 + 0x1b], 0x131c6000
cmp edx, dword [rdx + 0x17015377]
add al, 0
int1
dec dword [rbx + rbx]
xor al, 0xd
push rdi
mov edi, 0x90029719
xor bl, r8b
nop
sbb edx, dword [rdi]
shr byte [rsi], 1
in al, 0x20
adc byte [rip + 0x1b5f44], dl
and dword [rdx], esi
fmul st(1)
jo 0x4026d0
add dword [rdi], edx
push rbx
xchg byte [r8 + r14*4 + 0x2b], r12b
jp 0x4026bf
xor byte [rsi + 0x44257610], al
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
xchg eax, ebx
cmp r9b, r14b
scasb al, byte [rdi]
ja 0x402653
shr dword [rsi], -0x1c
mov byte [rsi - 0x28], ah
sbb edx, dword [rdx + 0x4617ed45]
cli
and edx, dword [rdi]
sahf
sub cl, ah
in al, 0xc9
sub al, byte [rcx]
outsb dx, byte [rsi]
and al, 0x15
jg 0x402635
bnd jo 0x4026f1
add dword [rdi], eax
adc al, byte [rdi - 0x7bd3fcb4]
int1
push rdi
mov byte [r13 + 0x19], r11b
mov cl, 0x58
cwde
ljmp [rbx + 0x47]
sub dword [rcx - 0x14], esp
retf -0x7ea9
adc al, 0x7f
adc dword [rbx + 9], ebx
mov bl, 0x92
add dword [r11d + r12d*8 - 0x6b], r12d
iretd
sbb r11b, byte [r15 - 0x65be4fe0]
xchg byte [rsi + 0xee02207], ch
cmp dword [rcx + 0x72], edi
adc eax, dword [rdx]
pop rsi
sub dword [rdx], edi
push 0x41c9c833
or ah, byte [rip - 0x4d8649bc]
sbb ebx, dword [rcx + 0x12]
in al, dx
pop rdi
loope 0x402709
pop rax
sub dl, byte [rbx + 0x4a0bd817]
add ebp, dword [rdi]
add edi, dword [rcx + rdi]
fmul st(1)
jno 0x40274e
sbb dl, byte [rdi]
or dword [rcx + rdx*8], eax
cmp bh, byte [rcx]
cmp eax, ecx
test dword [rdx + 0x29], edi
cmp dword [rcx], esi
cmp edi, ecx
push -0x60ed05fa
add bl, byte [rdi - 0x70]
xchg eax, ebx
or al, byte [rip - 0x7cdad2c6]
or al, 0x72
jb 0x40279a
add eax, 0x39bc313e
enter -0x6c37, 5
push rbp
xor dword [rsi], esp
push rcx
sbb ah, ah
xchg eax, edi
ror byte [rdi], 0x2a
or dword [rdx + rsi*2], 0xfffffff6
test al, 0x39
and ebp, dword [rsi + rbp*4 + 0x1c]
nop
mov bl, 0x3b
or eax, ebx
sar dword [rdi], cl
leave
xchg eax, ebx
sbb dword [rsp + rdi + 0x3ea20745], -0x64
cmp al, 0x39
enter -0x6391, 7
xor byte [rax + 0x11], al
pop rsi
enter -0x7c6d, 0xf
or byte [rcx + 0x40], al
or ah, ah
and byte [rdi], ah
iretd
ja 0x4027c2
cmp eax, 0x9008f71d
mov bl, 0x17
bnd retf
cmp eax, 0x3aef0978
sub edi, dword [rbx]
movsxd rbx, dword [rbx]
mov eax, 0x8170009
xchg dword [rax + 0x9db17c7], esi
fucomip st(7)
mov bl, 0x17
test byte [rcx], cl
adc ah, byte [rsi]
or cl, byte [rdi - 0x3637c6c4]
loope 0x4027f6
fisttp word [rdx]
or bh, byte [rax]
pushfq
cmp al, 0xe3
test dword [rdi], ebx
or esp, dword [rdi]
mov dword [rbp*4 - 0x7c6c37a2], edi
or eax, dword [rdi + 0x37]
add al, 5
add bh, byte [rbx + 0x65]
cmpsd dword [rsi], dword ptr [rdi]
or al, 0xa7
iretd
js 0x402764
pop rcx
or al, 0xaf
mov al, 0xc
lahf
outsb dx, byte [rsi]
jrcxz 0x4027b7
and dword [rdi], esp
cmp dword [rip - 0x5bf0d5d2], ecx
fmul dword [rbx]
pop rdi
or eax, 0x5f0d845f
and byte [rdi], al
sbb esp, esp
mov ah, 0x1b
or eax, 0x5ecf2720
cmp dword [rsi], edi
pop rbx
cmp edi, dword [rcx]
enter 0x58b1, 0x30
bswap eax
and dword [rdi], esp
iretd
pop rax
psubusw mm4, mm4
lodsb al, byte [rsi]
jle 0x402839
movsb byte [rdi], byte ptr [rsi]
and edi, dword [rax + 0x21]
iretd
cmp byte [rax + 0x41a86f0f], bl
in al, dx
cmovg edi, dword [rdx + 0x21]
iretd
push rdi
push rsp
adc bh, ch
sbb byte [rip + 0x21760e42], ch
retf -0x78e9
sub al, 6
cmp dword [rcx - 0xe], edi
xor dword [rcx], edx
xchg eax, ebp
sub eax, 0xc61c8a52
leave
push rsp
push rdi
adc dword [rsi + 0xe], ecx
jbe 0x4027e4
cmc
and eax, 0xc90e4941
leave
rcl edi, 0x4b
adc al, byte [rbx + 0x5e901253]
enter 0x3713, -0x6a
in al, 0x12
test byte [r13 + 0x60], r11b
cmp al, 0x13
ja 0x40280e
loope 0x40280c
cmp al, 0x3b
adc ebp, edi
mov esi, 0xf7144b40
cmp al, 0xe3
test dword [rsi + rbp*8], edi
and al, 0x99
adc al, 0x6f
cmp byte es:[rcx + rsi*8 + 0x14f085e4], bl
sub eax, 0xe42735b7
xchg eax, ebx
adc dword [rsi + 0x15], -0x70
adc al, byte [rax + 0x7b]
adc eax, 0x2720d20e
sbb al, 0x91
cmpsd dword [rsi], dword ptr [rdi]
adc eax, 0x40bc8176
push rbx
and dword [rdi - 0x20], ecx
adc byte [rbp + 0x25ec0f16], bl
jbe 0x4028bf
cld
xor byte [rsi], bh
shr dword [rsi], -0x5d
push rdx
xor eax, dword [rdi]
add al, 0x2f
sbb al, 0xec
in al, 0xc9
leave
xor eax, 0x17c95f2e
pushfq
hlt
sahf
call 0x5f584820
movabs al, byte [0x8ea701e783b3c817]
sbb bl, bl
sbb dword [rsp + rdi + 0xe271881], 0x2e
push rbx
cmp eax, ecx
leave
xchg eax, ebx
sbb dword [rcx + rsi + 0x73], edi
movabs byte [0x1a31533921c20519], al
jmp 0x4c04fb1f
adc byte [r8 + 0x1a], r11b
xlatb
fsub dword [rcx]
cmp dword [rax + 0x5a71abb], ebx
sbb al, 0xec
add al, byte [rcx + 0x175ce71b]
xchg eax, esi
sub al, 0xe4
and byte [rbx + 0x6ac2829c], al
cmp cl, cl
leave
loop 0x402966
sbb byte [eax], bl
jb 0x40293c
add al, 0xe
sbb byte [rdi], 0xfc
cmp eax, dword [rdx + 0x78]
and dword [rdi + 0xe], ecx
loope 0x402974
loop 0x402995
sbb eax, 0x40bd9e42
mov cl, 0x1d
pop rdi
cld
cmp esp, eax
movsb byte [rdi], byte ptr [rsi]
movabs dword [0xc85e8037111f39ee], eax
mov bl, 0x93
push -0x4fd0e1bf
mov dil, 0x1e
sahf
rcl byte [rbx + 0x2086441], 0xe7
mov ebx, 0xbc67901e
sti
mov rdi, dr6
fcomp dword [rbp + 0x20]
mov esp, 0xe21f1f7c
adc dword [rdx], eax
in al, 0xd9
and dword [rcx - 0x69], ebx
push rax
out dx, al
sbb al, 0xe4
push rbx
and byte [rdi - 0x3d86c37b], bl
adc byte [rcx], al
push 0x20
cmp al, 0xd6
and dword [rcx], edi
jmp 0xffffffffe0b74a7b
clc
and byte [rdi - 0x6e], cl
mov bl, 0x43
jb 0x4029a9
and qword [rdi + 0x9e42f48], rcx
sbb al, 0x55
and edi, ecx
jo 0x402a11
loope 0x4029f7
jae 0x402968
xchg eax, ebx
ja 0x4029b8
xor dh, byte [rbx]
and spl, r12b
and byte [rdi], ah
mov bh, 0x8f
rol byte [rcx + 0x65], 0x51
and dl, byte [rdi]
xchg rsp, rsp
lea esp, [rdx]
in al, dx
test dword [rcx + rcx*4], edi
and ah, byte [rdi + 0x4e]
and edx, dword [rdi]
or dword [rdx + rsi*2], 0xfffffff2
sub dword ds:[rax], esp
nop
hlt
mov ecx, 0x8be04090
xchg eax, esi
jb 0x402a04
in al, 0x60
xlatb
and dword [rsp + rax*4], 0xc90e4535
sbb dword [rsp], ebx
adc al, 0x32
and eax, 0x84f21789
ja 0x402a4c
xlatb
and eax, 0x85e1024f
cmp al, 0xb6
and al, 0xf2
and eax, 0x2790bd97
int1
xchg eax, edi
movsxd rsi, dword [rbx]
mov ecx, 0xe4e41c26
or edi, ebp
mov dh, 0x2e
xchg eax, edi
add ch, byte [rcx + 0x48]
sahf
movsb byte [rdi], byte ptr [rsi]
xor byte [rdi], ah
mov edi, 0xf067243a
sub bh, ch
xchg eax, ebp
sub byte [rbp + rbx - 0x6e], bh
xor edx, dword [rdi + 0x1f293d0a]
sbb ecx, dword [rax + 0x4e]
cmp byte [rbp - 0x79], ah
sub qword [r15 + 0x10], rcx
xchg eax, ebx
pop rsi
jo 0x402a30
sub dword [rdi], edx
or dword [rdx], ebp
sahf
xchg eax, ebp
pop rdx
enter 0x3bb9, 0x4f
mov edi, 0x205e3c58
int1
leave
sub bl, byte [rdi]
in eax, 0x2a
sahf
mov ebp, 0x472b3b40
mov edx, 0x9e4e4125
xchg eax, esp
sub edx, dword [rdi + 0x24d395a]
in al, 0xc9
sub al, 0xb7
cmp byte [rdi + 0x2c], ah
lahf
sahf
cmp al, 0x79
and rax, 0x2cc1006c
sahf
cmp al, 0x1b
sub al, 0xef
sub byte [rsi], ah
add ebp, dword [rip - 0x6f4398d3]
ret
cmp al, byte [rsi + 0x4e283f2d]
sahf
mov ebp, 0x2df83e90
int3
sub spl, spl
in al, 0xc9
push r9
xor dword cs:[rax], edi
cmp bh, cl
js 0x402a63
sbb al, 0xb3
retf
sub ah, byte [rcx]
js 0x402b0f
xchg eax, edi
cmp esp, dword [rax + 0x2f]
nop
jp 0x402a82
retf 0x5f2f
add al, 0x5e
sbb byte [rax], dh
push rdi
pushfq
xor eax, dword [rbp - 0x730de84d]
xor byte [rdi], cl
or byte [rsi], bh
div byte [rax]
pop rdi
add bh, byte [rcx]
enter -0x7337, 0x38
sub ecx, dword [rcx + rsi]
iretd
js 0x402a9f
int1
pop rbx
xor edi, edi
lea eax, [rcx]
xchg dword [rax + 0x7610e066], edx
and eax, edx
out dx, al
xor dword [rsi + 0x71190bd], ebx
jmp 0x402b82
xor dl, byte [rdi]
retf
cmp eax, ecx
out 0x42, eax
loop 0x402b37
xor byte [rax], cl
mov ebx, 0x336e5e40
mov esp, 0x5c84317
jb 0x402b59
xor al, 0x27
ror qword [r14 + 6], -0x55
xor al, 0x47
adc al, 0x17
jne 0x402bcf
nop
lodsb al, byte [rsi]
sub eax, 0x87027713
in al, 0xe4
cmc
xor al, 0x1d
xor eax, 0xbd59e3f
jns 0x402b12
adc ebp, dword [rax + 0x3f265f35]
jnp 0x402afb
int1
xor sil, byte [rsi]
test eax, 0x6790a736
hlt
add al, bh
rdpmc
xor byte [rdx - 0x7f], bh
mov esp, 0x378e3740
or cl, cl
pop rcx
in eax, 0x37
and al, 0xe4
jmp 0x402ba4
fnstsw dword [r8]
jg 0x402bc0
sbb al, 0xc2
cmpsb byte [rsi], byte ptr [rdi]
in al, 0x2f
cmp byte [rdi], bl
xchg eax, ebp
jb 0x402c24
nop
xchg eax, ebx
and al, 0xf
cmp eax, esi
pop rsi
enter 0x43b3, 0x28
cmp edi, edx
outsd dx, dword [rsi]
cmp al, al
cmp dword [rsi + 0x7011c8c], ebx
shr byte [rcx], 1
push rax
adc eax, 0x9c813a3a
mov dword [rdx], edi
fidivr word [rdx]
add eax, 0x5fb02f02
push rbx
cmp eax, dword [rdi - 0x16fd0e99]
leave
cmp ebx, dword [rdi + 0x36]
cmp al, 0x3f
jbe 0x402b6c
mov ebp, 0x3c9e3090
mov cl, 0x17
mov al, 0x43
enter -0x36f0, 0x13
cmp eax, 0x59e42fef
push 0x3e94c73d
sar byte [rip + 0x4679390e], 1
xchg eax, edi
xor esp, ebp
and dword ds:[rdi + 0x18], ecx
xchg eax, edi
div dword [rip + 0x78b3c9e4]
sbb bh, byte [rdi]
orps xmm2, xmmword [rip - 0x6a16f186]
out 0x4b, eax
out dx, eax
mov edi, 0x3c85ec21
mov ecx, 0xef3f7d37
lcall [rbx + 2]
cmp dword [rdi], 0x726309ff
je 0x402cb2
je 0x402cb6
imul di, di, -0xe
jmp qword [rbx]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
add byte [rbp + 0x72], ah
imul ebx, dword gs:[edx], 0xf77b7b06
jg 0x402cc1
je 0x402cd1
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x402c8d
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or esi, edi
neg bl
jg 0x402cee
outsd dx, dword [rsi]
jb 0x402cf0
pop rdi
jne 0x402cf9
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x402cf2
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xb7ff3538
mov edi, 0x665f24c0
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x402cfd
outsb dx, byte gs:[rsi]
je 0x402d14
jns 0x402c8a
mov esi, 0xa714add
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x402ce3
or eax, 0x37584ed
pop rdi
sub dword [rdx + rbp + 0x6d], esi
adc ch, byte [rbx - 1]
fild qword [rsi - 0x61]
jo 0x402d34
pop rdx
push rbx
je 0x402d15
xor dword [rcx], edi
jo 0x402d36
movsxd rsp, dword gs:[rbp + 0x77]
pushfq
xor byte [rdi + 0x7a5b6fb3], dh
outsb dx, byte [rsi]
movabs byte [0x6948381a74637572], al
outsd dx, dword [rsi]
out dx, al
jnp 0x402d26
sub dword [rbx], esi
xchg dword [rbx + 0x61], esp
test ch, ch
mov dh, 0x9f
jne 0x402d43
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x340c650f
xor ebp, ebx
outsb dx, byte [rsi]
lodsd eax, dword [rsi]
cmp eax, 0x7263691d
imul ebp, dword [rcx + rbp*2], 0x6edb377a
int 0xd
push rdx
sub al, 0x6e
mov esp, dword fs:[rbp + 0x59]
movd mm5, edi
div byte [rax]
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r14b, byte [rbp + 0x62]
pop rdi
mov r8b, 0x6f
jne 0x402d67
movabs eax, dword [0x4d4152465f65effd]
pop r15
or r15b, byte [rdi]
or ebx, ecx
sub dword [rip + 0x554e474f], 0x48
and byte [rax + 0x44], cl
push rdx
mov al, 0xf7
or edi, dword [rdi]
push rbx
push rsp
sub r14b, r13b
fdiv qword [rbp + 0xb]
wait
adc byte fs:[rsi + 0x59446672], bl
fcomi st(6)
mov ebx, 0x34c04349
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x402ddd
push r10
or qword [rdi], r14
sub ah, byte [rbx - 0x33]
mov ecx, 0x7878ed85
xor dword [rax], eax
xor ch, byte [rdx + 0x73]
scasd eax, dword [rdi]
cmp dl, dh
or al, 0x6f
in eax, dx
movsxd rbx, dword [r9d]
adc ah, byte [rbx + 0x68]
mov eax, 0xebb64942
fcomp st(0), st(3)
jae 0x402db2
push r11
add al, 0
xor rax, 0xffffffffadfc3631
insd dword [rdi], dx
fdivr dword [rsi + 0x66065f42]
jrcxz 0x402e24
movsxd rcx, dword [rsp + rcx*4 + 0x75]
scasb al, byte [rdi]
mov al, 0xfd
xor al, 0x74
jns 0x402e32
push rbx
and eax, 0xd6406e36
mov al, 0x20
movsxd rsi, dword [rsi]
cmp byte [rbp - 5], 0xdb
push rbx
xor eax, 0x70384552
outsd dx, dword [rsi]
jo 0x402e3f
xor esp, dword [rbx + 0x6b]
jbe 0x402e3a
fild qword [rsi - 0x4f]
push rdi
xor dword [rbp + 0x27], r9d
xor dh, byte [rax]
je 0x402e5b
jb 0x402e64
movabs eax, dword [0x3c09397b5f77c6b5]
xor edi, edi
mov esi, dword [rdi + 0x634b505b]
cmp dword [rax + 0x49], ebp
pop r8
pop rax
pop rdi
xor edx, dword [rsi]
mov dh, 0xed
fsubr dword [rsi]
xor al, 0x2a
sbb byte [rdi + 0x53], dh
xor eax, 0xb0b084b
adc dh, byte [rsi]
and byte [rdx + 0x39], dl
mov cl, 0x20
sbb byte [rsi], dl
cmp ah, cl
je 0x402e9c
sub edi, ebx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x402e7c
imul edi, dword [rdi + 0x69], 0xb6696d72
shr dword [rsi - 0x12], 1
jno 0x402e78
cmp qword [rsi], r9
xor dword [rbp - 0x7b], 0xfffffff1
sbb rax, 0x6d8d8c2e
sub bl, byte [rdi]
xchg eax, edi
nop
and bl, bh
test eax, 0x5da45049
push rbx
int1
pop rsi
jns 0x402ec9
cmp ebp, dword [rdi + rsi]
add byte [rdi - 0x49a79b54], dh
out 0x4d, eax
jge 0x402e5a
insb byte [rdi], dx
xchg eax, edx
leave
cmp ebx, dword [rdi - 0x45]
push rbx
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
outsb dx, byte [rsi]
jb 0x402e13
and cl, ah
push rax
sub al, 0x70
movsb byte [rdi], byte ptr [rsi]
int 0xc9
cmp byte [r10], r14b
jne 0x402ef9
jl 0x402ee9
movabs dword [0xc8bdf570d04195a9], eax
xchg byte [rbp - 0x28], al
xor ebp, dword [r10 + 0x37]
mov word [rbp + 0xb843db1], gs
jg 0x402efa
sub eax, dword [rbp - 0x25e914bd]
push rbx
add dil, byte [r9 + 0x52]
sbb dl, byte [rdi + rbx*4 - 0x51]
sub ch, byte [rbp + 0x5b]
pop rdi
jno 0x402f1e
movsxd rcx, r14d
wait
pop rdx
jrcxz 0x402ed8
movabs eax, dword [0x33759bdd1e906335]
movsd dword [rdi], dword ptr [rsi]
pop rdi
ror ebp, cl
fmul dword [rsp + rbx*8 - 0x45]
and cl, ah
xor byte [rbp - 0x20], al
push rax
pop rsp
mov ecx, 0xe66c42d7
retf
leave
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
mov bl, 0x1d
and ah, cl
outsd dx, dword [rsi]
jns 0x402f10
jbe 0x402f46
add rax, 0x33948c0e
jmp 0x402f51
ret 0x3a04
or al, 0xf2
ror dword [rip + 0x40306056], 0x42
mov ebx, 0x201af684
insb byte [rdi], dx
insd dword [rdi], dx
or al, 0x56
pop rsp
xchg eax, ebp
adc dl, byte [rdi + rdi + 0x36]
and byte [rbp - 0x73], bh
xor bl, byte [rdi - 0x5a]
add eax, 0x541c3ba9
mov dword [rdi], esi
cmp rcx, qword [rcx]
mov dl, 0x61
mov al, 0xc
mov r12d, cs
lahf
jnp 0x402f75
push rdx
cmp eax, 0x44585076
jo 0x402f93
pop rbx
fmul dword [rbx + 4]
sub al, 0x54
pop rax
sub ch, dl
jbe 0x402f53
pop rax
sub ebp, dword [rsi - 0x35b43685]
sub byte [rcx + 0x495800b1], al
add al, 0x62
scasb al, byte [rdi]
sub eax, 0x4317425
adc byte [rcx - 0x3a], bh
retf -0x2ed8
and al, 0x9f
xor esi, dword [rdx]
sbb dword [rdi], esp
adc byte [r9 - 0xc], r12b
fsubr dword [rdx - 0x19]
add eax, 0x51bc3244
outsb dx, byte [rsi]
push rax
jmp 0x402f99
mov bl, 0x1f
outsb dx, byte [rsi]
jbe 0x402f61
js 0x402f41
mov ch, 0x83
scasd eax, dword [rdi]
insb byte [rdi], dx
out 0x73, al
insb byte [rdi], dx
push rax
jbe 0x402f81
xor dword [rax], 0x34778d32
pop rdi
cmp byte [rdx], 0x1b
movsxd rdx, dword ss:[rcx + 0x4d723245]
outsd dx, dword [rsi]
cmp eax, 0x7085705c
out dx, al
pop rdi
cwde
mov dword [rdi - 0x38], esp
xchg dword [rbp + rbp*4 + 4], ebp
loope 0x402fc4
fisub dword [rdi + 0x1d6b6133]
xlatb
sbb ax, 0x4a8
mov cl, 0x65
js 0x403012
jo 0x403046
jrcxz 0x403014
test byte [rbp - 0x4d78d5bf], dl
xor eax, 0x66f2e128
pop rbx
xor al, al
add cl, ch
movsd dword [rdi], dword ptr [rsi]
xor ah, cl
xchg byte [rcx], bh
mov dl, cl
fstp dword [rbx]
adc al, 0x32
push rcx
cmp dword [rax + 0x39], ebp
pop rax
and byte [rsi], dh
push rax
fisttp dword [rcx + 0x48]
mov ecx, 0xc492e400
insd dword [rdi], dx
and qword [r11 - 0x23], r8
sub bl, byte [rax + 0x61]
js 0x11e3c1c0
push 0x66
mov cl, byte [rsi]
add eax, dword [rdx - 0x20]
xor dword [rsi], ebp
xor ebp, esp
nop
or dl, byte [rcx + 0x7165e1fd]
cdq
add byte [rdx], dl
mov ebx, 0x53d92d95
int1
hlt
stosd dword [rdi], eax
xor ecx, dword [rsi - 0x16]
cmp byte [rdx + 0x73], al
and eax, 0x341c703d
mov bl, 0x94
mov byte [rbp + 0x18], al
and dword [rsi - 0x6fd61caa], esi
jp 0x402fe0
mov dl, 0x80
jo 0x40303d
push rdx
and byte [rdi], al
adc dword [rbp - 0x349a73a2], esp
inc byte [rbx]
imul esp, ecx, 0x30329402
outsd dx, dword [rsi]
insd dword [rdi], dx
loopne 0x4030d6
iretd
push rbp
imul ebx, dword [rcx], 0x6d
jae 0x403064
or byte [rcx + 0x3304ac30], dl
push rbx
and al, al
mov ecx, ebx
loop 0x4030cb
test dword [rdx], 0xf64428c9
push rcx
or rax, 0xffffffff87427213
cmp byte [rax + 0xe3234a3], ch
lodsd eax, dword [rsi]
enter -0x259e, 0x5d
movabs byte [0xdba6645ec946604c], al
add al, 7
stc
pop rdi
xor ch, byte [rsi]
add dword [rip - 0x6e738a83], esi
movabs eax, dword [0x58934f2349252753]
movabs byte [0xc2fb5388836e552d], al
sbb eax, 0x34045201
sub byte [rax - 0x23b29ae8], dl
popfq
add eax, 0xad326b3
lodsb al, byte [rsi]
insb byte [rdi], dx
enter 0x36da, 0x11
sbb ch, bl
xor ebx, eax
mov cl, 0x65
sub eax, 0x706571b4
push rcx
fld qword [rdx]
add dword [rsi + 0x59e6e800], edx
jae 0x403145
xchg byte [rsi], dh
and dword [rdi + 0xc49157a], eax
sub ecx, 0x39
add byte [rcx + 9], ch
out dx, al
jbe 0x40315d
je 0x403135
mov cl, 0x81
or esp, dword [r14]
xor eax, dword [rsi + 0x10]
wait
sub esp, dword [rbx + 0x788f1135]
and eax, 0x55684a76
in eax, 0xe3
movabs eax, dword [0xa1706d776ef8b525]
jrcxz 0x403189
test eax, 0x774a2225
push rcx
ror byte [rcx + 0x4312fbd3], 1
pavgw mm2, qword [rdx]
nop
or eax, eax
call 0xffffffff9d8a05b1
test dword [rbp + 0x184c7048], eax
mov dh, 0x90
xor byte [rax + 0x71], ch
add dl, byte [rbp - 0x426ab2cf]
and byte [rbp - 0xf], al
int3
ror byte [r11 - 0x16], cl
pop rsi
sbb al, 0x20
adc byte [rax], bl
jno 0x40313e
retf
adc eax, 0xc83f58
jae 0x403182
pop rax
lea esi, [rbx]
push rbx
adc ah, bh
shr cl, 0x35
test byte [rsp + rcx*4 - 0x3e], 0x68
and eax, 0x5c9205b
cmp byte [rdx], al
mov ebp, 0x9935b316
mov cl, 0xdd
jmp 0xc4b99b0
fist dword [r9 + r12*2 + 0x62]
insb byte [rdi], dx
sub eax, edx
pop rax
pop rcx
sbb ebp, dword [rsp + rdi + 0x4c]
mov bl, 0x50
mov ecx, 0x728c7b3b
outsd dx, dword [rsi]
jae 0x403213
insd dword [rdi], dx
enter 0x1918, -0x13
cmp ebp, ebp
jg 0x403180
lock or qword [rip - 0x1e7d39eb], rbp
adc eax, 0x73341220
pop rbx
dec byte [rcx + 0x4a101b26]
imul eax, dword [rbx], 0x467ba50a
mov eax, 0x643f4f49
mov ebx, 0xdb063240
pop rsp
jno 0x403216
mov ebx, 0x25462103
imul ebx, dword [rax + 0xa], 0x10
xchg ax, sp
push rdx
jb 0x403219
pop rbx
movabs eax, dword [0xd3791ac9705938ed]
sbb dword [rsi + 0x62], eax
adc byte [rbp - 0x745fdc9b], dh
mov ah, 0x59
adc edx, dword gs:[rcx + rcx*2]
xor bl, byte [rsi]
push 0x52695443
pop rdi
cmp dl, byte [rcx]
mov byte [rcx + 0x3d504f29], 0x82
mov al, 0x9a
pop rsi
xor eax, 0x946e2c62
loope 0x4031e4
mov al, 0x68
cmp ecx, eax
cmovs r10, qword [r8 + rdx - 0x3ec5c91a]
and al, byte [rcx + rdi - 0x4a4bc1bd]
pop rax
cmp al, 0x55
jg 0x4032a0
test al, 0x90
jmp 0x4032ad
add bh, byte [rcx + 0x67caeb20]
and eax, 0xbfc52557
xchg rax, r8
mov es, word [rax]
imul edi, dword [rdx + rsi], 0x24690039
cmp eax, 0xf8334a49
add al, 0x6e
mov word [rsi + 0x78], es
pop rdi
sub byte [rcx - 0x4a5b7dec], al
push rcx
add al, byte [rdi + 0x38]
sbb al, 0x8c
jbe 0x4032c4
pop rax
add eax, 0x8e257f02
or al, byte [rcx + 0x4a22ac48]
sub al, byte [rcx + 0x64494126]
push rax
cmpsb byte [rsi], byte ptr [rdi]
xor byte [rdx + rax*2 + 0x6b15a30d], ah
mov cl, 0x51
mov bl, bl
xor dword [rax], esp
adc cl, byte [rax + 8]
int1
push rsp
adc eax, 0x24447d61
add byte [rsp + rbx*2], cl
enter 0x5f49, -0x5b
loope 0x403307
and ch, cl
xchg eax, ebp
insd dword [rdi], dx
or cl, dh
cmp al, byte [rdi + rbx*4]
cld
movabs eax, dword [0xd01674757a32b058]
and al, 0xb5
add dword [rcx + rdi*2 - 0x5d], ebx
hlt
in al, dx
xor dword [rsi - 0x42699997], esi
and byte [rsp + rdx*2 - 0x2528400], al
and byte [rax + 0x6f73646c], dl
pop rdi
sub byte [rbp*4 + 0x9138a4a], cl
sub eax, 0x56442a4b
and al, 0xee
push rbp
and byte [rax - 0x7e], ah
or r9b, al
add dh, byte [rax + 0x6231cc04]
pop rsp
or byte [rdi + 0x6f94a902], ch
mov dh, byte [rax + 0x51349008]
xchg eax, esp
adc ebp, r9d
add dh, byte [rax + 0x4e786951]
and eax, 0xaf78ac
jo 0x403394
popfq
fild word [rdx]
xchg eax, ebp
adc byte [rcx], ah
wait
adc byte [rax], bh
and dword [rcx], 0x9d74049c
jrcxz 0x403356
xor eax, 0xe273bd98
je 0x40333f
popfq
rcl byte [rcx + rcx*2], 0x8b
rol byte [rcx], 0x18
add al, 0x22
and byte [rdx], dl
pop rcx
mov bh, 0x55
sub eax, 0x50c3bd27
or ch, ch
test eax, 0x77163247
xor dword [rcx], edi
jo 0x403310
adc al, bl
push -0x50f19c9b
insb byte [rdi], dx
xchg dword [rip + 0x31226742], eax
sal byte [rax - 0x3deba7fc], 0x40
add ebx, eax
jmp 0x4033d8
sub al, 0xab
adc byte [rbx - 0x4ff62f7f], ch
loop 0x4033c6
stc
mov ebx, 0x704904b0
cmp al, 0x88
adc byte [rsp - 0x2f], 0x22
jrcxz 0x403414
sbb al, 0x52
pop rcx
hlt
cmpsb byte [rsi], byte ptr [rdi]
mov bl, 0xe4
adc al, 2
sub al, 0x63
push rsi
nop
shl byte [rbp + rax*4 - 0x23df8c24], 1
mov esi, dword [rbx]
jrcxz 0x4033e3
push rsp
jb 0x403403
outsb dx, byte [rsi]
ret 0x4c03
mov ah, 0x1d
sal al, 0x29
add bl, byte [rip + 0x6fda4458]
iretd
loop 0x403423
add dword [rdx], esi
mov dl, 0x61
nop
push rsp
ret 0x64c5
jb 0x403369
mov ecx, 0x64ece9bb
pop rdx
movabs al, byte [0x2b10204006384ea7]
fld dword [rcx]
pop rsp
ret 0xd68a
xor esi, dword [rbx]
mov dl, 0x68
fistp dword [rdx + 0x2b66032d]
insb byte [rdi], dx
int1
rol dword [rdx], -0x70
xor al, 0xdf
jp 0x40337d
adc dword [rcx], esp
ficomp word [rsi + 0xa687375]
and ecx, esp
xchg eax, ecx
mov edx, 0x9654f45
push rsi
movsb byte [rdi], byte ptr [rsi]
movsxd rsp, dword [rdi + rax]
push rsi
test byte [rdx], al
movabs eax, dword [0x1e182b0841209d6d]
adc al, 0x52
out dx, eax
pop rcx
and ah, dl
push rbx
movsxd rsp, dword [rip + 0x7bcbabc1]
mov ebx, 0x20b04e49
add al, 0x22
movabs eax, dword [0xc559382108af2d4e]
outsb dx, byte [rsi]
sbb dword [rsp + rdx*4], ecx
push rdi
je 0x4033fa
ret
fbld tbyte [rcx + rdx*4 + 0x27]
sbb byte [rdx + rbp*4 + 0x49183936], dl
loope 0x4034c3
jb 0x4034cf
xchg eax, ebx
imul edi, dword [rax], 0x86b0a244
mov byte [rbx + 0x16], bl
and al, 0xb0
mov byte [rsi + 0x69], al
mov dl, 0xe0
mov ah, 0x20
mov esi, ecx
test dword [rip + 0x4baa8112], ebx
cmp al, 0x95
xchg dword [rdx + 0x18], ebx
adc dl, byte [rcx]
movabs eax, dword [0xd3908c8290d588c2]
std
cwde
mov dh, 0x76
or byte [rip + 0x6d876133], dl
fldcw word [rbx]
mov al, 0xe0
jne 0x4034ed
xor al, byte [rdx]
shr byte [rax], 1
clc
div byte [rdi + 0x463222d4]
fisttp dword [rsi]
sub byte [rbp + 0x46508516], al
outsd dx, dword [rsi]
mov al, 0x8a
xchg eax, ecx
mov ch, 0x53
and byte [rdx + 0x11955891], dl
sub al, 0xec
add r8b, byte [r10 + rdx*4]
adc eax, 0x8040452
adc ah, dh
sbb eax, 0x6514bc4
add dword [rdx - 0xdceda80], r14d
cmp al, 2
leave
push rbx
scasd eax, dword [rdi]
outsd dx, dword [rsi]
add al, 0x8f
push rbp
and dword [rcx], edx
int 0xb1
cmp byte [rdi - 0x52], bl
int 0x5b
adc byte [rdx + 0x70373c6e], ah
jno 0x403559
loop 0x403541
xchg eax, ecx
jno 0x403547
test byte [rbp - 0x5f], al
sar byte [rcx + 0x10645393], 0x83
mov bl, 0xb2
and dword [rip - 0x5f5cf9d3], edx
add eax, 0x1082dbb8
adc dword [rbx + 0x4a], 0x35796177
or al, 0xd6
pop rsi
jno 0x403597
or dword [rbx + 0x456c5334], esi
sub cl, byte [rcx]
cwde
cmp dword [rbp - 0x6c], edx
add eax, 0x5b235e9c
sub al, 0x44
or dl, byte [rax + 0x1309675a]
xor dword [rcx - 0x80], ecx
and dword [r14 + 0x21], 0xffffff87
mov word [rax], cs
mov word [r11 - 0x3c], ss
sbb byte [rbp + 0x462a9f74], bl
ret 0x3321
xor al, 0x1d
push rsi
and al, 0xc1
enter -0x7c97, -0xb
xor eax, 0x9ce0f09
cmp edx, esi
push rdx
ror byte [rax - 0x4e033ff4], cl
rcl dword [rcx], 1
or ah, byte [rsp + rdx + 0x2480413f]
js 0x40358e
ret 0x2451
add rcx, qword [r8 - 0x7d]
imul ebx, edx, 0x4e
xor esp, dword [rbp + 0x64]
mov dl, 0x72
add byte [rcx - 0xe09bcde], dl
add al, 0xad
and dl, byte [rbx + 0x5d]
je 0x4035ce
sbb cl, byte [rbp + 0x56875fda]
mov edi, dword [rdx + rcx*8]
sub byte [rsp + rdi*4 - 0x6e], ah
pop rdi
jbe 0x4035d5
add byte [rdx - 0x7b], 0xb0
push rbx
adc bl, byte [rbp + 0xcfa4054]
ficom word [rsi]
leave
add rax, 0x615b432f
lodsd eax, dword [rsi]
mov al, 0x2d
mov dh, 0x77
cmp dword [rdx], eax
push r12
or eax, 0x64c23a30
mov ebx, 0x1314fa45
add dword [rax], 0xc98a3204
push rax
int1
xor dword [rdx - 0x6d], edx
mov dword [rax + 0x33], ecx
xor dword [rax + 0x150c9183], esi
add rcx, qword [r11 + 0x56]
sub eax, 0xc5664602
sub byte [rsi - 0x29ad0540], al
and al, 0xb2
push rbp
adc ch, byte [rcx - 0x5d]
push rdx
xor byte [rax + 0x75e2fdd5], dl
insd dword [rdi], dx
rol dword [rbx + 0x43], 0x17
xor byte [rdx*2 + 0x725a8618], bh
mov dword [rbp + 0x4433aa30], edx
xchg byte [rax - 0x7ab9faf4], al
int 0xc
add esi, eax
xor ah, byte [rcx]
xchg al, al
push rsp
insd dword [rdi], dx
imul rsp, qword [rax + 0x4c], -0x1c
test al, 0xb0
movsxd rdi, edi
jo 0x54953991
movabs dword [0x974cc6d373402050], eax
fisubr dword [rsi + rdx*4]
jb 0x4035e7
mov byte [rcx + 0xf], ah
or byte [rax], 0xdc
or eax, 0x74d76249
mov al, 0xa0
adc eax, 0x587cd256
nop
add cl, byte [rsi]
push rbp
or byte [rbx], ch
test eax, 0xf85b9af2
sub dword [rcx - 0x68], esp
add byte [rsi], ch
jae 0x4036e7
insd dword [rdi], dx
xor dword [rdx + 7], esp
jge 0x40368c
jbe 0x403628
je 0x4036ea
push 0x70725509
add ebp, dword [rax + 0x62]
mov ecx, 0x2e6f6e07
sub eax, 0x2effd8dc
pop rax
or eax, 0x75622ea2
imul ebp, dword [rsp + 0x2d], 0xd006469
jnp 0x403689
lodsd eax, dword [rsi]
mov ch, 0x7d
cmp byte [rcx], cl
jns 0x403711
jne 0x40363f
movabs dword [0xbd0cb5447619d9da], eax
push rsi
ret
pop r15
sbb esi, esi
popfq
sub byte [rsi], al
mov dh, 0x82
or dword [rbx + 0x357d7274], ebp
and byte [rdi + 0x6f2c0abd], dh
or dh, dh
pop rax
insb byte [rdi], dx
cmpsd dword [rsi], dword ptr [rdi]
retf -0x26fb
and al, 0x6f
lahf
add eax, 0x68652ef0
push 0x2e0d7264
sbb byte [rip + 0xf635dba], dl
and dword [rbp - 0x47fedb4d], edi
insb byte [rdi], dx
adc dword [rdx - 0x9d2f4bd], eax
or ebp, dword [rdx + 0x63]
jb 0x40369a
add byte ss:[rbp + 0x687b3668], sil
jnp 0x403761
or al, 0xdb
pop rdx
and dword [rax - 0x2adf3fc], esp
add byte [rax], al
mov bl, 0x22
xchg byte [rax], al
sbb eax, ebx
mov ebp, 0x2b31459
out 7, eax
or al, 0xc9
nop
pushfq
sbb al, 1
and ecx, eax
and byte [rbx], al
rol byte [rdi], cl
push rsp
push rsp
xor ah, byte [rbx + rax*2]
xor ah, byte [rax]
add al, 0x31
xor cl, al
and byte [rbx + 0x74], al
je 0x40375d
cmp esp, esp
fst qword [rax + 0x44]
jg 0x403736
ljmp [rdi - 0x68]
nop
cwde
cmp al, 5
and dword [rcx], ebx
or byte [rsi + 0xb], cl
sbb dword [rax + rbx*8 + 0x3f], ebp
fmul dword [rax]
add al, 0xfb
sbb dword [rcx + rcx*8 + 0x3f183f26], eax
push rsi
xchg eax, ebx
movsb byte [rdi], byte ptr [rsi]
add esp, eax
loopne 0x403774
xor byte [rdi + rdx - 0x37], 0x5c
pop rsi
mov edi, 0xf27243ff
in al, 0x3c
or eax, 0x2560d3c
sbb al, 0x48
imul edi, edi, -2
or eax, 0x836720c9
or eax, 0xb10690a7
movsb byte [rdi], byte ptr [rsi]
wait
mov dl, 0xff
jp 0x4037e8
add al, 0x72
ret 0x519b
xor byte [rcx], bl
in al, dx
mov al, 0x10
inc dword [rdi + rdi + 0x41907242]
pop rax
pop rax
js 0x4037b5
xor byte [rax + 0x138e195c], al
outsb dx, byte [rsi]
push rsi
rcl byte [rax], 0x26
xchg dword [rdi], eax
leave
or edi, edi
sbb cl, byte [rcx + 0xc83903f]
xor dh, al
add bl, byte [rdx + rsi*4]
and dword [rbx + 0x3f940710], edi
push rax
adc al, 0xc8
sbb bh, ch
bswap esp
xchg r12b, r13b
popfq
jg 0x4037d7
mov al, 5
shr byte [rip - 0x6d005d00], cl
xchg eax, ebx
xchg dword [rdx + rax*2], esi
xor al, 0x42
or dword [rsi], eax
sbb edx, dword [rdx + 0x40bfa986]
xchg byte [rdx + 0x24b17f41], dl
sbb dword [rax + rax*8 - 0x40], esp
add esp, dword [rdx + rcx*4 - 0x7040a370]
leave
adc ebx, esp
adc cl, cl
sahf
cmp al, 0x39
jg 0x403824
push rsi
cld
push rsi
insb byte [rdi], dx
add dword [rbp + 0x22], ecx
mov eax, 0x702bdb48
mov bl, 0x28
xchg byte [rsi + 0x1ba407df], ah
movabs rdi, 0x64dc1000f3fe710
clc
jmp qword [rcx - 0xc46269e]
xlatb
xchg eax, edx
shl byte cs:[rsi], 0x5e
clc
wait
cmp al, 0x73
mov bl, 0xd9
jg 0x403852
add dword [rdx], esi
enter -0x6370, 6
adc byte [rax + 0x16d90648], bl
mov edi, 0x24365f5f
mov ecx, 0x60010108
jb 0x40380d
cmp al, 0x79
add byte [rax + 0x40], ah
add dword [rdx], ecx
jo 0x4038b8
and al, byte [rdx - 0x21]
add ecx, ebp
jg 0x40389f
or byte [rbp + 0x6090641c], al
push rax
xor byte [rip - 0x36f27c9c], al
and byte [rip - 0x7ae8cf81], dl
xor byte [rax], bh
sub al, 0x3f
xor al, 0xbf
scasb al, byte [rdi]
and al, 0x66
xchg dword [rdi], eax
adc dword [rbx + 0x17], edi
mov ecx, 0x4f2458c
mov edi, 0xc9bb011e
mov bl, 0x5e
fld dword [rax]
mov byte [rcx - 1], ah
pop rax
test byte [rip + 0x361fcd20], cl
or dword [rdi + 0x60], edi
xchg eax, ecx
cmp al, 0x39
loopne 0x40394a
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 0xff00], dl
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x3ef7fdea], ecx
cli
xchg eax, ebp
out 0xf, eax
mov word [rdx], cs
add esi, eax
add byte [rax], al
imul edx, dword [rbx], 0
add byte [rax - 0x3e], al
add byte [rax], al
add byte [r8], al
hlt
add byte [rax], al
