xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x606157
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x4014c0
mov eax, 0
test rax, rax
je 0x4014c0
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401508
mov eax, 0
test rax, rax
je 0x401508
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x204d59], 0
jne 0x40152a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x204d46], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401540
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40153b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x1a0
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x1a8], 0
lea rax, [rbp - 0x1a8]
mov rsi, rax
mov edi, obj.fin
call sym.std::istream::operator__
mov dword [rbp - 0x188], 0
lea rax, [rbp - 0xc0]
mov rdi, rax
call 0x4012b0
mov esi, 9
mov edi, 0x606168
call sym.std::ios_base::precision
mov esi, 9
mov edi, 0x606378
call sym.std::ios_base::precision
mov ebx, dword [rbp - 0x1a8]
mov esi, str.HELLO
mov edi, obj.std::cout
call sym.std::operator___std::char_traits_char__
mov esi, 0x40424d
mov rdi, rax
call sym.std::operator___std::char_traits_char__
mov esi, ebx
mov rdi, rax
call 0x401210
mov esi, sym.std::endl_char_std::char_traits_char__
mov rdi, rax
call sym.std::ostream::operator__
mov eax, dword [rbp - 0x1a8]
test eax, eax
jle 0x40220c
add dword [rbp - 0x188], 1
mov eax, dword [rbp - 0x1a8]
sub eax, 1
mov dword [rbp - 0x1a8], eax
lea rax, [rbp - 0xa0]
mov rdi, rax
call 0x4012b0
lea rax, [rbp - 0x18c]
mov rsi, rax
mov edi, obj.fin
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x1a4]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x190]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x19c]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x1a0]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x194]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x198]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
lea rax, [rbp - 0x180]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::vector
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::vector
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::vector
mov byte [rbp - 0x1a9], 1
mov edx, dword [rbp - 0x19c]
mov eax, dword [rbp - 0x198]
add edx, eax
mov eax, dword [rbp - 0x18c]
cmp edx, eax
jne 0x40175b
mov edx, dword [rbp - 0x19c]
mov eax, dword [rbp - 0x198]
cmp edx, eax
jne 0x40175b
mov dword [rbp - 0x184], 0
mov eax, dword [rbp - 0x19c]
cmp dword [rbp - 0x184], eax
jge 0x401a2c
lea rax, [rbp - 0xa0]
mov esi, 0x40424f
mov rdi, rax
call 0x401280
add dword [rbp - 0x184], 1
jmp 0x40172c
mov edx, dword [rbp - 0x1a4]
mov eax, dword [rbp - 0x1a0]
add edx, eax
mov eax, dword [rbp - 0x18c]
cmp edx, eax
jne 0x4017bc
mov edx, dword [rbp - 0x1a4]
mov eax, dword [rbp - 0x1a0]
cmp edx, eax
jne 0x4017bc
mov dword [rbp - 0x184], 0
mov eax, dword [rbp - 0x1a4]
cmp dword [rbp - 0x184], eax
jge 0x401a2f
lea rax, [rbp - 0xa0]
mov esi, 0x404252
mov rdi, rax
call 0x401280
add dword [rbp - 0x184], 1
jmp 0x40178d
mov edx, dword [rbp - 0x194]
mov eax, dword [rbp - 0x190]
add edx, eax
mov eax, dword [rbp - 0x18c]
cmp edx, eax
jne 0x40181d
mov edx, dword [rbp - 0x194]
mov eax, dword [rbp - 0x190]
cmp edx, eax
jne 0x40181d
mov dword [rbp - 0x184], 0
mov eax, dword [rbp - 0x194]
cmp dword [rbp - 0x184], eax
jge 0x401a32
lea rax, [rbp - 0xa0]
mov esi, 0x404255
mov rdi, rax
call 0x401280
add dword [rbp - 0x184], 1
jmp 0x4017ee
mov eax, dword [rbp - 0x1a0]
test eax, eax
jle 0x4018cc
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x40]
mov esi, 0x404258
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x184], 0
mov eax, dword [rbp - 0x1a0]
cmp dword [rbp - 0x184], eax
jge 0x401893
lea rax, [rbp - 0x40]
mov esi, 0x40425a
mov rdi, rax
call 0x401280
add dword [rbp - 0x184], 1
jmp 0x40186b
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x180]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::push_back
mov eax, dword [rbp - 0x1a4]
mov edx, dword [rbp - 0x1a0]
add edx, 1
sub eax, edx
mov dword [rbp - 0x1a4], eax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov eax, dword [rbp - 0x190]
test eax, eax
jle 0x40197b
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x40]
mov esi, 0x40425d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x184], 0
mov eax, dword [rbp - 0x190]
cmp dword [rbp - 0x184], eax
jge 0x401942
lea rax, [rbp - 0x40]
mov esi, 0x40425f
mov rdi, rax
call 0x401280
add dword [rbp - 0x184], 1
jmp 0x40191a
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x140]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::push_back
mov eax, dword [rbp - 0x194]
mov edx, dword [rbp - 0x190]
add edx, 1
sub eax, edx
mov dword [rbp - 0x194], eax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov eax, dword [rbp - 0x198]
test eax, eax
jle 0x401a33
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x40]
mov esi, 0x404262
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x184], 0
mov eax, dword [rbp - 0x198]
cmp dword [rbp - 0x184], eax
jge 0x4019f1
lea rax, [rbp - 0x40]
mov esi, 0x404264
mov rdi, rax
call 0x401280
add dword [rbp - 0x184], 1
jmp 0x4019c9
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x160]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::push_back
mov eax, dword [rbp - 0x19c]
mov edx, dword [rbp - 0x198]
add edx, 1
sub eax, edx
mov dword [rbp - 0x19c], eax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401a33
nop
jmp 0x401a33
nop
jmp 0x401a33
nop
mov eax, dword [rbp - 0x1a4]
test eax, eax
js 0x401a51
mov eax, dword [rbp - 0x194]
test eax, eax
js 0x401a51
mov eax, dword [rbp - 0x19c]
test eax, eax
jns 0x401a5d
mov byte [rbp - 0x1a9], 0
jmp 0x402105
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
test rax, rax
sete al
test al, al
je 0x402105
mov eax, dword [rbp - 0x1a4]
test eax, eax
jle 0x401aed
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x80]
mov esi, 0x404258
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x180]
mov rsi, rdx
mov rdi, rax
call method.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____.push_back
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov eax, dword [rbp - 0x1a4]
sub eax, 1
mov dword [rbp - 0x1a4], eax
jmp 0x401a7a
mov eax, dword [rbp - 0x19c]
test eax, eax
jle 0x401b60
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x60]
mov esi, 0x404262
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x160]
mov rsi, rdx
mov rdi, rax
call method.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____.push_back
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov eax, dword [rbp - 0x19c]
sub eax, 1
mov dword [rbp - 0x19c], eax
jmp 0x401aed
mov eax, dword [rbp - 0x194]
test eax, eax
jle 0x401bd3
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x40]
mov esi, 0x40425d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x140]
mov rsi, rdx
mov rdi, rax
call method.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____.push_back
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov eax, dword [rbp - 0x194]
sub eax, 1
mov dword [rbp - 0x194], eax
jmp 0x401b60
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::vector
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::vector
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::vector
lea rax, [rbp - 0x180]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rbx, rax
jb 0x401c53
lea rax, [rbp - 0x180]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rbx, rax
jb 0x401c53
mov eax, 1
jmp 0x401c58
mov eax, 0
test al, al
je 0x401cac
lea rdx, [rbp - 0x180]
lea rax, [rbp - 0x120]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
lea rdx, [rbp - 0x160]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
lea rdx, [rbp - 0x140]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
jmp 0x401da0
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
lea rax, [rbp - 0x180]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rbx, rax
jb 0x401cff
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rbx, rax
jb 0x401cff
mov eax, 1
jmp 0x401d04
mov eax, 0
test al, al
je 0x401d55
lea rdx, [rbp - 0x160]
lea rax, [rbp - 0x120]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
lea rdx, [rbp - 0x180]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
lea rdx, [rbp - 0x140]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
jmp 0x401da0
lea rdx, [rbp - 0x140]
lea rax, [rbp - 0x120]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
lea rdx, [rbp - 0x180]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
lea rdx, [rbp - 0x160]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov r12, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
add rax, r12
cmp rbx, rax
seta al
test al, al
je 0x401dec
mov byte [rbp - 0x1a9], 0
jmp 0x4020d8
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
test rax, rax
setne al
test al, al
je 0x401f19
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
lea rdx, [rax - 1]
lea rax, [rbp - 0x120]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rdx, rax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401270
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::pop_back
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rbx, rax
seta al
test al, al
je 0x401ecb
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
lea rdx, [rax - 1]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rdx, rax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401270
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::pop_back
jmp 0x401dec
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
lea rdx, [rax - 1]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rdx, rax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401270
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::pop_back
jmp 0x401dec
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
test rax, rax
jne 0x401f41
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
test rax, rax
je 0x401f48
mov eax, 1
jmp 0x401f4d
mov eax, 0
test al, al
je 0x4020d8
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
test rax, rax
je 0x401fc0
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
lea rdx, [rax - 1]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx ebx, byte [rax]
lea rax, [rbp - 0x100]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp bl, al
je 0x401fc0
mov eax, 1
jmp 0x401fc5
mov eax, 0
test al, al
je 0x402012
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
lea rdx, [rax - 1]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rdx, rax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401270
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::pop_back
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
test rax, rax
je 0x40207d
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
lea rdx, [rax - 1]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx ebx, byte [rax]
lea rax, [rbp - 0xe0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp bl, al
je 0x40207d
mov eax, 1
jmp 0x402082
mov eax, 0
test al, al
je 0x401f19
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
lea rdx, [rax - 1]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
mov rdx, rax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x401270
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::pop_back
jmp 0x401f19
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
movzx eax, byte [rbp - 0x1a9]
xor eax, 1
test al, al
je 0x402127
lea rax, [rbp - 0xa0]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov esi, str.Case__
mov edi, obj.std::cout
call sym.std::operator___std::char_traits_char__
mov rdx, rax
mov eax, dword [rbp - 0x188]
mov esi, eax
mov rdi, rdx
call 0x401210
mov esi, 0x404279
mov rdi, rax
call sym.std::operator___std::char_traits_char__
mov esi, str.Case__
mov edi, obj.fout
call sym.std::operator___std::char_traits_char__
mov rdx, rax
mov eax, dword [rbp - 0x188]
mov esi, eax
mov rdi, rdx
call 0x401210
mov esi, 0x404279
mov rdi, rax
call sym.std::operator___std::char_traits_char__
lea rax, [rbp - 0xa0]
mov rsi, rax
mov edi, obj.std::cout
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
lea rax, [rbp - 0xa0]
mov rsi, rax
mov edi, obj.fout
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
mov esi, sym.std::endl_char_std::char_traits_char__
mov edi, obj.fout
call sym.std::ostream::operator__
mov esi, sym.std::endl_char_std::char_traits_char__
mov edi, obj.std::cout
call sym.std::ostream::operator__
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
lea rax, [rbp - 0x180]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401601
mov ebx, 0
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov eax, ebx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4023c4
jmp 0x4023bf
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4022cf
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4022f4
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402319
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
jmp 0x40235f
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
lea rax, [rbp - 0x180]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_vector
jmp 0x402391
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4023a5
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x1a0
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x40246b
cmp dword [rbp - 8], 0xffff
jne 0x40246b
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
mov esi, 0x20
mov edi, 0x10
call sym.std::operator_
mov edx, eax
mov esi, str..._.._.._output.txt
mov edi, obj.fout
call sym.std::basic_ofstream_char_std::char_traits_char__::basic_ofstream
mov edx, obj.__dso_handle
mov esi, obj.fout
mov edi, sym.std::basic_ofstream_char_std::char_traits_char__::_basic_ofstream
call sym.imp.__cxa_atexit
mov edx, 8
mov esi, str..._.._.._input.txt
mov edi, obj.fin
call sym.std::basic_ifstream_char_std::char_traits_char__::basic_ifstream
mov edx, obj.__dso_handle
mov esi, obj.fin
mov edi, sym.std::basic_ifstream_char_std::char_traits_char__::_basic_ifstream
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
mov eax, dword [rbp - 4]
or eax, dword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 8]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x4025a4
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 0x20]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x4025b7
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_emplace_back_aux_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::emplace_back_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
mov eax, 1
pop rbp
ret
push rbp
mov rbp, rsp
push r14
push r13
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x40]
cmp rax, qword [rbp - 0x38]
je 0x40292d
call sym.__gnu_cxx::__alloc_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_S_propagate_on_copy_assign
test al, al
je 0x40272a
call sym.__gnu_cxx::__alloc_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_S_always_equal
xor eax, 1
test al, al
je 0x402697
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____._M_get_Tp_allocator
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rsi, rbx
mov rdi, rax
call sym.std::operator___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
test al, al
je 0x402697
mov eax, 1
jmp 0x40269c
mov eax, 0
test al, al
je 0x402704
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::clear
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 0x38]
mov qword [rax], 0
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], 0
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], 0
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____._M_get_Tp_allocator
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rsi, rbx
mov rdi, rax
call sym.std::__alloc_on_copy_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::capacity
cmp rax, qword [rbp - 0x30]
setb al
test al, al
je 0x402812
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____.end
mov rbx, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____.begin
mov rdx, rax
mov rsi, qword [rbp - 0x30]
mov rax, qword [rbp - 0x38]
mov rcx, rbx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_allocate_and_copy___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 5
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x402913
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x30]
setae al
test al, al
je 0x402892
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov r12, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::end
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::begin
mov r14, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____.end
mov r13, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____.begin
mov rdx, r14
mov rsi, r13
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char________gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::_Destroy___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
jmp 0x402913
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov r12, qword [rax]
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
shl rax, 5
lea rcx, [r12 + rax]
mov rax, qword [rbp - 0x40]
mov rax, qword [rax]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::copy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov r14, rax
mov rax, qword [rbp - 0x38]
mov r12, qword [rax + 8]
mov rax, qword [rbp - 0x40]
mov rbx, qword [rax + 8]
mov rax, qword [rbp - 0x40]
mov r13, qword [rax]
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
shl rax, 5
add rax, r13
mov rcx, r14
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__uninitialized_copy_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 5
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x38]
add rsp, 0x20
pop rbx
pop r12
pop r13
pop r14
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 5
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax - 0x20]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const___
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 0x20
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x402c80
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x402c2f
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
jmp 0x402c51
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x402cf7
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 0x20]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x402d15
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_emplace_back_aux_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov eax, 0
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_erase_at_end
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402d92
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rcx
mov rsi, rdx
mov rdi, rax
call sym.std::__do_alloc_on_copy_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
add rsp, 0x10
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x402de5
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402e5f
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402eb4
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x40], rdx
mov qword [rbp - 0x50], rcx
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x50]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x18]
jmp 0x402f46
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x48
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402f94
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x40], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rcx, rax
mov rax, qword [rbp - 0x40]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char________gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40302c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
nop
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov r13, rax
mov r12, qword [rbp - 0x30]
mov rsi, r12
mov edi, 0x20
call 0x402483
mov rbx, rax
test rbx, rbx
je 0x4031e3
mov rsi, r13
mov rdi, rbx
call 0x4013c0
jmp 0x4031e3
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x402495
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x40324f
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
cmp rax, qword [rbp - 0x20]
ja 0x4032af
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
cmp rax, qword [rbp - 0x20]
jae 0x4032bd
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
jmp 0x4032c1
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4032d5
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x403308
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::allocate
jmp 0x40330d
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 0x20
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x40357c
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x40352b
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::size
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
jmp 0x40354d
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x60], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov r12, rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rbx, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::__normal_iterator
mov rax, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x403718
call sym.imp.__stack_chk_fail
add rsp, 0x50
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x403866
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
add qword [rbp - 8], 0x20
jmp 0x403841
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x4038b1
mov rax, qword [rbp - 0x10]
jmp 0x4038b5
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403927
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 0x20
call 0x402483
test rax, rax
je 0x40399f
mov rsi, rbx
mov rdi, rax
call 0x4012c0
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 0
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_false_std::random_access_iterator_tag_::__copy_m_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
test al, al
je 0x403ac0
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator_
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
jmp 0x403a7f
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 0
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_false_std::random_access_iterator_tag_::__copy_m_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x28]
cmp rax, qword [rbp - 0x30]
je 0x403b6d
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
add qword [rbp - 0x28], 0x20
add qword [rbp - 0x18], 0x20
jmp 0x403b39
mov rax, qword [rbp - 0x18]
jmp 0x403ba6
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::max_size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x403c2c
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 5
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
test al, al
je 0x403cf6
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
add qword [rbp - 0x18], 0x20
jmp 0x403ca6
mov rax, qword [rbp - 0x18]
jmp 0x403d2f
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
jle 0x403dc5
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call 0x401360
add qword [rbp - 0x18], 0x20
add qword [rbp - 0x28], 0x20
sub qword [rbp - 8], 1
jmp 0x403d9a
mov rax, qword [rbp - 0x28]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x20]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
jle 0x403e8e
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call 0x401360
add qword [rbp - 0x18], 0x20
add qword [rbp - 0x28], 0x20
sub qword [rbp - 8], 1
jmp 0x403e63
mov rax, qword [rbp - 0x28]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x20
call 0x402483
mov rbx, rax
test rbx, rbx
je 0x403f05
mov rsi, r13
mov rdi, rbx
call 0x4013c0
jmp 0x403f05
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x402495
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x7ffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
test al, al
je 0x403f93
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::operator__
add qword [rbp - 0x18], 0x20
jmp 0x403f43
mov rax, qword [rbp - 0x18]
jmp 0x403fcc
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__std::vector_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___std::allocator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x20]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__const__
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x20
call 0x402483
mov rbx, rax
test rbx, rbx
je 0x4040a4
mov rsi, r13
mov rdi, rbx
call 0x4013c0
jmp 0x4040a4
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x402495
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x40416e
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x20]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x20
call 0x402483
test rax, rax
je 0x404166
mov rsi, rbx
mov rdi, rax
call 0x4012c0
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201c16]
push rbp
lea rbp, [rip + 0x201c1e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x404216
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x404200
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 0x45], cl
add byte [r8], r12b
add byte [rcx + 0x56], bl
add byte [rdx + 0x47], dl
add byte [rdx + 0x4f], al
add byte [rdx], dl
push r10
add byte [rdx], al
add byte [rcx], bl
push rsi
pop rcx
add byte [rcx + 0x4d], cl
push r8
push r11
push rbx
add byte [r11 + 0x61], r8b
jae 0x4042db
and byte [rbx], ah
add byte [rdx], bh
and byte [rax], al
jbe 0x4042e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4042f7
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40430f
add byte [rsi], ch
outsd dx, dword [rsi]
jne 0x404318
jo 0x40431b
je 0x4042d6
je 0x404322
je str..._.._.._input.txt
imul ebp, dword [rsi + 0x70], 0x742e7475
js 0x404332
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
add eax, dword [rax]
add byte [rcx], bh
add byte [rax], al
xor bh, cl
jmp qword [rax]
add al, 0
add byte [rax - 0xf00002f], ah
add eax, dword [rax]
add byte [rsi - 0x1700002e], dl
add al, 0
add byte [rax], dl
loope 0x4042e6
lcall [rax - 0x51ffffed]
loope 0x4042ee
mov eax, 0xc3000013
loope 0x4042f6
dec dword [rax + 4]
add byte [rax], al
loope 0x4042fe
ljmp [rax + 4]
add byte [rax], al
in al, 0xe1
dec dword [rax - 0x9fffffc]
loope 0x40430e
ljmp [rax + 0x20000004]
loop 0x404316
call qword [rax]
add eax, 0xe22e0000
push qword [rax]
add eax, 0xe24a0000
lcall [rax + 5]
add byte [rax], al
mov fs, edx
inc dword [rax - 0x5fffffb]
loop 0x404336
jmp qword [rax + 0x2c000005]
jrcxz 0x40433e
inc eax
add eax, 0xe3520000
jmp rax
add eax, 0xe35d0000
inc dword [rax]
add byte [rax], al
push 0x20ffffe3
add byte [rax], al
jle 0x404344
dec dword [rax + 6]
add byte [rax], al
sahf
out 0xff, al
ljmp [rax + 6]
add byte [rax], al
fsub st(6)
call qword [rax - 0xbfffffa]
out 0xff, al
push qword [rax + 0x10000006]
out 0xff, eax
call rax
add byte [rax], al
out 0xff, eax
clc
add byte [rax], al
outsb dx, byte [rsi]
out 0xff, eax
lcall [rax]
add byte [rax], al
cwde
out 0xff, eax
cmp byte [rdi], al
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
out 0xff, eax
lcall [rax + 7]
add byte [rax], al
loopne 0x40438d
js 0x4043b1
add byte [rax], al
jmp 0x7e143b1
add byte [rax], al
jmp 0x80143b9
add byte [rax], al
pop rax
jmp rax
add byte [rax], al
inc dword [rax]
or byte [rax], al
add byte [rdx - 0x16], bh
jmp qword [rax]
or byte [rax], al
add byte [rax + 0x40ffffea], ah
or byte [rax], al
add ch, dl
jmp qword [rax + 8]
add byte [rax], al
sub bl, ch
inc dword [rax + 0x4e000008]
jmp 0x4043ee
jmp qword [rax - 0x5dfffff8]
jmp 0x4043f6
inc eax
or byte [rax], al
add dh, dh
jmp 0x4043fe
jmp rax
or byte [rax], al
add byte [rsi + 0x8ffffec], cl
or dword [rax], eax
add dh, dl
in al, dx
ljmp [rax]
or dword [rax], eax
add byte [rdx], ah
in eax, dx
call qword [rax + 9]
add byte [rax], al
outsb dx, byte [rsi]
in eax, dx
push qword [rax + 9]
add byte [rax], al
cwde
in eax, dx
call qword [rax - 0x1bfffff7]
in eax, dx
mov eax, 0x15000009
out dx, al
fmul dword [rcx]
add byte [rax], al
cmp al, 0xee
clc
or dword [rax], eax
add byte [rdx - 0x12], bh
lcall [rax]
or al, byte [rax]
add byte [rbp + 0x38ffffee], dl
or al, byte [rax]
add byte [rsi + rbp*8 + 0xa58ffff], bh
add byte [rax], al
xor bh, ch
dec dword [rax + 0x1c00000a]
push qword [rax + 0x4f00000a]
call rax
or al, byte [rax]
add byte [rbx - 0x7000010], ah
or al, byte [rax]
add ah, bl
lcall [rax]
or eax, dword [rax]
add ah, al
inc dword [rax + 0xb]
add byte [rax], al
or ebx, esi
ljmp [rax + 0xb]
add byte [rax], al
dec dword [rax + 0x4600000b]
ljmp [rax + 0x6300000b]
dec eax
or eax, dword [rax]
add byte [rbx + rsi*8 + 0xbe8ffff], dl
add byte [rax], al
mov cl, 0xf3
dec dword [rax]
or al, 0
add bl, cl
ljmp [rax]
or al, 0
add byte [rcx - 0xc], ah
call qword [rax + 0xc]
add byte [rax], al
xchg esp, esi
push qword [rax + 0xc]
add byte [rax], al
movabs eax, dword [0xf900000c90fffff4]
hlt
mov eax, 0x2a00000c
cmc
fmul dword [rax + rax]
add byte [rdx - 0xb], cl
clc
or al, 0
add byte [rsi - 0xb], ah
lcall [rax]
or eax, 0xf5710000
cmp byte [rip - 0xa560000], cl
lcall [rax + 0xd]
add byte [rax], al
int3
cmc
js 0x40451f
add byte [rax], al
div ebp
lcall [rax + 0x2100000d]
idiv bh
mov eax, 0x6900000d
idiv bh
fmul dword [rip - 0x9660000]
clc
or eax, 0xf6e80000
jmp qword [rax]
add byte [rax], al
or esi, edi
inc dword [rax + 0xe]
add byte [rax], al
cmp al, 0xf7
jmp qword [rax + 0xe]
add byte [rax], al
idiv rdi
inc dword [rax + 0x6400000e]
idiv edi
jmp qword [rax + 0x7e00000e]
idiv edi
inc eax
add byte [rax], al
scasd eax, dword [rdi]
idiv edi
jmp rax
add byte [rax], al
add edi, eax
inc dword [rax]
sldt word [rax]
adc eax, edi
jmp qword [rax]
sldt word [rax]
sub edi, eax
inc dword [rax + 0xf]
add byte [rax], al
pop rsp
clc
jmp qword [rax + 0xf]
add byte [rax], al
out dx, al
clc
dec dword [rax - 0x6fffff1]
clc
ljmp [rax + 0x700000f]
stc
dec eax
sldt word [rax]
and bh, cl
call 0x3c4045bc
stc
dec dword [rax]
adc byte [rax], al
add byte [rsi - 7], bh
ljmp [rax]
adc byte [rax], al
add byte [rax + 0x48fffff9], bl
adc byte [rax], al
add cl, cl
stc
ljmp [rax + 0x10]
add byte [rax], al
jbe 0x4045c8
call qword [rax - 0x6cfffff0]
cli
push qword [rax - 0x4ffffff0]
cli
call rax
adc byte [rax], al
add byte [rbx], cl
sti
push rax
adc byte [rax], al
add byte [rax - 5], cl
call qword [rax]
adc dword [rax], eax
add byte [rax - 5], ch
push qword [rax]
adc dword [rax], eax
add byte [rcx - 5], bh
call qword [rax + 0x11]
add byte [rax], al
sti
push qword [rax + 0x11]
add byte [rax], al
loop 0x404609
call qword [rax + 0x52000011]
cld
inc eax
adc dword [rax], eax
add byte [rsi - 4], ah
jmp rax
adc dword [rax], eax
add byte [rbx], dl
std
dec dword [rax]
adc al, byte [rax]
add byte [rax - 3], dl
ljmp [rax]
adc al, byte [rax]
add byte [rax - 3], dh
dec dword [rax + 0x12]
add byte [rax], al
cmp ebp, 0x1268ffff
add byte [rax], al
std
lcall [rax - 0x1ffffee]
std
mov eax, 0xc000012
fcom dword [rdx]
add byte [rax], al
xor al, 0xfe
clc
adc al, byte [rax]
add byte [rsi + rdi*8 - 1], dl
lcall [rax]
adc eax, dword [rax]
add byte [rbp - 2], ah
cmp byte [rbx], dl
add byte [rax], al
scasb al, byte [rdi]
lcall [rax + 0x13]
add byte [rax], al
call 0x7940467f
adc eax, dword [rax]
add byte [rax], al
fcom dword [rbx]
add byte [rax], al
jo 0x40468d
jmp qword [rax]
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4046b7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test al, 0xcd
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4046e7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or bl, cl
jmp qword [rax + 2]
add byte [rax], al
add byte [rsi], cl
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rbx - 0x23], dh
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rbp - 0x23], ah
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
push rsp
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rsi - 0x23], al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4047a9
add esi, eax
adc eax, dword [rax]
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
int 0xff
jp 0x4047c4
add byte [rax], al
add al, 0xfc
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], 0x6b
or al, 7
or byte [rax + rax], bl
add byte [rax], al
or al, 1
add byte [rax], al
or ch, bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
add dh, dh
fdiv st(7), st(0)
lcall [rbx]
add byte [rax], al
add byte [rbx + rsi*2], al
push rdi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
add dl, ch
fdiv st(7), st(0)
inc dword [rax + rax]
add byte [rdi + rsi*2], al
push rdi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x404843
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404847
add byte [rax], al
ljmp [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
add dword [rax], eax
add byte [rdx - 0x23], dl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x64000001
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rcx]
add byte [rax], al
push -0x23
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add dword [rax], eax
add byte [rbp - 0x23], dl
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 2
add byte [rax], al
call qword [rsi]
add eax, dword [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov es, word [r11]
lea eax, [rsp + rcx*4]
add eax, 0x6030683
add ecx, dword [rdi + rax]
or byte [rax + rax], bl
add byte [rax], al
add r8b, byte [rax]
add byte [rsi], ch
loopne 0x404912
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add byte [rsi], ch
loopne 0x404932
cmp al, byte [rax]
add byte [rax], al
add al, 0x7b
push rdi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jne 0x404953
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdx], es
add byte [rax], al
loopne 0x40495a
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add al, byte [rax]
add byte [rax], bh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 2
add byte [rax], al
cmp al, ah
call qword [rax]
add byte [rax], al
add al, 0x7f
push rdi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add al, byte [rax]
add byte [rax - 0x20], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 3
add byte [rax], al
loopne 0x4049e2
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 3
add byte [rax], al
pop rax
loopne 0x404a02
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add eax, dword [rax]
add byte [rsi - 0x20], al
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x404a3f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 2
add byte [rax], al
loopne 0x404a42
jmp rdi
add dword [rax], eax
add byte [rsp + rax*4], al
push rdi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
fld qword [rcx]
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
add eax, dword [rax]
add byte [rdi], bl
loop 0x404a6a
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xe000003
loop 0x404a8a
inc dword [rdx]
adc byte [rsi + 0x60d4302], al
add bh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
jo 0x404a8c
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add eax, dword [rax]
add byte [rsi - 0x1e], bl
call qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 4
add byte [rax], al
push rdx
loop 0x404aea
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 4
add byte [rax], al
pop rax
loop 0x404b0a
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404b27
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add al, 0
add byte [rbp - 0x1e], ch
call qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x404b4a
add byte [rax], al
movabs al, byte [0x26ffffe2]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add al, 0
add byte [rsi + 0x53ffffe2], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xda000004
loop 0x404b8a
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sbb al, 4
add byte [rax], al
jrcxz 0x404baa
call qword [rdi + 0x4000000]
lodsb al, byte [rsi]
push rdi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
lea ecx, [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 5
add byte [rax], al
jle 0x404bb5
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
and al, 5
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
jrcxz 0x404bf2
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add rax, -0x1c360000
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
add eax, 0xe3f60000
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rip - 0x1c000000], es
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 5
add byte [rax], al
and al, 0xe4
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, 0xe4350000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add eax, 0xe43c0000
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x404cdf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 6
add byte [rax], al
pop rdx
in al, 0xff
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 6
add byte [rax], al
push rbp
in al, 0xff
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
xchg eax, esp
add eax, 0xe45c0000
push qword [rbx]
add byte [rax], al
add al, 0xc8
push rdi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6502
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rsi], al
add byte [rax], al
movabs al, byte [0xecffffe4]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x404d73
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
in eax, 0xff
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add byte [rax], al
ja 0x404d7f
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
movabs dword [0x39ffffe5], eax
adc byte [rsi + 0x60d4302], al
je 0x404ddf
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
add byte [rax], al
mov esp, 0xe7ffffe5
add dword [rax], eax
add byte [rsp + rdx*8], al
push rdi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
fld qword [rcx]
or al, 7
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
jl 0x404e0c
add byte [rax], al
jl 0x404df1
inc dword [rbp]
add byte [rax], al
add al, 0xfc
push rdi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
cdq
out 0xff, eax
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
test byte [rdi], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
out 0xff, eax
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
xchg eax, esi
out 0xff, eax
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
xchg eax, ebx
out 0xff, eax
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 7
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
out 0xff, eax
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 8
add byte [rax], al
movabs eax, dword [0x1affffe7]
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 8
add byte [rax], al
wait
out 0xff, eax
call qword [rsi]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x76
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte [rax], r8b
add byte [rcx], cl
call 0x674f1d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
or byte [rax], al
add byte [rdi], cl
call 0x5b4f3d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rax], cs
add byte [rax], al
or eax, ebp
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 8
add byte [rax], al
cmp eax, ebp
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte [rax], al
add byte [rdx - 0x18], cl
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or byte [rax], al
add byte [rdx - 0x18], cl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 9
add byte [rax], al
call 0x4c4fe5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 9
add byte [rax], al
xor eax, ebp
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x40501f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or dword [rax], eax
add byte [rdx - 0x18], cl
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x405047
add byte [rax], al
call 0x6c5045
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or dword [rax], eax
add byte [rdi - 0x18], dl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 9
add byte [rax], al
call 0x895085
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or dword [rax], eax
add byte [rcx + 0x31ffffe8], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
or dword [rax], eax
add byte [rdx + 0x4dffffe8], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xa
add byte [rax], al
shr al, 0xff
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xa
add byte [rax], al
ret
call 0x72510d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or al, byte [rax]
add ah, dl
call 0x4f512d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x405150
add byte [rax], al
ret 0xffe8
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or al, byte [rax]
add byte [rax + rbp*8 + 0x1affff], bh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xb600000a
call 0x72518d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rdx]
add byte [rax], al
call 0x9551ad
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
or al, byte [rax]
add bl, bh
call 0x4f51cd
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xb
add byte [rax], al
jmp 0x1b4051d5
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xb
add byte [rax], al
jrcxz 0x4051f2
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pushfq
or al, byte [rax]
add ah, dh
call 0xd2522d
add byte [rax], al
add al, 0
pop rax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
xchg dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], cl
add byte [rax], al
pop rsi
jmp 0x4c5255
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or eax, dword [rax]
add byte [rcx - 0x17], cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, dword [rax]
add byte [rdi], dh
jmp 0x5c5295
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xb
add byte [rax], al
xor ch, cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xc
add byte [rax], al
sub al, 0xe9
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x4052ef
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xc
add byte [rax], al
jmp 0x5b52f5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0
add byte [rax - 0x17], cl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or eax, dword [rax]
add byte [rcx - 0x17], bl
ljmp [rbp + 0x4000000]
sbb byte [rax + 0x40], bl
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
mov word [rax + rax], cs
add dh, bl
jmp 0x5e535d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or al, 0
add bl, bl
jmp 0x5e537d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
or al, 0
add al, bl
jmp 0x9c539d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
or al, 0
add byte [rbx], dl
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
or al, 0xd
add byte [rax], al
xor dl, ch
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xd
add byte [rax], al
xor dl, ch
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or rax, 0xffffffffea210000
lcall [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
or eax, 0xea5c0000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
int3
or al, 0
add byte [rdx - 0x16], cl
ljmp [rdi]
add byte [rax], al
add al, 0x34
pop rax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x8a00000d
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0xd
add byte [rax], al
jle 0x405494
ljmp [rbp + 0x4000000]
pop rax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
add al, 0xe
add byte [rax], al
add ebp, ebx
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
and al, 0xe
add byte [rax], al
and bl, ch
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
and bl, ch
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or eax, 0xeb110000
ljmp [rdi]
add byte [rax], al
add al, 0x5c
pop rax
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
push rax
jmp 0x405562
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xe
add byte [rax], al
jmp 0x405582
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
sub al, 0xeb
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
xor al, 0xeb
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xf
add byte [rax], al
xor al, 0xeb
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xf
add byte [rax], al
and eax, 0x49ffffeb
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
push rsp
sldt word [rax]
jmp 0x405622
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
je 0x40564d
add byte [rax], al
push 0x11ffffeb
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
sldt word [rax]
jo 0x40562f
lcall [rsi]
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
mov ah, 0xf
add byte [rax], al
out dx, al
int 0xff
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, dl
sldt word [rax]
and bl, ch
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x4056da
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
sbb al, 0x10
add byte [rax], al
jmp 0x4056ea
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
jae 0x405737
add eax, 0x1820000
sub esp, ecx
sbb al, 0
in eax, dx
add dword [rbx + 0x1cb801], eax
test dword [rbx], 0x1c8601c7
add bh, dh
add eax, 0x19e405
scasd eax, dword [rdi]
and al, 0xfb
sbb dword [rax], eax
cmpsb byte [rsi], byte ptr [rdi]
add eax, 0xde001a8f
and al, 0xa6
sbb al, byte [rax]
or byte [rip - 0x72ffe546], al
or dword [rcx + rdx*8], esp
sbb al, byte [rax]
ror byte [rdx], 1
add eax, 0xe6001af6
or al, byte [rip - 0x3cffe51b]
or eax, dword [rip - 0x26ffe465]
or eax, dword [rip - 0x49ffe476]
or al, 5
rcr byte [rbx], 0
int3
or al, 5
scasd eax, dword [rdi]
sbb eax, dword [rax]
or ah, dl
sbb eax, dword [rax]
int3
test eax, 0x1c8601
in al, 0x1c
add eax, 0xffff0000
add dword [rax], eax
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add byte [rax], al
inc dword [rbx]
and eax, 0x1c221a01
add byte [rax], al
add dword [rcx], 0x102d537
in eax, 1
cmp al, byte [rax]
add byte [rax + 0x3cd4503], cl
add bl, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add ebx, dword [rcx]
add dword [rcx], edx
add eax, 0x54e0000
pop rcx
add dword [rbx + 0xa], esi
jge 0x4057bd
mov eax, dword [rcx]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or byte [rdi + 5], al
add byte [rdx + 5], r12b
add byte [rax], al
inc dword [rbx]
and eax, 0x1c221a01
add byte [rax], al
mov bl, 1
add eax, 0xe50102d5
add dword [rdx], edi
add byte [rax], al
lodsb al, byte [rsi]
add esp, dword [rcx]
int 3
add bl, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
add edx, dword [rip + 0x5400d01]
push rdi
add dword [rbp + 0xa], ebp
ja 0x40580d
test dword [rcx], eax
add eax, 0x10000
add byte [rax], al
add byte [rax], al
inc dword [rbx]
sbb dword [rcx], eax
andnps xmm0, xmmword [rip + 0x1890173]
or dl, byte [rbx + 0x1a10001]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
inc dword [rbx]
sbb dword [rcx], eax
movntps xmmword [rip + 0x1890173], xmm0
or dl, byte [rbx + 0x1a10001]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rip + 0x40], dl
add byte [rax], al
outsb dx, byte [rsi]
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], dl
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol dword [rip], 0
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add eax, 0
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rdx + rax*2], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 3], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x400d], bl
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi + 0x60], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte es:[rax]
add byte [rax], al
add byte [rax], al
adc al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x406064
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4012], al
add byte [rax], al
add byte [rsi + 0x4012], dl
add byte [rax], al
add byte [rsi + 0x4012], ah
add byte [rax], al
add byte [rsi + 0x4012], dh
add byte [rax], al
add dh, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0x12, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
adc eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x4060e5
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4013], al
add byte [rax], al
add byte [rsi + 0x4013], dl
add byte [rax], al
add byte [rsi + 0x4013], ah
add byte [rax], al
add byte [rsi + 0x4013], dh
add byte [rax], al
add dh, al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0x13, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x14], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4061c8
je 0x4061d1
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x4061df
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x4061dc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rcx + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
cwde
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or dword [rax], eax
sub byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax + 0xe], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add al, dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, 0
lock adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x40145000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0x14], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rdx + rax*2], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x4046], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add ah, bh
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40c3d2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x605df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x61], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax + 0x61], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4014], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], dl
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x62], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x605df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], dh
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
call 0x40c56a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], ch
add byte [rax], dl
add byte [rdx + rax*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x6066], cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rbp + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rsi + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
sahf
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add byte [rsi + 0x24], ch
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add dword [rax], eax
add byte [rcx], al
add byte [rdx], dl
add al, bh
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], cl
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
rol byte [rdx + 0x40], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rcx], 0
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], al
add byte [rax + rax], dl
clc
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 1], dl
add byte [rax + rax], dl
call 0x40c6d2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000001], ah
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1a], cl
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000001], ch
add byte [rsi], cl
add al, ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x29], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 2], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx], cl
and eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000002], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x2a], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 3], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x36], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add cl, dl
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x406776
add byte [rax], al
and al, byte [rax]
add byte [rcx], ch
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cli
add al, 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add eax, 0x220000
add byte [rdx], bh
sub eax, 0x40
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rbp + rax], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x22000005
add byte [rsi], cl
add byte [rbp + 0x31], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1a], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x14], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4039], ch
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + section_end..strtab], ch
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
add byte [rax], al
and al, byte [rax]
add bl, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x403e], ah
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [eax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
cmp eax, 0x40
add byte [rax], al
sbb eax, 0
add byte [rax], al
add bh, dh
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add bl, cl
cmp eax, 0x40
add byte [rax], al
cmp al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x4068cb
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x20000009
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
or dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dl
add byte es:[rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], ah
add byte [rax], al
and al, byte [rax]
add cl, ah
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], cl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x403c], cl
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add dh, cl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x37], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x120000], al
add byte [rdx + rax*2], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xc], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + section_end..strtab], ch
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000c], dh
add byte [rsi], cl
add byte [rsi + 0x41], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
or eax, 0x220000
add byte [rsi], ch
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rip + 0x220000], cl
add byte [rcx + rbp + 0x40], dh
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x220000
add byte [rdx], cl
and eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
and al, byte [rax]
add byte [rcx], bh
add byte ds:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0xe
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x30], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
and al, byte [rax]
add byte [rcx + 0x37], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x406ac9
add byte [rax], al
and al, byte [rax]
add byte [rsp + 0x40], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
sldt word [rax]
and al, byte [rax]
add byte [rax + 0x4041], ch
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
sldt word [rax]
and al, byte [rax]
add byte [rsi + rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx + 0x10], ah
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
sub eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x402c], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x402d], dl
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, byte [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x2e], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add bl, bl
adc dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4041], ah
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [r8]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4024], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x402f], dl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add ah, ah
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0x13
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, byte [rbx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4040], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x14], cl
add byte [rax], al
and al, byte [rax]
add dh, ch
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000014], bl
add byte [rsi], cl
add byte [rsi], ah
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x2d], ah
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rsi + 0x15], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
nop
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x406c97
add byte [rax], al
and al, byte [rax]
add byte [rbx + rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add dl, dh
adc eax, 0x200000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
and al, byte [rax]
add ah, ch
and eax, 0x40
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [rax], al
and al, byte [rax]
add ah, bh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x17], dl
add byte [rax], al
adc dword [rax], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add cl, cl
xor eax, 0x40
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
and al, byte [rax]
add al, ch
sub eax, 0x40
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x402a], ah
add byte [rax], al
add bh, ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000018], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword cs:[rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rsi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0x53000e0022000019], al
cmp eax, 0x40
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rcx], dh
sbb al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1a], cl
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1a], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4029], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200001a], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200001b], al
add byte [rsi], cl
add byte [rdx + 0x403e], ah
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x402c], dl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add dl, al
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x38], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200001c], al
add byte [rsi], cl
add ah, bh
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x220000
add byte [rax + 0x402a], ah
add byte [rax], al
add bh, ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200001d], dh
add byte [rsi], cl
add ah, bh
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x6062], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1e], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4040], dh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1100001e], dh
add byte [rbx], bl
add byte [rax + 0x6064], al
add byte [rax], al
add byte [rax], cl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200001e], bh
add byte [rsi], cl
add byte [rdx], cl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
add byte [rax], al
and al, byte [rax]
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbx], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x402c], dl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add dl, ah
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
add byte [rax], al
and al, byte [rax]
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x20], dl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x20], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x120000], bh
add byte [rax], al
loopne 0x406ffc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x21], cl
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x21], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3d], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x407063
add byte [rax], al
and al, byte [rax]
add ah, bl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [r8]
add byte [rdx], dl
add byte [rsi], cl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rcx
and al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add al, dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea esp, [rdx]
add byte [rax], al
and al, byte [rax]
add ah, bh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add al, dh
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2f], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bh
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, dh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4036], cl
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rcx + 0x22000024], al
add byte [rsi], cl
add byte [rbp + rsi + 0x40], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add cl, ah
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rax*2], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
and eax, 0x220000
add byte [rbx], ah
add byte ss:[rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
and eax, 0x220000
add byte [rsi + 0x4024], dh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
and eax, 0x220000
add byte [rsi], bh
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x33], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000026], bh
add byte [rsi], cl
add byte [rsi + 0x402e], dh
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rdi + 0x27], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + rsi + 0x40], ah
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x22000027
add byte [rsi], cl
add byte [rax + 0x4029], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], al
add byte ss:[rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbp + 0x22000028], dl
add byte [rsi], cl
add byte [rdx], cl
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x10000029
add byte [rbx], bl
add byte [rax + 0x61], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x29], cl
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000029], bh
add byte [rsi], cl
add dh, ch
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + section_end..strtab], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2a], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3c], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
sub al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4041], ah
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp ebp, dword [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4025], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp + 0x220000], dl
add byte [rdx + 0x39], bl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4038], dh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2c], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x25], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add cl, al
sub al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ch
add byte es:[rax], al
add byte [rax], al
add byte [rsi], dl
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200002d], ch
add byte [rsi], cl
add bl, al
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200002d], al
add byte [rsi], cl
add byte [rax], ch
add byte ds:[rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x220000
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2e], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx], dh
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0x2e
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
add byte cs:[rax], al
and al, byte [rax]
add byte [rsi + 0x2a], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2f], al
add byte [rax], al
and al, byte [rax]
add bh, al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0x2f
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rsi + 0x40], bl
add byte [rax], al
out 1, eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rax], esi
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rdi + 0x40], cl
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x31
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x33], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x10000001], cl
add byte [rbx], bl
add byte [rax + 0x6066], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
xor dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add bl, ch
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor r8b, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add bl, cl
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
loop 0x407524
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
xor byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
xor eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi + 0x120000], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or esi, dword [rax + rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
xor al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x34], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
sub eax, 0x40
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4026], bl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x35], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
movabs al, byte [0x4013]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000035], ch
add byte [rsi], cl
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rdx], dh
add byte ss:[rax], al
and al, byte [rax]
add byte [rsi + 0x2a], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000036], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add byte ss:[rax], al
and al, byte [rax]
add byte [rdi], cl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x37], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0x37
add byte [rax], al
and al, byte [rax]
add byte [rdx + rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdi + 0x120000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fnstsw dword [rax]
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
cmp byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
cmp byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4024], dl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
cmp dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add al, dh
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rcx], bh
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x3a], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add al, al
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, dl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200003a], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200003a], cl
add byte [rsi], cl
add byte [rcx + rbp + 0x40], dh
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fidivr word [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rsi + rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbx + 0x3b], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
add byte ss:[rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add cl, cl
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rsi + 0x40], bl
add byte [rax], al
out 1, eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add ch, dl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1200003c], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1200003c], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
cmp al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
cmp eax, 0x220000
add al, dl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3d], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + rdi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
cmp eax, 0x220000
add al, dh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte ds:[rax], al
and al, byte [rax]
add byte [rcx + rsi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0xf7000e002200003e], al
xor eax, 0x40
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
adc al, byte [rax]
add byte [rsi + 0x15], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xe], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [r8]
add byte [rdx], dl
add byte [rbx], cl
add al, dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4037], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x3f], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x39], bl
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x407958
je 0x40795c
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40790e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40798c
jb 0x407992
pop rdi
jne 0x40799b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x407995
je 0x407991
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4079b1
jb 0x4079b7
pop rdi
jne 0x4079c0
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x4079c3
jns 0x4079b3
outsb dx, byte gs:[rsi]
je 0x4079ca
jns 0x40795a
jb 0x4079be
insd dword [rdi], dx
pop rdi
jne 0x4079d0
insd dword [rdi], dx
jns 0x407966
pop rdi
pop rdi
jb 0x4079cc
insd dword [rdi], dx
pop rdi
jne 0x4079de
insd dword [rdi], dx
jns 0x4079d3
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4079de
jns 0x4079de
outsb dx, byte gs:[rsi]
je 0x4079f5
jns 0x407985
insd dword [rdi], dx
imul ebp, dword [rsi + 0x2e], 0x707063
pop rdi
pop rdx
push rbx
je 0x4079df
xor dword [rcx], edi
jo 0x407a00
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x407a18
jb 0x407a1b
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x4079fa
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x407a09
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407a28
jb 0x407a33
add byte [rdi + 0x5a], bl
push rbx
je 0x407a1e
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
xor al, 0x31
pop rdi
pop rdi
jae 0x407a56
je 0x407a4e
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x407a5c
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x407a72
jb 0x407a75
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x407a8a
pop rdi
pop r15
outsw dx, word [rsi]
jne 0x407a91
add byte [rdi + 0x5f], bl
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x407acd
jns 0x407acd
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x407ade
jns 0x407ade
jae 0x407af5
jb 0x407af8
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x407ac7
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407afc
push r10
push rbx
je 0x407ad4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407b13
movsxd rbx, dword [rdi + 0x73]
je 0x407b21
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407b1c
je 0x407b31
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x407b04
jb 0x407b3b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407b3f
pop rdi
jb 0x407b42
jb 0x407b46
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x407b5c
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x407b2f
jbe 0x407b60
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x407b3b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407b7a
movsxd rbx, dword [rdi + 0x73]
je 0x407b88
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407b83
je 0x407b98
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3845455f
jo 0x407bae
jo 0x407ba0
movsxd rbp, dword [rbx + 0x45]
jbe 0x407b48
pop rdi
pop rdx
push rbx
je 0x407b84
jbe 0x407bb5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x407b90
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407bcf
movsxd rbx, dword [rdi + 0x73]
je 0x407bdd
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407bd8
je 0x407bed
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x407bcd
xor byte [rdi + 0x5f], bl
je 0x407c08
jb 0x407c11
ja 0x407c03
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x407c12
pop rdi
jb 0x407c20
outsd dx, dword [rsi]
jb 0x407c01
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x407bfd
outsw dx, word [rsi]
jb 0x407c41
jb 0x407c31
push r10
push rbx
je 0x407c0b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407c4a
movsxd rbx, dword [rdi + 0x73]
je 0x407c58
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407c53
je 0x407c68
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x407c3e
jb 0x407c75
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407c79
pop rdi
jb 0x407c7c
jb 0x407c80
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
cmp byte [rdi + 0x45], bl
xor al, 0x74
jns 0x407c97
add byte gs:[r15 + 0x5a], r11b
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x407c77
imul eax, dword [rax + 0x40], 0x42494c47
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x407c77
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407cbb
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407cd4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407cb0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407cef
movsxd rbx, dword [rdi + 0x73]
je 0x407cfd
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407cf8
je 0x407d0d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x407ce2
jbe 0x407d13
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push rbx
je 0x407cf6
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x407d5b
jo 0x407d49
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x407d1f
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x407d38
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407d77
movsxd rbx, dword [rdi + 0x73]
je 0x407d85
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407d80
je 0x407d95
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x407d67
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x407dcc
jo 0x407dba
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x407d91
xor bl, byte [rdi + 0x5f]
jne 0x407dd2
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x407ded
pop rdi
push r11
je 0x407dab
xor ebp, dword [rbp + 0x6f]
jbe 0x407de4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407dc5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407e04
movsxd rbx, dword [rdi + 0x73]
je 0x407e12
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407e0d
je 0x407e22
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push rbx
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x407e26
jbe 0x407e57
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x407e32
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407e71
movsxd rbx, dword [rdi + 0x73]
je 0x407e7f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407e7a
je 0x407e8f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3545455f
movsxd rbp, dword [rbp + 0x61]
jb 0x407e7f
jbe 0x407e3c
pop rdi
pop rdx
push rbx
je 0x407e72
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x407ea8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407eb2
pop rdi
xor byte [rbp + 0x50], al
push rbx
je 0x407e91
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407ed0
movsxd rbx, dword [rdi + 0x73]
je 0x407ede
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407ed9
je 0x407eee
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r8
push rbx
xor eax, 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x407ed9
pop rdi
jae 0x407f1a
jb 0x407f17
jns 0x407ef3
push rax
push rbx
je 0x407ee6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407f25
movsxd rbx, dword [rdi + 0x73]
je 0x407f33
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407f2e
je 0x407f43
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x407f36
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407f50
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x407f59
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407f4d
push rbx
je 0x407f3f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407f7e
movsxd rbx, dword [rdi + 0x73]
je 0x407f8c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407f87
je 0x407f9c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407fb5
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x407fbe
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407fb2
push rbx
je 0x407fa4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407fe3
movsxd rbx, dword [rdi + 0x73]
je 0x407ff1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407fec
je 0x408001
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40800c
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
push rbx
je 0x407ff0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40802f
movsxd rbx, dword [rdi + 0x73]
je 0x40803d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408038
je 0x40804d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x408022
jbe 0x408053
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40807b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40805b
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x4080a5
jb 0x4080a8
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x408071
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4080b0
movsxd rbx, dword [rdi + 0x73]
je 0x4080be
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4080b9
je 0x4080ce
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x4080c7
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4080e6
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4080ff
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4080db
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40811a
movsxd rbx, dword [rdi + 0x73]
je 0x408128
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408123
je 0x408138
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40810d
jbe 0x40813e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
jbe 0x4080ef
pop rdi
pop rdx
push rbx
je 0x408125
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40816f
jb 0x408172
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x40813b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40817a
movsxd rbx, dword [rdi + 0x73]
je 0x408188
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408183
je 0x408198
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x408192
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40817e
xor byte [rdi + 0x49], bl
je 0x4081b7
jb 0x4081b3
jae 0x4081bd
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4081c0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4081d9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4081b5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4081f4
movsxd rbx, dword [rdi + 0x73]
je 0x408202
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4081fd
je 0x408212
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x4081e7
jbe 0x408218
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x408237
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408240
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
push rbx
je 0x408223
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408262
movsxd rbx, dword [rdi + 0x73]
je 0x408270
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40826b
je 0x408280
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x408255
jbe 0x408286
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4082ae
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x408299
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4082d8
movsxd rbx, dword [rdi + 0x73]
je 0x4082e6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4082e1
je 0x4082f6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x408315
jb 0x408318
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40830a
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40832b
jae 0x4082bb
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x408302
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408338
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x40834a
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x40832b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40836a
movsxd rbx, dword [rdi + 0x73]
je 0x408378
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408373
je 0x408388
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r14b, byte [r15]
pop rdi
push rbx
pop rdi
jo 0x40839f
outsd dx, dword [rsi]
jo 0x408391
je 0x408399
pop rdi
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40839c
jae 0x4083b3
imul esp, dword [rdi + 0x6e], 0x5f007645
pop rdx
push rbx
je 0x40837e
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x4083bc
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4083c3
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4083a9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4083e8
movsxd rbx, dword [rdi + 0x73]
je 0x4083f6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4083f1
je 0x408406
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x4083d6
xor ebp, dword [rbp + 0x6f]
jbe 0x40840f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x408400
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40843f
movsxd rbx, dword [rdi + 0x73]
je 0x40844d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408448
je 0x40845d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408437
xor byte [rdi + 0x5f], bl
jne 0x408478
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x408493
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x408494
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x4084a8
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408497
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4084b0
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40848c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4084cb
movsxd rbx, dword [rdi + 0x73]
je 0x4084d9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4084d4
je 0x4084e9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x4084be
jbe 0x4084ef
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push r8
push rbx
cmp dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4084e4
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x4084fd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40853c
movsxd rbx, dword [rdi + 0x73]
je 0x40854a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408545
je 0x40855a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x40852c
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x408591
jo 0x40857f
push r11
cmp byte [rdi], bl
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x40858c
je 0x408591
jb 0x40859a
ja 0x40856d
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4085a2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4085ab
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40859f
push rbx
je 0x408591
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4085d0
movsxd rbx, dword [rdi + 0x73]
je 0x4085de
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4085d9
je 0x4085ee
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4085fa
jno 0x4085e0
push rax
push rbx
je 0x4085d3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408612
movsxd rbx, dword [rdi + 0x73]
je 0x408620
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40861b
je 0x408630
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x408604
xor ebp, dword [rbp + 0x6f]
jbe 0x40863d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x408626
pop rdi
jae 0x408667
jb 0x408664
jns 0x408640
push rax
push rbx
je 0x408633
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408672
movsxd rbx, dword [rdi + 0x73]
je 0x408680
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40867b
je 0x408690
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
xor eax, 0x5476455f
pop rdi
push rbx
pop rdi
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40867d
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40869b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4086dc
push rbx
je 0x4086b3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4086f2
movsxd rbx, dword [rdi + 0x73]
je 0x408700
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4086fb
je 0x408710
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4086f5
jbe 0x408726
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x408701
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408740
movsxd rbx, dword [rdi + 0x73]
je 0x40874e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408749
je 0x40875e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40873e
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x408774
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40877e
xor byte [rbp + 0x4c], al
xor byte [rbp + 0x53], al
je 0x408757
jb 0x408789
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x4087a6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4087a0
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x4087a8
insd dword [rdi], dx
push r8
push rbx
je 0x408787
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4087c6
movsxd rbx, dword [rdi + 0x73]
je 0x4087d4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4087cf
je 0x4087e4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4087ca
movsxd rbp, dword [rdi + 0x70]
jns 0x4087e4
push rax
push rbx
je 0x4087d7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408816
movsxd rbx, dword [rdi + 0x73]
je 0x408824
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40881f
je 0x408834
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x408816
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40884c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x408856
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x50], al
push rbx
je 0x408835
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408874
movsxd rbx, dword [rdi + 0x73]
je 0x408882
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40887d
je 0x408892
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x4088bf
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4088d2
jb 0x4088b8
je 0x408898
xor ebx, dword [rdi + 0x49]
outsd dx, dword [rsi]
jae 0x4088cc
jo 0x4088d5
outsb dx, byte [rsi]
insd dword [rdi], dx
outsd dx, dword [rsi]
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x4088b0
xor ebp, dword [rbp + 0x6f]
jbe 0x4088e9
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4088ca
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408909
movsxd rbx, dword [rdi + 0x73]
je 0x408917
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408912
je 0x408927
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
jae 0x40892e
jbe 0x4088cc
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408935
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40894e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408929
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408968
movsxd rbx, dword [rdi + 0x73]
je 0x408976
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408971
je 0x408986
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40895b
jbe 0x40898c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
xor al, byte [r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x408979
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4089ba
push rbx
je 0x408991
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4089d0
movsxd rbx, dword [rdi + 0x73]
je 0x4089de
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4089d9
je 0x4089ee
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
je 0x4089fa
push rsp
jo 0x4089fd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4089ed
jbe 0x4089aa
pop rdi
pop rdx
push rbx
je 0x4089e6
outsw dx, word [rsi]
jb 0x408a2a
jb 0x408a1a
push rbx
je 0x4089f2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408a31
movsxd rbx, dword [rdi + 0x73]
je 0x408a3f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408a3a
je 0x408a4f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x408a25
jb 0x408a5c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x408a60
pop rdi
jb 0x408a63
jb 0x408a67
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x408a7e
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x408a47
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x408a70
push rbx
push rbx
je 0x408a65
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408aa4
movsxd rbx, dword [rdi + 0x73]
je 0x408ab2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408aad
je 0x408ac2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x408ab4
push rsp
pop rdi
push rdx
push r11
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x408aa7
jbe 0x408ad8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x408ab3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408af2
movsxd rbx, dword [rdi + 0x73]
je 0x408b00
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408afb
je 0x408b10
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3345455f
outsb dx, byte gs:[rsi]
jbe 0x408abb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x408b29
js 0x408b2f
je 0x408b08
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x408b0b
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x408b55
jb 0x408b58
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x408b21
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408b60
movsxd rbx, dword [rdi + 0x73]
je 0x408b6e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408b69
je 0x408b7e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x408b76
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x408b9d
push rax
jbe 0x408b33
pop rdi
pop rdx
push rbx
je 0x408b6c
movsxd rbp, dword [rdi + 0x70]
jns 0x408b86
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408ba4
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408bbd
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408b99
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408bd8
movsxd rbx, dword [rdi + 0x73]
je 0x408be6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408be1
je 0x408bf6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x408bcb
jbe 0x408bfc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push rbx
xor dword [rdi + 0x49], ebx
push rax
push rbx
pop rdi
push rbx
pop r15
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x408bfa
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x408c44
jb 0x408c47
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x408c10
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408c4f
movsxd rbx, dword [rdi + 0x73]
je 0x408c5d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408c58
je 0x408c6d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
push r11
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x408c67
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408c59
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408c98
movsxd rbx, dword [rdi + 0x73]
je 0x408ca6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408ca1
je 0x408cb6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x408c9f
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x408ca7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408ce6
movsxd rbx, dword [rdi + 0x73]
je 0x408cf4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408cef
je 0x408d04
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x408ced
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x408d20
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408d39
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408d14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408d53
movsxd rbx, dword [rdi + 0x73]
je 0x408d61
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408d5c
je 0x408d71
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x408d46
jbe 0x408d77
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
xor al, 0x62
jae 0x408d8d
jbe 0x408d2b
pop rdi
pop rdx
push rbx
je 0x408d67
jbe 0x408d98
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x408d73
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408db2
movsxd rbx, dword [rdi + 0x73]
je 0x408dc0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408dbb
je 0x408dd0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408de2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408deb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408ddf
push rbx
je 0x408dd1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408e10
movsxd rbx, dword [rdi + 0x73]
je 0x408e1e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408e19
je 0x408e2e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408e07
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408e48
push rbx
je 0x408e1f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408e5e
movsxd rbx, dword [rdi + 0x73]
je 0x408e6c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408e67
je 0x408e7c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor ebx, dword [rdi + 0x4d]
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor eax, 0x5f006d5f
pop rdx
push rbx
je 0x408e74
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x408e93
xor byte [rdi + 0x5f], bl
jne 0x408ed4
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x408eef
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x408ef0
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x408f04
push r8
push rbx
je 0x408ec8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408f07
movsxd rbx, dword [rdi + 0x73]
je 0x408f15
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408f10
je 0x408f25
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
push r12
pop r15
jb 0x408f40
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x408f5f
jae 0x408f3e
push rbx
je 0x408f29
xor dword [rbx + 0x68], esp
jb 0x408f5d
je 0x408f72
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x408f3d
xor esp, dword [rdx + 0x61]
jae 0x408f7a
movsxd rbx, dword [rdi + 0x6f]
jae 0x408f8a
jb 0x408f7d
insd dword [rdi], dx
movsxd rdx, dword [r15 + rbx*2 + 0x45]
push rbx
xor eax, 0x634b505f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x408f70
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408faf
movsxd rbx, dword [rdi + 0x73]
je 0x408fbd
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408fb8
je 0x408fcd
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push r11
je 0x408fba
jbe 0x408feb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x408fc6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409005
movsxd rbx, dword [rdi + 0x73]
je 0x409013
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40900e
je 0x409023
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3445455f
jae 0x409033
jp 0x409031
jbe 0x408fcf
pop rdi
pop rdx
push rbx
je 0x409006
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409047
push rbx
je 0x40901e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40905d
movsxd rbx, dword [rdi + 0x73]
je 0x40906b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409066
je 0x40907b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x409032
pop rdi
pop r15
jae 0x4090ac
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x409078
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4090b1
je 0x4090c6
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x409097
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4090d6
movsxd rbx, dword [rdi + 0x73]
je 0x4090e4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4090df
je 0x4090f4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
push rax
push rbx
xor eax, 0x5f006d5f
pop rdx
push r11
je 0x4090e6
jbe 0x409117
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x4090f2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409131
movsxd rbx, dword [rdi + 0x73]
je 0x40913f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40913a
je 0x40914f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3845455f
movsxd rsp, dword [rcx + 0x70]
movsxd rbp, dword [rcx + 0x74]
jns 0x409142
jbe 0x4090ff
pop rdi
pop rdx
push rbx
je 0x40913b
jbe 0x40916c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x409147
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409186
movsxd rbx, dword [rdi + 0x73]
je 0x409194
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40918f
je 0x4091a4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jo 0x4091bd
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4091d5
push r10
push r11
xor eax, 0x4545455f
jbe 0x4091ad
jo 0x4091ba
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4091ab
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4091ea
movsxd rbx, dword [rdi + 0x73]
je 0x4091f8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4091f3
je 0x409208
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push r11
je 0x4091f8
jbe 0x409229
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x409204
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409243
movsxd rbx, dword [rdi + 0x73]
je 0x409251
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40924c
je 0x409261
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3545455f
imul ebp, dword gs:[esi + 0x45], 0x5a5f0076
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409277
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409280
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409274
push rbx
je 0x409266
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4092a5
movsxd rbx, dword [rdi + 0x73]
je 0x4092b3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4092ae
je 0x4092c3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4092da
jb 0x4092dd
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push r10
push r11
pop rdi
jbe 0x4092c9
push rsp
pop rdi
jo 0x4092cd
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4092b9
xor byte [rdi + 0x49], bl
je 0x4092f2
jb 0x4092ee
jae 0x4092f8
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4092fb
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409314
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4092ef
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40932e
movsxd rbx, dword [rdi + 0x73]
je 0x40933c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409337
je 0x40934c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409321
jbe 0x409352
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x409371
push r11
pop r15
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x40937d
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x409392
pop rdi
jae 0x4093a8
jb 0x4093ab
add byte [rdi + 0x5a], bl
push rbx
je 0x40936f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4093b0
push rbx
je 0x409387
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4093c6
movsxd rbx, dword [rdi + 0x73]
je 0x4093d4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4093cf
je 0x4093e4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40939b
pop rdi
pop rdx
push rbx
je 0x4093d8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409417
movsxd rbx, dword [rdi + 0x73]
je 0x409425
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409420
je 0x409435
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40941b
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x409465
jb 0x409468
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x409431
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409470
movsxd rbx, dword [rdi + 0x73]
je 0x40947e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409479
je 0x40948e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r10
push rbx
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x409487
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409478
jbe 0x4094a9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x409484
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4094c3
movsxd rbx, dword [rdi + 0x73]
je 0x4094d1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4094cc
je 0x4094e1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor ah, byte [rbp + 0x6d]
jo 0x4094f7
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rbx
xor eax, 0x4545455f
jbe 0x4094e1
jo 0x4094ee
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x4094df
jbe 0x409510
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x4094eb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40952a
movsxd rbx, dword [rdi + 0x73]
je 0x409538
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409533
je 0x409548
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3845455f
insd dword [rdi], dx
js 0x409550
jae 0x40955c
jp 0x40955a
jbe 0x4094f8
pop rdi
pop rdx
push rbx
je 0x40952f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409570
push rbx
je 0x409547
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409586
movsxd rbx, dword [rdi + 0x73]
je 0x409594
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40958f
je 0x4095a4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
je 0x4095b0
push rsp
jo 0x4095b3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4095a3
jbe 0x409560
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4095c9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4095d2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4095c6
push rbx
je 0x4095b8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4095f7
movsxd rbx, dword [rdi + 0x73]
je 0x409605
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409600
je 0x409615
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4095c1
pop rdi
pop rdx
push rbx
je 0x4095f8
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409631
je 0x409646
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x409617
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409656
movsxd rbx, dword [rdi + 0x73]
je 0x409664
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40965f
je 0x409674
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x409676
jae 0x409682
jp 0x409680
push r10
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40965e
jbe 0x40968f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40966a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4096a9
movsxd rbx, dword [rdi + 0x73]
je 0x4096b7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4096b2
je 0x4096c7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jo 0x4096e0
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4096f8
push rdx
push r11
xor eax, 0x4545455f
jbe 0x4096d0
jo 0x4096dd
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4096c8
xor byte [rdi + 0x49], bl
je 0x409701
jb 0x4096fd
jae 0x409707
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40970a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409723
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4096ff
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40973e
movsxd rbx, dword [rdi + 0x73]
je 0x40974c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409747
je 0x40975c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409731
jbe 0x409762
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x409781
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40978b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4097a4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409780
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4097bf
movsxd rbx, dword [rdi + 0x73]
je 0x4097cd
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4097c8
je 0x4097dd
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x4097b2
jbe 0x4097e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
xor al, 0x62
jae 0x4097f9
jbe 0x409797
imul bp, word [rsi], 0x5a5f
push rbx
push rbx
je 0x4097dc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40981b
movsxd rbx, dword [rdi + 0x73]
je 0x409829
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409824
je 0x409839
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x409818
pop rdi
jae 0x409859
jb 0x409856
jns 0x409832
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409850
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409869
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409844
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409883
movsxd rbx, dword [rdi + 0x73]
je 0x409891
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40988c
je 0x4098a1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409876
jbe 0x4098a7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
jbe 0x4098ab
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409898
jbe 0x4098c9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x4098a4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4098e3
movsxd rbx, dword [rdi + 0x73]
je 0x4098f1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4098ec
je 0x409901
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor ah, byte [rbp + 0x6d]
jo 0x409917
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r11
xor eax, 0x4545455f
jbe 0x409901
jo 0x40990e
push rsp
pop rdi
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409937
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409940
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409934
push rbx
je 0x409926
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409965
movsxd rbx, dword [rdi + 0x73]
je 0x409973
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40996e
je 0x409983
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x409999
jb 0x409996
jns 0x409972
push rbx
pop rdi
jbe 0x409980
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40996c
movsxd rbp, dword [rdi + 0x75]
je 0x40997d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x409981
xor ebp, dword [rbp + 0x6f]
jbe 0x4099ba
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40999b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4099da
movsxd rbx, dword [rdi + 0x73]
je 0x4099e8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4099e3
je 0x4099f8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x53]
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4099d3
xor al, 0x62
jae 0x409a10
movsxd rbx, dword [rdi + 0x69]
jae 0x409a21
jb 0x409a14
insd dword [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409a1b
je 0x409a30
imul esi, dword [rbx + rsi*2 + 0x49], 0x44454563
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x409a14
jbe 0x409a45
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x409a20
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409a5f
movsxd rbx, dword [rdi + 0x73]
je 0x409a6d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409a68
je 0x409a7d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3345455f
outsb dx, byte gs:[rsi]
jbe 0x409a28
pop rdi
pop rdi
jae 0x409a9c
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x409a6c
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x409aa2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409aac
xor byte [rbp + 0x4c], al
xor byte [rbp + 0x53], al
je 0x409a85
jb 0x409ab7
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x409ad4
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409ace
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x409ad6
insd dword [rdi], dx
push r8
push rbx
je 0x409ab6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409af5
movsxd rbx, dword [rdi + 0x73]
je 0x409b03
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409afe
je 0x409b13
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r8
push rbx
cmp byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x409af8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409b39
push rbx
je 0x409b10
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409b4f
movsxd rbx, dword [rdi + 0x73]
je 0x409b5d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409b58
je 0x409b6d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor dword [rdi + 0x4d], ebx
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x409b68
xor al, 0x62
jae 0x409ba5
movsxd rbx, dword [rdi + 0x6f]
jae 0x409bb6
jb 0x409ba9
insd dword [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409bb0
je 0x409bc5
imul esi, dword [rbx + rsi*2 + 0x49], 0x44454563
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x409ba4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409be5
push rbx
je 0x409bbc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409bfb
movsxd rbx, dword [rdi + 0x73]
je 0x409c09
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409c04
je 0x409c19
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x409bd0
pop rdi
pop rdx
push rbx
je 0x409c0c
jbe 0x409c3d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x409c18
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409c57
movsxd rbx, dword [rdi + 0x73]
je 0x409c65
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409c60
je 0x409c75
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3545455f
imul ebp, dword gs:[esi + 0x45], 0x5a5f0076
push rbx
je 0x409c5e
jbe 0x409c8f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x409c6a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409ca9
movsxd rbx, dword [rdi + 0x73]
je 0x409cb7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409cb2
je 0x409cc7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x6945455f
js 0x409cb3
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x409ca7
xor ebp, dword [rbp + 0x6f]
jbe 0x409ce0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409cc1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409d00
movsxd rbx, dword [rdi + 0x73]
je 0x409d0e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409d09
je 0x409d1e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x409d2d
jbe 0x409cc0
pop rdi
pop rdx
push rbx
je 0x409cf6
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x409d2c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409d36
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x409d40
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409d59
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409d35
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409d74
movsxd rbx, dword [rdi + 0x73]
je 0x409d82
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409d7d
je 0x409d92
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409d67
jbe 0x409d98
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push rbx
xor dword [rdi + 0x49], ebx
push rax
push rbx
pop rdi
push rbx
pop r15
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop rdi
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x409d9d
jbe 0x409dce
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x409da9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409de8
movsxd rbx, dword [rdi + 0x73]
je 0x409df6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409df1
je 0x409e06
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor eax, 0x655f4d5f
jb 0x409e13
jae 0x409e19
pop rdi
je 0x409e17
outsb dx, byte gs:[rsi]
push r8
push rbx
xor eax, 0x5a5f005f
push r11
je 0x409df9
xor ebp, dword [rbp + 0x6f]
jbe 0x409e32
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409e13
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409e52
movsxd rbx, dword [rdi + 0x73]
je 0x409e60
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409e5b
je 0x409e70
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x409e12
pop rdi
pop rdx
push rbx
je 0x409e49
xor bl, byte [rdi + 0x5f]
jne 0x409e8a
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409ea5
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409e96
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409eaf
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409e8b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409eca
movsxd rbx, dword [rdi + 0x73]
je 0x409ed8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409ed3
je 0x409ee8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409ebd
jbe 0x409eee
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r8
push rbx
pop rdi
push rbx
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
push rdx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x409ef5
imul ebp, dword [rdi + 0x73], 0x7361625f
cmp dword gs:[rax + 0x72], esi
movsxd rbp, dword gs:[rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x5f006c45
pop rdx
push rbx
je 0x409f09
xor ebp, dword [rbp + 0x6f]
jbe 0x409f42
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409f23
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409f62
movsxd rbx, dword [rdi + 0x73]
je 0x409f70
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409f6b
je 0x409f80
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x53], eax
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409f5b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409f94
je 0x409fa9
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x409f7a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409fb9
movsxd rbx, dword [rdi + 0x73]
je 0x409fc7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409fc2
je 0x409fd7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x409fef
jb 0x409ff2
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor eax, 0x3553495f
pop rdi
jbe 0x409fde
push rbx
pop rdi
push rax
push rsp
pop rdi
jo 0x409fe4
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409fd5
jbe 0x40a006
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x409fe1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a020
movsxd rbx, dword [rdi + 0x73]
je 0x40a02e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a029
je 0x40a03e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3245455f
xor byte [rdi + 0x4d], bl
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40a042
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a060
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a079
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor eax, 0x5f37535f
push r8
push rbx
xor eax, 0x5f546d5f
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a066
xor bl, byte [rdi + 0x5f]
jne 0x40a0a7
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40a0c2
pop rdi
push r8
push rbx
je 0x40a088
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a0c7
movsxd rbx, dword [rdi + 0x73]
je 0x40a0d5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a0d0
je 0x40a0e5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push rbx
xor eax, 0x3054455f
pop rdi
push rsp
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
push rdx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40a0d3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a114
push rbx
je 0x40a0eb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a12a
movsxd rbx, dword [rdi + 0x73]
je 0x40a138
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a133
je 0x40a148
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40a0ff
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a168
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a181
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a15d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a19c
movsxd rbx, dword [rdi + 0x73]
je 0x40a1aa
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a1a5
je 0x40a1ba
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a18f
jbe 0x40a1c0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
xor al, byte [r13 + 0x52]
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a1ab
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a1ef
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a208
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a1e4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a223
movsxd rbx, dword [rdi + 0x73]
je 0x40a231
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a22c
je 0x40a241
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a216
jbe 0x40a247
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push rbx
je 0x40a22a
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a28f
jo 0x40a27d
push r11
pop rdi
add byte [rdi + 0x5f], bl
jae 0x40a295
pop rdi
jae 0x40a299
jb 0x40a29c
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a292
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a2ab
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a287
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a2c6
movsxd rbx, dword [rdi + 0x73]
je 0x40a2d4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a2cf
je 0x40a2e4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a2b9
jbe 0x40a2ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
jo 0x40a308
jbe 0x40a29b
pop rdi
pop rdx
push rbx
je 0x40a2d7
jbe 0x40a308
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40a2e3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a322
movsxd rbx, dword [rdi + 0x73]
je 0x40a330
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a32b
je 0x40a340
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a31f
xor dword [rdi + 0x5f], ebx
jb 0x40a35b
jae 0x40a36b
outsd dx, dword [rsi]
push rbx
je 0x40a336
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a375
movsxd rbx, dword [rdi + 0x73]
je 0x40a383
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a37e
je 0x40a393
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r8
push rsp
pop rdi
push rdx
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a36e
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40a3c9
push r11
je 0x40a385
xor ebp, dword [rbp + 0x6f]
jbe 0x40a3be
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a39f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a3de
movsxd rbx, dword [rdi + 0x73]
je 0x40a3ec
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a3e7
je 0x40a3fc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdi
jae 0x40a421
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40a3fb
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40a445
jb 0x40a448
movsxd rsi, dword [rcx + rcx*2 + 0x4e]
push rbx
je 0x40a411
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a450
movsxd rbx, dword [rdi + 0x73]
je 0x40a45e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a459
je 0x40a46e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
xor eax, 0x7645455f
push rax
push rsp
pop rdi
jo 0x40a466
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a457
jbe 0x40a488
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40a463
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a4a2
movsxd rbx, dword [rdi + 0x73]
je 0x40a4b0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a4ab
je 0x40a4c0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3945455f
jo 0x40a4dc
jae 0x40a4d1
pop rdi
movsxd rbp, dword [rbx + 0x45]
push r11
xor eax, 0x5a5f005f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a4dd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a4e6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a4da
push rbx
je 0x40a4cc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a50b
movsxd rbx, dword [rdi + 0x73]
je 0x40a519
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a514
je 0x40a529
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40a540
jb 0x40a543
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push r11
pop rdi
jbe 0x40a52d
push rsp
pop rdi
jo 0x40a531
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a51d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a556
je 0x40a56b
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x40a53c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a57b
movsxd rbx, dword [rdi + 0x73]
je 0x40a589
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a584
je 0x40a599
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40a583
jbe 0x40a5b4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40a58f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a5ce
movsxd rbx, dword [rdi + 0x73]
je 0x40a5dc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a5d7
je 0x40a5ec
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3945455f
jo 0x40a608
jae 0x40a5fd
pop rdi
movsxd rbp, dword [rbx + 0x45]
push rdx
push r11
xor eax, 0x5a5f005f
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40a5f7
jbe 0x40a628
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40a603
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a642
movsxd rbx, dword [rdi + 0x73]
je 0x40a650
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a64b
je 0x40a660
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x6145455f
push rbx
push r10
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a644
xor byte [rdi + 0x49], bl
je 0x40a67d
jb 0x40a679
jae 0x40a683
push r8
push rbx
je 0x40a65b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a69a
movsxd rbx, dword [rdi + 0x73]
je 0x40a6a8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a6a3
je 0x40a6b8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40a6c6
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a6d0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a6e9
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a6c4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a703
movsxd rbx, dword [rdi + 0x73]
je 0x40a711
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a70c
je 0x40a721
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a6f6
jbe 0x40a727
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
jbe 0x40a6d8
pop rdi
pop rdx
push rbx
je 0x40a74b
push r8
push rbx
je 0x40a71b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a75a
movsxd rbx, dword [rdi + 0x73]
je 0x40a768
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a763
je 0x40a778
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x40a74c
xor ebp, dword [rbp + 0x6f]
jbe 0x40a785
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a768
xor bl, byte [rdi + 0x44]
jae 0x40a7b1
jb 0x40a7ae
jns 0x40a7a0
jne 0x40a7bc
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x40a7c5
jb 0x40a7c2
jns 0x40a79e
push rax
push rbx
je 0x40a791
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a7d0
movsxd rbx, dword [rdi + 0x73]
je 0x40a7de
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a7d9
je 0x40a7ee
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x40a7e2
pop rdi
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40a7e2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a81b
je 0x40a830
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x40a801
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a840
movsxd rbx, dword [rdi + 0x73]
je 0x40a84e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a849
je 0x40a85e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40a876
jb 0x40a879
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor eax, 0x4b524a5f
push rbx
xor eax, 0x4545455f
jbe 0x40a867
push rbx
pop rdi
push rax
push rsp
pop rdi
jo 0x40a86d
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a85f
pop rdi
jae 0x40a8a0
jb 0x40a89d
jns 0x40a879
push rbx
je 0x40a86b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a8aa
movsxd rbx, dword [rdi + 0x73]
je 0x40a8b8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a8b3
je 0x40a8c8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x40a8b7
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
push rbx
je 0x40a8ab
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a8ea
movsxd rbx, dword [rdi + 0x73]
je 0x40a8f8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a8f3
je 0x40a908
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x40a8e8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a927
movsxd rbx, dword [rdi + 0x73]
je 0x40a935
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a930
je 0x40a945
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a934
jbe 0x40a965
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40a940
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a97f
movsxd rbx, dword [rdi + 0x73]
je 0x40a98d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a988
je 0x40a99d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jo 0x40a9b6
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40a9ce
push rbx
xor eax, 0x4545455f
jbe 0x40a9a4
jo 0x40a9b1
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a9ce
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a9e7
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a9c2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40aa01
movsxd rbx, dword [rdi + 0x73]
je 0x40aa0f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40aa0a
je 0x40aa1f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a9f4
jbe 0x40aa25
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
jo 0x40aa43
jbe 0x40a9d6
pop rdi
pop rdx
push rbx
je 0x40aa0e
insd dword [rdi], dx
js 0x40aa28
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40aa23
xor al, 0x62
jae 0x40aa60
movsxd rbx, dword [rdi + 0x69]
jae 0x40aa71
jb 0x40aa64
insd dword [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40aa6b
je 0x40aa80
imul esi, dword [rbx + rsi*2 + 0x49], 0x43454563
xor dword [rbp + 0x50], eax
movsxd rdx, dword [r11 + 0x74]
xor dword [rbx], esi
pop rdi
outsd dx, dword [rsi]
jae 0x40aa84
jo 0x40aa8d
outsb dx, byte [rsi]
insd dword [rdi], dx
outsd dx, dword [rsi]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40aa72
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40aaab
je 0x40aac0
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x40aa91
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40aad0
movsxd rbx, dword [rdi + 0x73]
je 0x40aade
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40aad9
je 0x40aaee
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40ab06
jb 0x40ab09
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor eax, 0x35534a5f
pop rdi
jbe 0x40aaf5
push rbx
pop rdi
push rax
push rsp
pop rdi
jo 0x40aafb
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x40aafd
push rax
push rdx
push rbx
outsd dx, dword [rsi]
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40ab04
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40ab3a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40ab44
pop rdi
xor byte [rbp + 0x50], al
push rbx
je 0x40ab22
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ab61
movsxd rbx, dword [rdi + 0x73]
je 0x40ab6f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ab6a
je 0x40ab7f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40ab62
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40abbd
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40abac
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40abc5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40aba1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40abe0
movsxd rbx, dword [rdi + 0x73]
je 0x40abee
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40abe9
je 0x40abfe
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40abd3
jbe 0x40ac04
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r8
push rbx
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40abff
pop rdi
jae 0x40ac40
jb 0x40ac3d
jns 0x40ac19
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ac37
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ac50
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ac2b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ac6a
movsxd rbx, dword [rdi + 0x73]
je 0x40ac78
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ac73
je 0x40ac88
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40ac5d
jbe 0x40ac8e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r11
pop rdi
jbe 0x40ac95
pop rdi
push rbx
pop rdi
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40ac8b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40acca
movsxd rbx, dword [rdi + 0x73]
je 0x40acd8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40acd3
je 0x40ace8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40acd3
xor al, 0x62
jae 0x40ad10
movsxd rbx, dword [rdi + 0x6f]
jae 0x40ad21
jb 0x40ad14
insd dword [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ad1b
je 0x40ad30
imul esi, dword [rbx + rsi*2 + 0x49], 0x43454563
xor dword [rbp + 0x50], eax
movsxd rdx, dword [r11 + 0x74]
xor dword [rbx], esi
pop rdi
outsd dx, dword [rsi]
jae 0x40ad34
jo 0x40ad3d
outsb dx, byte [rsi]
insd dword [rdi], dx
outsd dx, dword [rsi]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40ad3d
pop rdi
pop rdi
je 0x40ad79
jb 0x40ad82
ja 0x40ad74
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40ad97
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ada0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ad94
push rbx
je 0x40ad86
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40adc5
movsxd rbx, dword [rdi + 0x73]
je 0x40add3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40adce
je 0x40ade3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x40ade4
jae 0x40adf0
jp 0x40adee
jbe 0x40ad8c
pop rdi
pop rdx
push rbx
je 0x40adff
push rbx
je 0x40adce
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ae0d
movsxd rbx, dword [rdi + 0x73]
je 0x40ae1b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ae16
je 0x40ae2b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
push r12
pop rdi
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ae3e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x40ae50
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x40ae31
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ae70
movsxd rbx, dword [rdi + 0x73]
je 0x40ae7e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ae79
je 0x40ae8e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rip + 0x615f535f], r14d
insb byte [rdi], dx
ja 0x40ae96
jns 0x40aeaa
pop rdi
jno 0x40aeb0
insb byte [rdi], dx
jbe 0x40ae40
pop rdi
pop rdx
push rbx
je 0x40ae79
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40aeb3
je 0x40aec8
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x40ae93
xor esp, dword [rdx + 0x61]
jae 0x40aed0
movsxd rbx, dword [rdi + 0x6f]
jae 0x40aee0
jb 0x40aed3
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40aec0
xor byte [rdi + 0x5f], bl
jne 0x40af01
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40af1c
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40af1d
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40af31
push r11
je 0x40aeed
xor ebp, dword [rbp + 0x6f]
jbe 0x40af26
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40af07
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40af46
movsxd rbx, dword [rdi + 0x73]
je 0x40af54
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40af4f
je 0x40af64
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40af49
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40af82
je 0x40af97
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x40af68
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40afa7
movsxd rbx, dword [rdi + 0x73]
je 0x40afb5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40afb0
je 0x40afc5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40afdd
jb 0x40afe0
movsxd rsi, dword [rcx + rcx*2 + 0x53]
xor eax, 0x4b52495f
push rbx
xor eax, 0x4545455f
jbe 0x40afce
push rbx
pop rdi
push rax
push rsp
pop rdi
jo 0x40afd4
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40afdf
xor al, 0x5f
pop rdi
jne 0x40b01f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x40b026
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40b02d
push r8
push rbx
je 0x40b00c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b04b
movsxd rbx, dword [rdi + 0x73]
je 0x40b059
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b054
je 0x40b069
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push rbx
push r11
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp dword [rdi + 0x53], ebx
cmp byte [rdi + 0x52], bl
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40b05d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b09c
movsxd rbx, dword [rdi + 0x73]
je 0x40b0aa
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b0a5
je 0x40b0ba
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b0d7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b0e0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b0d4
push rbx
je 0x40b0c6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b105
movsxd rbx, dword [rdi + 0x73]
je 0x40b113
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b10e
je 0x40b123
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40b0fb
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b13f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b158
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b133
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b172
movsxd rbx, dword [rdi + 0x73]
je 0x40b180
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b17b
je 0x40b190
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b165
jbe 0x40b196
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push rbx
je 0x40b179
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40b1de
jo 0x40b1cc
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40b1a9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b1e8
movsxd rbx, dword [rdi + 0x73]
je 0x40b1f6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b1f1
je 0x40b206
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x40b224
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40b238
pop rdi
add byte [rdi + 0x5f], bl
js 0x40b264
pop rdi
jo 0x40b254
jb 0x40b264
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40b23f
xor bl, byte [rdi + 0x44]
jae 0x40b288
jb 0x40b285
jns 0x40b277
jne 0x40b293
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x40b29c
jb 0x40b299
jns 0x40b275
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b293
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b2ac
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b287
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b2c6
movsxd rbx, dword [rdi + 0x73]
je 0x40b2d4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b2cf
je 0x40b2e4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b2b9
jbe 0x40b2ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
jbe 0x40b2ef
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b2d7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b318
push rbx
je 0x40b2ef
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b32e
movsxd rbx, dword [rdi + 0x73]
je 0x40b33c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b337
je 0x40b34c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40b366
jae 0x40b345
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b365
je 0x40b37a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x40b34a
xor esp, dword [rdx + 0x61]
jae 0x40b387
movsxd rbx, dword [rdi + 0x6f]
jae 0x40b397
jb 0x40b38a
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rdx
push rbx
je 0x40b36e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b3ad
movsxd rbx, dword [rdi + 0x73]
je 0x40b3bb
imul ebp, dword [rsi + 0x67], 0x5f345349
push rbx
xor eax, 0x5f31545f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b3a0
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b3e1
push rbx
je 0x40b3b8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b3f7
movsxd rbx, dword [rdi + 0x73]
je 0x40b405
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b400
je 0x40b415
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4345455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b427
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b440
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b41b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b45a
movsxd rbx, dword [rdi + 0x73]
je 0x40b468
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b463
je 0x40b478
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b44d
jbe 0x40b47e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
xor dword [r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b49c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b4b5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b491
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b4d0
movsxd rbx, dword [rdi + 0x73]
je 0x40b4de
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b4d9
je 0x40b4ee
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b4c3
jbe 0x40b4f4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
xor dword [r13 + 0x52], eax
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b4e5
jbe 0x40b516
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40b4f1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b530
movsxd rbx, dword [rdi + 0x73]
je 0x40b53e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b539
je 0x40b54e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jo 0x40b567
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40b57f
push r11
xor eax, 0x4545455f
jbe 0x40b555
jo 0x40b562
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b54d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b586
je 0x40b59b
imul esi, dword [rbx + rsi*2 + 0x49], 0x4e496153
push rbx
je 0x40b56c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b5ab
movsxd rbx, dword [rdi + 0x73]
je 0x40b5b9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b5b4
je 0x40b5c9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x40b5e0
jb 0x40b5dd
jns 0x40b5b9
push rbx
xor eax, 0x7645455f
push rdx
push rbx
pop rdi
push rax
push rsp
pop rdi
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x40b5f0
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40b5ff
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40b612
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40b5e6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b625
movsxd rbx, dword [rdi + 0x73]
je 0x40b633
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b62e
je 0x40b643
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b62a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b66b
push rbx
je 0x40b642
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b681
movsxd rbx, dword [rdi + 0x73]
je 0x40b68f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b68a
je 0x40b69f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b684
outsw dx, word [rsi]
jb 0x40b6c8
jb 0x40b6b8
push r10
push rbx
je 0x40b691
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b6d0
movsxd rbx, dword [rdi + 0x73]
je 0x40b6de
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b6d9
je 0x40b6ee
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x40b6c4
jb 0x40b6fb
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b6ff
pop rdi
jb 0x40b702
jb 0x40b706
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x40b71d
add byte gs:[r15 + 0x5a], r11b
push r11
je 0x40b6ed
jbe 0x40b71e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40b6f9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b738
movsxd rbx, dword [rdi + 0x73]
je 0x40b746
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b741
je 0x40b756
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
xor bl, byte [rdi + 0x4d]
pop rdi
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b777
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b780
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b774
push rbx
je 0x40b766
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b7a5
movsxd rbx, dword [rdi + 0x73]
je 0x40b7b3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b7ae
je 0x40b7c3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40b7da
jb 0x40b7dd
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push rdx
push r11
pop rdi
jbe 0x40b7c9
push rsp
pop rdi
jo 0x40b7cd
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b7b8
cmp byte [rdi + 0x5f], bl
outsd dx, dword fs:[rsi]
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40b7e4
push rbx
push rbx
je 0x40b7d9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b818
movsxd rbx, dword [rdi + 0x73]
je 0x40b826
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b821
je 0x40b836
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x40b828
push rsp
pop rdi
push rdx
push r11
pop rdi
push rbx
je 0x40b811
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40b863
outsb dx, byte [rsi]
je 0x40b83c
xor byte [rbp + 0x45], al
add byte [rbp + 0x61], ch
imul ebp, dword [rsi], 0x74535a5f
xor dword [rax], edi
jne 0x40b875
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40b890
push r8
push rbx
je 0x40b854
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b893
movsxd rbx, dword [rdi + 0x73]
je 0x40b8a1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b89c
je 0x40b8b1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b89a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b8d9
movsxd rbx, dword [rdi + 0x73]
je 0x40b8e7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b8e2
je 0x40b8f7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b912
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b91b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b90f
push rbx
je 0x40b901
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b940
movsxd rbx, dword [rdi + 0x73]
je 0x40b94e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b949
je 0x40b95e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40b975
jb 0x40b978
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push rbx
pop rdi
jbe 0x40b962
push rsp
pop rdi
jo 0x40b966
push rsp
xor byte [rdi], bl
add byte [rsi], ch
jae 0x40b998
insd dword [rdi], dx
je 0x40b983
add byte [rsi], ch
jae 0x40b99b
jb 0x40b99d
add byte [rsi], ch
jae 0x40b997
jae 0x40b9a5
jb 0x40b9a7
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40b9a8
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40b9b6
outsb dx, byte cs:[esi]
jne 0x40b984
jne 0x40b9c2
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40b992
push 0x687361
jns 0x40b9db
jae 0x40b9e8
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40b9e3
jae 0x40b9eb
jb 0x40b979
outsb dx, byte cs:[esi]
jne 0x40b9ac
jbe 0x40b9e5
jb 0x40b9f5
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40b9b9
jbe 0x40b9f2
jb 0x40ba02
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40b9fd
insb byte [rdi], dx
jns 0x40ba0c
add byte [rsi], ch
jb 0x40ba07
insb byte [rdi], dx
jo 0x40ba13
je 0x40b9a9
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40b9e2
outsd dx, dword [esi]
je 0x40b9b8
je 0x40ba20
js 0x40ba31
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40ba36
je 0x40ba2c
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40ba4f
jo 0x40ba63
pop rdi
je 0x40ba53
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40ba61
jns 0x40ba02
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40ba7d
jns 0x40ba0e
push 0x63
jb 0x40ba13
jns 0x40ba85
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40ba8f
je 0x40ba25
je 0x40ba8b
add byte [rsi], ch
jae 0x40baa2
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40ba39
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rdx]
add byte [rax], al
add byte [rax], al
add al, bl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40bbd8
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x40], bh
add byte [rax], al
cmp al, 0xd
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400d], bl
add byte [rax], al
add byte [rax + 0xd], bl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], bl
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x40bce5
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
rcl byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
lock adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 2], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x14], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x14], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x14], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x14], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
shr byte [rip], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax*2], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax*2], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x40be62
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx + 0x40], 0
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4046], bl
add byte [rax], al
add byte [rax + 0x46], bl
add byte [rax], al
add byte [rax + rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
push rsi
add byte [rax], al
add byte [rax], al
add ah, bh
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
pop rbp
add byte [rax], al
add byte [rax], al
add al, ch
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x61], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x61], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x61], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rip], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x61], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb edi, dword [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x61], cl
add byte [rax], al
add byte [rax + 0x17], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
js 0x40c21b
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
