call 0x401220
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401038
add ebx, ebx
je 0x400fee
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401026
cmp rbp, -4
ja 0x401026
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x40100e
add ecx, 4
mov dl, byte [rax]
je 0x401036
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401026
ret
cld
pop r11
cmp r8b, 2
je 0x40104e
jmp 0x4010cb
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40105e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401046
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401076
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401063
sub eax, 3
jb 0x401094
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x4010cb
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x4010bb
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x4010b9
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x4010a8
cmp rbp, -0xd00
adc ecx, eax
call 0x400ffa
jmp 0x40104e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x4011a4
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401142
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40118e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401161
push 0x3a707474
jne 0x4011ba
js 0x40117a
jae 0x4011b4
outsb dx, byte cs:[rsi]
je 0x401173
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4011e1
jb 0x4011d3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4011fe
jb 0x401211
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211eac
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211eac
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x4010dc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401207
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x4011b5
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f12af
jb 0x4012c7
movsxd rbp, dword [rdi]
jae 0x4012c1
insb byte [rdi], dx
js 0x4012c7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x4012a7
cmp rsi, rcx
jae 0x4012af
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40128e
cmp al, 0x8f
ja 0x40128e
cmp byte [rsi - 2], 0xf
je 0x401294
sub al, 0xe8
jg 0x401291
push rdi
cmp al, 1
ja 0x40127c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40127f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x4012ac
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401303
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1781
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401347
mov al, 0xa
jmp 0x401347
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401323
inc ebx
mov al, 0
jmp 0x40134b
mov al, 2
jmp 0x40134b
mov al, 3
jmp 0x40134b
mov al, 0x3c
jmp 0x40134b
push rcx
rcr ah, 1
fstp st(7)
jle 0x40138c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x40139e
jg 0x401390
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6b13
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4013ea
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6567
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4013f2
cmp esi, 0x21585055
jne 0x4013f6
jge 0x4013e8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4013eb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4013ef
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40149b
pop rcx
or al, 0x3b
jb 0x4014a1
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401413
jmp 0x401415
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661356
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5359e
in eax, dx
jg 0x40144d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401493
mov bh, 0x2a
add edi, 0x10
jmp 0x401490
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4014cd
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401509
jne 0x401520
fstpnce st(6), st(0)
jle 0x4014e9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40151f
jrcxz 0x401553
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b4b7
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4015d2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401592
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295b67
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401605
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40159f
and ecx, 7
or al, 0xeb
jae 0x40160a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40163f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40167d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401636
push rax
call 0xffffffff868d1323
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401640
std
cmp edi, esi
xchg eax, edi
jle 0x401695
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95c21
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401693
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401681
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x4016aa
js 0x4016ea
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40177c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad29b7
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40179d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4017a2
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21254
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401730
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
adc al, 2
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add dword [rdx], eax
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x15e8ff04], al
add byte [rax], al
int1
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401856
je 0x40185f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401828
mov dh, 0x7d
jbe 0x401827
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401860
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x5200006], bl
add byte [rsi], ah
enter -0x6fd9, 0xf
or byte [rax], al
pop rax
or dword [rax], eax
or byte [rax], cl
insd dword [rdi], dx
adc ecx, eax
or al, byte [rax]
cmp byte [rbx], cl
add al, 0xa
mov al, 0x72
or byte [rdi + 0xd170c], 0x13
enter -0x37f9, 0x60
or ecx, dword [rsi]
add byte [rax + 0xf], dh
or esp, esp
add esp, esp
add byte [rcx + rbx], ah
adc byte [rax], al
xor byte [rcx], cl
in al, 9
in al, 0x11
add byte [rax + 0x12], bh
add al, al
cmp ah, 1
adc eax, dword [rax]
sbb r10, qword [rax + rax]
call 0x3e80789d
cmp dword [rdx + 0x16f800], 0x9b641e00
add byte [rax], cl
sbb byte [rdi + 0x1f], al
rcl byte ds:[rsi + 0x17201903], 0x1a
add byte [rax + 0x409e409b], dh
sbb eax, dword [rax]
rcr byte [rbx + rdx], 0x1d
leave
mov ebx, 0x4170129
add cl, dh
dec dword [rbx + rbx*4]
xchg byte [rbx], ch
mov ebx, dword [rbx]
mov edi, 0x50029719
or al, 0x48
cdq
mov al, 0x40
sbb edx, dword [rax + 0x641921b1]
rol byte cs:[rdi + rbx*2 - 0x78], 1
or al, 0x76
sbb eax, dword [rax]
fsub dword [rcx]
add dword [rdi], edx
push rbx
and dword [rcx], ebx
in al, dx
jp 0x401925
test byte [rbp + 9], bl
xchg eax, ecx
xchg byte [rdi - 0x637c285b], dl
sbb eax, 0xb47ab36
mov edi, 0x20ce7094
fstp dword [rdi]
pop rsp
enter 0x338e, -0x32
sbb rbx, rsp
test byte ss:[rip + 0x47003721], cl
call 0x2bf12211
and ebx, dword [rdi + 0x36f747fb]
and eax, 0x98115d8c
adc al, 0x1f
and dl, byte [rdi]
xor bl, dh
sub dword [rcx + 7], esp
xor eax, 0x776f4701
add bl, al
mov ebp, 0x3f5a02c0
add dword ds:[rbp - 0x7347be67], ecx
sbb byte [rax], cl
push rsp
f2xm1
scasb al, byte [rdi]
lodsb al, byte [rsi]
in eax, dx
add byte [rax + 0x17], ch
and byte [r9], r11b
leave
and byte [rdi], al
cmp eax, dword [rdx]
add cl, byte [rbx*2 + 0x2ad839d9]
ja 0x4019ca
add dword [rax], eax
xchg eax, ebx
adc byte [rsi], dh
test byte [rdi], dl
wait
ja 0x40190c
mov ebx, 0x724322b2
leave
enter 0x6c21, 8
jrcxz 0x401983
or byte [rdx], al
or dword [rcx], 0x17
movabs al, byte [0x202f66df590dd200]
or dword [rip + 0x1182cd58], 0xffffffaf
add al, 0x5f
xchg eax, ecx
xor byte [rbp + rcx - 0x41b85bdf], al
insb byte [rdi], dx
fild word [rax]
rol bh, cl
adc bl, cl
pop rdi
add dl, byte [rdi]
rol byte [rbx + 0x32], 0xc8
nop
xlatb
mov eax, 0x393b06e4
or byte [rdi + 0x5f6518b0], ch
hlt
add eax, 0x4f758076
add esp, dword [rdi - 0x27bcca27]
sbb al, 0x17
xor al, 0x22
pop rdi
and byte [rip + 0x3c9e4f21], cl
or ebx, dword [rip + 0x4321e001]
fcom dword [rax]
jb 0x401a12
movsxd rdx, dword [rdi]
mov dword [rcx], ebp
stc
and dword [rdi - 0x6fe540fd], esp
or dword [rcx - 0x50], edi
scasb al, byte [rdi]
adc byte [r11], r9b
iretd
or byte [rcx], bl
ret 0xe286
cli
adc byte [rsi], ch
xor dword [rbx - 0x46], 0
mov edi, 0x95ec677b
out dx, al
or eax, 0x16ff4704
outsd dx, dword [rsi]
or esi, eax
jb 0x401a74
jae 0x401a7e
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
mov bh, 0xf6
outsd dx, dword [rsi]
dec dword [rdx + 0x43]
push rdx
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x401a80
imul ebx, dword [edx], 0xb7745f06
mov bh, 0x77
ljmp [rbp + 0x5f]
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401a4f
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 - 0x14], esi
outsd dx, dword [rsi]
mov edi, 0x5f7372fd
jne 0x401abb
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401ab4
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x16243538
jg 0x401a4f
or ebx, dword [rdi + 0x66]
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x401abf
in eax, dx
fdiv qword [rdi + 0x7972e35b]
mov ecx, 0x20656d0a
jne 0x401adc
insd dword [rdi], dx
jns 0x401aa4
wait
mov al, 0x6e
ror byte [rip + 0x2a74295f], 0x63
pushfq
jbe 0x401af2
jo 0x401aa8
sub r14, qword [rbx + 0x30]
pop rdi
movabs r13, 0x1327616d5fed6fdb
pop rdx
push rbx
je 0x401ae8
cmp byte [rdx], dl
imul ebp, dword [rdi + 0x34], 0xdff73361
push rdx
pop r15
ret 0xbcf
xchg eax, ebx
cmp eax, 0x4e47f2d8
push rbp
and byte [rax + 0x44], cl
push rdx
in al, dx
std
test byte [rsi + 0x46], 0x53
push rsp
sub byte [r14 + 0x64], r15b
fdiv qword [rbp + 0xf10c2c2]
pop cx
jg 0x401a99
sbb eax, 0x7e4349bb
xor esp, dword [rbx + 0x1f]
pop r8
pop rax
pop rdi
mov al, 0xc2
insd dword [rdi], dx
movabs eax, dword [0x130e736dc800ba33]
push rsi
clc
jnp 0x401b5f
xor ch, byte [rsi]
add dword [rsp + rbp*2], edx
imul esp, dword [rdx + 0x63], 0x8566bb47
pop rbp
test byte [rcx], cl
packuswb mm5, qword [rbp + 0x52]
or bh, bh
sahf
jbe 0x401b7b
push rdx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x401b96
insb byte [rdi], dx
pop rdx
mov ebx, 0x64f616dd
insb byte [rdi], dx
push rax
jbe 0x401b88
sub dh, byte [rax + 0x72]
je 0x401b9a
mov dil, 0x3f
pop rbx
jbe 0x401ba2
imul esp, dword [rax + 0x19], 0x63
js 0x401ba1
pop rdi
jb 0x401bba
push -0x197a4a8e
fisubr dword [rdi + 0x77]
sbb dh, byte [rax]
iretd
and al, 0x31
sbb ecx, dword [rdx]
test edx, eax
movsq qword [rdi], qword ptr [rsi]
cmp byte [rcx], ah
xchg dword [rcx - 0x22226b4f], edx
push rdi
xor al, 0x49
int 0x43
xor dword [rbp + 0x58], eax
lahf
mov esi, 0x8f661d91
pop rdx
mov esi, 0xb2b9615d
xchg eax, ecx
fstp qword [rbp + 0x5dd86978]
fcom dword [rsi + 0x54492bf1]
pop r15
push rcx
or al, 0x43
pop rbx
xlatb
xor eax, 0x61544ffe
sbb ecx, dword ss:[rdi + 0x76]
jno 0x401bf5
or ebx, ecx
mov ah, 0x75
outsb dx, byte [rsi]
jae 0x401c02
outsb dx, byte [rsi]
cmp eax, 0xd816d6c2
cmp edx, dword [rbx + rdx*4 + 0x61]
xchg eax, ebp
sbb esp, dword [rdi]
rcr dword [rip + 0x64ee1b5f], 0x73
test byte [rax + 0x60], ch
sub al, 0xe1
insd dword [rdi], dx
and eax, 0x5d87257b
mov dl, 0xc2
xor al, 7
movsxd rbp, dword [rbx + 0x4f]
or bl, byte [rax - 0x25cb930a]
imul edi, ebp, 0xbe37b216
push r10
imul ecx, ebp, 0x6f533617
insb byte [rdi], dx
jbe 0x401c04
adc ebx, edx
mov ebx, 0x673358c
in eax, dx
and dword cs:[rsp + rsi*4], esp
nop
jg 0x401c19
xor eax, 0x31768443
and dword [rcx + 0x297d2325], ebx
sub ebx, dword [rax]
ret 0x8063
fiadd word ds:[rcx]
in eax, 0x6e
call 0xffffffffdb11944f
xchg eax, esi
jo 0x401c97
ja 0x401c8f
retf -0x137a
and dword [rbx + 0x6b307690], edi
outsb dx, byte [rsi]
ja 0x401c9b
pop rax
push rbp
imul esi, dword [rdi + rax*8], -0x2a
adc dl, byte [rbx + 0x64]
pop rsi
lcall [rcx - 0x5c581be5]
xchg eax, ebp
and dword [rbp + 0x79706330], 0xbb07d2ca
xor eax, esi
xor dword [rax], esi
pop rdi
ja 0x401cc9
push rsi
fcmovu st(0), st(2)
je 0x401ca1
js 0x401c9f
std
adc dl, byte [rdx + 0x1d]
push rbx
outsb dx, byte [rsi]
jnp 0x401cb9
adc ebp, dword [rsi]
xchg eax, ebx
jae 0x401ce1
insd dword [rdi], dx
xchg eax, ecx
wait
movsxd rbx, eax
leave
je 0x401ce4
push 0x70a1a009
mov al, 0xad
pop rbx
outsb dx, byte [rsi]
outsb dx, byte [rsi]
outsd dx, dword [rsi]
cdq
sub eax, 0x850d6715
pop rdx
jge 0x401cf0
outsb dx, byte [rsi]
jne 0x401cba
in eax, dx
sub ax, 0xea69
out dx, al
lodsd eax, dword [rsi]
adc eax, 0x38a30d62
or dword [rcx + rdi*2 + 0x6e], esp
pop r10
ja 0x401c77
sbb dword [r14 - 0x1a], r14d
imul esp, edi, 0xc26e1a95
or al, 0x5f
sbb ecx, dword [rcx]
and byte [rsi + 0x28ec15b7], al
or dword [rdx + 0x74], edi
jb 0x401c93
in al, 0x1c
outsb dx, byte [rsi]
jnp 0x401ccb
sub al, 0x6f
or byte [rdi - 0x7b853efb], ah
out dx, al
push 0x2e3a6f24
push -0x48911c9c
in al, dx
push 0x5d0d7264
movsxd rsp, dword [rbx - 0x12]
movsxd rsp, dword [rbp + 0x70]
mul dword [rsi + 0x4b]
jb 0x401d43
mov ebp, 0x43ef116c
mov dh, 0x58
add ebx, 0xa12b6a0b
imul esp, dword ss:[rbx + 0x36], 0x682c057b
jnp 0x401d5b
push rdx
mov dl, 0xae
add al, 9
insd dword [rdi], dx
mov dl, 0
add byte [rsi - 0x1054b83b], dl
add edi, ebp
xchg eax, edx
mov bl, 0x37
add edi, ebx
sbb al, 0x40
and dword [rcx], ebx
add dword [rbx], esp
sbb dword [rsp + rdx*2 + 0x54], esp
and byte [rax + rcx*2 - 0x7a], ah
add al, 0x31
je 0x401d48
sbb dword [rsp + 0x44], esi
jg 0x401cfd
and byte [rdi - 0x944], al
outsd dx, dword [rsi]
cwde
cwde
and al, 0x83
or al, 0x32
xor byte [rip + 0x480d8308], al
xor ecx, dword [rsi + 0xb]
enter -0x37c1, -0x27
in al, 0xec
and byte [rax + 2], bl
sti
pop rax
ror byte [rdx + rsi], cl
sbb byte [rsi + 3], dl
leave
adc ebx, esi
or al, 0xa7
add al, byte [rbx]
xchg eax, esi
je 0x401d82
pop rsi
mov edi, 0x921bcfff
mov bl, 0x37
mov edi, 0x64070232
mov edx, 0xfe3f6b21
pop rax
xchg eax, ebx
fadd qword [rdi]
cmpsd dword [rsi], dword ptr [rdi]
mov al, 6
jp 0x401dde
add al, 0xb6
js 0x401d27
dec eax
and byte [rbx + 0x423f841d], al
cmp byte [rax + 0x38320e4b], dl
enter 0x1901, -0x3b
adc byte fs:[rsi], al
mov ss, word [rbx]
leave
or dword [rdi + 0x1aff0a4f], edx
mov dword [rbx + 0x3f64320c], eax
and byte [rax], ah
mov dl, 0x21
mov ebx, 0x7100190
xchg eax, esp
mov eax, 0x7bf1049
sbb dword [rdx - 0x62f0a4dd], esi
jo 0x401def
enter 0x3733, 7
jg 0x401d91
or eax, 0xc3921526
movabs dword [0x9ff07f67250d2ef], eax
test eax, 0xa4decfbf
xchg dword [rdi], eax
jg 0x401e40
add al, bl
nop
pop rbp
and al, 0xb1
js 0x401e80
xchg eax, esp
or al, 0x32
js 0x401e4b
mov edi, 0x26e09e3f
rol byte [r15], 0x3f
mov word [rcx], es
add eax, 0xc948bb21
leave
cdq
wait
scasd eax, dword [rdi]
jg 0x401da8
xor esp, dword [rax - 0x2e]
je 0x401e34
add esi, dword [rdi]
sbb ecx, dword [rdx + 0x4e]
js 0x401e35
mov edi, 0xc13fe710
movsb byte [rdi], byte ptr [rsi]
psubb mm0, qword [rdi]
jmp qword [rax - 0x27]
mov ecx, 0xe93ff300
add ch, byte [rdx + rdx*4 + 0x2f]
clc
wait
xor esi, dword [rdi]
wait
sub eax, 0x7f073f1f
or dword [rcx + rcx*8], 0xffffffc9
lock add dword [rsi], eax
adc byte [rax + 0x216d9064], bl
mov edi, 0x72421f1f
nop
mov ecx, dword [rax]
add dword [rcx], eax
sub byte [rcx], bh
cmp ebp, dword [rdi + rbx*2 - 0x3e4fc0e0]
xchg byte [r10 + rcx - 0x50], r12b
jg 0x401e7f
movsb byte [rdi], byte ptr [rsi]
mov ebx, 0x83f1000
rcl byte [rdi], 0x72
nop
shl byte [r8], 1
and byte [rax + 0x1524360d], dl
jg 0x401ebf
ret 0xb0e0
xor al, 0xbf
shr byte [rcx], 0x9b
sbb eax, 0x88007b11
sub eax, 0x9e48b196
mov edi, 0x27bb011e
iretd
sbb dl, byte [rdx]
xlatb
and bh, bh
pop rax
or byte [rdi], bl
adc byte [rsi], dh
xor byte [rdx + rsi], 9
jg 0x401e3b
in al, 0x50
sub dword [rax], edi
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 2], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x17f7fdea], ecx
out 0xd2, al
movsx r9, word [r13 - 0x7c]
call 0xfffffffff1401f02
add byte [rax], al
test al, 0x36
add byte [rax], al
add byte [r8], al
stc
hlt
add byte [rax], al
add bh, bh
