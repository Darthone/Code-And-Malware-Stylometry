call 0x401688
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x4014a0
add ebx, ebx
je 0x401456
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x40148e
cmp rbp, -4
ja 0x40148e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x401476
add ecx, 4
mov dl, byte [rax]
je 0x40149e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x40148e
ret
cld
pop r11
cmp r8b, 2
je 0x4014b6
jmp 0x401533
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x4014c6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x4014ae
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x4014de
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x4014cb
sub eax, 3
jb 0x4014fc
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401533
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401523
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401521
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401510
cmp rbp, -0xd00
adc ecx, eax
call 0x401462
jmp 0x4014b6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40160c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x4015aa
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x4015f6
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x4015c9
push 0x3a707474
jne 0x401622
js 0x4015e2
jae 0x40161c
outsb dx, byte cs:[rsi]
je 0x4015db
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401649
jb 0x40163b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401666
jb 0x401679
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x213493
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x213493
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401544
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x40166f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40161d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add dword [rax], eax
jmp rbp
call 0x706f1717
jb 0x40172f
movsxd rbp, dword [rdi]
jae 0x401729
insb byte [rdi], dx
js 0x40172f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40170f
cmp rsi, rcx
jae 0x401717
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x4016f6
cmp al, 0x8f
ja 0x4016f6
cmp byte [rsi - 2], 0xf
je 0x4016fc
sub al, 0xe8
jg 0x4016f9
push rdi
cmp al, 1
ja 0x4016e4
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x4016e7
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401714
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40176b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1be9
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4017af
mov al, 0xa
jmp 0x4017af
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x40178b
inc ebx
mov al, 0
jmp 0x4017b3
mov al, 2
jmp 0x4017b3
mov al, 3
jmp 0x4017b3
mov al, 0x3c
jmp 0x4017b3
push rcx
rcr ah, 1
fstp st(7)
jle 0x4017f4
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401806
jg 0x4017f8
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6f7b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401852
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb69cf
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40185a
cmp esi, 0x21585055
jne 0x40185e
jge 0x401850
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401853
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401857
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401903
pop rcx
or al, 0x3b
jb 0x401909
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40187b
jmp 0x40187d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36617be
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53a06
in eax, dx
jg 0x4018b5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4018fb
mov bh, 0x2a
add edi, 0x10
jmp 0x4018f8
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401935
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401971
jne 0x401988
fstpnce st(6), st(0)
jle 0x401951
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401987
jrcxz 0x4019bb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b91f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401a3a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4019fa
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295fcf
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401a6d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401a07
and ecx, 7
or al, 0xeb
jae 0x401a72
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401aa7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401ae5
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401a9e
push rax
call 0xffffffff868d178b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401aa8
std
cmp edi, esi
xchg eax, edi
jle 0x401afd
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c96089
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401afb
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401ae9
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401b12
js 0x401b52
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401be4
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2e1f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401c05
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401c0a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc216bc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401b98
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
lea ecx, [rax + rax]
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dh
or byte [rax], cl
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
push qword [rax + 0x2e]
add byte [rax], al
movabs eax, dword [0x1f0000000200000d]
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401cbe
je 0x401cc7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401c90
mov dh, 0x7d
jbe 0x401c8f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401cc8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x6600006], bl
add byte [rsi - 0x37f837f5], ch
invd
add byte [rax], al
or al, 9
add byte [rax + 0x13c813e4], dl
or al, byte [rax]
fmul dword [rbx]
add al, al
setbe byte [rcx]
in al, 3
or al, 0
loopne 0x401cc8
adc dword [rdi + 0xe403e40], ebx
add al, dh
sldt word [rdi]
and byte [r15], r11b
and byte [rax], dl
add byte [rax], dl
adc dword [rax], eax
fmul dword [rdi]
nop
and byte [r10], r10b
add byte [rax + 0x1329], bl
enter 0x30fc, 0x14
add al, ch
cmp eax, 0x4f90060
adc eax, 0x16f800
add byte [rsi], bh
cmp byte [rdx + rax - 7], 0x17
add byte [rax], cl
sbb byte [rax], al
clc
and byte [rdi], bh
jle 0x401d1a
add byte [rax], al
sbb al, byte [rax]
adc byte [rcx - 0x6c], al
and byte [r15], r11b
sbb eax, dword [rax]
and byte [rbx + rdx], bl
mov fs, esp
fld qword [rcx]
add al, 0
int1
dec dword [rbx + rbx]
fmul dword [rbp - 0x3d]
xchg eax, ebp
mov edi, 0x20029719
adc al, byte [rax + 0x17]
xor ah, byte [rbx + rax*4]
sbb r12, qword [rax + 0x2e]
stc
fcom dword [rax + 0x5f44a00c]
sbb eax, dword [rax]
push rax
and eax, 0x13b0644
push rbx
enter 0xc90, 0x76
jp 0x401d90
rol byte [rsi - 0x7b513de7], 0x97
movsd dword [rdi], dword ptr [rsi]
xlatb
stosd dword [rdi], eax
insb byte [rdi], dx
mov dl, 0x49
and byte [rdi - 0x3a], dh
nop
and dword [rcx], ebx
and ebx, ebx
and bl, byte [rbx]
xchg eax, edx
rol dword [rsi - 0x8ae4018], 0x2f
mov al, 0x41
and al, 4
dec al
leave
and dword [rcx], ebx
sub byte [rsi], al
add dword [rax], esi
and al, 0x83
or al, 0x32
or byte [rdi], cl
cmp byte [rax], cl
or dword [rdx + rsi], 0x17
rcl byte [rip + 0x3d9c831f], 0x39
add dword [r11 + 0x13], esp
jno 0x401d2b
xor al, cl
and byte [rcx - 0x737908eb], ah
cmpsb byte [rsi], byte ptr [rdi]
test dword [rdi + 0x17], ebx
clc
call qword [rbx - 0xe7bd3fd]
iretd
mov byte [rip + 0x609fbd20], r9b
ja 0x401d68
sub dword [r9 - 0x14], r12d
retf -0x3731
adc al, 0xf7
jmp 0xffffffffd9f32712
fucomip st(4)
add dword [r9 + r13*8], r12d
or byte [rdi], dl
and byte [rsi - 0xa216d0f], bl
add dword [rbp - 0x30fee7e9], ecx
or eax, dword [rdx]
jae 0x401dd6
in al, 0x59
and ah, byte [rip + 0x3b170023]
pop r9
adc ch, cl
cmp eax, ebx
xlatb
add dl, byte [rdi]
add al, 8
scasd eax, dword [rdi]
fld dword [rcx - 0x32]
pop rsi
sub al, byte [rax]
pop rdi
pop rdi
xor cl, al
jle 0x401df3
and al, 0x27
cmp dword [rbx - 0x2f], ebp
cmpsb byte [rsi], byte ptr [rdi]
mov eax, 0x200d5021
int 0x20
and ch, dl
fcom dword [rax]
test byte ss:[rdi], dl
jmp 0x6c5819e8
nop
mov bl, 0x43
lsl esi, dword [rdi + 0x32]
or edx, dword [rdi]
sbb dword [rbx], esi
and al, 0x26
pop rdi
add dl, byte [rcx + 0x343e40b]
pop rcx
lahf
in al, 0xe4
push rdi
pop rsi
cmp byte [r14], r11b
sbb esp, dword [rcx]
insb byte [rdi], dx
or byte [rcx], bl
imul edx, dword [rax - 0x79be3de9], -0x50
scasd eax, dword [rdi]
cmpsd dword [rsi], dword ptr [rdi]
rcr dword [rdx + 0x22], cl
jg 0x401e42
in al, 0x60
hlt
and cl, byte [rcx + 0x60]
sbb dword [rsi], 4
and dword [rsi + 0x77], ebx
jb 0x401e21
or esp, esp
add al, 0x65
enter -0x4c37, 0x17
ret
add al, 0x77
rcr byte [rsi], cl
cmp dword [rcx], edi
fadd qword [rax + rsi*4]
sbb al, 0xe4
in al, 0xc9
ja 0x401e96
adc eax, dword [rax - 0x68]
add eax, 0x9e10bc9e
adc byte [rdi], dh
mov ebp, 0x7b213e05
xor eax, 0xf705eb42
xlatb
nop
sbb dword [rsp + rdi + 0x36352394], 6
and ecx, ebp
adc byte cs:[rdi], 0x11
xchg eax, edi
adc byte [rdx + rsi*2], cl
jb 0x401e71
pop qword [rdi + 0x4c]
and cl, byte [rsi]
ret 0x3906
cmp eax, dword [rdi + rcx + 0x1d842f07]
mov bl, 0x17
enter 0x7041, 7
add dword [rdi], 0x5f
add dword [rbx + rbx + 0x2fe4a292], esp
and byte [rax + 7], ah
nop
adc bh, dl
or ecx, dword [rax]
pop rdi
sbb edx, dword [rdx + 0x8555e93]
pop rdi
test byte [rdi], ch
jp 0x401e78
jno 0x401f01
or al, 9
or dword ds:[rdi], esp
mov esp, 0x95e8f40
xchg dword [rsi], esp
cmp ah, byte [rip + 0x17823771]
adc dword [rdx], eax
sbb bh, byte [rdi - 0x72]
or edi, ecx
jp 0x401f37
and esp, dword [rsi + 0x42409709]
nop
mov bl, 0x27
adc byte [rcx], al
mov r13d, 0x9e42f18
xchg edx, ecx
or dword [rdi], esi
and dword [rsi], 0xacf409f0
pop rax
sbb byte [r10], r9b
xchg eax, edi
nop
xchg eax, edx
xchg eax, ebx
sbb dword [rdi + rcx*4 + 0x540a2865], -0x4d
pop rsi
and byte [rip + 0x42a70a35], bl
or bl, byte [rdi]
cmp al, 0x39
enter -0x7537, 0x1f
xor esp, dword [rdx + 0xa]
and byte [rsi + 0x299c8390], al
or eax, 0x5e900b0b
enter -0x586d, -0xb
and al, 0x87
or eax, dword [rdi + 7]
mov al, 0xe8
movabs al, byte cs:[0xe4e41c0baccf1017]
pop rcx
scasd eax, dword [rdi]
cmp ah, byte [rbx]
pop rcx
fisttp qword [rbx]
pushfq
cmp al, 0x7b
sub ebp, 0x1f16a70b
sub byte [rax + 0x2f], ah
nop
add dword [rbx], 0xc
or al, 0xd7
and byte [rdi], ah
iretd
pop rsi
retf 0x470c
fsub dword [rip + 0x43b39338]
enter 0x3e9, 0xd
xlatb
sbb ah, ah
add bh, byte [rbx]
sbb ebx, ebx
sbb al, 0xd
xor al, 0x21
sbb dword [rsp + rbx + 0x7f532543], -0x27
xchg eax, ebx
or dword [rcx*8 + 0xa131404], 0x77
enter 0x67e0, 0xe
sbb al, 0xe4
in al, 0xc9
add dword [rip + 0x589e42f6], eax
test al, 0xe
ja 0x401fe4
cmp edi, dword [rcx]
fadd st(6)
mov r14d, 0xdd2f2c1f
in al, 9
sbb al, 0x42
add ecx, dword [rdi]
movq qword [rbx + rax*4], mm4
pushfq
sbb al, 0xe4
movzx ecx, byte ss:[rsi]
in al, 0x20
imul ecx, dword [rdi], 0x30
adc dword [rbx - 0x6fd0f61c], esi
psraw mm1, qword [rdi]
scasd eax, dword [rdi]
lodsd eax, dword [rsi]
and al, 0x33
pop rsi
adc byte [rdi - 0xd90efa1], cl
sbb al, 0x64
nop
jo 0x40207f
jge 0x40202f
sbb cl, dh
push rbx
test byte [rdi - 0x62], al
adc byte [rdi + 0x749e4260], ah
movabs rdi, 0xec21d205244c2f10
pop r14
adc dword [rdi - 0x130d8df2], ecx
imul edx, dword [rcx], 0x47
adc byte [rsi], ah
adc al, 0x97
adc dword [rdi], edx
sbb byte [rax + rax*2 - 0x3028ee56], bh
cmp byte [rbp + rcx + 0x17e72f61], al
xor dword [rdx], edx
jb 0x40200b
push qword [rdx - 0x4c]
lodsd eax, dword [rsi]
adc al, byte [rbp - 0x1fa1cc4]
adc dl, byte [rdi + 8]
and ah, ah
leave
or ebp, esp
sub al, 0x13
jp 0x402088
xchg eax, esi
and eax, 0xe4190870
test al, 0xf2
adc ebp, dword [rdi]
adc byte [rsi + 0x60], bl
pop rdi
push rbx
adc al, 0xc7
jno 0x40209d
in al, 0x19
bswap ecx
and ebp, dword [rcx - 0x7edb88ec]
jae 0x402027
xchg eax, ebx
sbb al, byte es:[rax + 0x19c03f01]
in al, 0xa4
adc bh, byte [rbp + 0x22]
and al, 0x10
js 0x40210d
iretd
out 0x14, eax
sti
pop rdi
outsd dx, dword [rsi]
movsxd rsp, dword [rbx + 0x72]
je 0x402128
je 0x40212c
movsxd rbx, dword cs:[rdi + 0x4a]
push r10
pop rdi
push r11
push rsp
or ebx, edi
mov edi, 0x64007fb5
jb 0x402133
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4020fe
in eax, dx
mov edi, 0x6f64bdbd
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x40214e
jne 0x40216a
pop rdi
jg 0x4020f2
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x402167
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bx, bx, 0xffed
fld xword [rsi + 0x69]
or byte [rdx + 0x72], dh
jns 0x402172
outsb dx, byte gs:[rsi]
je 0x402189
jns 0x402119
or ch, byte [rbp + 0x65]
and byte [rbp + 0x58], dh
out dx, al
insd dword [rdi], dx
insd dword [rdi], dx
jns 0x402159
or eax, 0x2a74295f
std
jg 0x4020ea
pushfq
jo 0x4021a4
and al, 0x5a
push rbx
je 0x402185
xor dword [rcx], edi
jo 0x4021a6
movsxd rsp, dword gs:[rbp + 0x77]
sar dword [rsi + 0x2d99ad6d], 0x77
outsb dx, byte [rsi]
lahf
jb 0x4021c1
movsxd rsi, dword [rdx + rbx + 0x67]
popfq
mov ebx, 0x757033b5
movsxd rsp, dword [rcx + 0x72]
cmp eax, 0x7b361467
mov bh, 0xb3
in eax, dx
imul esp, dword [rdi + 0x6e], 0x380c650f
imul ebp, dword [edi + 0x5d], 0xfefdef0e
mov ebp, 0x584d324c
xor ecx, dword [rcx + 0x4e]
xor al, 0x4c
or byte [rax], dl
std
out 0x65, al
jo 0x4021f9
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jbe 0x40218c
xor eax, 0x76450673
xlatb
ljmp [rbp + 0x52503e7a]
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
adc byte [rcx], r13b
jbe 0x402219
insd dword [rdi], dx
xor al, 0x31
xchg dword [rsi + 0x69], esi
movsxd rdi, dword [rcx + 0x76d98569]
imul ebp, esi, 0x69
jp 0x4021cd
pushfq
test dword [rsi + 0x64], ebp
shl byte [rbp - 0x5d], cl
jg 0x4021c0
mov bh, 0xbf
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r14b, byte [rbp + 0x62]
pop rdi
pop r15
insd dword [rdi], dx
out dx, eax
mov edi, 0x46fe336b
push rdx
pop r15
push rcx
xchg byte [rbx - 0x50], bh
in eax, 0xc9
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
push rdx
ret 0xdbfb
push rbx
mov word [rdi + 0x54], ds
sub byte [rip + 0x13616ebb], r14b
adc byte fs:[rsi + 0x5944f472], bl
fucomi st(5)
or byte [rdi + 0x4349454e], dh
or al, 0x33
movsxd rbx, dword [rdi]
sal dword [rbp - 1], 0x42
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x15
loope 0x402267
jne 0x402293
xchg eax, ebx
jo 0x4021df
jo 0x4022b8
js 0x40228e
out dx, eax
ja 0x4022a4
push rax
pop r14
or dh, dl
mov dh, 0x69
xor dl, cl
or eax, 0xda6d6950
sbb ebp, 0x36
ret 0x4172
je 0x4022c3
pop r15
xor ch, byte [rsi]
add dword [rcx], edx
pop rdx
mov ebx, 0x62fcfb1d
movsxd rax, dword [rax - 0x24]
mov ebx, 0x6963b5bd
insb byte [rdi], dx
je 0x4022b2
push rdx
or sil, byte [r8 + r14*2]
out dx, al
sub byte [rbx - 0x15], bh
pop rdx
mov r12b, 0x30
rcl dword [rbx + 0x35], cl
pop rdi
jb 0x40226b
pop rbx
lodsb al, byte [rsi]
sti
xor dword [r13 + 0x35], eax
xor dword [rdi], esp
cmp al, 0x31
xor bl, byte [rdi + 0x56]
cli
fisttp qword [rdx]
lea eax, [rbx - 0x23]
pop rcx
std
push rbx
int3
mov al, 0x2b
fsub qword [rdx]
xor r11b, byte [rdx + 0x5f6d6776]
out 0xdb, al
sar eax, 0x43
xor eax, 0x525f764a
mov ebp, 0x732c6c43
lea ebx, fs:[rip - 0x188a8f46]
stosd dword [rdi], eax
pop rdx
insb byte [rdi], dx
push rax
jbe 0x402345
mov dh, 0x41
or byte [rbx], al
insb byte [rdi], dx
xor dword [rbx + rbp*8 + 0x615921de], ecx
popfq
jp 0x40233e
js 0x402345
fadd st(5), st(0)
lea ebp, [rsp + rbp*2 + 0x62]
sub ah, byte [rdi - 0x3b0e49c8]
cmp byte [rdi], al
jae 0x4022b0
xor al, 0x49
sahf
xor dword [rbx + 0x40803230], ebx
leave
sub al, 0x91
movsd dword [rdi], dword ptr [rsi]
in al, dx
sbb al, 0x50
lahf
xchg byte [edi + 0x14], bh
fsub qword [rsi - 0x15]
ja 0x40237b
jns 0x402357
push rax
jnp 0x402381
jo 0x402320
test dword [rsi + 0x71], esi
push r10
mov bh, byte [rax + 0x60]
mov edx, 0x154d906c
imul edx, ebx, 0x9c912eb0
jg 0x402358
and ebp, dword [rbp + 0x24]
xchg eax, esp
mov ch, 0x8e
pop rbp
xchg eax, ebx
pop rdi
sbb eax, 0xabb5d878
test eax, 0xb64bd80d
or dl, byte [rbx - 0x118ce193]
cwde
movabs eax, dword [0x1e17606350baa069]
out dx, al
cmp byte [rbx + rbx*8], dh
xor ah, byte [rax + 0x69]
add al, 0x61
movsxd rbx, r11d
pop rsp
out dx, eax
jp 0x402391
movsxd rbp, dword [rax + 0x61]
mov byte [rcx + rsi], ch
jae 0x402378
sahf
fstp qword [rbx + rsi*2 + 0x7a]
add al, 0
movabs byte [0x8610d976369c6c45], al
xchg eax, ebp
test al, 0x75
sub eax, 0x6d7b7644
imul esp, dword [rbx + rcx*2 + 0x63], 0xb7df4f67
or dh, byte [rsp + rdx*2 + 0x66cd033f]
jo 0x4023f3
xor al, 0xfd
insd dword [rdi], dx
xchg byte [rax + 0x67], ah
or al, 0x30
or eax, 0x675f5726
sbb al, 0x79
push rsp
int 0xdc
xchg dword [rdi + 0x7e], ebx
push rbx
mov bl, 0xd
imul ebx, ebx, 0x491fb796
push r10
mov eax, 0x4f765f32
xor byte [rdi + 0x25], cl
pop rax
leave
add dword [rsi + 0x66dc442c], eax
mov word [rax - 0x38], es
jle 0x402420
pop rdi
clc
sub dword [rbp + 9], 0xd4430cd6
push rsp
sar byte [rbx], cl
xchg eax, ecx
adc eax, 0x5f3349bb
cli
test rax, rsi
adc ch, byte [rsi]
je 0x4023ce
retf 0x1bec
xor dword [rdi + rcx*2 - 0x76659bc8], edx
insb byte [rdi], dx
mov ebx, 0x6472755f
xchg dword [rcx], edi
outsd dx, dword [esi]
sbb dword [rbx], ecx
or eax, 0xf3705066
sbb eax, dword gs:[rsi]
mov esi, dword fs:[rsi + 0x4a8e6b63]
adc dh, al
movsxd rsi, dword [rdx]
test al, 4
mov r15b, 0xc9
leave
jae 0x4023da
outsb dx, byte [rsi]
sbb ax, 0x8210
xor byte [rbx], ah
wait
clc
div byte [rax]
imul ebp, dword [rbx], 0x2c
fsub dword [rax + 0x61]
insd dword [rdi], dx
and dword [rcx + 0x44d4905c], eax
in eax, dx
xchg byte [rip + 0x4c49ff83], dh
sub dword [rsi + 0x64], eax
mov dl, 0xba
out 0x64, al
xchg eax, edi
pop r13
push 0x78b20bb4
rcl bh, 1
mov dh, 0xa3
test byte [rsi - 0x3c], dl
fbstp tbyte [rax + 0x3434424b]
imul edx, dword [rdi + 0x3953729b], 0x5f
pop rdi
femms
push rbp
add ch, byte [rcx]
int3
lea esi, [rsi + 0x56b30617]
leave
xor al, byte [rcx - 0x7c3cf621]
push rsp
mov ebx, 0x204dee92
and eax, 0x6b9ba30
or eax, 0x34179c5a
out dx, al
ret 0xe42c
loop 0x4024ac
pushfq
pop rdi
push -0x24664b9a
xchg eax, edx
ret 0x4994
stc
mov dword [rdi], edi
mov dword [rax + 0x33], ebx
sub al, 0x74
xor byte [rcx], ch
jno 0x4024c3
xchg eax, ebx
stosd dword [rdi], eax
xor byte fs:[rdx], dh
enter -0x3e1e, -0x7c
xor cl, cl
jo 0x4024c5
or edi, dword [rcx + 1]
xor ch, byte [rsi + 0x33]
out 2, eax
push rsi
movabs eax, dword [0x9001a4b844d0e172]
pop rsi
xor al, 2
push rdx
push r11
pushfq
and byte [rcx - 0x78], 0x32
int3
pop rdx
xor bl, al
cmp r10d, r8d
pop rdi
cmp dword [rcx - 0x75e62504], 0x665edbf0
pop r8
jae 0x402564
adc dword [rsi + rax*4], eax
jae 0x4024ac
jae 0x40255a
movabs byte [0x6b45bad86b65f868], al
jbe 0x402487
jne 0x402519
cmp byte [rsi + rsi], cl
call 0x75373192
jns 0x402582
push rax
mov byte [rbx], dh
xchg eax, edx
xor byte [rbp + 0x36036d64], al
pop rsp
xchg eax, ebx
rcr byte [rcx], 0xc3
sbb eax, 0x2c524e38
sbb byte [rsp + rdi*4 + 0x6d], dh
ret
fst dword [rdx]
cwde
loop 0x402596
pop rsp
movabs al, byte [0xe66337266b5ce61c]
push rcx
sub al, 0x1c
mov ebp, ebp
pop rcx
insd dword [rdi], dx
test eax, 0xc277b932
and al, 0xaa
imul esp, dword [rax - 0x379dfdce], 0x5ec056e2
or eax, 0xc26b683e
or ah, byte [rcx + 0x34]
mov esp, 0xd6b6331
stosd dword [rdi], eax
mov si, 0x6e9c
stc
jb 0x402501
lodsq rax, qword [rsi]
insd dword [rdi], dx
loop 0x4025b1
imul ebp, edx, 0x337acac2
jnp 0x402530
jnp 0x4025ef
add al, 0xe1
add al, 0x69
js 0x4025c6
iretd
jae 0x402534
fld qword [rax]
mov dh, 0xa4
imul esi, dword [rax], 0x6e758732
or r12d, dword [rdi + 0x3de96526]
jne 0x40258b
xchg byte [rip - 0x36814a55], bh
in eax, dx
xor dword [rax], edi
and al, byte [rcx + 0x1bcb7cf3]
xor r15d, r11d
jo 0x4025b7
adc byte fs:[rbp + 0x64207073], bh
mov ch, 0xc0
jae 0x402573
test al, 0xc
rcr byte [rbx + rcx*2 + 0x5d], 0x50
cwde
xor byte [rcx + 0x5a], ah
cmpsd dword [rsi], dword ptr [rdi]
jp 0x40257c
push rsi
ret 0x98c0
jl 0x40260a
xlatb
or al, 0x5b
jmp 0x4025d1
adc ch, byte [rcx - 0x2a]
movsxd rcx, dword [rax + 0xc9e495a]
sub al, 0xe1
adc dl, ch
push rsp
scasb al, byte [rdi]
or ebp, dword [rsi]
pop rax
adc dword [rsi + 0x508bd945], edi
push 0x75246db
push rbx
and edx, dword [rcx + 0x4973b7d]
pop rsi
push rbx
sahf
push 0x59
je 0x402670
push rsi
rol dword [rdx], cl
ja 0x40263e
jmp 0x402611
lodsb al, byte [rsi]
add cl, byte [rcx + 0x2b]
test eax, 0x38b30df6
and eax, 0x6631ffac
xor dh, byte [rbp + rbp*2 + 0x64bd772a]
mov edx, 0xb42852b5
push -0x3c
stosd dword [rdi], eax
xchg dword [rdi + 0x3a], esi
mov dword [rsi + 0x67666c9a], 0xdbb4636e
xor al, 0x84
scasb al, byte [rdi]
or esp, eax
int 0xc4
sub al, 0x6c
push rbp
cmp byte [rcx + 0x73], ah
add ebx, dword [rdx + 0x13]
xor edi, dword [rbx + 0x6f]
sbb dword [rsi], esp
shl byte [rsi + 0x7c], 0x73
insd dword [rdi], dx
add eax, 0x9118131
cmc
sahf
xchg qword [r10 + rdx*8], rdx
stosd dword [rdi], eax
xor eax, 0xa47029ad
sub dil, dl
cmp dword [r13 + 0x33716890], eax
push rdx
pop rbx
jmp 0x3215bc40
jle 0x402618
fild dword [rax]
add ah, byte [rcx - 0x1fa07699]
pop rdx
xchg eax, esp
or bh, byte [rsp + rax*4]
mov dl, 0xb9
ja 0x4026fe
movabs dword [0x4942411d21302447], eax
or dword cs:[rsi + 0x22], esp
xor dword [rbx], 0x2bb93112
lodsb al, byte [rsi]
xor dword [rcx], esp
mov bl, 0x40
adc byte [rdi + rdx*2], bl
or byte [rax + 0x6c178337], al
push rdx
lodsb al, byte [rsi]
out 0x35, al
in eax, 0xfe
mov ebx, ecx
or byte [rcx], 0x61
jnp 0x402711
push -0x20
and byte [rax], bh
cdq
pop rdi
fst dword [rsi]
and spl, r11b
sub ebp, dword [rsi + 0x77]
insd dword [rdi], dx
not byte [rcx + 0x32]
sbb dh, byte [rax + 0x375549b5]
xchg eax, esp
std
je 0x40269c
add ah, byte [rip + 0x434032b8]
cmp al, 0x30
and al, 0xd8
add al, 0xd2
add al, 0xed
sub byte [rcx + rcx*2 + 0x36], 0x1d
adc dword [rdx + 0x25], ecx
and dword [rcx + 0x5c], ecx
wait
test al, 5
movabs eax, dword [0x1d024462bd21ad76]
movabs eax, dword [0x671a71e04c652d44]
xor byte [rsi + 0x4c7a4349], bl
xor dh, byte [rdi]
xor ebp, dword [rcx + 0x45756443]
cmc
xor eax, 0x91957862
retf 0x6eaa
push 0xd
enter -0x4f56, -0x74
mov edx, 0x9057e504
xchg dword [rax + 0x4c], esi
movsxd r12, r10d
xor cl, byte [rcx + 0x2e]
nop
xor cl, byte es:[rax - 0x1e]
and cl, byte [rcx - 0x439ec4a6]
fucom st(3)
je 0x402793
mov ah, 0x31
std
lodsd eax, dword [rsi]
imul ebx, dword [rax], 0xdf465838
lodsb al, byte [rsi]
loopne 0x4027c1
adc r15, qword [rsi]
retfq -0x2e80
xor byte [rsi + 0x32], al
div byte [rdi + 0x761d12f1]
jrcxz 0x4027e8
jns 0x4027e4
mov edx, 0x7464ec36
jb 0x4027e9
or dword [rbx - 0x29278fae], ebp
mov ch, 0xdc
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jl 0x4027bc
adc eax, 0xdfb10d67
loopne 0x4027c4
push rsp
jne 0x402797
sub eax, 0xd006469
xor esi, edi
or bl, byte [rsi]
cmp byte [rcx], cl
jns 0x402819
pop rdx
loope 0x4027ea
imul eax, dword [rbp + 0x19], 0x76
leave
or byte [rip + 0xcc26e5a], ah
pop rdi
sbb ebp, dword [rbp + 7]
adc eax, 0x9287b06
jo 0x4027d0
jb 0x4027d3
loope 0x402781
jbe 0x4027d8
sub al, 0x6f
or byte [rsi + 0x11], dl
fmul dword [rsi - 0x1f]
add eax, 0x376f2454
mov bh, 0xec
adc ebp, eax
push 0x72646837
or eax, 0xb41b0a5d
movsxd rsi, dword [rax + 0x50707d2e]
mov bl, 0x64
test ebx, ebp
mov ebp, 0x430b116c
pop rdx
lodsb al, byte [rsi]
shl dword [rcx + 0xb], 1
push 0x33
movabs eax, dword [0x6800e316f66cd136]
jnp 0x40286b
insd dword [rdi], dx
lodsd eax, dword [rsi]
int 0x79
add al, 0xdc
push rdx
std
add byte [rax + 0x80428b], ah
add dword [rsi + 6], ebp
mov cl, 0x2c
xchg dword [rdi + 7], esp
xor spl, byte [r15 + r12*2]
sbb al, 1
and esi, dword [rdx]
enter 0x3480, 7
push rsp
push rsp
or al, 0xc9
nop
or al, 0x20
add al, 0x31
or al, 0x32
enter 0x7490, 0x74
and al, 0xe
jns 0x40287c
xchg eax, esp
jg 0x40283f
ljmp [rdi - 0x68]
sbb dword [rax + rdx*4 + 0x41], esp
cwde
cmp byte [rip + 0x6486690], al
or byte [rsi + 0xb], cl
mov dl, 0
sbb eax, edx
xchg eax, r8d
leave
pop rdi
sti
sbb byte [rcx - 0x3c], cl
xchg eax, edx
push si
add ebp, dword [rdi]
xchg eax, edx
mov esp, 0x54e3f07
pop rsi
wait
sub al, 0xe9
mov edi, 0x900757ff
or eax, 0x4cbfd9c9
add al, byte [rdi]
xchg eax, edx
mov byte [rip - 0x1c09423], ah
jg 0x402853
sbb dword cs:[rsp + rcx - 0x41], ebp
add byte [rbx], al
dec ecx
sbb byte [r10 + 0x53], dil
nop
or esp, dword [rcx]
mov eax, 0xff483f07
nop
ror dword [rsi], -0x7c
fmul st(0)
and eax, 0xe8d81907
add bl, byte [rcx]
push 0x32
or byte [rbx], al
mov ss, word [rbx]
js 0x4028d9
lcall [rdx]
jo 0x40285f
and dword [rbx], ebx
mov dword [rdi], edi
loopne 0x4028d9
xchg ah, ah
insb byte [rdi], dx
sub byte [rax], al
adc byte [rax + rax*8 + 0x3fc8e418], dl
adc dword [rcx], edx
xor ah, byte [rdi + rax*2 - 0x4a]
setge byte [rdi]
sub eax, 0x76e6790
jg 0x402904
adc eax, 0x8724208c
movabs dword [0x9ff07dcce4a1af7], eax
test eax, 0x484109b9
mov edi, 0xbb210787
sahf
jg 0x4028d4
add byte [rcx + 0x641c913f], dh
mov al, 0xd8
jg 0x4028f1
mov esp, 0x42284d01
jb 0x4028df
pcmpeqd mm2, qword [rcx + 0x3f07c13c]
leave
retf
sub byte [r10 + 0x37], r8b
jg 0x402937
sub byte [rcx], bh
pop rdi
fcomi st(3)
or dword [rax], 0x7e7a6d2
mov edx, 0xbf84e4a1
adc bh, ah
movups xmm3, xmm4
clc
jmp qword [rax]
xchg eax, esi
popfq
or esi, ebx
movsb byte [rdi], byte ptr [rsi]
or esi, dword [rax + 0x3f3edfc9]
clc
wait
iretd
fsubr qword [rsi + rsi*4 + 0x1f]
jg 0x402958
add dword [rdx + rsi], ecx
and al, 0x27
adc byte [rax - 0x7a49be6e], bl
mov edi, 0xc9083f3f
or byte cs:[rcx], al
add dword [rdi + rcx*8], esp
mov dword [rdi + 0x40], edx
adc byte [rcx], al
xchg eax, ebx
nop
pop rsp
or bl, byte [rdi - 0xa]
sub eax, 0x7f077040
pop rdi
or byte [rdi], bh
cmp eax, ecx
and byte [rbx], al
and byte [rax], ah
cmp byte [rdx], al
sbb edx, dword [rdx + 0x7f15200b]
xor byte [rcx + rsi*2 + 0x3f17c858], al
xor al, 0x3f
push rbx
cmp ebp, dword ss:[rdi + rax]
adc dword [rbx], edi
imul ecx, dword [rbp + rax*2 + 0x7f668cf2], 0x1e
add dword [rbx - 0x26a14c37], edi
add byte [rax + 0x41], bl
dec dword [rax]
adc byte [rbp + rcx + 0x3b1fcd20], al
or dword [rdi + 0x60], edi
xchg eax, ecx
cmp al, 0x39
push rcx
or edx, dword [rip]
add byte [rax], al
nop
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x3a080216], ecx
retf
mov esp, 0x17824ed4
jo 0x402a30
add byte [rax], al
movabs eax, dword [0x4900006f9000000d]
add dword [rax], eax
and eax, 0xf4
