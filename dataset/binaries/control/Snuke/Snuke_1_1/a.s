xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x604127
push rbp
sub rax, obj.std::cin
cmp rax, 0xe
mov rbp, rsp
jbe 0x401250
mov eax, 0
test rax, rax
je 0x401250
pop rbp
mov edi, obj.std::cin
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.std::cin
push rbp
sub rsi, obj.std::cin
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401298
mov eax, 0
test rax, rax
je 0x401298
pop rbp
mov edi, obj.std::cin
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x2030a9], 0
jne 0x4012ba
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x203096], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x4012d0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x4012cb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x20
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x10]
mov rsi, rax
mov edi, 0x4027ac
mov eax, 0
call sym.imp.scanf
mov dword [rbp - 0xc], 1
mov eax, dword [rbp - 0x10]
cmp dword [rbp - 0xc], eax
jg 0x401348
mov eax, dword [rbp - 0xc]
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
lea rax, [rbp - 0x11]
mov rdi, rax
call sym.Solver::solve
add dword [rbp - 0xc], 1
jmp 0x40131a
mov eax, 0
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x401361
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x40139e
cmp dword [rbp - 8], 0xffff
jne 0x40139e
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int__
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_int__
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax + 4], edx
nop
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x118
mov qword [rbp - 0x128], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rax, [rbp - 0xb0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb0]
lea rax, [rbp - 0x90]
mov esi, 0x402740
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
lea rax, [rbp - 0xc0]
mov rdi, rax
call 0x401e38
lea rdx, [rbp - 0xc0]
lea rax, [rbp - 0xb0]
mov esi, 6
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::vector
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_int_::_allocator
lea rax, [rbp - 0x120]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
lea rax, [rbp - 0xb0]
mov esi, 0
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
lea rax, [rbp - 0xb0]
mov esi, 5
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
lea rax, [rbp - 0xb0]
mov esi, 1
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
lea rax, [rbp - 0xb0]
mov esi, 3
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
lea rax, [rbp - 0xb0]
mov esi, 2
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
lea rax, [rbp - 0xb0]
mov esi, 4
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov dword [rbp - 0x118], 0
cmp dword [rbp - 0x118], 2
jg 0x4017d3
mov eax, dword [rbp - 0x118]
add eax, 3
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
mov dword [rbp - 0xe8], eax
mov eax, dword [rbp - 0x118]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, dword [rbp - 0xe8]
setl al
test al, al
je 0x4015f1
mov edi, str.IMPOSSIBLE
call sym.imp.puts
mov ebx, 0
jmp 0x401d28
cmp dword [rbp - 0xe8], 0
je 0x4017c6
mov eax, dword [rbp - 0x118]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, dword [rbp - 0xe8]
sete al
test al, al
je 0x40179f
mov dword [rbp - 0x114], 0
cmp dword [rbp - 0x114], 2
jg 0x4016bd
mov eax, dword [rbp - 0x118]
cmp eax, dword [rbp - 0x114]
je 0x4016b1
mov eax, dword [rbp - 0x114]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jne 0x401692
mov eax, dword [rbp - 0x114]
add eax, 3
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
je 0x401699
mov eax, 1
jmp 0x40169e
mov eax, 0
test al, al
je 0x4016b1
mov edi, str.IMPOSSIBLE
call sym.imp.puts
jmp 0x401795
add dword [rbp - 0x114], 1
jmp 0x401636
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x401070
mov dword [rbp - 0x110], 0
mov eax, dword [rbp - 0x118]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, dword [rbp - 0x110]
setg al
test al, al
je 0x40176a
mov eax, dword [rbp - 0x118]
movsxd rdx, eax
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x4011a0
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x50]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
mov eax, dword [rbp - 0x118]
add eax, 3
movsxd rdx, eax
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x4011a0
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x50]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add dword [rbp - 0x110], 1
jmp 0x4016d3
lea rax, [rbp - 0x50]
mov rsi, rax
mov edi, obj.std::cout
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
mov esi, sym.std::endl_char_std::char_traits_char__
mov rdi, rax
call sym.std::ostream::operator__
nop
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov ebx, 0
jmp 0x401d28
mov eax, dword [rbp - 0x118]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
sub edx, dword [rbp - 0xe8]
mov dword [rax], edx
jmp 0x4017c7
nop
add dword [rbp - 0x118], 1
jmp 0x401580
mov dword [rbp - 0x11c], 0
mov dword [rbp - 0x10c], 0
mov dword [rbp - 0x108], 0
cmp dword [rbp - 0x108], 2
jg 0x40185e
mov eax, dword [rbp - 0x108]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rdx, rax
lea rax, [rbp - 0x11c]
mov rsi, rdx
mov rdi, rax
call sym.std::max_int_
mov eax, dword [rax]
mov dword [rbp - 0x11c], eax
mov eax, dword [rbp - 0x108]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
add dword [rbp - 0x10c], eax
add dword [rbp - 0x108], 1
jmp 0x4017f1
mov dword [rbp - 0x104], 0
cmp dword [rbp - 0x104], 2
jg 0x40189b
mov eax, dword [rbp - 0x104]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
add edx, edx
mov dword [rax], edx
add dword [rbp - 0x104], 1
jmp 0x401868
mov dword [rbp - 0x100], 0
cmp dword [rbp - 0x100], 2
jg 0x401907
mov eax, dword [rbp - 0x100]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
mov edx, dword [rbp - 0x11c]
add edx, edx
cmp eax, edx
sete al
test al, al
je 0x4018fe
mov eax, dword [rbp - 0x100]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
add edx, 1
mov dword [rax], edx
add dword [rbp - 0x100], 1
jmp 0x4018a5
mov eax, dword [rbp - 0x11c]
add eax, eax
cmp eax, dword [rbp - 0x10c]
jle 0x40192b
mov edi, str.IMPOSSIBLE
call sym.imp.puts
mov ebx, 0
jmp 0x401d28
lea rax, [rbp - 0x70]
mov rdi, rax
call 0x401070
mov dword [rbp - 0xfc], 0xffffffff
mov dword [rbp - 0xf8], 0
mov eax, dword [rbp - 0xf8]
cmp eax, dword [rbp - 0x10c]
jge 0x401aa8
mov dword [rbp - 0xd0], 0
mov dword [rbp - 0xcc], 0xffffffff
mov dword [rbp - 0xe0], 0
mov eax, dword [rbp - 0xe0]
cmp eax, 2
jg 0x401a11
mov eax, dword [rbp - 0xe0]
cmp dword [rbp - 0xfc], eax
je 0x4019fd
mov eax, dword [rbp - 0xe0]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rcx, rax
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0xc0]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_int_int_::pair_int__int__void_
lea rdx, [rbp - 0xc0]
lea rax, [rbp - 0xd0]
mov rsi, rdx
mov rdi, rax
call sym.std::max_std::pair_int_int__
mov rdx, rax
lea rax, [rbp - 0xd0]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_int_::operator_
mov eax, dword [rbp - 0xe0]
add eax, 1
mov dword [rbp - 0xe0], eax
jmp 0x40197b
mov eax, dword [rbp - 0xcc]
mov dword [rbp - 0xe4], eax
cmp dword [rbp - 0xe4], -1
jne 0x401a3f
mov ecx, str.void_Solver::solve__
mov edx, 0x6f
mov esi, str.sorted_code_control_Snuke_Snuke_1_1_b.cpp
mov edi, str.x_____1
call sym.imp.__assert_fail
mov eax, dword [rbp - 0xe4]
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
sub edx, 2
mov dword [rax], edx
mov eax, dword [rbp - 0xe4]
mov dword [rbp - 0xfc], eax
mov eax, dword [rbp - 0xe4]
movsxd rdx, eax
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x4011a0
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x70]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add dword [rbp - 0xf8], 1
jmp 0x40194b
mov dword [rbp - 0xf4], 0
cmp dword [rbp - 0xf4], 2
jg 0x401c88
mov dword [rbp - 0xf0], 0
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 0xf0]
setg al
test al, al
je 0x401c7c
mov eax, dword [rbp - 0xf0]
movsxd rdx, eax
lea rax, [rbp - 0x70]
mov rsi, rdx
mov rdi, rax
call 0x4011a0
movzx ebx, byte [rax]
mov eax, dword [rbp - 0xf4]
movsxd rdx, eax
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x4011a0
movzx eax, byte [rax]
cmp bl, al
sete al
test al, al
je 0x401c70
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x401070
mov dword [rbp - 0xec], 0
mov eax, dword [rbp - 0xf4]
add eax, 3
movsxd rdx, eax
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, dword [rbp - 0xec]
setg al
test al, al
je 0x401bdc
mov eax, dword [rbp - 0xf4]
movsxd rdx, eax
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x4011a0
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x50]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
mov eax, dword [rbp - 0xf4]
add eax, 3
movsxd rdx, eax
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x4011a0
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x50]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add dword [rbp - 0xec], 1
jmp 0x401b42
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::end
mov r13, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::begin
mov r12, rax
mov eax, dword [rbp - 0xf0]
movsxd rbx, eax
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::begin
mov qword [rbp - 0xe0], rax
lea rax, [rbp - 0xe0]
mov rsi, rbx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
mov qword [rbp - 0xd0], rax
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_charconst__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::__normal_iterator_char__
mov rsi, qword [rbp - 0xc0]
lea rax, [rbp - 0x70]
mov rcx, r13
mov rdx, r12
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::insert___gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____void_
nop
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401c7c
add dword [rbp - 0xf0], 1
jmp 0x401ac9
add dword [rbp - 0xf4], 1
jmp 0x401ab2
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov edx, eax
mov eax, dword [rbp - 0x120]
cmp edx, eax
je 0x401cb9
mov ecx, str.void_Solver::solve__
mov edx, 0x7d
mov esi, str.sorted_code_control_Snuke_Snuke_1_1_b.cpp
mov edi, str.sz_ans_____n
call sym.imp.__assert_fail
lea rax, [rbp - 0x70]
mov esi, 0
mov rdi, rax
call 0x4011a0
movzx ebx, byte [rax]
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::back
movzx eax, byte [rax]
cmp bl, al
jne 0x401cf9
mov ecx, str.void_Solver::solve__
mov edx, 0x7e
mov esi, str.sorted_code_control_Snuke_Snuke_1_1_b.cpp
mov edi, str.ans_0_____ans.back__
call sym.imp.__assert_fail
lea rax, [rbp - 0x70]
mov rsi, rax
mov edi, obj.std::cout
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
mov esi, sym.std::endl_char_std::char_traits_char__
mov rdi, rax
call sym.std::ostream::operator__
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov ebx, 1
lea rax, [rbp - 0xb0]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
cmp ebx, 1
je 0x401d43
mov ebx, 0
jmp 0x401d49
nop
mov ebx, 1
lea rax, [rbp - 0x90]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
cmp ebx, 1
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x401e09
jmp 0x401e04
mov rbx, rax
lea rax, [rbp - 0xb0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::allocator_int_::_allocator
jmp 0x401dea
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401ddb
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401dca
mov rbx, rax
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401ddb
mov rbx, rax
lea rax, [rbp - 0xb0]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
lea rax, [rbp - 0x90]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x118
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_base
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_default_initialize
jmp 0x401ecb
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov edx, dword [rax]
mov rax, qword [rbp - 0x10]
mov eax, dword [rax]
cmp edx, eax
jge 0x401f38
mov rax, qword [rbp - 0x10]
jmp 0x401f3c
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov edx, dword [rax]
mov rax, qword [rbp - 0x10]
mov eax, dword [rax]
cmp edx, eax
jl 0x401f7c
mov rax, qword [rbp - 0x10]
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov eax, dword [rax]
cmp edx, eax
jl 0x401f83
mov rax, qword [rbp - 8]
mov edx, dword [rax + 4]
mov rax, qword [rbp - 0x10]
mov eax, dword [rax + 4]
cmp edx, eax
jge 0x401f83
mov eax, 1
jmp 0x401f88
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__int_int_
test al, al
je 0x401fb7
mov rax, qword [rbp - 0x10]
jmp 0x401fbb
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x10]
mov edx, dword [rax + 4]
mov rax, qword [rbp - 8]
mov dword [rax + 4], edx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x30]
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402046
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::base
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x60
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x50], rdx
mov qword [rbp - 0x60], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::begin
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__charconst__char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov qword [rbp - 0x10], rax
mov rdi, qword [rbp - 0x60]
mov rcx, qword [rbp - 0x50]
mov rdx, qword [rbp - 0x40]
mov rsi, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
mov r8, rdi
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::replace
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_data
mov rdx, rax
mov rax, qword [rbp - 0x10]
add rax, rdx
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::__normal_iterator
mov rax, qword [rbp - 0x30]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402124
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_int_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_create_storage
jmp 0x4021b1
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_int__unsignedlong_int_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_int__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_charconst__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_int_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x4023c6
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_int__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_int__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_int_.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x402478
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::allocate
jmp 0x40247d
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_int__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0xc], 0
lea rdx, [rbp - 0xc]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_int__unsignedlong_int_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402594
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x4025c6
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 2
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_int__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x3fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x40267b
mov rax, qword [rbp - 0x18]
mov edx, dword [rbp - 0xc]
mov dword [rax], edx
sub qword [rbp - 8], 1
add qword [rbp - 0x18], 4
jmp 0x40265f
mov rax, qword [rbp - 0x18]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201746]
push rbp
lea rbp, [rip + 0x20174e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x4026e6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x4026d0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
xchg byte [rcx], al
add byte [rcx], ch
sub dword [rax], edx
stosb byte [rdi], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword fs:[rsi], dword ptr [rdi]
mov bl, 0xb6
loopne 0x402745
mov ebx, 0xdfd9d7bd
jl 0x40271a
cmp eax, 0x47425952
push rsi
add byte [r9 + 0x4d], r9b
push r8
push r11
push rbx
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x6f], dh
jae 0x4027c9
jb 0x4027d0
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x4027db
outsd dx, dword [rsi]
insb byte [rdi], dx
push rbx
outsb dx, byte [rsi]
jne 0x4027db
push rbx
outsb dx, byte [rsi]
jne 0x4027e1
pop rdi
xor dword [rdi + 0x31], ebx
movsxd rsi, dword cs:[rax + 0x70]
add byte [rax + 0x20], bh
js 0x4027a4
and dword [rip + 0x312d20], edi
jae 0x402806
sub byte [rcx + 0x6e], ah
jae 0x4027ba
and byte [rip + 0x6e203d], bh
outsb dx, byte [rsi]
jae 0x4027f6
xor byte [rbp + 0x20], bl
and dword [rip + 0x736e6120], edi
movsxd rbp, dword [rbx + 0x28]
sub dword [rax], eax
and eax, 0x61430064
jae 0x402818
and byte [rbx], ah
and eax, 0x203a64
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x402831
imul esp, dword [rax + 0x53], 0x65766c6f
jb 0x402806
cmp dh, byte [rbx + 0x6f]
insb byte [rdi], dx
jbe 0x402837
sub byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
mov esp, 0x36000001
add byte [rax], al
add byte [rax], cl
call 0x24927e9
add byte [rax], al
sbb dl, ch
fadd dword [rcx]
add byte [rax], al
jmp 0x4027f6
inc eax
add al, byte [rax]
add byte [rbx - 0x7f000015], cl
or byte [rax], al
add cl, cl
jmp 0x402806
jmp qword [rax - 0x21fffff8]
jmp 0x40280e
push qword [rax]
add al, byte [rax]
add ah, ch
jmp 0x402816
call qword [rax + 2]
add byte [rax], al
sub al, 0xec
call qword [rax + 0x40000002]
idiv bh
jmp rax
add al, byte [rax]
add byte [rax - 0xa], ah
inc dword [rax]
add eax, dword [rax]
add byte [rsi + rsi*8 - 1], bh
jmp qword [rax]
add eax, dword [rax]
add byte [rax + 0x40fffff6], bl
add eax, dword [rax]
add dl, bh
idiv bh
ljmp [rax + 3]
add byte [rax], al
idiv edi
call qword [rax + 0x66000003]
idiv edi
push qword [rax - 0x4dfffffd]
idiv edi
call rax
add eax, dword [rax]
add dh, ah
idiv edi
push rax
add eax, dword [rax]
add byte [rdx], dl
clc
call qword [rax]
add al, 0
add byte [rax - 8], dh
push qword [rax]
add al, 0
add byte [rdx + 0x50fffff8], bl
add al, 0
add byte [rsi - 7], cl
push qword [rax + 4]
add byte [rax], al
pop rdx
stc
call qword [rax + 0x66000004]
stc
push qword [rax - 0x7dfffffc]
stc
call rax
add al, 0
add al, ah
stc
clc
add al, 0
add byte [rax], dh
cli
jmp qword [rax]
add eax, 0xfa740000
inc dword [rax + 5]
add byte [rax], al
cli
jmp qword [rax + 5]
add byte [rax], al
lodsb al, byte [rsi]
cli
inc dword [rax - 0x35fffffb]
cli
jmp qword [rax - 0x27fffffb]
cli
inc eax
add eax, 0xfb180000
jmp rax
add eax, 0xfb620000
inc dword [rax]
add byte [rax], al
mov esp, 0x20fffffb
add byte [rax], al
int1
sti
inc dword [rax + 6]
add byte [rax], al
sbb bh, ah
jmp qword [rax + 6]
add byte [rax], al
cld
inc dword [rax + 0x4e000006]
cld
jmp qword [rax + 0x74000006]
cld
inc eax
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
cld
jmp rax
add byte [rax], al
cld
inc dword [rax]
add byte [rax], al
cld
jmp qword [rax]
add byte [rax], al
std
inc dword [rax + 7]
add byte [rax], al
sbb eax, 0x60fffffd
add byte [rax], al
std
inc dword [rax + 0x6b000007]
std
jmp qword [rax - 0x41fffff9]
std
inc eax
add byte [rax], al
add dh, bh
jmp rax
add byte [rax], al
cmp dh, bh
inc dword [rax]
or byte [rax], al
add byte [rsi + rdi*8 - 1], cl
jmp qword [rax]
or byte [rax], al
add byte [rsi - 2], ah
inc dword [rax + 8]
add byte [rax], al
test eax, 0x60fffffe
or byte [rax], al
add byte [rax - 0x3f000002], bh
or byte [rax], al
add byte [rax], ch
dec dword [rax]
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4029b7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4029e7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
clc
in eax, 0xff
inc dword [rax]
add al, byte [rax]
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rsi + 0xeffffe9], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rcx + rbp*8 + 0x40ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jnp 0x402a4f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x402a69
add esp, dword [rax + 0x11]
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x2c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
xchg eax, esp
jmp 0xa542a75
add byte [rax], al
add al, 0xfc
xor byte [rax], al
adc byte [rsi + 0x60d4302], al
lea r8, [rbx]
mov word [rbx + rax*4], es
add eax, 0xc0a0203
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x18], al
jge 0x402aa6
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add byte [rax], al
add byte [rax - 0xd], bl
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 1
add byte [rax], al
pop rax
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 1
add byte [rax], al
push rsp
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
add byte [rax - 0xd], dl
jmp qword [rdx]
add byte [rax], al
add al, 0x37
xor dword [rax], eax
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add byte [rax], al
add byte [rdx + 0x44fffff3], cl
add byte [rax], al
add byte [rdi + rax*2], al
xor dword [rax], eax
adc byte [rsi + 0x60d4302], al
jg 0x402b6b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add byte [rsi + 0x28fffff3], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], eax
add byte [rsi + 0x4cfffff3], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 1
add byte [rax], al
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 2
add byte [rax], al
out dx, al
ljmp [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 2
add byte [rax], al
cli
lcall [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add r8b, byte [rax]
add byte [rax], bh
hlt
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rdx - 0xc], al
push qword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
add ch, byte [rdi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
test byte [rdx], al
add byte [rax], al
hlt
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add dl, al
hlt
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte [rax]
add byte [rsi + 0x1bfffff4], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rdx + 0x5efffff4], ch
add byte [rax], al
add byte [rbx + rcx*2], al
xor dword [rax], eax
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rdx], es
add byte [rax], al
loopne 0x402cce
call qword [rax]
add byte [rax], al
add al, 0x57
xor dword [rax], eax
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 3
add byte [rax], al
or ch, dh
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x402d1f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add eax, dword [rax]
add byte [rsi*8 + 0xeffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x402d41
add byte [rax], al
sbb dh, ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add byte [rsi*8 + 0x1dffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 3
add byte [rax], al
and dh, ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rax], dl
cmc
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x75
or al, 7
or byte [rax + rax], bl
add byte [rax], al
hlt
add eax, dword [rax]
add byte [rax], dh
cmc
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 4
add byte [rax], al
pop rdx
cmc
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 4
add byte [rax], al
xchg eax, esp
cmc
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x402e1f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add al, 0
add byte [rcx + 0x29fffff5], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x402e42
add byte [rax], al
mov dl, 0xf5
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add al, 0
add byte [rax + 0xefffff5], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 4
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
cmc
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rbp + rsi*8 + 0x33ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add al, 0
add byte [rdi + 0x2efffff5], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
adc al, 5
add byte [rax], al
int 0xf5
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 5
add byte [rax], al
cmc
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add eax, 0xf5c60000
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x402f43
add byte [rax], al
mov ch, 0xf5
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add eax, 0xf5c00000
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 5
add byte [rax], al
ret
cmc
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add eax, 0xf5f60000
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x402fbf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add eax, 0xf6180000
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x402fdf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 6
add byte [rax], al
xor dh, dh
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 6
add byte [rax], al
and al, 0xf6
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add byte [rax], al
idiv bh
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x40303f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x403044
add byte [rax], al
idiv r15b
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
add esp, ebx
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40307f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 6
add byte [rax], al
and ebx, esp
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, dl
add byte [rax], al
cmc
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x4030da
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
sbb al, 7
add byte [rax], al
sbb dh, dh
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add rax, -0x7bffed10
add dword [rip - 0x58ffec73], eax
add dword [rcx + 0x13d404], eax
pop qword [rsi]
jne 0x4030b7
adc eax, dword [rax]
cwde
or al, byte [rip - 0xffec2c]
or al, 0x99
add ebx, eax
adc eax, dword [rax]
or dword [rdi], 0x13b201dc
add cl, al
adc dword [rdx - 0x3d], edx
adc eax, dword [rax]
mov byte [rbx], dl
js 0x403136
add bh, bh
inc dword [rcx]
or al, 0x27
add eax, 0x53a0000
add byte [r14 + 5], dl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
movabs eax, dword [0xa000000000004013]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 4], dh
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
cmp eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 6], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add rax, 0
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], dl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rsi + 0x400b], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte es:[rax], al
add byte [rax], al
add byte [rax], al
adc byte ss:[rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], r8b
add byte [rax], al
add byte [rax], al
push rsi
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40406a
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4010], al
add byte [rax], al
add byte [rsi + 0x4010], dl
add byte [rax], al
add byte [rsi + 0x4010], ah
add byte [rax], al
add byte [rsi + 0x4010], dh
add byte [rax], al
add dh, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x10, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword es:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword ss:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], r8d
add byte [rax], al
add byte [rax], al
push rsi
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc word [rax], ax
add byte [rax], al
add byte [rax], al
jbe 0x4040eb
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4011], al
add byte [rax], al
add byte [rsi + 0x4011], dl
add byte [rax], al
add byte [rsi + 0x4011], ah
add byte [rax], al
add byte [rsi + 0x4011], dh
add byte [rax], al
add dh, al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x404198
je 0x4041a1
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x4041af
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x4041ac
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 6], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rsi + 0x400b], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x400c], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, bl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add al, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, 0
loopne 0x404291
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x4011e000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add al, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sldt word [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x4029], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add ah, bh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
call 0x40a382
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x603df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], ah
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x12], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4012], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x43], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
call 0x40a51a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rcx + 0x43], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc byte [rax]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sub byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx + 1], al
add byte [rax], al
add al, byte [rax]
add byte [rbx + 0x13], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], dh
add byte [rax], al
add al, byte [rax]
add byte [rcx + 0x4013], ah
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000001], al
add byte [rdx], dl
add al, bh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
add dword [rax], eax
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], bl
add byte [rcx], dl
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1000001], dh
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
clc
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld dword [rcx]
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x40a6fa
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], ah
add byte [rdx], bl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
add dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
and eax, 0x40
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, dword [rdx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add r8b, byte [r8]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], al
add byte [rax], al
adc al, byte [rax]
add al, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], bh
add byte [rax], al
and al, byte [rax]
add dh, ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000002], ah
add byte [rsi], cl
add byte [rax + 0x4021], bh
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdx], 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, dword [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 3], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add al, byte [rax]
add byte [rdx], dl
add byte [rdi], cl
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 3], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 3], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000003], ch
add byte [rsi], cl
add byte [rdx], dh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol dword [rbx], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x22], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x21], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 4], ah
add byte [rax], al
and al, byte [rax]
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4022], dh
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 5], dh
add byte [rax], al
and al, byte [rax]
add ah, al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000005], bl
add byte [rax], al
add byte [rax + 0x10], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000005], bh
add byte [rsi], cl
add byte [rsi], bh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x4049cf
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x40], dl
add byte [rax], al
xor eax, 0
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], 0
add byte [rcx], dl
add byte [rax], dl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop qword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sysret
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x40], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rax + 7], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdi], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4022], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc byte [rdi]
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
adc byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 8], dl
add byte [rax], al
and al, byte [rax]
add dh, dl
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx + 0x120000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 9
add byte [rax], al
and al, byte [rax]
add al, dh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4021], bh
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
and dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000009], cl
add byte [rsi], cl
add dl, dh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x11000009], ah
add byte [rbx], bl
add byte [rax + 0x42], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x11000009], bh
add bl, byte [rdx]
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x4026], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
or al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x4026], dl
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rdx], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000a], dh
add byte [rsi], cl
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xa], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x401f], cl
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xa], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x20], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200000b], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xb], bl
add byte [rax], al
and al, byte [rax]
add ch, dh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000b], al
add byte [rsi], cl
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000b], ah
add byte [rbx], bl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx + 0x220000], ch
add byte [rdx], bh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x20], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add al, bl
and eax, 0x40
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x12404d69
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
or eax, 0x220000
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x120000], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0xd
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x25], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x404dc7
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0xd
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdx], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add al, ah
or eax, 0x220000
add byte [rax], bl
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xe], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
add byte es:[rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add byte [rax + 0x43], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1200000e], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x401f], bh
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisttp qword [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ecx, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x24], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
sldt word [rax]
and al, byte [rax]
add byte [rsi + 0x4013], dh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xf], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
xor byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000f], dh
add byte [rsi], cl
add byte [rsi], bh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x404ee9
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4024], ch
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x10], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1e], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x404f32
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
and byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx + 0x120000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0x11], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000010], bh
add byte [rsi], cl
add byte [rsp + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x11], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x11], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
add byte es:[rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
adc dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000011], ch
add byte [rsi], cl
add byte [rdx + 0x21], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
adc dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
adc dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x20], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
lodsd eax, dword [rsi]
adc al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], cl
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdx], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x40509d
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4025], dl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x13
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x40], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rbx + 0x14], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1e], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x4050fe
add byte [rax], al
and al, byte [rax]
add cl, cl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x22000014
add byte [rsi], cl
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000001], al
add byte [rsi], cl
add dh, ah
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
jge 0x40512a
add byte [rax], al
add byte [rax], al
add byte [rax], al
and cl, byte [rdx]
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
ror byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
and dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x4051d8
je 0x4051dc
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40518e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40520c
jb 0x405212
pop rdi
jne 0x40521b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x405215
je 0x405211
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x405231
jb 0x405237
pop rdi
jne 0x405240
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x405243
jns 0x405233
outsb dx, byte gs:[rsi]
je 0x40524a
jns 0x4051da
jb 0x40523e
insd dword [rdi], dx
pop rdi
jne 0x405250
insd dword [rdi], dx
jns 0x4051e6
pop rdi
pop rdi
jb 0x40524c
insd dword [rdi], dx
pop rdi
jne 0x40525e
insd dword [rdi], dx
jns 0x405253
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40525e
jns 0x40525e
outsb dx, byte gs:[rsi]
je 0x405275
jns 0x405205
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x40525c
xor dword [rcx], edi
jo 0x40527d
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x405295
jb 0x405298
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x405277
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405296
jb 0x4052a1
add byte [rdi + 0x5a], bl
push rbx
je 0x40528c
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x405299
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
xor r9b, byte [rbp + 0x58]
add byte [rdi + 0x5a], bl
xor r9, qword [rcx + 0x4e]
add byte [rdi + 0x5a], r11b
xor al, 0x4c
add byte [rdi + 0x5a], r11b
xor r12, qword [rbp + 0x70]
jae 0x405277
pop rdi
pop rdx
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jbe 0x4052e6
jb 0x4052b8
jae 0x4052f4
insb byte [rdi], dx
jbe 0x4052ed
jbe 0x4052d0
xor dword [rcx], edi
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x40531d
je 0x405315
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x405323
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x405339
jb 0x40533c
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x405351
pop rdi
pop r15
insd dword [rdi], dx
imul ebp, dword [rsi], 0x52465f5f
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405394
jns 0x405394
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4053a5
jns 0x4053a5
jae 0x4053bc
jb 0x4053bf
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x40538d
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4053d4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4053dd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4053d1
imul eax, dword [rbp + 0x31], 0x61656430
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x6e697270
je 0x405407
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6c5f5f00
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x405430
je 0x40540f
imul ebp, dword [rcx + 0x45], 0x534b5262
je 0x405403
jo 0x405432
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor eax, 0x5a5f005f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405447
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405450
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405444
imul eax, dword [rbp + 0x43], 0x4b524531
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40543d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40547e
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4054a3
jb 0x4054a6
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x405498
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x4054b9
jae 0x405449
jo 0x4054c0
je 0x4054c0
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x645a5f00
insb byte [rdi], dx
push rax
jbe 0x4054a2
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4054d8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4054e1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4054d5
imul eax, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x4b524531
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x40551b
jb 0x40551f
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
imul rax, qword [r13 + 0x43], 0x764532
pop rdi
pop rdx
push rbx
je 0x405509
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x405570
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x405578
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405581
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405575
imul eax, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
push rbx
je 0x405570
pop rdi
jae 0x4055b1
jb 0x4055ae
jns 0x40558a
push rax
imul ebp, dword [rcx + 0x45], 0x535f5476
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40558b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4055cc
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4055bd
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4055fe
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x405619
js 0x40561f
je 0x4055f8
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40562f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405648
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x405624
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405663
movsxd rbx, dword [rdi + 0x73]
je 0x405671
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40566c
je 0x405681
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x40568c
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40565f
jbe 0x405690
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4056a5
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x6350634b
push rbx
je 0x40568c
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4056cb
movsxd rbx, dword [rdi + 0x73]
je 0x4056d9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4056d4
je 0x4056e9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rsp
insd dword [rdi], dx
imul esp, dword [rbx + 0x6c], 0x70667464
pop rdi
xor al, 0x62
jae 0x4056fc
movsxd r13, dword [r12 + 0x74]
jo 0x4056cf
pop rdi
xor al, 0x62
jae 0x40570a
push r10
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405721
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor dword [rdi + 0x45], ebx
push r10
push rbx
pop rdi
push r12
xor byte [rdi + 0x53], bl
pop rdi
add byte [r15 + 0x5a], r11b
push rbx
je 0x405711
jo 0x405740
imul esi, dword [rdx + 0x49], 0x43456969
xor dword [rcx + 0x52], ecx
imul edx, dword [rbx + 0x32], 0x4545765f
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405736
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405754
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405795
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40574b
pop rdi
push r12
pop r15
jb 0x4057b9
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x40579e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4057df
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x534e5a5f
je 0x4057d3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405812
movsxd rbx, dword [rdi + 0x73]
je 0x405820
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40581b
je 0x405830
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x49], bl
pop r15
jae 0x40585a
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x405826
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405867
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x405872
push rsp
jo 0x405875
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405865
jbe 0x405822
pop rdi
pop rdx
push rbx
je 0x40585f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40589e
movsxd rbx, dword [rdi + 0x73]
je 0x4058ac
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4058a7
je 0x4058bc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
movsxd rbp, dword [rbx + 0x45]
jbe 0x40589f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4058d8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4058f1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x4058cd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40590c
movsxd rbx, dword [rdi + 0x73]
je 0x40591a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405915
je 0x40592a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
jae 0x405935
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40594d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405966
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x405942
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405981
movsxd rbx, dword [rdi + 0x73]
je 0x40598f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40598a
je 0x40599f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
jae 0x4059a6
jbe 0x405944
pop rdi
push r12
pop r15
jb 0x4059b0
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x4059c5
pop rdi
jae 0x4059db
jb 0x4059de
add byte [rdi + 0x5a], bl
push rbx
je 0x4059a8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4059e7
movsxd rbx, dword [rdi + 0x73]
je 0x4059f5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4059f0
je 0x405a05
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4059ec
xor bl, byte [rdi + 0x44]
jae 0x405a35
jb 0x405a32
jns 0x405a24
jne 0x405a40
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x405a49
jb 0x405a46
jns 0x405a22
push rax
imul eax, dword [rbp + 0x45], 0x535f5476
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x405a21
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405a60
movsxd rbx, dword [rdi + 0x73]
je 0x405a6e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405a69
je 0x405a7e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jb 0x405a81
jo 0x405a8a
movsxd rsp, dword [rbp + 0x45]
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405a89
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405aa2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rdx, dword [r11 + 0x34]
pop rdi
push r11
cmp dword [rdi + 0x4e], ebx
push rbx
pop rdi
push r8
movsxd rdx, dword [rbx + 0x34]
pop rdi
push r11
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405aa3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405ae4
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405ad5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405b16
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405b27
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405b30
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405b24
imul eax, dword [rbp + 0x43], 0x764531
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405b2b
pop rdi
jae 0x405b6c
jb 0x405b69
jns 0x405b45
push rax
imul eax, dword [rbp + 0x76], 0x31535f54
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405b3f
movsxd rbp, dword [rdi + 0x75]
je 0x405b50
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x405b91
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x405b61
xor byte [rdi + 0x49], bl
je 0x405b9a
jb 0x405b96
jae 0x405ba0
push r8
imul ecx, dword [rdx + 0x30], 0x5f374545
push rbx
pop rdi
jae 0x405bb0
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405bb9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405bc2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405bb6
imul eax, dword [rbp + 0x43], 0x4b524532
push rbx
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
imul rax, qword [r13 + 0x44], 0x764532
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x764531
pop rdi
pop rdx
push rbx
je 0x405bda
insd dword [rdi], dx
js 0x405bf4
push rbx
je 0x405be2
jo 0x405c11
imul esi, dword [rdx + 0x49], 0x45456969
push rdx
push r12
pop rdi
push rbx
xor al, 0x5f
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405c2b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405c44
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [r14 + 0x53]
je 0x405c21
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405c60
movsxd rbx, dword [rdi + 0x73]
je 0x405c6e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405c69
je 0x405c7e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor cl, byte [r9 + 0x50]
movsxd rax, dword [rbp + 0x45]
push rdx
push rbx
xor byte [rdi + 0x49], bl
push rsp
pop rdi
push rbx
pop rdi
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x405c73
xor byte [rdi + 0x5f], bl
jb 0x405cad
pop rdi
jae 0x405cac
insd dword [rdi], dx
push r11
pop r15
push rbx
pop rdi
pop rdi
pop rdi
jbe 0x405cbb
insb byte [rdi], dx
jne 0x405cc2
push r11
cmp byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x405ce0
jo 0x405cce
add byte [r15 + 0x5a], r11b
push rbx
je 0x405caa
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405ce9
movsxd rbx, dword [rdi + 0x73]
je 0x405cf7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405cf2
je 0x405d07
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor esp, dword [rbp + 0x6e]
jbe 0x405ce9
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405cf0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405d29
je 0x405d3e
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x405d23
jbe 0x405d54
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5f], bl
jae 0x405d78
pop rdi
jae 0x405d7c
jb 0x405d7f
add byte [rdi + 0x5a], bl
push rbx
je 0x405d43
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405d84
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdi], esi
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x405d97
pop rdi
jae 0x405da9
outsd dx, dword [rsi]
jb 0x405d99
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x43], 0x4b524532
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405d85
insd dword [rdi], dx
js 0x405d9f
imul eax, dword [rbp + 0x52], 0x535f544b
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdi
jae 0x405ddb
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405de8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405e01
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [r14 + 0x53]
je 0x405dde
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405e1d
movsxd rbx, dword [rdi + 0x73]
je 0x405e2b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405e26
je 0x405e3b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r9 + 0x50], ecx
movsxd rax, dword [rbp + 0x45]
push rdx
push rbx
xor byte [rdi + 0x49], bl
push rsp
pop rdi
push rbx
pop rdi
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x405e30
xor byte [rdi + 0x5f], bl
jb 0x405e6a
pop rdi
jae 0x405e69
insd dword [rdi], dx
push r11
pop r15
push rbx
pop rdi
pop rdi
pop rdi
jbe 0x405e78
insb byte [rdi], dx
jne 0x405e7f
push r11
cmp byte [rdi + 0x45], bl
pop rdi
pop rdi
je 0x405e9d
jo 0x405e8b
add byte [r15 + 0x5a], r11b
push rbx
je 0x405e65
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405e9f
jbe 0x405ed0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
imul edi, dword [rax + 0x45], 0x5a5f006d
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405ecc
pop rdi
pop rdi
jne 0x405f0d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x405f1d
je 0x405f12
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x405f30
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x405f39
je 0x405f2e
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x45], 0x535f5445
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x405f1d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405f5c
movsxd rbx, dword [rdi + 0x73]
je 0x405f6a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405f65
je 0x405f7a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jbe 0x405f9b
jb 0x405f6d
jae 0x405fa9
insb byte [rdi], dx
jbe 0x405fa2
jbe 0x405f40
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x405faa
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405fc3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [r14 + 0x53]
je 0x405fa0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405fdf
movsxd rbx, dword [rdi + 0x73]
je 0x405fed
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405fe8
je 0x405ffd
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
jae 0x406004
jbe 0x405fa2
pop rdi
pop rdx
push rbx
je 0x405fd8
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
imul ebp, dword [rbp + 0x69], 0x5f394e45
pop rdi
outsb dx, byte [esi]
jne 0x40601f
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x406008
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x40602d
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x40604e
insb byte [rdi], dx
jne 0x406055
push r12
pop rdi
pop rdi
pop rdi
je 0x406072
jo 0x406060
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x406055
push rax
push rdx
push rbx
outsd dx, dword [rsi]
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x406060
jo 0x40608f
imul esi, dword [rdx + 0x49], 0x61456969
push rbx
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x406073
pop rdi
pop rdi
je 0x4060af
jb 0x4060b8
ja 0x4060aa
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40609a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4060d3
je 0x4060e8
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
imul ebp, dword [rbp], 0x74535a5f
outsw dx, word [rsi]
jb 0x406116
jb 0x406106
push r10
imul eax, dword [rbp + 0x4f], 0x4e525f54
push rbx
je 0x4060df
jb 0x406116
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40611a
pop rdi
jb 0x40611d
jb 0x406121
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x406138
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x406104
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40613e
je 0x406153
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x40611e
xor esp, dword [rdx + 0x61]
jae 0x40615b
movsxd rbx, dword [rdi + 0x6f]
jae 0x40616b
jb 0x40615e
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40614a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40618b
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x406141
pop rdi
pop rdx
push rbx
je 0x406178
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x4061c9
je 0x4061be
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x45], 0x31535f54
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4061ab
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4061ea
movsxd rbx, dword [rdi + 0x73]
je 0x4061f8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4061f3
je 0x406208
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4061fb
jbe 0x40622c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
je 0x406244
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
js 0x40627b
pop rdi
jo 0x40626b
jb 0x40627b
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x406256
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406297
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4062bb
jae 0x40629a
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4062ba
je 0x4062cf
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x40629f
xor esp, dword [rdx + 0x61]
jae 0x4062dc
movsxd rbx, dword [rdi + 0x6f]
jae 0x4062ec
jb 0x4062df
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rdx
push rbx
je 0x4062c3
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406302
movsxd rbx, dword [rdi + 0x73]
je 0x406310
imul ebp, dword [rsi + 0x67], 0x5f345349
push rbx
xor eax, 0x5f31545f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x44], 0x764531
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x406335
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40633e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406332
imul eax, dword [rbp + 0x38], 0x5f78616d
jae 0x40635b
jp 0x406359
jbe 0x4062f7
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x406369
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x406341
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x406382
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40639d
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x4063b0
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x406384
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4063c3
movsxd rbx, dword [rdi + 0x73]
je 0x4063d1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4063cc
je 0x4063e1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4063ce
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40640d
movsxd rbx, dword [rdi + 0x73]
je 0x40641b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406416
je 0x40642b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul ebp, dword ss:[rsi + 0x73], 0x49747265
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406435
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40644e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rdx, dword [rbx + 0x34]
pop rdi
jbe 0x40643b
push r11
cmp dword [rdi + 0x4e], ebx
push rbx
pop rdi
push r8
movsxd rdx, dword [r11 + 0x34]
pop rdi
push r12
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x40644b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40648a
movsxd rbx, dword [rdi + 0x73]
je 0x406498
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406493
je 0x4064a8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
pop rdi
pop r15
je 0x4064ac
jbe 0x40648e
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40649a
jbe 0x4064cb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dh, byte [rcx]
pop rdi
pop r15
jne 0x4064e9
je 0x4064de
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x5f006d45
pop rdx
push rbx
je 0x4064c9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406508
movsxd rbx, dword [rdi + 0x73]
je 0x406516
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406511
je 0x406526
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x40650a
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406543
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40654c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406540
imul eax, dword [rbp + 0x38], 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x406508
pop rdi
pop rdx
push rbx
je 0x406545
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406584
movsxd rbx, dword [rdi + 0x73]
je 0x406592
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40658d
je 0x4065a2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x40658b
movsxd r8, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4065bb
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4065d4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x4065b0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4065ef
movsxd rbx, dword [rdi + 0x73]
je 0x4065fd
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4065f8
je 0x40660d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4065ef
jbe 0x406620
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x406608
pop rdi
pop rdi
jne 0x406649
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x406659
je 0x40664e
outsb dx, byte [rsi]
pop rdi
push r8
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40663f
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [rbp + r12*2 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4066b9
jo 0x4066a7
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4066b0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4066b9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4066ad
imul eax, dword [rbp + 0x43], 0x764532
add byte [rsi], ch
jae 0x4066e8
insd dword [rdi], dx
je 0x4066d3
add byte [rsi], ch
jae 0x4066eb
jb 0x4066ed
add byte [rsi], ch
jae 0x4066e7
jae 0x4066f5
jb 0x4066f7
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4066f8
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x406706
outsb dx, byte cs:[esi]
jne 0x4066d4
jne 0x406712
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x4066e2
push 0x687361
jns 0x40672b
jae 0x406738
insd dword [rdi], dx
add byte [rsi], ch
jns 0x406733
jae 0x40673b
jb 0x4066c9
outsb dx, byte cs:[esi]
jne 0x4066fc
jbe 0x406735
jb 0x406745
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x406709
jbe 0x406742
jb 0x406752
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40674d
insb byte [rdi], dx
jns 0x40675c
add byte [rsi], ch
jb 0x406757
insb byte [rdi], dx
jo 0x406763
je 0x4066f9
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x406732
outsd dx, dword [esi]
je 0x406708
je 0x406770
js 0x406781
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x406786
je 0x40677c
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40679f
jo 0x4067b3
pop rdi
je 0x4067a3
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4067b1
jns 0x406752
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x4067cd
jns 0x40675e
push 0x63
jb 0x406763
jns 0x4067d5
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x4067df
je 0x406775
je 0x4067db
add byte [rsi], ch
jae 0x4067f2
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x406789
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 3], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 6], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add rax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400b], ch
add byte [rax], al
add byte [rsi + 0xb], ch
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], dl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
or al, 0x40
add byte [rax], al
add byte [rax], al
add al, bl
or al, 0
add byte [rax], al
add byte [rax], al
add al, ch
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
ror byte [rdi], 0
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
loopne 0x406ab9
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
loopne 0x406afb
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
lock adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4029], bl
add byte [rax], al
add byte [rax + 0x29], bl
add byte [rax], al
add byte [rdi + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
cld
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
call 0x406cea
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
clc
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [r8], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [r8], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [r8], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul esp, dword [rsi], 0
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x41], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x51], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or edx, dword [rip]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
