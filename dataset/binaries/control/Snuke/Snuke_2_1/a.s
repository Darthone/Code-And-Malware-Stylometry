xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6060bf
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x400b20
mov eax, 0
test rax, rax
je 0x400b20
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400b68
mov eax, 0
test rax, rax
je 0x400b68
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x205661], 0
jne 0x400b8a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x20564e], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400ba0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400b9b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x20
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x10]
mov rsi, rax
mov edi, 0x403b35
mov eax, 0
call sym.imp.scanf
mov dword [rbp - 0xc], 1
mov eax, dword [rbp - 0x10]
cmp dword [rbp - 0xc], eax
jg 0x400c18
mov eax, dword [rbp - 0xc]
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
lea rax, [rbp - 0x11]
mov rdi, rax
call sym.Solver::solve
add dword [rbp - 0xc], 1
jmp 0x400bea
mov eax, 0
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x400c31
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x400c6e
cmp dword [rbp - 8], 0xffff
jne 0x400c6e
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x108
mov qword [rbp - 0x118], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rax, [rbp - 0x108]
mov rsi, rax
mov edi, obj.std::cin
call 0x400a30
mov rdx, rax
lea rax, [rbp - 0x104]
mov rsi, rax
mov rdi, rdx
call 0x400a30
lea rax, [rbp - 0x60]
mov rdi, rax
call method.std::allocator_std::vector_longlong_std::allocator_longlong___.allocator
lea rax, [rbp - 0x80]
mov rdi, rax
call 0x401650
mov eax, dword [rbp - 0x108]
movsxd rsi, eax
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x40]
mov rcx, rdx
mov edx, obj.LINF
mov rdi, rax
call 0x401688
mov eax, dword [rbp - 0x108]
movsxd rsi, eax
lea rcx, [rbp - 0x60]
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x401650
mov eax, dword [rbp - 0x108]
movsxd rcx, eax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xa0]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x401650
mov eax, dword [rbp - 0x108]
movsxd rcx, eax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x80]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
mov dword [rbp - 0x100], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0x100], eax
jge 0x400e4e
mov eax, dword [rbp - 0x100]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rbx, rax
mov eax, dword [rbp - 0x100]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::istream::operator__
add dword [rbp - 0x100], 1
jmp 0x400de9
mov dword [rbp - 0xfc], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xfc], eax
jge 0x400ecc
mov dword [rbp - 0xf8], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xf8], eax
jge 0x400ec3
mov eax, dword [rbp - 0xf8]
movsxd rbx, eax
mov eax, dword [rbp - 0xfc]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
add dword [rbp - 0xf8], 1
jmp 0x400e70
add dword [rbp - 0xfc], 1
jmp 0x400e58
mov dword [rbp - 0xf4], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xf4], eax
jge 0x400f95
mov dword [rbp - 0xf0], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xf0], eax
jge 0x400f89
mov eax, dword [rbp - 0xf0]
movsxd rbx, eax
mov eax, dword [rbp - 0xf4]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
cmp rax, -1
sete al
test al, al
je 0x400f7d
mov eax, dword [rbp - 0xf0]
movsxd rbx, eax
mov eax, dword [rbp - 0xf4]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
movabs rcx, 0xde0b6b3a7640000
mov qword [rax], rcx
add dword [rbp - 0xf0], 1
jmp 0x400ef2
add dword [rbp - 0xf4], 1
jmp 0x400ed6
mov dword [rbp - 0xec], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xec], eax
jge 0x4010f2
mov dword [rbp - 0xe8], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xe8], eax
jge 0x4010e6
mov dword [rbp - 0xe4], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xe4], eax
jge 0x4010da
mov eax, dword [rbp - 0xe4]
movsxd rbx, eax
mov eax, dword [rbp - 0xe8]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov r13, rax
mov eax, dword [rbp - 0xec]
movsxd rbx, eax
mov eax, dword [rbp - 0xe8]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov r12, qword [rax]
mov eax, dword [rbp - 0xe4]
movsxd rbx, eax
mov eax, dword [rbp - 0xec]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
add rax, r12
mov qword [rbp - 0x40], rax
mov eax, dword [rbp - 0xe4]
movsxd rbx, eax
mov eax, dword [rbp - 0xe8]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::min_longlong_
mov rax, qword [rax]
mov qword [r13], rax
add dword [rbp - 0xe4], 1
jmp 0x400fd7
add dword [rbp - 0xe8], 1
jmp 0x400fbb
add dword [rbp - 0xec], 1
jmp 0x400f9f
lea rax, [rbp - 0x109]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::allocator
lea rax, [rbp - 0x10a]
mov rdi, rax
call sym.std::allocator_double_::allocator
movsd xmm0, qword [rip + 0x2a30]
movsd qword [rbp - 0xc8], xmm0
mov eax, dword [rbp - 0x108]
movsxd rsi, eax
lea rcx, [rbp - 0x10a]
lea rdx, [rbp - 0xc8]
lea rax, [rbp - 0x40]
mov rdi, rax
call method.std::vector_double_std::allocator_double__.vector
mov eax, dword [rbp - 0x108]
movsxd rsi, eax
lea rcx, [rbp - 0x109]
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
lea rax, [rbp - 0x10a]
mov rdi, rax
call sym.std::allocator_double_::_allocator
lea rax, [rbp - 0x109]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
mov dword [rbp - 0xe0], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xe0], eax
jge 0x4012ea
mov dword [rbp - 0xdc], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xdc], eax
jge 0x4012de
mov eax, dword [rbp - 0xe0]
movsxd rdx, eax
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov r12, qword [rax]
mov eax, dword [rbp - 0xdc]
movsxd rbx, eax
mov eax, dword [rbp - 0xe0]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
cmp r12, rax
setl al
test al, al
jne 0x4012d1
mov eax, dword [rbp - 0xdc]
movsxd rbx, eax
mov eax, dword [rbp - 0xe0]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov r12, rax
mov eax, dword [rbp - 0xdc]
movsxd rbx, eax
mov eax, dword [rbp - 0xe0]
movsxd rdx, eax
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
pxor xmm1, xmm1
cvtsi2sd xmm1, rax
movsd qword [rbp - 0x120], xmm1
mov eax, dword [rbp - 0xe0]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rbp - 0x120]
divsd xmm1, xmm0
movapd xmm0, xmm1
movsd qword [r12], xmm0
jmp 0x4012d2
nop
add dword [rbp - 0xdc], 1
jmp 0x4011b3
add dword [rbp - 0xe0], 1
jmp 0x401197
mov dword [rbp - 0xd8], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xd8], eax
jge 0x40144e
mov dword [rbp - 0xd4], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xd4], eax
jge 0x401442
mov dword [rbp - 0xd0], 0
mov eax, dword [rbp - 0x108]
cmp dword [rbp - 0xd0], eax
jge 0x401436
mov eax, dword [rbp - 0xd0]
movsxd rbx, eax
mov eax, dword [rbp - 0xd4]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov r12, rax
mov eax, dword [rbp - 0xd8]
movsxd rbx, eax
mov eax, dword [rbp - 0xd4]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm2, qword [rax]
movsd qword [rbp - 0x120], xmm2
mov eax, dword [rbp - 0xd0]
movsxd rbx, eax
mov eax, dword [rbp - 0xd8]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm0, qword [rax]
addsd xmm0, qword [rbp - 0x120]
movsd qword [rbp - 0x40], xmm0
mov eax, dword [rbp - 0xd0]
movsxd rbx, eax
mov eax, dword [rbp - 0xd4]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::min_double_
movsd xmm0, qword [rax]
movsd qword [r12], xmm0
add dword [rbp - 0xd0], 1
jmp 0x40132c
add dword [rbp - 0xd4], 1
jmp 0x401310
add dword [rbp - 0xd8], 1
jmp 0x4012f4
mov dword [rbp - 0xcc], 0
mov eax, dword [rbp - 0x104]
cmp dword [rbp - 0xcc], eax
jge 0x401517
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xc8]
mov rsi, rax
mov edi, 0x403b28
mov eax, 0
call sym.imp.scanf
mov eax, dword [rbp - 0xc8]
sub eax, 1
mov dword [rbp - 0xc8], eax
mov eax, dword [rbp - 0x40]
sub eax, 1
mov dword [rbp - 0x40], eax
mov eax, dword [rbp - 0x104]
sub eax, 1
cmp eax, dword [rbp - 0xcc]
jne 0x4014b8
mov r12d, 0xa
jmp 0x4014be
mov r12d, 0x20
mov eax, dword [rbp - 0x40]
movsxd rbx, eax
mov eax, dword [rbp - 0xc8]
movsxd rdx, eax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rax, qword [rax]
mov esi, r12d
mov qword [rbp - 0x120], rax
movsd xmm0, qword [rbp - 0x120]
mov edi, str._.10f_c
mov eax, 1
call sym.imp.printf
add dword [rbp - 0xcc], 1
jmp 0x401458
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_vector
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_vector
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x401641
jmp 0x40163c
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
jmp 0x40157a
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
jmp 0x401622
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
jmp 0x401613
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
jmp 0x4015d3
mov rbx, rax
lea rax, [rbp - 0x10a]
mov rdi, rax
call sym.std::allocator_double_::_allocator
lea rax, [rbp - 0x109]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
jmp 0x401607
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_vector
jmp 0x401607
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x108
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_longlong_.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_M_fill_initialize
jmp 0x4016eb
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_longlong__longlong_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_fill_initialize
jmp 0x4017d1
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong____std::vector_longlong_std::allocator_longlong___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_base
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_M_default_initialize
jmp 0x401877
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
cmp rdx, rax
jge 0x4018ec
mov rax, qword [rbp - 0x10]
jmp 0x4018f0
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_fill_initialize
jmp 0x40198d
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_fill_initialize
jmp 0x401a73
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double____std::vector_double_std::allocator_double___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 8]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
jbe 0x401b30
mov rax, qword [rbp - 0x10]
jmp 0x401b34
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_create_storage
jmp 0x401bc1
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_longlong__unsignedlong_longlong_longlong_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_longlong__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_create_storage
jmp 0x401d23
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_std::vector_longlong_std::allocator_longlong____unsignedlong_std::vector_longlong_std::allocator_longlong___std::vector_longlong_std::allocator_longlong___
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_longlong__unsignedlong_longlong_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_double_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_create_storage
jmp 0x401edb
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_double__unsignedlong_double_double_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_create_storage
jmp 0x40203d
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_std::vector_double_std::allocator_double____unsignedlong_std::vector_double_std::allocator_double___std::vector_double_std::allocator_double___
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_longlong_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x4021fc
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_longlong__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
lea rdx, [rcx + rax]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402336
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_longlong_std::allocator_longlong____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_std::vector_longlong_std::allocator_longlong____unsignedlong_std::vector_longlong_std::allocator_longlong___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::vector_longlong_std::allocator_longlong____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_longlong__unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x402806
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402490
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::allocator_std::vector_double_std::allocator_double___.allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
lea rdx, [rcx + rax]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x4025ca
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_double_std::allocator_double____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_std::vector_double_std::allocator_double____unsignedlong_std::vector_double_std::allocator_double___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::vector_double_std::allocator_double____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x402676
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::allocate
jmp 0x40267b
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_true_::__uninit_fill_n_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40273e
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_longlong_std::allocator_longlong____::allocate
jmp 0x402743
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_false_::__uninit_fill_n_std::vector_longlong_std::allocator_longlong____unsignedlong_std::vector_longlong_std::allocator_longlong___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x4027d9
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_longlong_std::allocator_longlong___
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong___
add qword [rbp - 8], 0x18
jmp 0x4027b4
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_longlong__unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_double_.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x402858
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::allocate
jmp 0x40285d
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_true_::__uninit_fill_n_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x402920
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_double_std::allocator_double____::allocate
jmp 0x402925
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_false_::__uninit_fill_n_std::vector_double_std::allocator_double____unsignedlong_std::vector_double_std::allocator_double___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x4029bb
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_double_std::allocator_double___
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double___
add qword [rbp - 8], 0x18
jmp 0x402996
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x30], 0
je 0x402af3
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::vector_longlong_std::allocator_longlong___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::vector_longlong_std::allocator_longlong___std::vector_longlong_std::allocator_longlong__const__
sub qword [rbp - 0x30], 1
add qword [rbp - 0x18], 0x18
jmp 0x402ac2
mov rax, qword [rbp - 0x18]
jmp 0x402b2c
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov qword [rbp - 0x10], 0
lea rdx, [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_longlong__unsignedlong_longlong_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402bae
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x30], 0
je 0x402ce5
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::vector_double_std::allocator_double___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::vector_double_std::allocator_double___std::vector_double_std::allocator_double__const__
sub qword [rbp - 0x30], 1
add qword [rbp - 0x18], 0x18
jmp 0x402cb4
mov rax, qword [rbp - 0x18]
jmp 0x402d1e
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402d7e
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_longlong__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402df8
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::vector_longlong_std::allocator_longlong__const__
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x18
call 0x400c86
mov rbx, rax
test rbx, rbx
je 0x402e84
mov rsi, r13
mov rdi, rbx
call method.std::vector_longlong_std::allocator_longlong__.vector
jmp 0x402e84
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x400c98
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402ec0
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_double__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402f3a
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::vector_double_std::allocator_double__const__
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x18
call 0x400c86
mov rbx, rax
test rbx, rbx
je 0x402fc6
mov rsi, r13
mov rdi, rbx
call sym.std::vector_double_std::allocator_double__::vector
jmp 0x402fc6
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x400c98
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_longlong__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x10], rax
cmp qword [rbp - 0x10], 0
je 0x403041
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 8]
mov qword [rax], rdx
sub qword [rbp - 0x10], 1
add qword [rbp - 0x18], 8
jmp 0x403023
mov rax, qword [rbp - 0x18]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xaaaaaaaaaaaaaaa
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_longlong_std::allocator_longlong__._M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_longlong__::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__longlong_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x403164
jmp 0x40315f
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_double__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
movsd xmm0, qword [rax]
movsd qword [rbp - 8], xmm0
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x10], rax
cmp qword [rbp - 0x10], 0
je 0x4031e3
mov rax, qword [rbp - 0x18]
movsd xmm0, qword [rbp - 8]
movsd qword [rax], xmm0
sub qword [rbp - 0x10], 1
add qword [rbp - 0x18], 8
jmp 0x4031c3
mov rax, qword [rbp - 0x18]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xaaaaaaaaaaaaaaa
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_double_std::allocator_double__._M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_double__::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_double_::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__double_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x403306
jmp 0x403301
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_double_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403390
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4033f1
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403446
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4034f8
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403559
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4035ae
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_longlong_::allocator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x402806
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_longlong__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_longlongconst__longlong__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_double__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_doubleconst__double__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_longlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x4039c5
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x403a47
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop dword [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x202356]
push rbp
lea rbp, [rip + 0x20235e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x403ad6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x403ac0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
xchg byte [rcx], al
add byte [rcx], ch
sub dword [rax], edx
stosb byte [rdi], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword fs:[rsi], dword ptr [rdi]
mov bl, 0xb6
loopne str._.10f_c
mov ebx, 0xdfd9d7bd
jl 0x403b02
cmp eax, 0x64256425
add byte [rip + 0x6630312e], ah
and eax, 0x6630312e
and eax, 0x64250063
add byte [rbx + 0x61], al
jae 0x403ba1
and byte [rbx], ah
and eax, 0x203a64
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x674e, 0x6d
insd dword [edi], dx
shr dword [rbx + 0x31b0143], 0x3b
add dword [rbx], ebx
add edi, dword [rbx]
hlt
add eax, 0xbd0000
add byte [rax], al
xor dh, cl
inc dword [rax + 6]
add byte [rax], al
jo 0x403b35
call qword [rax]
add byte [rax], al
sar bh, 1
clc
add byte [rax], al
jrcxz 0x403b46
push qword [rax + 0x1e]
add byte [rax], al
and ecx, edx
call qword [rax + 0x3600001e]
sar edi, 1
ljmp [rax + 6]
add byte [rax], al
sar rdi, 1
dec dword [rax + 0x58000006]
sar edi, 1
dec eax
add byte [rax], al
add bl, bl
lcall [rax]
add byte [rax], al
sbb al, 0xdb
cmp byte [rdi], al
add byte [rax], al
cmp bl, bl
lcall [rax + 7]
add byte [rax], al
movabs byte [0xe600000780ffffdb], al
ljmp [rax + 0x2000007]
fdiv st(7), st(0)
dec eax
add byte [rax], al
fdiv st(7), st(0)
call 0xffffffff88403bdc
fdiv st(7), st(0)
call qword [rax]
or byte [rax], al
add ah, cl
fdiv st(7), st(0)
cmp byte [rax], cl
add byte [rax], al
jmp qword [rax + 8]
add byte [rax], al
inc dword [rax + 0x77000008]
jmp qword [rax - 0x5dfffff8]
inc eax
or byte [rax], al
add byte [rsi - 0x1f000023], bh
or byte [rax], al
add dl, bl
inc dword [rax]
or dword [rax], eax
add byte [rsi + rbx*8 - 1], al
ljmp [rax]
or dword [rax], eax
add byte [rax + 0x50ffffde], cl
or dword [rax], eax
add byte [rsi + rbx*8 + 0x970ffff], ah
add byte [rax], al
rcr dh, 0xff
call qword [rax + 0x2a000009]
mov eax, 0x6e000009
jmp rax
or dword [rax], eax
add byte [rax + 0xffffdf], bl
or al, byte [rax]
add byte [rax + 0x20ffffdf], bh
or al, byte [rax]
add dh, ah
inc dword [rax + 0xa]
add byte [rax], al
jmp qword [rax + 0xa]
add byte [rax], al
inc dword [rax + 0x1a00000a]
loopne 0x403c6e
jmp qword [rax + 0x7800000a]
loopne 0x403c76
dec eax
or al, byte [rax]
add al, cl
loopne 0x403c7e
push rax
or al, byte [rax]
add byte [rax], dl
loope 0x403c86
call qword [rax]
or eax, dword [rax]
add byte [rsi], bl
loope 0x403c8e
push qword [rax]
or eax, dword [rax]
add byte [rax - 0x1f], cl
call qword [rax + 0xb]
add byte [rax], al
push rsp
loope 0x403c9e
push qword [rax + 0xb]
add byte [rax], al
loope 0x403ca6
call qword [rax + 0x7c00000b]
loope 0x403cae
push qword [rax - 0x25fffff5]
loope 0x403cb6
fmul dword [rbx]
add byte [rax], al
cmp al, 0xe2
inc dword [rax]
or al, 0
add byte [rdx + 0xc20ffff], al
add byte [rax], al
xchg eax, edx
loop 0x403cce
inc dword [rax + 0xc]
add byte [rax], al
mov esp, 0x60ffffe2
or al, 0
add byte [rax], al
jrcxz 0x403cde
inc dword [rax + 0xc00000c]
jrcxz 0x403ce6
jmp qword [rax + 0x1800000c]
jrcxz 0x403cee
inc eax
or al, 0
add byte [rbx], dh
jmp rax
or al, 0
add byte [rdx + 0x8ffffe3], dl
or eax, 0xe3e20000
push qword [rax]
or eax, 0xe42a0000
call qword [rax + 0xd]
add byte [rax], al
cmp ah, ah
push qword [rax + 0xd]
add byte [rax], al
in al, 0xff
call qword [rax + 0x6e00000d]
in al, 0xff
push qword [rax + 0x7a00000d]
in al, 0xff
call rax
or eax, 0xe4960000
push rax
or eax, 0xe4f40000
lcall [rax]
add byte [rax], al
push rsi
in eax, 0xff
inc dword [rax + 0xe]
add byte [rax], al
sahf
in eax, 0xff
jmp qword [rax + 0xe]
add byte [rax], al
lodsb al, byte [rsi]
in eax, 0xff
inc dword [rax - 0x29fffff2]
in eax, 0xff
jmp qword [rax + 0x2000000e]
out 0xff, al
inc eax
add byte [rax], al
jp 0x403d54
jmp rax
add byte [rax], al
scasd eax, dword [rdi]
out 0xff, al
inc dword [rax]
sldt word [rax]
loopne 0x403d64
jmp qword [rax]
sldt word [rax]
out 0xff, eax
inc dword [rax + 0xf]
add byte [rax], al
push rax
out 0xff, eax
jmp qword [rax + 0xf]
add byte [rax], al
mov ah, 0xe7
inc dword [rax - 0x16fffff1]
out 0xff, eax
jmp qword [rax + 0x1a00000f]
call 0x10013da9
add byte [rax], al
call 0x10213db1
add byte [rax], al
push -0x18
inc dword [rax]
adc byte [rax], al
add byte [rax + rbp*8 + 0x1020ffff], dh
add byte [rax], al
jmp 0x10813dc9
add byte [rax], al
jmp 0x10a13dd1
add byte [rax], al
je 0x403dbf
inc dword [rax - 0x65fffff0]
jmp 0x10e13de1
add byte [rax], al
in al, 0xe9
inc eax
adc byte [rax], al
add byte [rax - 0x16], cl
jmp rax
adc byte [rax], al
add byte [rbp - 0x16], bh
inc dword [rax]
adc dword [rax], eax
add byte [rsi + 0x20ffffea], ch
adc dword [rax], eax
add ah, dl
inc dword [rax + 0x11]
add byte [rax], al
cli
jmp qword [rax + 0x11]
add byte [rax], al
sub eax, 0x80ffffeb
adc dword [rax], eax
add byte [rbx - 0x15], bl
jmp qword [rax - 0x73ffffef]
jmp 0x403e26
inc eax
adc dword [rax], eax
add byte [rbx + rbp*8 + 0x11e0ffff], bl
add byte [rax], al
ret 0xffeb
inc dword [rax]
adc al, byte [rax]
add ch, dh
jmp 0x403e3e
jmp qword [rax]
adc al, byte [rax]
add byte [rbx], ah
in al, dx
inc dword [rax + 0x12]
add byte [rax], al
push rsp
in al, dx
jmp qword [rax + 0x12]
add byte [rax], al
mov esp, gs
inc dword [rax - 0x49ffffee]
in al, dx
jmp qword [rax - 0x23ffffee]
in al, dx
inc eax
adc al, byte [rax]
add byte [rdi], cl
in eax, dx
jmp rax
adc al, byte [rax]
add byte [rip + 0xffffed], bh
adc eax, dword [rax]
add byte [rsi - 0x13], ch
jmp qword [rax]
adc eax, dword [rax]
add byte [rsi - 0x13], bh
inc dword [rax + 0x13]
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
in eax, dx
jmp qword [rax + 0x13]
add byte [rax], al
xlatb
in eax, dx
inc dword [rax + 0x5000013]
out dx, al
jmp qword [rax + 0x36000013]
out dx, al
inc eax
adc eax, dword [rax]
add byte [rsi - 0x12], ch
jmp rax
adc eax, dword [rax]
add byte [rbp - 0x12], bh
inc dword [rax]
adc al, 0
add byte [rax + 0x20ffffee], ch
adc al, 0
add bl, cl
out dx, al
inc dword [rax + 0x14]
add byte [rax], al
clc
out dx, al
jmp qword [rax + 0x14]
add byte [rax], al
out dx, eax
inc dword [rax + 0x32000014]
out dx, eax
jmp qword [rax + 0x55000014]
out dx, eax
inc eax
adc al, 0
add bl, ah
out dx, eax
call 0xfffffffff1403f09
out dx, eax
dec dword [rax]
adc eax, 0xf00c0000
ljmp [rax]
adc eax, 0xf0600000
dec dword [rax + 0x15]
add byte [rax], al
outsd dx, dword [rsi]
ljmp [rax + 0x15]
add byte [rax], al
dec dword [rax - 0x42ffffeb]
ljmp [rax - 0x15ffffeb]
dec eax
adc eax, 0xf0f90000
call 0x24403f4a
int1
dec dword [rax]
add byte [rax], al
int1
ljmp [rax]
add byte [rax], al
int1
call qword [rax + 0x16]
add byte [rax], al
jrcxz 0x403f3f
push qword [rax + 0x16]
add byte [rax], al
int1
call qword [rax + 0x40000016]
push qword [rax + 0x78000016]
call rax
add byte [rax], al
ret
push rax
add byte [rax], al
sal edx, 1
call qword [rax]
add byte [rax], al
inc dword [rax + 0x17]
add byte [rax], al
jmp qword [rax + 0x17]
add byte [rax], al
mov edx, 0x80fffff3
add byte [rax], al
add eax, 0xa0fffff4
add byte [rax], al
adc esi, esp
inc eax
add byte [rax], al
hlt
push rax
add byte [rax], al
xchg eax, esi
hlt
call qword [rax]
sbb byte [rax], al
add byte [rax + 0x30fffff4], dh
sbb byte [rax], al
add al, bh
hlt
call qword [rax + 0x18]
add byte [rax], al
or al, 0xf5
push qword [rax + 0x18]
add byte [rax], al
and dh, dh
jmp qword [rax + 0x34000018]
idiv bh
inc eax
sbb byte [rax], al
add byte [rsi - 0xa], cl
jmp rax
sbb byte [rax], al
add byte [rdx + 0xfffff6], bl
sbb dword [rax], eax
add byte [rsi + 0x20fffff6], ch
sbb dword [rax], eax
add cl, al
idiv edi
call qword [rax + 0x19]
add byte [rax], al
sal bh, 1
push qword [rax + 0x19]
add byte [rax], al
div bh
call qword [rax + 0x42000019]
clc
push qword [rax + 0x50000019]
clc
call rax
sbb dword [rax], eax
add byte [rax + rdi*8 + 0x19f0ffff], ah
add byte [rax], al
clc
clc
call qword [rax]
sbb al, byte [rax]
add byte [rcx], ch
stc
push qword [rax]
sbb al, byte [rax]
add byte [rax], bh
stc
call qword [rax + 0x1a]
add byte [rax], al
pop rsi
stc
push qword [rax + 0x1a]
add byte [rax], al
stosb byte [rdi], al
stc
call qword [rax - 0x47ffffe6]
stc
push qword [rax + 0xc00001a]
cli
call rax
sbb al, byte [rax]
add byte [rax - 6], ah
push rax
sbb al, byte [rax]
add byte [rcx + 0x10fffffa], dl
sbb eax, dword [rax]
add byte [rdx + 0x30fffffa], bh
sbb eax, dword [rax]
add bh, dl
cli
call qword [rax + 0x1b]
add byte [rax], al
or bl, bh
push qword [rax + 0x1b]
add byte [rax], al
xor bh, bl
call qword [rax + 0x4f00001b]
sti
push qword [rax - 0x7fffffe5]
sti
call rax
sbb eax, dword [rax]
add byte [rbp - 0xf000005], ch
sbb eax, dword [rax]
add dl, bl
sti
call qword [rax]
sbb al, 0
add byte [rsi], ah
cld
cmp byte [rax + rax], bl
add byte [rdx - 4], dh
jmp qword [rax + 0x1c]
add byte [rax], al
cld
inc dword [rax - 0x1bffffe4]
cld
ljmp [rax - 0x1ffffe4]
cld
dec eax
sbb al, 0
add byte [rsi - 3], dl
push rax
sbb al, 0
add byte [rbp + rdi*8 - 1], ah
call qword [rax]
sbb eax, 0xfd7e0000
push qword [rax]
sbb eax, 0xfdaf0000
call qword [rax + 0x1d]
add byte [rax], al
mov ebp, 0x70fffffd
sbb eax, 0xfdd70000
call qword [rax + 0x800001d]
push qword [rax + 0x2500001d]
call rax
sbb eax, 0xfe8a0000
push rax
sbb eax, 0xfea70000
call qword [rax]
add byte [rax], al
or al, 0xff
push qword [rax]
add byte [rax], al
sbb bh, bh
call qword [rax + 0x1e]
add byte [rax], al
xor bh, bh
push qword [rax - 0x5fffffe2]
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x404167
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rax
leave
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x404197
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
call 0x31404164
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add dh, al
retf -1
adc al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rax + 0xfffffca], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x404219
add eax, dword [rax + 0x300400a]
sbb ecx, dword [rdi + rax]
or byte [rax + 0x2c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov dl, cl
jmp qword [rdi + 0x4000009]
pop rdx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea r8, [rbx]
mov word [rbx + rax*4], es
add eax, 0xc099603
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rsi - 0x37], ah
jge 0x404256
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add byte [rax], al
add al, ah
sar edi, cl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 1
add byte [rax], al
fcom st(0), st(3)
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 0
add byte [rax], al
fcom st(3)
ljmp [rdx]
add byte [rax], al
add al, 0xa4
pop rdx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rax]
add byte [rax], al
sbb dl, ah
inc dword [rax + rax]
add byte [rsp + rsi*4], al
pop rdx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x4042fb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], al
add byte [rax], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add byte [rdx], dh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rsi], ch
ljmp [rdx]
add byte [rax], al
add al, 0xb8
pop rdx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add dword [rax], eax
add byte [rax - 0x2c], dh
inc dword [rax + rax]
add byte [rax + rcx*8], al
pop rdx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x40438b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rsp + rdx*8 + 0x62ffff], cl
add byte [rax], al
add al, 0xcc
pop rdx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 2
add byte [rax], al
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add al, byte [rax]
add dh, al
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x4043f8
add byte [rax], al
iretd
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add al, byte [rax]
add dl, bl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xd6000002
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
add al, byte [rax]
add dl, dl
ljmp [rdx]
add byte [rax], al
add al, 0xdc
pop rdx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
adc al, 0xd5
inc dword [rax + rax]
add byte [rsp + rbp*8], al
pop rdx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x4044a3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 3
add byte [rax], al
xor ch, dl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8, qword [rax]
add byte [rdx*8 + 0x1bffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add al, byte [rax]
add byte [rax], ch
ljmp [rdx]
add byte [rax], al
add al, 0xf0
pop rdx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 3
add byte [rax], al
push -0x2b
inc dword [rax + rax]
add byte [rax + rax], al
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x404533
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x86000003
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
nop
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add eax, dword [rax]
add byte [rax + 0x2effffd5], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
sbb al, 4
add byte [rax], al
sahf
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 4
add byte [rax], al
mov dl, ch
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add al, 0
add byte [rsi - 0x2b], dh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add eax, dword [rax]
add byte [rdx - 0x2b], dh
lcall [rsi]
add byte [rax], al
add al, 4
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 4
add byte [rax], al
test al, 0xd5
call qword [rax]
add byte [rax], al
add al, 0x10
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
add al, 0
add al, dl
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
add al, 0
add al, bh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 5
add byte [rax], al
out 0xd5, al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 5
add byte [rax], al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add rax, -0x2a240000
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add eax, 0xd5c80000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 5
add byte [rax], al
lcall [rsi]
add byte [rax], al
add al, 0x14
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 5
add byte [rax], al
cli
jmp qword [rcx]
add byte [rax], al
add al, 0x20
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rip - 0x29cc0000]
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add eax, 0xd65c0000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 6
add byte [rax], al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 6
add byte [rax], al
push rsp
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x4047d7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
js 0x4047b0
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x4047fc
add byte [rax], al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
push rax
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 6
add byte [rax], al
lcall [rsi]
add byte [rax], al
add al, 0x24
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
call qword [rax]
add byte [rax], al
add al, 0x30
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 7
add byte [rax], al
stosb byte [rdi], al
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 7
add byte [rax], al
rcl dh, cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
rcl dh, 0xff
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
retf -0x2a
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], es
add byte [rax], al
mov dh, 0xd6
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
movabs byte [0x1bffffd6], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
sahf
lcall [rsi]
add byte [rax], al
add al, 0x34
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x404975
add byte [rax], al
jmp qword [rcx]
add byte [rax], al
add al, 0x40
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 8
add byte [rax], al
xlatb
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 8
add byte [rax], al
xlatb
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or byte [rax], al
add byte [rdi + rdx*8], ah
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x4049fe
add byte [rax], al
xlatb
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
or byte [rax], al
add byte [rax - 0x29], bl
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x92000008
xlatb
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404a57
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rax]
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
xlatb
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or byte [rax], al
add byte [rax + 0x26ffffd7], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 9
add byte [rax], al
mov esi, 0x49ffffd7
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 9
add byte [rax], al
call 0x64404a94
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
or dword [rax], eax
add byte [rax + rbx*8], ch
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404af7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404aff
add byte [rax], al
fdivr st(7)
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or dword [rax], eax
add byte [rdx - 0x28], dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x58000009
fdivr st(7)
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rcx]
add byte [rax], al
fdivr st(7)
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
or dword [rax], eax
add byte [rax + rbx*8 + 0x59ffff], cl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0xa
add byte [rax], al
fdivr st(7)
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404bb7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xa
add byte [rax], al
fcmovnu st(0), st(0)
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or al, byte [rax]
add ah, ch
fdivr st(7)
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404c00
add byte [rax], al
fdivr st(7)
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
or al, byte [rax]
add byte [rcx + rbx*8], bl
jmp qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x6000000a
fcos
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404c57
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rdx]
add byte [rax], al
jne 0x404c33
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or al, byte [rax]
add byte [rsi + 0x26ffffd9], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xb
add byte [rax], al
mov ecx, ds
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xb
add byte [rax], al
xchg eax, edx
fcos
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or eax, dword [rax]
add byte [rbp + 0x2effffd9], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
jl 0x404d01
add byte [rax], al
mov bl, 0xd9
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or eax, dword [rax]
add ah, al
fcos
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xb400000b
fcos
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rbx]
add byte [rax], al
mov edx, 0x33ffffd9
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or eax, dword [rax]
add ch, cl
fcos
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
sbb al, 0xc
add byte [rax], al
fcmovnu st(0), st(1)
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xc
add byte [rax], al
in al, dx
fcos
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x404dd7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or al, 0
add byte [rdx + rbx*8], al
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404e02
add byte [rax], al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or al, 0
add byte [rdx + rbx*8], dl
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x2700000c
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
fmul qword [rax + rax]
add byte [rip + 0x31ffffda], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or al, 0
add byte [rsi - 0x26], al
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xd
add byte [rax], al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xd
add byte [rax], al
cmp al, 0xda
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or eax, 0xda4f0000
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
jl 0x404f03
add byte [rax], al
pop rbp
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or eax, 0xda6e0000
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x404f37
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x8600000d
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rip - 0x258b0000]
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or eax, 0xda800000
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xe
add byte [rax], al
sbb edx, -1
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xe
add byte [rax], al
nop
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
jg 0x404fb4
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x405004
add byte [rax], al
mov bl, dl
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0xe
add byte [rax], al
dec dword [rsi + 0x4000000]
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
test byte [rdi + rax], cl
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xe
add byte [rax], al
loope 0x40503c
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0xf
add byte [rax], al
fcomp st(0), st(2)
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 0xf
add byte [rax], al
adc bl, bl
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word fs:[rax]
or bl, bl
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], cl
add byte [rax], al
or eax, 0x2dffffdb
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sldt word [rax]
sbb bl, bl
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
or ebx, ebx
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xf
add byte [rax], al
adc al, 0xdb
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdi], cl
add byte [rax], al
dec dword [rsi + 0x4000000]
pop rsp
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
test byte [rdi + rax], cl
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x10
add byte [rax], al
jge 0x405185
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc byte [rax], r8b
add byte [rbx - 0x25], ch
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc byte [rax], al
add byte [rsi - 0x25], ah
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x405207
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax], ss
add byte [rax], al
mov bl, bl
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x405227
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc byte [rax], al
add byte [rax + 0x4bffffdb], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
adc byte [rax], al
add bl, cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
insb byte [rdi], dx
adc byte [rax], al
add byte [rcx + 0x6fffffdb], bh
add byte [rax], al
add byte [rsp + rsi*2], al
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x11
add byte [rax], al
clc
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x4052b7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x11
add byte [rax], al
sbb bl, ah
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x4052d7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc dword [rax], eax
add byte [rdx], dh
fdiv st(7), st(0)
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x405307
add byte [rax], al
pop rbp
fdiv st(7), st(0)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
sbb al, 0x11
add byte [rax], al
fdiv st(7), st(0)
ljmp [rdi]
add byte [rax], al
add al, 0x80
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc dword [rax], eax
add byte [rdx + 0x14ffffdc], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc dword [rax], eax
add byte [rsi - 0x24], bh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x12
add byte [rax], al
js 0x405366
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x12
add byte [rax], al
movabs al, byte [0x14ffffdc]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
int3
adc dword [rax], eax
add byte [rsp + rbx*8 + 0x113ffff], dl
add byte [rax], al
add al, 0x8c
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x405408
add byte [rax], al
js 0x4053d7
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc al, byte [rax]
add byte [rbp + rbx*8 - 1], ch
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x66000012
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fcom qword [rdx]
add byte [rax], al
xchg eax, edx
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
jl 0x405488
add byte [rax], al
xchg ch, bl
call qword [rbx]
add dword [rax], eax
add byte [rsp], al
pop rbx
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x13
add byte [rax], al
imul ebx, esi, 0xeffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc r8, qword [rax]
add byte [rax - 0x22], bl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc eax, dword [rax]
add byte [rsi - 0x22], bl
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rbx], ss
add byte [rax], al
mov bl, dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc eax, dword [rax]
add byte [rax - 0x22], bh
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
adc eax, dword [rax]
add byte [rsi + rbx*8 + 0x54ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
adc eax, dword [rax]
add al, ah
fdivp st(7)
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x14
add byte [rax], al
int1
fdivp st(7)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x14
add byte [rax], al
loopne 0x405588
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0
add dh, ah
fdivp st(7)
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
adc al, 0
add byte [rdx], dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], ss
add byte [rax], al
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
adc al, 0
add byte [rdi + rbx*8], dh
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
adc al, 0
add byte [rax - 0x21], ch
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
adc al, 0
add byte [rcx - 0x21], bh
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x15
add byte [rax], al
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x15
add byte [rax], al
jg 0x405689
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc rax, -0x20700000
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
adc eax, 0xdf9a0000
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rip - 0x20690000], ss
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc eax, 0xdfa80000
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
adc eax, 0xdfb50000
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
adc eax, 0xdfc20000
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 0x16
add byte [rax], al
out 0xdf, al
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x16
add byte [rax], al
or ah, al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
add byte [rax], al
add al, 0xe0
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rsi], dl
add byte [rax], al
xor al, 0xe0
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
loopne 0x405822
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
pop rsi
loopne 0x40584a
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
loopne 0x40586a
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x17
add byte [rax], al
loopne 0x40588a
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x17
add byte [rax], al
push rdi
loopne 0x4058aa
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
loopne 0x4058ca
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
loopne 0x4058ea
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], ss
add byte [rax], al
push rax
loopne 0x40590a
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
loopne 0x40592a
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
add byte [rax], al
xchg eax, edx
loopne 0x40594a
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
loopne 0x40596a
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0x18
add byte [rax], al
loopne 0x40598a
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x18
add byte [rax], al
ret 0xffe0
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb byte [rax], r8b
add byte [rbx - 0x4e], ch
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x4059e7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb byte [rax], al
add byte [rcx + 0x15ffffb2], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax + rbx - 0x1f880000], cl
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x405a42
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
sbb byte [rax], al
add byte [rax + 0x2ffffe0], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
cmp al, 0x35
sbb al, byte [rax]
add byte [rbx + 0x11cf0501], al
add byte [rbx + 0x11be0501], ah
add dl, dh
add dword [rip - 0x59ffee0b], eax
add al, byte [rip - 0x72ffed7a]
add eax, dword [rbp + 0x12dc01]
xchg eax, esi
or dword [rip - 0x49ffed58], eax
or dword [rip - 0x25ffed69], eax
jns 0x53259f
lock adc dword [rcx + rax - 0x10000], esp
add dword [rbx + rbp], ecx
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x27
add eax, 0x53a0000
add byte [r14 + 5], dl
add byte [rax], al
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
add edx, dword [rip + 0x53d0d01]
push rsp
add dword [rdx + 0xa], ebp
je 0x405b51
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rbx]
adc eax, 0x53d0d01
push rsp
add dword [rdx + 0xa], ebp
je 0x405b69
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
jno 0x405dfe
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, 0
add byte [rax], al
add ah, dh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x40bec2
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dh
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4007], dh
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4007], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4009], dl
add byte [rax], al
add byte [rsi + 0x4009], ah
add byte [rax], al
add byte [rsi + 0x4009], dh
add byte [rax], al
add dh, al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
out 9, al
add byte [rax], al
add byte [rax], al
add dh, dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte es:[rax]
add byte [rax], al
add byte [rax], al
or al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
or r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x406094
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400a], al
add byte [rax], al
add byte [rsi + 0x400a], dl
add byte [rax], al
add byte [rsi + 0x400a], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x406130
je 0x406139
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x406147
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x406144
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], cl
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x4007], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax + 0x4007], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
or byte [rcx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x400ab000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add al, al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add ah, dh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + 0x3b], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x41], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rdx + rbx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40c33a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x605df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x6060], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x605df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x400b], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40c4d2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax], cl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax], 0
add byte [rcx], al
add byte [rax], dl
add byte [rcx], cl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
or bh, byte [rbx]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add cl, bl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rbx + rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc byte [rax]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
adc byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax], bl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sgdt [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax], ah
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add byte [rbx], dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], al
add byte [rax], al
add al, byte [rax]
add byte [rcx + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], bl
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], ch
add byte [rax], al
add dword [rax], eax
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dh
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
push rax
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rcx], al
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], bl
add byte [rax + rax], dl
clc
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], ch
add byte [rax + rax], dl
call 0x40c69a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x20000014], al
add byte [rdx], bl
add byte [rax + 0x6060], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ch
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rdx], al
add byte [rax], al
and al, byte [rax]
add dl, dh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x22000002
add byte [rsi], cl
add byte [rax], dh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 2], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2d], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 2
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
xor eax, 0
add byte [rax], al
add bl, dh
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4022], ah
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword ss:[rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x28], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 3], ch
add byte [rax], al
and al, byte [rax]
add al, dl
add byte ss:[rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add bh, bl
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x402a], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rdx], bh
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4034], ch
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000004], ch
add byte [rsi], cl
add al, dh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x22000004
add byte [rsi], cl
add byte [rdx], bh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1b], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add eax, 0x220000
add byte [rax + 0x39], bl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdi + 0x12000014], al
add byte [rsi], cl
add al, al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x40688f
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x40], ah
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x22000005
add byte [rsi], cl
add byte [rbx + 0x2f], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
add eax, 0x220000
add byte [rsi + 0x4020], ah
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rsi], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x33], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rsi + 6], ah
add byte [rax], al
and al, byte [rax]
add al, cl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000006], al
add byte [rsi], cl
add byte [rbx], dl
add byte cs:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbx + 0x40], ah
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1e], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4026], ch
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x22], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xb0000e0022000007]
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4039], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ecx, dword [rax], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], ah
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000008], dh
add byte [rsi], cl
add byte [rax + rsi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add ch, cl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], cl
xor eax, 0x40
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
or dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 9], cl
add byte [rax], al
and al, byte [rax]
add byte [rcx], dl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x402d], dl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000009], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000009], ah
add byte [rsi], cl
add byte [rbp + rsi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000009], bh
add byte [rsi], cl
add byte [rbp + 0x4028], cl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], ah
add byte cs:[rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
and cl, byte [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x402d], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4036], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbp + 0x2200000a], cl
add byte [rsi], cl
add byte [rdx + 0x17], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax + 0x120000], dh
add ah, dh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosb byte [rdi], al
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1c], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], cl
add byte ss:[rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdx], cl
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx], ah
add byte [rax], al
and al, byte [rax]
add ah, dh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [r8]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x402b], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xb], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x401f], cl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000b], dh
add byte [rsi], cl
add byte [rcx + rsi + 0x40], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x402a], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000c], dh
add byte [rsi], cl
add byte [rax + 0x4025], bl
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rax + 0xc], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x30], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 0xc
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fmul dword [rax + rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000d], dh
add byte [rsi], cl
add ch, cl
and eax, 0x40
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rip + 0x220000], cl
add ah, bl
add byte es:[rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000d], dh
add byte [rsi], cl
add dh, cl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
or eax, 0x220000
add byte [rcx + rbx + 0x40], dl
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add ch, ch
or eax, 0x220000
add byte [rax], bl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb ecx, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4036], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdi + 0x2200000e], dl
add byte [rsi], cl
add byte [rax + rsi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx + 0x220000], dh
add byte [rsi + rdx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x27], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
sldt word [rax]
and al, byte [rax]
add byte [rsi + 0x4029], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xf], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xf], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x16], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xf], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jl 0x406df1
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x400c], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx + 0x220000], al
add byte [rbp + 0x26], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000f], dh
add byte [rsi], cl
add byte [rax + 0x401c], bl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
sldt word [rax]
and al, byte [rax]
add byte [rdx + 0x401f], dh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x2a], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x10], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4016], cl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x406e82
add byte [rax], al
and al, byte [rax]
add byte [rcx], ah
add byte cs:[rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0x10
add byte [rax], al
and al, byte [rax]
add dl, ah
sbb eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x10, al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
lock or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or edx, dword [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
adc dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx], dl
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx + 0x220000], dl
add dl, ch
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], ah
add byte ss:[rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte gs:[rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x26], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x11000012], bh
add byte [rax], dl
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 0x12
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4023], dl
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000013], al
add byte [rsi], cl
add byte [rbx + 0x4024], dl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x13], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4033], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdx], dh
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000013], al
add byte [rsi], cl
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add ch, ch
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x401a], bh
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4029], bh
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x10000014], al
add byte [rdx], bl
add byte [rax + 0x6060], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000014], cl
add byte [rsi], cl
add dl, dl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000014], ch
add byte [rsi], cl
add byte [rax + 0x4035], dh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
adc eax, 0x220000
add byte [rdx + 0x1b], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
adc eax, 0x220000
add byte [rbx + rbp + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000015], al
add byte [rsi], cl
add byte [rax + 0x402e], dl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 0x15
add byte [rax], al
and al, byte [rax]
add ah, dl
sbb eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
adc eax, 0x220000
add byte [rax + 0x4033], ah
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x16], dl
add byte [rax], al
and al, byte [rax]
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x407188
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000016], ch
add byte [rsi], cl
add byte [rsi + rdx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdx + 0x220000], bh
add byte [rsp], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
add byte [rax], al
and al, byte [rax]
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0x17
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x1b], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x17], dl
add byte [rax], al
and al, byte [rax]
add dl, dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x17], ch
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x2f], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000017], dh
add byte [rsi], cl
add byte [rdx + 0x4023], bh
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x407249
add byte [rax], al
and al, byte [rax]
add dl, bh
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4016], cl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], bl
add byte [rax], al
and al, byte [rax]
add ah, dh
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbx], dl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x23], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbx], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ch
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
fistp dword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add bh, al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], ebx
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x19], cl
add byte [rax], al
and al, byte [rax]
add al, bl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000019], cl
add byte [rsi], cl
add byte [rbp + 0x39], dh
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
fistp word [rcx]
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
mov eax, 0x6060
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], bh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp bl, byte [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x402c], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbp + 0x2200001a], dl
add byte [rsi], cl
add byte [0x40], dh
add byte [rax], al
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fcomp dword [rdx]
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, bh
and byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rbx], bl
add byte [rax], al
and al, byte [rax]
add al, cl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x38], cl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rdi + 0x40], dh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x37], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1c], dl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1b], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x407476
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x18], bh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200001c], dl
add byte [rsi], cl
add byte [rax + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0x1c
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x403a], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr dword [rax + rax], 0
and al, byte [rax]
add byte [rax + 0x4034], cl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4031], bl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x220000
add byte [rsi + 0x401f], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1d], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x401f], dh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbx + 0x220000], ch
add ah, bl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or bl, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1e], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
and al, byte [rax]
add dh, bh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
adc eax, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1e], ch
add byte [rax], al
and al, byte [rax]
add ch, bh
add byte ss:[rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add ch, ah
add byte [rax], al
and al, byte [rax]
add ah, al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x401c], bl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x2a], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1f], ch
add byte [rax], al
and al, byte [rax]
add dl, dh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x4075f9
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x17], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x2200001f
add byte [rsi], cl
add dh, bh
and eax, 0x40
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x3a], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x20], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x402b], dh
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x20], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x34], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add ah, cl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb esp, dword [rcx]
add byte [rax], al
and al, byte [rax]
add al, ch
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0x21
add byte [rax], al
and al, byte [rax]
add ah, dh
sub byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x4076eb
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
mov eax, 0x6060
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x21], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], dh
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4018], bl
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
and dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rbx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbx + 0x40], ah
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], cl
add byte ss:[rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rsi + 0x22000022], ch
add byte [rsi], cl
add byte [rdi + 0x4036], bl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x402c], cl
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rcx + 0x23], dh
add byte [rax], al
and al, byte [rax]
add dl, al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x1a], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x34], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x24], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4023], bh
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add al, bh
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, 0x22000024
add byte [rsi], cl
add byte [rcx + 0x2c], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x1c], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [0x220000], ch
add byte [rax + 0x1e], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x25], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x25], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rip + 0x220000], ah
add byte [rdx + 0x17], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000025], ah
add byte [rsi], cl
add bh, dh
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
and eax, 0x220000
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
and al, byte [rax]
add byte [rcx + rbx + 0x40], dl
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x26], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + rbx + 0x40], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x26], ah
add byte [rax], al
and al, byte [rax]
add dh, ch
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000026], ch
add byte [rsi], cl
add byte [rbx + 0x27], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte es:[rax], al
and al, byte [rax]
add byte [rdx + 0x1a], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
and al, byte [rax]
add cl, ah
xor eax, 0x40
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
add byte [rax], al
and al, byte [rax]
add dl, bl
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add byte [rbx + 0x22000027], dh
add byte [rsi], cl
add byte [rax], dl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x407a09
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x400c], ch
add byte [rax], al
add byte [rdi + 9], ah
add byte [rax], al
add ah, dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x31], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1b], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x10000001], ch
add byte [rbx], bl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbp], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x401c], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbp + 0x220000], al
add dl, ch
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x28, 0
and al, byte [rax]
add byte [rsi + 0x17], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul byte [rax]
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x2f], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub ebp, dword [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x29], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x29], ch
add byte [rax], al
and al, byte [rax]
add dh, bh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
adc eax, dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rcx], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x21], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x22000029
add byte [rsi], cl
add dl, dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add ch, cl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0x2a
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1f], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2a], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x407b8c
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, dh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
sub eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2b], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4028], bh
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200002b], ah
add byte [rsi], cl
add bh, bh
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
sub eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, cl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], bl
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
sub eax, 0
add byte [rax], al
add byte [rdi + 0x2200002c], dl
add byte [rsi], cl
add byte [rax + 0x36], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4029], bh
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
sub eax, 0x220000
add byte [rsp + rbp + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2d], cl
add byte [rax], al
and al, byte [rax]
add al, bl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x2d
add byte [rax], al
and al, byte [rax]
add byte [rbx], dh
sub eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, 0x220000
add al, cl
sub eax, 0x40
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add ch, cl
sub eax, 0x100000
sbb al, byte [rax]
mov eax, 0x6060
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
sub eax, 0x220000
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x220000
add byte [rdx + 0x1b], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x2200002e
add byte [rsi], cl
add byte [rax + 0x400c], bl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte cs:[rax], al
adc al, byte [rax]
add byte [rax], al
or byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2e], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x16], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp], dl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rdi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200002e], dl
add byte [rsi], cl
add byte [rsi + 0x22], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add byte cs:[rax], al
and al, byte [rax]
add ah, ch
add byte es:[rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte cs:[rax], al
and al, byte [rax]
add byte [rdi], ah
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
and ebp, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
sbb eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2f], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x2200002f
add byte [rsi], cl
add byte [rax + 0x401c], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1200002f], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
and al, byte [rax]
add bh, bh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
add byte [rax], al
and al, byte [rax]
add dh, cl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte es:[rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rbx + 0x40], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x30], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x407eda
add byte [rax], al
and al, byte [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rax + rsi + 0x220000], bh
add byte [rsi + 0x24], bl
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add bl, ch
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ch
sbb eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000031], bl
add byte [rsi], cl
add byte [rax + 0x1e], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x31], al
add byte [rax], al
and al, byte [rax]
add dh, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x407f53
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4038], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dl
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rbx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
add byte es:[rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], dl
add byte [rax], al
adc al, byte [rax]
add byte [rsi + 0x400b], dh
add byte [rax], al
add byte [rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, 0x1200001c
add byte [rbx], cl
add byte [rax + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x32], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x401f], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000032], al
add byte [rsi], cl
add byte [rax + 0x2a], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000032], bh
add byte [rsi], cl
add byte [rcx + 0x2b], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbp], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x40808a
jne 0x40807e
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40803e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4080bc
jb 0x4080c2
pop rdi
jne 0x4080cb
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x4080c5
je 0x4080c1
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4080e1
jb 0x4080e7
pop rdi
jne 0x4080f0
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x4080f3
jns 0x4080e3
outsb dx, byte gs:[rsi]
je 0x4080fa
jns 0x40808a
jb 0x4080ee
insd dword [rdi], dx
pop rdi
jne 0x408100
insd dword [rdi], dx
jns 0x408096
pop rdi
pop rdi
jb 0x4080fc
insd dword [rdi], dx
pop rdi
jne 0x40810e
insd dword [rdi], dx
jns 0x408103
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40810e
jns 0x40810e
outsb dx, byte gs:[rsi]
je 0x408125
jns 0x4080b5
movsxd rbp, dword [rsi]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x40810c
xor dword [rcx], edi
jo 0x40812d
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x408145
jb 0x408148
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x408127
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408146
jb 0x408151
add byte [rdi + 0x5a], bl
push rbx
je 0x40813c
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x408149
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
xor r9b, byte [rbp + 0x58]
add byte [rdi + 0x5a], bl
xor r9, qword [rcx + 0x4e]
add byte [rdi + 0x5a], r11b
xor al, 0x4c
add byte [rdi + 0x5a], r11b
xor r12, qword [rbp + 0x70]
jae 0x408127
pop rdi
pop rdx
xor al, 0x31
pop rdi
pop rdi
jae 0x4081a3
je 0x40819b
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x4081a9
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x4081bf
jb 0x4081c2
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x4081d7
pop rdi
pop r15
insd dword [rdi], dx
imul ebp, dword [rsi], 0x52465f5f
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40821a
jns 0x40821a
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40822b
jns 0x40822b
jae 0x408242
jb 0x408245
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
push r11
je 0x40821a
jbe 0x40824b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x408234
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40824e
jbe 0x40827f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x6d], eax
push rdx
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40828a
pop rdi
jae 0x4082cb
jb 0x4082c8
jns 0x4082a4
push rax
js 0x4082a3
jbe 0x4082b4
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4082db
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4082e4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4082d8
js 0x4082d6
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4082a0
pop rdi
pop rdx
push rbx
je 0x4082d7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408318
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40830b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40834c
js 0x40833d
js 0x408333
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
js 0x40836f
add byte [rdi + 0x5a], bl
push rbx
je 0x40833a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40837b
push r11
je 0x408350
jbe 0x408381
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408376
js 0x40836c
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x4083a0
pop rdi
jae 0x4083b2
outsd dx, dword [rsi]
jb 0x4083a2
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40837d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4083b6
je 0x4083cb
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4083b1
xor byte [rdi + 0x5f], bl
jne 0x4083f2
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40840d
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40840e
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x408422
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408411
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40842a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x408420
je 0x408405
jbe 0x408436
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40842b
js 0x408421
push r8
js 0x408427
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x408427
xor bl, byte [rdi + 0x5f]
jne 0x408468
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor byte [rbp + 0x45], al
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40845e
jbe 0x40848f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408484
js 0x40847a
insd dword [rdi], dx
push rbx
xor al, 0x5f
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408481
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4084c2
js 0x4084b3
js 0x4084a9
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4084e5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x4084f7
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x40850c
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4084f9
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408533
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40853c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408530
push rbx
je 0x408520
jbe 0x408551
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x408539
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40857a
js 0x40856b
js 0x408561
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x408530
pop rdi
pop rdx
push rbx
je 0x408567
xor byte [rdi + 0x49], bl
je 0x4085a0
jb 0x40859c
jae 0x4085a6
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4085a9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4085c2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x4085b8
je 0x40859d
jbe 0x4085ce
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4085c3
js 0x4085b9
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x4085e9
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4085c0
xor bl, byte [rdi + 0x44]
jae 0x408609
jb 0x408606
jns 0x4085f8
jne 0x408614
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x40861d
jb 0x40861a
jns 0x4085f6
push rax
push rbx
je 0x4085e7
jbe 0x408618
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40860d
js 0x408603
jbe 0x408617
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4085fe
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x408648
jb 0x40864b
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x408612
jbe 0x408643
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rdx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x408644
push rsp
pop rdi
jo 0x408648
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408639
jbe 0x40866a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4086a1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x4086b3
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x4086c8
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4086b5
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4086ad
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4086ee
js 0x4086df
js 0x4086d5
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4086d2
outsw dx, word [rsi]
jb 0x408716
jb 0x408706
push r10
push r11
je 0x4086de
jbe 0x40870f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408704
js 0x4086fa
push r12
pop rdi
push rdx
push rbx
je 0x4086f0
jb 0x408727
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40872b
pop rdi
jb 0x40872e
jb 0x408732
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x408749
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408745
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40874e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408742
push rbx
je 0x408732
jbe 0x408763
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408758
js 0x40874e
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x408747
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408788
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40873e
pop rdi
pop rdx
push rbx
je 0x408775
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
js 0x4087c9
js 0x4087a3
push rsp
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4087a3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4087e4
push r11
je 0x4087b9
jbe 0x4087ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4087df
js 0x4087d5
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408819
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408822
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408816
xor al, byte fs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40880e
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408852
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40886b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408846
jbe 0x408877
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x408856
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4088bb
jo 0x4088a9
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408880
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4088c1
push r11
je 0x408896
jbe 0x4088c7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4088b2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4088eb
je 0x408900
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4088cf
jbe 0x408900
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x50]
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x4088fc
jbe 0x40892d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408922
js 0x408918
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40891a
jbe 0x40894b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x4088fb
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x408965
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40896e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408962
push rbx
je 0x408952
jbe 0x408983
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r13 + 0x61], r13b
js 0x40898f
jae 0x40899b
jp 0x408999
jbe 0x408937
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4089b4
jb 0x4089b7
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x4089a9
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x4089ca
jae 0x40895a
pop rdi
pop rdx
push rbx
je 0x408991
xor byte [rdi + 0x49], bl
je 0x4089ca
jb 0x4089c6
jae 0x4089d0
push r8
js 0x4089bb
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x4089e0
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4089bb
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
js 0x4089fc
js 0x4089d6
push rsp
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x4089e6
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x4089f0
jbe 0x408a21
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r12d, dword fs:[r13 + 0x6e]
jbe 0x4089cf
pop rdi
pop rdx
push rbx
je 0x408a06
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408a33
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x408a7d
jb 0x408a80
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x408a47
jbe 0x408a78
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408a6d
js 0x408a63
push rdx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x408a79
push rsp
pop rdi
jo 0x408a7d
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408a68
xor dword [rdi + 0x5f], ebx
jb 0x408aa4
jae 0x408ab4
outsd dx, dword [rsi]
push r11
je 0x408a7d
jbe 0x408aae
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push rsp
pop rdi
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408ac7
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408ae0
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408abb
jbe 0x408aec
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x408adc
jbe 0x408b0d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408b02
js 0x408af8
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x408af7
pop rdi
jae 0x408b38
jb 0x408b35
jns 0x408b11
push rax
js 0x408b43
jbe 0x408b22
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408b44
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408b5d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x408b53
je 0x408b38
jbe 0x408b69
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408b5e
js 0x408b54
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x408b87
je 0x408b8c
jb 0x408b95
ja 0x408b68
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
push r11
je 0x408b73
jbe 0x408ba4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x408b88
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408bc1
je 0x408bd6
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x408bbd
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x408be1
pop rdi
jae 0x408c22
jb 0x408c1f
jns 0x408bfb
push rax
jbe 0x408c0c
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x408bfb
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x408c10
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x408c75
jo 0x408c63
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408c6c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408c75
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408c69
push rbx
je 0x408c59
jbe 0x408c8a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408c7f
js 0x408c75
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x408c7c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408cbd
push r11
je 0x408c92
jbe 0x408cc3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x408cf2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408cfb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408cef
push rbx
je 0x408cdf
jbe 0x408d10
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408d05
js 0x408cfb
cmp byte [r13 + 0x61], r13b
js 0x408d1c
jae 0x408d28
jp 0x408d26
jbe 0x408cc4
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408d2d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408d36
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408d2a
js 0x408d28
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x408d68
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x408d3d
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
js 0x408d62
push rbx
je 0x408d52
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x408db7
jo 0x408da5
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x408d7c
xor al, 0x5f
pop rdi
jne 0x408dbd
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x408d9e
jbe 0x408dcf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x408dcb
xor bl, byte [rdi + 0x44]
jae 0x408e14
jb 0x408e11
jns 0x408e03
jne 0x408e1f
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x408e28
jb 0x408e25
jns 0x408e01
push rax
js 0x408e00
jbe 0x408e12
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x408e02
jbe 0x408e33
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x408e20
jbe 0x408e51
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408e39
jbe 0x408e6a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408e5f
js 0x408e55
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
js 0x408e2b
pop rdi
pop rdx
push rbx
je 0x408e62
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408ea3
push r11
je 0x408e78
jbe 0x408ea9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408e9e
js 0x408e94
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408ed1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408eea
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408ec5
jbe 0x408ef6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x408ee3
jbe 0x408f14
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408f09
js 0x408eff
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
js 0x408f11
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x408f08
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408f41
je 0x408f56
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x408f25
jbe 0x408f56
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x408f4b
js 0x408f41
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x50]
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x408f4d
xor bl, byte [rdi + 0x44]
jae 0x408f96
jb 0x408f93
jns 0x408f85
jne 0x408fa1
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x408faa
jb 0x408fa7
jns 0x408f83
push rax
push rbx
je 0x408f74
jbe 0x408fa5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x408fa4
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
js 0x408fa2
xor al, byte [r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
js 0x408fb2
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x408fe0
js 0x408fe6
je 0x408fbf
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6e5a5f00
ja 0x408ffe
push rax
jbe 0x408f94
pop rdi
pop rdx
push rbx
je 0x408fcb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409004
je 0x409019
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
js 0x409033
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409030
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409039
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40902d
push rbx
je 0x40901d
jbe 0x40904e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409043
js 0x409039
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409064
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40906d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409061
push rbx
je 0x409051
jbe 0x409082
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409066
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40909f
je 0x4090b4
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x409083
jbe 0x4090b4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4090a9
js 0x40909f
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x4090a9
jbe 0x4090da
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4090cf
js 0x4090c5
xor al, byte [r13 + 0x6d]
push rdx
js 0x4090db
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4090c4
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40910e
jb 0x409111
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x4090d8
jbe 0x409109
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4090fe
js 0x4090f4
push r10
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40910a
push rsp
pop rdi
jo 0x40910e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409100
pop rdi
jae 0x409141
jb 0x40913e
jns 0x40911a
push rax
push rbx
je 0x40910b
jbe 0x40913c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409131
js 0x409127
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40913d
pop rdi
push rbx
xor al, 0x5f
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x409134
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x409199
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
push r11
je 0x409186
jbe 0x4091b7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4091ac
js 0x4091a2
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40919b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4091dc
push r11
je 0x4091b1
jbe 0x4091e2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x4091a4
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40920d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409216
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40920a
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40920a
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409265
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409254
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40926d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x409263
je 0x409248
jbe 0x409279
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40926e
js 0x409264
push r8
js 0x40926a
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409268
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4092a9
push r11
je 0x40927e
jbe 0x4092af
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4092b1
jbe 0x4092e2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x4092da
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40931b
js 0x40930c
js 0x409302
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x49], bl
pop r15
jae 0x409348
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x409314
pop rdi
pop rdi
jne 0x409355
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x409365
je 0x40935a
outsb dx, byte [rsi]
pop rdi
push r8
js 0x40936f
js 0x409349
push rsp
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40934c
xor al, 0x5f
pop rdi
jne 0x40938d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push r11
je 0x409388
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4093c9
js 0x4093ba
js 0x4093b0
xor dword [r9], r15d
pop rdi
pop r15
je 0x4093d4
push rsp
jo 0x4093d7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4093c7
jbe 0x409384
jae 0x4093e9
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4093cd
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
js 0x409418
js 0x4093f2
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409414
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4093fd
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x409422
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x409443
insb byte [rdi], dx
jne 0x40944a
push r12
pop rdi
pop rdi
pop rdi
je 0x409467
jo 0x409455
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x409439
jbe 0x40946a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40948a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409493
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409487
js 0x409485
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409485
jbe 0x4094b6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
push r12
pop r15
jb 0x4094e3
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x4094f8
pop rdi
jae 0x40950e
jb 0x409511
add byte [rdi + 0x5a], bl
push rbx
je 0x4094d9
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4094f4
xor bl, byte [rdi + 0x5f]
jne 0x409535
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409550
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409541
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40955a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409535
jbe 0x409566
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409590
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409599
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40958d
js 0x40958b
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409583
pop rdi
pop rdi
jne 0x4095c4
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x4095d4
je 0x4095c9
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x4095e7
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x4095f0
je 0x4095e5
outsb dx, byte [rsi]
push r8
js 0x4095f8
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4095ff
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409608
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4095fc
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4095c4
pop rdi
pop rdx
push rbx
je 0x4095fb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40963c
push r11
je 0x409611
jbe 0x409642
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409637
js 0x40962d
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x409659
push rsp
jo 0x40965c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40964c
jbe 0x409609
pop rdi
pop rdx
push r11
je 0x409646
jbe 0x409677
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40966c
js 0x409662
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x409627
pop rdi
pop rdx
push rbx
je 0x40965e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40969f
push r11
je 0x409674
jbe 0x4096a5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x409667
pop rdi
pop rdx
push rbx
je 0x40969e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4096df
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4096f0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4096f9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4096ed
push rbx
je 0x4096dd
jbe 0x40970e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
js 0x40970c
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409703
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409744
push rbx
xor dword fs:[r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x409757
pop rdi
jae 0x409769
outsd dx, dword [rsi]
jb 0x409759
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x409734
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409775
push r11
je 0x40974a
jbe 0x40977b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40976b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4097ac
js 0x40979d
js 0x409793
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x409762
pop rdi
pop rdx
push rbx
je 0x40979e
jbe 0x4097cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4097c4
js 0x4097ba
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4097b7
outsw dx, word [rsi]
jb 0x4097fb
jb 0x4097eb
push r10
push r11
je 0x4097c3
jbe 0x4097f4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r12
pop rdi
push rdx
push rbx
je 0x4097d5
jb 0x40980c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409810
pop rdi
jb 0x409813
jb 0x409817
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x40982e
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4097f8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409839
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x40982b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40986c
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x409877
push rsp
jo 0x40987a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40986a
jbe 0x409827
pop rdi
pop rdx
push rbx
je 0x409863
jbe 0x409894
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409889
js 0x40987f
xor dword [r13 + 0x6d], eax
push rdx
js 0x409895
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x409885
jbe 0x4098b6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4098ab
js 0x4098a1
xor r12d, dword [r13 + 0x6e]
jbe 0x409864
pop rdi
pop rdx
push rbx
je 0x4098a1
pop rdi
jae 0x4098e2
jb 0x4098df
jns 0x4098bb
push rax
push rbx
je 0x4098ac
jbe 0x4098dd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4098d2
js 0x4098c8
jbe 0x4098db
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4098c8
jbe 0x4098f9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x6d]
push rdx
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409916
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40991f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409913
push rbx
je 0x409903
jbe 0x409934
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4098eb
pop rdi
pop rdx
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409933
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524578
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40994a
movsxd rbp, dword [rdi + 0x70]
jns 0x409964
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409982
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40999b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x409991
je 0x409976
jbe 0x4099a7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40999c
js 0x409992
push r8
js 0x409998
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x40999e
jbe 0x4099cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x4099b9
jbe 0x4099ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4099df
js 0x4099d5
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x4099d0
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x409a06
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409a10
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x4099e9
jb 0x409a1b
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x409a38
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409a32
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x409a3a
insd dword [rdi], dx
js 0x409a24
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409a32
xor al, 0x5f
pop rdi
jne 0x409a73
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x409a54
jbe 0x409a85
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409a7a
js 0x409a70
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x409a82
xor bl, byte [rdi + 0x5f]
jne 0x409ac3
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor byte [rbp + 0x45], al
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x409ab9
jbe 0x409aea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor al, 0x5f
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409adc
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409b1d
push r11
je 0x409af2
jbe 0x409b23
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x409b42
pop rdi
jae 0x409b54
outsd dx, dword [rsi]
jb 0x409b44
insd dword [edi], dx
add byte [rdi + 0x5f], bl
jae 0x409b5c
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x409b32
pop rdi
jae 0x409b73
jb 0x409b70
jns 0x409b4c
push rax
push rbx
je 0x409b3d
jbe 0x409b6e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x409b6f
pop rdi
push rbx
xor al, 0x5f
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x409b5f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409ba0
js 0x409b91
js 0x409b87
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x409b7e
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x409bb4
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409bbe
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x409bc8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409be1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409bbc
jbe 0x409bed
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409bdc
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409c20
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409c39
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x409c2f
je 0x409c14
jbe 0x409c45
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409c3a
js 0x409c30
push rbx
je 0x409c24
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409c89
jo 0x409c77
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409c50
movsxd rbp, dword [rdi + 0x70]
jns 0x409c6a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409c88
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409ca1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409c7c
jbe 0x409cad
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409c9c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409cdd
js 0x409cce
js 0x409cc4
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409cc6
jbe 0x409cf7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409cec
js 0x409ce2
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x409cdf
jbe 0x409d10
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409d05
js 0x409cfb
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push r11
je 0x409d0e
jbe 0x409d3f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x409d24
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
insd dword [rdi], dx
cmp qword fs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409d6b
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x409d54
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x409d79
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x409d9a
insb byte [rdi], dx
jne 0x409da1
push r12
pop rdi
pop rdi
pop rdi
je 0x409dbe
jo 0x409dac
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409dbd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409dc6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409dba
push rbx
je 0x409daa
jbe 0x409ddb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409df1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409dfa
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409dee
push rbx
je 0x409dde
jbe 0x409e0f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x409df2
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x409e28
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409e32
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x409e3c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409e55
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x409e4b
je 0x409e30
jbe 0x409e61
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409e56
js 0x409e4c
push r8
js 0x409e52
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409e83
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409e8c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409e80
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409e7a
jbe 0x409eab
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409e97
jbe 0x409ec8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x409ec0
js 0x409eb6
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x409eb7
xor byte [rdi + 0x5f], bl
jne 0x409ef8
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409f13
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x409f14
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x409f28
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409f17
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409f30
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409f0b
jbe 0x409f3c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409f32
pop rdi
jae 0x409f73
jb 0x409f70
jns 0x409f4c
push rax
jbe 0x409f5c
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409f76
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409f7f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409f73
push rbx
je 0x409f63
jbe 0x409f94
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409f89
js 0x409f7f
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409faa
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409fb3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409fa7
push rbx
je 0x409f97
jbe 0x409fc8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x409fbd
js 0x409fb3
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rbp + 0x65], ch
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409ff2
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x409fd7
jbe 0x40a008
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40a000
js 0x409ff6
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40a006
pop rdi
jae 0x40a047
jb 0x40a044
jns 0x40a020
push rax
push rbx
je 0x40a011
jbe 0x40a042
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40a040
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a05b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a074
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a04f
jbe 0x40a080
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x62
jae 0x40a092
jbe 0x40a030
pop rdi
pop rdx
push rbx
je 0x40a067
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a0a8
js 0x40a099
js 0x40a08f
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a0cb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a0d4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a0c8
xor dword fs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a0c1
xor bl, byte [rdi + 0x5f]
jne 0x40a102
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40a11d
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a10e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a127
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40a11d
je 0x40a102
jbe 0x40a133
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a128
js 0x40a11e
push r8
js 0x40a157
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40a12b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a16c
push r11
je 0x40a141
jbe 0x40a172
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a167
js 0x40a15d
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40a167
jbe 0x40a198
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
imul r15d, dword fs:[r8 + 0x45], 0x5a5f006d
push rbx
je 0x40a17b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a1bc
push r11
je 0x40a191
jbe 0x40a1c2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5f], bl
jae 0x40a1f9
pop rdi
jae 0x40a1fd
jb 0x40a200
add byte [rdi + 0x5a], bl
push rbx
je 0x40a1c9
jbe 0x40a1fa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a1ef
js 0x40a1e5
xor r14b, byte [r9]
pop rdi
pop r15
jne 0x40a218
je 0x40a20d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x5f006d45
pop rdx
push rbx
je 0x40a1f1
xor dword [rdi + 0x5f], ebx
jb 0x40a22d
jae 0x40a23d
outsd dx, dword [rsi]
push r11
je 0x40a206
jbe 0x40a237
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a22c
js 0x40a222
push r8
push rsp
pop rdi
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40a223
jbe 0x40a254
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40a24c
js 0x40a242
push r11
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5f5f006d
jae 0x40a283
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a290
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a299
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a28d
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a2b4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a2bd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a2b1
push rbx
je 0x40a2a1
jbe 0x40a2d2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a2c7
js 0x40a2bd
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a2e8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a301
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40a2f7
je 0x40a2dc
jbe 0x40a30d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a302
js 0x40a2f8
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40a2f4
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40a34f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a33e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a357
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a332
jbe 0x40a363
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x40a35a
jbe 0x40a38b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a380
js 0x40a376
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40a370
xor bl, byte [rdi + 0x5f]
jne 0x40a3b1
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor dword [rbp + 0x45], eax
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a3b7
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a3fb
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a414
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40a40a
je 0x40a3ef
jbe 0x40a420
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a415
js 0x40a40b
push rbx
je 0x40a3ff
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a464
jo 0x40a452
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a429
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40a47a
je 0x40a46f
outsb dx, byte [rsi]
push r8
js 0x40a482
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a45b
jbe 0x40a48c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a47a
xor byte [rdi + 0x49], bl
je 0x40a4b3
jb 0x40a4af
jae 0x40a4b9
push r8
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40a4c9
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a4a0
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a4e1
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a504
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a50d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a501
js 0x40a4ff
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
js 0x40a537
add byte [rdi + 0x5a], bl
push rbx
je 0x40a502
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a53b
je 0x40a550
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40a51f
jbe 0x40a550
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a540
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a581
js 0x40a572
js 0x40a568
xor dword [r9], r15d
pop rdi
pop r15
je 0x40a58c
push rsp
jo 0x40a58f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a57f
jbe 0x40a53c
pop rdi
pop rdx
push rbx
je 0x40a573
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a5b4
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40a56a
pop rdi
pop rdx
push rbx
je 0x40a5a2
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524564
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
push r11
je 0x40a5d7
jbe 0x40a608
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a5fd
js 0x40a5f3
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a5ec
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x40a622
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40a62c
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x40a605
jb 0x40a637
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40a654
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a64e
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40a656
insd dword [rdi], dx
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a675
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a67e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a672
js 0x40a670
cmp byte [rbp + 0x61], ch
js 0x40a68f
jae 0x40a69b
jp 0x40a699
jbe 0x40a637
pop rdi
pop rdx
push rbx
je 0x40a673
jbe 0x40a6a4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a687
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a6c8
push rbx
xor al, byte fs:[r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a6ac
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a6ed
push r11
je 0x40a6c2
jbe 0x40a6f3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x40a70a
push rsp
jo 0x40a70d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a6fd
jbe 0x40a6ba
pop rdi
pop rdx
push rbx
je 0x40a6f1
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40a70f
jbe 0x40a740
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a735
js 0x40a72b
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a736
jbe 0x40a767
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a755
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a78e
je 0x40a7a3
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
xor r14d, dword [r15]
jae 0x40a7a5
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x40a7ae
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x40a7cf
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40a7d0
jb 0x40a7d3
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a7a1
xor byte [rdi + 0x49], bl
je 0x40a7da
jb 0x40a7d6
jae 0x40a7e0
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a7e3
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a7fc
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a7d7
jbe 0x40a808
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x40a823
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a7ff
jbe 0x40a830
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jbe 0x40a85f
jb 0x40a831
jae 0x40a86d
insb byte [rdi], dx
jbe 0x40a866
jbe 0x40a804
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a86e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a877
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a86b
cmp byte fs:[r13 + 0x61], r13b
js 0x40a888
jae 0x40a894
jp 0x40a892
jbe 0x40a830
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a899
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a8a2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a896
js 0x40a894
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a88b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a8cc
push r11
je 0x40a8a1
jbe 0x40a8d2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40a8c7
js 0x40a8bd
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40a894
pop rdi
pop rdx
push rbx
je 0x40a8cb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a90c
push r11
je 0x40a8e1
jbe 0x40a912
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40a914
jbe 0x40a945
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40a93d
js 0x40a933
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40a93c
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40a986
jb 0x40a989
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40a950
jbe 0x40a981
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r10
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40a982
push rsp
pop rdi
jo 0x40a986
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a972
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40a990
jbe 0x40a9c1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a9b7
jbe 0x40a9e8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a9cf
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40aa10
js 0x40aa01
js 0x40a9f7
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40aa23
pop rdi
jae 0x40aa35
outsd dx, dword [rsi]
jb 0x40aa25
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40aa05
jbe 0x40aa36
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40aa2b
js 0x40aa21
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40aa19
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40aa52
je 0x40aa67
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40aa63
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40aaa4
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x40aaaf
push rsp
jo 0x40aab2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40aaa2
jbe 0x40aa5f
pop rdi
pop rdx
push rbx
je 0x40aa95
pop rdi
pop rdi
je 0x40aad1
jb 0x40aada
ja 0x40aacc
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40aaee
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40aaf7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40aaeb
js 0x40aae9
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40aadf
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ab23
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ab3c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ab17
jbe 0x40ab48
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x40ab27
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40ab8c
jo 0x40ab7a
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x40ab59
jbe 0x40ab8a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ab6e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40abaf
push r11
je 0x40ab84
jbe 0x40abb5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
imul esi, dword [rdx + 0x73], 0x40785245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40abb8
xor bl, byte [rdi + 0x44]
jae 0x40ac01
jb 0x40abfe
jns 0x40abf0
jne 0x40ac0c
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x40ac15
jb 0x40ac12
jns 0x40abee
push rax
jbe 0x40abff
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40abe7
xor byte [rdi + 0x49], bl
je 0x40ac20
jb 0x40ac1c
jae 0x40ac26
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ac29
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ac42
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ac1d
jbe 0x40ac4e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40ac69
push r11
pop rdi
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40ac5e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ac9f
push r11
je 0x40ac74
jbe 0x40aca5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ac9a
js 0x40ac90
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40ac96
xor bl, byte [rdi + 0x5f]
jne 0x40acd7
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor dword [rbp + 0x45], eax
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
js 0x40ad03
js 0x40acdd
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40acde
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ad17
je 0x40ad2c
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor r14d, dword [r15]
jae 0x40ad2e
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x40ad37
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x40ad58
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40ad59
jb 0x40ad5c
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ad5c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ad65
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ad59
js 0x40ad57
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ad84
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ad8d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ad81
push rbx
je 0x40ad71
jbe 0x40ada2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40ad9c
jbe 0x40adcd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40adb7
pop rdi
jae 0x40adf8
jb 0x40adf5
jns 0x40add1
push rbx
je 0x40adc1
jbe 0x40adf2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40adec
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ae08
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ae11
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ae05
push rbx
je 0x40adf5
jbe 0x40ae26
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ae1b
js 0x40ae11
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40addd
pop rdi
je 0x40ae44
add byte [rdi + 0x5a], bl
push rbx
je 0x40ae20
jbe 0x40ae51
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40ae49
js 0x40ae3f
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ae3f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ae80
js 0x40ae71
js 0x40ae67
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40ae87
pop rdi
add byte [rdi + 0x5f], bl
js 0x40aeb3
pop rdi
jo 0x40aea3
jb 0x40aeb3
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
js 0x40aea4
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40aece
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40aee7
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40aedd
je 0x40aec2
jbe 0x40aef3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40aee8
js 0x40aede
xor al, 0x62
jae 0x40af05
jbe 0x40aea3
pop rdi
pop rdx
push rbx
je 0x40aeda
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40af1b
push r11
je 0x40aef0
jbe 0x40af21
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40af16
js 0x40af0c
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x40af26
jbe 0x40af57
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40af4c
js 0x40af42
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40af3e
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40af74
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40af7e
pop rdi
xor byte [rbp + 0x50], al
push rax
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40af6a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40afab
push r11
je 0x40af80
jbe 0x40afb1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40afa6
js 0x40af9c
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x40afd7
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40afaf
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40aff0
push r11
je 0x40afc5
jbe 0x40aff6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40afeb
js 0x40afe1
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40afb8
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40b026
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40b039
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40b007
xor al, 0x5f
pop rdi
jne 0x40b048
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
js 0x40b05f
js 0x40b06c
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b041
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40b077
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b081
pop rdi
xor byte [rbp + 0x50], al
js 0x40b077
js 0x40b06e
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
js 0x40b083
xor dword [r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b07d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b0be
push rbx
xor dword fs:[r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b0a7
jbe 0x40b0d8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b0cd
js 0x40b0c3
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b0c0
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b101
push r11
je 0x40b0d6
jbe 0x40b107
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b0fc
js 0x40b0f2
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b103
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b144
push rbx
xor dword fs:[r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40b132
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b173
push r11
je 0x40b148
jbe 0x40b179
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b16e
js 0x40b164
push r11
push r11
xor bl, byte [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b196
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b19f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b193
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40b188
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b1c9
push r11
je 0x40b19e
jbe 0x40b1cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40b1bf
xor byte [rdi + 0x49], bl
je 0x40b1f8
jb 0x40b1f4
jae 0x40b1fe
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b201
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b21a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40b210
je 0x40b1f5
jbe 0x40b226
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b21b
js 0x40b211
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40b241
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b24a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b253
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b247
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40b244
jbe 0x40b275
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b26a
js 0x40b260
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40b262
jbe 0x40b293
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40b28b
js 0x40b281
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b2ca
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b2d3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b2c7
push rbx
je 0x40b2b7
jbe 0x40b2e8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b2fe
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b307
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b2fb
push rbx
je 0x40b2eb
jbe 0x40b31c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b311
js 0x40b307
xor al, byte [r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40b30a
pop rdi
jae 0x40b34b
jb 0x40b348
jns 0x40b324
push rbx
je 0x40b314
jbe 0x40b345
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40b33a
js 0x40b330
jbe 0x40b33f
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40b329
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b36a
push rbx
xor dword fs:[r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rax], al
jae 0x40b39a
insd dword [rdi], dx
je 0x40b385
add byte [rsi], ch
jae 0x40b39d
jb 0x40b39f
add byte [rsi], ch
jae 0x40b399
jae 0x40b3a7
jb 0x40b3a9
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40b3aa
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40b3b8
outsb dx, byte cs:[esi]
jne 0x40b386
jne 0x40b3c4
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40b394
push 0x687361
jns 0x40b3dd
jae 0x40b3ea
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40b3e5
jae 0x40b3ed
jb 0x40b37b
outsb dx, byte cs:[esi]
jne 0x40b3ae
jbe 0x40b3e7
jb 0x40b3f7
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40b3bb
jbe 0x40b3f4
jb 0x40b404
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40b3ff
insb byte [rdi], dx
jns 0x40b40e
add byte [rsi], ch
jb 0x40b409
insb byte [rdi], dx
jo 0x40b415
je 0x40b3ab
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40b3e4
outsd dx, dword [esi]
je 0x40b3ba
je 0x40b422
js 0x40b433
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40b438
je 0x40b42e
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40b451
jo 0x40b465
pop rdi
je 0x40b455
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40b463
jns 0x40b404
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40b47f
jns 0x40b410
push 0x63
jb 0x40b415
jns 0x40b487
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40b491
je 0x40b427
je 0x40b48d
add byte [rsi], ch
jae 0x40b4a4
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40b43b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x4002, 0
add byte [rax], al
add byte [rax], al
enter 2, 0
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rip + 0x40], al
add byte [rax], al
or byte [rip], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
add byte [rax], al
add byte [rax], al
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 7], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4007], dh
add byte [rax], al
add byte [rax + 7], dh
add byte [rax], al
add byte [rax + 1], dh
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4009], al
add byte [rax], al
add byte [rax + 9], al
add byte [rax], al
add byte [rax], dh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400a], dh
add byte [rax], al
add byte [rax + 0xa], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
ror byte [rdx], 0
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
hlt
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3b], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3b], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
add eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x41], cl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x41], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0x19
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rbx*2 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rdx + rbx*2], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
pop rbp
add byte [rax], al
add byte [rax], al
add al, ch
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], ch
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], bh
add byte [rax], al
add byte [rax], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], bh
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0xb3
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], 0
add byte [rax], al
add byte [rax], al
or eax, 0x33
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
