call 0x401df0
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401c08
add ebx, ebx
je 0x401bbe
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401bf6
cmp rbp, -4
ja 0x401bf6
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x401bde
add ecx, 4
mov dl, byte [rax]
je 0x401c06
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401bf6
ret
cld
pop r11
cmp r8b, 2
je 0x401c1e
jmp 0x401c9b
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401c2e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401c16
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401c46
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401c33
sub eax, 3
jb 0x401c64
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401c9b
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401c8b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401c89
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401c78
cmp rbp, -0xd00
adc ecx, eax
call 0x401bca
jmp 0x401c1e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401d74
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401d12
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401d5e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401d31
push 0x3a707474
jne 0x401d8a
js 0x401d4a
jae 0x401d84
outsb dx, byte cs:[rsi]
je 0x401d43
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401db1
jb 0x401da3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401dce
jb 0x401de1
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x215e8c
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x215e8c
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401cac
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401dd7
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401d85
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1e7f
jb 0x401e97
movsxd rbp, dword [rdi]
jae 0x401e91
insb byte [rdi], dx
js 0x401e97
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401e77
cmp rsi, rcx
jae 0x401e7f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401e5e
cmp al, 0x8f
ja 0x401e5e
cmp byte [rsi - 2], 0xf
je 0x401e64
sub al, 0xe8
jg 0x401e61
push rdi
cmp al, 1
ja 0x401e4c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401e4f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401e7c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401ed3
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c2351
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401f17
mov al, 0xa
jmp 0x401f17
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401ef3
inc ebx
mov al, 0
jmp 0x401f1b
mov al, 2
jmp 0x401f1b
mov al, 3
jmp 0x401f1b
mov al, 0x3c
jmp 0x401f1b
push rcx
rcr ah, 1
fstp st(7)
jle 0x401f5c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401f6e
jg 0x401f60
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a76e3
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401fba
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb7137
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401fc2
cmp esi, 0x21585055
jne 0x401fc6
jge 0x401fb8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401fbb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401fbf
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40206b
pop rcx
or al, 0x3b
jb 0x402071
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401fe3
jmp 0x401fe5
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661f26
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5416e
in eax, dx
jg 0x40201d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x402063
mov bh, 0x2a
add edi, 0x10
jmp 0x402060
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x40209d
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4020d9
jne 0x4020f0
fstpnce st(6), st(0)
jle 0x4020b9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4020ef
jrcxz 0x402123
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1c087
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4021a2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x402162
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58296737
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4021d5
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40216f
and ecx, 7
or al, 0xeb
jae 0x4021da
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40220f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40224d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x402206
push rax
call 0xffffffff868d1ef3
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x402210
std
cmp edi, esi
xchg eax, edi
jle 0x402265
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c967f1
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x402263
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x402251
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40227a
js 0x4022ba
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40234c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad3587
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40236d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x402372
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21e24
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x402300
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
sub al, 2
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
or dword [rax], 0x90
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0x88
pop rbx
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x402426
je 0x40242f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4023f8
mov dh, 0x7d
jbe 0x4023f7
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x402430
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x5080006], bl
add ah, cl
stc
add bl, bl
or byte [rdi + rax], al
or dword [rax], eax
cmp byte [rbp + 2], 0x79
add cl, byte [rdx]
add byte [rax + 0x960000b], dh
enter -0x7f8e, 0x47
or al, 9
or eax, 0x2d807c81
or dl, byte [rdi]
add al, al
and byte [rdi], bh
add ah, dh
cmp dl, byte [rax]
add byte [rax], al
cmp edx, dword [rax + 0x111f204f]
add byte [rax + 0x12], dl
add byte [rax + 0x41], cl
enter 0x130f, 0
pop rdx
adc al, 0
call 0x53984af
add byte [rip + 0x16f800], dl
add byte [rsi + 0x6d], bl
add bh, cl
add byte [rdi], dl
add byte [rax], cl
sbb byte [rdi], al
pop rbx
nop
pop rdi
sbb dword [rax + 0x17], esp
add bh, byte [rcx + 2]
stc
sbb al, byte [rax]
test al, 0x1b
add al, al
and al, 0xef
cmpsb byte [rsi], byte ptr [rdi]
insb byte [rdi], dx
sbb al, 0x13
add dword [rdi], edx
add al, 0
int1
lcall [rdx]
scasb al, byte [rdi]
sub al, 0x76
or al, 0x1b
mov edi, 0x72029719
mov al, 0x21
imul esi, eax, 0xb30171b
or eax, 0x2e1720c9
jo 0x4024e0
mov al, 0x93
pop rdi
sbb eax, dword [rax]
fsub dword [rcx + 1]
push rbx
leave
push rdi
jp 0x4024f6
nop
in al, dx
mov byte [rsi + r8*4], cl
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
wait
je 0x402457
and dword [rbx + 0x19770827], ebp
xchg eax, edx
shl dword [rsi], -0x3a
or ebx, ebx
sbb dword [rax + rcx*2 + 6], ebp
or ch, al
mov edi, 0xb0641bd9
and edi, esi
or al, 4
sbb al, 0x92
adc byte [rsi], al
add eax, ecx
and byte [rbx + 0xf08189c], al
test byte [rbx + rax*2 + 0x1172032], 7
xor ecx, dword [rdi + rdx]
and byte [rbx + 0x473e720c], al
jno 0x402535
ficom word [rax - 0x3e]
adc eax, 0xff5f5bdf
adc dh, al
sbb esi, dword [rdx]
out 0x69, eax
mov bh, 0x25
mov al, 0x47
jne 0x40250b
pop rdi
mov cl, 0x2b
and esi, dword [rsi - 0x78]
mov r15b, 0x9e
and eax, 0x1484a6cc
fild qword [rdi + 0x2bbac717]
sub dword [rsi], esi
ret 0x2f47
retf
out dx, eax
and ah, ch
and byte [rbp + 0x2628ce6c], bl
adc dword [rbx + rcx*2], 0x7a
nop
and ah, ch
add dword [rbp - 0x1b0d84e9], esp
fstp dword [rax]
add dword [rdi + 2], eax
add ch, byte [rdx]
sbb dword [rdx], ebp
nop
cmp dword [rbx], esp
sbb ebp, esp
test dword [rsp], ebx
xor dl, dh
sbb byte [rip + 0x610d8f02], bh
xor byte [rdx], ah
push rbp
nop
xchg eax, ebx
adc dword [rdi], 0x4e
sub eax, 0x83309042
pushfq
sbb al, 0xe2
push rax
mov al, 0xe4
push rdi
push rsi
lodsd eax, dword [rsi]
add ah, al
retf 0x2721
sbb esp, ebp
xor eax, 0x22a0f317
movsxd rsi, dword [rdx - 0xe]
in al, 0x20
add ebx, dword ss:[rdi + 0x28]
nop
xchg eax, ebx
or dword [rcx + rbp*2], 0xffffffd0
sub eax, 0x641c9c83
fbld tbyte [rbp + 0x323a8e2a]
enter -0x6c37, 4
and dword es:[rcx + 0x6c], ecx
scasb al, byte [rdi]
xor al, 0x4c
stosb byte [rdi], al
adc ah, ah
and byte [rdi], ah
sbb esi, dword [rdi]
cmp al, byte [rdx]
mov edx, 0x720e4f04
cmp ch, byte [rdi + rcx]
add al, 0x4e
sbb ebx, dword [rsp + rdi + 0x520217b]
pop rdi
pop rax
cmp dword [rip - 0x7c63e68a], ebx
xchg dword [rdi + rbp], edx
sub dl, bh
and byte [rdi], ah
jns 0x4025ef
movsb byte [rdi], byte ptr [rsi]
cmp byte [rsi], cl
jb 0x4025e2
in al, 0xb8
add eax, 0xed6f2f63
add eax, 0x4f2720e4
cmpsb byte [rsi], byte ptr [rdi]
and byte [rax + 0x28], cl
test byte [rdi], dl
xor r12d, dword [rsi + 6]
scasd eax, dword [rdi]
enter -0x1be5, -0x14
xchg byte [rdi], dl
adc ebp, dword [rsi]
out dx, eax
sahf
sbb al, 0xcc
movsb byte [rdi], byte ptr [rsi]
sbb al, 0xb
or dword [rdi], ebp
in al, 0xc9
add byte [rdi], al
push 0x7f072e1e
sahf
sbb al, 0xe4
in al, 0xab
xor dword es:[rdi + rax + 0x56], ebx
and al, byte [rdx - 0x62]
movabs al, byte [0xf19e4e412bb04f07]
enter 0x2707, 0xd
cmp dword [rdx], ebx
sbb al, 0xe4
in al, 0xc9
cmp dword [rax], ecx
and byte [rcx + 0x6b], r12b
or byte [rsp + rbp*8], bl
sahf
sub dword [rax - 0x36cfa3e9], esi
sahf
adc eax, dword [rcx]
int 8
xor eax, 0xd20e4f27
push rbx
cmpsd dword [rsi], dword ptr [rdi]
jmp 0x402676
xor dword [rsi + rsi*2], edx
out 0x20, eax
or dword [rax], eax
test dword [rcx], edi
adc byte [rdx + 9], cl
adc qword [r11], r14
jmp 0x7121630d
or edi, ebx
nop
sub eax, 0x4e2f098f
sahf
add ah, byte [rbx + 0x355c6709]
push rsp
in al, 0xc9
mov r15d, 0xed288d09
or dword [rdi + 0x2f], esp
in al, 0x19
and dword [rsi], ebp
and cl, byte [rdx]
and eax, 0x90bc6790
sub eax, 0x829f0a4e
mov edx, 0x8dbc2790
or bl, bh
push rdx
mov ah, 0x83
pop rbp
pop rcx
iretd
stosb byte [rdi], al
outsb dx, byte [rsi]
xchg eax, edx
shr dword [rsi], -0x74
sbb al, 0xcf
retf
pop rdi
or cl, dh
jp 0x402658
sbb eax, 0x24ef0b0a
or edi, dword [rdi - 0xc]
or edi, dword [rcx + 0x76]
or ebx, dword [r15 - 0x41]
sub ecx, eax
rol dword [rsi - 0x6bb89050], 0x2f
mov byte [rdi], bl
pop rbp
enter 0x5e33, -0x4b
or edx, dword [rdi - 0x7c]
xor ebx, esi
sbb al, 0xac
xchg eax, ebx
adc dword [rdi], -0x7e
sub ah, byte [rbx]
scasd eax, dword [rdi]
xor eax, 0x42f19e0c
sahf
cwde
and eax, 0x48270c78
xor byte [rdx - 0x62], al
hlt
mov spl, 0xc
sbb esi, edx
in al, dx
add eax, 0xa70cd8f6
test dword [rdi + rcx*4], 0xf2172fe6
test byte [rdi], dl
xor eax, 0x25cddf0d
test byte [rbx + 0xda4f217], al
fsub qword [rsi]
mov bl, 0xd
pop rdi
sahf
cmc
add dl, ah
or eax, 0x44199437
pop rsi
enter 0x4393, 0xd
sbb byte [rbx + rbx], bl
cmp eax, ecx
leave
xor esp, dword [rdi]
adc ah, byte [rdi]
xor ebx, dword [rax + 0xe]
js 0x4026dc
hlt
add dl, byte [rdi + 0xeb45f0e]
jp 0x402786
insb byte [rdi], dx
ror dword [rsi], -0x59
and dword [rdi + 0x7a], ecx
and dword [rsi], eax
movhps qword [rsi + 0x33c90d29], xmm0
js 0x4027c1
cmpsd dword [rsi], dword ptr [rdi]
and al, 0x26
lar esp, ecx
nop
pushfq
pop rdi
push rax
packuswb mm0, qword [rdi]
cmp dword [rbx], edi
in al, dx
jl 0x4027ef
or al, 0x8f
adc al, byte [rdi + rcx + 0x2790bd67]
jge 0x4027c1
mov bh, 0xf
neg dword [rax + 0x24360e42]
jmp 0x4027bc
mov dl, 0x1f
int1
sahf
int1
adc byte [rdi + 0x57], ch
sub bl, byte [rbp + 0x10]
and byte [rbp - 0x7750d870], bh
jle 0x4027cb
cmpsd dword [rsi], dword ptr [rdi]
mov ebp, 0xb35d8390
loop 0x4027e1
out 0x10, al
adc ecx, dword [rsi]
pop rcx
popfq
mov bl, 0xf0
or edx, dword [rcx]
neg dword [rsi + 0x60]
sbb eax, 0x111b0692
xchg eax, edi
adc dword [rdi], eax
sbb edx, dword [rdx + 0x5436d793]
retf 0x211f
jp 0x402809
xchg eax, esp
adc dword [rdi], edx
sub ebx, dword [rsi - 0x38]
adc edi, dword [rax - 0x3c]
adc edi, esp
and dword ss:[rdx], edx
iretd
js 0x40281c
and al, 0x65
adc ch, byte [rdi + 0x32]
test dword [rcx + rdi*2], edi
and dword [rbx + 0xe264a12], edx
fnstsw dword [r14 + 0x7f1117]
int 0x12
in al, 0x20
iretd
nop
and ebp, dword [rcx]
add eax, 0x17813913
xchg eax, ebx
and al, 0x40
adc eax, dword [rdi - 0x39fa266e]
and dword [rbx + rdx + 0x27], esi
xchg dword [rdi], ebp
leave
mov sil, 0x77
xor byte [rdi - 0x13], al
adc esp, esp
in al, 0xbe
sbb dl, byte [rcx]
adc al, 0x8f
mov esi, 0x9e42f29
cmp dword [rdi + rsi*8], edx
adc byte [rdx], bl
adc al, 0x48
or byte [rdi + 0x17100781], dl
repne movsb byte [rdi], byte ptr [rsi]
add ecx, dword [rsi + 0x2ed21714]
lodsd eax, dword [rsi]
mov bl, 0x5e
enter 0x14b3, -0x11
mov al, 0x35
adc eax, 0x1bc1f27f
xchg eax, edx
cmp edx, dword [rdi]
sub r8d, dword [r13 - 0x79e85ec4]
adc eax, 0xe22e90d7
test dword [rcx], edi
mov ah, 0x15
sbb eax, 0x78c015f9
and dword [rdi + 0x37], ecx
movabs al, byte [0xbd1817a13f161733]
push rdi
ja 0x4028b5
jns 0x402823
cmc
add ch, byte [rdi + 0x16bc3716]
cmp eax, ecx
or dword [rip + 0x598f2404], edi
in eax, dx
nop
sbb dword [rsp + rdi + 0x245e1fe6], 0x17
add al, 0x1a
sub al, 0xcf
pslld mm2, qword [rsi]
pop rsi
enter 0x17b3, 0x6b
out dx, eax
push rbp
mov cl, 0x17
sbb dword [rbp - 0x38], 0x33
iretd
mov edx, 0xfa2fe323
pop rsi
and byte [rbp + 0x18173490], bh
out dx, eax
cmp byte [rax], bl
xchg eax, ebx
pop rsi
enter 0x7f13, -0xc
xor edx, dword [rax + rbx - 0x41]
or esp, dword [rsi + rbx*2 + 0x7c236ac8]
sbb bh, ah
sbb dword [rbp + rsi*2 + 0xa179db0], 0x2f
fstp xword [r9 + 0x46]
nop
sbb bl, ch
sbb byte [rdi], bl
sbb byte [rax + 0x2b390727], dl
add dword [rcx], ebx
sub dh, byte [rdi]
leave
movabs r12, 0x760e196cd87f194f
and edi, ecx
pop rdi
and byte [rbx], dh
mov dword [rdi], edx
jne 0x402962
sbb ebx, dword [rbx - 0x209ab1bf]
adc dword [rdx], eax
iretd
mov eax, 0x2438cf21
jmp 0x402952
mov bh, 0x39
and ebx, dword [rsi - 0x38]
xchg eax, ebx
jp 0x40297b
sbb dh, byte [rdi + 0x1a952c97]
mov bl, 0x17
repne lodsb al, byte [rsi]
xor al, 0x25
fcomp dword [rdx]
pop rdi
in al, 9
sbb al, 0x92
mov al, 0xe5
sbb bh, byte [rdi]
cld
and al, bl
add eax, 0x1b182f46
idiv dword [rax]
jb 0x4028f6
cmp byte [rcx], bh
cmp byte [rax - 0x69], r11b
xchg eax, esi
sbb esi, dword [rdx - 0x3e]
or edi, dword [rcx - 0x4c]
cmp byte [rdi], al
sbb al, 0x37
jbe 0x402990
mov word [rbx + 0x55], es
sbb al, 0x87
push 0x1b
jp 0x40299c
in al, 0xe4
jle 0x4029a1
and byte [rbx + 0x6419066], dl
sbb al, 0x62
mov cl, 0x13
pop rsi
enter 0x1286, 0x4f
cmp byte [rdx], 0xc1
sbb al, 0x7f
enter 0x5e33, -0x38
mov byte [rsi + rbx*8], dh
sbb al, 0xf
sahf
xor dword [rdi], edx
or al, 0x5e
sbb eax, 0x781fbebf
in al, 9
nop
sbb eax, 0xdc071dac
mov esp, 0xa2f6790
push rax
in al, 0x49
idiv esi
xor dword [rbx + 0x1e], ecx
pop rdi
mov word [rax], es
in al, 0xd8
outsd dx, dword [rsi]
scasd eax, dword [rdi]
std
in al, dx
test ebp, esp
xlatb
and al, 0xfd
sahf
cmc
add cl, byte [rcx + 0x1f317f1e]
sub dl, byte [rbx]
sbb al, dh
imul ebx, dword [rdi], 0xf49e76e7
add al, byte [rcx + 0x1f8be71f]
pop rdi
outsb dx, byte [rsi]
or edi, dword [rcx - 0xa]
mov ecx, 0x25fe8f1f
ror byte [rbx], 0x79
shl cl, cl
out dx, eax
push 0x3a
and byte [rax], ah
or ebp, dword [rsi + rcx*2 + 0x20525760]
xlatb
or edi, dword [rcx - 0x3a]
jp 0x402a45
dec dword [rax + 0x34]
in al, 0x20
in al, 0xc9
or edi, dword [rcx - 0x34]
sbb al, 0x1b
and eax, ebp
sbb cl, byte [rbx]
jns 0x402a4a
xor al, 0x21
hlt
sub ah, ch
xchg eax, ecx
in al, 0xba
jno 0x402a5b
adc ch, bh
ja 0x402ac5
and edi, edx
jb 0x402a40
or al, 0x1e
stosd dword [rdi], eax
and dword [rbx], esi
sub eax, dword [rcx + 0x4e]
js 0x402a7a
xlatb
and dword [rdi - 0x62], ecx
jrcxz 0x402a64
jb 0x4029f1
sub ebx, edi
and dword [rdi], edx
and ah, byte [rdi]
shl byte [rcx], 0x39
pop rsp
cmp esp, dword [rdx]
or ebp, dword [rsi + rcx*2 - 0x51e8dd91]
and al, al
loop 0x402a0b
pushfq
push rdi
lahf
or esp, dword [rbx]
mov bh, 0xbd
nop
mov esp, 0xd572328
sub al, 0x71
and ebx, dword [rsi - 0x40d86f43]
ret 0xe237
and edx, edi
fsub qword [rdi]
nop
and al, 0x17
jp 0x402abb
sahf
mov esp, 0x34792433
pop rcx
and al, 0x21
call 0x2f64b5b7
clc
sub dword [rsi + 0x21], esi
iretd
jp 0x402a74
and al, 0x97
sub al, 0xf9
pop rdi
sbb al, 0x2c
and eax, 0xa33c855f
adc ebx, dword [rdx + 0x25]
scasd eax, dword [rdi]
or byte [rbx], bl
or al, dh
add ah, cl
jo 0x402afc
xchg eax, edi
mov byte [rip - 0x7ec6de39], ah
adc esp, dword [rbp - 0x450848db]
nop
movsxd rax, eax
sti
and eax, 0x262fd2ff
in al, 0x19
mov al, 0x47
mov bh, 0x84
mov esp, 0x652f6790
xlatb
out dx, al
and byte [rdx + 0x20c83926], ch
jg 0x402b7b
xor edx, ebp
sahf
add cl, byte [rsi]
scasd eax, dword [rdi]
loope 0x402b49
pop rsi
enter -0xef8, 0x5a
push rdi
fidiv dword [rbx + 0xbc12327]
test byte [rdi - 0x1f], dh
out dx, eax
test al, 0x64
in al, 0xc8
xchg eax, ecx
or al, 0xa7
or esp, esi
jo 0x402b1b
add eax, 0x28202f42
stosb byte [rdi], al
add dword [rdi + 0x79], ebx
or dword [rdi], eax
cmp ah, al
sub byte [eax - 0x16], r8b
test dword [rax + rsi*4], edi
sbb al, 0x84
sub byte [rdi], cl
and dword [rsi + 0x60], ebx
mov ebp, 0xf67f28c8
sub bh, ah
sahf
jo 0x402b5d
sub ebp, dword [rcx]
push rbp
sub dword [rsi + rbx*2 + 0x296bf020], eax
xchg dword [rax - 0x74fdd0d7], ecx
bnd jo 0x402b91
mov ecx, 0x42deff29
sahf
int1
shr byte [rcx], cl
lahf
int 0x29
or ah, ah
or dword [rdi], ecx
xor byte [rdi + 0x1c], dl
sub bl, bh
jp 0x402ba6
adc bl, byte [rdx + rax*8]
jne 0x402bb9
loop 0x402b98
cdq
sub ah, byte [rdi + 0x34]
mov byte [rbx], dl
pop rax
jo 0x402ba7
sub eax, dword [rdi]
sub edi, dword [rax - 0x7f]
popfq
lcall [rcx + 0x2b]
ja 0x402c1b
sub ecx, dword [rsi + rbx*2 - 0x4178ec38]
sub byte [rax - 0x3de320d5], ah
cmp byte [rdi + 0x17], al
sub al, 0xf2
lodsb al, byte [rsi]
or byte [rdi + 0x1b7f2c4e], bl
sub bh, byte [rcx + 0x56]
sub eax, 0x582fc716
lodsb al, byte ss:[rsi]
enter -0x1cf5, 0x2c
or ebp, dword [rip + 0x17a10237]
bnd je 0x402c0b
sub rax, 0x1c85e28f
in al, dx
push 0x17
xor ebp, dword [rip + 0x783e2d8f]
and edi, ecx
bswap eax
sub eax, 0x1a172dcd
pop rsi
and byte [rcx + 0x4a], dh
sub eax, 0xe42df8af
or ebp, dword [rdi + rcx*8]
sbb eax, 0xc98bf2e
and esp, edx
or dword [rdi], ebp
and byte [rdi - 0x3c], 9
and al, 0x78
cmpsd dword cs:[rsi], dword ptr [rdi]
push rsp
mov al, 0xe2
nop
pushfq
pop r12
xchg eax, ebx
test dword [rbp + rax + 0x72ed727], ecx
in al, dx
pushfq
nop
xor esp, eax
clc
xchg dword cs:[rcx], edi
and ebp, dword [rdi]
cmp dword [rax + rdx*4 + 0x1d2a2767], 0xbb082f55
jp 0x402cad
mov edi, 0xbb02fa8
jns 0x402cc3
shr byte [rdi], 0x77
jmp qword [rcx]
sti
rol byte [rdx + 0x38ce7217], 0x26
xor bh, al
movabs dword [0x305b3f30369c0817], eax
in al, 0x18
int1
add bh, byte [rcx + 0x30]
pop qword [rbx]
pop rsi
enter 0x26c1, -0x44
pop rsi
and al, 0xeb
xor byte [rip + 0x7102f42], al
sbb eax, 0x2749d731
adc al, ah
xor dword [r15 + 0x78], ecx
xor dword [rdi], ebp
or esp, dword [rsi + rcx]
leave
cmpsb byte [rsi], byte ptr [rdi]
sal dword [rcx], 1
div dword [rcx - 0xa3dfa20]
xor dword [rdi - 0xaf8cdea], ebp
mov word [rsi - 0x38], cs
mov word [rip - 0x4908feaa], ds
or eax, dword [rax]
and byte [rdi], ah
jge 0x402c6b
pop rsi
hlt
lahf
push rcx
xor bl, bh
test dword [rdx], esi
jns 0x402c7e
or ecx, dword [rdi + rbx + 0x41df32bd]
sub eax, dword [rbp - 0x1df42f64]
xor al, byte [rdi + 0x2c]
in eax, 0xff
push qword [rdi + 0x74726309]
jae 0x402d4a
jne 0x402d3e
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
out dx, al
call rsi
inc byte [rax]
jb 0x402d54
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x402d1f
mov bh, 0xff
div dh
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x402d6f
jne 0x402d8b
outsd dx, dword [rsi]
insd dword [rdi], dx
jg 0x402c99
std
in eax, dx
jo 0x402d88
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xb76f
ljmp [rdi + 8]
jb 0x402da3
jns 0x402d93
outsb dx, byte gs:[rsi]
je 0x402daa
jns 0x402d3a
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
fld qword [rax + 0xd3279b9]
pop rdi
sub dword [rdx + rbp - 0xa], esi
in eax, dx
movsxd rbx, dword ss:[rax + rsi*2 + 0x535a2470]
je 0x402da6
xor dword [rcx], edi
jo 0x402dc7
movsxd rsp, dword gs:[rbp + 0x77]
cdq
sti
mov dh, 0xb5
sub eax, 0x729f6e77
jne 0x402dd1
je 0x402d8a
xor ebx, dword [rdi + 0x70d6ee75]
jne 0x402ddb
jb 0x402db8
adc al, 0x36
imul esp, dword [rdi - 0x12], 0x6eb6cedd
pcmpgtw mm1, qword [rax + rdi]
imul ebp, dword [edi + 0x5d], 0xfbf7bf0e
test dword [rdx + rsi + 0x4d], 0x49330658
xor al, 0x4c
or byte [rax], dl
jo 0x402d54
pop rbx
imul ebx, dword [rbx + 0x2c313473], 0x5d
imul r12, qword [rbx - 0x71], -0x488ca44a
imul ebx, dword [rbx + 0x69], 0x5b720d7a
outsb dx, byte [rsi]
test al, 0x65
mov ebx, 0x79cdfdbf
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r14b, byte [rbp + 0x62]
push 0x5ffb5dff
pop r15
insd dword [rdi], dx
xor edx, esp
push rdx
pop r15
or r12b, byte [rax - 0x35]
xchg eax, ebx
pop r12
or eax, dword [rdi + 0x4e]
push rbp
and bpl, dil
ret 0xf64f
push rdx
push rbx
jg 0x402e54
mov r15b, 0xb0
or ecx, esp
sub byte [rbx], cl
adc byte fs:[rsi + 0x5ddbbbdb], bl
jb 0x402ddd
pop rcx
mov r11b, 0x4e
push rbx
out 0x36, al
outsd dx, dword [rsi]
mov ebx, 0x2076850d
add ecx, dword [rcx + 0x64]
or eax, 0x43004564
xor al, byte [rbp - 0x21]
outsb dx, byte [rsi]
clc
push rdx
push r11
xor bl, byte [rdi + 3]
xor esp, dword [rbx + 0x40]
insb byte [rdi], dx
pop r8
xchg eax, esi
fsincos
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x36
xor eax, dword [rbx + 0x31]
insd dword [rdi], dx
mov dl, 0x6d
in al, dx
jmp 0x158e5e92
jbe 0x402e6c
movabs eax, dword [0x6f0b7f385043677d]
jns 0x402eb5
push rax
js 0x402ebd
in al, dx
adc bh, byte [rcx + 0x31313153]
cmp dword [rcx - 0x492f4f4c], esi
test dword [rbp - 0x51], esi
js 0x402ee0
xor eax, ecx
mov dh, 0x49
mov eax, 0xa75f7746
xor dil, byte [r8]
or al, 0xc6
mov dh, 0x67
mov bh, 0x65
jno 0x402ee7
pop r15
je 0x402ecc
lodsb al, byte [rsi]
push rsi
pop rdi
mov cs, word [rip - 0x18bccbd5]
xchg eax, esp
jg 0x402f18
jb 0x402f0a
fild dword [rbx + 0x6674bfdd]
rcr dword [rdi + 0x32], 0x2e
add dword [rip - 0x2d48f3cd], esi
js 0x402f35
outsd dx, dword [rsi]
pop rdi
lodsb al, byte [rsi]
and dword [rcx - 0x5c9c3693], eax
insd dword [rdi], dx
add dword cs:[rsi + 0x382d821d], ebp
and al, byte [r8 - 0x65]
shr dword [rip + 0x65233799], 0x3c
outsd dx, dword [rsi]
sbb dword [rbx + 0x42a867b9], eax
outsd dx, dword ss:[rsi]
add al, bl
mov bl, 0xa5
int1
test al, 0x31
xor byte [rcx - 0x49], dh
sal dword [rsi], 0xc
push rdx
push rax
xor dh, byte fs:[rdx]
or ebx, dword [rdi + 0x75]
movabs eax, dword [0x70c3314f6e8c94a3]
cmp edx, eax
insb byte [rdi], dx
fdivr dword [rbx + 0x4c]
xor dword [rdx + 0x6a35141b], ebp
fadd dword [rsi]
test byte [rdi - 0x3b], bl
insd dword [rdi], dx
push rax
imul ebp, dword [rcx], 0x9060885b
cmp dword [rax + rdi*2], ebp
mov ah, 0xd
lodsd eax, dword [rsi]
push 0x643d8300
xchg byte [rbx + 0x34], al
xchg eax, edx
shr dword [rsi + 2], 0x42
pop rdi
jne 0x402f6c
xchg eax, edx
cmpsb byte [rsi], byte ptr [rdi]
imul ebp, dword [rbp + 0x77519e8c], 0x30
xor eax, 0x583653e6
push rax
pop rax
insd dword [rdi], dx
push rbx
xor al, 0x5f
loope 0x402f01
loope 0x402fc1
push rdx
pop rdi
pop rbp
push rsp
in al, 0x75
ret
xor eax, 0x69152059
sbb dword [rax + rbp*2 + 1], ecx
xchg byte [r8 - 0x2d], cl
push rcx
fisubr dword [rip + 0x3b07cc24]
push rbx
pop rdi
faddp st(1)
sub al, 0xb5
pop rbx
pop rdi
or dword [rip - 0x4925aa8], edi
outsd dx, dword [rsi]
pop rdi
mov ebx, 0x61632d62
mov rcx, qword [rdi + rdx*2 + 0x325a3405]
add ah, byte [rcx - 0x49]
out dx, eax
sub eax, 0xd81de120
mov esp, 0x972b0849
fimul word ss:[rbx + 0x42dae1b0]
pop rsp
jo 0x402fcb
retfq
xchg byte [rip - 0x56f27fdd], bh
wait
pop rsi
push rcx
add spl, byte [r11 - 0x19]
sub dword [rdx + 0x36], esp
xchg eax, esi
add bl, byte [r13 - 0x5c]
sub ebx, dword [rbx]
int1
hlt
xor byte [rax - 0x4a], dl
nop
int3
or esi, dword [rdi - 0x15b08fbc]
mov esi, dword [rax]
iretd
mov al, 0x29
jmp 0x40300d
cmp byte [rax - 0x51], dh
add ebp, dword [rbx]
sbb al, 0x42
and bh, byte [rcx + 0x7378bb4a]
ficomp dword [rsi]
adc eax, 0x66374844
sbb dword [rdi - 0x5d], esi
movsd dword [rdi], dword ptr [rsi]
int3
fst st(0)
xor sil, r14b
mov esi, 0x2976db75
push rdx
jb 0x402f90
insd dword [rdi], dx
outsd dx, dword [rsi]
sbb ebx, dword [rdi + 6]
xchg ax, di
lodsd eax, dword [rsi]
lahf
outsb dx, byte [rsi]
or byte [rcx + 0x61743435], bh
and esi, dword [rax]
fidivr dword [rcx + 0x70]
test eax, 0x6305311
pop rcx
scasd eax, dword [rdi]
popfq
outsd dx, dword [rsi]
or eax, 0x253a4095
ret
lodsb al, byte [rsi]
pop rcx
js 0x403056
xor dword [rax - 0x15], ebp
pop rsp
sub rsi, qword [rbx]
xor dl, byte [rcx]
push rdx
pop rax
rol dword [rsi + 0x1258b630], cl
push -0x78
imul ebp, dword [rax + 0x2ba4adaf], 0xb2002564
int3
xchg eax, esi
insd dword [rdi], dx
rcr dword [rdx + 0x47651b35], cl
cmp byte [rdi + 0x69], bl
push rbx
cmp esp, ebx
and al, 0x70
fdivr qword ss:[rsp + rsi]
add r13b, byte [r11]
sbb ecx, dword [rax - 0x67b7ccbc]
sub byte [rbx], 0x49
push rbx
jb 0x403058
xor dword [rbx + 0x4a], ecx
xor eax, 0x8baceb08
outsb dx, byte [rsi]
jg 0x4030db
xor esi, ebp
pop rax
cmp byte [rax], bh
js 0x403067
add edi, dword [rbx]
adc edx, dword [rbx + 0x773668d8]
outsb dx, byte [rsi]
jno 0x403064
mov ch, 0x83
push rax
loope 0x4030f3
jbe 0x40308e
insb byte [rdi], dx
cli
mov ss, word [r13 + 0x2973fbb5]
adc dh, dh
xor byte [rdi + rdx], cl
imul esp, dword [rax], 0x2c326882
and eax, 0x6c6483f1
push rax
jbe 0x403069
sbb dword [r14], ebp
scasb al, byte [rdi]
xor ecx, dword [rip - 0x3d669b70]
leave
insd dword [rdi], dx
xor al, 0x78
wait
and dword [rax + rdi*2 + 0x6464f011], esp
or esp, dword [rax]
fmul qword [rdx + 0x71]
jmp 0x2d6a975c
sbb byte [rax - 0x52ad5ccf], dl
je 0x4030ff
jmp 0xffffffffc1e0e3bf
test eax, 0xc5858b0e
insb byte [rdi], dx
insd dword [rdi], dx
push rdx
add spl, byte [rdi]
out 0x24, eax
cmpsd dword [rsi], dword ptr [rdi]
insd dword [rdi], dx
push rdi
mov bh, 0x6c
jl 0x403146
pop rax
je 0x40317c
pop rdi
test dword [r8*4 - 0x7c827e89], ecx
leave
and r12, rsi
xor dword [rsi], ebp
xor ebx, dword [rax - 0x6a]
and esp, dword [rcx + 0x31]
xchg eax, esp
or bh, byte [rax]
mov esi, 0x68d8c70
cmp byte [rip + 0x49341173], dh
ret 0x8252
ret
mov dh, 0xbd
jmp 0x7296c3db
in al, dx
and eax, 0xa402de04
mov ecx, 0x133526e8
shl byte [rdx], cl
mov byte [rax + 0x6d], dl
movsd dword [rdi], dword ptr [rsi]
test byte [rsi], dl
and ebx, edi
movsb byte [rdi], byte ptr [rsi]
fsub dword [r9]
test qword [r9 + r14*2 + 0x51b46548], rcx
push rax
call 0x2da1d644
mov al, 0x8e
and dword [rdi - 0x3e], edx
enter 0x4132, 0x78
sub eax, 0x54028690
xor al, 0xdc
nop
jo 0x403125
mov dh, byte [rsi + 0x45356d0b]
in al, 2
xor al, 0xce
or ebx, dword [rcx]
ret 0x14c2
or dh, byte [rcx]
ror byte [rdx + 0x3a], cl
mov dword [rax - 6], edi
xor esp, dword [rip - 0x6935bfba]
xor qword [rip - 0x69edeedf], r11
sbb dword [rcx - 0xc], 0x1c1850dc
js 0x403171
xor dword [rsi + 0x1b], eax
xchg eax, ecx
mov ch, 0xa4
retf -0x3df7
and eax, 0xe6024087
xor ch, byte [rcx]
and rax, 0x417f11bd
add ah, byte [rcx - 0x73aaf9bb]
fst dword [rdx]
sbb dh, byte [rsi - 0x4c6f7352]
mov bl, 0xa1
movabs al, byte [0x786f75a323d55743]
xchg eax, esi
test byte [rsi + 0x77], ch
add byte [rbx - 0x3d0b5377], ch
js 0x40323d
mov al, 8
jmp 0xffffffffc303f5cc
sub ah, byte [rsi + rcx + 0x5e5d30ad]
add ebp, dword [rbx + 0x14]
in eax, dx
mov bl, 0x7a
test byte [rax], dl
pop rbp
adc dword [rax - 0x37], ebx
push rbp
nop
push rdx
adc bl, byte [rsi]
xor ch, byte [rdi]
and eax, dword [rcx + 0x341a7c84]
jbe 0x4031b5
cmp al, 4
nop
pop rbx
adc dl, ah
cmp edi, dword [rax + 0xc430c06]
sbb bl, ch
adc byte [rsp + rdx*2], al
loopne 0x4031e1
sub byte [rsi + rcx], al
sub dword [rsi + rbx], esi
sub byte [rcx - 0xc9aae6b], ah
test dword [rax + 0x5a904085], 0x6560326e
cmp byte [rdi + 0x42], dl
xchg dword [rsi + 0x41412101], ecx
pop rdi
out 0x90, eax
mov bl, 2
int3
nop
xor ebx, dword [rcx + 0x1d]
sub eax, 0xd2c6477
pushfq
mov dl, 6
loop 0x4032d5
mov al, 0x15
push 0x64248a41
xchg eax, edi
jo 0x4032e6
and al, 0x2d
iret
insb byte [rdi], dx
je 0x403277
adc dword [rdx], edx
cmp bl, byte [rdx - 0x37cee18e]
push rax
sub al, byte [rcx + 0x136149cf]
or byte [rdx + rcx*2 - 0x45], cl
lodsq rax, qword [rsi]
imul edx, ecx, 0x4c
cmp dword [rdi + 0x50], esp
xor eax, 0xb059c070
xor eax, 0x873df2c
outsb dx, byte [rsi]
ret 0x80bc
sbb r9b, byte [r8]
jae 0x40325c
movabs dword [0x137b0073bf206d11], eax
jp 0x403260
ret 0x812f
pop rax
jae 0x403337
xchg eax, esp
jb 0x4032e5
cdq
pop rdi
xor qword [r10 - 0x38], 0xffffffffd6c2ad94
cli
jbe 0x4032e3
jne 0x4032f2
xchg eax, esi
xchg rax, rbx
and byte [rax], bl
scasd eax, dword [rdi]
mov dl, 0xe
mov dword [rbp + 0x28], ebp
add edi, edi
imul esi, dword [rcx + 0x6d], 0x1749525c
add byte [rbx + 0x31], cl
jb 0x403288
out 0xa, al
mov edi, 0x2c2b624b
nop
lahf
pop rdx
and ah, byte [rbx + 0x1da84d49]
mov edi, 0xc16523da
int3
movabs dword [0xa1ed5ceeac82d0e3], eax
test byte [rbp + 0x2c], ah
adc dword [rip + 0x486322e2], eax
cmpsb byte [rsi], byte ptr [rdi]
outsb dx, byte [rsi]
xor dword [rcx + 0x59], esp
nop
adc ebx, eax
cmp byte [rbx], bl
fist word [rdx + 0x50c43cc2]
xor esp, dword [rbx]
and al, 0xb1
cwde
jnp 0x40334f
ret 0x8408
push rbp
xor al, 0xca
add byte [rcx], ch
sub eax, edx
mov al, byte [rbp + 0x12]
sub al, 0x56
sbb al, 0x61
xchg eax, ecx
retf 0x1714
xor al, 0x62
xchg eax, ecx
or eax, 0x6432fa48
or al, byte [rcx - 0x2a496dfb]
adc byte [rdx + 0x31030611], dh
xor ebp, dword [rax + rcx]
and dword [rcx + rsi], esi
in al, 2
or esp, dword [rsi - 0x77]
js 0x403356
sub dword [rsi + 0x59], edx
nop
mov al, 0x76
movsb byte [rdi], byte ptr [rsi]
mov al, 0xb
xor bl, byte [rip + 0x5892b909]
mov ecx, 0x580cc431
sbb dword [rsi], edi
xchg eax, esp
and dl, byte [r13 + 0x58c29da0]
xor al, byte [rcx - 0x3ddacd87]
or esp, dword [rax]
test dword [rsi], esp
sbb byte [rax], cl
jb 0x40332e
xor ebp, dword [rax - 2]
insd dword [rdi], dx
fiadd word [rdx - 0x1ac56f1e]
retf
xor al, 0x10
push rdx
mov dword [rax + 0x2d], eax
wait
sub al, 0xab
and dword [rdx + rsi*2 + 0x43a3d434], esp
lodsb al, byte [rsi]
or edx, edx
inc dword [rcx + 0x15e36545]
adc sil, byte [r10]
push rsi
jo 0x40338a
jne 0x403440
insd dword [rdi], dx
movsxd rsp, dword [rbx - 0x7d]
pop rdi
xchg eax, edx
fidiv word [rax - 0x927a72a]
xor ecx, dword [rsi + 4]
add ecx, dword [rdi - 0x4bafd97a]
mul byte [rdx - 0x54]
pop rsi
pop rdi
insb byte [rdi], dx
jne 0x4033a6
sub ch, byte [rbx - 0x4a65df27]
sub al, 7
rcr byte gs:[rdx + 0x64], 1
mov ah, 0xc2
cmp qword [rbp + 0xc], -0x157e9fa1
imul esi, dword [rbx + 0x6f], 0x5f
push 0x1846cd35
packsswb mm2, qword [rax + 0x52902d4a]
sbb byte [rcx], dh
adc byte [rax - 0x521adf7a], dl
xor al, 0x84
enter -0x49e0, 0x41
xor dh, ah
xchg byte [rcx], ch
cmp al, 0x28
add edi, esp
int 0x8a
xchg eax, ebp
xchg eax, ecx
and byte [rbp + 0x420d39d9], bl
int 5
mov edi, 0x14a32854
xor edx, dword [rdx + 0x16]
movsb byte [rdi], byte ptr [rsi]
test dh, bh
fdiv qword [rcx + 0x2f5640bd]
xor dword [rip + 0x58f14836], 0x1d580616
xchg eax, ecx
rcl byte [rdx + 0x2565412], 1
test al, dl
mov edx, dword [rsi + rdx*2 + 0x48]
add byte [rbx - 0x73bb5950], 0xb0
add al, 0x73
mov ecx, 0x8c616832
jae 0x4034e0
or r8d, dword [rsi + r8*4]
jbe 0x40342e
adc ecx, ecx
sub eax, 0x1d88118b
movsxd rdx, dword ss:[rip - 0x71facab8]
imul esp, dword [rcx], 0xff050855
movsb byte [rdi], byte ptr [rsi]
cwde
adc al, 9
or qword [r9], r8
mov dl, 0xc3
sub byte [rbx + rsi + 0x16076712], al
mov ecx, 0xe06d4464
adc al, byte [rsi + 0x56]
xchg dword [rdi + 0x42563f03], edi
retf 0x3825
push rcx
rol dword [rcx + rax + 0x4b645089], cl
sub al, 0x3e
push 0x76b13480
sti
and eax, 0xb10a5167
xor byte [rcx + 0x49], dl
int 0x48
int3
or byte [rcx + 0x78d18c0b], ch
int3
pop rdx
adc esp, 0xbc18692f
push rdx
sbb byte [rbp - 0x37a56160], dh
adc byte [rax - 0x4e], 0x2f
retf 0x561a
shr dh, 0xe9
and al, 0x18
push rsi
out dx, eax
xor ch, byte [rdi]
sbb dh, byte [rax - 0x77faedbf]
cmp al, 0xa5
xchg eax, edx
push rcx
mov byte [rbx - 0x640f494c], cl
mov byte [rbp + 0x68636b63], 3
outsb dx, byte [rsi]
sub cl, ah
xor cl, byte [rdx]
and dword [rbp + 0x15e8c434], ecx
and cl, ch
or esi, r14d
add eax, 0xa3922193
xor dword [rcx], esp
xor byte [rax - 0x6f], cl
jmp 0xffffffff815679e3
movsb byte [rdi], byte ptr [rsi]
imul ch
push rax
movhlps xmm1, xmm0
xor dword [rbp - 0x70], ebp
rol byte [rbx + 0x406dda33], cl
add ah, ah
add cl, byte [rbp + 0x3c]
test byte [rbp + 0x35], ch
mov dword [rdx + rdx*4 - 0x2a99eda0], ecx
xchg eax, edx
sub dword [rbx + 0x64e8f726], esp
mov al, 0x52
mov ch, 0xa7
cmp dl, bl
ret 0x988
js 0x40355b
mov ah, 0x59
mov cl, 8
stosd dword [rdi], eax
wait
pop rax
sub byte [rax + rbx*2 + 0x565cd2b7], al
xchg dword [rsi], edx
outsb dx, byte [rsi]
sub esi, dword fs:[rsi + 0x694385b7]
jb 0x4035f4
adc ch, byte [rcx + 0x7c]
lodsb al, byte [rsi]
add cl, byte [rcx + 0x2b]
xor eax, 0x64ad421b
stosb byte [rdi], al
and dword [rsp + rdx*8], esp
js 0x403608
push rbx
sub byte [rsp + rax + 0xa30e829], dl
test eax, 0xa5cfb373
mov al, 0x2a
test dword [rbp - 0x16], edi
xchg eax, ecx
mov dl, 0x5a
pop rcx
mov edx, 0x28322cb7
xchg eax, ebp
out dx, al
or al, 0x58
fidiv word [rdi]
fsubr qword [rsi + 0x78]
push rbx
sub ebx, dword [rdi - 0x76]
add dword [rdi + 0xe], ebx
or byte [rsi + 0xc], ah
adc dword [rax], -0x32
sbb byte [rax + 5], ah
enter -0x5bc7, 0x58
sub esp, dword fs:[rbx]
cmp eax, ecx
mov esp, 0x27b29fb7
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jb 0x403619
jae 0x4035ec
jne 0x40357d
add al, 8
imul ecx, eax, 2
int3
out 0xb5, eax
sub byte [rcx + 0x562f44ae], cl
lodsb al, byte [rsi]
xor bl, byte [rax + 0x348ef03c]
or al, byte [rdx + 0x3d]
lodsd eax, dword [rsi]
xor dl, byte [rsi]
pop rax
ja 0x40358b
xchg eax, esi
xchg eax, esp
retf 0x3f98
and byte [rbx], 0x18
xor dword [rdx + 0xa], ecx
and ebx, ecx
adc byte [rdx], dl
push rsi
movsxd rdx, dword [rax + 0x50c95a8f]
js 0x4035c1
or esi, dword [rdi + 0x145fb710]
or dword [rax], ebp
mov word [rax], ds
sbb edi, esi
out dx, al
add al, 0x38
fdiv qword [rcx]
fild dword [rcx + rsi - 0x74]
xchg eax, esp
push rax
mov bl, 0x64
sbb eax, 0x608c5469
push rsi
sub dword [rdx - 0x30], 0x2a
cdq
add ah, ah
insd dword [rdi], dx
ret 0x2058
mov edx, 0x3812e4a2
lodsb al, byte [rsi]
xchg al, ch
js 0x40368e
xchg eax, ebp
add byte [rsp + rbp*8 + 0x2064864], ah
imul eax, dword [rbp + 0x30], 0x20
sbb al, 0x28
ret 0xeff8
cli
xchg eax, edx
sub esp, dword [rdx + rax*2 + 0x1f253132]
nop
shl byte [rip + 0x20786d78], 1
cdq
mov byte [rsi + rdx*4 + 0x20], ah
xchg eax, esp
adc dword [rbp - 0x3a], ebp
xor dword [rbp + 0x17428c10], edx
and eax, 0x428c2315
sub al, 0x90
jp 0x403644
insb byte [rdi], dx
and al, 0x69
push rbx
nop
adc eax, 0x865f1a3
and al, 0x11
xor byte [rbx + 0xb], cl
and al, 7
or ecx, esi
shl byte [rdx - 0x46fccacf], 1
lea edi, [rdx]
xchg eax, edx
xchg byte [rdx - 0x5d], al
mov ah, 0x8e
pop rdi
sub bh, cl
push rbp
rcr dword [rdx + 0x49], cl
ror dword [rbx + 0x33], 0x5f
jbe 0x4036f7
and ah, byte [rax]
movabs dword [0x198892d272ba4c07], eax
adc byte [rdx + 0x36], dh
and al, 0
xchg eax, ecx
xor dword [rcx], 0xffffff9f
test byte [rax], bl
xor byte [rax], cl
add dword [rbx], esi
adc al, 0xa6
or byte [rip - 0x3dd2c1ad], cl
xchg eax, ebx
xor al, 0x93
xchg eax, ebp
add ah, byte fs:[rsi]
sti
fdiv st(6)
sub al, 0x67
and dword [rdx + 0x695552d4], esi
in eax, dx
sbb ecx, dword [rip + 0x753f52a5]
insd dword [rdi], dx
cmp byte [rbx + 0x43], al
or esp, r10d
push rdi
xor ah, dl
pop rbx
js 0x403726
ret 0xab08
mov edx, 0x56f44902
bnd js 0x403770
js 0x4036c3
xchg rax, rdx
and ah, byte [rcx + 0x50e031f5]
or bh, ah
add eax, 0x8d84551d
mov al, 0x82
test dword [r10 - 0x72], eax
add al, 0x68
mul dword [rdi + rbp*2 - 0x6b]
add al, 0x2c
mov ah, cl
mov dl, 0x20
adc al, 6
sbb dword [rdx + rsi + 4], ebx
pop rax
push rdi
xor byte [rdx], dl
xor al, 0xc8
push rdx
mov bl, 0xc4
pop rcx
and dword [rax + rbx*2], 0x67
movsd dword [rdi], dword ptr [rsi]
shr byte [rdx], 0x12
sub byte [rax - 0x76], cl
push rsp
add cl, byte [rbx + rdx*2]
or byte [rsi + r8 + 0x32], r9b
push rdx
mov dword [rbx + rax + 0x255228c3], ecx
or edi, esp
test dword [rax], edx
wait
add byte [rsi], ch
jae 0x4037f4
insd dword [rdi], dx
push 0x7764ec3
je 0x4037f7
push -0x28bf16f7
jb 0x4037f7
mov dword [rax + 7], esi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
imul byte cs:[rip + 0x2b05dc2f]
pop rsi
or eax, 0x75622eb8
sub eax, 0xdb6f7369
fsub dword [rax + rax + 0xd]
push 0x64096864
jns 0x40381e
push r11
mov bl, 0x36
sbb dword [r15 + 0x26e42e73], r8d
int3
or al, 0x5f
sbb ebx, esi
insb byte [rdi], dx
rcr byte [rbx + 0xa], 1
imul byte [rax]
or ebp, esi
je 0x403840
sub esi, dword [rax - 0x25]
imul ebx, edi, 0xa
sub al, 0x6f
or byte [rcx - 0x40], al
test byte [rax + 0x24fb055c], 0x6f
fldenv [rdi]
jmp 0x39a89d17
push 0x570d7264
loop 0x4037dd
outsb dx, byte [rsi]
pop rbp
movsxd rsp, dword [rbx + 0x5f]
movsxd rsp, dword cs:[rbp + 0x70]
and edi, dword [rbp + 0x5c88c966]
insb byte [rdi], dx
adc dword [rdi], esi
mov r15b, 0x58
movabs dword [0x636936a1596a0bc3], eax
sbb dh, byte [rcx]
wait
mov ebp, 0x5e7b6800
stosb byte [rdi], al
mov dh, 0xb5
push rdx
add al, 0xde
push rdx
std
add byte [rax], al
movabs al, byte [0x2c4526018f004a2b]
stosd dword [rdi], eax
jg 0x403852
jb 0x403817
sbb al, 1
or dword [rax + rcx*2], 0x33
and eax, dword [rdi]
push rsp
push rsp
nop
or al, 0xc9
and byte [rax], ah
add al, 0x20
or dword [rcx + rcx*8], 0x31
je 0x4038be
nop
leave
and al, 0x44
idiv bh
ljmp [rdi + 0x41]
sbb esp, esp
cwde
cwde
xor byte [rax + 0x5906486], ah
or byte [rsi - 0x38], cl
and byte [rdi - 0x37c03cb3], al
enter 0x364c, 0x39
cmp eax, dword [rax + 2]
sti
sbb byte [rcx], bh
and ch, cl
and byte [rdi], bh
push rsi
add ecx, dword [rax]
add eax, 0x3c9e48bb
or byte [rip - 0x40a1fe3c], al
nop
movsb byte [rdi], byte ptr [rsi]
dec esp
int3
xchg eax, edx
outsb dx, byte [rsi]
enter 0x22e, 7
imul edi, dword [rdi], -2
pushfq
push r14
xchg eax, edi
cmpsd dword [rsi], dword ptr [rdi]
and byte [rcx - 0x36], 0x26
add dword [rsi], -1
jp 0x4038fc
loopne 0x4038d1
xchg dword [rip + 0x607803f], eax
cmp ebp, dword [rcx + rdx*4 + 0x3f]
inc dword [rdi + rdi - 0x6f9be3be]
mov r8b, 0xb0
mov al, 1
and byte [rax], cl
xchg eax, edi
sbb dword [rsi - 0x576c87ed], ecx
leave
outsd dx, dword [rsi]
and dword [rbx], ebx
lcall [rdx]
mov dword [rdi], edi
test dword [rsp], ebx
nop
add byte [rax - 0x6f75fed0], 0xd
fst dword [rax]
xchg eax, esp
sub eax, 0x5f04dc30
wait
or al, 0xd9
xchg eax, ecx
setge byte [rdi]
rol byte [rdi], 0x61
or esp, esp
cdq
jg 0x40392f
xor byte [rdi], bh
int 0x2a
or cl, cl
movabs dword [0x9ff07cce4a1a4df], eax
test eax, 0x5021d9bf
test bh, dl
cmp edi, dword [rdi - 0x36bc9bce]
push rax
mov cl, 0x3f
push rax
xchg eax, edx
outsb dx, byte [esi]
jg 0x403918
add eax, 0x72793cbf
sbb al, 0x19
xchg eax, ebx
jb 0x4038c5
leave
pop rdx
mov edx, 0x64c9e48b
pop rdx
pop rax
add ebx, ebx
wait
adc al, 0x31
imul eax, dword [rbx], 0x43740717
leave
fcos
adc bh, ah
mov rax, cr7
leave
cmp al, 7
inc dword [rbp + 0x2c]
cmp edx, dword [rdi]
rol byte [rip + 0x5e0f64d8], cl
clc
wait
outsb dx, byte [esi]
pop rbx
jg 0x403961
sbb dword [rdx + 0x10060193], edx
cwde
leave
and bl, bl
mov edi, 0xe4865f5f
and byte [rdi], dl
or byte [rcx], al
add dword [rax + 0xc], esp
and eax, 0x3fcf27
test al, 0xa
and byte [rax + 0x7a890c9], bh
jg 0x403961
xor byte [rdi + rdx + 0x10], 0x3f
or al, al
in al, 0x42
xor bh, byte [rax + 0xb200120]
rol qword [r14 + 0x3f667f15], 0x61
and dword [rsi], ecx
xor al, 0xbf
or dword [rdx + rsi*4 + 0x7b11d9], ebx
sbb eax, 0x3365bfb3
leave
mov ebx, 0x1d673400
jbe 0x4039bd
mov edi, 0x3a1fff1f
in al, 0x10
or byte ss:[rcx], 0x7f
adc byte [rax - 0xdba8000], al
or eax, 0x233
add byte [rax], al
add byte [rax], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x59f7fdea], ecx
jae 0x4039ac
sbb bh, byte [rbp + rbx*8 - 0x69]
test byte [rax + 0x3f00005b], cl
add byte [rax], al
mov esp, 0x490000
add byte [rip + 0xf4], bl
