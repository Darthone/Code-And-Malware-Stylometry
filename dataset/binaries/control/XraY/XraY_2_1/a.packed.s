call 0x401208
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401020
add ebx, ebx
je 0x400fd6
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x40100e
cmp rbp, -4
ja 0x40100e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400ff6
add ecx, 4
mov dl, byte [rax]
je 0x40101e
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x40100e
ret
cld
pop r11
cmp r8b, 2
je 0x401036
jmp 0x4010b3
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401046
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x40102e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x40105e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x40104b
sub eax, 3
jb 0x40107c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x4010b3
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x4010a3
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x4010a1
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401090
cmp rbp, -0xd00
adc ecx, eax
call 0x400fe2
jmp 0x401036
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40118c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x40112a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401176
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401149
push 0x3a707474
jne 0x4011a2
js 0x401162
jae 0x40119c
outsb dx, byte cs:[rsi]
je 0x40115b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4011c9
jb 0x4011bb
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4011e6
jb 0x4011f9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x2120f7
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x2120f7
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x4010c4
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x4011ef
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40119d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f1297
jb 0x4012af
movsxd rbp, dword [rdi]
jae 0x4012a9
insb byte [rdi], dx
js 0x4012af
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40128f
cmp rsi, rcx
jae 0x401297
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401276
cmp al, 0x8f
ja 0x401276
cmp byte [rsi - 2], 0xf
je 0x40127c
sub al, 0xe8
jg 0x401279
push rdi
cmp al, 1
ja 0x401264
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401267
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401294
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4012eb
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1769
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x40132f
mov al, 0xa
jmp 0x40132f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x40130b
inc ebx
mov al, 0
jmp 0x401333
mov al, 2
jmp 0x401333
mov al, 3
jmp 0x401333
mov al, 0x3c
jmp 0x401333
push rcx
rcr ah, 1
fstp st(7)
jle 0x401374
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401386
jg 0x401378
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6afb
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4013d2
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb654f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4013da
cmp esi, 0x21585055
jne 0x4013de
jge 0x4013d0
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4013d3
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4013d7
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401483
pop rcx
or al, 0x3b
jb 0x401489
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4013fb
jmp 0x4013fd
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x366133e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53586
in eax, dx
jg 0x401435
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40147b
mov bh, 0x2a
add edi, 0x10
jmp 0x401478
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4014b5
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4014f1
jne 0x401508
fstpnce st(6), st(0)
jle 0x4014d1
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401507
jrcxz 0x40153b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b49f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4015ba
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40157a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295b4f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4015ed
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401587
and ecx, 7
or al, 0xeb
jae 0x4015f2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401627
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401665
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x40161e
push rax
call 0xffffffff868d130b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401628
std
cmp edi, esi
xchg eax, edi
jle 0x40167d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95c09
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40167b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401669
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401692
js 0x4016d2
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401764
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad299f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401785
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40178a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc2123c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401718
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
mov cl, 0xf
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dh
mov ch, byte [rax + 0x92]
add byte [rax], al
add byte [rax], al
add dil, dil
movabs al, byte [0x200000c06000028]
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40183e
je 0x401847
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401810
mov dh, 0x7d
jbe 0x40180f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401848
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x4b80006], bl
add byte [rsi + 7], al
enter -0x6fd9, 0xf
or byte [rax], al
jo 0x40182e
add byte [rax], dl
or ah, ah
adc ecx, eax
or al, byte [rax]
sub byte [rbx], cl
add byte [rax - 0x1bf60df7], ch
add ecx, dword [rax + rax]
ror byte [rip - 0x6f52000], 1
add al, 0xf2
add dword [rsi], ecx
add al, dh
sldt word [rax + rbx + 0x6d]
add bh, cl
add byte [rax], dl
add byte [rax + 0x11], dl
xlatb
add byte [rbx + 0xe], bl
mov al, 0x19
adc bl, byte [rdx]
and byte [rdi - 0x80], bh
cld
adc eax, dword [rax]
adc al, 0x1e
adc al, 0
call 0x4fd07897
and byte [rdi], cl
adc eax, 0x16f800
add byte [rsi], ch
enter -0x6fd9, 0xf
add byte [rax], cl
sbb byte [rax], al
clc
in al, 3
in al, 7
sbb dword [rax], eax
add byte [rax], dh
sbb al, byte [rax]
cwde
mov dl, 9
in al, 9
sbb eax, dword [rax]
rcr byte [rbx + rdx], 0xd8
xchg eax, ecx
mov esp, 0x417019b
add cl, dh
dec dword [rbx + rbx]
mov ebx, 0xbfb2b869
sbb dword [rdi + 0x400b2002], edx
xchg byte [rax + rdx*4 + 9], ah
sbb esp, dword [rax + 0x2e]
sbb edx, dword [rdx + 0x5f44a041]
cmpsd dword [rsi], dword ptr [rdi]
adc ah, byte [rdx]
sbb dword [rbp + 1], 0x17
push rbx
mov ebx, 0x86c0477a
or al, 0x61
push rdi
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
scasb al, byte [rdi]
fldenv ss:[rbx - 0x36889fd9]
xor cl, al
nop
or al, 0x61
fisub word [rdx + 0x26]
in al, dx
jmp 0x4018a6
or eax, 0x1cfa4761
nop
add al, 0x21
add dword [rdx], esi
fcom dword [rax + 0x1733689c]
imul ecx, dword [rsi], 0x464320c9
push 0x58
add dword [rcx], ebx
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
ja 0x401922
jo 0x401893
nop
and dword [rdi + 0x1906b974], edx
xchg eax, edx
js 0x4018f3
jl 0x40193c
sbb dword [rax + rcx*2 - 1], esp
add byte [rbx + 0x1ec9c90c], 2
test byte [rax - 0x78], al
nop
or al, 0x32
and al, 0x5d
mov word [rax], fs
xor cl, r8b
jnp 0x4018c5
and al, 0x83
or al, 0xc9
xchg eax, esp
ret 0xe498
nop
or al, 0x32
pushfq
adc al, byte [rbx]
xchg eax, edx
xchg r12b, spl
movabs al, byte [0xa86219064864a43a]
test dword [rax + rdx*4 + 0x21], esp
sbb dword [rsi + rbp*4 + 0x41921cb0], ebp
xchg cl, bl
mov ah, 4
add al, 0x32
enter -0x6370, -0x48
sub eax, 0x20c90cbc
push r10
sar byte [rbx + 0xc], 0x32
and al, 0x83
cmpsd dword [rsi], dword ptr [rdi]
enter 0x3243, -0x38
nop
iretd
int3
cmc
leave
and al, dl
sbb al, 5
and dword [rcx], ebx
fadd dword fs:[rcx - 0x7a]
nop
push -0x24
nop
sbb dword [rdx - 0x361b4920], edx
and dword [rcx], ebx
fucomip st(0)
add eax, 0xc832406
leave
in al, dx
sub esi, eax
enter 0xc90, 0x32
push rbp
hlt
and ah, 0x20
xor dil, r8b
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx], bl
sbb esp, esp
or ah, cl
or byte [rsi], al
sbb dword [rax + rdx*4 + 4], esp
adc byte [rax], dl
xchg byte [rax + rdx*4 + 0x41], ah
fsub qword [rax]
jrcxz 0x4019d5
sbb edx, dword [rdx - 0x14cfb83f]
xor al, 0xcf
sahf
jne 0x401a23
hlt
neg dword [rdx]
adc dl, byte [rdi]
push rbp
add eax, eax
leave
xchg eax, ebx
and al, 7
outsd dx, dword [rsi]
adc edx, dword [rip - 0x6bc612fa]
iretd
cmp dword [rdi], eax
adc ah, byte [rcx - 0x29]
test dword [rax], esi
js 0x401a3d
cmpsd dword [rsi], dword ptr [rdi]
xchg eax, ebp
jnp 0x401981
push r11
add eax, 0x832bb14f
fsub dword [rsi + 0x47]
cmpsd dword [rsi], dword ptr [rdi]
jl 0x401a3e
mov al, 0x29
adc dword [rdi + rcx*8], 0x5ee8178d
xchg byte [rax + 0xa8a1f47], ah
sbb al, byte [rsi]
nop
or eax, 0x7a920ef
adc ah, byte [rdx]
sbb dword [rbp + 0x530cad6c], 0x17
mov ah, 0x9b
sbb al, 0xec
retf -0x3800
add byte [rip + 0x20e4ec86], cl
fist word [rdi]
sbb byte [rdx], al
sahf
sbb al, 0x8e
or dh, al
or ch, byte [rdx]
sbb dword [rsp + rbp*8 + 0x1722e49a], -0x7c
adc esp, dword [rsi]
xor bh, byte [rcx]
fmul st(1)
xchg eax, ebx
or dl, al
adc al, 0xab
mov edi, 0x843b08c5
pop rbp
fld dword [rax]
call 0xffffffffcf67917a
sahf
cmp al, 0x33
add edi, dword [rdi + 0x50e608f2]
nop
xchg eax, ebx
or ebp, dword [rsi]
fdivrp st(6)
add ah, cl
xchg eax, ebp
cli
or byte [rdi], al
pop rsi
or dword [rdi], edx
xchg dword [rbx - 0x38], eax
add eax, 0xf50a5683
nop
xchg eax, ebx
movsxd rsi, dword [rdi + 0x6105ab1b]
mov eax, 0xc836a201
or dword [rdi - 0x55e0f644], eax
sbb edx, dword [rdi]
in al, 0x84
or dword [rdx*8 + 0x4567177d], 0x48
enter 0x1911, 0xb
out dx, eax
adc byte [rdx + 0xf], bl
xor eax, dword [rdi]
loopne 0x401a9a
cmp dword [rbx], edi
sbb byte [rdi], cl
mov byte [rbx], dl
cmpsd dword [rsi], dword ptr [rdi]
xlatb
mov ebx, 0x50490ec0
pop rbx
or ah, byte [rdi - 0x5bfea092]
movsxd rcx, dword [rax]
mov byte [rdi + 0x10], ch
jb 0x401b13
xchg byte [rax + 0x27df4795], dh
or eax, 0x7b390727
sub al, 1
call 0x2186270b
fstp dword [rsi - 0xd58ff4d]
add bl, byte [rdi - 0x58]
xchg dword [eax + esi*4 - 2], esp
movabs al, byte [0xd84ecf2794ef0b0b]
add dword [rcx - 0x29], esp
or eax, 0x17d05f0b
ret 0xe40b
cmpsd dword [rsi], dword ptr [rdi]
sbb eax, 0x7f0b4e0b
in al, 0x20
or eax, 0x471a2a72
or dword [rbx], 0xe4870817
pop rdx
mov ecx, dword [rbx]
movsb byte [rdi], byte ptr [rsi]
sbb al, 0xec
in al, 0x60
adc al, 0x93
pop rdi
xor al, 0xc
cmp dword [rax], ecx
sbb dword [rsi + rbx*2 + 0xc714f1f], 0x5d
cmpsd dword [rsi], dword ptr [rdi]
in al, dx
sbb ebp, edi
jge 0x401b5c
cmpsd dword [rsi], dword ptr [rdi]
cdq
test dword [rbx + rdi], edi
test byte [rdi], dl
mov bl, 0xc
mov edi, 0x384113c6
cmp eax, ebx
int3
cdq
adc al, 0x28
or dword [rip + 0xffdc9c9], 0xffffff90
loop 0x401bb6
or dword [rbp - 0x77e86f43], r11d
cmpsd dword [rsi], dword ptr [rdi]
enter -0x1329, 5
jb 0x401b30
or eax, 0x275f0d3d
iretd
jp 0x401b7e
add byte [rdi + rdx*8 + 0x10], 0xbd
or eax, 0x3610efe0
and al, 0xd2
and r9d, dword [r14]
ja 0x401b57
rcr byte [rsi + 0x19], 0xf
sub cl, byte [rsi]
mov r10d, 0x7a4e480e
adc esp, 0xd6c0470e
xor word [rbp + rsi*8 + 0xe], 0x2f
xlatb
cmc
in al, dx
adc byte [rdx - 7], dh
adc dword [rdi], ecx
ja 0x401c2e
adc eax, 0x9e4f205e
idiv dword [rcx + rax + 0xffa0fac]
or al, 0x72
xor edi, dword [rdi]
xchg eax, ebx
adc dword [rdi - 0x79], edx
mov r8d, 0xff0fe032
xchg eax, edi
fild qword [rbx - 0x70]
movabs al, byte [0x747374726309df70]
jne 0x401c52
jle 0x401b99
bnd jmp qword [rbx]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
push rax
jb 0x401c67
imul esi, esi, 0x1ad6ffee
pop rdi
je 0x401c7a
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401c36
outsd dx, dword fs:[rsi]
pop rdi
or ebp, ebp
mov bh, 0xff
mul byte [rdx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401c86
jne 0x401ca2
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401c9b
sub dword gs:[rdi + 0x7f], ebp
cmp ebp, 0x35372e64
cmp byte [rip + 0x69665f24], dh
outsb dx, byte [rsi]
imul ecx, dword [rax], 0xdf617272
outsb dx, byte [rsi]
or eax, 0x655f79fe
outsb dx, byte [rsi]
je 0x401cc1
jns 0x401c12
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401c1c
mov edx, 0xd327301
pop rdi
sub dword [rdx + rbp - 1], esi
outsd dx, dword [rsi]
mov bh, 0x76
insd dword [rdi], dx
adc bl, byte [rdi + 0x5a277070]
push rbx
je 0x401cbe
xor dword [rcx], edi
jo 0x401cdf
movsxd rsp, dword gs:[rbp - 0x28]
mov bh, 0xad
mov ch, 0x77
pushfq
xor byte [rdx + 0x6e], bh
movabs byte [0xb773ac1a74637572], al
xor esi, dword ss:[rbx + 0x78]
movsxd rsp, dword [rcx + 0x75]
adc al, 0xef
jbe 0x401c4e
std
imul esp, dword ss:[rdi + 0x6e], 0x380c650f
push 0x69
outsd dx, dword [rsi]
neg ebx
jbe 0x401cb8
cmp qword [rdx + r11], r9
jne 0x401cf4
js 0x401d2a
xor r14b, byte [rcx]
mov dh, 0xf6
fbstp tbyte [rbp - 0x56999a93]
insb byte [rdi], dx
jp 0x401d01
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x9ec15745
ror dword [rip + 0x19091b30], 0x11
mov dh, 7
mov edx, 0x675f9831
adc dh, byte [rax]
clc
jo 0x401d4d
ret
in eax, dx
int 0x3e
pop rbp
adc dh, byte [rcx]
xor eax, 0xa5786543
ret 0xedb6
in eax, dx
retf 0x4c73
xor eax, 0x45b66153
test dword [rbp + 0x3b], edi
test al, 0x73
jne 0x401d66
jae 0x401d25
cmp byte [rdi + 0xa], bl
in eax, dx
or bh, byte [rbx + 0x69]
insd dword [rdi], dx
imul edi, dword [rdx + 0x41], 0xe1010a37
mov bh, 0x15
jmp qword [rax]
movsd dword [rdi], dword ptr [rsi]
push r11
not dh
insd dword [rdi], dx
imul ecx, dword [rdx + 0x24], 0xa9a56235
test dword [rbp + 0xd86b0ad], ebp
outsb dx, byte [rsi]
adc al, dl
movsb byte [rdi], byte ptr cs:[rsi]
mov al, 0x64
and dword [rdi - 0x26e39489], eax
adc eax, 0x67349db6
adc dword [rax + 0x7b], esi
and esp, ebx
adc ah, dl
insd dword [rdi], dx
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
pop rax
sub byte [rdx + rsi*4 + 0x62915127], ah
add al, 0x32
add dword [rsi + 0x13], edx
and dword [rax + 0x27774f2d], edx
sub ebp, dword [rbx + rbx*4 + 0x5d]
cmp dword [rsi], esp
or edi, dword [rcx + 0x4a]
or al, 0x64
in eax, dx
xchg eax, edx
xor al, 0x6e
jmp 0x401d16
mov dl, 0xb7
xchg byte [rbx + 0x6f291e11], bl
jne 0x401df9
sub bl, byte [rcx + 0x69]
cmpsb byte [rsi], byte ptr [rdi]
jo 0x401da5
jbe 0x401e0b
jbe 0x401de9
push rbp
jo 0x401d3a
add esi, dword [rsi]
sub eax, 0x46d956a
mov ebx, 0x64d92830
nop
jne 0x401e15
int 0x15
jo 0x401da1
sub byte [rsi + 0x316b96b5], dh
cmp al, byte [rip + 0xc2b6c17]
rcl edx, cl
xor edx, dword [rdx + rsi*2 + 0x7b20f4eb]
mov al, 0xa9
xor dword [rdi], esp
je 0x401e42
jo 0x401df0
jnp 0x401d72
xor ch, al
movsb byte [rdi], byte ptr [rsi]
je 0x401e42
movsd dword [rdi], dword ptr [rsi]
push rdx
sub byte [rbx], ah
out 0x1b, eax
push bx
cdq
cmp edx, dword [rbp + 0x28726274]
and eax, 0x40259070
mov dh, 0x61
outsb dx, byte [rsi]
cdq
sub byte [rbx + 0x6434321d], bl
sub byte [rsi + 0x72], cl
sub ch, byte [rbx - 0x25]
and al, 0x6e
sbb byte [rbx + rsi*2 + 0x70], dh
movabs eax, dword [0xc8665b73544c929]
push rdi
pop rax
sub dword [rsi], esi
test byte [rbx + 0x6978f0ac], ch
jp 0x401e8c
cmp ebx, dword [rip + 0x38b81e38]
movabs eax, dword [0x8386816f5f01b174]
push rbx
and eax, 0x2264a2bd
mov dl, cl
or bh, cl
or eax, 0xac157779
sal ebx, -0x28
jo 0x401eb2
xor ch, byte [rdx]
sub dword [rsi - 0x2d], 0x646f6d79
push rax
js 0x401eba
or byte [rbp*8 - 0x614be723], dh
jrcxz 0x401ec2
imul ecx, dword [rax + 0x7a], 0x73535c0c
or eax, 0x65648f7e
push rbx
add edi, esi
mov ebx, 0x69300fdf
xor r11b, byte [rbx + 0x7c33bff6]
pop rdi
pop r15
insd dword [rdi], dx
xor eax, 0x52465f4d
pop r15
or r13b, byte [rip + 0x3a89364f]
or eax, dword [rdi + 0x4e]
push rbp
adc dil, byte [rdi]
fld dword [rbx + 0x52444820]
push rbx
pop r13
insb byte [rdi], dx
ret 0xfde0
push rsp
sub r9b, r13b
adc byte fs:[rsi + 0x77], ch
shr byte [rip + 0x44a5729f], 1
pop rcx
and eax, 0xb4ed6857
xor eax, 0x8f154e70
mov ebx, 0x6fb7f6dd
je 0x401f33
push rsp
pop r15
xor ch, byte [rsi]
add dword [rip - 0x1924c8e2], esi
outsb dx, byte [rsi]
shl byte [r11 - 0x38], cl
movsxd rsi, dword [rsi + 0x46]
fldenv [rbx + 0x37]
or byte [rcx + 0x6375ae68], dl
xor esi, dword [rsi - 0x7a8a4045]
jns 0x401ed4
jbe 0x401eef
xor dword gs:[r13 + 0x52], eax
pop rdi
add al, 0x1a
test dword [rdi], eax
outsb dx, byte [rsi]
sti
fsubr st(2)
out dx, al
pop rsp
jne 0x401f6c
movsxd rsi, dword [r8d]
xor dword [rsi], esp
mov ecx, 0xfc99adb7
xchg eax, edx
jae 0x401f30
push r11
add al, 0x68
pop rbx
loope 0x401ed4
add byte [rbp + 0x32], cl
push rcx
mov dh, byte [rbx - 0x4d]
shl dword [rsi - 0x4f], 1
mov ch, 0x14
and byte [rdi + 0x25], dh
or al, 0xbb
mov bh, 0x7f
imul ebp, dword [rsi], 0xe
insd dword [rdi], dx
insd dword [rdi], dx
xor esi, dword [rdx]
add al, 0x36
xor dh, byte [rax - 0xf51c6cd]
out dx, eax
sahf
xor dword [rdx + rsi], eax
xor eax, 0x38343736
xor esi, dword [rsi]
in al, dx
adc edi, ebp
imul ebp, ebp, -0x61
xor dword [rdx + rsi], esi
cmp dword [rcx + rdi], esi
adc al, 5
adc dword [rdi], esi
and al, ch
jg 0x401f0d
push qword [rsi]
xor esi, dword [rsi]
cmp dword [rdx], esi
cmp byte [rsi], dh
xor al, 0x30
xor eax, 0x37323230
xor esi, dword [rax]
outsb dx, byte [rsi]
mov bh, 0xd8
scasd eax, dword [rdi]
push rdi
push rdx
xor dword [rax], edi
add al, 0xaa
xor al, 0x33
xor eax, 0x575d0b33
fisttp dword [rbx + 0x6d718134]
loopne 0x40200a
mov ebp, dword [rbp - 0x7fcef679]
ficom dword [rdx - 0x44]
jmp 0x401fef
imul eax, dword [rdi], 0x43
insb byte [rdi], dx
and eax, 0x2473350b
movabs eax, dword [0x80909fb766d7050]
adc eax, 0x2c2c221
or eax, 0xe81b824d
adc dword [rax], 0x22
xchg eax, edx
pop rax
pop rax
pop rdi
xor eax, dword [rsi + 0x30]
pop rdx
mov ah, 0xb1
push rdx
mov bh, 0x47
imul esi, dword [rax + 0x37], -0x2d
jae 0x401ff8
test dword [rcx + rcx*2], esi
pop rdx
js 0x402057
insb byte [rdi], dx
or byte [rcx], cl
scasb al, byte [rdi]
mov ebp, 0xe121746d
fld dword [rcx - 0x26a28bed]
cmp byte [rax], sil
rol dword [rax + rbp*2 - 0x4c], 0x21
leave
pop rsi
xor al, 0xd4
std
in al, 0xd2
popfq
jo 0x401f9f
xchg eax, edx
xor dword [rbx], eax
xor byte [rdx + 0x31], ah
retf 0xe0e
ja 0x402058
pop rdi
xor eax, 0xa8cac45
scasd eax, dword [rdi]
in al, 0x44
push r12
and bl, byte [rbx]
sub edi, ebp
sal dword [rsi + 0x5419430c], 1
rcr byte [rbx], 1
or ch, byte [rsi - 0x76a53ab1]
jne 0x402040
jnp 0x40205c
movabs dword [0xc33b3da56e450081], eax
sub bl, bl
add ch, byte [rcx - 0x7fa6b70c]
test byte [rdx + 0x7d], bl
stosd dword [rdi], eax
movabs eax, dword [0x6f5986e34804ed5]
xor dword [rcx - 0x12], ecx
jmp 0x600d72c5
js 0x40200d
push rdx
mov eax, 0x40685f15
jno 0x4020a7
retf
cmp al, 5
and bh, byte [rcx]
stosd dword [rdi], eax
rcr byte [rax], 1
cdq
imul esi, dword [rbx + rdi*2 + 0x6e], -0x67
mov word [rcx], cs
fist dword [rax + 0x6d083578]
jns 0x402072
lodsd eax, dword [rsi]
scasb al, byte [rdi]
cdqe
add byte ss:[rbp + 7], 0x53
xchg byte [rax - 0x5e83b310], al
insd dword [rdi], dx
pop rsp
cwde
or eax, 0x3272a402
jno 0x402038
lodsd eax, dword [rsi]
xor byte [rdx + 7], bl
pop rsi
in al, 0x94
sbb cl, byte [rcx]
mov word [rbp + 0x5d], fs
nop
mov ecx, 0xe7218135
fild qword [rcx - 0x10f19498]
xor bl, byte [rdx + rcx*2 + 0x2c]
xor al, 0x64
xlatb
sub al, 0x81
mov al, 0x12
xchg eax, edi
cwde
lodsq rax, qword [rsi]
xchg eax, edi
mov edi, 0xa536949
loope 0x40210b
pop rbp
xor al, byte [rdx]
xchg eax, ebx
or eax, 0x84ad6058
mov word [rbx], ss
jo 0x4020ef
and byte [rsi + rax*2], bl
out dx, al
push rdx
xlatb
and byte [rax - 0x63], al
pop rbx
insd dword [rdi], dx
cmp al, 0x7a
loope 0x402162
cmp dword [r8 + 0x4b], edx
movsxd rsi, dword [rip + 0x45f3353]
fsubr st(1)
out 0x20, eax
xor r15b, byte [rbx - 0x57af8db0]
sbb eax, 0xa050fb67
xlatb
out dx, al
movabs byte [0x2130765f66745ed1], al
sbb eax, 0x944be14
jbe 0x4020e3
xor dword [rsi], ebp
xor eax, dword [rax]
fiadd word [rbx + 0x101d8342]
push rbp
outsb dx, byte [rsi]
mov eax, 0x5dba28e6
adc dword [rdx + 0x4340cbed], 0x43
cmp al, 0x30
lodsb al, byte [rsi]
ret 0xc020
out 0xaa, al
imul esp, dword [rdx + rbx*8], -0x5d
in al, 0xc7
and edx, dword [rdx - 0x2296cdf5]
ret 0xf15b
add byte [rdi + 0x6f], ah
sal byte [rbx + 0x79], cl
insd dword [rdi], dx
fbld tbyte [rdx + 7]
je 0x40216b
fidiv dword [rax + 0x9687293]
and dword [rdi - 0x48d3ca4a], esp
jo 0x40217a
outsb dx, byte [rsi]
outsd dx, dword [rsi]
cmp eax, 0xd67152d
je 0x402166
and eax, 0x622e3808
jne 0x4021d4
sub eax, 0x2d8b5ade
jp 0x40218c
or eax, 0x64093865
jns 0x402201
or al, 0x67
insd dword [rdi], dx
out 0x4f, al
sbb dword [r14 - 0x76], r14d
add dword [rdi], esi
xchg byte [rsp + rcx + 0x5f], cl
sbb ebx, dword [rdx + 0x44af60a3]
popfq
sub byte [rcx], cl
adc al, 0xb7
cmp eax, 0x72746f03
js 0x4021c0
sub al, 0x6f
or cl, dl
popfq
pushfq
add esi, esi
add eax, 0x1a6f247f
popfq
add eax, 0x652e888f
push 0xa71682e
lodsd eax, dword [rsi]
jne 0x40219c
or eax, 0x2ef7635d
adc edx, dword [rdx]
jb 0x402237
or dword [rbx + 0x4e116cbd], eax
sti
mov al, 0xd9
or ebp, dword [r10 + 0x63]
jb 0x40218b
xor eax, 0x2a85bd9b
add byte [rax + 0x7b], ch
pop rsi
mov dh, 0x35
int 0x9f
add al, 0xa3
push rdx
std
add byte [rax], al
sbb dword [rdx + 0x1bf5462], -0x21
cdq
wait
add eax, 0x3f07972c
int 0x90
or al, 0xc9
sbb al, 1
and eax, dword [rdi]
or dword [rdx + rsi], 0x20
push rsp
push rsp
and byte [rbx + rax*2], ah
xor ah, byte [rsp + rax]
xor dword [rip + 0x74320c83], esp
je 0x40224d
nop
fimul word [rip - 0x980bc]
ljmp [rdi - 0x68]
sbb dword [rax + rbx*4 + 0x28], esp
add eax, 0x9219a406
or byte [rsi + 0xb], cl
sal byte [rdx + 0x76], 0x90
sar dword [rdi], -0x40
clc
add ebx, edi
imul eax, dword [rsi], 0x183f6c99
push rsi
add eax, edx
wait
adc byte [rdi + rbx*2], ch
xchg eax, edx
out dx, al
and bh, byte [rcx - 0x72]
add bl, byte [rsi - 0x41]
lcall [rbp + rdi*4 + 0x787c109]
mov edi, 0xd90dd22a
nop
add al, byte [rdi]
imul edi, dword [rdi], -2
jb 0x40225e
add esi, dword es:[rax + 7]
cmpsd dword [rsi], dword ptr [rdi]
movabs al, byte [0x4f7aff060c9b29ba]
add al, 0xf6
add al, 0x4b
xlatb
out 0x76, eax
adc edx, dword gs:[rsi]
inc dword [rdi + rdi + 0xc8320c8]
sub byte [rax], bpl
sbb byte [rax + 0x2e], al
cmp dword [rax - 0x6471e6ff], eax
adc eax, 0x6134193
fst dword [rax + 0x72]
ret 0x1aff
mov dword [rdi], edi
in al, 0x20
or dword [rax + rdx*8], 0xffffffd0
adc byte [rcx], al
test byte [rax + rcx*8 + 0x2e], ch
adc byte [rdi], al
xchg eax, esp
add eax, 0x77119b86
xchg eax, ebx
and dword [rbx], edi
mov dl, 0xf
popfq
insb byte [rdi], dx
cmp dword [rbx + rsi*2], 0xd527f07
wait
push rax
and dword [rcx], edi
movabs dword [0x9ff99c9434907af], eax
test eax, 0x2cdccebf
or ah, bh
jmp qword [rax]
nop
sbb al, 0x16
mov cl, 0xe4
int3
stosb byte [rdi], al
mov dword [rdi], 0x3053dc7f
xchg eax, edx
movabs eax, dword [0x3f07bc27922e3fbf]
add ecx, ecx
mov ecx, 0x3fc84149
ror dword [rip + 0x237f6725], cl
fisttp dword [rsi]
loope 0x4022f0
stosb byte [rdi], al
add rdi, qword [r15]
mov edi, 0x39286e90
adc bh, ah
lar eax, word [rdi + rsi]
sbb eax, edi
call qword [rdx]
and byte [rbp - 0x19], 0xf3
sub eax, 0x2e6c02e9
clc
wait
in al, 0x2c
wait
jg 0x402340
enter 0x1320, -0x4a
jg 0x402366
cwde
and bl, byte [rcx]
pop rbx
mov edi, 0x90a22f2f
sbb al, 0xe4
or byte [rcx], al
add dword [rdx], edx
xchg eax, edx
mov bl, 0xc1
outsd dx, dword [rsi]
xor byte [rdi], bh
cwde
outsb dx, byte [rsi]
xor ah, byte [rdi + rax*2]
or bl, byte [rax + 0x5dd2007]
or byte [rdi + 0x10], bh
or byte [rax - 0x3fcdf37d], dl
test al, 8
insb byte [rdi], dx
mov al, 0x21
mov ecx, 0x307f1520
sbb byte [rdi + 0x3f343f85], al
and esp, edx
mov dl, 0xc3
adc dword [rbx + 0x67], edi
mov cl, 0x48
sahf
xor dword [rax + 0x7f], edx
add dword [rcx - 0x2a], edi
sub ebx, dword [rbx + 0x30e000bb]
dec dword [rax + 0xf]
mov al, 1
movsb byte [rdi], byte ptr [rsi]
cmp dword [rdi], ebx
or dword fs:[rdi + 0x2c], edi
xchg eax, edx
xchg dword [rax], ebp
add dl, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x1df7fdea], ecx
push rsp
retf
retf 0x4e9
jns 0x40240c
movabs al, byte [0x4800000c06000028]
pop rcx
add byte [rax], al
add al, byte [r8]
push -0xc
add byte [rax], al
add bh, bh
