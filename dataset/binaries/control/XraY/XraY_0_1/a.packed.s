call 0x401080
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400e98
add ebx, ebx
je 0x400e4e
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400e86
cmp rbp, -4
ja 0x400e86
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400e6e
add ecx, 4
mov dl, byte [rax]
je 0x400e96
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400e86
ret
cld
pop r11
cmp r8b, 2
je 0x400eae
jmp 0x400f2b
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400ebe
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400ea6
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400ed6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400ec3
sub eax, 3
jb 0x400ef4
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400f2b
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400f1b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400f19
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400f08
cmp rbp, -0xd00
adc ecx, eax
call 0x400e5a
jmp 0x400eae
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401004
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400fa2
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400fee
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400fc1
push 0x3a707474
jne 0x40101a
js 0x400fda
jae 0x401014
outsb dx, byte cs:[rsi]
je 0x400fd3
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401041
jb 0x401033
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x40105e
jb 0x401071
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211da7
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211da7
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400f3c
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401067
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401015
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add dword [rax], eax
jmp rbp
call 0x706f110f
jb 0x401127
movsxd rbp, dword [rdi]
jae 0x401121
insb byte [rdi], dx
js 0x401127
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401107
cmp rsi, rcx
jae 0x40110f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x4010ee
cmp al, 0x8f
ja 0x4010ee
cmp byte [rsi - 2], 0xf
je 0x4010f4
sub al, 0xe8
jg 0x4010f1
push rdi
cmp al, 1
ja 0x4010dc
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x4010df
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x40110c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401163
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c15e1
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4011a7
mov al, 0xa
jmp 0x4011a7
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401183
inc ebx
mov al, 0
jmp 0x4011ab
mov al, 2
jmp 0x4011ab
mov al, 3
jmp 0x4011ab
mov al, 0x3c
jmp 0x4011ab
push rcx
rcr ah, 1
fstp st(7)
jle 0x4011ec
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x4011fe
jg 0x4011f0
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6973
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x40124a
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb63c7
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401252
cmp esi, 0x21585055
jne 0x401256
jge 0x401248
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x40124b
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x40124f
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x4012fb
pop rcx
or al, 0x3b
jb 0x401301
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401273
jmp 0x401275
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36611b6
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf533fe
in eax, dx
jg 0x4012ad
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4012f3
mov bh, 0x2a
add edi, 0x10
jmp 0x4012f0
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x40132d
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401369
jne 0x401380
fstpnce st(6), st(0)
jle 0x401349
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40137f
jrcxz 0x4013b3
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b317
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401432
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4013f2
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582959c7
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401465
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x4013ff
and ecx, 7
or al, 0xeb
jae 0x40146a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40149f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4014dd
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401496
push rax
call 0xffffffff868d1183
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4014a0
std
cmp edi, esi
xchg eax, edi
jle 0x4014f5
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95a81
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4014f3
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x4014e1
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40150a
js 0x40154a
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4015dc
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2817
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x4015fd
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401602
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc210b4
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401590
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add dword [rbx], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
movabs dword [0x90aa], eax
add byte [rax + 0x2870ff04], al
add byte [rax], al
jmp 0x40163f
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4016b6
je 0x4016bf
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401688
mov dh, 0x7d
jbe 0x401687
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4016c0
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x4b80006], bl
add byte [rsi + 7], al
enter -0x6fd9, 0xf
or byte [rax], al
jo 0x4016a6
add byte [rax], dl
or ah, ah
adc ecx, eax
or al, byte [rax]
sub byte [rbx], cl
add byte [rax - 0x1bf60df7], ch
add ecx, dword [rax + rax]
ror byte [rip - 0x6f52000], 1
add al, 0xf2
add dword [rsi], ecx
add al, dh
add ah, dh
adc al, 0x7e
cmp ah, 0
adc byte [rax], al
add byte [rip + 0x16200011], dl
and byte [rdi], bh
adc al, byte [rax]
add byte [rdi], dl
adc eax, dword [rax]
add esp, esp
seto byte [rdx]
adc al, 0
call 0xfffffffff2417701
or esp, esp
adc eax, 0x16f800
add byte [rsi], bl
and bl, bl
add al, 0xf2
add byte [rax], cl
sbb byte [rdi + 0x1f], al
add dword [rsi + 0x1720191c], esi
sbb al, byte [rax]
cwde
fld dword [rdx + rsi*8]
add al, 0x1b
add al, al
sbb al, 0x13
in al, dx
fimul word [rbp + 1]
add al, 0
int1
dec dword [rbx + rbx]
fnsave dword [rsp + rbx*2]
pop rcx
mov edi, 0x20029719
or eax, dword [rax + 0x43]
xor cl, al
test byte [rdi], dl
sbb esp, dword [rax + 0x2e]
mov ecx, dword [rip + 0x44a020c9]
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
or dword [rcx + 0x17012ec1], edx
push rbx
xor r12b, byte [r11 + r8*4]
pop rbp
jp 0x401786
rol byte [rsi + 0x212bb086], 0x97
movsd dword [rdi], dword ptr [rsi]
xlatb
scasb al, byte [rdi]
wait
insb byte [rdi], dx
sal byte [rcx + 0x27], cl
adc byte [rdi - 0x37], dh
sbb dword [rax + rcx*2 + 6], esp
adc esi, ebx
adc dl, byte [rdi]
jb 0x40170c
and ebx, ebp
mov edi, 0xefa5428
xor cl, al
adc al, 4
and dword [rcx], eax
sbb dword [rax + rcx*2 + 0x4e], ebp
sbb byte [rbx], dh
sbb dword [rdi + 0x46219064], eax
sbb bl, byte [rax + 1]
or al, 0x36
and al, 0x67
pop rdi
sbb al, 0x77
and byte [rbx + 0x32], al
fcom dword [rax - 0x46dbd069]
or dword [rcx + rcx*8], 0x20
sub dl, bl
sub al, 0x90
or al, 0x32
and al, 0xff
xor byte [rdi], ah
xchg esp, esp
in al, 0x1e
add dh, byte [rax + rax*2]
add bh, byte [rax]
nop
or al, 0x32
and al, 0x5d
cmp al, 0x20
xor cl, r8b
jnp 0x4017ef
and al, 0x83
or al, 0xc9
ret 0xe448
nop
or al, 0x32
adc r8b, byte [rbx]
and al, 0x27
xchg esp, esp
push rax
cmp al, byte [rbx]
push rsp
enter 0xc90, 0x32
pop rax
test ecx, ecx
and byte [rbx + 0x32], al
pop rsp
scasb al, byte [rdi]
cmp dword [rbx + rax*4], esp
or al, 0xd9
add al, 4
leave
leave
and dword [rcx], edi
push 0x326c042d
and al, 0x83
or al, 0x52
jo 0x401867
xor cl, al
nop
or al, 0x74
cmpsd dword [rsi], dword ptr [rdi]
js 0x401800
leave
and byte [rbx - 0x31], al
jl 0x4017ef
cmp dword [rcx], edi
and al, 0x83
sbb byte [rax - 0x3636f37c], 0x21
add eax, 0x320c6a88
and al, 0x83
mov word [rax - 0x37cdbc70], ss
nop
mov dh, 0x94
fisttp word [rsi + 0xe]
leave
and byte [rax + 0x439c0605], bl
jb 0x401895
sub rax, qword [rsi]
movabs al, byte [0xa880a420c90c8355]
or dword [rdx + rsi], 0x24
cmpsb byte [rsi], byte ptr [rdi]
mov al, 8
xor cl, r8b
and ah, cl
mov eax, 0xc8320cd4
rcl byte [rax], 0xdc
or al, 0x36
and al, 0x83
shl bl, 1
loopne 0x401891
xor bl, al
nop
jmp 0x40186a
in al, 0xf4
cmp al, 0x79
imul byte [rsi + rax + 0x170ed2f7]
push rbp
add dword [rdi + rax], esp
movabs eax, dword [0x1bcf1510279e4e04]
xor ch, byte [rax]
fistp qword [rcx]
cmpsd dword [rsi], dword ptr [rdi]
adc dl, bh
add ebp, dword [rsp + rax*4]
shl dword [rdi + 0x24aec447], -0x22
push rbx
add eax, 0x947664f
mov word [rbp + 0x19], ds
cmpsd dword [rsi], dword ptr [rdi]
jl 0x4018bb
adc al, 0xcf
and al, 0x83
lea r10, [r15]
call 0xfffffffff7436039
and bl, byte [rdi]
xchg eax, ecx
or bl, byte [rdx - 0x11]
leave
cmpsb byte [rsi], byte ptr [rdi]
add byte [rcx + 0xcad1207], ch
scasb al, byte [rdi]
sub al, 0x32
fcom dword [rbx + 0x17]
mov ah, 0
enter -0x7b1c, 0x16
shr dword [rdi], 0x72
mov dword [rdi], 0x3be97213
sbb ecx, dword [rdi + 0x1cd86034]
in al, dx
in al, 0x60
adc al, 2
xchg eax, ebp
or cl, ch
or dword [rdx], 0x2a
call 0x4e81e1fe
jbe 0x4018f5
cmp al, 0x10
or ah, ch
sbb al, 0xec
in al, 0x7c
adc dword [rbx + 0x8c9d7], ebp
pushfq
sbb eax, 0x17d8aec2
in al, dx
or byte [rdi + 0x60c83989], bh
add edx, 0x17
mul dh
or ecx, dword [rcx]
cmp ebp, dword [rsi]
mov edi, 0x2f602fe2
adc byte [rsi - 2], bl
or byte [rdi], bl
or dword [rdi], edx
cmp byte [r12 + r11*2 + 0x3709a687], r8b
enter -0x4e37, 0x60
enter -0x56f1, -0x3d
sbb esp, esp
test byte [rcx], cl
sbb edx, dword [rdi]
fadd qword [rdi + 0x3741c09c]
adc al, 0xb7
or r8b, byte [r11 + rax*2 + 0x30476746]
or bl, byte [rdi]
sahf
sbb al, 0x84
or esi, dword [rbx]
loopne 0x40196c
mov byte [rbx], dl
sbb bpl, byte [rax - 0x32]
push rbx
adc edi, esp
add byte [rsi + 0xaec0bb0], al
cmpsd dword [rsi], dword ptr [rdi]
jne 0x4019be
or byte [rbx], bl
cmp al, byte [rdi + 0x60479c10]
movsxd rsp, esi
or eax, 0x3d9c1782
cmp eax, ecx
out dx, eax
adc al, 0xc
add byte [rdi - 0x36f13107], r12b
test byte [rdx], 0x5f
test al, 5
or edx, dword [rdi]
movabs al, byte [0x80470b124876793b]
adc al, 0x65
adc ebx, dword [rsi + 0x20]
and cl, byte [rbx]
push rbx
or esp, dword [rdi + 0x4e]
ror cl, cl
in al, 0x13
sbb al, byte [rdi - 0x7a]
or ebx, dword [rdx + 0x76]
xor dword [rax + 0x48], 0xa9af0b90
in al, 0x20
or dword [rsi + rdi*4], 0xffffff93
cmp dword [rsi + rbx*4], ecx
xor dword [rax - 0xe], 0x18
adc al, 0x1f
jbe 0x4019ce
sbb ebx, eax
add eax, 0x82d7ca76
or al, 0xa7
sahf
pop rsi
enter 0x43b3, -0x48
or al, 0xbf
jle 0x4019e6
ror dword [rax], 1
pop rbp
enter -0x78cd, -0x80
xor al, 0xd6
xlatb
movsb byte [rdi], byte ptr [rsi]
or dword [rip + 0x47d46cc9], 0x51
adc dword [rdi + 0x2ec1c85e], edi
pop rdi
adc ecx, dword [rax + 0x21790207]
iretd
mov edi, 0xd165430
fcom dword [rax + 0xd45f59c]
cwde
jnp 0x401a2f
mov esp, 0x5f0e2643
imul dword [rip + 0x5e9470e]
add bh, byte [rbp + 0x2f0ed70e]
xchg dword [rax - 0x73fc6df], esi
adc byte [rdi], cl
jns 0x401a19
lodsb al, byte [rsi]
pop rdi
sub byte [rdx], dl
mov esp, 0x330fab01
sahf
int1
add bh, cl
and eax, 0x87906440
sbb al, 0xf7
push -1
jg 0x401aaa
jb 0x401abd
jae 0x401abf
jne 0x401ab3
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or esi, edi
outsd dx, dword [rsi]
in eax, dx
adc byte [rbp + 0x72], ah
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401a6e
outsd dx, dword [rsi]
outsd dx, dword [rsi]
out dx, eax
and dword [rdi + rbp*2 + 0x5f], esp
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401ae4
jne 0x401b00
fcomp st(7)
jle 0x401afd
insd dword [rdi], dx
jo 0x401afd
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x5f243538
loopne 0x401a9d
mul byte [rsi + 0x69]
outsb dx, byte [rsi]
imul ecx, dword [rax], 0x79617272
pop rdi
outsb dx, byte gs:[rsi]
je 0x401b1f
jns 0x401a40
or bl, byte [rbx]
xor bh, dh
in eax, dx
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401aee
or eax, 0x6b76295f
lodsb al, byte [rsi]
je 0x401aef
insd dword [rdi], dx
adc bl, byte [rdi - 0x24d88f90]
pop rdx
sti
lcall [rdx + 0x53]
je 0x401b20
xor dword [rcx], edi
jo 0x401b41
movsxd rsp, dword gs:[rbp + 0x77]
pushfq
xor byte [rdx + 0x6e], bh
movabs byte [0x746375727d836b77], al
sbb dh, byte [rbx]
jae 0x401b65
movsxd rsp, dword [rcx + 0x75]
fcmovne st(0), st(7)
cmp al, byte [rax + 0x67]
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x380c650f
insd dword [rdi], dx
insd dword [rdi], dx
imul dword [rsi + 0x6a]
imul ebp, dword [rdi + 0x60], 0xc394e0e
sbb dh, byte [rbp + 0x5d]
jbe 0x401ad0
js 0x401b8c
xor r14b, byte [rcx]
mov dh, 0x65
test ax, 0x7a6c
imul ebx, dword [r9], -0x24
lcall [rdi + 0x70]
outsd dx, dword [rsi]
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
or dword [rax - 0x53], esp
sbb ebp, esp
sbb dword [rcx], edx
xor dword [rax - 0x23ed98a1], ebx
fisubr word [rbx + rdi*2 + 0x30]
clc
jo 0x401b81
pop rbp
adc dh, byte [rcx]
xor eax, 0x36cededb
js 0x401af4
retf 0x4c73
xor eax, 0xd8b66153
mov bh, 0x23
insb byte [rdi], dx
test al, 0x73
jne 0x401bc4
jae 0x401b83
scasb al, byte [rdi]
mov al, 0x77
push rbx
cmp byte [rdi + 0x69], bl
insd dword [rdi], dx
imul edi, dword [rdx + 0x41], 0xad615b37
ror byte [rdx], 1
add edi, edi
and byte [rbp + 0x7e16d614], ah
push r11
imul byte [rcx + 0x4a]
and al, 0xda
or ch, byte [rbx - 0x13]
xor eax, 0x86a9a562
or eax, 0xd85b0a42
outsb dx, byte [rsi]
adc ah, byte [rcx - 0x79]
fld xword [rcx]
in al, dx
ja 0x401c0b
sbb al, 0x34
adc dword [eax + 0x7b], esi
insd dword [rdi], dx
and dword [rcx - 0x1de19aa3], edx
insd dword [rdi], dx
fiadd word [rdx + 0x2a]
sbb eax, edx
movsxd rbp, dword [rax - 0x54]
push rcx
adc esp, dword [rax - 0x7b]
test dword [rcx + 0x65271362], edx
add bl, cl
and byte [rdi + 0x77], cl
mov dh, 0xd9
adc eax, 0x26392716
or edi, dword [rcx - 0x2a]
mov ecx, 0x6e344ac2
jmp 0x401b74
imul edi, dword [rax + 0x113640c9], 0x1e
sub dword [rsi + 0x6f7b2a6d], esi
jne 0x401c5b
sub dh, byte [rax + 0x18]
jbe 0x401c69
jbe 0x401c46
cmp dl, byte [rax + 0x34555895]
sub ax, 0xb046
stosd dword [rdi], eax
add al, 0x6a
xor byte [rax], ch
fstp dword [rcx - 0x29]
push rsi
fldenv [rbp + rcx*2 - 0x33]
adc eax, 0xb96bf570
add si, word [rdi]
sub byte [rcx], dh
cmp al, byte [rip + 0x5b640d2d]
insb byte [rdi], dx
sub esi, dword [rbx]
xchg eax, esp
jb 0x401c25
wait
retf -0x14d0
hlt
xor dword [rdi], esp
je 0x401ca0
push 0x4d
mov dl, 0x70
and eax, 0x852ae832
mov dl, 0x57
movsb byte [rdi], byte ptr [rsi]
je 0x401c5a
mov ecx, 0xe756d953
sbb esp, dword [rsi + 0x74]
jb 0x401c6a
add ah, byte [rbx + rdi - 0x6b]
and eax, 0x6e4b6170
fldenv [rcx]
add ebx, dword [rcx - 0x67]
xor al, 0x64
sub byte [rdx + 0x4eb28db6], dh
and al, 0x6e
sbb byte [rdx + rdx*4 + 0x4c], dh
and al, 0xa7
jae 0x401cd2
xor eax, 0x9a158572
mov bh, 0x65
xchg byte [rcx], ch
retf -0x30f6
js 0x401cdc
jp 0x401c59
or dword [rbx - 0x48], 0xa1383b74
je 0x401c30
push 0x181d838
pop rdi
push rbx
and eax, 0xf0ad18bd
movabs byte [0x6d8f3c790df92264], al
lodsd eax, dword [rsi]
ja 0x401cad
jo 0x401d10
xor dh, byte [rsi]
popfq
sbb ch, byte [rdx]
insd dword [rdi], dx
outsd dx, dword [rsi]
push rax
js 0x401d18
jmp 0x401cc6
call 0x382d50ba
jrcxz 0x401ce9
xor eax, 0x696c8dd7
jp 0x401cc9
jle 0x401c4d
mov edi, 0x65c0cdfb
push rbx
wrmsr
imul eax, dword [rax + 0x47], 0x41424f4c
cmp r8, rbx
jo 0x401d06
wait
pop rdi
pop r15
insd dword [rdi], dx
xor eax, 0x64465f4d
xchg eax, ebx
push 0x4d4152ff
pop r15
or r15b, byte [rdx]
or edx, dword [rbx + 0x47f2d83d]
push rbp
and byte [rax + 0x44], cl
push rdx
or al, 0xde
int1
push rbx
pop r13
push rsp
sub r9b, r13b
ffree st(2)
adc byte fs:[rdi - 0x297a5a8e], bl
out dx, al
jbe 0x401d5c
pop rcx
mov r12b, 0x35
jo 0x401d6f
adc eax, 0x7256fb7f
mov ebx, 0x40667426
push rsp
pop r15
xor ch, byte [rsi]
call 0x1adf20f
xor eax, 0x63d2371e
enter 0x7663, -0x26
mov dh, 0xb9
push rsi
shl byte [rdx - 0x23], cl
movsxd rsi, dword [rdx + 0x24420de1]
jns 0x401dba
xor edi, dword [rdx + 0x6feec47d]
pop rbp
loope 0x401dd2
cli
xor dword gs:[r13 + 0x52], eax
pop rdi
add dword [rsi - 0x1f], 0xf6ff7202
jns 0x401d9e
mov dh, 0xba
cmp esp, dword [rax + 0x67]
movsxd rsi, dword [r8]
xor dword [rdx], ebp
add byte [rbx - 0x12], ch
insd dword [rdi], dx
imul esi, dword [rsi], -0x6a
jae 0x401d94
push r11
add al, 0
sub rax, 0x323856da
push rbp
jae 0x401dfe
sbb byte [rdx - 0x4c], bl
pop rcx
insb byte [rdi], dx
and byte [rdi + 0x29], dh
or al, 0x32
out 0xee, eax
in eax, dx
fisttp word [rsi]
insd dword [rdi], dx
insd dword [rdi], dx
xor esi, dword [rdx]
add al, 0x36
xor dh, byte [rax - 0x58c8c6cd]
sub edi, esp
mov ebx, 0x35320431
xor al, 0x38
xor esi, dword [rsi]
lock adc dword [rcx], esi
sti
pop rdx
sti
xor al, 0x32
cmp dword [rcx + rdi], esi
adc al, 5
adc dword [rdi], esi
and dh, byte [rsi]
xor esi, dword [rsi]
cmp dword [rdx], esi
cmp byte [rbx - 0xf], ch
lahf
out 0x36, eax
xor al, 0x30
xor eax, 0x37323230
xor esi, dword [rax]
pop rbx
push rdx
mov dh, 0xdb
sub eax, 0x43831f6
stosb byte [rdi], al
xor al, 0x33
xor eax, 0xc2348b33
xlatb
xor dword [rbp + 0x6d], 0x6ee467f0
xor eax, 0x61eb62c1
test byte [rdx - 0x22], cl
push rdx
rcr bl, 0xfa
rcr edx, 1
insb byte [rdi], dx
and eax, 0x2873350f
jbe 0x401e13
sub byte [rsp + rbx*2], dl
or dword [rcx], ecx
or byte [rip - 0x4f4f77b8], dl
or eax, 0x2d1b864d
cli
and byte [rsi + rdx*4 + 0x335f5858], al
test dword [rcx + rdx - 0x44a9e974], esi
jae 0x401dfd
sbb bl, ah
int 0x21
test dword [rcx + rcx*2], esi
pop rdx
js 0x401ebb
js 0x401e79
sbb eax, dword [rdx - 0x52]
mov ebp, 0xdb7c6dee
fnstsw dword [rsi + 0x1a618700]
je 0x401eb6
cmp byte [rdi], sil
cli
sub byte [rbp + 0x3561c921], r14b
xor al, 0xd7
add al, 0xe4
rcr byte [rbp + 0x31959a70], cl
add esi, dword [rax]
xor edx, ecx
ja 0x401ebe
pop rdi
cmp al, 0x48
scasd eax, dword [rdi]
mov word [rdx], cs
scasd eax, dword [rdi]
in al, 0x44
push r12
and eax, 0xd1fc6b22
mov dh, 0xc
and byte [r9 + r12*2 + 0x62], dl
jnp 0x401eae
or ch, byte [rsi - 0x73a237b1]
jne 0x401ead
jnp 0x401ec2
movsxd rbp, dword [rbx - 0x45]
push rdi
outsb dx, byte [rsi]
lodsb al, byte [rsi]
cmp eax, 0xdb28c33b
add ch, byte [rcx - 0x7fa6b705]
test byte [rdx - 0x80], bl
stosd dword [rdi], eax
movabs eax, dword [0x6f89f6e34834ed5]
xor dword [rcx - 0x12], ecx
jmp 0x6014712b
js 0x401e7a
mov cl, 0xa4
mov eax, 0x40685f18
cmp dword [rbx + 0x66], ebx
add ah, bl
and edi, dword [rcx]
mov al, 0x74
test dh, al
enter -0x7fa4, 0x6c
jbe 0x401f4a
fadd dword [rsi + 0x776d0835]
imul esi, dword [rbp + 0x4d], -0x3e
jle 0x401f3a
or al, 0x53
mov ebx, dword [rdi - 0x1d987bfd]
insd dword [rdi], dx
xchg eax, esi
int3
push 0x10
and byte [rbp + 0x6cac7232], dl
test ecx, edx
or al, 0x5c
in al, 0xa1
ror dword [rax + 0x60], 1
movsxd rbx, dword [rbx - 0x2e]
in eax, 0xca
lodsd eax, dword [rsi]
or dword [rsp], ecx
stosb byte [rdi], al
push -0x68878f95
loope 0x401f6d
sub dh, byte [rsp]
movsxd rcx, dword [rcx]
test byte [rbp + 0x789727d4], dl
jae 0x401eda
out 0x1a, eax
wait
ret
and qword gs:[rsi + r8 - 0x69fdcda0], rdi
or ebp, dword [rbp + rdx*4 + 0x178f0e70]
xchg eax, ebx
leave
test byte [rbx], al
int1
sbb al, byte [rax + rcx]
wait
pop rdx
insd dword [rdi], dx
fsubr qword [rip + 0x50393848]
movsxd rsi, dword [r8]
push rbx
xor ebx, dword [rdi]
cmp ebx, dword [rbp + 0x49]
xchg eax, esi
out 4, eax
pop rsi
nop
mov dword [rdx], esi
mov ebx, 0xb50a0e4f
add esp, dword [rdi - 5]
push rbx
lahf
ficomp dword [rbp + 0x34]
pop rdx
pop rdx
jb 0x401fe9
pop rdi
jbe 0x401fb3
and dword [rdi + 0x1de12897], esi
jns 0x401f4b
xor dword [rsi], ebp
xor esp, dword [rax]
push rbp
outsb dx, byte [rsi]
and eax, 0xb3068507
frstor dword [rbx]
out 0x80, eax
jne 0x401f57
cmp al, 0x43
cmp byte [r8], sil
loop 0x401f26
pop rax
test dword [rcx - 0x5a], eax
mov spl, 0x47
xchg al, ah
ret 0x1532
cmovbe esp, dword [rsp]
cmp ebx, ecx
sub eax, 0x797386bc
insd dword [rdi], dx
fsub dword [rdx + 7]
je 0x402037
push -0x5f948df7
or eax, 0x7709c1e
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rbx
ret
sub eax, 0xd80d6715
xchg eax, edi
pop rsi
xor al, 0x2e
jne 0x402028
sub eax, 0x660d0076
out dx, al
lodsd eax, dword [rsi]
mov ch, 0x62
cmp byte [rcx], cl
jns 0x402061
enter -0x2990, 0x45
sbb dword [rsi - 0x7d], esi
or al, 0x4a
adc al, 0x70
adc ebx, dword [rdi + 0x1b]
xchg eax, ebp
shr byte [rbx + 0xd], 0xf6
sub byte [rcx], cl
jo 0x40200c
jb 0x401ff8
shr byte [rbp - 0x31], 0x6f
or ch, byte [rdi + rbp*2]
or bl, ch
add eax, 0x277463c1
jae 0x402045
outsd dx, dword [rsi]
sub dword [rsi], 0xb2dd6865
sub ch, byte [eax + 0x6d]
or eax, 0x8257635d
imul esi, esp, 0x2e
adc byte [rdi - 0x43], bh
insb byte [rdi], dx
mov dh, 0x84
pop rsp
insb byte [rdi], dx
adc dword [rdx + 0x43], ecx
or ebp, dword [rdi - 0x5f]
push 0x63
jb 0x401feb
add byte [rax + 0x51], ch
jae 0x40201e
jnp 0x4020b2
xchg eax, esi
add al, 6
sub byte [rbp - 0x33], 0x9f
push rdx
std
add byte [rax], al
sal byte [rdx], 0xa8
sub dword [rdi - 0x636f68ff], ecx
mov ecx, 0x3f076759
sbb al, 3
ror byte [rcx + rcx*8], cl
add dword [rbx], esp
push rsp
xor cl, r8b
and byte [rax + 4], dl
and byte [rbx + 0x32], al
and al, 0x31
je 0x402061
push rax
xor cl, al
je 0x4020ad
jg 0x402082
cmp esp, esp
ljmp [rdi - 0x68]
cwde
and dword [rcx], ebx
nop
sub byte [rip + 0x406c1908], al
or r8, rax
ror cl, 0x26
clc
add ebx, edi
rcl dword [rdx + 0x56189066], 3
xchg eax, edx
mov esp, 0x3f072f09
mov es, word [rdx]
adc byte [rcx + rbp*8], ch
pop rsi
mov edi, 0xd9c90dff
wait
push rdi
mov edi, 0x2032022a
fst qword [rax - 0x1c094f9]
jo 0x4020a1
and byte [rdi + 0x6e], ah
cmpsd dword [rsi], dword ptr [rdi]
movabs al, byte [0x4f7affb29ba4b006]
add al, 0x61
outsd dx, dword [rsi]
cmpsd dword [rsi], dword ptr [rdi]
out 0x3f, eax
enter 0x5760, 0x36
inc dword [rdi + rdi + 0xc839242]
xor ch, byte [rax]
sub byte [rax + 0x1841901], al
in al, 0x19
mov ss, word [rbx]
mov esp, 0x7ff3149
lcall [rdx]
leave
nop
or eax, 0xd03f8925
and al, 0x27
mov eax, 0x10107007
mov word [rax], fs
xchg eax, r12d
xchg eax, r9d
sub eax, 0x2f07dc30
setns byte [rbx + 0x3f9dd90c]
jg 0x402100
or esp, esp
add cl, byte [rdx]
movabs dword [0x9ff07670a84dcce], eax
sbb cl, byte [rdx - 0x57]
mov edi, 0x18767210
mov edi, 0x5220ff15
test esp, esp
mov al, 0x3f
mov cl, 0x97
or al, 0x25
outsb dx, byte [esi]
jg 0x40213e
mov edi, 0x91829061
movhps qword [rdi], xmm7
jbe 0x4020fe
cmp al, 0xc4
add ecx, ecx
cmp ebx, ecx
or r14b, byte [r15]
jg 0x40219d
outsb dx, byte [rsi]
sub bl, bl
add ecx, ecx
or dword [rdi + 0x56], ebp
sysret
mov edi, 0x7480c910
out 0x3f, eax
psubb mm7, qword [rbx]
and byte [rax + 0x3ff3ff07], bh
xchg eax, ebx
add byte [rdi + rax], ch
fldcw word [rcx + rcx*2 + 0x17]
clc
wait
mov al, 0x25
mov ecx, 0x7ff07f07
fild dword [rdx + 6]
cdq
adc byte [rax + 0x17201fbf], bl
leave
and byte [rdi], bl
or byte [rip + 0x1e48516], cl
add dword [rdi], edi
and byte [rbx + 0x32], al
xchg eax, esp
pushfq
cwde
or bl, byte [rax + 0x26e09928]
jg 0x4021dc
sbb dword [rax + 0x83f10ee], edx
shr byte [rax + 0x41c85c90], 0x70
xor esp, dword [rax]
ret
fcom dword ss:[rip + 0x3f17307f]
fldenv [rcx + 0x21]
xor al, 0x3f
adc dword [rbx - 0x6e], edi
pushfq
mov dl, 0
idiv byte [rdi]
jg 0x40221e
add ebp, esi
retf 0x2c66
mov ebx, 0x20e000
imul ecx, dword [rsi - 0x62], 0x1f0f18ff
in al, 0xc9
and dword [rcx + rcx + 0x7f], ebp
clc
dec byte [rdi]
add byte [rax], al
add byte [rbx + 0x480], cl
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x18f7fdea], ecx
out 0x7f, eax
and al, 0x29
and dh, byte [rcx]
mov bh, 0x70
sub byte [rax], al
add bl, ch
or eax, dword [rax]
add byte [rax], bl
add byte [r8], al
add qword [r8], rax
sub ah, dh
add byte [rax], al
add bh, bh
