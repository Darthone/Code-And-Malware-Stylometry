call 0x4013a0
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x4011b8
add ebx, ebx
je 0x40116e
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x4011a6
cmp rbp, -4
ja 0x4011a6
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x40118e
add ecx, 4
mov dl, byte [rax]
je 0x4011b6
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x4011a6
ret
cld
pop r11
cmp r8b, 2
je 0x4011ce
jmp 0x40124b
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x4011de
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x4011c6
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x4011f6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x4011e3
sub eax, 3
jb 0x401214
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x40124b
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x40123b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401239
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401228
cmp rbp, -0xd00
adc ecx, eax
call 0x40117a
jmp 0x4011ce
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401324
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x4012c2
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40130e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x4012e1
push 0x3a707474
jne 0x40133a
js 0x4012fa
jae 0x401334
outsb dx, byte cs:[rsi]
je 0x4012f3
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401361
jb 0x401353
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x40137e
jb 0x401391
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x212641
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x212641
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x40125c
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401387
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401335
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add dword [rax], eax
jmp rbp
call 0x706f142f
jb 0x401447
movsxd rbp, dword [rdi]
jae 0x401441
insb byte [rdi], dx
js 0x401447
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401427
cmp rsi, rcx
jae 0x40142f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40140e
cmp al, 0x8f
ja 0x40140e
cmp byte [rsi - 2], 0xf
je 0x401414
sub al, 0xe8
jg 0x401411
push rdi
cmp al, 1
ja 0x4013fc
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x4013ff
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x40142c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401483
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1901
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4014c7
mov al, 0xa
jmp 0x4014c7
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4014a3
inc ebx
mov al, 0
jmp 0x4014cb
mov al, 2
jmp 0x4014cb
mov al, 3
jmp 0x4014cb
mov al, 0x3c
jmp 0x4014cb
push rcx
rcr ah, 1
fstp st(7)
jle 0x40150c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x40151e
jg 0x401510
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6c93
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x40156a
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb66e7
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401572
cmp esi, 0x21585055
jne 0x401576
jge 0x401568
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x40156b
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x40156f
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40161b
pop rcx
or al, 0x3b
jb 0x401621
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401593
jmp 0x401595
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36614d6
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5371e
in eax, dx
jg 0x4015cd
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401613
mov bh, 0x2a
add edi, 0x10
jmp 0x401610
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x40164d
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401689
jne 0x4016a0
fstpnce st(6), st(0)
jle 0x401669
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40169f
jrcxz 0x4016d3
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b637
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401752
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401712
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295ce7
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401785
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40171f
and ecx, 7
or al, 0xeb
jae 0x40178a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4017bf
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4017fd
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4017b6
push rax
call 0xffffffff868d14a3
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4017c0
std
cmp edi, esi
xchg eax, edi
jle 0x401815
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95da1
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401813
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401801
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40182a
js 0x40186a
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4018fc
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2b37
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40191d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401922
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc213d4
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4018b0
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
sahf
or al, byte [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + 0x908828], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dil, dil
mov dword [rbx], ebp
add byte [rax], al
mov ch, 0xc
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4019d6
je 0x4019df
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4019a8
mov dh, 0x7d
jbe 0x4019a7
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa9
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4019e0
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x5480006], bl
add dl, bl
or al, cl
enter 0x80f, 0
adc byte [rcx], cl
or dword [rax], eax
mov al, 0xe4
adc ecx, eax
adc ecx, dword [rdx]
add al, cl
or eax, dword [rax]
fmul dword [rbx]
sal byte [rsi + 0xc040c03], 0x17
or eax, 0x4f0d7000
and byte [rdi], bl
and byte [rsi], cl
add byte [rax + 0x2734000f], al
nop
seto byte [rax + rdx]
add byte [rax + 0x11], al
add byte [rax - 0x2f27f8d3], al
sbb eax, 0x171e12bf
nop
jle 0x401a0d
add ah, bh
and dl, byte [rax + rax]
call 0x28087a31
nop
adc eax, 0x16f800
add byte [rsi], ch
in al, 0x13
enter 0x1707, 0
or byte [rax], bl
add al, bh
add edx, esi
add ebx, dword [rcx]
add byte [rax], al
xor byte [rdx], bl
add al, cl
fld dword [rdx + rsi*8]
add al, 0x1b
add al, ah
sbb al, 0x13
in al, dx
fimul word [rbp + 1]
add al, 0
int1
dec dword [rbx + rbx]
sal byte [rsp + rbx*2], cl
pop rcx
mov edi, 0xb0029719
or al, 0xc9
sbb edx, dword [r15]
mov ebx, 0xe308390
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
adc ah, byte [rdx]
sbb dword [rbp + 1], 0x17
push rbx
mov ebx, 0x8650477a
or al, 0x61
push rdi
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
scasb al, byte [rdi]
fldenv ss:[rbx - 0x3688afd9]
xor cl, al
nop
or al, 0x51
ficom word [rdx + 0x2e]
in al, 0x60
jmp 0x401a3f
test al, 0x44
cli
sbb al, 0x64
nop
rol dword [rdi + 0x54], 4
and dword [rcx], eax
xor bl, al
nop
pushfq
pop rax
xor edx, dword [rdi]
pop rcx
leave
and byte [rbx + 0x46], al
pop rdx
pop rax
add dword [rcx], ebx
insb byte [rdi], dx
pop rdi
pop rsp
ja 0x401abb
xchg byte [rax + rsi*4 + 0x21], ah
xchg eax, edi
mov ecx, 0x41921906
push 0x19216cda
push qword fs:[rax + 0x4e]
leave
leave
add dh, byte [rax + rax*2 + 2]
js 0x401ae6
sbb dword [rax + rcx*2 + 0x5d], esp
jl 0x401b0c
xchg byte [rax + rdx*4 + 0x7b], ah
sbb byte [rdx - 0x6de6f9b8], 0x84
ret 0xc988
and dword [rcx], ebx
mov word [rdx], ss
add ecx, dword [rax + 0x4e]
leave
nop
cmp al, byte [rbx]
xchg eax, esp
nop
and dword [rcx], ebx
cwde
test dword [rdx - 0x639b79bf], edx
scasb al, byte [rdi]
movabs al, byte [0x404a4d919064872]
xchg eax, edx
xchg eax, ebx
jb 0x401aab
sub eax, 0x4864ac04
sbb dword [rdx - 0x50], edx
jnp 0x401b72
nop
and dword [rcx], ebx
mov ah, 0xa7
mov eax, 0x86419219
iretd
mov esp, 0x487272f5
rcr byte [rax - 0x6c6de63c], 0x43
add eax, 0x64196ac8
int3
nop
rol byte [rsi - 0x49de6f9c], 1
fistp word [rsp + rbx + 0x5d84192]
fadd qword [rsi + 0x2b90e4e4]
loopne 0x401b9e
sbb dword [rdx - 0x177f1bbf], edx
sbb dword [rax + rcx*2 - 0x5a], esp
lock or byte [rsi - 0x33be6f9c], al
clc
xor cl, al
leave
rcl dword [rdi], 0
sbb eax, 0xc832dc10
nop
or al, 0x10
jrcxz 0x401b8e
enter -0x7ce0, 0xc
add al, 0xeb
mov al, 0x41
xor cl, byte [rbx]
or eax, dword [rdi]
sal byte [rbx + 0xd810727], 0xf
sub al, 7
push rcx
adc eax, 0xc8393817
leave
push rbp
add dword [rsi + 0x16], ebx
adc eax, 0x12877ca0
out 0x71, eax
xlatb
adc dl, byte [rax]
outsd dx, dword [rsi]
enter 0x7fef, 0x17
mov edi, 0xb00f7892
mov r8d, dword [r15]
add eax, 0x10657667
mov ebx, 0xb4bf479e
or al, 0x36
and eax, 0xc5e71430
call 0xffffffff9118a4ed
fadd dword [rdi + 0x37]
ret
add byte [rdx + 0x70b86c4], dh
and cl, ah
mov al, 0x93
adc r15b, byte [rip - 0x13e8acf1]
and byte [rdi + 3], ah
pop rax
add byte [rax], cl
nop
mov ebp, 0x300c1786
sbb al, 2
in al, 0xe4
leave
shr dword [rdi], -0x76
or eax, dword [rax - 0x3637d5f3]
scasb al, byte [rdi]
sbb dword [rdx], ebx
ret 0x2616
ror dword [rsi + 0xe], 0x32
push 0x32
sbb byte [rbx - 0x3509fa41], ch
std
or byte [rax], al
or al, 9
ror byte [rax], 1
int 0x20
adc dh, byte [rdx]
adc dword [rsi + 0x7d26c9d], ebx
fdivr dword [rdi + 0x1ca70936]
adc ah, ah
and byte [rdi + 0x4f], ah
scasb al, byte [rdi]
add al, 0x17
jbe 0x401c3e
or byte [rcx], bl
in al, dx
pop rdi
adc byte [rsi + 0x25], dh
adc al, 0x77
movsxd rbp, dword [rdi]
test byte [rbx - 0x28], al
in al, dx
or dword [rdi], eax
sbb dh, byte [rsi - 0x7f]
sbb eax, 0xabf6476
push rcx
cmp ecx, esp
adc byte [rbx + 0xa], ch
call 0xffffffff90b2927c
rcl dword [rdi], -0x7c
je 0x401c81
or dword [rdx + r15*4], 0xffffff80
jg 0x401c4f
iretd
jbe 0x401bf3
je 0x401cd4
and byte [rdi], al
push rbp
adc dword [rcx], esi
pop rbp
int 0xc9
mov cl, 0x60
mov byte [rbx], dl
sti
adc dword [rdi], eax
in al, dx
add bh, byte [rbx]
and al, 0xa
or esp, dword [rdi + 0x171d1757]
fsub dword [rcx]
push 0xb
ja 0x401c1b
iretd
adc byte [rax], bh
test byte [rip - 0x24b86ee0], cl
or ecx, dword [rsi]
movabs eax, dword [0x320ceb06bb074e41]
enter 0x13d9, -0x21
xchg eax, edi
movhps qword [rbp + 0x4e419b0c], xmm0
movsb byte [rdi], byte ptr [rsi]
adc dword [rdx], eax
mov al, 0x29
movabs dword [0xc1c9c2d01722371a], eax
xchg byte [rdi], ch
rcr byte [r11], 0x65
neg dword [rsp + rdi*4 + 0xc3f0e40]
jo 0x401ce5
cmp al, 0x39
sbb qword [rdx], -0x59
movabs dword [0xad85e102ec0eea0c], eax
or al, 0xdf
xchg eax, ebx
sbb dword [rsp + rbx + 0x56931744], 0xd
pop rbp
xor ecx, eax
leave
push rbp
sbb ebx, dword [rdi]
xchg eax, ebx
adc byte [rip + 0x360ecedf], bh
mov edi, 0x17d72f9f
mov edi, 0xc817615b
mov r13d, 0x7817d90d
and edi, ecx
or eax, 0x371704d7
adc cl, byte [rsi - 0x3a]
mov esi, cs
mov byte [rdi], bl
or al, 0xe
jb 0x401cbb
cmpsd dword [rsi], dword ptr [rdi]
sbb byte [rdx], bl
rol byte [rdi], 0x74
mov al, 0xb
jns 0x401ce7
cmp byte [rdi], r13b
xor bl, byte [rbx]
nop
sbb dword [rdi + rsi*2 - 0x62f191dd], 0xe
nop
or eax, 0x1e970e21
jns 0x401dc8
cmp dword [rbp - 0x32d0f084], 0x901a370f
fsubr dword [rcx]
cmova esp, dword [rax + rdx + 0x21]
stosd dword [rdi], eax
shr dword [rsi], 0x7e
xor byte [rdi], dl
sbb al, 0xc2
xchg byte [rax + 0x17b72f9f], dh
add dword [rcx], edx
cmp al, 0x3b
enter 0x3f09, -0x22
mov esp, 0x119c2f01
adc byte [rax - 0x7f], bh
out 0x11, al
xchg dword [rdx + rdx], esi
cmp ebx, esp
sbb dword [rdi - 0x36], ebp
adc al, 0x87
xchg dword [rcx], edi
and byte [rcx + rbx + 0x70], bl
mov bh, 0x39
call qword [rbx + 0x1890c835]
clc
jb 0x401e16
jae 0x401e18
jne 0x401e0c
movsxd rsi, esi
or ebp, ebp
inc dword [rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], ecx
jb 0x401e22
imul ebx, dword [edx], 0xb7ff77b7
pop rdi
je 0x401e35
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401df1
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
outsd dx, dword [rsi]
mov edi, 0x96cb7fd
je 0x401e4e
jb 0x401e54
pop rdi
jne 0x401e5d
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401e56
sub dword gs:[rsi + rbp + 0x37], esp
jg 0x401dec
or ebp, esp
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0x7208
jb 0x401e61
jns 0x401e61
int3
jge 0x401dc1
std
outsb dx, byte [rsi]
je 0x401e7c
jns 0x401e0c
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401e48
or eax, 0x6eb09da
pop rdi
sub dword [rdx + rbp + 0x6d], esi
adc dl, dh
mov edi, 0x70709fdd
pop rdx
push rbx
je 0x401e7a
xor dword [rcx], edi
jo 0x401e9b
movsxd rsp, dword gs:[rbp + 0x77]
pushfq
xor dl, bl
fbstp tbyte [rsi + 0x72a26e7a]
jne 0x401ea5
je 0x401e5e
xor esi, dword [rbx - 0xa]
mov bl, 0xce
fnstsw dword [rax + 0x63]
jne 0x401e8f
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0xdbbddb0f
fldenv [rbp + 0xc]
cmp byte [rdx + 0x69], ch
outsd dx, dword [rsi]
cmp qword [rsi + r14*4], r9
outsd dx, dword [rsi]
pop rbx
sbb dh, byte [rbp + 0x44]
js 0x401ee6
xor r14b, byte [rcx]
mov dh, 0x65
test ax, 0x376c
fdivr dword [rdi - 0x29]
jp 0x401ebd
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
jmp 0x401e90
jnp 0x401e92
or dword [rcx], ebx
adc dword [rcx], esi
cwde
pop rdi
fistp dword [rsi]
pop rax
adc dh, byte [rax]
clc
jo 0x401edb
pop rbp
mov bh, 0xb3
or eax, 0x353112b7
js 0x401e4e
retf 0x4c73
in eax, dx
or bl, bl
mov dh, 0x35
push rbx
mov dh, 0x45
test al, 0xec
fst qword [rsi + rsi*8]
jae 0x401f34
jae 0x401ee1
cmp byte [rdi + 0x69], bl
insd dword [rdi], dx
imul edi, dword [rdx + 0x41], 0x2bb42b58
or al, byte [rcx]
jmp qword [rax]
mov ch, 0x85
fist word [rsi - 0x5b]
push r11
imul byte [rcx + 0x4a]
ret 0x3b5a
test dword [rsi - 0x79565a9e], esp
ret 0xb616
mov dh, 0xd
outsb dx, byte [rsi]
adc ah, byte [rcx + 0x76]
or bh, byte [rbx + 0x6b778790]
sbb al, 0x34
adc dword [eax + 0x64], ecx
push rdi
fdiv dword [rax + 0x7b]
retf 0x7086
pop rbx
loop 0x401f79
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
pop rax
movabs eax, dword [0x10b6271362915190]
enter 0x6504, 0x4f
ja 0x401f98
test dword [rbp + 0x26392740], eax
scasb al, byte [rdi]
mov al, 0x6d
or edi, dword [rcx + 0x4a]
xor al, 0x6e
xor dl, byte [rax - 0x6414914b]
adc dword ss:[rbx + 0x1e1adeca], ebx
sub dword [rdi + 0x75], ebp
jae 0x401f6d
jo 0x401f5d
movsd dword [rdi], dword ptr fs:[rsi]
insd dword [rdi], dx
jbe 0x401fc7
jbe 0x401fa5
push rbp
xor al, 0x66
in al, dx
sub al, cl
xchg eax, ebp
sub eax, 0xb528306a
push rbp
mov dh, 0x11
fldenv [rbp + rcx*2 - 0x33]
scasb al, byte [rdi]
fld dword [rax - 0x2a]
adc eax, 0x2837f570
xor dword [rbx], eax
pop rdx
cmp al, byte [rip + 0x332b6c17]
cmpsb byte [rsi], byte ptr [rdi]
xor cl, byte [rbx + rcx*2 - 0x6c]
jb 0x401f67
hlt
xor dword [rbx + 0x27c1ec81], edx
je 0x401ffe
jo 0x401fac
xor ah, byte [rcx - 0x17a56a14]
movsb byte [rdi], byte ptr [rsi]
je 0x401fe5
mov dh, 0x95
and rsp, rdi
sbb esp, dword [rsi + 0x74]
out dx, al
jb 0x401fc8
and eax, 0x6e4b6170
enter -0x69c0, 0
cdq
xor al, 0x6d
movabs dword [0x136e244e2864766c], eax
leave
test eax, 0x737418ac
jo 0x401ff2
test dword [rsi - 0x799a48dc], esp
sub edx, eax
xor ebx, dword [rax + 0x782f365c]
imul ecx, dword [rax + 0x7ab2ae12], 0xe383b74
jbe 0x401fb9
js 0x401f7c
je 0x401f8e
add dword [rdi + 0x53], ebx
and eax, 0x1a05bc2b
mov ebp, 0xf92264a2
or eax, 0x462b5b63
jns 0x402068
adc eax, 0xe6650766
mov cl, 6
iretd
jo 0x40206e
xor ch, byte [rdx]
insd dword [rdi], dx
outsd dx, dword [rsi]
fstp st(5), st(0)
ficomp dword [rdx + 0x34]
movsd dword [edi], dword ptr [esi]
jbe 0x402050
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
jle 0x40200a
adc byte [rdi], r11b
xor eax, 0x65764873
and byte [rax], ch
sbb al, 0x5c
xor al, 0x25
outsd dx, dword [rsi]
sbb esp, dword [rsi - 0x5bce451a]
imul eax, dword [rax - 0x3849f286], 0xb819bf77
popfq
mov ecx, dword [rdi]
xor byte [rcx + 0x78], ch
clc
add ch, dh
xor r10b, bl
pop rdi
pop r15
insd dword [rdi], dx
insd dword [rdi], dx
test dword [rsi - 0x1e], esi
std
push rcx
push rdx
pop r15
push rdx
jb 0x402073
fld dword [rbx + 0x4e474f2d]
push rbp
and byte [rax + 0x44], cl
push rdx
and al, 0xde
fistp qword [rsi]
push rbx
lea ebx, [rdi + 0x54]
sub byte [r9], r12b
ffree st(2)
adc byte fs:[rdi - 0x297a228e], bl
out dx, al
jbe 0x4020d8
pop rcx
mov r12b, 0x35
jo 0x402023
jg 0x40209b
push rsi
jb 0x402032
je 0x40210d
push rsp
pop r15
xor ch, byte [rsi]
out dx, al
insd dword [rdi], dx
add dword [rip + 0x630a371e], esi
enter 0x7663, 0x46
adc byte [rcx + 0x62ce6db6], cl
fldenv [rbx - 0x52]
lodsd eax, dword [rsi]
pop rbx
push rdi
js 0x40204f
wait
xor esi, dword [rsi - 0x989224f]
push rsp
cmp byte [rcx + 0x453143fb], dh
push rdx
pop rdi
cmpsb byte ss:[rsi], byte ptr [rdi]
out dx, al
movabs al, byte [0x306349675c752a33]
fistp dword [rdx + 0x5e31ad8b]
xor al, 0x36
xchg eax, edx
jae 0x40210a
adc eax, 0x457b9ace
push rbx
add al, 0
xor r9b, byte [r9 - 0x4974a4ea]
mov dh, byte [rbx - 0x4d]
and byte [rdi + 0x5d], r14b
sti
mov bh, 0x16
insd dword [rdi], dx
or al, 0x66
insd dword [rdi], dx
insd dword [rdi], dx
xor esi, dword [rdx]
add al, 0xff
out dx, al
mov ecx, 0x3432367b
add eax, 0x31373933
add al, 0x32
xor eax, 0x38343736
xor esi, dword [rsi]
jmp 0x31514556
xor al, 0x32
cmp dword [rcx + rdi], esi
adc al, 5
out 0xf9, eax
mov esi, 0x36223711
xor esi, dword [rsi]
cmp dword [rdx], esi
cmp byte [rsi], dh
xor al, 0x30
xor eax, 0xfc5afd8b
xor byte [rdx], dh
xor dh, byte [rdi]
xor esi, dword [rax]
push rdx
xor dword [rax], edi
add al, 0xaa
jne 0x40211b
in eax, dx
jbe 0x40219d
xor esp, dword [rdx + 0x35]
xor ecx, dword [rbx + 0x6da98134]
js 0x40210c
mov al, 0xd1
lock sbb byte [esi + 0x31], ch
or byte [rdx - 0x4f], 0x1d
sub al, 0x16
adc dl, byte [rdx - 0xc]
insb byte [rdi], dx
jae 0x40213d
test eax, edx
jbe 0x40217e
jo 0x402204
xor ebp, ebx
push rax
jo 0x402156
js 0x4021f0
sub dword [rcx], ecx
rcl ecx, 0x3d
mov bh, 0x1e
imul ecx, dword [rdx + 0x2f], 0x62a06646
pop rax
pop rax
or dword [rbx], esp
rol qword ds:[r10 + 0x24], 0x44
mov bl, 0x4c
sub rax, 0x5858f50a
pop rdi
xor eax, ebx
mov ebx, 0x699bb820
and edi, dword [rax + 0x73]
xchg byte [rsi - 0x12a5b6cc], al
mov ecx, 0x76a93584
and al, 0x87
imul esp, dword [rcx + 0x5c02a5a5], 0x6a
sub byte gs:[rbp + 0x5c], 0x69
sbb edx, dword [rax]
mov edx, 0x5695049
xor eax, 0xd6376f09
lea eax, [rdx + 0x40]
lodsb al, byte [rsi]
cwde
and ecx, edx
clc
fcmovnbe st(0), st(1)
mov ch, 0xa4
or dword [rbp + 0x7a], eax
push rbx
xor al, 2
push rsp
xor byte [rdi - 0x27], bl
movabs eax, dword [0x69c2ed993425c309]
movabs eax, dword [0x1607df740c61480b]
xchg eax, edx
fcom qword [rbp + 0x44]
movsb byte [rdi], byte ptr [rsi]
frstor dword [rbp - 0x23]
sbb dword [rdi + 0xeac4dd2], ecx
or dword [rcx], esi
add esi, dword [rax]
loopne 0x402298
xor dword [rbp + 0x36], eax
pop rdi
lodsb al, byte [rsi]
scasb al, byte [rdi]
in al, dx
mov esp, 0x544944f2
insd dword [rdi], dx
retf
test al, 0x68
retf 0x430c
enter -0x72ac, -0x7e
jmp 0x402221
fcomp qword [rbx]
mov ebx, 0x78480600
mov ch, 0x75
mov dword [rcx + rax*8], esi
and dword [rdi + rcx + 4], esp
je 0x4021ee
cmp dword [rbp + 0x6e41d491], 0xc8888a69
xchg eax, esp
insd dword [rdi], dx
stc
push rcx
xchg dl, al
mov word [rbp + rbp - 0x4f25ec08], ss
adc byte [rdx], bl
push rsi
imul ebx, ebx, 0xe04c7b75
jle 0x40229a
retf
push rdx
fcomp qword [rax + 0x5fb9f72c]
movabs al, byte [0xd658f1685feb6496]
xor esi, dword [rbp - 0x7e41dd56]
xor eax, dword [rcx - 0x3598c625]
popfq
nop
push rax
sbb bl, byte [rcx + 0x30eb8394]
adc rdi, qword [r10 - 0x2c13926b]
sbb byte ss:[rcx + 0x76f39231], al
xor dword [rsi + 0x6d], esi
in eax, 0
jrcxz 0x40227b
jle 0x40225a
xor sil, byte [r8]
add al, 0x58
pop rbx
movsxd rbp, dword [rcx + rdx*8 + 9]
mov word [rbp - 0x78271b53], ss
sbb byte [rdx], bl
rcr byte [rbp + rcx + 0x584c22f2], 1
mov al, 0x16
sbb dword [rsi + 0x1f24dbac], eax
cmp byte [rax + 0x6b], ch
ja 0x402321
or byte [rbx], ch
jrcxz 0x4022e2
sbb ebx, dword [rdx]
sub dword [r13 - 0x644aed10], r8d
mov byte [rcx - 0x6b3da854], ch
cmp byte [r15 + 0x556bab5b], bpl
scasb al, byte [rdi]
push rbx
jno 0x402341
push rsp
cmp eax, esi
adc dword [rdx + rax], 0xa
outsb dx, byte [rsi]
sub al, 0x76
adc eax, 0xc4b05d2
xor eax, 0x2b180422
sub dword [rax], edx
and eax, 0x181a920b
pushfq
insd dword [rdi], dx
xchg byte gs:[rsi], al
ja 0x40236a
push rax
movsxd rsi, dword [r14]
push rsi
loopne 0x40235e
add ch, ah
jne 0x4023a1
out 0x32, eax
sub eax, 0x8a411f25
sti
add ch, byte [rsi]
sbb dl, byte [rbp + 0xc12fa67]
mov eax, 0xfc8d4776
adc byte [rdi + 0x76], bl
xor byte [rcx], ah
sbb eax, 0x5a85edc5
call 0x336e5491
and byte [rbp + 0x6e], dl
pop rbp
movsxd rbp, dword [rcx - 0x58]
pop rdx
push rdx
jne 0x40236c
cmp al, 0x43
fimul dword [rbx]
adc bh, byte [rdx + 0x3a303843]
imul edi, dword [rax - 0x74], 0x30283681
adc al, 0xb5
cmp esp, ebp
je 0x4023ef
adc byte [rdi + 0x68e48f1f], cl
cmp esp, 0x454c7080
movsxd rax, esp
mov ah, ah
leave
xor dl, byte [rdi - 0xb17aa58]
mov ebp, dword [rbp + 0x73]
jns 0x402404
mov ebx, 0x62706d8d
je 0x40241e
push 0x75b96109
mov ch, 0x22
add byte [rax + 7], dh
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jne 0x402413
mov al, 0xad
sub eax, 0x340d6715
jne 0x402374
xchg eax, esi
mov edx, 0xb52d6461
add byte [rip + 0x36b33866], cl
jae 0x402445
or dword [rcx + rdi*2 + 0x6e], esp
sbb dword [r11 + 0x768e5330], r11d
sbb ecx, dword [rdi + 0xc]
pop rdi
sbb esi, dword [rax - 0x4e7e57a9]
movabs al, byte [0x744f55b7839e0928]
jb 0x402389
or bl, byte [rsi - 0x32]
test ebx, ebx
sub al, 0x6f
or byte [rdx - 0x7731a5fb], al
and al, 0x6f
sbb dword [rsi], ebp
push -0x45299797
lodsd eax, dword gs:[rsi]
lodsb al, byte [rsi]
or eax, 0x2ef8635d
mov ecx, 0x148510ae
mov esi, 0x7d116cbd
fsubr dword [rcx + rcx*2 + 0x51]
or ebp, dword [r10 + 0x63]
jb 0x4023fa
fiadd word [rdx - 0x75]
movabs eax, dword [0x19aae07b68002b36]
cwde
pop rsi
mov eax, 0x1283de04
cmp byte [rip + 0x2f0000a9], 0x49
rcl dword [rdx], -0x56
add dword [rdi - 0x636f3681], ebp
mov ecx, 0x11c3f07
and byte [rbx], al
ror byte [rbx], cl
push rsp
and al, 0x43
xor cl, al
push rsp
and byte [rax + rcx*8], al
and byte [rbx + 0x32], al
xor dword [rsp + rsi*2 - 0x1c], esi
int 0x50
xor ah, byte [rsp + rax*2]
idiv bh
ljmp [rdi - 0x70]
cmp dword [rax + 0x21aa2898], ebx
sbb dword [rbp + rax + 8], esp
enter -0x78e0, -0x33
rol al, 0x4c
cmp dword ss:[rbx], edi
mov byte [rdx], al
sti
sbb byte [rdx], cl
xchg eax, esi
xor al, 0x83
push rsi
add edx, dword [rcx + 0x47cde13c]
xchg eax, ecx
add ebp, dword [rax - 0x40a188b7]
ljmp [rdi + 0x6c]
fiadd word [rdi]
mov edi, 0x15070236
sub al, 0xe9
xchg byte [rbx + 0x3f], ch
xor cl, al
fstp dword [rbx - 0x5f58f869]
pop rax
adc byte [rsi + 0x537aff6c], ah
outsb dx, byte [rsi]
jb 0x402481
out 0x3f, eax
enter 0x5760, 0x36
inc dword [rdi + rdi + 0xc839242]
xor cl, al
enter 0x210, 0x19
test byte [rcx], al
in al, 0x19
mov ss, word [rbx]
mov esp, 0x7573419
lcall [rdx]
mov byte [rax + 0x3f89250d], dl
and dword [rcx], edi
loope 0x40250e
or al, 0x70
jo 0x402513
and dword [rbx], ebx
mov dl, 0x10
xchg eax, esp
insb byte [rdi], dx
and ecx, 0x2f075f26
xchg eax, ebx
int3
mov ds, word [rbp + 0x2d8803f]
jns 0x402503
jg 0x4024d2
stosd dword [rdi], eax
jb 0x4024ca
xchg eax, edx
xchg byte [rdx - 0x56f600cd], dl
mov edi, 0x1549b99c
outsd dx, dword [rsi]
dec dword [rbp - 0x7bd3c6df]
mov cl, 0x72
out 0x66, al
add byte [rdi - 0x7c0b80f9], dl
or cl, cl
push rax
mov edi, 0x4f24527
xor al, 4
or dword [rax], 0xffffffd9
leave
mov edx, 0x7f2ce4a1
fisttp dword [rsi]
outsd dx, dword [rsi]
adc dh, byte [rax]
imul eax, dword [rbx], 0x4374070f
leave
or dword [rdi + 0xf3fe710], edi
and byte [rax + 0x7f880c9], bh
inc dword [rip - 0xce8c4d4]
xchg eax, ebx
clc
wait
sahf
mov ecx, 0x3f1f6cd9
jg 0x402585
add dword [rcx], ebx
adc byte [rax + 0xb6c8324], bl
mov edi, 0x92152f2f
sbb dword [rax + rcx + 1], 1
push rax
jb 0x4025e4
sbb bh, al
xor byte [rdi], bh
enter -0x6467, 0xc
leave
or cl, al
inc dword [rax + 0x17c94374]
adc byte [rdi], bh
or byte [rdx + 0xe], al
xor cl, al
loopne 0x4025a8
rcl byte [rbx], 1
mov dl, 0xc1
xchg ah, ah
and byte [rip + 0xb17307f], dl
sbb al, 0x16
xor al, 0x3f
mov edx, dword [rbp + rcx*8 + 0x7b110e]
mov esi, es
and bh, byte [rcx + 0x46]
jg 0x402608
add dword [rbx + 0x6caf59e4], edi
add byte [rax], bl
xor edi, edi
cmpps xmm0, xmmword [rsi], 0x90
out 0x1f, al
or dword gs:[rdi - 0x50], edi
sahf
sbb al, 8
cmp eax, 0x12
add byte [rax], al
add byte [rax], cl
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x42f7fdea], ecx
add eax, 0xbdb0dfcb
and cl, byte [rcx - 0x4affffd5]
or al, 0
add byte [rax + 0x5c], ch
add byte [rax], al
add qword [r8], rax
push 0xf4
