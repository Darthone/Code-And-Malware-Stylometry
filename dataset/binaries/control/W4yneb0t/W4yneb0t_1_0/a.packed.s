call 0x4018d0
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x4016e8
add ebx, ebx
je 0x40169e
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x4016d6
cmp rbp, -4
ja 0x4016d6
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4016be
add ecx, 4
mov dl, byte [rax]
je 0x4016e6
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x4016d6
ret
cld
pop r11
cmp r8b, 2
je 0x4016fe
jmp 0x40177b
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40170e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x4016f6
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401726
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401713
sub eax, 3
jb 0x401744
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x40177b
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x40176b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401769
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401758
cmp rbp, -0xd00
adc ecx, eax
call 0x4016aa
jmp 0x4016fe
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401854
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x4017f2
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40183e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401811
push 0x3a707474
jne 0x40186a
js 0x40182a
jae 0x401864
outsb dx, byte cs:[rsi]
je 0x401823
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401891
jb 0x401883
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4018ae
jb 0x4018c1
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x213d40
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x213d40
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x40178c
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x4018b7
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401865
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f195f
jb 0x401977
movsxd rbp, dword [rdi]
jae 0x401971
insb byte [rdi], dx
js 0x401977
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401957
cmp rsi, rcx
jae 0x40195f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40193e
cmp al, 0x8f
ja 0x40193e
cmp byte [rsi - 2], 0xf
je 0x401944
sub al, 0xe8
jg 0x401941
push rdi
cmp al, 1
ja 0x40192c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40192f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x40195c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4019b3
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1e31
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4019f7
mov al, 0xa
jmp 0x4019f7
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4019d3
inc ebx
mov al, 0
jmp 0x4019fb
mov al, 2
jmp 0x4019fb
mov al, 3
jmp 0x4019fb
mov al, 0x3c
jmp 0x4019fb
push rcx
rcr ah, 1
fstp st(7)
jle 0x401a3c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401a4e
jg 0x401a40
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a71c3
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401a9a
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6c17
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401aa2
cmp esi, 0x21585055
jne 0x401aa6
jge 0x401a98
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401a9b
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401a9f
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401b4b
pop rcx
or al, 0x3b
jb 0x401b51
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401ac3
jmp 0x401ac5
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661a06
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53c4e
in eax, dx
jg 0x401afd
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401b43
mov bh, 0x2a
add edi, 0x10
jmp 0x401b40
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401b7d
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401bb9
jne 0x401bd0
fstpnce st(6), st(0)
jle 0x401b99
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401bcf
jrcxz 0x401c03
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1bb67
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401c82
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401c42
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58296217
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401cb5
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401c4f
and ecx, 7
or al, 0xeb
jae 0x401cba
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401cef
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401d2d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401ce6
push rax
call 0xffffffff868d19d3
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401cf0
std
cmp edi, esi
xchg eax, edi
jle 0x401d45
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c962d1
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401d43
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401d31
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401d5a
js 0x401d9a
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401e2c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad3067
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401e4d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401e52
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21904
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401de0
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
enter 3, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
and dword [rax + 0x92], esp
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0xb8
add byte [rax], r8b
sldt word [rax]
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401f06
je 0x401f0f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401ed8
mov dh, 0x7d
jbe 0x401ed7
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401f10
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x6180006], bl
add byte [rdx + rcx - 0x38], ch
nop
invd
add byte [rax + 0xb480009], bh
in al, 0x13
enter 0xa07, 0
nop
or eax, dword [rax]
xor byte [rsi], cl
test byte [rcx], 0xe4
add ecx, dword [rax + rax]
push rax
or eax, 0x47102000
lahf
ror dl, 1
sldt word [rbx + rbp + 9]
lodsb al, byte [rsi]
sbb al, 0x60
pop rdi
adc byte [rdi], dl
add edx, esi
or esp, esp
adc dword [rax], eax
mov word [rdx], ss
add byte [rax], ch
inc byte cs:[rax]
stc
adc eax, dword [rax]
cmp dword fs:[rax + rax], edx
call 0xffffffff9f607f6f
adc eax, 0x16f800
add byte [rsi], bh
mov dh, 0x4d
and byte [rdi], bl
add byte [rax], cl
sbb byte [rdi + 0x3f], al
in eax, 0
stc
add dword [rcx], ebx
add byte [rax], al
sbb cl, byte [rsi]
nop
sbb eax, dword [rax]
and byte [rcx + 0x1c], al
repne outsb dx, byte [rsi]
retf 0x113
add al, 0
int1
dec dword [rsi]
loope 0x401f32
sbb edi, dword [rdi + 0x48029719]
sbb edx, dword [rdx - 0x5fe8e4a0]
mov ebp, 0x2e641921
loopne 0x401fc1
pop rdi
cmp ebx, ebx
xor eax, 0x15f4350
push rbx
jbe 0x401fb2
jp 0x401fd7
add byte [rcx], dl
push rdi
in al, 0x86
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
fldenv [rbx + 0x5427ab0c]
ja 0x401f7b
nop
or al, 0x36
leave
xor dl, byte [r13 - 0x16]
push rsi
nop
mov bl, 0x83
or eax, 0x17f6a7f7
pushfq
cmp byte [rcx + 0x72], dil
add dword [rdx + 0x177f1518], edx
jb 0x401fad
sbb al, 0x43
add dword [rdi + 0x1513960], ebx
ret 0x1778
push rdi
scasb al, byte [rdi]
mov eax, ds
pop rbp
cwde
push qword [rax + 0x47]
xchg eax, esp
xor byte [rsi + 0x65], dh
push rdi
xchg byte [rdi], ch
adc al, 0x7f
cmpsb byte [rsi], byte ptr [rdi]
test cl, bl
xchg eax, edi
stosb byte [edi], al
add r9b, r11b
js 0x40205c
iretd
sahf
adc byte [rdi - 0x596f9be0], bl
mov bl, 7
and cl, al
jrcxz 0x402026
sbb byte [rdx], al
movsd dword [rdi], dword ptr [rsi]
mov bh, 0x18
add dword [rdi], ebp
in al, 0xec
leave
xchg eax, ebx
add ah, byte [rdx + rbx + 0x3a]
add byte [rdi], dl
xor dword [rax], 0xffffff83
pushfq
sbb al, 0x8c
sub al, byte [rcx + rdx*8 - 0x38]
mov bl, 0x57
push rsi
xor eax, 0x7702fc00
sbb esp, dword es:[rax]
iretd
pop rsi
add edx, dword gs:[rdi]
xor ecx, eax
int 0xe5
adc al, byte [rax + 0x2b]
add al, byte [rdi + 0x1c]
in al, 0xe4
leave
cmc
add edx, dword [rax + 0x4472519]
out 0x20, eax
sbb dword [rax + rax*2 - 0x7cef5dda], 0xc
jbe 0x4020b3
sub ch, byte [rdi]
xchg eax, edx
xchg eax, esp
sbb dword [rax + rdx*4 - 0x4d], esp
and esi, edi
mov ah, ah
leave
or ecx, dword [rsi + 5]
retf 0x271e
sbb esp, esp
shl byte gs:[rsi - 0x4d44e4e1], 0xc3
jg 0x402082
movhps qword [rax - 0x7f], xmm7
jo 0x402090
and eax, dword [rsi]
in al, 0x20
scasq rax, qword [rdi]
and eax, 0x2706b048
or esi, edx
movabs al, byte [0xb84409fa06bd8f43]
nop
and al, 0xef
mov r15b, 0x40
cmp byte [rbp + rbx*2 + 0x71777fd], al
and byte [rdi], ah
mov ebx, 0x2a40176e
cmp esi, esi
cmp al, cl
out dx, al
and dword [rdi + 0x1d], esp
or byte [rdi + 0x17], bl
in al, dx
add eax, 0xbaa70842
sbb dl, byte [rdi - 0x4c3637ce]
or byte [rdi + 0x36], al
push rdx
out dx, al
test byte [rdx], 0xe3
adc byte [rip + 0x96b8709], bl
or eax, 0x8a05c832
jp 0x4020fc
jrcxz 0x4020d1
and byte [rbx + 0x24bcde17], al
sbb eax, 0x2790bbb7
push rbx
or dl, dl
mov esp, 0x21216417
push rbp
sbb eax, 0xe4e40bc7
or edi, dword [rip + 0x29f72f0b]
in al, dx
leave
rcr dword [rcx], cl
xchg eax, ebx
adc dword [rax], ebp
add ebp, dword [rdi]
mov esp, 0xe7e41cec
cmpsd dword [rsi], dword ptr [rdi]
sbb byte [rbx - 0x11], dl
or esp, dword [rdi]
mov esp, 0xd6372790
sbb byte [rip + 0x2716af0c], bh
mov ebx, 0x17942590
ret 0x351f
enter -0x131e, 0x20
cli
or al, 0x53
ror byte [rdi], 1
add bh, byte [rcx - 0x7f]
jno 0x402167
or eax, 0x790d3b9f
shl byte [rcx], cl
in al, dx
adc byte [rdi], 0xca
or eax, 0x3219b68f
enter 0xbd9, 0x1c
push 0x1e2c063e
or al, 0x7f
pop rdx
add al, 0x72
jbe 0x4020fb
shr dword [rdi], -0x72
and dword [rip - 0x6c26d1e9], esp
or dword [rsi + rsi*8], 0x6e
sbb esp, edi
add dword [rdi - 0x1bf42638], ecx
lss ecx, gs:[rdi]
ja 0x40217e
jae 0x402133
adc ah, bl
xor al, 0x70
xor dword [rax - 0x7e], 0x579c0710
adc byte [rax - 0x32], cl
cmp byte [rax - 0x6130ef57], al
cmp al, 0xe3
add eax, 0x8f110c76
push rsi
adc dword [rdi + 0x64], ebp
sbb eax, 0x9c8393c9
mov esp, 0x85255011
cmp al, 0x39
enter 0x1222, 0x12
mov word [rcx], fs
jb 0x4021b4
in al, dx
jp 0x4021d7
ja 0x4021a7
fist dword [rdx]
xchg eax, ebx
mov esp, 0x4f132b40
mov bh, 0x27
in al, dx
add eax, 0x8c1a9072
adc edi, ebx
adc esi, dword [rdi + 0x2f]
mov al, 0x17
mov bl, 0x26
adc al, 0x5f
wait
adc al, 0x2f
mov al, 0x17
pop rax
jg 0x4021ca
adc al, 0xef
adc eax, 0x59c90df0
mov dword [rax - 0x1bfde8b2], 0x67b90bd9
or byte [rcx + 0x5a], al
adc eax, 0x2724da47
sbb esp, esp
mov edi, 0x2f104240
in al, 0xc9
mov bl, 1
out dx, eax
adc eax, 0x16282822
jb 0x4021af
xchg eax, ebx
jle 0x402242
test byte [rax], r8b
in al, 0x20
or eax, 0xa708d072
js 0x402246
pushfq
cmp al, 0x7b
adc al, 0xf9
add ah, byte [rdi + 0x3b001680]
cmp eax, ebx
nop
lea ebx, [rdi - 0x3f]
jne 0x40225d
fmul st(1)
pop rax
and dword [rbx], esi
pop rdi
pop rsi
sbb byte [rcx + rdi], bh
xor eax, 0x5f2ad017
add dword ss:[rax], esp
sbb eax, 0x601f1392
xchg eax, r8d
xchg eax, ebx
sbb dword [rbp - 0x58], 0x17
sub dword [rax], esp
or byte [rsp + rbx + 0x1de6f864], bl
psraw mm0, qword [r13 + 0x1858393c]
out 0x29, al
test eax, 0x16833718
in al, dx
add bh, bl
nop
cmp dword [rdx + 0x4c], esp
sbb dword [rax], ebx
and bl, byte [rsi - 0x3e42dfa2]
sbb dword [rdi], edx
and al, 0x1a
sbb r11d, dword [r14 + 0x60]
popfq
adc bl, bh
xor byte [rdx], bl
fistp qword [rsi + 0x1a]
xchg eax, ebx
sub al, 0x3f
jne 0x4022d6
int 0x1a
or eax, dword [rsi + rbx*2]
enter 0x283c, 0x3e
sbb eax, dword [rdi - 0x37e84c38]
pop rdx
sbb esi, dword [rax + 0x195e471b]
jb 0x4022b7
or al, 0x5e
or dword [rdi + rbp*8], ebx
jnp 0x4022f0
jnp 0x4022ef
popfq
and eax, 0x908f1cdc
sbb dword [rsp + rdi + 0x366c18f2], 0x1d
in al, 9
push rax
sbb eax, 0xc21f307f
xchg dword [rsp + rdx*8 + 0x299e17c1], ebx
out 0x28, eax
xor cl, al
sbb edi, ecx
insd dword [rdi], dx
cmp byte [rbp + 0x1e], bh
in al, 0x20
movsq qword [rdi], qword ptr [rsi]
sub byte [rdi], cl
in al, 9
xchg esp, esp
loopne 0x402302
scasd eax, dword [rdi]
xor al, 0x1b
in al, 9
insb byte [rdi], dx
jg 0x40229c
sub dword [rdi + rbx + 0x1605ece4], esi
out 0x7f, eax
sub dword [rdi - 0x48], ebx
in al, 0x59
xchg esp, esi
push r10
and ah, byte [rcx + 0x20]
jb 0x4022c2
xchg eax, ebx
jb 0x40235c
sub esi, dword [rdi + 0x20]
xchg eax, edx
mov bl, 0x43
jb 0x4022ff
fst dword [rdi + rdx]
call 0x1ca06bfd
jns 0x402369
outsd dx, dword [rsi]
and byte [rax - 0x6dbf4399], dl
add dword [rdi - 8], ebp
adc byte [r14 - 0x7f], sil
mov ebp, 0x212f2105
and byte [rdi], ah
iretd
loop 0x4023aa
and dword [rdi + 0x611428b4], esi
in al, 0xa6
and dword [rsi + rbx], ebp
cli
test byte [r9 + 0x4e], r8b
adc ah, byte [rdx]
enter -0x6853, 2
jnp 0x4022ff
sbb al, 0x9c
and dl, byte [rbx]
and eax, dword [rdi + 6]
cmp dword [rcx - 0xa], edi
xor dword [rbx], esp
and dword [rdx + rbp*4 + 0x17], edx
pop rax
sbb al, 0x42
clc
and esp, dword [rdi]
sbb qword [r13 - 0x70db586e], 0x4724561a
jbe 0x4023c4
iretd
js 0x402416
and al, 0x6f
mov ecx, 0xe2f7918
xor ah, byte [rcx]
ror byte [rdi], 1
sbb al, byte [rdi + 0x504ec190]
pop rdi
out dx, eax
movsxd rsp, dword [rip + 0x4605e840]
mov eax, 0x5e24a725
mov esp, 0x9a6f262d
fxch st(0), st(1)
mov bl, 0x17
add ah, byte [rdi]
cmp ah, byte [rsp + rbp*8]
add bh, byte [rcx]
enter 0x745c, 0x27
xchg dword [rdi], edx
fsub dword [rcx]
lahf
xlatb
hlt
jbe 0x402411
iretd
sub byte ds:[rdi + 0x17aa2496], cl
sbb al, 0x2c
insb byte [rdi], dx
and ah, ch
mov bh, 8
sub ecx, ecx
jo 0x402388
call 0x768efcb3
ror byte [rip + 0x5f122f7c], 1
scasd eax, dword [rdi]
push rdi
pushfq
adc dword [rbp - 0x40b7cdbe], 0x7fffffc8
test dword [rcx], 0x73747263
je 0x4024a4
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
fisubr dword [rdi]
push rcx
inc byte [rbx + 0x52]
pop rdi
push r11
push rsp
fsub dword [rbp + 0x72]
imul ebx, dword gs:[edx], 0xdffddede
pop rdi
je 0x4024be
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40247a
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
mov edi, 0x9dff6fd
je 0x4024d7
jb 0x4024dd
pop rdi
jne 0x4024e6
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4024df
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x2fedff38
mov al, 0x35
and al, 0x5f
imul bp, word [rsi + 0x69], 0x7208
jb 0x4024ea
jns 0x4024ea
outsb dx, byte gs:[rsi]
je 0x402475
mov esi, 0x7972dadd
mov dword [rdx], ecx
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x4024d0
or eax, 0x37584db
pop rdi
sub dword [rdx + rbp + 0x62], esi
pushfq
jo 0x402481
push qword [rdi + 0x535a2470]
je 0x402500
xor dword [rcx], edi
jo 0x402521
movsxd rsp, dword gs:[rbp + 0x77]
cdq
sub eax, 0xecedde77
fld xword [rsi - 0x61]
jb 0x40253c
movsxd rsi, dword [rdx + rbx + 0x38]
imul r13d, dword [r15 + 0x3b], 0xc1b5bb9d
sub dword [rbx], esi
jg 0x40245b
movsxd rsp, dword [rcx - 0x7f]
imul edi, dword [ebx + 0x361467ed], 0x69
outsb dx, byte [esi]
pcmpgtw mm1, qword [rsp + rsi]
xor dword [rsi], ebp
cmp eax, 0x5bb1b773
sbb eax, 0x696f6369
sub al, 0x69
jp 0x402506
push rdx
std
int 0xb6
pop rbx
sub al, 0x6e
mov byte fs:[rbp + 0x59], ah
wrmsr
imul ebp, dword [rcx - 1], 0x2fbfbbdb
xor r14b, byte [rbp + 0x62]
pop rdi
pop rdx
xor ah, byte [rdx + 0x73]
xor eax, 0x4d787863
push 0x3131ddff
mov esp, 0x4d415246
pop r15
or r8b, byte [rsi + rsi*8 + 0x60]
retf
xchg eax, ebx
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
push rdx
in al, dx
std
ret 0x4f4f
push rbx
push rsp
sub r11b, r14b
ja 0x402532
ret 0x6426
adc byte [rsi + 0x5944d472], ah
mov sil, 0xfd
outsb dx, byte [rsi]
enter 0x6d34, 0x6f
jbe 0x4025d1
push r10
or qword [rdi], r14
sub bl, byte [rbx - 0x794e488d]
xor dword [rcx - 0x48338c9f], edx
cmp ah, byte [rdi - 0x53]
sbb esi, ebx
fimul dword [rcx + 0x63]
sbb dword [rdx], edx
movsxd rbp, dword [rax + 0x61]
mov ebp, 0xd7614942
mov ecx, 0x451073b7
push rbx
add al, 0
xor rax, 0xffffffffd6043631
insb byte [rdi], dx
pop rdi
pop rdi
call 0x8916
cmp edx, dword [rsi - 0x28]
inc byte [rbp + 0x34]
je 0x40262b
jo 0x402619
push rbx
xor esp, dword fs:[rbx + 0x49]
jmp 0x402599
push qword [rsi + 0x40]
mov al, 0x49
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x15
cmp esi, dword [rsi]
fld qword ss:[rax + 0x546361ac]
jl 0x4025de
push rbx
add bl, bh
div byte [rdi + 0x38456835]
jo 0x402652
jo 0x402644
xor esp, dword [rbx + 0x6b]
jbe 0x40263f
mov dh, 0x7b
scasd eax, dword [rdi]
xor dword [rbp - 0x48], r9d
xor dh, byte [rax]
je 0x402660
jb 0x402669
ja 0x40265b
adc eax, 0x9635ad0a
cmp dword [rcx], ecx
push rdx
fstp xword [r10 + 0x505bbd91]
movsxd rcx, r13d
insb byte [rdi], dx
sbb byte [rdi + 0x53], dh
mov al, 0x20
xor dword [rax + 0x454f5236], 0x39719250
or edx, dword [rbx + 0x6a6e7532]
wait
sub esi, dword [rsp + rdx*4 + 0x2c]
mov esi, 0x3cbadb70
xor esp, dword [rdi + rdi + 0x4c]
movsxd rdi, dword [rdx]
imul ebp, dword [rbx - 0x53], 0x5b895049
fld xword [rsi + 0x13]
push rbx
xor dl, byte [rbx + 0x36]
jb 0x4026a1
sti
xchg eax, edx
push rbx
mov edx, 0x41b6d746
add bh, byte [rcx]
cwde
sbb dl, byte [rsi + 0x7f]
pop rdi
and dword [rdx + 0x63], edx
jno 0x4026c5
movsxd rdi, dword [r14 + r8*4 - 0x52d7a98f]
add byte [rcx], al
in al, dx
rcl dword [rsi], cl
test byte [rbp - 0x11], dh
xor eax, 0xdac0796f
imul ebp, dword [rsi - 0x78], 0x76
mov bh, 0x35
pushfq
mov edx, 0xb7635a15
outsb dx, byte [rsi]
jne 0x4026ca
xor esi, dword [rsi - 0x3b]
movsd dword [rdi], dword ptr [rsi]
enter -0x37da, -0x54
xor dword [r8], r14d
mov al, 0x86
test dword [rax + 0x42], esp
mov word [rax + 0x24], ss
insd dword [rdi], dx
cmp byte fs:[rip + 0x7c438063], 0x4e
push r15
sub ah, byte [rcx + 0x6d45b975]
insd dword [rdi], dx
pop rcx
fstp xword [rcx]
out 0x96, eax
adc byte [rsp + rdi*4 - 0x4df4faed], ch
adc esi, ebx
adc eax, 0x6c45696d
retf -0x4e9f
mov ch, 0xd1
xor r13b, byte [rsp + rdi*2 + 0x1076626e]
push 0x764ab1fc
test dword ss:[rbx + 0x6c], 0xff495c48
sal byte [rbx - 0xc], 0x5a
insb byte [rdi], dx
push rax
jbe 0x402724
xor esi, dword [rdi + 0x46]
movsxd rsi, dword [rbx - 0x2f]
fld xword [rbx - 0x48]
mov ebp, 0x5529eb66
jbe 0x40275d
js 0x4026f5
jo 0x402773
in eax, dx
adc byte [rsi], al
js 0x402728
out dx, eax
fadd dword [rax]
jns 0x4026d8
adc eax, 0xfc7992d9
pop r12
mov esp, dword [rbp - 6]
xor eax, 0xe02bb261
fadd qword [rcx + rsi*8 - 0x2371fafe]
xor dword [rsi], ebp
xor ebx, dword [rdi]
cli
jo 0x402760
jno 0x40274c
and eax, 0xa26286b4
sbb dl, bl
add byte [rax + 0x4253b56e], dl
pop rdi
jg 0x40270e
scasd eax, dword [rdi]
xor edx, esi
movsb byte [rdi], byte ptr [rsi]
xor byte [rdi], ah
jmp 0x4026f6
mov dword [rax], r15d
add eax, ecx
xor al, 0x49
mov esp, 0x8783005b
out 0x13, al
pop rdi
sub byte [rcx - 0x5ea973a8], al
sub ebp, eax
pushfq
ror byte [rsi], 1
cdq
xor dword [rip + 0x9115f74], ecx
js 0x402710
movsb byte [rdi], byte ptr [rsi]
jo 0x4027bc
in al, dx
test dword [rax - 0x27adaf4a], ebp
shr byte [rax - 0x23], 1
mov dh, 0xbd
jae 0x4027fd
outsb dx, byte [rsi]
ja 0x4027b4
push -0x5be99bbc
adc byte [rcx + 0x50], ah
out dx, al
push 0x30
cmp r10b, byte [r8]
test dword [rdx + 0x38], ebp
adc byte [rbx + 0x7b], ch
xchg eax, edx
pop rbx
pop rdi
xor ch, byte [rsi]
add dword [rip + 0x11deb33b], esi
or esi, dword [rsi + rbx*8]
pop qword [rdi - 0x71a6fadd]
loopne 0x402754
mov eax, eax
cmp byte [rcx], al
ror byte [rbx + 0x11], 0x69
test eax, 0xc331b6d4
movsd dword [rdi], dword ptr [rsi]
push qword [rax - 0x7b]
loop 0x4027f8
fnstsw dword [rdi - 0x7eb8da54]
mov ebp, 0x848d2536
cmp edi, dword [r8 + 0x3c]
mov dl, 0x64
ret
push 0x43283bc9
xchg dword [rsi + rsi*2 + 0x4a1370e9], eax
jrcxz 0x40278d
push rax
jo 0x40277f
test byte [rsi - 0x73], 0xc3
xor byte [rdi], bh
add ebp, dword [rdi - 0x64ac87ae]
fucom st(6)
stosb byte [rdi], al
jge 0x402838
movsxd rsp, dword [rbx + 0x53]
outsb dx, byte [rsi]
pushfq
add dword [rax - 0x18], 0x6b506d77
imul edx, dword [rip + 0x51282508], 0x54b470b
cdq
add dh, byte [rdx + 0x65]
popfq
or dword [rip + 0x780444dc], esi
add eax, 0xa3a0856
rcl byte [rsi], 0xc
or byte [r9 + r12*2 + 0x62], dl
imul dword [rcx + 0x65]
insd dword [rdi], dx
test ch, bh
insb byte [rdi], dx
outsb dx, byte [rsi]
jle 0x402846
mov dh, 0xb9
mov bl, 0x53
movsb byte [rdi], byte ptr [rsi]
outsd dx, dword [rsi]
movsd dword [rdi], dword ptr [rsi]
jns 0x4028b6
adc eax, 0x81da8c01
test al, 0x76
and dword [rsp + rax - 0x7b269bfe], 2
adc byte [rsi], ah
insd dword [rdi], dx
lea esi, [rcx]
jbe 0x40283a
add eax, dword [rdx + 0x70]
je 0x402898
jae 0x402805
xchg edi, ecx
push 0x694a64c0
xor byte [rcx + 0x49], al
fcom dword [r14 - 0x56]
je 0x4028b5
sbb ebx, dword fs:[rsp + 0x71]
add al, bl
xchg eax, edx
xor dword [rsi], esi
clc
sub byte [rbp - 6], al
push rdx
xchg eax, ebp
add ah, byte [rcx + rcx - 0x553bf905]
lea ebx, [rdx + 0x3361cd65]
iretd
pop rdx
int3
push rbp
jmp 0x4028e8
sbb rax, 0x1229f0e0
sahf
rcr byte [rdi - 0x1c], cl
push r11
xor al, 0x5f
cwde
or ah, byte [rbp + rdx*4 - 0x6ec68b19]
out dx, eax
xor eax, 0xbc2f4824
cmp al, 0x60
pop rcx
xchg eax, edx
jb 0x402845
add eax, 0x2c1289ac
jbe 0x402899
shr byte [rcx + 0x16], cl
scasb al, byte [rdi]
pop rdx
push rdi
mov edx, 0x6c496062
movsd dword [rdi], dword ptr [rsi]
add eax, 0x3061d479
jmp 0xffffffff8ccc52f5
ja 0x40286d
or byte [rcx + 0x785f4420], r15b
or al, 1
xor bl, byte [rcx + rcx*2 + 0x4a]
or al, 1
ror al, cl
push rsi
int1
cmp byte [rsi + rcx*8], ah
movsb byte [rdi], byte ptr [rsi]
pop rbx
adc al, 0x78
pop rdi
cmc
mov ebp, 0x82118147
cmp byte [rbx*8 - 0x1516b6e0], ah
jbe 0x402984
or dword [rsi + 0x1636d53], esp
xor edi, dword [rax - 0x3e]
xchg eax, edx
push rbp
pop rcx
pushfq
jne 0x402973
pop rax
xchg eax, ecx
jb 0x4028b9
and edx, dword [rdx + 0x72]
push r8
shr dword [rsi], 8
and ecx, dword [rax + 0x39]
wrmsr
adc esi, dword [rbx + 0x4f6c5239]
xor r14d, dword [r8 + 0x25]
int1
je 0x4029ab
xchg eax, ebp
outsd dx, dword [rsi]
sbb ah, byte [rcx + 0x20]
movsb byte [rdi], byte ptr [rsi]
mov word [r10 + rsi*4 + 0x49990915], es
or dh, byte [rdx - 0x74]
loope 0x4029b1
sar ah, 0xdf
movsxd rax, dword [rdx]
mov esp, 0xdf64370a
sub al, 0xb
cdqe
sbb byte [rsi + 0x475bec3], 0x58
lodsd eax, dword [rsi]
test byte [rdx + rdi + 0x4a], dh
adc eax, dword [rcx - 0x6429d59f]
xor eax, dword [rcx - 0x21ea5ee1]
pushfq
xor esp, dword [rdi + rbp*2 + 0x74]
jbe 0x402967
rol dword [rdx + rbx*2 + 0x5f6f73fb], 0x30
adc al, 0x51
or dword [rax], edx
and bl, byte [rbx - 0x6919549a]
mov ecx, 0x31c2ac0a
pop rsp
mov ah, 0xa4
pop rax
cmpsb byte [rsi], byte ptr [rdi]
cmp dword [rdx], ebp
test byte [rax], ch
xor dl, cl
and dl, byte [rax + 0x7070041e]
sbb al, 0xa8
add dh, ch
imul esi, dword [rip + 0x22f2726b], -0x40
or byte [rax + 0x39], 0xbb
pop rsi
int 4
mov byte [rbx - 0x2d699b7d], 0x41
sbb dword [rcx + rsi], 0x302a5034
cwde
enter -0x70e0, -0x7a
cmc
xchg eax, esi
cwde
push 0x10a8c677
pop rdx
rol byte [rsi + rbp*2 + 0x73553167], 0x73
xchg byte [rax], ah
adc eax, 0xe6324060
test byte [rbx - 0x7d], bl
retf
xor dword [rsp + 0x3b], esp
movsxd rbp, dword [rdi + 0x66]
sub byte [rdi + 7], ah
ret
or eax, 0x40384e14
movabs byte [0x814496e763654494], al
jo 0x402a45
fcmovnu st(0), st(2)
or dword [rsi + 0x2d], ebx
add esp, dword [rsi + 0x2b]
insb byte [rdi], dx
add dh, byte [rax + 0x341eb260]
sbb al, 0x10
and byte [rsp - 0x19a980b7], ah
sbb ah, bh
cmp dword [rax + 0x75], esi
jae 0x402a9a
rol byte [rbp + 0x4f], 1
push rsi
mov ah, 0xb2
pop rdx
adc eax, 0x54804054
and byte [rdi - 0x17], cl
or byte [rip + 0x2b6de108], ah
ror dword [r10 - 0x16], 1
mov ebp, 0xd0fc2259
add dword [rsp + 1], 0x42035918
jle 0x402aad
outsb dx, byte [rsi]
pop rcx
sbb ch, cl
movabs al, byte [0x65094130624c4355]
ret 0xb40e
jmp 0xffffffffa13a6d71
cmp dword [edi + 0x7a040897], ebp
call 0xffffffffdc70f09f
pop rdx
sub cl, bh
jb 0x402afe
xchg byte [rcx + 0x2a], ah
add al, 0x8e
fisttp qword [rip + 0xbd6249]
test al, 0x2d
adc byte [rax], bh
xor eax, 0x20b4aa68
pop rbx
adc ah, byte [rcx + rbp*2 - 0x15b5f18b]
sbb byte ds:[rcx + rbp - 0x55], al
push rcx
scasd eax, dword [edi]
sal dword [rbx + rbp*4 + 0x6d49e833], 0x3b
pushfq
xor al, byte [rdx]
and dword [rdi - 0x7b], eax
add byte [rdx + 0x2c], dh
add qword [rdx - 0x2e], 0x736c6f4f
js 0x402a7d
loope 0x402b11
xor eax, 0x5fbbc5d7
mov bl, byte [rsi + 9]
wait
add dword [rsi + rdx], edi
in al, 0x60
xchg eax, ecx
xor al, 0xa3
stosb byte [rdi], al
not byte [rsi + 0x12]
lodsb al, byte [rsi]
xchg eax, ebx
loopne 0x402a7d
add byte [rdx + rbp*4], ch
pop rsi
insd dword [rdi], dx
lodsd eax, dword [rsi]
push 0x690b371e
mov edx, 0x3640780c
adc byte [rdx + rcx*8 + 0x586230ad], 0x9b
adc al, 0xfe
fstp qword [rbx]
stosb byte [rdi], al
movabs eax, dword [0x8957a42ae5395c40]
push rbx
and byte [r14 + 0x1908c631], 0x49
or eax, 0x18438462
sbb edx, dword [rcx + 0x34330f6e]
sbb eax, 0x8c0091c0
add ah, byte [rcx - 0x7c]
adc ecx, dword [rax]
xchg eax, ecx
out 0xdd, eax
xor eax, 0xf5b15909
cmp esi, ecx
xor dword [rax + rax*2 + 0x56], eax
mov eax, 0x8445e514
sub esi, ecx
sbb bl, byte [rdx + 0x65]
mov dl, 0xf
and eax, 0x4c431f93
or bl, byte [rbx]
mov bh, 0x87
push rbx
pop rdi
pop rdi
jo 0x402b8d
jae 0x402af1
ret 0x1a0d
je 0x402bc4
jbe 0x402b97
push -0x73f74998
fcomp dword [rdi - 0x627a976e]
mov bl, 0x2d
mov ecx, 0xb159b411
test eax, 0x219c1977
nop
and dword [rdx + 0x64], esp
cmpsb byte [rsi], byte ptr [rdi]
or al, al
add byte [rcx + 0x14206a42], ah
xor rax, 0xffffffffa1d93211
ret 0x3260
xor dword [rax], edi
adc dword [rdx + r10*4], 0xe90cfd49
and eax, 0xf4663e21
movabs byte [0x8e4a4d0d4002145b], al
ror ebx, cl
pop rdi
int 0xdb
nop
adc al, 0xa9
mov word [rsi], ss
push rbp
adc ch, byte [rcx - 0x46]
fstp qword [rbx + 7]
jg 0x402c13
movabs byte [0x301743431b656d75], al
xchg eax, ecx
test eax, 0x4ae79cc0
movabs eax, dword [0x34563454c704fac]
pop rax
xchg eax, ebp
push rax
mov bl, 0x43
mov ch, 0xc0
and dword [rcx - 0x2c], 0x7c
or ebp, dword [rdx + rax*8 + 0x6e8300a]
in eax, dx
xchg eax, ebx
enter 0x6c41, 0x2d
and dword [rax + 0x6b], ecx
mov cs, word [rdx]
movabs eax, dword [0xc05db04a55632c3a]
add rax, qword [rax]
outsd dx, dword [rsi]
jp 0x402bcd
fldcw word [r10 + 0x732e0078]
jns 0x402c7d
mov al, 0x93
frstor dword [rdx + 7]
je 0x402c8b
push 0x72c0d609
sti
jb 0x402c92
outsb dx, byte [rsi]
outsd dx, dword [rsi]
mov ebp, dword cs:[rip + 0x2effd815]
fsub dword [rdi + 0xd]
movabs byte [0x692d646c6975622e], al
add byte fs:[rip - 0x4a521185], cl
jge 0x402c79
or dword [rcx + rdi*2 + 0x6e], esp
jne 0x402bce
ret 0xd9c0
sbb dword [rsi - 0x28], esi
cmp al, 0x52
add dword [rdi], esi
or al, 0x5f
sbb edx, dword [rdx - 0xd]
int1
xchg eax, esi
mov ebp, 0x74200928
jb 0x402c65
fdivr st(6), st(0)
or bpl, byte [r15 + r13*2]
or byte [rax + 0x6857083d], dh
add eax, 0xf66f24a8
sbb ebp, eax
movsxd rcx, dword [rdi + 0x2e]
push 0x72646821
or eax, 0x5ba14482
pop rbp
movsxd rcx, dword [rdi]
jno 0x402cb6
or dword [rbp + 0x116cbdeb], eax
mov edi, dword [rbp - 0x28]
or ebp, dword [rdx + 0x63]
jb 0x402c3c
sub eax, 0xdecd98
push -0x2420a185
pop rdx
movabs dword [0xd50000fd52c60468], eax
push rbp
and al, 0
fild word [rcx]
int 0
pop rax
out 0xaf, eax
xchg spl, spl
int3
sbb al, 1
sbb dword [rax + 0x54072366], edx
push rsp
and dword [rcx], ebx
xchg eax, edx
and byte [r9 + rax*2], al
sbb dword [rdx + 0x21747431], edx
outsd dx, dword [rsi]
xchg byte [rdx - 0x9bbdc], dl
ljmp [rdi - 0x7d]
or al, 0x32
enter -0x6768, 0x34
add eax, 0x20c90d01
or byte [rsi - 0x70], cl
wait
mov edi, dword [rdi]
rcl al, 1
cwde
insb byte [rdi], dx
jb 0x402d73
add rdi, rbx
sbb byte [rdx + 0x40], dh
push rsi
add ebx, dword [rax]
ja 0x402c9f
cmp al, 0x79
sbb byte [rsi], al
push rbx
add al, 0x5e
mov edi, 0x480e4f27
ljmp [rdx + rcx + 0x6c]
or al, byte [rsi + 0x74]
and al, 2
imul edi, dword [rdi], -2
pushfq
mov ecx, 0x7b880c9
cmpsd dword [rsi], dword ptr [rdi]
nop
outsb dx, byte [rsi]
retf -0x7cda
jp 0x402d88
outsd dx, dword [rsi]
adc al, al
xchg eax, edx
add al, 0xef
ret
enter 0x3f09, 0x48
inc dword [rsi]
sbb dword [rax + rsi*4 - 0x7c], esp
nop
nop
add byte [rdx - 0x37], dh
movabs al, byte [0x138ec20c9a031902]
movabs eax, dword [0x6411aff073784e4]
sbb dword [rdx + 0x50503f89], esi
fst dword [rax + 0x1d0c85d]
adc byte [rdi], al
xchg eax, esp
ret
int 2
or byte [rdi + 0x1d912f07], cl
fld dword [rdx]
setge byte [rdi - 0x4c8cc37f]
jg 0x402da0
sbb edx, dword [rbp + 0x21]
cmp dword [rdi + rdi - 0x5d], ebp
push rax
jb 0x402d7e
dec dword [rcx]
enter 0x4360, -0x2e
test eax, 0x503f50bf
or al, 0xc9
push rax
xor bh, byte [rbx]
mov cl, 0x8c
mov esp, esp
and byte [rbx - 0x64fd6374], al
adc byte [rax], dl
xchg eax, edx
mov edi, 0x22ec0757
jns 0x402d41
cmp al, 0xb
leave
mov edi, 0x87279392
cmp dword fs:[rcx + rdi - 0x44], esp
and byte [rbp - 0x60], cl
xchg bl, bl
xchg eax, ebx
cmpsb byte [rsi], byte ptr [rdi]
adc ebx, esi
or al, 0x80
cmpsd dword [rsi], dword ptr [rdi]
mov edi, 0x9286e901
adc bh, ah
ucomiss xmm0, dword [rax + 0x70]
xchg eax, ebx
clc
push rbx
add bl, byte [r8 + 0x76]
lahf
mov dh, 0xa4
or esi, dword [rax - 0x6407c0c2]
iretd
fsubr qword [rdi + rdi + 7]
jg 0x402df2
add dword [rsi], eax
test dword [rdx + rsi], ecx
and al, 0x10
cwde
xchg eax, edx
mov r14b, 0xbf
or byte [rbx + 0x141c90a], ah
add dword [rdi + 0x19], ebx
clc
or al, byte [rax + 0x70]
xchg eax, ebx
and eax, edi
jg 0x402e49
jnp 0x402e5b
adc byte [rcx], al
adc edi, edi
and byte [rcx + 0x24], al
jb 0x402dfc
jg 0x402e11
and cl, al
xchg eax, ecx
or eax, 0x307f1536
cmp ebp, dword [r12d + eax*4]
pushfq
mov edi, 0x7b110734
jo 0x402e70
sub eax, 0x1ebf7ed7
retf 0x2c66
xchg eax, edx
add dword [rbx - 0x61b19700], edi
cmc
ljmp [r8 + 0x13]
leave
and dword [rax + rax + 9], ebp
jg 0x402e15
push rsp
add byte [rax], al
mov esp, esp
cmc
sub dword [rax + rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 0xff], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x5a080216], ecx
insb byte [rdi], dx
iretd
mov ah, 0x45
pop rbx
call 0x86e6f1
add bl, dh
sldt word [rax]
rol byte [rdi + 0x2490000], 0
or dh, ah
add byte [rax], al
add bh, bh
