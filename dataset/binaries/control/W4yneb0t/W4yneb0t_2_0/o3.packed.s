call 0x4013e8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401200
add ebx, ebx
je 0x4011b6
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x4011ee
cmp rbp, -4
ja 0x4011ee
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4011d6
add ecx, 4
mov dl, byte [rax]
je 0x4011fe
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x4011ee
ret
cld
pop r11
cmp r8b, 2
je 0x401216
jmp 0x401293
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401226
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x40120e
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x40123e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x40122b
sub eax, 3
jb 0x40125c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401293
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401283
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401281
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401270
cmp rbp, -0xd00
adc ecx, eax
call 0x4011c2
jmp 0x401216
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40136c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x40130a
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401356
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401329
push 0x3a707474
jne 0x401382
js 0x401342
jae 0x40137c
outsb dx, byte cs:[rsi]
je 0x40133b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4013a9
jb 0x40139b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4013c6
jb 0x4013d9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x212620
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x212620
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x4012a4
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x4013cf
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40137d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add eax, dword [rax]
jmp rbp
call 0x706f1477
jb 0x40148f
movsxd rbp, dword [rdi]
jae 0x401489
insb byte [rdi], dx
js 0x40148f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40146f
cmp rsi, rcx
jae 0x401477
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401456
cmp al, 0x8f
ja 0x401456
cmp byte [rsi - 2], 0xf
je 0x40145c
sub al, 0xe8
jg 0x401459
push rdi
cmp al, 1
ja 0x401444
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401447
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401474
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4014cb
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1949
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x40150f
mov al, 0xa
jmp 0x40150f
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4014eb
inc ebx
mov al, 0
jmp 0x401513
mov al, 2
jmp 0x401513
mov al, 3
jmp 0x401513
mov al, 0x3c
jmp 0x401513
push rcx
rcr ah, 1
fstp st(7)
jle 0x401554
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401566
jg 0x401558
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6cdb
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4015b2
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb672f
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4015ba
cmp esi, 0x21585055
jne 0x4015be
jge 0x4015b0
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4015b3
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4015b7
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401663
pop rcx
or al, 0x3b
jb 0x401669
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4015db
jmp 0x4015dd
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x366151e
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53766
in eax, dx
jg 0x401615
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40165b
mov bh, 0x2a
add edi, 0x10
jmp 0x401658
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401695
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4016d1
jne 0x4016e8
fstpnce st(6), st(0)
jle 0x4016b1
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4016e7
jrcxz 0x40171b
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b67f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40179a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40175a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295d2f
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4017cd
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401767
and ecx, 7
or al, 0xeb
jae 0x4017d2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401807
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401845
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4017fe
push rax
call 0xffffffff868d14eb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401808
std
cmp edi, esi
xchg eax, edi
jle 0x40185d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95de9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40185b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401849
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401872
js 0x4018b2
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401944
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2b7f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401965
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40196a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc2141c
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4018f8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
ror byte [rdx], 0
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
stosb byte [rdi], al
mov byte [rax], dl
add byte [rax], al
add byte [rax], cl
lcall [rax]
sbb al, byte [rax]
add byte [rax + rcx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401a1e
je 0x401a27
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4019f0
mov dh, 0x7d
jbe 0x4019ef
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401a28
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5a00006], bl
add byte [rdx + 8], ch
enter -0x6fd9, 0xf
or byte [rax], al
test al, 9
add byte [rax + 9], cl
in al, 0x13
enter 0xa07, 0
nop
or eax, dword [rax]
mov eax, 0xe409f20b
add ecx, dword [rax + rax]
loopne 0x401a28
add byte [rax + 0xd], ah
stc
add al, 0xf2
add dword [rsi], ecx
add byte [rax + 0xf], dh
add byte [rdi + rbx], al
jns 0x401a2d
stc
add byte [rax], dl
add byte [rax], dl
adc dword [rax], eax
push 0x279027c
adc al, byte [rax]
loopne 0x401a4e
add ah, cl
and cl, byte [rdi]
and byte [rdi - 0x80], bh
adc al, 0
call 0x557a76
clc
seto byte [rdi + 0x20]
add byte [rax], al
add byte [rdi], al
enter -0x6fd9, 8
sbb byte [rax], al
clc
sbb dword [rcx], ecx
in al, 3
in al, 0
add byte [rax], dh
sbb al, byte [rax]
rcr byte [rbx + 0x1be409b2], 1
add al, ah
sbb al, 0x13
add dword [rdi], edx
mov dl, 0xd8
xchg eax, ecx
mov esp, 0xfff10004
or al, 0x1b
mov edi, 0xb869bb09
sbb dword [rdi + 0x400f6002], edx
xchg byte [r8 + rdx*4 + 0x1b], spl
movabs al, byte [0x5f44e0921bddb32e]
xor eax, 0x575f3310
mov al, 1
push rbx
jp 0x401ae9
in al, 0x60
add byte [r8], r10b
xchg al, bl
adc byte [rsi + 0x25], dh
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
stosd dword [rdi], eax
pop qword [rcx + 6]
cmp dword [rcx], edi
xor byte [rsi], cl
cli
shl byte [rdi + 0x28], 0xe1
pushfq
cwde
iretd
mov eax, 0xc83f1d90
and bl, ch
insb byte [rdi], dx
or byte [rbx], bl
add byte [rdi - 0x17], al
add eax, 0x6212bb9f
push rdi
cld
not dword [r10]
cwde
ret 0x4a6c
sbb byte [rdi + rbx], dl
and edx, dword [rdi]
js 0x401b4f
mov esp, 0x47013653
outsd dx, dword [rsi]
or eax, dword [rbx]
ja 0x401af5
fnstcw word [rdi]
and byte [rdi], bh
add dword [rbp + 0x4199ac3f], ecx
mov eax, 0xed550818
add bl, al
sbb edx, eax
scasb al, byte [rdi]
adc byte [rdi], 0x94
scasd eax, dword [rdi]
cmp al, 0x39
fmul st(1)
add dl, byte [rdi]
lsl esi, dword [rax]
jo 0x2add9e51
movsb byte [rdi], byte ptr [rsi]
and byte [rbx - 0x28], al
adc byte [rsi], dh
mov bl, 0x17
ja 0x401ac7
or byte [rbx - 0x24e0dd4e], bh
enter 0x6c21, -0xb
sbb al, byte [rdx]
enter 0xe13, 0x21
in eax, dx
add dh, byte [rdi]
xor ecx, esi
scasb al, byte [rdi]
sbb dword [rdi + rdx], ebp
push 0x1b10ef22
xchg byte [r8 + 0x47813bcb], sil
wait
sub al, 0x30
sbb edx, dword [rdx + 0xf2f9f20]
or al, 0xc
and ch, bl
test esp, eax
and r8b, r12b
sbb esp, ebp
adc cl, byte [rax - 0x10d0fbf1]
add dword [rbx + 0x100f0908], esp
enter 0x17b3, -0x28
add esp, dword [rdi - 0xf28fcbf]
sbb cl, cl
xchg eax, ebx
sbb dword [rbp + 0x5a], 0x17
xor byte [rip + 0x537a015b], bl
int 0x84
adc dword [rdx], eax
sbb dl, byte [rdi - 0x6310e870]
cmp al, 0xfb
cmp eax, 0x1107732
cmpsd dword [rsi], dword ptr [rdi]
xor r9b, r8b
leave
xchg eax, ebx
adc byte [rdx + rcx - 0x131b2751], bh
mov r12d, 0x8f1e902f
ror dword gs:[rsi + 0xe], 0x19
int3
sbb ecx, dword [rbp - 0x29]
or byte [rdi + 0x44df090], al
xchg eax, edi
movabs al, byte [0x101766600493921b]
nop
sbb al, 0x40
outsd dx, dword [rsi]
jb 0x401bd8
rcr byte [rbx], 1
jb 0x401c4f
or byte [rbx + 0x4b85f9c], bh
cmpsd dword [rsi], dword ptr [rdi]
xor byte [rax - 0x23bc73f5], 4
cmc
and dword [rcx + 0x11e8767], eax
movabs al, byte [0xaf05840bd817b733]
xor al, byte [rip - 0x7bc7a571]
or al, 0x61
jbe 0x401bbf
add byte [rbx], ah
insb byte [rdi], dx
sbb byte [rdi + rbp - 0x439a87c0], 5
cmpsd dword [rsi], dword ptr [rdi]
xadd dword [rip + 0xc590eaf], eax
mov ebx, 0x60f47e5
or byte fs:[rbx + 0x17195fc0], bh
xor dword [rsi + rax*4 - 0x70], eax
and dword [rsp + rbp*2 + 0x22], eax
xor dword [rcx + 0x59], 0xffffff87
mov bh, 0x3f
mov dh, 0xc0
scasb al, byte [rdi]
sub al, 0xe7
jno 0x401c85
or dword [rdi + 0x63fffffc], edi
jb 0x401cba
jae 0x401cbc
jne 0x401cb0
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
add byte [rbp + 0x72], ah
fdivp st(5)
fstp st(2), st(0)
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401c91
outsd dx, dword fs:[rsi]
pop rdi
std
neg bh
fimul word [rbx]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401ce1
jne 0x401cfd
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401cf6
in eax, dx
mov al, 0xbf
sub dword [rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0x6e08
lea ebx, [rbx]
std
jb 0x401d15
jns 0x401d05
mov ch, 0x72
jns 0x401c4c
or ch, byte [rbp + 0x65]
mov edx, 0x20df7301
jne 0x401d22
insd dword [rdi], dx
jns 0x401cea
or eax, 0xfb74295f
fld xword [rbp - 0x3e]
sub ah, byte [rbx - 0x64]
jo 0x401d35
and al, 0x47
sub r15, qword [rdi + 0x7368dfb9]
clc
pop rdi
pop r15
insd dword [rdi], dx
popfq
adc al, 0x5a
push rbx
je 0x401d2a
cmp ah, bl
jg 0x401cd9
outsb dx, byte [rsi]
adc ebp, dword [rcx + 0x6f]
xor eax, 0x41524648
pop r15
ret
retf
xchg ebp, ecx
ror byte [rbx], 1
push rbp
and dil, sil
fisttp dword [rdi - 0xa]
push rdx
push rax
push rbx
push rsp
sub byte [r11 + 0xb], r13b
wait
mov al, 0x7f
adc byte fs:[rdx + 7], dh
mov cl, 0xcb
pop rbp
pop cx
jle 0x401d59
movsxd rbx, dword [rdi]
mov dl, byte [rbp + 0x4b40b7fa]
pop r8
pop rax
pop rdi
xor eax, dword [rbx - 0x402494eb]
xchg eax, ebp
test dword [rdi], esi
je 0x401da8
jb 0x401db1
ja 0x401da3
insb byte [rdi], dx
or dword [edx - 0x4a], ecx
mov al, 0x17
pop rdx
or edx, dword [rax + 0x4b]
movsxd rbp, dword [rdx]
hlt
movabs eax, dword [0x5f133a736de1583d]
xor ch, byte [rsi]
add dword [rax + 0x2e], eax
sub edi, esp
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0xf35e773
test byte [rdi - 0x4d], bh
ret 0x6d67
jle 0x401def
leave
jbe 0x401dd8
push rdx
wait
and ebx, edi
xchg dword [rdi], ebx
insb byte [rdi], dx
jae 0x401df7
cwde
pop rdx
insb byte [rdi], dx
push rax
jbe 0x401d10
scasb al, byte [rdi]
or ch, byte [rdi + 0x41]
js 0x401df3
pop rdi
test dword [rdx], ebx
jmp 0x401df8
push 0x2e3136e0
xor ebp, dword [rip + 0x3238a04e]
out dx, al
outsb dx, byte [rsi]
test dword [rdx - 0x67], eax
movabs dword [0xdb453143de49343d], eax
fmul st(0)
and al, 0x31
xor eax, 0x936e7973
ja 0x401d4d
in al, dx
insd dword [rdi], dx
sub dword [rax - 0x78], ebp
insd dword [rdi], dx
test dword [rbp + rdi + 0x6da4b48b], ebp
mov bh, 0xd3
in eax, dx
fstp xword [rbx]
dec byte [rbp + 0x36]
jbe 0x401e42
movsxd rdx, dword [rax]
push rbx
add eax, dword [rbp + 0x45]
xor r14b, byte [rbx - 0x79]
test bl, bl
movsd dword [rdi], dword ptr [rsi]
retf
js 0x401e5b
jb 0x401e61
cld
mov al, 0x64
test eax, 0x4d544944
pop rdi
test dword [rdi], edi
mov dh, 0x65
scasd eax, dword [rdi]
or al, 0x43
lodsd eax, dword [rsi]
push rsp
jns 0x401e79
pop rbx
mov byte [rbp + 0x1b], dh
scasq rax, qword [rdi]
jne 0x401e55
sub bl, cl
fsubr dword [rax]
test byte [r9 - 0x41], spl
retf
mov dl, 0xb1
jbe 0x401e90
xor ecx, eax
cmp byte [r8 + 0x61], 0x61
in eax, dx
imul esi, dword [rsi + rbp*4 + 0x25521252], 0x7a
or edi, dword [rbx]
cmp eax, ebx
js 0x401eb9
mov cl, 0xf4
cmp eax, 0x3731f181
pop rdi
test eax, 0x706c1066
outsb dx, byte [rsi]
ret
push rax
rcr dword [rsi + 0x45], cl
insd dword [rdi], dx
jp 0x401de1
test byte [rbx + 0x1d], cl
ret
cmpsb byte [rsi], byte ptr [rdi]
cmp dh, byte [rax + rdx*2]
jne 0x401ed6
mov word [rsi], gs
jge 0x401dfd
xor edx, dword [rsp + rsi*2 + 0x76]
movsd dword [rdi], dword ptr [rsi]
jae 0x401eca
push -0x734e139f
xlatb
mov dl, 0x27
movabs eax, dword [0x8d5f532f61bbba71]
add eax, 0x955f3153
xor edx, ebx
or ch, byte [rbp + 0x77]
pop rdi
xor dword [rsi], esi
cmp dword [rcx - 0x29], edx
in eax, dx
outsb dx, byte [rsi]
add eax, 0x16387257
movsxd rdx, dword [rip - 0x24a19ccf]
test eax, 0x4aeeec57
jae 0x401eb8
out dx, eax
xchg qword [rbp - 0x28], r13
adc esi, dword [rbx]
jbe 0x401f1a
movsxd rbp, dword [rip + 0x1bb42449]
lodsd eax, dword [rsi]
adc eax, 0xc73f5014
push rbx
xor edi, dword [rbp - 0x4c]
xchg byte [rbx + 0x24], ah
or ecx, esp
test al, 0x7f
sar byte [rax + 0x7a], 1
and esi, eax
jae 0x401f3f
cmpsb byte [rsi], byte ptr [rdi]
test byte [rax + 0x305b9612], dl
insd dword [rdi], dx
in eax, 0xd2
outsb dx, byte [rsi]
xor dword [rbx + 0x6b], esp
or byte [rax + 0x6b], ch
xchg eax, ebp
insb byte [rdi], dx
xor rsp, qword [r13 - 0x69]
push rdi
xor al, 0xeb
retf 0x4ade
sbb qword [rax], -0x26a4d0c4
cdq
xor ah, byte [rsi + 0x19396f3c]
jo 0x401eb2
cmp bl, byte [rcx]
outsd dx, dword [rsi]
sbb byte [rdx], bl
int 0xcd
pop rax
fmul st(1)
pop rax
enter -0x6f53, -0x2c
ret 0x2080
xor dword [rdi], esi
sbb eax, dword [rip + 0x2363615a]
sub ecx, dword [rdx + 0x131d6063]
shl byte [rdx - 0x53], 0x6e
xchg eax, r12d
js 0x401f4a
mov al, 0xf4
insd dword [rdi], dx
mov ah, 5
sahf
movsxd rsp, dword [rdi + 0x78]
xor dword [rax - 0x53], 0xec876e3b
push rsi
movabs eax, dword [0x776e8f3076c6de68]
pop rsp
pop rbx
sbb esi, dword [rdx + 0x12557c6d]
ja 0x401fb7
imul edi, dword [rax], 0x5e361f74
insd dword [rdi], dx
rol byte [rbx + 0x43], cl
xor bl, ah
xchg eax, esp
adc dl, byte [rsi]
jns 0x401ef1
xor dword [rcx + rdx], esi
and byte [rbp + 0x1578c842], bh
pop rdx
push -0x7c
or al, 0x78
stosd dword [rdi], eax
mov al, 0x93
fnsave dword [rsi + 0x62e26d73]
je 0x401ff4
push 0x2db96e09
fld xword [rdx + 0x74]
jo 0x401f93
outsb dx, byte [rsi]
outsd dx, dword [rsi]
outsd dx, dword [rsi]
cld
sal dword [rsi + 0xd67152d], 0x67
outsb dx, byte [rsi]
jne 0x401fca
jne 0x401fcd
sub eax, 0xc46b5b69
sbb bh, byte [rcx + 0xd]
xlatb
cmp byte [rcx], cl
insd dword [edi], dx
out 0x5a, al
ror byte [rdi + 7], 0x45
sbb dword [rsi + 0x6e], esi
ret 0xcb6
adc ebx, dword [rbp + 0x6e]
or al, 0x5f
sbb eax, dword [rsi]
jnp 0x401fc8
sbb ch, ch
pop rax
sub byte [rcx], cl
jo 0x401fa5
sahf
jmp 0x63b2b605
or ch, byte [rdi + rbp*2]
or al, ch
cmp byte [rdi + 0x24a005b1], dl
outsd dx, dword [rsi]
mov dl, 7
add dword [rdi - 0x75], 0x2e
push 0x726468c8
or eax, 0xddbb8d75
pop rbp
movsxd rsp, dword [rbx - 0x12]
movsxd rsp, dword [rbp + 0x70]
fnstsw dword [rbp - 0x34993c94]
rcl byte [rcx], 0x52
or ebp, dword [rip + 0x6a8958b5]
movabs eax, dword [0x68ecd9a668007636]
jnp 0x40206f
add al, 2
mov al, 0xad
cdq
insd dword [rdi], dx
push rdx
std
add byte [rax], al
pop rax
add dh, byte [rcx + rax*8]
add dword [rdi], eax
fmul qword [rdi + rcx + 0x11c3f07]
imul eax, dword [rsi + 0x7230164], 0x90641921
push rsp
push rsp
and byte [rax + 0x4921921], dl
xor dword [rsi + rbp*2 + 0x28], esi
sbb dword [rsp + rsi*2 + 0x24], esp
jg 0x402069
sbb dword [rdx + rsi*8], -0xa
ljmp [rdi - 0x68]
cwde
nop
or al, 0x32
enter 0x534, 8
outsb dx, byte [rsi]
xor ah, byte [rax]
int 0x4e
or edx, eax
wait
nop
add byte [rsi], al
sti
sbb byte [rbx], ah
xchg eax, esi
xor al, 0x83
push rsi
add edx, edi
test byte [rdi], dh
retf -0x32fe
mov byte [rip - 0x40a123], ah
dec eax
xchg ah, ah
in al, dx
mov edi, 0x3707023c
sbb dword [rax - 0x1c09492], edx
test al, 7
fldenv [rax + rdx*4 + 0x33]
cmpsd dword [rsi], dword ptr [rdi]
movabs al, byte [0x4f7a4dd258a4ff06]
add al, 0x4f
test dword [rax + 0x3f07de13], edx
xor cl, al
xchg edi, edi
test byte [rdi], bh
nop
in al, 0x92
or dword [rax + rdx*4], 0x28
add bl, byte [rcx]
add eax, 0x8e018419
adc eax, dword [rsi]
and eax, 0xb719bc27
lcall [rdx]
xor cl, al
nop
or eax, 0xe0e03f89
xchg ah, ch
add byte [rcx], 0x10
xchg eax, esp
loope 0x402103
enter -0x10c1, 7
enter 0x6c8e, -0x7f
setge byte [rdi]
and bh, cl
fsub qword [rax + rsi*2 + 7]
jg 0x402084
adc dword [rcx + 0x48], eax
pop rbx
movabs dword [0x9ff071f66e67250], eax
or dword [rdx - 0x2e], eax
test eax, 0x640757bf
leave
xor edi, dword [rdi + 0x58]
add byte [rcx + 0xc83253f], dh
push -0x478b9781
leave
nop
or eax, 0x7e03fbf
enter -0x6dd2, 0x27
in al, dx
add cl, cl
jb 0x402113
fild word [r15]
jg 0x40218f
cwde
xor al, 0xdd
push rax
fisttp dword [rsi]
add edx, dword [rdx + 0x678cde13]
mov edi, 0xe9019310
xchg bh, ah
psubb mm6, qword [rsi + 0x2e]
jo 0x402157
push rbx
add byte [rbx + 0x2e5f58a4], bl
int 0x66
movabs r10, 0xccf272433f1f9bf8
jg 0x402159
add dword [rsi], eax
adc byte [rbx + rbx*2 - 0x38], ah
and byte [rax - 0x1be3d041], bl
and bl, byte [rcx]
or byte [rcx], al
add dword [rbx - 0x86f7f3f], esi
xor byte [rdi], bh
xchg byte fs:[rdx - 0x452ff530], dl
or edx, dword [rax]
fadd qword [rdi]
jg 0x4021a0
or byte [rdi], al
sbb dword [rax + rax*2 - 0x20], esp
loopne 0x402159
add ah, byte [rax + 0x43]
jb 0x4021bf
and byte [rip + 0xb0e0c7f], dl
fnstenv [rax]
xor al, 0xbf
mov dl, 0xd9
and dword [rdi], eax
adc dword [rbx], edi
adc cl, byte [rax + 0x16]
pushfq
mov r15b, 0xbf
cmc
retf 0xc66
mov ebx, 0x311800
imul ecx, dword [rsi - 0x62], 0x1f0a20ff
xor ah, ah
leave
and dword [rcx + rcx + 0x7f], ebp
cmp byte [rbx], bh
pushfq
add byte [rax], al
add byte [rbx + 0x480], cl
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x40f7fdea], ecx
sbb dword [rax - 0x1bef4b40], ecx
sbb byte es:[rdx], bl
add byte [rax], al
cmp al, 8
add byte [rax], al
clc
add byte [rax], al
add rax, qword [r8]
cmp eax, 0xf4
