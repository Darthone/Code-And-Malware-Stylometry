call 0x402640
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x402458
add ebx, ebx
je 0x40240e
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x402446
cmp rbp, -4
ja 0x402446
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x40242e
add ecx, 4
mov dl, byte [rax]
je 0x402456
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x402446
ret
cld
pop r11
cmp r8b, 2
je 0x40246e
jmp 0x4024eb
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40247e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x402466
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x402496
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x402483
sub eax, 3
jb 0x4024b4
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x4024eb
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x4024db
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x4024d9
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x4024c8
cmp rbp, -0xd00
adc ecx, eax
call 0x40241a
jmp 0x40246e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x4025c4
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x402562
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x4025ae
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x402581
push 0x3a707474
jne 0x4025da
js 0x40259a
jae 0x4025d4
outsb dx, byte cs:[rsi]
je 0x402593
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x402601
jb 0x4025f3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x40261e
jb 0x402631
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x2183cc
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x2183cc
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x4024fc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x402627
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x4025d5
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f26cf
jb 0x4026e7
movsxd rbp, dword [rdi]
jae 0x4026e1
insb byte [rdi], dx
js 0x4026e7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x4026c7
cmp rsi, rcx
jae 0x4026cf
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x4026ae
cmp al, 0x8f
ja 0x4026ae
cmp byte [rsi - 2], 0xf
je 0x4026b4
sub al, 0xe8
jg 0x4026b1
push rdi
cmp al, 1
ja 0x40269c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40269f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x4026cc
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x402723
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c2ba1
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x402767
mov al, 0xa
jmp 0x402767
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x402743
inc ebx
mov al, 0
jmp 0x40276b
mov al, 2
jmp 0x40276b
mov al, 3
jmp 0x40276b
mov al, 0x3c
jmp 0x40276b
push rcx
rcr ah, 1
fstp st(7)
jle 0x4027ac
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x4027be
jg 0x4027b0
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a7f33
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x40280a
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb7987
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x402812
cmp esi, 0x21585055
jne 0x402816
jge 0x402808
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x40280b
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x40280f
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x4028bb
pop rcx
or al, 0x3b
jb 0x4028c1
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x402833
jmp 0x402835
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3662776
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf549be
in eax, dx
jg 0x40286d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4028b3
mov bh, 0x2a
add edi, 0x10
jmp 0x4028b0
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4028ed
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x402929
jne 0x402940
fstpnce st(6), st(0)
jle 0x402909
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40293f
jrcxz 0x402973
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1c8d7
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4029f2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4029b2
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58296f87
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x402a25
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x4029bf
and ecx, 7
or al, 0xeb
jae 0x402a2a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x402a5f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x402a9d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x402a56
push rax
call 0xffffffff868d2743
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x402a60
std
cmp edi, esi
xchg eax, edi
jle 0x402ab5
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c97041
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x402ab3
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x402aa1
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x402aca
js 0x402b0a
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x402b9c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad3dd7
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x402bbd
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x402bc2
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc22674
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x402b50
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
adc al, 0xd
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
and byte [rax], ah
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
call qword [rax]
jp 0x402bf1
add byte [rdx + 0x200001c], dl
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x402c76
je 0x402c7f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x402c48
mov dh, 0x7d
jbe 0x402c47
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
fcom dword [rsi + 0x21e40]
push rsp
add dword [rdi + rbp - 0x38], esi
adc ecx, eax
adc eax, dword [rax + rax]
cwde
add eax, 0x3f2d000
in al, 0x13
add byte [rax + 0x64000705], ah
or byte [rdi + 0x801cac0], bl
or dword [rax], eax
and byte [rcx], cl
and byte [r15], r11b
and byte [rdx], cl
add byte [rax + 0xb], ch
add byte [rax - 0x6ff06fd9], dl
or ecx, dword [rax + rax]
mov al, 0xd
add byte [rbx], dl
enter -0x37f9, 0x30
or eax, 0xf40000e
or esp, esp
add esp, esp
add ah, dl
push rdx
adc byte [rax], al
loopne 0x402c60
jb 0x402c0a
lock adc dword [rax], eax
sub byte [rbx + 0x4f], dl
adc bl, byte [rbx + 0x17]
stc
add esp, esp
adc eax, dword [rax]
xor al, 0x7f
adc al, 0
call 0x2bc8d2f
jns 0x402ca4
adc eax, 0x16f800
add byte [rsi - 0x7f837eca], cl
add byte [rax], cl
sbb byte [rdi - 0x80], al
sub eax, 0x198fc807
nop
cmp dword [rcx + rax*4], 0xd0001a7c
sbb eax, dword [rax]
loopne 0x402c59
ja 0x402d1c
sbb al, 0x13
add dword [rdi], edx
add al, 0
int1
dec dword [rip + 0xc3b1657]
sbb edi, dword [rdi + 0x32029719]
fcom dword [rax + 0x171b7034]
mov al, 0xd
leave
and byte [rbx + 0x2e], al
xor r11b, al
fldz
pop rdi
xor eax, 0x15f9310
push rbx
jb 0x402ca9
sub esp, dword [rcx]
jp 0x402d45
adc byte [rsi], cl
mov ebx, 0x86172212
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
sbb eax, 0x27ab0867
call 0xffffffffc9f09199
ja 0x402cdb
cwde
sbb edx, dword [rdx - 0x1516d03f]
sbb dword [rax + rcx*2 - 9], esp
lock or byte [rdx + 0x76], dh
nop
sar dword [rdi + 0x171749ff], -0x42
or dword [rdi], esp
add dword [rdi], eax
sbb byte [rip - 0x63939b69], dl
add dword [rdi + 0x21609f30], r14d
push rdx
outsd dx, dword [rsi]
in al, dx
mov bl, byte [rip + 0x7117b05e]
or dword [r11 + 0x57], r12d
outsd dx, dword [rsi]
xchg dword [rdi], ebp
adc al, 0x97
insb byte [rdi], dx
cdqe
cdqe
jg 0x402d12
fnstenv [r15 + r10*2 + 0x46]
out 0xb4, eax
out dx, eax
and dl, byte [rsi]
cmp cl, cl
cmp esp, dword [rsi]
js 0x402db0
add byte [rcx + 0xe], bl
in al, dx
out 1, eax
and byte [rsi - 0x1887343], bl
add dword [rbp + 0x470118e7], edi
adc al, 2
nop
mov bl, 0x27
sbb ebp, dword ss:[rdx]
xor eax, 0x72720c83
sub al, 0x4d
sbb ch, byte [rsi + 0x1a]
sbb al, 0x64
nop
xchg eax, ebx
sbb ebx, dword [rbx]
jnp 0x402daa
sbb bh, byte [rbx]
cmp eax, ecx
test dword [rax - 0x28d2bae8], ecx
mov ebx, 0xdf072790
add bh, byte [rdx + 0x2e]
neg dword [rdi - 0x80]
insb byte [rdi], dx
jo 0x402dcc
add al, 3
sub edx, dword [rdx]
in al, dx
adc byte [rsi], dh
add r9d, dword [rdi + 0x4f27412a]
jb 0x402e1a
je 0x402ddd
and byte [rax + 0x17], dl
in al, 0x20
xchg eax, esp
add ebx, esi
xor bh, byte [rsi + rcx + 0x384f272]
adc al, 0x2c
xor eax, 0x20e403eb
xchg rax, r10
adc qword [rsp + r8], r9
jb 0x402df0
movsxd rcx, dword cs:[rdi + 4]
sbb dword [rdi], esi
in al, 0x20
add al, 0xc2
jmp 0xfffffffff8578ef7
retf
mov gs, edi
enter 0x13c9, 0xe
add eax, 0x492da6af
fadd dword [rbp + 0x585393c]
jbe 0x402e6b
movsb byte [rdi], byte ptr [rsi]
in al, 0x20
xor cl, byte [r10 + r10*8]
stosb byte [rdi], al
xor cl, byte [rsi - 0x62]
sbb al, 0xe4
xor al, 0x12
xor ecx, dword [rdx + 0x4c]
fiadd word [rip + 0x50671072]
push 0x2720e417
cmp ecx, dword [rdi]
rcl byte [rdx + 2], 1
js 0x402e56
jb 0x402e46
mov esi, 0x6b00f3f
sub al, 0xf2
in al, 0x20
fiadd word ds:[rsi]
and dword [rdi + 0xe], ecx
jb 0x402ec5
sub eax, 0xd81f4607
test dword [rbx + rdi*2], edi
pop rbx
xor r13b, byte [rip + 0x738179b]
cmp edi, dword [rcx]
push rcx
sbb eax, 0x71e05a7
sbb esp, ebp
xchg eax, edx
sub ch, byte [rdi]
hlt
xchg eax, esp
cmp dl, dh
in al, 0x20
cmp byte [rbx], dh
or byte [rbx + 0x44], dl
xchg eax, ebx
sbb al, 0x76
outsd dx, dword [rsi]
out dx, eax
or byte [rdi + 0x5a], ah
xor byte [rcx], bh
jns 0x402f15
nop
push rdx
pushfq
or byte [rax - 0x6c6fb7db], ch
xlatb
or byte [rdi + 0xbc60e3b], cl
jns 0x402f29
sbb eax, 0x5b48ff09
or edi, ecx
jb 0x402eb2
in al, 5
mov cl, 9
sbb eax, 0x4f217b8c
iretd
or dword [rsi + 0x1f], edi
out dx, eax
or dword [rdi + 0x3c], esi
loope 0x402e5a
cmp al, 0x45
xor eax, 0x228c670a
xchg eax, edx
xchg eax, ebx
sbb dword [rbx + rcx - 0x6f31f597], -0x6d
sbb al, 0x97
or bl, byte [rdi + 0x71f3991]
cmp dword [rcx + 0x72], edi
or cl, dl
xor dword [rax], ebx
or esp, dword [rdi - 0x44]
nop
movabs al, byte [0x3b3c9c820f0b5c2e]
and al, 0x84
or edx, edi
mov bh, 0x41
push rbp
in al, 0x19
xchg dword [rbx], ecx
mov bh, 0xeb
push rax
or al, 0x27
mov ebp, 0xcb176790
xchg rax, r9
or al, 0x77
sub byte [rdx + 0x72], dh
nop
xchg eax, ebx
and dword [rcx - 0x3d], esp
or al, 0x75
pop rsi
enter 0x43b3, 8
or eax, 0x5b3b9dd7
or eax, 0x13c9e4f2
mov edx, 0x78011345
or eax, 0x79390727
or byte [rdx + 0x53], 0x96
or eax, 0xbb07279e
nop
sbb byte [rdx + 0x14473217], bh
add ecx, dword [rax]
int 0x20
mul byte [rax]
fild word [rip - 0x4fd0f61c]
sbb dword [rsi], ecx
int1
movabs rbx, 0x210c770e3f2f6790
jno 0x402fa3
iretd
jp 0x402f98
add byte [rcx], bh
mov ah, 0xe
fstp st(0), st(0)
and edi, ecx
js 0x402fa4
fmul qword [rsi]
inc ecx
mov esp, 0xefb78c0
xchg dword [rdi], ecx
sysret
cmp dword [rcx], edi
enter 0x5420, 0x2b
cmovp edi, dword [rcx]
jns 0x402f64
and dword [rdi + rcx + 0x57], eax
out 0x3b, al
and dl, byte [rax + 0x65072793]
seto byte [rbx]
mov r13d, 0x8e72790b
cmp dword [rdi + rdx + 0x3c85e93c], edi
pop qword [rbx - 0xf]
maxps xmm0, xmmword [rbp - 0x2986f4c0]
nop
adc byte [rdi], al
fimul word [rcx + rsi*4 + 0x2e]
in al, 0xd9
pop rsp
adc byte [rdi - 0x388de644], ah
jmp 0x403038
push rdi
push rdx
jns 0x40300c
push rsi
and dh, byte [rdi]
xchg dword [rax + rsi*4 + 0xb], esp
pop rdi
fst dword [rax]
in al, 0x60
or byte [rdi], dh
ja 0x402ff1
sbb al, 0xbd
nop
adc byte [rcx], dl
pop rdi
and bh, byte [rip + 0xe42113e]
jbe 0x402f82
movsxd r13, dword [r15]
or byte [rip - 0xb61bd10], ah
test byte [rcx], dl
int 0x46
ret 0x7211
nop
xchg eax, ebx
xlatb
and eax, dword ds:[rdx + rdx]
fmul dword [rbx]
jns 0x403090
sub eax, 0x76771247
lodsb al, byte [rsi]
mov word [rdx], ss
iretd
cmpsb byte [rsi], byte ptr [rdi]
mov r10b, 0x12
mov ah, byte [rcx]
cmc
adc bl, byte [rsi - 0x406c6de3]
pop rcx
adc r10d, dword [rdi]
ja 0x403092
test dword [rsp], ebx
jg 0x403090
js 0x40306f
iretd
loopne 0x40300e
adc ebp, dword [rdi]
add al, 0x33
xor dword [rbx], ebx
and ecx, eax
mov bl, 0xe7
xchg eax, ebx
push rdi
or al, 0x14
and byte [rbp + 0x32532790], bh
pop rbx
adc al, 0xbf
pop rsi
enter 0x5eb3, 0x7f
adc al, 0xaf
sti
scasb al, byte [rdi]
adc al, 0x72
mov al, 0xb
test byte [rdi + 0x1ba05fcf], cl
and al, 0x83
or al, 0x72
call 0x34088eee
cmp byte [rcx], al
adc eax, 0x2f22002f
adc eax, 0x33c9c839
out 0x30, eax
cmp byte [rbx], dh
insb byte [rdi], dx
adc eax, 0x3c9c8390
in eax, 0x4b
pop rax
cwde
adc eax, 0x2f49e486
xlatb
adc eax, 0x1638cc17
xor dword [rbp + 0x48], 0x41828fce
mul eax
nop
or al, 0x76
pop rsi
imul edx, dword [rsi], -0x62
jne 0x40310a
push rdi
mov r8b, 0x16
movabs al, byte [0x3716ef42f09e423a]
movsb byte [rdi], byte ptr [rsi]
mov word [rbx + 0x36], es
in al, dx
push qword [rdi + 0x5f]
or al, 0x17
xor cl, al
or esp, dword [rsi]
sbb al, 0x12
js 0x403109
jmp 0x403124
pop rsi
enter 0x793, -0x36
sbb al, 0xaf
add byte [rbp - 0x1cb793e4], 0x17
xor ah, byte [rip - 0x16c37a16]
sbb byte [rdi - 0x5f], dh
push rbp
sbb byte [rax], dl
jp 0x403131
sbb byte [rsi + 0x18], dh
pop rax
xchg eax, ebp
sbb bh, al
retf -0x36a1
sbb dword [rdi], ebp
in al, 0x4c
and edi, ebp
sbb bh, cl
sub byte [rsi], 0xe4
adc ecx, dword [rsi]
add dword [rcx], ebx
or al, 0x40
sbb dword [rsi + rbx*2 - 0x4f98ec38], ecx
cmp dword [rsi], esi
sbb dword [rdi - 0x1b789870], ebp
sbb al, 0x57
sbb dword [rdi + 0x1781416c], esp
sbb byte [rsi + rsi*2 + 0x19928f19], bh
mov bl, 0x21
cmp dword [rax - 0xad07051], esp
xor dh, ah
lock and byte [rdx + rbx], dh
int1
sahf
xchg eax, edi
cmp eax, 0x83571a64
sahf
mov esp, 0x1ac14c90
cmpsb byte [rsi], byte ptr [rdi]
xor edx, esi
sahf
hlt
add eax, 0x24b2471b
xor ebx, dword [rbx]
add eax, 0xc8790baf
xor al, 0x5e
push rdx
xchg eax, edi
test dword [rdi + rax*4], 0x44d61b6d
jbe 0x4031bb
sbb bh, byte [rbx]
jne 0x403216
jb 0x403132
jmp 0xffffffffefa94c3c
jns 0x4031cb
adc byte [rdx + rbp*8], bl
xor byte [rbx + rdx*4], bl
sbb dword [rsp + rdi + 0x682933b2], 0x1c
enter 0x5e33, -0x38
xor qword [r11 + 0x411cb71c], r12
jb 0x4031ba
movsb byte [rdi], byte ptr [rsi]
pop rsi
xlatb
sbb al, 0xf
pop rdi
jnp 0x4031f3
cmp eax, 0x6b2bd61d
sbb eax, 0x85e33977
cmp al, 0xc4
sbb eax, 0xc9e456cf
movzx ebx, word [rip + 0x17741c1c]
sbb byte [rdi], ch
in eax, 0x1d
ud0
adc dl, dh
lodsb al, byte [rsi]
push rdi
outsd dx, dword [rsi]
or al, 0x1e
ret 0x5e43
enter 0x17b3, 0x2b
out dx, eax
sub byte [rbx - 0x6b], cl
xchg esp, esp
or al, 0x47
xchg eax, esi
mov ecx, 0xc0236f1e
or edi, dword [rcx - 0x52]
add al, 0x1f
fbstp tbyte [rax + rdx*4]
pushfq
nop
xor bl, byte [rdi]
and ebp, dword ds:[rsi]
in al, 9
mov ebp, 0x4cbf1f77
xchg rax, r13
leave
rcl dword [rdi], 0x2d
mov bh, 0xeb
pop rax
mov ebp, 0x77202b40
imul eax, dword [rdx], -0x64
rol byte [rax + 0x208b5720], 7
test dword [rcx + rbp*8], edi
add al, 0xc3
and byte [rdi - 0x43e6c726], ah
loopne 0x403257
and byte [rdi + 6], ch
and dword [rdi - 0x62], esi
sbb al, 0xe4
in al, 0xf6
xor byte [rcx + 0x37], bl
and dword [rdx + 0x25], ecx
enter 0x4e41, 0x5e
outsb dx, byte [rsi]
and dword [rdi - 0x7fbf6262], eax
and dword [rdi - 0x4b], ecx
and dword [rdi + 0x76], esi
and esi, edx
lodsb al, byte [rsi]
and dh, byte [rdi]
cmp eax, 0xe40bc18
jb 0x40329b
sbb ah, byte [rdx]
cmp dword [rdx], esp
or dword [rdi], ebp
in al, 0x49
pop rsp
sbb dword [rdx + 0x22], edx
xchg eax, edi
in al, 0x49
in al, 0x45
cwde
and ch, bh
xchg eax, ecx
movabs r13, 0xf530ac22c32f2790
and ah, ah
in al, dx
nop
pushfq
mov edi, 0x47231562
mov esp, 0x40876790
and esi, dword [rdi + 0x26]
je 0x4032ea
mov word [rdi], ss
or byte [rdi - 0x5f90dc6b], dh
sahf
cmp al, 0xa9
mov cl, 0x23
push rdi
mov byte [rcx], ch
add bh, byte [rax]
and al, 0x27
and edi, dword [rsi + 3]
and al, 0x81
ror byte [rcx], 0x84
push rdi
and al, 0x24
jmp 0x403274
cmp al, 0x7b
pop rsi
and al, 0x77
xchg eax, edi
movabs byte ss:[0x390e3c85e4f07f24], al
and al, 0xfa
or esp, r12d
and byte [rdi], ah
dec dword [rbx + 5]
and eax, 0xc0639193
adc eax, 0x1eed8725
sub eax, dword [rbx + 0x2bc8c85d]
and eax, 0x8175aa5
add al, 0x12
mov esp, 0x25a84f90
mov edi, 0xe21190bb
and eax, 0x8ff3e4b7
jp 0x403355
out dx, al
adc byte es:[rsi], ah
pop rdi
jb 0x40337e
sahf
je 0x403387
push rbx
push rcx
cmp al, 0x12
call 0x1157cc39
add bl, byte [rdx]
cmpsd dword [rsi], dword ptr [rdi]
movsb byte [rdi], byte ptr [rsi]
cmp al, 0xe3
add al, 0x42
mov bh, 0xcc
cmovge ebp, dword es:[rdi]
mov esp, 0x1b85e040
lahf
cmp esp, dword [rdi]
mov edx, 0x6f423909
idiv dword [rdi]
xchg eax, esi
adc dword [rdx - 0x1c], esi
cld
and eax, 0x10e76092
add dword [rbp + 0x9d19c27], ebp
cmp eax, esi
xor eax, esi
out 0x27, al
wait
in eax, dx
nop
sub bh, dl
adc dh, byte [rsi]
leave
leave
xchg eax, ebx
or byte [rsi], ch
sub al, bl
cmp ebp, dword [rax]
add al, 0x87
in al, 0xa4
out 0xfe, eax
outsb dx, byte [rsi]
sub al, cl
xor edi, dword [rdx]
sub edi, 0x2c1f288e
push rax
or ebx, dword [rcx]
or dword [rsi - 0x14], ebx
sub byte [rdi - 0x6e], al
lodsb al, byte [rsi]
jb 0x403378
pop rbp
sub edi, ebx
push rsp
stosd dword [rdi], eax
sub dword [rdi - 0x37], ecx
mov bl, 0x17
movabs byte [0x3c211e5ad729d021], al
cmp eax, ecx
and cl, ch
sub dword [rax + 0x52], esp
scasd eax, dword [rdi]
js 0x4033f5
js 0x4033d0
sub dword [rdi], eax
sub dword [rsi], edx
sub dl, byte [rbx]
jp 0x403401
iretd
mov bh, 0xe7
jl 0x403410
mov ebp, 0x3ec85e40
and eax, 0x2ae42ab0
xor ecx, 0xbaef9e42
sub edx, dword [rdi + 0x5e]
enter 0x7893, 0x74
sub eax, dword [rdi]
cmp al, 0xa1
sub ecx, edi
pop rsi
enter 0x2733, -0x70
fild qword [rbx]
ja 0x40344d
and al, 0xc8
xchg eax, ebx
jp 0x403437
add ebp, dword [rdi]
pop r14
enter 0x5eb3, 0x20
sub al, 0xf7
sbb al, byte [rsp + r13 - 0x27]
or ebx, dword [rcx]
sub edi, ebx
out dx, eax
mov edx, 0x52058f2c
in al, 0x4f
xor eax, 0xe89f2cf2
test dword [rcx], edi
sub eax, 0x2e31804f
sub eax, 0xc0bc49c9
sub eax, 0xf21792df
sub al, 0xe
sub eax, 0xc11cd8b7
popfq
movabs al, byte [0x87585eaf2dcebf2d]
pop rbp
jrcxz 0x4034ac
sbb edi, ebx
adc dword [rsi], ebp
or dword [rdx + rdx*4], ebx
xchg eax, ebx
pop qword [rcx + rdi + 0x1581872e]
in al, 0x48
push rdx
js 0x4034a8
iretd
ret 0x8c09
cmp byte [rdx + 0x2ed22f2e], ch
scasd eax, dword [rdi]
jns 0x40344d
or edi, dword [rcx - 0xc]
cmp al, 0x2f
mov bh, 0x98
and bh, byte [rdx - 0x7f]
or esi, dword [rbx + 0x2f]
test eax, 0x921c672f
xchg eax, ebx
push rdi
lodsd eax, dword [rsi]
out 0x7a, eax
enter 0x3a33, 0x24
cmp al, 0x3a
push rdi
mov ecx, 0x1330035e
pavgb mm0, qword [rbp + 0x2f30833c]
adc al, 0x27
cmp dword [rax], esi
js 0x4034e3
out 0xfb, eax
xor al, 0x7d
xor byte [rdi], bl
pop rcx
xchg eax, edx
xchg eax, ebx
js 0x4034f0
test eax, 0xe026730
leave
or dword [rip - 0x6528cf29], ebx
sti
xor cl, cl
sbb dword [rdi], ebp
adc byte [rdi + 0x48cf3117], ch
repne movsb byte [rdi], byte ptr [rsi]
cmp esi, dword [rcx]
cmp rax, -0x3f63e97f
mov dh, byte [rcx]
mov ch, 0x31
test eax, 0xf404e811
xor dword [rdi], edx
xor eax, dword [rdi + 0x284ea4e4]
xor cl, bh
sti
test dword [rdx], esi
cmp al, 0xe9
add eax, 0x32a24756
xchg eax, ecx
test dword [rax - 0x28], esi
test ebx, ebp
movsb byte [rdi], byte ptr [rsi]
in al, 0x5c
xor edi, dword [rbx + rdi - 0x3770cc77]
mov bl, 0x17
xchg byte [rbp*4 + 0x3ca58f33], bl
pop rsi
enter 0x5e13, -8
xor edi, dword [rdi + 0x25]
xor al, 0x9c
or ebp, dword [rdi + rax*4]
push rax
xor al, 0xbf
and dword [rdi - 0x20], ecx
nop
xor byte [rdi + rsi*4], 0xcd
in al, 0x64
add al, 0x7a
mov esi, 0xe487734
xor edx, esp
add al, 0xf2
int1
xor al, 0x1f
xor eax, 0xc9e409bf
enter 0x1f18, 0x2e
xor eax, 0x9c90e035
push rdx
xor eax, 0x35a8d537
in al, 0xc9
enter -0x504f, -0x3e
adc al, 0xd4
xor eax, 0x9d2790b
in eax, dx
xor eax, 0x9245447
in al, 0xd9
adc dh, byte [rsi]
mov edi, 0x365725f0
enter 0x2ec1, -0x1c
movsxd rdi, dword [rax]
xchg eax, edi
fdivr dword [rdx]
push rdx
adc byte [rsi - 0x23], bl
xchg eax, edi
add dword [rdi], esi
xchg edi, eax
mov al, byte [rbx + 0x72]
movabs dword [0x38b3c8291c273757], eax
and dword [rax + 0x3c08cf37], eax
pop rsi
enter 0x5e33, -0x6a
cmp eax, 0xd537e24c
or ebx, dword [rcx]
mov edx, dword [rdi]
mov eax, 0x8c64383b
js 0x403554
out dx, eax
imul edi, dword [rax], 0x790b04ef
push rdx
xchg eax, ebp
cmp byte [rdi], ah
sub byte [rsi], ah
in al, 0xd9
out 0x38, al
out dx, eax
xchg byte [rdx], bl
xor al, 0x39
scasd eax, dword [rdi]
mov ebp, 0x5405eac0
cmp edi, ebp
js 0x40362f
enter 0x5eb3, 0x20
mov edi, 0xa0670193
xchg eax, ebx
mov esp, 0x8f5d8390
pop rdi
push rsi
and bh, cl
cmp dword [rax - 0x20], eax
add al, 0x12
adc edi, dword [rdx]
mov bh, 0x17
xor dl, byte [rsi]
mov ebp, 0xca73a41
test byte [rdi], ah
pushfq
test al, 0x3a
mov ecx, 0x176ff73a
movabs rsp, 0x85ea161f3af93a90
cmp al, 0xab
cmp edi, dword [rdi + 0x3b472df0]
nop
mov ebp, 0x3b602fc0
xor r15d, dword [r9 + r12*8]
add al, 6
mov ebp, 0xa7673b8e
cmp esi, dword [rdi]
or edi, dword [rcx - 0xa]
add al, bl
cmp edx, edi
cli
and al, 0x81
adc eax, 0x2ff6b087
sbb al, 0x3c
iretd
sbb al, 0x92
adc edi, dword [rdx]
cmp al, 0x47
adc dh, byte [rcx - 0x6f42edc4]
xchg byte [rcx - 0x11], al
cmp al, 0x9f
xor al, ch
add al, 0x21
cmp eax, 0x23d3e07
cmp eax, dword [rcx + 0x3d70bf45]
cmpsd dword [rsi], dword ptr [rdi]
pop rsi
enter -0xea8, -0x78
cmp eax, 0x3db4730f
and al, 0x37
cmp ah, bl
cmp eax, 0xc09c2790
adc dword [rsi], edi
fst qword [rax + 0xe]
leave
movabs r12, 0x902f3e6a201f013e
sbb dl, al
jg 0x403671
ror dword ds:[rbx], 0x79
add cl, bh
or byte ds:[rdi], bh
sbb dword [rax + rdx*4 + 0x4cb49763], 0x72323f54
or al, 0x3a
jl 0x40370a
fistp word [rbp + 0x3c]
nop
mov word [rdi + rdi], cs
xor al, byte [rax + 0x42]
jbe 0x40365b
and dword [rdi], edx
xchg eax, ebx
test esp, edi
call 0xfffffffffad7c5b7
shr byte [rcx], 0x79
loop 0x403670
fistp word [rdx]
mov eax, dword [rax + 0x46]
in al, 8
movsb byte [rdi], byte ptr [rsi]
retf
mov ebp, 0xef05ea40
push rdi
adc al, 0x41
sahf
out dx, eax
sbb byte cs:[rip - 0xbf798bf], bl
ret 0x708
adc byte [rbx], 0x4b
xchg eax, r15d
mov esi, 0xf427243a
mov eax, dword [rcx + 0x77]
cmp cl, dl
pushfq
ror byte [rcx], 1
movsb byte [rdi], byte ptr [rsi]
cmpsd dword [rsi], dword ptr [rdi]
or al, byte [rbp + 0x2f90e33c]
out 5, eax
push rcx
mov esp, 0x5aea3190
outsd dx, dword [rsi]
and dword [rax - 0x6f437ebe], 0x67
iretd
mov fs, word [rax]
rol byte [rdx - 0x7f], cl
mov ebp, 0x42e57ac0
and eax, 0xf6792f43
add bh, byte [rbx + 0x3d]
out dx, eax
jge 0x4037a3
cmpsd dword [rsi], dword ptr [rdi]
jb 0x403716
or edi, dword [rax - 0x1caf53e9]
hlt
mov byte [rax + 0x1259ff43], 0x44
in al, 0x18
mov dword [rax], 0x4433223d
xchg eax, ecx
loop 0x403787
add dword [rdi], esp
xor al, ah
push 0x449e0f44
enter -0x6e6d, 0x63
outsd dx, dword [rsi]
fdiv qword [rbx]
in al, dx
mov dword [rax + rcx*2 - 0x32], 0xafcc85e
mov byte [rax + 0x3970817a], dh
imul eax, dword [ebp - 0x41], 0x38
adc dword [rcx], 0x2f458f2f
mov byte [rbp - 0x2a], 0xb
sbb dword [rbx], eax
pop rdi
in al, 0x45
add ah, byte [rbx + 0x3d847243]
int1
sahf
xchg eax, esp
cmp eax, 0x846446ac
jp 0x403756
push rdi
int 0x46
neg byte [rax]
insb byte [rdi], dx
or byte [rdi + 0x77], al
adc dl, byte [rsi]
outsd dx, dword [rsi]
and cl, sil
leave
adc byte [rbx], 0x18
jo 0x4037fd
add dword [r8], 0x7907409c
bswap r8d
leave
xchg eax, ebx
cmp ah, byte [rcx + 0x3f67ff47]
sbb ebp, dword [rdi + 9]
jns 0x40387c
or dword ss:[rbx + 0x72], esp
je 0x4037f1
retf -1
jae 0x40388b
jne 0x40387f
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
sub byte [rbp + 0x72], ah
mov ebp, 0x69b5bffb
sbb al, byte [rsi]
pop rdi
je 0x4038a3
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40385f
outsd dx, dword fs:[rsi]
pop rdi
sti
in eax, dx
mov edi, 0x61620bbd
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4038af
jne 0x4038cb
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4038c4
sub ebx, ebx
pop rdi
jg 0x4038c3
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0x7208
mov bh, 0x5b
test eax, 0x796172ff
pop rdi
outsb dx, byte gs:[rsi]
je 0x4038ea
jns 0x4037fb
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
mov al, 0x6e
rcr ah, 0x6d
jns 0x4038b9
or eax, 0x2a74295f
sti
push qword [rsi - 0x65]
movsxd rbx, dword [rax + rsi*2 + 0x535a2470]
je 0x4038e5
xor dword [rcx], edi
jo 0x403906
movsxd rsp, dword gs:[rbp + 0x77]
cdq
popfq
jge 0x403880
pop rdx
sub eax, 0x729f6e77
jne 0x403910
je 0x4038c9
cmp byte [rdi + 0x45bbd836], dh
imul ebp, dword [rdi + 0x3b], 0x847f3329
movsxd rsp, dword [rcx - 0x49]
std
lodsb al, byte [rsi]
jae 0x403844
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0x5b0c650f
imul edi, dword [rbx + 0x2a334c6d], 0x66
xor al, 0x31
and eax, 0xb7735b69
mov cl, 0x63
ja 0x40394c
xor al, 0x69
jp 0x4038f4
pop rdx
xor al, 0x6e
mov edi, 0x64b6cdfd
nop
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
jg 0x403965
clc
mov ebx, 0x6275324c
pop rdi
pop r15
insd dword [rdi], dx
and dword fs:[rbp + 0x4d415246], edi
pop r15
adc ebx, edx
or r8b, byte [rbp + 0xb]
push rbp
xchg eax, ebx
cmp eax, 0x482048d8
push rdx
push rbx
mov r8b, 9
jnp 0x4038f0
push 0x4c424154
sub r12b, r14b
adc byte fs:[rbx - 0x6048a235], bh
jb 0x4039a8
pop rcx
mov r12b, 0x4e
push rbx
in eax, dx
jbe 0x4038d2
int 0x36
jbe 0x40395d
fisttp qword [rcx + 0x64]
or eax, 0xb29b4564
out dx, eax
mov edi, 0x45324300
push rdx
push r11
xor bl, byte [rdi + 0x20]
xor dword [rax], ebx
clc
in eax, dx
insd dword [rdi], dx
xor r13b, byte [r8 + 0x13]
imul ebx, dword [rdi + 0x6c], 0x61
insd dword [rdi], dx
push rax
movsxd rdi, dword [r15 + 0x13476835]
xor esp, dword [rbx + 0x69]
xchg rax, rbp
pop r8
pop rax
sub eax, 0x5ff7b29f
xor ebp, dword [rsi]
xor al, 0x3e
pop rsp
xor dword [r13 + 0x6d], eax
ret 0x3b63
fistp dword [rdi + 0x30]
pop rdi
and byte [rcx], dh
or byte [rcx + 0x1d], cl
out 0xad, al
pop rbp
jo 0x403931
mov cl, byte [rsi + rbp*2 - 0x4acd9093]
mov cl, 0x6f
push qword [rbp + 0x12]
push rax
js 0x403a02
xor al, 0x45
pop rdi
push rbx
and ah, byte [rbx + rbx*8 + 0x58]
mov al, 0x45
cwde
test eax, 0x5e120c76
mov edx, 0x325243c9
pop rdi
jne 0x403a48
xchg byte [rdx - 0x14], bl
xchg byte [rsi + 0x50], al
loop 0x403a52
jns 0x403a2d
pop r15
shl byte [rsi - 0x3d], 0x1b
adc al, 0x71
mov dil, 0x6d
fcmovnu st(0), st(2)
push rbx
and al, 0x29
push rsp
push r12
je 0x403a30
add dh, byte [rip + 0x361f7d5f]
loopne 0x403a1a
outsd dx, dword [rsi]
jns 0x40399b
jbe 0x4039d9
and al, byte [rbx]
sbb dh, byte [rcx]
mov byte [rcx], dh
jp 0x403a87
push 0x6c3da142
and al, 0x77
sbb al, 0x67
or dword [rcx + rdi*2 - 0x4bcfb502], eax
push rbx
and ebx, dword [rdx]
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x403a6f
outsb dx, byte fs:[rsi]
sbb ebp, dword [rbp - 0x36]
cmp dword [rdi], edi
pop rdx
jne 0x4039d0
js 0x403aaf
sbb dword ss:[rbp + 0x462a97d4], ebp
jl 0x403a89
je 0x403a52
in al, dx
xor al, bl
cmp byte [0x3086eb75], cl
loope 0x403a1e
mov ss, word [rsi + 0x61]
pop ax
and dword [rax + rbx], ebx
jg 0x403a97
sbb ebx, ecx
jo 0x403acd
add eax, 0x7347e6ba
mov eax, ss
js 0x403ae1
sub eax, 0x4077bc4d
cwde
mov cl, 0x25
stc
insd dword [rdi], dx
adc eax, 0x45816c35
cmp byte [rdi + rbx*4], dh
xchg eax, edi
mov cl, ch
jo 0x403aef
mov dh, 0x59
test dword [rbx + 0x4e], edi
ja 0x403afb
mov eax, 0x9f5d4ad2
fst st(6)
imul esi, dword cs:[rax], 0x74793642
sbb byte [rdx + 0x63], ch
rol byte [rsi], 0xe3
jae 0x403aea
xor byte [rdx + 0x55844952], dl
or byte [rbx + 0x6af96d7c], bl
int3
mov ah, 0xd
test byte [rdi - 0x31], bl
insd dword [rdi], dx
imul edx, eax, 0xbd94c30c
js 0x403a73
add byte [r8], r11b
xchg eax, ecx
or al, 0x76
cmp dword [rbx + 0x42], eax
pop rdi
jne 0x403afd
xor al, 0x5d
imul ebp, dword [rbp + 0x77519ea5], 0x30
xor eax, 0x92c1b29f
push rax
pop rax
insd dword [rdi], dx
push rbx
xor al, 0x5f
leave
add eax, 0x5d6e30f7
xchg eax, esi
push rsp
xor dword [rbx + 0x1516c981], edx
imul esi, dword [rdx], 0xc256153
and al, 0x4f
cwde
jmp 0xffffffff9e5269d4
push rsp
cmp ch, bh
js 0x403b22
loope 0x403b36
push rdi
cmp dword [rbp + 0x16c64b4c], 0x4c46584e
xor esi, dword [rdi - 0x3873da8c]
xor ch, byte [rbp + rax - 0x3dbd6235]
lodsb al, byte [rsi]
ficomp word [rax + rcx*8]
mov bl, 0x40
test eax, 0x5f192a56
xchg eax, esi
push 5
jnp 0x403bad
cld
imul esi, edx, 0xd2ed810d
and qword [rdi + 0x69], rdx
movsxd r14, dword [r15]
mov ch, 0x48
mov al, byte [rcx + 9]
xor dword [rsi], eax
insd dword [rdi], dx
test dl, bl
cmp ebx, dword [rbx]
test dword [rcx + 0x3fd15c12], edx
xchg eax, esp
add cl, byte ds:[rcx]
jae 0x403bd1
jo 0x403ba3
or al, byte [rax + rdx*8 + 0x3561ad6c]
fnstenv [rax - 0x39b4f7ec]
xchg dword [rax + rcx*8 + 0x658c0818], edi
stc
xchg eax, esi
or eax, 0x37852409
int 0x38
adc dword [rsi + rdx], eax
sahf
int1
add al, 0xb0
and eax, edx
pop rsi
sub cl, byte fs:[rcx - 0x70]
sbb byte [rbx], bh
cmp esi, dword [rsi]
xchg eax, esi
jge 0x403b7c
pop rbp
lahf
xor byte [rax - 0x7a], dl
jno 0x403c03
pop rsi
sbb dword [rax + rsi*2 + 0x4f], eax
xor al, 0x35
add rsi, r14
js 0x403be1
xor ebp, esp
and eax, 0x6852dcd0
sub eax, dword [rdi]
xor dword [rax], edi
rcl dword [rdx - 0x665ee6de], -0x3f
adc ah, byte [rbx - 0x21]
jrcxz 0x403b67
xchg byte [rsi + 0x34], ch
push rdx
sub ch, byte [rcx + 0x4504e915]
push r10
mov esi, 0xc5db5a73
in ax, dx
outsb dx, byte [rsi]
movsxd rbp, dword [rip - 0x1a42da88]
add eax, 0x7079740d
jmp 0xffffffff91adf1f5
js 0x403c50
insb byte [rdi], dx
movsxd rbp, dword es:[rbp - 0x6e]
xchg eax, esi
call 0x61b76d61
mov dh, 0x63
xor al, 0x18
or al, 0xd
cmpsd dword [rsi], dword ptr [rdi]
push rdx
out dx, al
imul ecx, dword [rdx], 0x706b9e44
or edx, dword [rbp*2 + 0x75452679]
sbb bl, byte [rbx - 0x77]
mov dh, 0xd4
add al, 0x94
jo 0x403c2f
cdq
and dword [rdi - 0x4f], ebp
add byte cs:[rdx], dl
pushfq
jae 0x403c20
jbe 0x403c59
sbb dword [rcx + 0x66379393], esp
movsb byte [rdi], byte ptr [rsi]
add al, 0x77
fistp dword [rcx]
ja 0x403bc2
cmpsb byte fs:[rsi], byte ptr [rdi]
jl 0x403c9a
adc eax, 0x1ac5ac2a
xchg eax, ecx
lea eax, [rax + 0xa]
sbb edi, dword [rbp + rdx + 0x53862748]
mov eax, 0xb24323c6
cmpsd dword [rsi], dword ptr [rdi]
fisttp word [rcx + 0x31]
lea rbp, [r14]
adc byte [rbx], dh
or ecx, dword [rsi]
movsb byte [edi], byte ptr [esi]
fistp dword [rcx]
mov ch, 0x72
xor al, 0x1d
or eax, 0x9016249
add al, 0x82
in eax, 0xee
adc ebx, dword [eip - 0x3dce3b88]
lodsb al, byte [rsi]
pop rcx
cmp dword [rbx - 0x74fc733d], ebp
test byte [rsi], ah
sub byte [rbp - 0x746f836f], ah
mov cl, byte [rax + 0x6c]
lea esp, [rbp + 0x556c9966]
stc
xor dword [rax], ecx
sbb eax, 0x38321b2c
sbb esp, dword [rsi]
insd dword [rdi], dx
and dword [rcx + rdi*4], 7
sub byte [rdi + 0x66], 0xd5
movsb byte [rdi], byte ptr [rsi]
sub dword [rax + 0x6434239c], esi
pop rdx
mov dh, 0x9d
add dword [rbp - 0x66], eax
sbb eax, 0x1966b0e3
ret 0x5f35
push rbx
cmp dword [rdx], eax
and dword [rip - 0x35928f69], 0xffffff81
xor r11b, byte [r8 + 0x50]
loopne 0x403cc3
sbb byte [rax + rax*8 + 0x2b162b35], al
sbb esp, dword [rsi + rbx]
fld dword [rbx + 0x472ba302]
xor ecx, dword [rcx + 0x6d]
jo 0x403c7f
add ah, byte [rbx + 0x16]
jo 0x403d3b
popfq
retf -0xdcf
xor dword [rdx + 0x43b5a8c0], esp
xor eax, 0x14e4962
mov word [rip + 0x6d424b23], fs
int 0x2d
mov esp, dword [rdi]
cmp esi, dword [rsi]
fsubr qword [rsi - 0x60]
int1
stosd dword [rdi], eax
pop rcx
push rdi
cmpsb byte [rsi], byte ptr [rdi]
jbe 0x403d0d
add dword [rbp + 0x43ed13c2], 0x6c
jno 0x403d92
jae 0x403d9f
nop
or eax, 0x4a252b4c
xor byte [rcx], bl
test byte [rdx + 0x38], al
xor byte [rbp + 0x2c1958d5], ch
sbb dword [rcx + 0x29084b63], 0x3c1d9610
leave
and eax, 0x26311f35
loopne 0x403d4e
loop 0x403dae
insb byte [rdi], dx
push rax
jbe 0x403dab
movabs eax, dword [0xd994903396425700]
test byte [rip + 0x1989cfc2], al
add dword [rsi + 0x42], ebx
outsb dx, byte [rsi]
cmp dword [rsi + 0x2194700d], ecx
xor eax, 0x5591c7fc
jp 0x403d7a
mov al, 0x5f
and eax, 0x94890aa3
cmp al, 0x64
insd dword [rdi], dx
mov byte fs:[rsi + 0xa], ah
mov dword [rcx - 0x7c], ebx
mov byte [rcx], dh
or esp, dword [rax - 0x24]
shl dword [rsp + 0x35], 0x73
outsd dx, dword [rsi]
sub ch, byte [rip - 0x54ca6fe6]
push rdx
sar byte [rsp + rbp*4], 0x30
cwde
mov al, 0x9f
add al, 1
adc al, byte [rdx]
cdq
mov dl, 0x78
scasq rax, qword [rdi]
or dword [rsi + rbp*8 + 0x38], edi
mov edx, 0x367c0165
ror byte [rip - 0x1b2bfc7b], 0xe0
jp 0x403de2
and al, 0xb8
xor edi, dword cs:[rsi]
xchg eax, esi
pop rax
lea edx, [rdx + 0x58c7bd6b]
nop
outsb dx, byte [rsi]
cmp byte [rbx + 0x4934f973], ah
insb byte [rdi], dx
cmp al, 0xc
mov dh, 0x11
push rbx
jmp 0x27659e2d
mov ah, 0xde
add al, byte [rdx + rbx*2]
and eax, 0xd613e881
and ah, byte [rsp + rcx*4]
call qword [rax + 3]
and dword [rip - 0x39a63b93], esi
jo 0x403e22
adc eax, 0xd75bdb08
jbe 0x403def
jae 0x403e81
mov dh, 0x5f
ja 0x403db8
push 0x45166463
sbb al, byte [rbp + rbp*4 - 0x4b999d5c]
or ah, byte [rcx + rax*2]
imul r11, rdx, -0x54
pop rcx
xchg rax, r9
insd dword [rdi], dx
fistp qword [rbx]
or al, 0xb6
ud2
loopne 0x403e8b
xor ch, byte [rsi]
add dword [rip + 0x6428c4b4], esi
or byte [rax + 0x61], bh
sbb byte [rsp + 0x10], 0x64
cli
push rsi
adc dword [rax - 0x4f9e87d5], -0x40
push 0x44
fidiv word [rsi + 0x124b204d]
xor al, 0x5f
push r8
pop rdx
xlatb
jae 0x403ea9
insd dword [rdi], dx
pop rax
pop rbx
xchg eax, esi
xor al, 0x2a
add edx, dword [rdi]
and edx, esi
adc al, 0xc4
enter 0x5604, 0x67
xor dword [rdx + 0x68b11131], ecx
pop rax
mov byte [rsi - 0x1f], dh
sub dword [rbx + 0x32], ecx
test ecx, edi
xor dword [rip + 0x10e2302c], ebx
push rbx
shl dword [rbx], cl
lodsb al, byte [rsi]
or ch, dl
pop rcx
test byte [rbx], bl
or ah, byte [rbx + 0x46311678]
push rdi
test byte [rdx + rdi*8], ah
pop rdi
xor dword [rbx], esp
fcom dword [rsi]
mov ebx, dword [rsp + rbx + 0x32]
in eax, dx
sbb al, byte [rdi + 0x4d5c1408]
ficom dword [r10 - 0x80]
nop
and al, byte [rcx + 0xb077a31]
int3
fmul dword [rbx - 0x58]
cmp dword [rdi], eax
xchg eax, edx
or byte [rcx - 0x50], bl
push rsp
jo 0x403ec4
push -0x7bdfa5d0
fstpnce st(1), st(0)
sub byte [rcx + 0x415a1197], al
add al, 0x12
cmpsq qword [rsi], qword ptr [rdi]
mov ebx, 0x1072c81b
nop
sar dword [rcx - 0x5f5ec994], 0x43
pop rcx
lodsd eax, dword [rsi]
wait
xor ch, byte [rdi + 0x78]
xchg eax, esi
xor byte [rsi + 0x77], ch
insd dword [rdi], dx
sbb eax, ecx
mov byte [rsi], dl
sub ebx, esi
js 0x403ebb
loop 0x403f06
sub esi, dword [rbp - 0x11]
and al, 0xb9
xchg eax, esi
sbb ebx, dword [rsi - 0x3ff9fbd6]
cli
in al, dx
stosd dword [rdi], eax
adc dl, ah
push rcx
sub byte [rdx + 3], ch
mov dword [rcx + 8], edx
stosd dword [rdi], eax
jno 0x403f6b
pushfq
xor edx, dword [rbx]
sub al, 0x22
sbb eax, esi
xor eax, ebx
and al, 0xb1
xchg eax, edx
test eax, 0xe2796649
movsd dword [rdi], dword ptr [rsi]
sub al, 0x32
js 0x403f5f
in al, 0
mov dword [rdi], ebp
jb 0x403f9d
ret 0xa044
and eax, 0x6436011f
or ebx, dword gs:[rcx + 0x1f784a40]
xchg eax, ebp
pop rdx
nop
sar dword [rdi + 0x70], 1
sbb ebp, dword [rdx + 0x4b]
or al, 0x43
pop rdi
push rsp
pop rax
and dword [rax + rbp*8 + 0x62], ecx
insb byte [rdi], dx
xor eax, 0x5804ccb
push rbx
push rdx
movsxd rdx, dword [rsi + 6]
sbb dword [rax + 0x3b], esi
xlatb
sub ah, byte [rbx - 0x76]
or al, 0x36
push rax
adc byte [rax - 0x38], ah
pop rbx
adc ch, byte [rax + 0x25]
push rax
fmulp st(1)
lodsd eax, dword [rsi]
lea eax, [rax + 0x21]
enter 0x241, 0x3f
in al, 0xc
int3
xor eax, 0x611c533
or eax, dword [rbx]
cmp eax, 0x5641812
int1
movabs byte [0x6424753e0008896d], al
nop
add eax, eax
in al, 0x78
xor al, 0x29
pop rax
retf
stc
movabs rdx, 0x33605361cb30251e
shl byte [rax], 0x81
pop rdi
out dx, al
adc byte [rax + 0x22], ah
or ebp, dword [rdx + 0x2ca96961]
mov dil, 0x5f
push rsp
pop rbx
xor dword [rbx], ebp
push rdi
fstp st(6)
xor byte [r8 + 0x21], r9b
jo 0x403f96
pop rsi
shl byte [rdx - 0x5b], 0x41
xchg eax, ebp
push rsp
xor byte [rsi], 0x30
outsd dx, dword [rsi]
je 0x404000
add dword [rsi - 0x1f], edi
jo 0x40404c
pop r8
jae 0x404068
adc eax, 0xa15b4ac5
mov gs, word [rdi - 0x4aa693bd]
xchg eax, ebp
test edx, eax
out 0x76, eax
or al, 0x75
leave
push 0x45
enter 0x2893, 8
ja 0x403ffb
push rbx
xor al, 0x3b
imul esi, dword [rip + 0x68cab126], 0x2258dc6d
shr byte [rdx], 1
or esp, dword [rax]
or byte [rdx], al
jmp 0x404040
sub al, 0xd
outsb dx, byte [rsi]
insb byte [rdi], dx
shr dword [rdx + rcx*4 + 0x1d60fed0], -0x7f
or al, 0x38
outsb dx, byte [rsi]
mov esp, 0x1b446432
and byte [rbx + 0x1925865], ah
adc cl, byte [rbx]
retf
mov esp, 0x2ccb0942
add eax, 0x51725a84
push rdx
xor al, 0x78
lodsd eax, dword [rsi]
xchg eax, edx
mov dword [rbp + rdi*4 + 0x482ca64], esp
or dword [rcx + 0x32], ebx
shl dword [rbx], 1
and dword [rsi + rdi*8 - 0x72], eax
out dx, al
xchg eax, edx
sub ebx, ecx
add esi, ebx
and ecx, dword [rcx]
outsb dx, byte [rsi]
sbb byte [rcx + 0x634f6d6f], 0x63
rol bl, 0xda
retf
push 0x5f
stosd dword [edi], eax
xor edi, dword [rax - 0x43]
js 0x4040da
sbb edx, dword [rax - 0x21]
push rcx
sub byte [rcx + rbx*2 + 0x517419cf], ah
jb 0x4040cb
xor al, byte [rcx]
push rcx
sbb ch, dh
adc bl, byte [rdi + 0x12]
push rcx
and al, byte [rcx + rcx*8 - 0x4d7a6fcf]
sbb byte [rdx + rbx*4 - 0x773f65cd], 0x40
push rsi
out 0xf7, eax
sub ecx, dword [rsi]
insd dword [rdi], dx
push 0x2ba921b
movabs dword [0xb2a5b32b31973159], eax
xor al, 0x5f
movabs byte [0xd165d9f01fa02d03], al
xchg eax, esi
sbb rsp, qword [rdi + 0x73]
je 0x40410c
jae 0x404061
vcmppd xmm14, xmm2, xmmword [rcx], 0xca
mov bl, 1
pop rax
adc al, 0x62
out dx, eax
rcr byte [rbx], 0x81
jl 0x40409b
adc byte [rax + 0x20], ah
sub ebp, dword [rdx]
imul esp, dword [rax + 4], 0x30b71256
sub ebp, esp
and bpl, byte [rcx + 0xec2907c]
nop
js 0x404151
jge 0x40415a
retf
push rsi
or dword [rsi + 0x77], edx
pop rcx
mov cl, 0xb2
sbb eax, 0xc2561885
pop rax
movabs dword [0x297006b6fa92a5dd], eax
insd dword [rdi], dx
adc byte [rcx + rbp], al
mov word [rcx + 0xd], cs
xchg eax, esp
xor eax, 0xee217466
cmp dword [rbx + 0x1a], ebx
movabs byte [0x29898133d14604c0], al
and edi, dword [rdx]
or ebp, dword [rdi - 6]
xor esi, ebp
fadd st(1)
sbb dword [rcx], ebp
push rdx
and al, 0x65
js 0x4041ab
movabs eax, dword [0x587ad649b270f55b]
sbb byte [rsi], bl
adc byte [rbx], dh
push rdx
push -0x23
imul edx, dword [rsi], -0x37
ret 0x3bdd
push 0x25
xor byte [rdx], cl
sal byte [rbp - 0x21b1b23b], cl
xor dword [rsi - 0x46674d93], esi
out 0xc0, eax
cli
mov dword [rdx], eax
mov byte [rbx], dh
ror dword [rdx], cl
and edi, dword [rbx + 0x7a]
mov ebx, 0xbd9a30a2
xor al, 0xbe
out 0x10, al
cmpsd dword [rsi], dword ptr [rdi]
add eax, 0x1883e446
ret 0x8560
jnp 0x4041cc
sbb byte [rbp + 0x4c5da4c0], al
cmpsb byte [rsi], byte ptr [rdi]
xchg byte [rax], sil
lodsb al, byte [rsi]
xor byte [rdi + 0x23], bl
adc byte es:[rsi], ch
cmpsd dword [rsi], dword ptr [rdi]
xor dl, spl
sub r12b, r14b
mov edi, 0x8166232a
mov edi, 0xc210bc11
jb 0x4041b6
xor byte [rbx], r11b
xchg eax, ebp
or dword [rax - 0x74], esi
add eax, 0xb874753b
add al, 0
add dword [rax - 0x48], 0x3f
mov edx, 0x332c4970
je 0x404251
jae 0x40424d
lodsd eax, dword [rsi]
nop
pop rbx
movsd dword [rdi], dword ptr [rsi]
pop rdi
stc
pop rdi
insb byte [rdi], dx
or dword gs:[rsp + 0x78704598], ebp
sub ebp, dword [rcx]
and dword [rax - 0x78], r8d
mov word [rsi], cs
pop r14
nop
add byte [rsi + rax*4 + 0x81c43ab], bl
ror byte [rdx + 0x4a], 0x9a
sbb al, 0x14
fldcw word [rbp + rax*2 + 0x1081bf02]
movabs eax, dword [0x968908d5985c02ac]
pop rcx
jp 0x404240
sub dword [rax - 0x7fb51671], eax
pop rcx
or dword [rip - 0x1fef7fc2], eax
sbb al, 0x84
mov spl, 0x44
int3
mov al, 0x28
and eax, dword [rax + 0x55]
retf
sbb byte [rcx], ah
cwde
push rbp
jle 0x404224
nop
adc al, 0x43
xor eax, 0x230e010c
insb byte [rdi], dx
jp 0x40424e
adc dword [rdx + rax*2], 0x3c
test byte [rdx - 0x7defe9b0], ah
mov word [rsi], ds
xor byte [rdx + 0x1a], al
push 0x4e22406a
movabs dword [0x1f0dab484222c1b5], eax
rol dword gs:[rdx - 0x3f], -0x77
insd dword [rdi], dx
mov ebp, dword [rbp - 0x2f]
adc ah, byte [rax - 0x254dcab7]
mov cl, 0x15
cmpsb byte [rsi], byte ptr [rdi]
jle 0x4042b4
xor esp, dword [rdx]
xchg eax, ebp
shr dword [rcx], 0x1d
cmc
movsd dword [rdi], dword ptr [rsi]
ficom word [rdx]
mov al, 0x18
imul ebp, dword [rbp + 0x51], 0x44
and dword [rbx - 0x3f43ede2], eax
mov dl, 0x20
xchg eax, esp
sub esp, dword [rcx - 0x40]
sub byte [rbp - 0x39b4ca2b], dl
stosd dword [rdi], eax
adc dword [r8], r12d
imul esi, eax, 0x72
push rdx
adc byte [rax], cl
xor byte [r13 - 0x3f], r12b
mov word [rcx + rsi*4 - 0x5a], ss
or ebp, dword [rsi]
nop
int1
js 0x404266
test byte [rax + 8], dl
sub esi, dword [rbx + 0x40f5855]
xor byte [rip - 0x16fdbf1e], dh
jae 0x404342
test eax, 0x845642dc
ret 0xa418
ror dword [rax + rsi + 0x2992fd4], 0x54
and byte [rbx - 0x6aa2c16b], ch
pushfq
pop rsp
sbb dl, 0x78
js 0x404272
add eax, 0x7c8b80b2
nop
push rsp
int3
add cl, byte [rbx + 0x56322c04]
jb 0x404378
rep stosd dword [rdi], eax
adc dh, ah
xor al, 0xf3
or eax, 0xd06a4bc9
pop rdx
add ebx, esp
jmp 0xffffffffa3569149
xor al, 0x6c
lodsb al, byte [rsi]
xor esi, dword [rdx]
or byte [rsp + rbp*8 + 0x656b7a56], ch
clc
xchg eax, ebp
add al, 0xb7
adc cl, byte [rax]
test eax, 0x22410da2
adc eax, 0x90452d6
test eax, 0x27c71901
add ch, byte [rbx]
cmp byte [rbx + rcx*4], dl
call 0x30a44bf0
xchg cl, bl
adc eax, 0x6108e048
and byte [rcx + 0x3166244c], al
movabs eax, dword [0x2afe3354fa753c85]
mov ecx, 0x4d6de400
pop rax
jb 0x4042f3
out 0x78, eax
enter -0x7386, 0x12
out dx, al
jno 0x404343
jmp 0x404377
mov cl, 0xf
js 0x40432b
adc byte [rbx], ah
pop rcx
xor al, 0x33
and byte [rcx], al
jb 0x40439a
fisub word [rsp + rdx*8 + 5]
or dword [rsi*2 + 0x112178a5], edi
insd dword [rdi], dx
sbb edi, edi
mov esp, 0x16ab2b45
push -0x7ab4fdec
sbb edx, edx
mov al, 0xa4
or edx, dword [rsi + 0x406409e3]
adc al, 0x56
fmul dword [rdi]
sbb byte [rax - 0x60], al
and dword [rsp + rdi*4 + 0x4b], esp
push rax
xor dword [rax + 0x58], ecx
outsb dx, byte [rsi]
pop rsi
test dword [rdx - 0x7bbe7c76], edx
push rax
sbb byte [rbx + rcx*2 + 0x65], al
adc byte [rcx], ch
enter 0x1242, -0x54
and al, 0x86
sub dword [rcx + 0x55], -0xa
test dword [rbx - 0x38], edx
adc al, 0xc2
sub byte [rsi + 0x2ca44431], ch
add dh, ah
xchg eax, edx
shufps xmm2, xmmword [rbp + 0x616078f1], 0x78
insd dword [rdi], dx
sbb byte [rsi + 0x61], 0x30
in al, dx
xor esi, dword [rdi]
cdq
or ch, byte [rbp - 0x40]
outsd dx, dword [rsi]
outsb dx, byte [rsi]
mov esp, dword [rbp - 0x3c]
push rax
out dx, eax
mov ecx, dword [rsi]
mov al, 0x45
add al, 0x42
or byte [rdx + rsi*4 + 0x50595848], ch
pop rbp
and byte [rbx], ah
mov ah, 0x57
rcl al, 0x79
sub esp, esp
pop rcx
or byte [rdx + 0x65], al
fild word [rcx + rax*8 + 0x7839642a]
js 0x404448
sbb dword [rax + 0x21], -0x78
movabs eax, dword [0x6478488ad24a83a2]
adc dword [rax], 0x2a3176e1
and ebx, dword [rdx]
jae 0x40449c
sub ch, byte [rbx + 0x322fec09]
mov bl, 0x95
push rsp
test bh, cl
imul ecx, dword [rax - 0x30eadfae], 0xca192b59
push rax
pop rdx
pop rcx
retf
push rsi
js 0x40447a
or al, 0xf5
fabs
adc dl, byte [rsi + 0x48]
xchg eax, ecx
push rsi
cmpsb byte [rsi], byte ptr [rdi]
rcl dword [rax + 0x56], 0x10
hlt
js 0x40440e
nop
xchg eax, ebx
cmp byte [r8], sil
xchg eax, ecx
sti
adc eax, 0x2d5f339a
lea ecx, [rdx + 0x5981cfb0]
imul edx, dword [rsi + rbp], 0xcea2c2f1
mov edx, 0x761d6431
cmp dword [rbx], ecx
or eax, 0x916d7098
add byte es:[rbp + 0x5a], cl
leave
adc eax, 0x41780f08
adc al, byte [rip + 0x4a4a1f42]
sub ah, byte [rsi + rbp*2 - 0x2daddcf1]
mov dword [rdi], ebx
clc
movabs dword [0x2a64b07300d46108], eax
movabs eax, dword [0x766a4814c1806434]
adc byte cs:[rbx + 0x24], ah
push rdi
xor dl, al
or byte [r15 + rax - 0x654d3b1e], cl
and qword [rbx + 0x31], r9
sbb al, 0x48
lodsb al, byte [rsi]
in al, 0x21
js 0x40454a
js 0x404550
xchg eax, edx
add ah, byte [rbx + rdx*2]
add al, byte [rbx]
test word [rbp + 0x40], sp
xchg eax, edx
mov al, 0x2a
sbb dword [rax - 0x67], edi
adc esi, eax
cmp dil, 0xe2
mov cl, byte [rdx]
stosb byte [rdi], al
push rsp
sbb byte [rax + 0x50], dh
adc al, 0x8e
jle 0x40456e
test dl, cl
test al, 0x42
mov bl, 0xb8
or dword [rax + 0x64], ecx
stosb byte [rdi], al
adc dword [eip + 0x305422c6], ecx
ficomp dword [rdx + 0x71882ab]
ror dh, cl
pop rdi
sub eax, 0x78d4a147
scasd eax, dword [rdi]
fistp dword [rcx - 0x7d]
or dword [rsp + rbp + 0x30765fe8], ebp
or cl, byte [rax + 0x35]
sub byte [rcx - 0x5ceb6845], cl
xor byte [rax - 0x71], ah
nop
sub bl, byte [rbx + 0x10147e51]
mov byte [rdx], al
push rbp
jb 0x4044ed
push rsi
adc bl, byte [rcx]
add al, 0xa1
cmp dl, byte [rax - 0x7d95927c]
add cl, byte [rbx + 0x1b530a59]
and byte [rax], r10b
mov dh, 0xd5
sub eax, dword [rax - 0x38]
push rsp
stosd dword [rdi], eax
push rbp
sub al, 0x63
push rdx
push rbp
imul edi, dword [rbx + 0x52], 0xd2507505
insd dword [rdi], dx
movabs al, byte [0x651a305743435d6d]
movsxd rsi, dword [rcx]
mov al, 0xc2
or byte [rcx + 0x1478a7e8], cl
mov byte [rcx + 0x7811f200], cl
push rax
js 0x4045bb
sbb qword [rbp - 0x7f6ce7f8], rdx
xchg eax, edx
popfq
fldcw word [rip + 0x1907240]
push rbp
xor dword [rbp], esp
add esp, dword [rbx - 0x71]
stosb byte [rdi], al
or byte [rbx], ch
and esp, dword [rax]
enter -0x5a77, 0x30
movabs byte [0x30c6816ca718c250], al
insd dword [rdi], dx
cwde
scasb al, byte [rdi]
xchg eax, edx
mov dl, byte [rax + 0x36]
lea eax, [rdx + 0x20]
movsxd rdx, dword [rdx + 0x59]
push rbp
enter 0x7b16, 0x14
scasb al, byte [rdi]
retf 0x800
xor cl, sil
pop rcx
sal rbp, 1
and ebp, ecx
push rcx
sbb byte [rbx + 0xb576464], dh
lodsb al, byte [rsi]
sbb byte [rsi], ah
mov ecx, 0x49520032
xor dh, byte [rax]
mov al, 0xca
adc eax, 0x8902405
nop
push rax
movabs dword [0x3a346507900150de], eax
mov cl, 0xb2
xchg eax, ebp
push rax
jg 0x40461e
xchg rax, r12
in eax, dx
add byte [rsi], ch
jae 0x404604
mov bh, 0xc4
jns 0x40468a
insd dword [rdi], dx
je 0x404694
push 0x4db72c09
xor byte [rdi], bh
jb 0x40469b
outsb dx, byte [rsi]
outsd dx, dword [rsi]
lodsb al, byte [rsi]
add eax, 0xe62de31d
or eax, 0xbf636de0
jo 0x40466b
jne 0x40467b
sub eax, 0xd006469
push -0x2532979c
int3
mov ebp, 0x6e796409
sbb dword [r11 - 0x5e4ef8d0], r11d
jb 0x40469e
or al, 0x5f
sbb eax, dword [rcx - 0x6f7910a0]
insb byte [rdi], dx
sub byte [rcx], cl
add al, 0xdb
imul eax, dword [rax], 0x6f
je 0x4046e1
mov ecx, dword [rdx]
sub al, 0x6f
jae 0x4046d2
and dword [rdx + 8], esi
jnp 0x40467f
adc ax, 0x2c24
movabs byte [0xdd081d68652e166f], al
sub eax, 0x726468fb
or eax, 0x5f63635d
sub esp, dword [rcx + rdx]
mov eax, 0x116cbd2e
xor ch, byte [rip + 0x43b361f6]
or ebp, dword [rdx + 0x63]
jb 0x404647
push 0x69ad7b36
sub ch, byte [rax + 0x7b]
pop rsi
pop rdx
mov esp, dword [rax - 0x3dfb034b]
push rdx
sbb byte [rdx + 0xfddb2a], 0
sbb esp, dword [rsi + 0x44]
int 0x4e
retf
add cl, byte [rsi]
and al, 0x43
jb 0x4046c2
sbb al, 1
or dword [rax + rcx*2], 0x33
and eax, dword [rdi]
push rsp
push rsp
nop
or al, 0xc9
and byte [rax], ah
add al, 0x20
or dword [rcx + rcx*8], 0x31
je 0x404759
nop
ja 0x40472b
leave
and al, 0x44
jg 0x4046e3
ljmp [rdi + 0x41]
sbb esp, esp
cwde
cwde
xor al, 0x69
xchg byte [rax + rdx*4 + 5], ah
or byte [rsi + 0xb], cl
test byte [rbx + rdx*4 + 1], dh
rol byte [rdi], 1
add byte [rsi], al
mov dl, 0xd9
sti
sbb byte [rdi], bh
push rsi
in al, 0xc9
add dword [rcx + 3], ebp
movabs al, byte [0xc3f245dd2005a005]
add bl, byte [rsi - 0x41]
call qword [rax + 0x64393c9c]
or byte [rax + rcx + 0x3c], ah
add edx, edx
or eax, 0x6b0702d9
movabs al, byte [0x680a70726e6720c]
movabs r10, 0xbc27044f7aff9b29
push r9
ud2
and edi, edi
test byte [rax], al
xor cl, al
and byte [rax + 0x68], ch
sub byte [rdx], al
jmp 0x198bd769
mov ds, word [rdi + 0x3e4f2701]
add al, 0xff
nop
or edx, dword [rax - 0x6f37e5f5]
or eax, 0xb03f8925
in al, dx
xor dh, byte [rax + 0x7100180]
mov esp, 0x9486c873
xor byte [rip + 0x5b23b207], cl
setge byte [rdi]
enter 0x3733, 0x19
jg 0x40472b
sbb al, 0xb2
ret
add byte [rbx + 0x1a52d4ff], ah
sahf
push rdx
or dword [rcx + 0x486cdcce], ebp
mov edi, 0xbf073fe0
push rcx
and dword [rbx], ebx
mov cl, 0x3f
sahf
mov ecx, 0x7f076f09
insb byte [rdi], dx
or ah, ah
leave
and dword [rcx - 0x67a46741], edi
pop rbx
leave
pushfq
and ecx, ecx
xor al, 0x7f
xchg eax, edx
xor al, 0x7f
movabs al, byte [0xe0ee9a4d442db01]
add esp, edi
or eax, 0x76f6725
call qword [rax]
out 0xe0, eax
add edx, edx
psubb mm0, qword [rdi]
mov ch, 0xec
pop rsp
cmp bh, 0xf3
xchg eax, ebx
adc edi, ebx
clc
mov ecx, 0x9b496cd9
sahf
jg 0x404804
add dword [rsi], eax
adc byte [rbx - 0x67e6f494], al
mov edi, 0x83928f8f
pop rsp
and al, 8
add dword [rcx], eax
xchg eax, esp
pushfq
cmp al, 0x1b
nop
add byte [rax + 0x4326e0d0], dl
xor cl, byte [rdx]
rol byte [rdi], 1
add edx, edx
pop rbp
cmp byte [rdi + 0x10], 0x3f
or al, ah
or edi, dword [rcx]
enter -0x1fe0, -0x40
add cl, al
sbb edx, dword [rdx + 0x307f1520]
or esp, dword [rcx + 0x70]
pop rax
xor al, 0xbf
ret
xchg eax, esp
int 0xe
adc dword [rbx], edi
rcr dword [rax], 1
mov word [rbp - 0x4e], es
cmp dword [rdi - 0x3644fee2], 0xd95eb3
sbb byte [rcx - 0x7bd73701], dl
or eax, 0x371fcd20
or dword [rdi - 0x50], edi
cmp al, 0xe0
mov ecx, 0x47f100
add byte [rax], al
add byte [rax], al
add byte [rax], cl
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip - 0x4bf7fdea], ecx
mov al, 0x36
cmp eax, 0x959815aa
adc byte [rdx], bh
add byte [rdx - 0xfffffe4], dl
or al, byte [rcx]
add byte [rcx + 2], cl
add byte [rsp + rsi*8 - 0x1000000], cl
