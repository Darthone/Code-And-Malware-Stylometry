xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6090e7
push rbp
sub rax, obj.std::cin
cmp rax, 0xe
mov rbp, rsp
jbe 0x400da0
mov eax, 0
test rax, rax
je 0x400da0
pop rbp
mov edi, obj.std::cin
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.std::cin
push rbp
sub rsi, obj.std::cin
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400de8
mov eax, 0
test rax, rax
je 0x400de8
pop rbp
mov edi, obj.std::cin
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x208519], 0
jne 0x400e0a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x208506], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400e20
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400e1b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0xe8
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rax, [rbp - 0xe0]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0xd8]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
lea rax, [rbp - 0xd0]
mov rdi, rax
call method.std::allocator_std::vector_longlong_std::allocator_longlong___.allocator
lea rax, [rbp - 0xe1]
mov rdi, rax
call 0x4018ba
mov rax, qword [rbp - 0xe0]
mov rsi, rax
lea rdx, [rbp - 0xe1]
lea rax, [rbp - 0x60]
mov rcx, rdx
mov edx, obj.inf
mov rdi, rax
call 0x4018f2
mov rax, qword [rbp - 0xe0]
mov rsi, rax
lea rcx, [rbp - 0xd0]
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4019d8
lea rax, [rbp - 0x40]
mov rsi, rax
mov edi, obj.d
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_vector
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
lea rax, [rbp - 0xe1]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
lea rax, [rbp - 0xe1]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::allocator
lea rax, [rbp - 0xe2]
mov rdi, rax
call sym.std::allocator_double_::allocator
movsd xmm0, qword [rip + 0x43d1]
movsd qword [rbp - 0xd0], xmm0
mov rax, qword [rbp - 0xe0]
mov rsi, rax
lea rcx, [rbp - 0xe2]
lea rdx, [rbp - 0xd0]
lea rax, [rbp - 0x60]
mov rdi, rax
call method.std::vector_double_std::allocator_double__.vector
mov rax, qword [rbp - 0xe0]
mov rsi, rax
lea rcx, [rbp - 0xe1]
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::vector
lea rax, [rbp - 0x40]
mov rsi, rax
mov edi, obj.rld
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_vector
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
lea rax, [rbp - 0xe2]
mov rdi, rax
call sym.std::allocator_double_::_allocator
lea rax, [rbp - 0xe1]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
mov rax, qword [rbp - 0xe0]
mov rsi, rax
mov edi, obj.mdist
call sym.std::vector_longlong_std::allocator_longlong__::resize
mov rax, qword [rbp - 0xe0]
mov rsi, rax
mov edi, obj.spd
call sym.std::vector_double_std::allocator_double__::resize
mov qword [rbp - 0xc8], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0xc8], rax
jge 0x401073
mov rax, qword [rbp - 0xc8]
mov rsi, rax
mov edi, obj.spd
call sym.std::vector_double_std::allocator_double__::operator__
mov rbx, rax
mov rax, qword [rbp - 0xc8]
mov rsi, rax
mov edi, obj.mdist
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rsi, rbx
mov rdi, rax
call 0x400be0
add qword [rbp - 0xc8], 1
jmp 0x401016
mov qword [rbp - 0xc0], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0xc0], rax
jge 0x4010f3
mov rbx, qword [rbp - 0xc0]
mov rax, qword [rbp - 0xc0]
mov rsi, rax
mov edi, obj.rld
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
pxor xmm0, xmm0
movsd qword [rax], xmm0
mov rbx, qword [rbp - 0xc0]
mov rax, qword [rbp - 0xc0]
mov rsi, rax
mov edi, obj.d
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov qword [rax], 0
add qword [rbp - 0xc0], 1
jmp 0x40107e
mov qword [rbp - 0xb8], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0xb8], rax
jge 0x401197
mov qword [rbp - 0xb0], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0xb0], rax
jge 0x40118a
lea rax, [rbp - 0xd0]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rax, qword [rbp - 0xd0]
test rax, rax
js 0x401180
mov rbx, qword [rbp - 0xb0]
mov rax, qword [rbp - 0xb8]
mov rsi, rax
mov edi, obj.d
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rdx, rax
mov rax, qword [rbp - 0xd0]
mov qword [rdx], rax
add qword [rbp - 0xb0], 1
jmp 0x40111d
add qword [rbp - 0xb8], 1
jmp 0x4010fe
mov qword [rbp - 0xa8], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0xa8], rax
jge 0x4012dc
mov qword [rbp - 0xa0], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0xa0], rax
jge 0x4012cf
mov qword [rbp - 0x98], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0x98], rax
jge 0x4012c2
mov rbx, qword [rbp - 0x98]
mov rax, qword [rbp - 0xa0]
mov rsi, rax
mov edi, obj.d
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov r13, rax
mov rbx, qword [rbp - 0xa8]
mov rax, qword [rbp - 0xa0]
mov rsi, rax
mov edi, obj.d
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov r12, qword [rax]
mov rbx, qword [rbp - 0x98]
mov rax, qword [rbp - 0xa8]
mov rsi, rax
mov edi, obj.d
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
add rax, r12
mov qword [rbp - 0x40], rax
mov rbx, qword [rbp - 0x98]
mov rax, qword [rbp - 0xa0]
mov rsi, rax
mov edi, obj.d
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::min_longlong_
mov rax, qword [rax]
mov qword [r13], rax
add qword [rbp - 0x98], 1
jmp 0x4011e0
add qword [rbp - 0xa0], 1
jmp 0x4011c1
add qword [rbp - 0xa8], 1
jmp 0x4011a2
mov qword [rbp - 0x90], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0x90], rax
jge 0x401413
mov qword [rbp - 0x88], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0x88], rax
jge 0x401406
mov rbx, qword [rbp - 0x88]
mov rax, qword [rbp - 0x90]
mov rsi, rax
mov edi, obj.d
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rbx, qword [rax]
mov rax, qword [rbp - 0x90]
mov rsi, rax
mov edi, obj.mdist
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
cmp rbx, rax
setle al
test al, al
je 0x4013f9
mov rbx, qword [rbp - 0x88]
mov rax, qword [rbp - 0x90]
mov rsi, rax
mov edi, obj.rld
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov r12, rax
mov rbx, qword [rbp - 0x88]
mov rax, qword [rbp - 0x90]
mov rsi, rax
mov edi, obj.d
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::operator__
mov rax, qword [rax]
pxor xmm1, xmm1
cvtsi2sd xmm1, rax
movsd qword [rbp - 0xf8], xmm1
mov rax, qword [rbp - 0x90]
mov rsi, rax
mov edi, obj.spd
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm0, qword [rax]
movsd xmm1, qword [rbp - 0xf8]
divsd xmm1, xmm0
movapd xmm0, xmm1
movsd qword [r12], xmm0
add qword [rbp - 0x88], 1
jmp 0x401306
add qword [rbp - 0x90], 1
jmp 0x4012e7
mov qword [rbp - 0x80], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0x80], rax
jge 0x401538
mov qword [rbp - 0x78], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0x78], rax
jge 0x40152e
mov qword [rbp - 0x70], 0
mov rax, qword [rbp - 0xe0]
cmp qword [rbp - 0x70], rax
jge 0x401524
mov rbx, qword [rbp - 0x70]
mov rax, qword [rbp - 0x78]
mov rsi, rax
mov edi, obj.rld
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov r12, rax
mov rbx, qword [rbp - 0x80]
mov rax, qword [rbp - 0x78]
mov rsi, rax
mov edi, obj.rld
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm2, qword [rax]
movsd qword [rbp - 0xf8], xmm2
mov rbx, qword [rbp - 0x70]
mov rax, qword [rbp - 0x80]
mov rsi, rax
mov edi, obj.rld
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm0, qword [rax]
addsd xmm0, qword [rbp - 0xf8]
movsd qword [rbp - 0x40], xmm0
mov rbx, qword [rbp - 0x70]
mov rax, qword [rbp - 0x78]
mov rsi, rax
mov edi, obj.rld
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::min_double_
movsd xmm0, qword [rax]
movsd qword [r12], xmm0
add qword [rbp - 0x70], 1
jmp 0x40144d
add qword [rbp - 0x78], 1
jmp 0x401434
add qword [rbp - 0x80], 1
jmp 0x40141b
mov qword [rbp - 0x68], 0
mov rax, qword [rbp - 0xd8]
cmp qword [rbp - 0x68], rax
jge 0x4015d2
lea rax, [rbp - 0x60]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
mov rax, qword [rbp - 0x40]
sub rax, 1
mov rbx, rax
mov rax, qword [rbp - 0x60]
sub rax, 1
mov rsi, rax
mov edi, obj.rld
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rax, qword [rax]
mov qword [rbp - 0xf8], rax
movsd xmm0, qword [rbp - 0xf8]
mov edi, obj.std::cout
call 0x400bd0
mov esi, 0x4052f8
mov rdi, rax
call sym.std::operator___std::char_traits_char__
add qword [rbp - 0x68], 1
jmp 0x401540
mov esi, 0x4052fa
mov edi, obj.std::cout
call sym.std::operator___std::char_traits_char__
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x401676
jmp 0x401671
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
jmp 0x40160b
mov rbx, rax
lea rax, [rbp - 0xe1]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
lea rax, [rbp - 0xd0]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
jmp 0x401648
mov rbx, rax
lea rax, [rbp - 0xe2]
mov rdi, rax
call sym.std::allocator_double_::_allocator
lea rax, [rbp - 0xe1]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0xe8
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edi, 0
call sym.std::ios_base::sync_with_stdio
mov esi, 0
mov edi, 0x6090f0
call sym.std::basic_ios_char_std::char_traits_char__::tie
mov edi, 0xf
call sym.std::setprecision
mov esi, eax
mov edi, obj.std::cout
call sym.std::operator___char_std::char_traits_char__
lea rax, [rbp - 0x28]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov qword [rbp - 0x20], 0
mov rax, qword [rbp - 0x28]
cmp qword [rbp - 0x20], rax
jge 0x401729
mov rax, qword [rbp - 0x20]
lea rbx, [rax + 1]
mov esi, str.Case__
mov edi, obj.std::cout
call sym.std::operator___std::char_traits_char__
mov rsi, rbx
mov rdi, rax
call sym.std::ostream::operator__
mov esi, 0x405303
mov rdi, rax
call sym.std::operator___std::char_traits_char__
call sym.dot
add qword [rbp - 0x20], 1
jmp 0x4016e4
mov eax, 0
mov rdx, qword [rbp - 0x18]
xor rdx, qword fs:[0x28]
je 0x401742
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x401804
cmp dword [rbp - 8], 0xffff
jne 0x401804
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
mov edi, obj.mdist
call sym.std::vector_longlong_std::allocator_longlong__::vector
mov edx, obj.__dso_handle
mov esi, obj.mdist
mov edi, sym.std::vector_longlong_std::allocator_longlong__::_vector
call sym.imp.__cxa_atexit
mov edi, obj.spd
call 0x401866
mov edx, obj.__dso_handle
mov esi, obj.spd
mov edi, sym.std::vector_double_std::allocator_double__::_vector
call sym.imp.__cxa_atexit
mov edi, obj.d
call 0x401882
mov edx, obj.__dso_handle
mov esi, obj.d
mov edi, sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_vector
call sym.imp.__cxa_atexit
mov edi, obj.rld
call 0x40189e
mov edx, obj.__dso_handle
mov esi, obj.rld
mov edi, sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_vector
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov eax, dword [rbp - 4]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_longlong_std::allocator_longlong__._Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_double_std::allocator_double__._Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x402072
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____._Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_longlong_.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_M_fill_initialize
jmp 0x401955
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_longlong__longlong_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_fill_initialize
jmp 0x401a3b
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong____std::vector_longlong_std::allocator_longlong___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 1
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong______
mov rdx, rax
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_move_assign
add rsp, 0x10
mov rax, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401af7
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_fill_initialize
jmp 0x401b99
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_fill_initialize
jmp 0x401c7f
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double____std::vector_double_std::allocator_double___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov byte [rbp - 0x19], 1
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double______
mov rdx, rax
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_move_assign
add rsp, 0x10
mov rax, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401d3b
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x401d93
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
mov rdx, rax
mov rax, qword [rbp - 0x10]
sub rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_M_default_append
jmp 0x401dcb
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
cmp rax, qword [rbp - 0x10]
seta al
test al, al
je 0x401dcb
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_M_erase_at_end
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x401e1f
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov rdx, rax
mov rax, qword [rbp - 0x10]
sub rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_default_append
jmp 0x401e57
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
cmp rax, qword [rbp - 0x10]
seta al
test al, al
je 0x401e57
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_erase_at_end
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
cmp rdx, rax
jge 0x401f12
mov rax, qword [rbp - 0x10]
jmp 0x401f16
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 8]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
jbe 0x401f40
mov rax, qword [rbp - 0x10]
jmp 0x401f44
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_double_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_double_std::allocator_double__::_Vector_impl._Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl._Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call method.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl._Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_create_storage
jmp 0x4021f9
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_longlong__unsignedlong_longlong_longlong_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_longlong__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call method.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl._Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_create_storage
jmp 0x4022ef
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_std::vector_longlong_std::allocator_longlong____unsignedlong_std::vector_longlong_std::allocator_longlong___std::vector_longlong_std::allocator_longlong___
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong____
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x31]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::get_allocator
lea rdx, [rbp - 0x31]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::vector
lea rax, [rbp - 0x31]
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::_allocator
mov rax, qword [rbp - 0x48]
lea rdx, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::_M_swap_data
mov rdx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl::_M_swap_data
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_get_Tp_allocator
mov rbx, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_get_Tp_allocator
mov rsi, rbx
mov rdi, rax
call sym.std::__alloc_on_move_std::allocator_std::vector_longlong_std::allocator_longlong____
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_vector
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402435
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_create_storage
jmp 0x4024ab
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_double__unsignedlong_double_double_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_create_storage
jmp 0x4025a1
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____._M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_std::vector_double_std::allocator_double____unsignedlong_std::vector_double_std::allocator_double___std::vector_double_std::allocator_double___
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double____
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x31]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::get_allocator
lea rdx, [rbp - 0x31]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call method.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____.vector
lea rax, [rbp - 0x31]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
mov rax, qword [rbp - 0x48]
lea rdx, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::_M_swap_data
mov rdx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::_M_swap_data
mov rax, qword [rbp - 0x50]
mov rdi, rax
call method.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____._M_get_Tp_allocator
mov rbx, rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call method.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____._M_get_Tp_allocator
mov rsi, rbx
mov rdi, rax
call sym.std::__alloc_on_move_std::allocator_std::vector_double_std::allocator_double____
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_vector
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4026e7
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
cmp qword [rbp - 0x40], 0
je 0x402913
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
sub rdx, rax
mov rax, rdx
sar rax, 3
cmp rax, qword [rbp - 0x40]
jb 0x402789
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
mov rcx, qword [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_longlong__unsignedlong_longlong_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
jmp 0x402913
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_default_append
mov rsi, rcx
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_M_check_len
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_longlong__longlong__std::allocator_longlong__
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_longlong__unsignedlong_longlong_
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_longlong__longlong_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x30]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x28]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x402913
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_longlong__longlong_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_longlong__longlong_
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
cmp qword [rbp - 0x40], 0
je 0x402b87
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
sub rdx, rax
mov rax, rdx
sar rax, 3
cmp rax, qword [rbp - 0x40]
jb 0x4029fd
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
mov rcx, qword [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_double__unsignedlong_double_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
jmp 0x402b87
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_default_append
mov rsi, rcx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_check_len
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_double__double__std::allocator_double__
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_double__unsignedlong_double_
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x30]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x28]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x402b87
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x4018ba
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402c46
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_double_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402cba
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::allocator_std::vector_longlong_std::allocator_longlong___.allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402d2e
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_longlong_std::allocator_longlong____::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402da2
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_double_std::allocator_double____::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_longlong_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_longlong__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
lea rdx, [rcx + rax]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_std::vector_longlong_std::allocator_longlong____unsignedlong_std::vector_longlong_std::allocator_longlong___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::vector_longlong_std::allocator_longlong____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call method.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_std::vector_longlong_std::allocator_longlong___::allocator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____._Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::vector_longlong_std::allocator_longlong____
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::vector_longlong_std::allocator_longlong____
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
add rax, 0x10
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::vector_longlong_std::allocator_longlong____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rcx
mov rsi, rdx
mov rdi, rax
call sym.std::__do_alloc_on_move_std::allocator_std::vector_longlong_std::allocator_longlong____
add rsp, 0x10
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4030aa
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x4039b0
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::allocator_std::vector_double_std::allocator_double___.allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
lea rdx, [rcx + rax]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_std::vector_double_std::allocator_double____unsignedlong_std::vector_double_std::allocator_double___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::vector_double_std::allocator_double____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::allocator_std::vector_double_std::allocator_double___.allocator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call 0x403ae6
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::vector_double_std::allocator_double____
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::vector_double_std::allocator_double____
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
add rax, 0x10
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::vector_double_std::allocator_double____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rsp, 8
push rcx
mov rsi, rdx
mov rdi, rax
call sym.std::__do_alloc_on_move_std::allocator_std::vector_double_std::allocator_double____
add rsp, 0x10
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4033b0
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_longlong__unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x40343b
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
cmp rax, qword [rbp - 0x20]
ja 0x40349b
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x4034a9
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::max_size
jmp 0x4034ad
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4034c1
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4034f4
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::allocate
jmp 0x4034f9
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_longlong__std::move_iterator_longlong___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_longlong__std::move_iterator_longlong___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_longlong___longlong__longlong_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_double__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x4035d7
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
cmp rax, qword [rbp - 0x20]
ja 0x403637
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x403645
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::max_size
jmp 0x403649
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x40365d
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x403690
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::allocate
jmp 0x403695
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_double__std::move_iterator_double___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_double__std::move_iterator_double___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_double___double__double_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_true_::__uninit_fill_n_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40385c
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_longlong_std::allocator_longlong____::allocate
jmp 0x403861
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_false_::__uninit_fill_n_std::vector_longlong_std::allocator_longlong____unsignedlong_std::vector_longlong_std::allocator_longlong___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x4038c9
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_longlong_std::allocator_longlong___
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong___
add qword [rbp - 8], 0x18
jmp 0x4038a4
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call method.std::_Vector_base_std::vector_longlong_std::allocator_longlong___std::allocator_std::vector_longlong_std::allocator_longlong____::_Vector_impl._Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_std::vector_longlong_std::allocator_longlong_____
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::vector_longlong_std::allocator_longlong_____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::vector_longlong_std::allocator_longlong_____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x403981
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::allocator_std::vector_longlong_std::allocator_longlong_____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_double_.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_true_::__uninit_fill_n_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x403a68
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_double_std::allocator_double____::allocate
jmp 0x403a6d
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_false_::__uninit_fill_n_std::vector_double_std::allocator_double____unsignedlong_std::vector_double_std::allocator_double___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x403ad5
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_double_std::allocator_double___
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double___
add qword [rbp - 8], 0x18
jmp 0x403ab0
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::_Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_std::vector_double_std::allocator_double_____
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::vector_double_std::allocator_double_____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::vector_double_std::allocator_double_____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x403b8d
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::allocator_std::vector_double_std::allocator_double_____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_longlong__unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_longlong_std::allocator_longlong__._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x403c2d
mov rax, qword [rbp - 0x10]
jmp 0x403c31
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_longlong__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403ca3
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_longlong___longlong__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_double__unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_double_std::allocator_double__._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::max_size
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_double__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403d92
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_double___double__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_longlong__unsignedlong_longlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::allocate
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x30], 0
je 0x403f19
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::vector_longlong_std::allocator_longlong___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::vector_longlong_std::allocator_longlong___std::vector_longlong_std::allocator_longlong__const__
sub qword [rbp - 0x30], 1
add qword [rbp - 0x18], 0x18
jmp 0x403ee8
mov rax, qword [rbp - 0x18]
jmp 0x403f52
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_longlong_std::allocator_longlong____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::_vector
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::allocate
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x30], 0
je 0x404045
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::vector_double_std::allocator_double___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::vector_double_std::allocator_double___std::vector_double_std::allocator_double__const__
sub qword [rbp - 0x30], 1
add qword [rbp - 0x18], 0x18
jmp 0x404014
mov rax, qword [rbp - 0x18]
jmp 0x40407e
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov qword [rbp - 0x10], 0
lea rdx, [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_longlong__unsignedlong_longlong_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404100
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_longlong_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40415a
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy_std::move_iterator_longlong___longlong__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
pxor xmm0, xmm0
movsd qword [rbp - 0x10], xmm0
lea rdx, [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_double__unsignedlong_double_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40420a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x404264
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy_std::move_iterator_double___double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_longlong__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_longlong__unsignedlong_longlong_
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_longlong_std::allocator_longlong___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40432a
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::vector_longlong_std::allocator_longlong__const__
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x18
call 0x40181c
mov rbx, rax
test rbx, rbx
je 0x4043b6
mov rsi, r13
mov rdi, rbx
call method.std::vector_longlong_std::allocator_longlong__.vector
jmp 0x4043b6
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x40182e
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_double__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40442a
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::vector_double_std::allocator_double__const__
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x18
call 0x40181c
mov rbx, rax
test rbx, rbx
je 0x4044b6
mov rsi, r13
mov rdi, rbx
call sym.std::vector_double_std::allocator_double__::vector
jmp 0x4044b6
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x40182e
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_std::move_iterator_longlong___longlong__
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_std::move_iterator_double___double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_longlong__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x10], rax
cmp qword [rbp - 0x10], 0
je 0x4045a0
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 8]
mov qword [rax], rdx
sub qword [rbp - 0x10], 1
add qword [rbp - 0x18], 8
jmp 0x404582
mov rax, qword [rbp - 0x18]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xaaaaaaaaaaaaaaa
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_longlong_std::allocator_longlong__._M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_longlong__::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::_M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_longlong_std::allocator_longlong__::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__longlong_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x4046c2
jmp 0x4046bd
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_longlong_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_longlong_std::allocator_longlong__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_double__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
movsd xmm0, qword [rax]
movsd qword [rbp - 8], xmm0
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x10], rax
cmp qword [rbp - 0x10], 0
je 0x40472c
mov rax, qword [rbp - 0x18]
movsd xmm0, qword [rbp - 8]
movsd qword [rax], xmm0
sub qword [rbp - 0x10], 1
add qword [rbp - 0x18], 8
jmp 0x40470c
mov rax, qword [rbp - 0x18]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xaaaaaaaaaaaaaaa
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_double_std::allocator_double__._M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_double__::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_double_::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__double_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x40484e
jmp 0x404849
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_double_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_longlong___
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_longlong___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_true_longlong__longlong__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_double___
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_double___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_true_double__double__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_longlong__::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404949
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40499d
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4049f2
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404a7d
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404ad1
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x404b26
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base_std::move_iterator_longlong___true_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_longlong__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_longlong__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_longlong__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_true_longlong__longlong__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base_std::move_iterator_double___true_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_double__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_double__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_double__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_true_double__double__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_longlong_::allocator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x4039b0
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_iterator_longlong__::base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_true_true_std::random_access_iterator_tag_::__copy_m_longlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_iterator_double__::base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_true_true_std::random_access_iterator_tag_::__copy_m_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x404e7d
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x404ef3
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____longlong__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_longlong__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_longlongconst__longlong__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_double__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_doubleconst__double__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_longlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longlongconst__std::vector_longlong_std::allocator_longlong___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x4051a3
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x405225
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop word cs:[rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x203b76]
push rbp
lea rbp, [rip + 0x203b7e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x4052b6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x4052a0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword fs:[rsi], dword ptr [rdi]
mov bl, 0xb6
loopne 0x405305
and byte [rax], al
or al, byte [rax]
jae 0x405365
and byte [rbx], ah
add byte [rdx], bh
and byte [rax], al
jbe 0x40536d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x405383
je 0x405378
jo 0x40538c
outsb dx, byte gs:[rsi]
add byte fs:[rax], al
enter 0x674e, 0x6d
insd dword [edi], dx
shr dword [rbx + 0x31b0143], 0x3b
add dword [rbx], ebx
add edi, dword [rbx]
insb byte [rdi], dx
or byte [rax], al
add byte [rcx + rax], cl
add byte [rax], al
mov byte [rax + 0x8b8ffff], bh
add byte [rax], al
sbb byte [rdx + 0x888ffff], bh
add byte [rax], al
mov ebx, 0x960ffff
add byte [rax], al
pop rsp
ret
call qword [rax + 0x21000009]
ljmp [rax + 0x2b]
add byte [rax], al
ffreep st(4)
dec dword [rax - 0xbffffd5]
jmp rax
or byte [rax], al
add byte [rsi], al
inc dword [rax]
or dword [rax], eax
add byte [rip + 0x20ffffc5], dl
or dword [rax], eax
add byte [rdx], ah
mov eax, 0x3e000009
jmp rax
or dword [rax], eax
add byte [rdx - 0x3b], bl
dec dword [rax]
or al, byte [rax]
add byte [rsi - 0x3b], dh
push qword [rax]
or al, byte [rax]
add byte [rdx + 0x58ffffc5], dl
or al, byte [rax]
add byte [rsi + 0x78ffffc5], ch
or al, byte [rax]
add dl, cl
lcall [rax + 0x3400000a]
inc eax
or al, byte [rax]
add byte [rax - 0x3a], bh
call 0xffffffff944053cf
dec dword [rax]
or eax, dword [rax]
add byte [rax + 0x28ffffc6], dh
or eax, dword [rax]
add byte [rdx], bl
call qword [rax + 0xb]
add byte [rax], al
pop rsi
js 0x4053ed
add byte [rax], al
insb byte [rdi], dx
lcall [rax - 0x29fffff5]
inc eax
or eax, dword [rax]
add dl, dh
jmp rax
or eax, dword [rax]
add byte [rsi], cl
enter -1, 0
or al, 0
add byte [rax - 0x38], bh
ljmp [rax]
or al, 0
add byte [rax + rcx*8 + 0xc50ffff], bh
add byte [rax], al
fmul st(0)
push qword [rax + 0xc]
add byte [rax], al
hlt
enter -1, -0x70
or al, 0
add byte [rsi - 0x37], bl
mov eax, 0xa200000c
leave
jmp rax
or al, 0
add byte [rax + 0xffffc9], dh
or eax, 0xca1a0000
ljmp [rax]
or eax, 0xcaa60000
dec dword [rax + 0xd]
add byte [rax], al
xor cl, bl
ljmp [rax + 0xd]
add byte [rax], al
push rdx
retf
dec dword [rax + 0x7200000d]
retf
ljmp [rax - 0x63fffff3]
retf
dec eax
or eax, 0xcbc50000
call 0xfffffffff0405482
retf
dec dword [rax]
add byte [rax], al
int3
ljmp [rax]
add byte [rax], al
cmp cl, ah
dec dword [rax + 0xe]
add byte [rax], al
push rsi
int3
ljmp [rax + 0xe]
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
int3
call qword [rax - 0x3dfffff2]
int3
push qword [rax - 0x21fffff2]
int3
call rax
add byte [rax], al
int 0xff
clc
add byte [rax], al
int 0xff
lcall [rax]
sldt word [rax]
int 0xff
cmp byte [rdi], cl
add byte [rax], al
enter -0x33, -1
sldt word [rax]
in al, 0xcd
inc dword [rax + 0xf]
jmp qword [rax + 0x6200000f]
dec eax
sldt word [rax]
outsb dx, byte [rsi]
call 0x7a4054fc
dec dword [rax]
adc byte [rax], al
add al, bl
push qword [rax]
adc byte [rax], al
add byte [rax], ah
iretd
call qword [rax + 0x10]
add byte [rax], al
iretd
push qword [rax + 0x10]
add byte [rax], al
pop rax
iretd
call qword [rax + 0x64000010]
iretd
push qword [rax + 0x70000010]
iretd
call rax
adc byte [rax], al
add dh, cl
iretd
clc
adc byte [rax], al
add byte [rsi], dl
sar bh, 1
lcall [rax]
adc dword [rax], eax
add byte [rax + rdx*8], ah
cmp byte [rcx], dl
add byte [rax], al
sar dil, 1
lcall [rax + 0x11]
add byte [rax], al
adc al, 0xd1
inc dword [rax + 0x20000011]
sar edi, 1
jmp qword [rax + 0x2c000011]
sar edi, 1
inc eax
adc dword [rax], eax
add byte [rdx - 0x1700002f], cl
adc dword [rax], eax
add dl, dl
sar edi, 1
dec dword [rax]
adc al, byte [rax]
add al, ah
sar edi, 1
ljmp [rax]
adc al, byte [rax]
add byte [rdx], cl
sar bh, cl
dec dword [rax + 0x12]
add byte [rax], al
sar bh, cl
ljmp [rax + 0x12]
add byte [rax], al
and dl, dl
dec dword [rax - 0x7fffffee]
sar bh, cl
push qword [rax - 0x37ffffee]
sar bh, cl
call rax
adc al, byte [rax]
add dh, dl
sar bh, cl
push rax
adc al, byte [rax]
add byte [rax], al
sar edi, cl
call qword [rax]
adc eax, dword [rax]
add dh, al
sar edi, cl
cmp byte [rbx], dl
add byte [rax], al
in al, dx
sar edi, cl
lcall [rax + 0x13]
add byte [rax], al
hlt
inc dword [rax + 0x3a000013]
ljmp [rax + 0x60000013]
dec eax
adc eax, dword [rax]
add byte [rax - 0x28], ch
push rax
adc eax, dword [rax]
add byte [rsi + 0x18ffffd8], ch
adc al, 0
add ah, ch
fdivr st(7)
cmp byte [rax + rax], dl
add byte [rdx], ah
fcos
lcall [rax + 0x14]
add byte [rax], al
fcos
js 0x40560e
add byte [rax], al
xchg eax, esi
fcos
lcall [rax - 0x2bffffec]
fcos
mov eax, 0xa000014
fcom dword [rax + rax]
add byte [rax - 0x26], cl
clc
adc al, 0
add byte [rsi - 0x26], bh
lcall [rax]
adc eax, 0xdac80000
cmp byte [rip - 0x24df0000], dl
lcall [rax + 0x15]
add byte [rax], al
push rdx
js 0x40564f
add byte [rax], al
js 0x405619
lcall [rax - 0x3dffffeb]
mov eax, 0x25000015
fdiv st(7), st(0)
fcom dword [rip - 0x23aa0000]
clc
adc eax, 0xdc7c0000
lcall [rax]
add byte [rax], al
mov al, 0xdc
cmp byte [rsi], dl
add byte [rax], al
fdiv st(7), st(0)
lcall [rax + 0x16]
add byte [rax], al
xor bl, ch
js 0x405690
add byte [rax], al
test ch, bl
lcall [rax - 0x31ffffea]
mov eax, 0x27000016
fdivp st(7)
fcom dword [rsi]
add byte [rax], al
pop rax
fdivp st(7)
clc
add byte [rax], al
jle 0x40567c
lcall [rax]
add byte [rax], al
enter -0x22, -1
cmp byte [rdi], dl
add byte [rax], al
sub ebx, edi
lcall [rax + 0x17]
add byte [rax], al
pop rsp
js 0x4056d1
add byte [rax], al
lcall [rax - 0x49ffffe9]
mov eax, 0xdc000017
fcom dword [rdi]
add byte [rax], al
cmp al, ah
clc
add byte [rax], al
mov ah, al
lcall [rax]
sbb byte [rax], al
add byte [rax + 0x1838ffff], dh
add byte [rax], al
movabs al, byte [0xd300001860ffffe1]
loope 0x4056f6
inc dword [rax + 0x27000018]
loop 0x4056fe
ljmp [rax + 0x50000018]
loop 0x405706
dec eax
sbb byte [rax], al
add byte [rbx], bh
push rax
sbb byte [rax], al
add byte [rdi - 0x1d], ch
call qword [rax]
sbb dword [rax], eax
add bl, al
jrcxz 0x40571e
cmp byte [rcx], bl
add byte [rax], al
int1
jrcxz 0x405726
lcall [rax + 0x19]
add byte [rax], al
in al, 0xff
js 0x40574b
add byte [rax], al
in al, 0xff
lcall [rax + 0x7c000019]
in al, 0xff
mov eax, 0xa2000019
in al, 0xff
fcomp dword [rcx]
add byte [rax], al
shl esp, cl
clc
sbb dword [rax], eax
add dl, ah
in al, 0xff
lcall [rax]
sbb al, byte [rax]
add byte [rax], cl
in eax, 0xff
cmp byte [rdx], bl
add byte [rax], al
cmp esp, ebp
lcall [rax + 0x1a]
add byte [rax], al
insb byte [rdi], dx
in eax, 0xff
js 0x40578c
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
in eax, 0xff
lcall [rax - 0x4dffffe6]
in eax, 0xff
mov eax, 0xd800001a
in eax, 0xff
fcomp dword [rdx]
add byte [rax], al
out 0xe5, al
clc
sbb al, byte [rax]
add byte [rbx - 0x1a], bl
lcall [rax]
sbb eax, dword [rax]
add byte [rcx - 0x1a], ch
cmp byte [rbx], bl
add byte [rax], al
mov dh, ah
lcall [rax + 0x1b]
add byte [rax], al
scasb al, byte [rdi]
out 0xff, al
js 0x4057cd
add byte [rax], al
out 0xff, al
lcall [rax - 0x11ffffe5]
out 0xff, al
mov eax, 0x1400001b
out 0xff, eax
fcomp dword [rbx]
add byte [rax], al
out 0xff, eax
clc
sbb eax, dword [rax]
add byte [rax - 0x19], bh
lcall [rax]
sbb al, 0
add byte [rax + 0x38ffffe7], dh
sbb al, 0
add byte [rsi + 0x58ffffe7], bh
sbb al, 0
add ah, ah
out 0xff, eax
js 0x40580e
add byte [rax], al
out 0xff, eax
lcall [rax + 0x6700001c]
call 0x1cf95801
add byte [rax], al
jne 0x4057ee
fcomp dword [rax + rax]
add byte [rax + rbp*8 + 0x1cf8ffff], dl
add byte [rax], al
mov esi, 0x18ffffe8
sbb eax, 0xe8e00000
cmp byte [rip - 0x16f50000], bl
lcall [rax + 0x1d]
add byte [rax], al
xor eax, 0x78ffffe9
sbb eax, 0xe97d0000
lcall [rax - 0x51ffffe3]
jmp 0x1df95841
add byte [rax], al
fsubr st(1)
fcomp dword [rip - 0x16060000]
clc
sbb eax, 0xea240000
lcall [rax]
add byte [rax], al
insb byte [rdi], dx
cmp byte [rsi], bl
add byte [rax], al
sahf
lcall [rax + 0x1e]
add byte [rax], al
ret 0xffea
js 0x405890
add byte [rax], al
out 0xea, al
lcall [rax + 0xa00001e]
jmp 0x40587e
mov eax, 0x2e00001e
jmp 0x405886
fcomp dword [rsi]
add byte [rax], al
cmp eax, 0xf8ffffeb
add byte [rax], al
push -0x15
lcall [rax]
add byte [rax], al
jns 0x405889
cmp byte [rdi], bl
add byte [rax], al
movabs dword [0x3100001f58ffffeb], eax
in al, dx
inc dword [rax + 0x3f00001f]
in al, dx
jmp qword [rax + 0x5a00001f]
in al, dx
inc eax
add byte [rax], al
imul ebp, esp, 0x1fe0ffff
add byte [rax], al
xchg eax, esi
in al, dx
inc dword [rax]
and byte [rax], al
add byte [rbp + 0x20ffffec], ah
and byte [rax], al
add bh, cl
in al, dx
inc dword [rax + 0x20]
add byte [rax], al
pop rbp
in eax, dx
ljmp [rax + 0x20]
add byte [rax], al
imul ebp, ebp, -1
dec dword [rax - 0x79ffffe0]
in eax, dx
ljmp [rax - 0x25ffffe0]
in eax, dx
dec eax
and byte [rax], al
add ah, dh
in eax, dx
call 0x240592d
out dx, al
dec dword [rax]
and dword [rax], eax
add byte [rsi + rbp*8 - 1], al
ljmp [rax]
and dword [rax], eax
add byte [rsi - 0x12], bl
dec dword [rax + 0x21]
add byte [rax], al
out dx, al
ljmp [rax + 0x21]
add byte [rax], al
in al, 0xee
dec dword [rax - 0x1ffffdf]
out dx, al
ljmp [rax + 0xc000021]
out dx, eax
dec eax
and dword [rax], eax
add byte [rsi - 0x11], cl
call 0x6840596e
out dx, eax
dec dword [rax]
and al, byte [rax]
add byte [rcx + 0x28ffffef], bl
and al, byte [rax]
add dl, dl
out dx, eax
dec dword [rax + 0x22]
add byte [rax], al
sbb eax, 0x68fffff0
and al, byte [rax]
add byte [rbx], ch
dec dword [rax - 0x65ffffde]
mov eax, 0xd2000022
fsub dword [rdx]
add byte [rax], al
sbb eax, 0xf8fffff1
and al, byte [rax]
add byte [rbx], ch
int1
lcall [rax]
and eax, dword [rax]
add byte [rdx + 0x48fffff1], bl
and eax, dword [rax]
add byte [rsi + 0x68fffff1], ch
and eax, dword [rax]
add ah, bl
int1
dec dword [rax - 0xfffffdd]
int1
ljmp [rax + 0x1d000023]
dec eax
and eax, dword [rax]
add byte [rdi], dh
call 0x7e4059e8
dec dword [rax]
and al, 0
add byte [rdx + 0x28fffff2], dl
and al, 0
add byte [rbp + 0x58fffff3], ah
and al, 0
add byte [rdi + 0x78fffff3], bh
and al, 0
add byte [rdx], cl
hlt
lcall [rax + 0x1e000024]
hlt
mov eax, 0x31000024
cmc
call 0x7d405a21
cmc
call qword [rax]
and eax, 0xf5c90000
cmp byte [rip - 0xa290000], ah
lcall [rax + 0x25]
add byte [rax], al
and al, 0xf6
js 0x405a3f
add byte [rax], al
js 0x405a14
lcall [rax - 0x33ffffdb]
idiv bh
mov eax, 0xfd000025
idiv bh
fsub dword [rip - 0x8f50000]
clc
and eax, 0xf7580000
lcall [rax]
add byte es:[rax], al
lodsb al, byte [rsi]
idiv edi
cmp byte [rsi], ah
add byte [rax], al
add al, bh
lcall [rax + 0x26]
add byte [rax], al
xor eax, edi
js 0x405a80
add byte [rax], al
clc
lcall [rax - 0x5cffffda]
clc
inc eax
add byte es:[rax], al
mov ebp, 0xe0fffff8
add byte es:[rax], al
adc eax, 0x8fffff9
add byte [rax], al
stc
ljmp [rax]
add byte [rax], al
pop rbx
stc
dec dword [rax + 0x27]
add byte [rax], al
stc
ljmp [rax + 0x27]
add byte [rax], al
mov dh, 0xf9
dec dword [rax - 0x2cffffd9]
stc
ljmp [rax + 0x4000027]
cli
dec eax
add byte [rax], al
cli
call 0x4f405adc
cli
dec dword [rax]
sub byte [rax], al
add byte [rcx - 6], ch
ljmp [rax]
sub byte [rax], al
add byte [rdx + 0x48fffffa], bl
sub byte [rax], al
add bh, al
cli
ljmp [rax + 0x28]
add byte [rax], al
hlt
cli
dec dword [rax + 0x5000028]
sti
ljmp [rax + 0x6a000028]
sti
dec eax
sub byte [rax], al
add byte [rbx - 5], bh
call 0xffffffffe0405b1d
sti
dec dword [rax]
sub dword [rax], eax
add byte [rsp + rdi*8], ch
push qword [rax]
sub dword [rax], eax
add byte [rax - 4], bh
lcall [rax + 0x29]
add byte [rax], al
xchg eax, edx
cld
js 0x405b3b
add byte [rax], al
cld
jmp qword [rax + 0x4000029]
std
inc eax
sub dword [rax], eax
add byte [rbp + rdi*8 - 1], bl
call 0x6a405b56
std
dec dword [rax]
sub al, byte [rax]
add byte [rbp + rdi*8 + 0x2a28ffff], al
add byte [rax], al
mov ch, 0xfd
dec dword [rax + 0x2a]
add byte [rax], al
ret
std
ljmp [rax + 0x2a]
add byte [rax], al
std
dec dword [rax + 0xe00002a]
ljmp [rax + 0x2b00002a]
dec eax
sub al, byte [rax]
add byte [rax - 0x17000002], dl
sub al, byte [rax]
add byte [rbp + 0x8fffffe], ch
sub eax, dword [rax]
add byte [rdx], dl
ljmp [rax]
sub eax, dword [rax]
add byte [rax], ah
dec dword [rax + 0x2b]
add byte [rax], al
cmp bh, bh
ljmp [rax - 0x57ffffd5]
push rax
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x405bb7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov byte [rcx + 0x2affff], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x405be7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
enter -0x51, -1
add byte [rcx], 0
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rsp + rdi*4], cl
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add dh, bh
mov ebx, 0xfffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
in eax, dx
mov ebx, 0xcffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x405c89
add eax, dword [rax]
or eax, 0x1b030040
or al, 7
or byte [rax + 0x2c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xff
dec dword [rsi + 8]
add byte [rax], al
add al, 0x34
jg 0x405cdc
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea r8, [rbx]
mov word [rbx + rax*4], es
add eax, 0xc083d03
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
hlt
add byte [rax], al
add ah, al
mov ecx, 0xc5ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov ebx, 0x8070c
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
jl 0x405ce6
add byte [rax], al
mov ebx, 0x1bffff
add byte [rax], al
add al, 0x5a
jg 0x405d34
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rsi - 0x45], dl
lcall [rbx]
add byte [rax], al
add byte [rsi + rbx*2], al
jg 0x405d5c
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add byte [rax], al
add byte [rdx - 0x45], cl
lcall [rbx]
add byte [rax], al
add byte [rdx], al
jg 0x405d84
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
add byte [rax], al
add byte [rsi], bh
mov ebx, 0x1bffff
add byte [rax], al
add al, 0x66
jg 0x405dac
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x32000001
mov ebx, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rcx]
add byte [rax], al
mov ebx, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
add dword [rax], eax
add byte [rdx], ch
mov ebx, 0x6affff
add byte [rax], al
add al, 0x6a
jg 0x405e14
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rcx], al
add byte [rax], al
insb byte [rdi], dx
mov ebx, 0x44ffff
add byte [rax], al
add al, 0x7a
jg 0x405e3c
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x405e13
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rax + 0x1bffffbb], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add al, byte [rax]
add byte [rbx + rdi*4 + 0x1bffff], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add dword [rax], eax
add byte [rax + 0x6affffbb], al
add byte [rax], al
add byte [rsi + rdi*2], al
jg 0x405ea4
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 2
add byte [rax], al
ret 0xffbb
inc dword [rax + rax]
add byte [rsi + rcx*4], al
jg 0x405ecc
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x405ea3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rdx]
add byte [rax], al
fidivr word [rbx + 0xeffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add al, byte [rax]
add ah, cl
mov ebx, 0x69ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rdi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
mov esp, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8d, dword [rax]
add byte [rdx], cl
mov esp, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, byte [rax]
add byte [rsi], al
mov esp, 0x6affff
add byte [rax], al
add al, 0x92
jg 0x405f7c
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add al, byte [rax]
add byte [rax - 0x44], cl
inc dword [rax + rax]
add byte [rdx], al
jg 0x405fa4
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x405f7b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 3
add byte [rax], al
mov esp, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rax - 0x44], ah
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
add eax, dword [rax]
add byte [rsp + rdi*4 - 1], bl
ljmp [rdx]
add byte [rax], al
add al, 0xa6
jg 0x40600c
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
jl 0x405fe9
add byte [rax], al
sahf
mov esp, 0x44ffff
add byte [rax], al
add al, 0xb6
jg 0x406034
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x40600b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rdx + 0xeffffbc], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0
add byte [rax + 0x69ffffbc], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rdi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], es
add dl, ch
mov esp, 0x8cffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
add al, 0
add byte [rsi - 0x43], dl
dec dword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
int3
add al, 0
add dl, al
mov ebp, 0x20ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add al, 0
add dl, al
mov ebp, 0x20ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 5
add byte [rax], al
ret 0xffbd
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 5
add byte [rax], al
int3
mov ebp, 0x29ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add rax, -0x422b0000
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add eax, 0xbde00000
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
mov word [rip - 0x42120000], es
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add eax, 0xbdea0000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 5
add byte [rax], al
out 0xbd, al
call qword [rax]
add byte [rax], al
add al, 0xba
jg 0x4061e4
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add eax, 0xbe0e0000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 6
add byte [rax], al
or bh, byte [rsi + 0x1bffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add eax, 0xbe060000
call qword [rax]
add byte [rax], al
add al, 0xbe
jg 0x40624c
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
add byte [rax], al
mov esi, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40624c
add byte [rax], al
sub bh, byte [rsi + 0x1bffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add eax, 0xbe260000
jmp qword [rcx]
add byte [rax], al
add al, 0xc2
jg 0x4062b4
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
mov esi, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 6
add byte [rax], al
pop rsp
mov esi, 0x1bffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
pop rax
mov esi, 0x61ffff
add byte [rax], al
add al, 0xc6
jg 0x40631c
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 7
add byte [rax], al
xchg eax, edx
mov esi, 0xbffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
jle 0x4062d8
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add byte [rax], al
push -0x42
lcall [rsi]
add byte [rax], al
add al, 0xca
jg 0x406384
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
movabs al, byte [0x48ffffbe]
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 7
add byte [rax], al
enter -0x42, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
mov dh, 0xbe
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
sar byte [rsi + 0xbffff], 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 8
add byte [rax], al
lodsb al, byte [rsi]
mov esi, 0xbffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
cwde
mov esi, 0x5effff
add byte [rax], al
add al, 0xd6
jg 0x40644c
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or byte [rax], al
add dh, cl
mov esi, 0x48ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x40644e
add byte [rax], al
idiv byte [rsi + 0xeffff]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or byte [rax], al
add ah, ah
mov esi, 0x2affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 8
add byte [rax], al
out dx, al
mov esi, 0xc6ffff
add byte [rax], al
add al, 0xe2
jg 0x4064d4
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov esp, 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 8
add byte [rax], al
mov edi, 0xbffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 9
add byte [rax], al
js 0x406491
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rax], cl
add byte [rax], al
mov edi, 0x5effff
add byte [rax], al
add al, 0xe6
jg 0x40653c
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or qword [rax], r8
add byte [rdx + 0x48ffffbf], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
or dword [rax], eax
add dl, al
mov edi, 0xeffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], cs
add byte [rax], al
mov al, 0xbf
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or dword [rax], eax
add byte [rdx + 0xbffffbf], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
or dword [rax], eax
add byte [rsi + 0xbffffbf], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or qword [rax], r8
add byte [rdx + 0x5effffbf], dl
add byte [rax], al
add byte [rdx + rsi*8], al
jg 0x406604
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xa
add byte [rax], al
enter -0x41, -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0xa
add byte [rax], al
mov edi, 0xeffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or al, byte [rax]
add dh, bl
mov edi, 0x2affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or dword [rax], eax
add al, ch
mov edi, 0xc6ffff
add byte [rax], al
add al, 0xfe
jg 0x40668c
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov esp, 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or al, byte [rax]
add byte [rsi + 0x26ffffc0], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0xa
add byte [rax], al
mov eax, es
inc dword [rdi]
add al, byte [rax]
add byte [rsp + rax], al
add byte [rax], 0x41
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
std
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
or r8b, byte [rax]
add byte [rdx + rax*8 - 1], ch
inc dword [rbp]
add byte [rax], al
add al, 0x2c
add byte [rax], 0x41
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0xb
add byte [rax], al
mov al, dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rdx], cs
add byte [rax], al
nop
ret 0xffff
add al, byte [rax]
add byte [rax + rsi], al
add byte [rax], 0x41
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
std
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov ah, 0xa
add byte [rax], al
jo 0x4066e6
inc dword [rbp]
add byte [rax], al
add al, 0x58
add byte [rax], 0x41
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x406751
add byte [rax], al
mov es, esp
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x406767
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or eax, dword [rax]
add byte [rsp + rax*8 + 0x35ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jo 0x406787
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xc200000b
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x4067a7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rbx]
add byte [rax], al
loopne 0x40676e
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x4067c7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or eax, dword [rax]
add dh, dh
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x4067e7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xc
add byte [rax], al
adc al, 0xc5
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x406807
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xc
add byte [rax], al
sub al, ch
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x406827
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or al, 0
add byte [rax - 0x3b], cl
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x406847
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x406852
add byte [rax], al
pop rsi
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
or al, 0
add byte [rax + 0x59ffffc5], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xc100000c
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rax + rax]
add dl, dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or al, 0
add al, bl
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0xd
add byte [rax], al
add al, dh
jmp qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0xd
add byte [rax], al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or eax, 0xc6560000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x406953
add byte [rax], al
pop rsp
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or eax, 0xc6700000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x7600000d
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fmul qword [rip - 0x394e0000]
call qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
or eax, 0xc6e40000
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0xe
add byte [rax], al
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 0xe
add byte [rax], al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
pop rax
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x406a54
add byte [rax], al
pop rsi
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
add byte [rax], al
mov bh, al
jmp qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xcb00000e
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rsi]
add byte [rax], al
fadd st(7), st(0)
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
loop 0x406a91
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xf
add byte [rax], al
test bh, 0xff
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xf
add byte [rax], al
cld
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
sldt word [rax]
cmp al, cl
call qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x406b55
add byte [rax], al
push -0x38
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pushfq
sldt word [rax]
je 0x406b32
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x406b8b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
cmp cl, cl
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 0xf
add byte [rax], al
leave
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x10
add byte [rax], al
ja 0x406ba3
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0x10
add byte [rax], al
or cl, 0xff
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x406c1b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
adc byte [rax], al
add byte [rdx + rcx*8 - 1], al
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x406c4e
add byte [rax], al
push rdi
retf -1
push rsp
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc byte [rax], al
add byte [rbx + 0x2effffca], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
mov esp, 0x91000010
retf -1
add byte cs:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
fcom qword [rax]
add byte [rax], al
lahf
retf -1
add byte cs:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
cld
adc byte [rax], al
add byte [rbp + 0x2effffca], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
sbb al, 0x11
add byte [rax], al
mov esp, 0x26ffffca
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x11
add byte [rax], al
ret 0xffca
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc dword [rax], eax
add bl, dl
retf -1
sldt word [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x406d57
add byte [rax], al
ret 0xffca
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc dword [rax], eax
add al, cl
retf -1
xor eax, dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xdb000011
retf -1
xor dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rcx]
add byte [rax], al
in al, dx
retf -1
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x406dc7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc dword [rax], eax
add byte [rbx + rcx*8], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x12
add byte [rax], al
bnd retf -1
add byte es:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x12
add byte [rax], al
clc
retf -1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc al, byte [rax]
add dh, ah
retf -1
jne 0x406e2e
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x406e58
add byte [rax], al
cmp ecx, ebx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc al, byte [rax]
add byte [rcx], ch
retf
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x28000012
retf
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rdx]
add byte [rax], al
retf
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc al, byte [rax]
add byte [rdi], bh
retf
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x13
add byte [rax], al
retf
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x13
add byte [rax], al
xor al, 0xcb
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc eax, dword [rax]
add byte [rdi - 0x35], al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x406f59
add byte [rax], al
pop rax
retf
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x406f67
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc eax, dword [rax]
add byte [rax - 0x35], dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x5e000013
retf
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rbx]
add byte [rax], al
retf
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc eax, dword [rax]
add byte [rdx - 0x35], dl
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0x14
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
retf
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x14
add byte [rax], al
xchg eax, ebp
retf
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc al, 0
add byte [rbx + rcx*8 + 0x29ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40705a
add byte [rax], al
sahf
retf
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
adc al, 0
add byte [rax + 0x2bffffcb], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xab000014
retf
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rax + rax]
add byte [rbp + 0x48ffffcb], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
adc al, 0
add ch, bl
retf
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x15
add byte [rax], al
out dx, al
retf
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x15
add byte [rax], al
clc
retf
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
adc eax, 0xcbfa0000
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40715b
add byte [rax], al
add al, 0xcc
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
adc eax, 0xcc2c0000
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x3e000015
int3
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcom qword [rip - 0x33be0000]
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
adc eax, 0xcc460000
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x16
add byte [rax], al
int3
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x16
add byte [rax], al
int3
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
cmp eax, 0x2dffffcc
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40725c
add byte [rax], al
int3
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
cmp esp, ecx
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0x16
add byte [rax], al
int3
dec dword [rsi + 0x4000000]
pop rsp
add byte [rax], 0x41
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
test byte [rdi + rax], cl
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x16
add byte [rax], al
test eax, 0xeffffcc
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x17
add byte [rax], al
xchg eax, edi
int3
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x17
add byte [rax], al
xchg eax, edx
int3
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
or esp, 0x2dffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
mov cs, esp
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], dl
add byte [rax], al
jge 0x40731e
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0x17
add byte [rax], al
xchg esp, ecx
dec dword [rsi + 0x4000000]
je 0x4072fb
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
test byte [rdi + rax], cl
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
in eax, dx
int3
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
fcmovne st(0), st(4)
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x18
add byte [rax], al
int3
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x18
add byte [rax], al
or cl, ch
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb byte [rax], r8b
add byte [rcx*8 + 0xeffff], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb byte [rax], al
add dl, dh
int3
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x407457
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax], ds
add byte [rax], al
adc al, 0xcd
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb byte [rax], al
add byte [rsi], cl
int 0xff
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb byte [rax], al
add byte [rdi], bl
int 0xff
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
sbb byte [rax], al
add byte [rbp + rcx*8 - 1], dl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x19
add byte [rax], al
int 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x19
add byte [rax], al
cmp al, 0xcd
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x407517
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb qword [rax], r8
add byte [rsi - 0x33], bl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
sbb dword [rax], eax
add byte [rax - 0x33], bl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], ds
add byte [rax], al
imul ecx, ebp, 0x38ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x407577
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb dword [rax], eax
add byte [rdx + 0x4bffffcd], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
sbb dword [rax], eax
add byte [rbp + 0xeffffcd], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
sbb qword [rax], r8
add byte [rbx + 0x6fffffcd], bl
add byte [rax], al
add byte [rsp + rcx*4], al
add byte [rax], 0x41
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0x1a
add byte [rax], al
fcmove st(0), st(5)
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x407607
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x1a
add byte [rax], al
int 0xff
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
sbb al, byte [rax]
add byte [rip + 0xeffffce], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
fcomp qword [rcx]
add byte [rax], al
or ecx, esi
ljmp [rdi]
add byte [rax], al
add al, 0x98
add byte [rax], 0x41
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
sbb al, byte [rax]
add byte [rdx - 0x32], cl
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
sbb al, byte [rax]
add byte [rsi], bh
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
sbb al, byte [rax]
add byte [rsi + rcx*8 - 1], cl
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1b
add byte [rax], al
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1b
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb r8, qword [rax]
add byte [rdi - 0x32], al
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
sbb eax, dword [rax]
add byte [rsi - 0x32], ch
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
in al, dx
sbb al, byte [rax]
add byte [rdx - 0x32], ah
call qword [rbx]
add dword [rax], eax
add byte [rsp], al
add byte [rax], 0x41
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0x4500001b
iretd
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rbx]
add byte [rax], al
iretd
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
sbb eax, dword [rax]
add byte [rdx - 0x31], ch
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
jl 0x407801
add byte [rax], al
pop rsi
iretd
call qword [rbx]
add dword [rax], eax
add byte [rsp + rdi*4], al
add byte [rax], 0x41
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sbb al, 0
add byte [rcx - 0x30], al
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x40785a
add byte [rax], al
sar bh, 1
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
sbb al, 0
add byte [rcx + 0xeffffd0], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x7700001c
sar bh, 1
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fcomp qword [rax + rax]
add byte [rax + rdx*8 + 0x53ffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
sbb al, 0
add al, bl
sar bh, 1
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0x1d
add byte [rax], al
or al, 0xd1
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0x1d
add byte [rax], al
sbb eax, 0xeffffd1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
sbb eax, 0xd10b0000
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x407963
add byte [rax], al
cmp cl, dl
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
sbb eax, 0xd16c0000
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xa000001d
sar edi, 1
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fcomp qword [rip - 0x2e4f0000]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
sbb eax, 0xd1ab0000
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x1e
add byte [rax], al
fcmovnbe st(0), st(1)
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
sar edi, 1
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
add eax, 0x29ffffd2
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rsi], ds
add byte [rax], al
sar bh, cl
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
or edx, edx
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
sbb al, 0xd2
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
sar bh, cl
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x1f
add byte [rax], al
and edx, edx
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x1f
add byte [rax], al
xor al, 0xd2
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
sar bh, cl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
sar bh, cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdi], ds
add byte [rax], al
cmp edx, edx
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
sar dil, cl
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
push rdi
sar bh, cl
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
sar bh, cl
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x20
add byte [rax], al
push rbp
sar bh, cl
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 0x20
add byte [rax], al
sar bh, cl
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and byte [rax], r8b
add byte [rbx + 0x65ffffd2], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
insb byte [rdi], dx
and byte [rax], al
add al, dl
sar bh, cl
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
and byte [rax], al
add ah, dh
sar bh, cl
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x18000020
sar edi, cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fsub qword [rax]
add byte [rax], al
adc dl, bl
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x21
add byte [rax], al
sar edi, cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
and al, 0x21
add byte [rax], al
cmp al, 0xd3
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and qword [rax], r8
add byte [rbx + rdx*8 - 1], ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
and dword [rax], eax
add byte [rdx - 0x2d], bl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], fs
add byte [rax], al
push rsp
sar edi, cl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
and dword [rax], eax
add byte [rbp - 0x2d], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and dword [rax], eax
add byte [rbx - 0x2d], dl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
and dword [rax], eax
add byte [rbp - 0x2d], cl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0x22
add byte [rax], al
pop rsi
sar edi, cl
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0x22
add byte [rax], al
pop rbx
sar edi, cl
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and r8b, byte [rax]
add byte [rax + 0x1dffffd3], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
and al, byte [rax]
add byte [rbp + 0x65ffffd3], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rdx], fs
add byte [rax], al
loop 0x407e2d
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
and al, byte [rax]
add al, dl
sar edi, cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
and al, byte [rax]
add byte [rcx - 0x41000068], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add bh, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
in al, dx
and al, byte [rax]
add byte [rdi - 0x67], cl
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rbx], cl
add byte [rax], al
mov bl, dl
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x407f12
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
push rsp
and eax, dword [rax]
add byte [rax + 0x2ffffd3], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
and ch, byte [rsi]
sbb al, byte [rax]
add byte [rsi + 0xfd20501], al
add byte [rdi + 0xfc10501], ah
add al, al
add al, byte [rip - 0x1effef71]
add al, byte [rip - 0x43fff002]
add edi, edi
or al, 0
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add bh, bh
add esp, dword [rip + 0x54601a01]
add byte [rax], al
in eax, 1
sub esp, dword [rsi + 0x2b80103]
cmp al, byte [rax]
add bl, cl
add esp, dword [rcx]
in al, dx
add eax, dword [rax]
cli
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x54601a01]
add byte [rax], al
in eax, 1
sub esp, dword [rsi + 0x2b80103]
cmp al, byte [rax]
add bl, cl
add esp, dword [rcx]
in al, dx
add eax, dword [rax]
cli
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
add edx, dword [rip + 0x53d0d01]
push rsp
add dword [rdx + 0xa], ebp
je 0x408069
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rbx]
adc eax, 0x53d0d01
push rsp
add dword [rdx + 0xa], ebp
je 0x408081
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, 0
add byte [rax], al
add ah, dl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
lea esp, [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
lea esp, [rax]
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 0x4005], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4008], ah
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rax + rcx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
mov fs, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xb, al
add byte [rax], al
add byte [rax], al
add dh, dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400c], al
add byte [rax], al
add byte [rsi + 0x400c], dl
add byte [rax], al
add byte [rsi + 0x400c], ah
add byte [rax], al
add byte [rsi + 0x400c], dh
add byte [rax], al
add dh, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x409158
je 0x409161
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40916f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40916c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 0x4005], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rax + rcx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax + 0x4008], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax], ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, byte [rax]
push 0x4009
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0x400b], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
mov al, 0xb
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x400d3000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0xd], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add ah, dl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add al, ah
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax], ch
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x405b], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rdi + rdi*2], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40f392
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x608df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
mov fs, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], cl
mov fs, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb byte [rax], al
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add al, dl
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, ah
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
mov fs, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax + 0xd], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400d], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dh
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax], dl
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x608df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40f52a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add al, ch
push rdx
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x6093], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add cl, ch
push rdx
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add dl, ch
push rdx
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add al, dh
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rcx + 0x17], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rdi], ch
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add byte [rdi], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], al
add byte [rcx], al
add byte [rdx], dl
add byte [rax], dh
jg 0x4095cb
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 1], dl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
mov fs, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], bl
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
sub byte [rbx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], dh
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rcx], eax
add byte [rax], al
add byte [rax], al
adc al, 0
clc
lea esp, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
call 0x40f6aa
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000001], ch
add byte [rdi], dl
add byte [rax], cl
mov fs, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 1
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x35], bh
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
rcl byte [rax + 0x60], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc byte [rcx]
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
loopne 0x409622
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x22000002
add byte [rsi], cl
add byte [rcx*2 + 0x40], ch
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jnp 0x4096ec
add byte [rax], al
and al, byte [rax]
add dh, bh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdx], al
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add bh, bl
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x2e], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 3
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 3], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x409795
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax + 0x220000], dl
add dh, bl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax + 0x220000], bh
add byte [rsp + rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add bl, ch
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x404e], dl
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], cl
add byte [rax], al
and al, byte [rax]
add dl, ch
add byte cs:[rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000004], al
add byte [rsi], cl
add dl, al
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add al, bh
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add bl, cl
add byte ds:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx + 5], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x402d], ah
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rip + 0x220000], eax
add byte [rsi + 0x42], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rax + 0x220000], ah
add byte [rdx + rax*2], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
add eax, 0x220000
add byte [rdx + 0x4032], ch
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + 6], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x12000006
add byte [rsi], cl
add al, dl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 6], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x403f], bh
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000006], dh
add byte [rsi], cl
add byte [rdx + 0x2c], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
and al, byte [rax]
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000007], ch
add byte [rsi], cl
add byte [rsi + 0x1f], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 7], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
sub eax, 0x40
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000007], bl
add byte [rsi], cl
add byte [rsi], dh
push rcx
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rip + 0x1200001e], al
add byte [rsi], cl
add byte [rax + 0xd], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
add byte [rax], al
and al, byte [rax]
add byte [rax + rdi + 0x40], dl
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ecx, dword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x44], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x22000008
add byte [rsi], cl
add byte [rdx + 0x30], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4025], ch
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x403b], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000009], bl
add byte [rsi], cl
add bh, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbx + 9], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 9
add byte [rax], al
and al, byte [rax]
add dh, cl
sbb eax, 0x40
add byte [rax], al
mov word [rax], es
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1f], bh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x43], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000a], dh
add byte [rsi], cl
add byte [rdx + 0x40], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ecx, dword [rdx], 0x220000
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000a], dl
add byte [rsi], cl
add byte [rcx + 0x4039], dl
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x402e], ah
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x403f], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx + 0x220000], al
add byte [rdi + 0x4041], dh
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add bl, ch
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], al
add byte [rax], al
and al, byte [rax]
add bl, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000c], dl
add byte [rsi], cl
add byte [rax], ch
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x37], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
or eax, 0x220000
add byte [rbp + 0x403b], bl
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xd], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4045], bh
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x404a], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
or eax, 0x220000
add byte [rsi + 0x4018], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200000d], bh
add byte [rsi], cl
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rip + 0x200000], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2000000e], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
and al, byte [rax]
add cl, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], dh
add byte [rax], al
and al, byte [rax]
add byte [rax], al
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx + 0x220000], dh
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add byte [rax], al
and al, byte [rax]
add cl, al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
and al, byte [rax]
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
sldt word [rax]
and al, byte [rax]
add byte [rdx + 0x18], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], al
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word gs:[rax]
and al, byte [rax]
add byte [rax + 0x402b], dl
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cs, word [rdi]
add byte [rax], al
and al, byte [rax]
add dh, dl
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x2200000f
add byte [rsi], cl
add byte [rbx + 0x43], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
int1
sldt word [rax]
and al, byte [rax]
add byte [rbp + 0x4040], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000010], bl
add byte [rsi], cl
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rax + rdx], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbx + 0x40], bh
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x409db0
add byte [rax], al
adc al, byte [rax]
lldt sp
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x10], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x22], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000010], bl
add byte [rsi], cl
add byte [rsi + 0x4c], ah
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add cl, bl
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
cmp eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword ds:[rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x11], ah
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
and eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rcx], dl
add byte [rax], al
and al, byte [rax]
add ch, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdx], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x2d], dh
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdi + 0x12], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x409edc
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4045], ah
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, 0x12
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4021], cl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
adc al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x4b], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x13], al
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4d], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x13], bh
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x45], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000013], bh
add byte [rsi], cl
add byte [rbx + rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
sbb eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax - 0x6d], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdx], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x32], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x14], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4018], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x14], bh
add byte [rax], al
and al, byte [rax]
add bl, bh
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000014], ch
add byte [rsi], cl
add byte [rsi], dl
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x401b], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add al, ch
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x18], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
adc eax, 0x220000
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
adc eax, 0x220000
add byte [rax], dh
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
adc eax, 0x220000
add ch, ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
adc eax, 0x220000
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add bh, dl
adc eax, 0x220000
add ah, cl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000016], bl
add byte [rsi], cl
add byte [rdx + 0x4018], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x16], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4045], bh
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], bl
add byte [rax], al
and al, byte [rax]
add dh, dl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul edx, dword [rsi], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x37], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000016], dh
add byte [rsi], cl
add byte [rax + 0x403a], ah
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [rax], al
and al, byte [rax]
add byte [rdi + rsi + 0x40], ah
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4018], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdx], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
and al, byte [rax]
add bl, ch
add byte ss:[rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x17], ah
add byte [rax], al
and al, byte [rax]
add dl, cl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000017], ch
add byte [rsi], cl
add byte [rax + 0x4022], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
and eax, 0x40
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x403e], ah
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x18], dl
add byte [rax], al
and al, byte [rax]
add dl, dh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40a212
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x42], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000018], dl
add byte [rsi], cl
add byte [rbx + 0x43], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0x18
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
sbb byte [rax], al
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x6093], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
sbb dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4039], dh
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rcx*2], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x19], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx + rax*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x19], dh
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4019], ah
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000019], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, dh
and byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0x1a
add byte [rax], al
and al, byte [rax]
add dl, ch
cmp eax, 0x40
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte fs:[rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x404c], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, al
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4031], ah
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x2200001b
add byte [rsi], cl
add byte [rdx + 0x4024], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ebx, dword [rbx]
add byte [rax], al
and al, byte [rax]
add al, cl
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1b], bl
add byte [rax], al
adc dword [rax], eax
adc byte [rax], al
loopne 0x40a3ec
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add ah, al
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
jne 0x40a3d2
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x2240a3f8
add byte [rsi], cl
add byte [rdx + rbx + 0x40], dl
add byte [rax], al
imul eax, dword [rax], 0
add byte [rax], al
adc byte [rax + rax], bl
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4033], dh
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1c], ch
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x31], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200001c], ah
add byte [rsi], cl
add byte [rcx + rax*2], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x45], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x2200001d
add byte [rsi], cl
add dh, dl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1d], ch
add byte [rax], al
and al, byte [rax]
add ah, al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200001d], cl
add byte [rsi], cl
add byte [rsi + 0x3e], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200001d], dh
add byte [rsi], cl
add byte [rsp + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0x1d
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lcall [rip + 0x100000]
sbb al, byte [rax]
rcl byte [rax + 0x60], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x1e
add byte [rax], al
and al, byte [rax]
add dl, al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200001e], dl
add byte [rsi], cl
add byte [rsi + 0x4021], dl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200001e], bh
add byte [rsi], cl
add byte [rsi + 0x4040], ch
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdi + rbx], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + rax*2], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor bl, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1f], dh
add byte [rax], al
and al, byte [rax]
add byte [rcx + rcx*2 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x404e], ch
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x40a5d9
add byte [rax], al
and al, byte [rax]
add al, dh
and byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub esp, dword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
sub eax, 0x40
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x20], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000020], cl
add byte [rsi], cl
add byte [rsi + 0x403f], bh
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dl, bl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dh, dh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x25], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x18], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000021], al
add byte [rsi], cl
add byte [rsi + 0x1f], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000021], dh
add byte [rsi], cl
add byte [rsi + 0x23], dh
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4018], bh
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb ah, byte [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rcx + rax*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22], dl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x44], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000022], bl
add byte [rsi], cl
add byte [rcx + 0x404d], dl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rsi + 0x40], ch
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add ch, dh
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x1f], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000023], dl
add byte [rsi], cl
add byte [rsi + 0x4d], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x23], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rdx], ah
add byte [rsi], cl
add dl, dh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4049], ah
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000023], dh
add byte [rsi], cl
add byte [rax + 0x4029], cl
add byte [rax], al
add byte [rdi], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add bl, bl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2f], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0x24
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4036], dl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000024], ah
add byte [rsi], cl
add byte [rsi], cl
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
jne 0x40a852
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x22000025
add byte [rsi], cl
add byte [rax + 0x4039], dh
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000025], dl
add byte [rsi], cl
add ch, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
and eax, 0x220000
add byte [rbp + 0x4048], ah
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x25], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000025], ch
add byte [rsi], cl
add byte [rdx + 0x2c], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
and eax, 0x220000
add ah, ah
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x220000
add dh, ch
add byte es:[rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte es:[rax], al
and al, byte [rax]
add byte [rdx + 0x20], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x26], al
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x51], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add byte es:[rax], al
adc dword [rdx], eax
sbb al, byte [rax]
loopne 0x40a8e2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x220000], ah
add dh, bl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
add byte es:[rax], al
and al, byte [rax]
add byte [rbp + 0x2f], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
and al, byte [rax]
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add byte [rax], al
and al, byte [rax]
add bh, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rsi + 0x11000027], dl
add byte [rbx], bl
add byte [rax], al
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000027], ch
add byte [rsi], cl
add al, dh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add dh, ah
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
sub byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 8], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte cs:[rax], al
add byte [rcx], dl
add bl, byte [rdx]
add al, bl
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
and eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1f], bh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov gs, word [rax]
add byte [rax], al
and al, byte [rax]
add byte [rax + rdx*2], ch
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, dx
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4050], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x29], bl
add byte [rax], al
and al, byte [rax]
add byte [rdi + rcx*2 + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000029], ch
add byte [rsi], cl
add byte [rdx + 0x4021], ah
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
shr byte [rcx], 1
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1e], bl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
sub dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x52], ah
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x29], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add bh, ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jl 0x40ab54
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
and eax, 0x40
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x2a
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
and eax, 0x40
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 0x2a
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x404f], bh
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x20], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp], dh
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200002b], ah
add byte [rsi], cl
add byte [rax + 0x4042], dl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x47], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], ah
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x1a], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbp], al
add byte [rdx], ah
add byte [rsi], cl
add bh, ch
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdx + 0x2200002c], bh
add byte [rsi], cl
add byte [rdi + 0x35], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4018], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
sub eax, 0x220000
add byte [rax + 0x4031], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
sub eax, 0x220000
add byte [rax + 0x4022], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2d], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x403e], dl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200002d], bl
add byte [rsi], cl
add al, bl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
shr dword [rip + 0x220000], 0xe
add dh, bh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x40ad07
add byte [rax], al
and al, byte [rax]
add al, bl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rsi], ebp
add byte [rax], al
and al, byte [rax]
add byte [rdx + rsi + 0x40], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte cs:[rax], al
and al, byte [rax]
add byte [rax + 0x52], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2e], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x402d], ah
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosb byte [rdi], al
add byte cs:[rax], al
and al, byte [rax]
add byte [rdx + 0x403f], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
add byte cs:[rax], al
and al, byte [rax]
add ah, dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbp], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4022], bl
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x40adb1
add byte [rax], al
and al, byte [rax]
add dl, bl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1100002f], ch
add byte [rbx], bl
add byte [rax - 0x6d], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200002f], ch
add byte [rsi], cl
add byte [rdx + 0x1e], bh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
and al, byte [rax]
add byte [rdx + rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
xor byte [rax], al
add byte [rax], dl
add byte [rbx], bl
add al, ah
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add bl, bh
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x30], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x3f], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000030], ch
add byte [rsi], cl
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x401e], bl
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
xor byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x24], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rdi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rcx], 0x220000
add byte [rdx + 0x40], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 0x31
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4c], ah
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add ah, dh
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x33], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rdx], dh
add byte [rax], al
and al, byte [rax]
add bl, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000032], al
add byte [rsi], cl
add byte [rax + 0x4019], ah
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000032], ah
add byte [rsi], cl
add byte [rcx + 0x403f], dl
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add bl, ch
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x404f], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rdi + 0x40], bh
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rbx], esi
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x401c], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000033], ch
add byte [rsi], cl
add byte [rbp + 0x403c], ah
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
xor eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x404a], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rsi + 0x40], ch
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x34], dl
add byte [rax], al
and al, byte [rax]
add dh, al
cmp eax, 0x40
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax + rax], 0
and al, byte [rax]
add ch, cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000034], bh
add byte [rsi], cl
add byte [rax + 0x22], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
xor al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
xor eax, 0x220000
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000035], dh
add byte [rsi], cl
add byte [rcx + rbx + 0x40], bh
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
xor eax, 0x220000
add ch, dl
push rcx
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x35
add byte [rax], al
and al, byte [rax]
add dl, al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x220000
add byte [rax + 0x401b], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
xor eax, 0x220000
add byte [rsp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dh, byte [rsi]
add byte [rax], al
and al, byte [rax]
add al, dh
and eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x36], dl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x38], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000036], dl
add byte [rsi], cl
add al, bl
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
add byte ss:[rax], al
and al, byte [rax]
add byte [rsi + 0x401c], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x404e], ah
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdi
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbp], bl
add byte [rax], al
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rdi], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], cl
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000037], dl
add byte [rsi], cl
add byte [rip + 0x404c], bh
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4051], bh
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbx], bh
cmp byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul edi, dword [rax], 0x220000
add byte [rax*2 + 0x40], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
cmp byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ch
add byte es:[rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
cmp byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x401a], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdi], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1f], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdi], dl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4021], dl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x39], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
add dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add byte [rax + 0x6093], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000039], cl
add byte [rsi], cl
add byte [rsi + 0x20], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4031], ah
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc edi, dword [rdx]
add byte [rax], al
and al, byte [rax]
add al, bl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, byte [r8]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdi + 0x220000], al
add byte [rbx + 0x44], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x2200003a
add byte [rsi], cl
add byte [rdi + 0x3a], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x47], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dh
sub eax, 0x40
add byte [rax], al
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x3b], al
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3b], ah
add byte [rax], al
and al, byte [rax]
add byte [rbx], dh
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200003b], cl
add byte [rsi], cl
add byte [rdx + 0x18], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1200003b], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
cmp eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdi], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4021], cl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3c], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200003c], dh
add byte [rsi], cl
add byte [rsi + 0x4041], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
cmp al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
cmp eax, 0x220000
add byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
cmp eax, 0x220000
add byte [rax], ch
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3d], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rip + 0x220000], bh
add byte [rbx + 0x4b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 0x3d
add byte [rax], al
and al, byte [rax]
add byte [rdi], al
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add bl, ah
cmp eax, 0x220000
add dh, dl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte ds:[rax], al
and al, byte [rax]
add ch, bl
push rax
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ah
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x3e], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rsi], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4022], bl
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x2200003e
add byte [rsi], cl
add byte [rbp + 0x3e], ah
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rax], cl
add byte [rax], al
and al, byte [rax]
add byte [rsp + rcx*2 + 0x40], dh
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x3e], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x3c], bl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0x3f
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dh
add byte ds:[rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax*2], al
add byte [rax], al
and al, byte [rax]
add ah, ah
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4040], dl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x40], al
add byte [rax], al
and al, byte [rax]
add dl, bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rax], al
add byte [rax], dl
add byte [rdx], bl
add al, ah
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000040], cl
add byte [rsi], cl
add byte [rdi + rbp + 0x40], ah
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1a], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4021], ah
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x41
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000041], bl
add byte [rax], al
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[r8], al
and al, byte [rax]
add byte [rdx + 0x4018], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x41], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x402c], bh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000041], cl
add byte [rsi], cl
add byte [rdx], bh
push rdx
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [r8], al
and al, byte [rax]
add byte [rax + 0x402e], ah
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], cl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4051], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x42], bl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4039], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000042], ah
add byte [rsi], cl
add byte [rsi + 0x4020], cl
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], cl
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x20], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000043], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000043], bh
add byte [rsi], cl
add byte [rsi + 0x402c], bh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x43], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x2e], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000043], bh
add byte [rsi], cl
add byte [rax + rdx*2 + 0x40], ch
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x40b7e5
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x48], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], r8b
and al, byte [rax]
add byte [rax], al
cmp eax, 0x40
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, dword [rax + rax]
and al, byte [rax]
add byte [rdi + rsi + 0x40], ah
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x44], al
add byte [rax], al
and al, byte [rax]
add byte [rsp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x22000044
add byte [rsi], cl
add dh, ah
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000044], bl
add byte [rsi], cl
add ah, bl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add byte [rax], r8b
and al, byte [rax]
add ah, bh
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdx], cl
add byte [r8], r8b
and al, byte [rax]
add byte [rax + 0x402c], cl
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rcx], bh
add byte [r8], r8b
and al, byte [rax]
add byte [rsi + 0x4020], cl
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul eax, dword [rbp], 0
and al, byte [rax]
add byte [rsp], bh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000045], cl
add byte [rsi], cl
add byte [rdx + 0x25], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rbp], 0
and al, byte [rax]
add byte [rdx + 0x1d], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
in al, 0x45
add byte [rax], al
and al, byte [rax]
add byte [rax + rdx*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000046], bh
add byte [rsi], cl
add byte [rax + 0x24], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x46], ah
add byte [rax], al
and al, byte [rax]
add byte [rbp + rdi + 0x40], dl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], r8b
and al, byte [rax]
add byte [rdx], cl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
add byte [rax], r8b
and al, byte [rax]
add dh, dh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [r8], r8b
adc al, byte [rax]
add byte [rsi + rdx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
sub dword [rax], eax
add byte [rdx], dl
add byte [rbx], cl
add byte [rax + 0x400b], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000047], cl
add byte [rsi], cl
add byte [rsi], bh
and eax, 0x40
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
and al, byte [rax]
add byte [rdx + 0x403e], dl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x47], bh
add byte [rax], al
and al, byte [rax]
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000047], ah
add byte [rsi], cl
add byte [rdi + 0x3f], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [r8], r8b
and al, byte [rax]
add byte [rsi + rsi + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x40ba5a
jne 0x40ba4e
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40ba0e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40ba8c
jb 0x40ba92
pop rdi
jne 0x40ba9b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x40ba95
je 0x40ba91
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40bab1
jb 0x40bab7
pop rdi
jne 0x40bac0
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40bac3
jns 0x40bab3
outsb dx, byte gs:[rsi]
je 0x40baca
jns 0x40ba5a
jb 0x40babe
insd dword [rdi], dx
pop rdi
jne 0x40bad0
insd dword [rdi], dx
jns 0x40ba66
pop rdi
pop rdi
jb 0x40bacc
insd dword [rdi], dx
pop rdi
jne 0x40bade
insd dword [rdi], dx
jns 0x40bad3
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40bade
jns 0x40bade
outsb dx, byte gs:[rsi]
je 0x40baf5
jns 0x40ba85
movsxd rbp, dword [rsi]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x40badc
xor dword [rcx], edi
jo 0x40bafd
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40bb15
jb 0x40bb18
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x40baf7
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x40bb06
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40bb25
jb 0x40bb30
add byte [rdi + 0x5a], bl
push rbx
je 0x40bb1b
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
xor r13, qword [rcx + 0x6e]
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x40bb5b
je 0x40bb53
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x40bb61
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x40bb77
jb 0x40bb7a
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x40bb8f
pop rdi
pop r15
insd dword [rdi], dx
imul esi, dword fs:[rbx + 0x74], 0x465f5f00
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40bbd3
jns 0x40bbd3
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40bbe4
jns 0x40bbe4
jae 0x40bbfb
jb 0x40bbfe
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
push r11
je 0x40bbd3
jbe 0x40bc04
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x40bbf2
jbe 0x40bc23
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x40bc16
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40bc30
jbe 0x40bc61
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x6d], eax
push rdx
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40bc4c
xor byte [rdi + 0x49], bl
je 0x40bc85
jb 0x40bc81
jae 0x40bc8b
push r11
je 0x40bc5b
xor ebp, dword [rbp + 0x6f]
jbe 0x40bc94
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40bc81
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x40bcae
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40bca0
xor byte [rdi + 0x5f], bl
jne 0x40bce1
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40bcfc
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40bcfd
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40bd11
push r11
je 0x40bccd
xor ebp, dword [rbp + 0x6f]
jbe 0x40bd06
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor ebx, dword [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x40bcfc
pop rdi
jae 0x40bd3d
jb 0x40bd3a
jns 0x40bd16
push rax
js 0x40bd15
jbe 0x40bd26
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40bd1b
xor byte [rdi + 0x5f], bl
je 0x40bd56
jb 0x40bd5f
ja 0x40bd51
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40bd60
pop rdi
jb 0x40bd6e
outsd dx, dword [rsi]
jb 0x40bd4f
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x40bd5c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bd8f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40bd98
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40bd8c
js 0x40bd8a
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40bd54
pop rdi
pop rdx
push rbx
je 0x40bd8b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40bdcc
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40bdb0
jbe 0x40bde1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40bdd3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40be14
js 0x40be05
js 0x40bdfb
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
js 0x40be37
add byte [rdi + 0x5a], bl
push r11
je 0x40be03
xor ebp, dword [rbp + 0x6f]
jbe 0x40be3c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor al, 0x62
jae 0x40be4e
jbe 0x40bdec
pop rdi
pop rdx
push rbx
je 0x40be23
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40be64
push r11
je 0x40be39
jbe 0x40be6a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40be5f
js 0x40be55
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40be89
pop rdi
jae 0x40be9b
outsd dx, dword [rsi]
jb 0x40be8b
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40be66
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40be9f
je 0x40beb4
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40be9a
xor byte [rdi + 0x5f], bl
jne 0x40bedb
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40bef6
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40bef7
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40bf0b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40befa
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40bf13
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40bf09
je 0x40beee
jbe 0x40bf1f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40bf14
js 0x40bf0a
push r8
js 0x40bf10
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40bf10
xor bl, byte [rdi + 0x5f]
jne 0x40bf51
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor byte [rbp + 0x45], al
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40bf47
jbe 0x40bf78
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40bf6d
js 0x40bf63
insd dword [rdi], dx
push rbx
xor al, 0x5f
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40bf6a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40bfab
js 0x40bf9c
js 0x40bf92
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40bf9c
xor ebp, dword [rbp + 0x6f]
jbe 0x40bfd5
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor al, byte fs:[r13 + 0x53]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40bfbb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40bff4
je 0x40c009
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp byte [r13 + 0x61], r13b
js 0x40c006
jae 0x40c012
jp 0x40c010
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x40bfea
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c02b
push r11
je 0x40c000
jbe 0x40c031
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
je 0x40c045
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c035
jbe 0x40bff2
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c05b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x40c06d
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x40c082
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40c06f
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
imul esi, dword [rdx + 0x73], 0x40645245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c0c1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40c0ca
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c0be
push rbx
je 0x40c0ae
jbe 0x40c0df
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40c0c7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c108
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x40c0be
pop rdi
pop rdx
push rbx
je 0x40c0f5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c136
push r11
je 0x40c10b
jbe 0x40c13c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c131
js 0x40c127
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x5f32316c
pop r15
jae 0x40c177
jo 0x40c162
je 0x40c168
push r10
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x40c144
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c185
js 0x40c176
js 0x40c16c
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40c13b
pop rdi
pop rdx
push rbx
je 0x40c172
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c1b3
push r11
je 0x40c188
jbe 0x40c1b9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x40c17b
pop rdi
pop rdx
push rbx
je 0x40c1b2
xor byte [rdi + 0x49], bl
je 0x40c1eb
jb 0x40c1e7
jae 0x40c1f1
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c1f4
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40c20d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40c203
je 0x40c1e8
jbe 0x40c219
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c20e
js 0x40c204
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x40c234
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c20b
xor bl, byte [rdi + 0x44]
jae 0x40c254
jb 0x40c251
jns 0x40c243
jne 0x40c25f
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x40c268
jb 0x40c265
jns 0x40c241
push rax
push rbx
je 0x40c232
jbe 0x40c263
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c258
js 0x40c24e
jbe 0x40c262
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c249
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40c293
jb 0x40c296
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40c25d
jbe 0x40c28e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rdx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40c28f
push rsp
pop rdi
jo 0x40c293
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40c27e
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x6f]
outsb dx, byte [rsi]
pop rdi
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c2c2
push r11
push r11
je 0x40c29a
jbe 0x40c2cb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c2c0
js 0x40c2b6
jbe 0x40c2c8
push rsp
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x40c2b8
jbe 0x40c2e9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40c2f0
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c325
push r10
push rbx
push r11
je 0x40c2fe
jbe 0x40c32f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x40c30e
jb 0x40c345
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c349
pop rdi
jb 0x40c34c
jb 0x40c350
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40c366
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c366
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x40c378
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x40c38d
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40c37a
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40c3ac
jae 0x40c38b
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c3ab
je 0x40c3c0
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x40c38b
xor esp, dword [rdx + 0x61]
jae 0x40c3c8
movsxd rbx, dword [rdi + 0x6f]
jae 0x40c3d8
jb 0x40c3cb
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rbx
je 0x40c3a6
xor ebx, dword [rdi + 0x53]
je 0x40c3eb
jb 0x40c3e2
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x4c474040
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40c3cd
jbe 0x40c3fe
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jb 0x40c40d
jae 0x40c413
jp 0x40c411
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40c3e6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c427
js 0x40c418
js 0x40c40e
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40c40b
outsw dx, word [rsi]
jb 0x40c44f
jb 0x40c43f
push r10
push r11
je 0x40c417
jbe 0x40c448
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c43d
js 0x40c433
push r12
pop rdi
push rdx
push rbx
je 0x40c429
jb 0x40c460
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c464
pop rdi
jb 0x40c467
jb 0x40c46b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x40c482
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c47e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40c487
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c47b
push rbx
je 0x40c46b
jbe 0x40c49c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c491
js 0x40c487
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40c480
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c4c1
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40c477
pop rdi
pop rdx
push rbx
je 0x40c4ad
cmp byte [rdi + 0x5f], bl
outsd dx, dword fs:[rsi]
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x6f]
outsb dx, byte [rsi]
pop rdi
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c4f4
push r11
push r11
je 0x40c4cc
jbe 0x40c4fd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c4f2
js 0x40c4e8
jbe 0x40c4fa
push rsp
pop rdi
push rbx
xor eax, 0x3174535f
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40c533
outsb dx, byte [rsi]
je 0x40c50c
xor dword [rbp + 0x45], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40c501
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
js 0x40c555
js 0x40c52f
push rsp
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40c52f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c570
push r11
je 0x40c545
jbe 0x40c576
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c56b
js 0x40c561
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c5a5
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40c5ae
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c5a2
xor al, byte fs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40c59c
pop rdi
pop rdi
jne 0x40c5dd
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40c5ed
je 0x40c5e2
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x40c600
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x40c609
je 0x40c5fe
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40c5e5
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c629
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40c642
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40c61d
jbe 0x40c64e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x40c62d
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40c692
jo 0x40c680
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40c656
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x40c667
xor ebp, dword [rbp + 0x6f]
jbe 0x40c6a0
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40c67e
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40c6e3
jo 0x40c6d1
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40c6a8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c6e9
push r11
je 0x40c6be
jbe 0x40c6ef
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40c6da
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c713
je 0x40c728
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40c6f7
jbe 0x40c728
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x50]
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40c71e
cmp byte [rdi + 0x5f], bl
outsd dx, dword fs:[rsi]
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x6f]
outsb dx, byte [rsi]
pop rdi
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c765
push r11
push r11
je 0x40c73d
jbe 0x40c76e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40c76b
push rsp
pop rdi
push rbx
xor eax, 0x3174535f
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40c7a4
outsb dx, byte [rsi]
je 0x40c77d
xor dword [rbp + 0x45], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40c777
jbe 0x40c7a8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c79d
js 0x40c793
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40c795
jbe 0x40c7c6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x40c776
pop rdi
pop rdx
push rbx
je 0x40c7b2
jbe 0x40c7e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40c804
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40c80d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c801
push rbx
je 0x40c7f1
jbe 0x40c822
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r13 + 0x61], r13b
js 0x40c82e
jae 0x40c83a
jp 0x40c838
jbe 0x40c7d6
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40c853
jb 0x40c856
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40c848
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40c869
jae 0x40c7f9
pop rdi
pop rdx
push rbx
je 0x40c830
xor byte [rdi + 0x49], bl
je 0x40c869
jb 0x40c865
jae 0x40c86f
push r8
js 0x40c85a
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40c87f
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40c856
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c897
push r11
je 0x40c86c
jbe 0x40c89d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40c88a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c8bf
push r10
push rax
push rbx
je 0x40c896
jbe 0x40c8c7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c8bc
js 0x40c8b2
push rbx
je 0x40c8a5
jb 0x40c8dc
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c8e0
pop rdi
jb 0x40c8e3
jb 0x40c8e7
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40c8fd
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c8d0
jbe 0x40c901
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40c8f9
js 0x40c8ef
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40c8f7
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
js 0x40c938
js 0x40c912
push rsp
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40c922
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x40c92c
jbe 0x40c95d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r12d, dword fs:[r13 + 0x6e]
jbe 0x40c90b
pop rdi
pop rdx
push rbx
je 0x40c947
jbe 0x40c978
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c96d
js 0x40c963
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x40c961
jbe 0x40c992
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40c987
js 0x40c97d
cmp byte [r13 + 0x61], r13b
js 0x40c99d
jae 0x40c9a9
jp 0x40c9a7
jbe 0x40c945
pop rdi
pop rdx
push rbx
je 0x40c981
jbe 0x40c9b2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rip + 0x655f4d5f], r14d
jb 0x40c9c2
jae 0x40c9c8
pop rdi
je 0x40c9c6
outsb dx, byte gs:[rsi]
push r8
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x40c9a5
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40c9d2
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40ca1c
jb 0x40ca1f
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40c9e6
jbe 0x40ca17
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ca0c
js 0x40ca02
push rdx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40ca18
push rsp
pop rdi
jo 0x40ca1c
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40ca07
xor dword [rdi + 0x5f], ebx
jb 0x40ca43
jae 0x40ca53
outsd dx, dword [rsi]
push r11
je 0x40ca1c
jbe 0x40ca4d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push rsp
pop rdi
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ca66
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ca7f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ca5a
jbe 0x40ca8b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x40ca7b
jbe 0x40caac
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40caa1
js 0x40ca97
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40ca96
pop rdi
jae 0x40cad7
jb 0x40cad4
jns 0x40cab0
push rax
js 0x40cae2
jbe 0x40cac1
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40cae3
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40cafc
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40caf2
je 0x40cad7
jbe 0x40cb08
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40cafd
js 0x40caf3
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x40cb26
je 0x40cb2b
jb 0x40cb34
ja 0x40cb07
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
push r11
je 0x40cb12
jbe 0x40cb43
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40cb27
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40cb60
je 0x40cb75
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40cb5c
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40cb80
pop rdi
jae 0x40cbc1
jb 0x40cbbe
jns 0x40cb9a
push rax
jbe 0x40cbab
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40cb9a
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x40cbaf
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40cc14
jo 0x40cc02
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40cc0b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40cc14
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40cc08
push rbx
je 0x40cbf8
jbe 0x40cc29
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40cc1e
js 0x40cc14
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40cc1b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40cc5c
push r11
je 0x40cc31
jbe 0x40cc62
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40cc65
imul ebp, dword [rdi + 0x73], 0x7361625f
xor dword gs:[rip + 0x636e7973], esi
pop rdi
ja 0x40cca7
je 0x40cca8
pop rdi
jae 0x40ccb7
imul ebp, dword fs:[rdi + 0x45], 0x47404062
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40ccc0
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ccc9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ccbd
push rbx
je 0x40ccad
jbe 0x40ccde
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ccd3
js 0x40ccc9
cmp byte [r13 + 0x61], r13b
js 0x40ccea
jae 0x40ccf6
jp 0x40ccf4
jbe 0x40cc92
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ccfb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40cd04
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ccf8
js 0x40ccf6
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x40cd36
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x40cd0b
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x40cd1c
xor ebp, dword [rbp + 0x6f]
jbe 0x40cd55
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40cd42
push rbx
je 0x40cd33
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40cd98
jo 0x40cd86
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40cd5d
xor byte [rdi + 0x49], bl
je 0x40cd96
jb 0x40cd92
jae 0x40cd9c
push r11
je 0x40cd6c
xor ebp, dword [rbp + 0x6f]
jbe 0x40cda5
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x40cdbf
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40cd95
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
js 0x40cdba
push rbx
je 0x40cdaa
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40ce0f
jo 0x40cdfd
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40cdd4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ce15
push r11
je 0x40cdea
jbe 0x40ce1b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x5f32316c
pop r15
jae 0x40ce56
jo 0x40ce41
je 0x40ce47
push r10
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x40ce23
xor al, 0x5f
pop rdi
jne 0x40ce64
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x40ce45
jbe 0x40ce76
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ce77
jbe 0x40cea8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40ce96
xor bl, byte [rdi + 0x44]
jae 0x40cedf
jb 0x40cedc
jns 0x40cece
jne 0x40ceea
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x40cef3
jb 0x40cef0
jns 0x40cecc
push rax
js 0x40cecb
jbe 0x40cedd
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x40cecd
jbe 0x40cefe
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40ceeb
jbe 0x40cf1c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40cf04
jbe 0x40cf35
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40cf1d
jbe 0x40cf4e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40cf43
js 0x40cf39
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
js 0x40cf0f
pop rdi
pop rdx
push rbx
je 0x40cf46
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40cf87
push r11
je 0x40cf5c
jbe 0x40cf8d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40cf82
js 0x40cf78
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40cf82
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40cfb8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40cfc2
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
push rbx
xor byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40cfe1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40cffa
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40cfd5
jbe 0x40d006
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x40cfef
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40d030
push r11
je 0x40d005
jbe 0x40d036
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d02b
js 0x40d021
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x40d04d
push rsp
jo 0x40d050
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d040
jbe 0x40cffd
pop rdi
pop rdx
push rbx
je 0x40d039
jbe 0x40d06a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40d062
js 0x40d058
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40d05d
jbe 0x40d08e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d083
js 0x40d079
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
js 0x40d08b
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40d082
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d0bb
je 0x40d0d0
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40d09f
jbe 0x40d0d0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d0c5
js 0x40d0bb
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x50]
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40d0c7
xor bl, byte [rdi + 0x44]
jae 0x40d110
jb 0x40d10d
jns 0x40d0ff
jne 0x40d11b
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x40d124
jb 0x40d121
jns 0x40d0fd
push rax
push rbx
je 0x40d0ee
jbe 0x40d11f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40d11e
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
js 0x40d11c
xor al, byte [r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
js 0x40d12c
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x40d15a
js 0x40d160
je 0x40d139
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6e5a5f00
ja 0x40d178
push rax
jbe 0x40d10e
pop rdi
pop rdx
push rbx
je 0x40d145
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d17e
je 0x40d193
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
js 0x40d1ad
add byte [rdi + 0x5a], bl
push rbx
je 0x40d17a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40d1af
push r10
push rbx
je 0x40d185
jbe 0x40d1b6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor byte [rdi + 0x49], bl
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x40d1a0
jb 0x40d1d7
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40d1db
pop rdi
jb 0x40d1de
jb 0x40d1e2
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40d1f8
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d1f8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40d201
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d1f5
push rbx
je 0x40d1e5
jbe 0x40d216
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d20b
js 0x40d201
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d22c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40d235
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d229
push rbx
je 0x40d219
jbe 0x40d24a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40d22e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d267
je 0x40d27c
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40d24b
jbe 0x40d27c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d271
js 0x40d267
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40d271
jbe 0x40d2a2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d297
js 0x40d28d
xor al, byte [r13 + 0x6d]
push rdx
js 0x40d2a3
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40d28d
xor ebp, dword [rbp + 0x6f]
jbe 0x40d2c6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor dword fs:[r13 + 0x53], eax
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40d2ab
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40d2f5
jb 0x40d2f8
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40d2bf
jbe 0x40d2f0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d2e5
js 0x40d2db
push r10
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40d2f1
push rsp
pop rdi
jo 0x40d2f5
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40d2e7
pop rdi
jae 0x40d328
jb 0x40d325
jns 0x40d301
push rax
push rbx
je 0x40d2f2
jbe 0x40d323
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d318
js 0x40d30e
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40d324
pop rdi
push rbx
xor al, 0x5f
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdx + 0x6c], dh
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x40d31f
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x40d34e
xor ebp, dword [rbp + 0x6f]
jbe 0x40d387
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40d374
xor al, 0x62
jae 0x40d399
jbe 0x40d337
pop rdi
pop rdx
push rbx
je 0x40d36e
xor ebp, dword [rbp + 0x6f]
jbe 0x40d3a7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40d394
xor al, byte [r13 + 0x53]
xor byte [rdi], bl
pop rdi
push r12
pop r15
jb 0x40d3c4
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
push r11
je 0x40d3b1
jbe 0x40d3e2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d3d7
js 0x40d3cd
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40d400
jae 0x40d3df
push rbx
je 0x40d3ca
xor dword [rbx + 0x68], esp
jb 0x40d3fe
je 0x40d413
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x40d3de
xor esp, dword [rdx + 0x61]
jae 0x40d41b
movsxd rbx, dword [rdi + 0x6f]
jae 0x40d42b
jb 0x40d41e
insd dword [rdi], dx
movsxd rdx, dword [r15 + rbx*2 + 0x45]
push rbx
xor eax, 0x634b505f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40d40b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40d44c
push r11
je 0x40d421
jbe 0x40d452
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40d414
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d47d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40d486
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d47a
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40d47a
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40d4d5
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d4c4
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40d4dd
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40d4d3
je 0x40d4b8
jbe 0x40d4e9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d4de
js 0x40d4d4
push r8
js 0x40d4da
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40d4d8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40d519
push r11
je 0x40d4ee
jbe 0x40d51f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40d521
jbe 0x40d552
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x40d54a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40d58b
js 0x40d57c
js 0x40d572
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x49], bl
pop r15
jae 0x40d5b8
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x40d585
xor byte [rdi + 0x5f], bl
jne 0x40d5c6
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40d5e1
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40d5e2
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40d5f6
push r11
je 0x40d5b2
xor ebp, dword [rbp + 0x6f]
jbe 0x40d5eb
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40d5d8
push rbx
xor ebx, dword [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x40d5dd
jae 0x40d622
jo 0x40d5f7
push rax
push rbx
je 0x40d5e8
jbe 0x40d619
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40d615
push rsp
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x40d605
jbe 0x40d636
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40d62e
js 0x40d624
push r11
push r11
xor dword [rdi + 0x45], ebx
push rbx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40d627
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40d668
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40d647
pop rdi
pop rdi
jne 0x40d688
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40d698
je 0x40d68d
outsb dx, byte [rsi]
pop rdi
push r8
js 0x40d6a2
js 0x40d67c
push rsp
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40d67f
xor al, 0x5f
pop rdi
jne 0x40d6c0
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push r11
je 0x40d6bb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40d6fc
js 0x40d6ed
js 0x40d6e3
xor dword [r9], r15d
pop rdi
pop r15
je 0x40d707
push rsp
jo 0x40d70a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d6fa
jbe 0x40d6b7
pop rdi
pop rdx
push rbx
je 0x40d6ed
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
js 0x40d738
js 0x40d712
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d734
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x40d71d
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x40d742
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x40d763
insb byte [rdi], dx
jne 0x40d76a
push r12
pop rdi
pop rdi
pop rdi
je 0x40d787
jo 0x40d775
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40d754
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40d795
js 0x40d786
js 0x40d77c
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x40d74b
pop rdi
pop rdx
push rbx
je 0x40d787
jbe 0x40d7b8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d7d8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40d7e1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d7d5
js 0x40d7d3
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40d7d3
jbe 0x40d804
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
push r12
pop r15
jb 0x40d831
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x40d846
pop rdi
jae 0x40d85c
jb 0x40d85f
add byte [rdi + 0x5a], bl
push rbx
je 0x40d827
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40d842
xor bl, byte [rdi + 0x5f]
jne 0x40d883
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40d89e
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d88f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40d8a8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40d883
jbe 0x40d8b4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d8de
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40d8e7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d8db
js 0x40d8d9
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40d8d1
pop rdi
pop rdi
jne 0x40d912
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40d922
je 0x40d917
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x40d935
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x40d93e
je 0x40d933
outsb dx, byte [rsi]
push r8
js 0x40d946
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d94d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40d956
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d94a
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40d912
pop rdi
pop rdx
push rbx
je 0x40d949
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40d98a
push r11
je 0x40d95f
jbe 0x40d990
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d985
js 0x40d97b
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x40d9a7
push rsp
jo 0x40d9aa
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40d99a
jbe 0x40d957
pop rdi
pop rdx
push r11
je 0x40d994
jbe 0x40d9c5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40d9ba
js 0x40d9b0
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x40d975
pop rdi
pop rdx
push rbx
je 0x40d9ac
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x40d9e2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40d9ec
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x40d9c5
jb 0x40d9f7
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40da14
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40da0e
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40da16
insd dword [rdi], dx
js 0x40da00
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40da02
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40da43
push r11
je 0x40da18
jbe 0x40da49
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40da0b
pop rdi
pop rdx
push rbx
je 0x40da42
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40da83
push r11
je 0x40da58
jbe 0x40da89
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x40da4b
pop rdi
pop rdx
push rbx
je 0x40da82
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40dac3
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40dad4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40dadd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40dad1
push rbx
je 0x40dac1
jbe 0x40daf2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40dada
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40db1b
push r11
je 0x40daf0
jbe 0x40db21
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40db16
js 0x40db0c
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
js 0x40db26
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40db1d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40db5e
push rbx
xor dword fs:[r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40db71
pop rdi
jae 0x40db83
outsd dx, dword [rsi]
jb 0x40db73
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40db4e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40db8f
push r11
je 0x40db64
jbe 0x40db95
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40db8a
jbe 0x40dbbb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40db9e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40dbdf
js 0x40dbd0
js 0x40dbc6
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40db95
pop rdi
pop rdx
push rbx
je 0x40dbd1
jbe 0x40dc02
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40dbfa
js 0x40dbf0
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r15 + rbx*2], r14d
pop r15
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40dc22
pop rdi
jae 0x40dc34
imul esp, dword [rdi + 0x6e], 0x33534f45
pop rdi
push rbx
je 0x40dbfd
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40dc4f
outsb dx, byte [rsi]
je 0x40dc28
xor dword [rbp + 0x45], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40dc1c
xor dh, byte [rbx + 0x65]
je 0x40dc60
jb 0x40dc57
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x5a5f0069
push rbx
je 0x40dc31
xor ebp, dword [rbp + 0x6f]
jbe 0x40dc6a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40dc57
xor dword [r13 + 0x53], eax
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40dc55
jbe 0x40dc86
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40dc7b
js 0x40dc71
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40dc6e
outsw dx, word [rsi]
jb 0x40dcb2
jb 0x40dca2
push r10
push r11
je 0x40dc7a
jbe 0x40dcab
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r12
pop rdi
push rdx
push rbx
je 0x40dc8c
jb 0x40dcc3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40dcc7
pop rdi
jb 0x40dcca
jb 0x40dcce
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x40dce5
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40dcae
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40dce4
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40dcee
pop rdi
xor dword [rbp + 0x50], eax
push rbx
xor byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40dcda
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40dd1b
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40dd0c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40dd4d
js 0x40dd3e
js 0x40dd34
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40dd2b
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40dd61
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40dd6b
pop rdi
xor dword [rbp + 0x50], eax
js 0x40dd63
xor byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40dd58
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40dd99
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x40dda4
push rsp
jo 0x40dda7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40dd97
jbe 0x40dd54
pop rdi
pop rdx
push rbx
je 0x40dd90
jbe 0x40ddc1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ddb6
js 0x40ddac
xor dword [r13 + 0x6d], eax
push rdx
js 0x40ddc2
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x40ddb2
jbe 0x40dde3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ddd8
js 0x40ddce
xor r12d, dword [r13 + 0x6e]
jbe 0x40dd91
pop rdi
pop rdx
push rbx
je 0x40ddcd
jbe 0x40ddfe
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r15], r14d
pop rdi
pop r15
jne 0x40de1c
je 0x40de11
jo 0x40de25
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40ddf8
pop rdi
jae 0x40de39
jb 0x40de36
jns 0x40de12
push rax
push rbx
je 0x40de03
jbe 0x40de34
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40de29
js 0x40de1f
jbe 0x40de32
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40de1f
jbe 0x40de50
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x6d]
push rdx
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40de43
jae 0x40de77
movsxd rbx, dword [rdi + 0x69]
outsd dx, dword [rsi]
jae 0x40de5d
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40de7d
je 0x40de92
imul esi, dword [rbx + rsi*2 + 0x49], 0x33454563
je 0x40de94
push r8
push rbx
outsd dx, dword [rsi]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40de76
xor al, 0x5f
pop rdi
jne 0x40deb6
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x40debd
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40dec4
push r8
push rbx
xor byte [rdi + 0x53], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40debb
jae 0x40df00
jo 0x40ded5
push rax
push rbx
je 0x40dec6
jbe 0x40def7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40deec
js 0x40dee2
jbe 0x40def3
push rsp
pop rdi
push rbx
xor eax, 0x5a5f005f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40df10
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40df19
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40df0d
push rbx
je 0x40defd
jbe 0x40df2e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40dee5
pop rdi
pop rdx
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40df2d
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524578
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40df44
movsxd rbp, dword [rdi + 0x70]
jns 0x40df5e
push rbx
je 0x40df49
xor ebp, dword [rbp + 0x6f]
jbe 0x40df82
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40df73
movsxd rbp, dword [rdi + 0x70]
jns 0x40df8d
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40dfab
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40dfc4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40dfba
je 0x40df9f
jbe 0x40dfd0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40dfc5
js 0x40dfbb
push r8
js 0x40dfc1
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40dfbf
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e000
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x40dfb6
pop rdi
pop rdx
push rbx
push r11
je 0x40dff5
jbe 0x40e026
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push r11
je 0x40e010
jbe 0x40e041
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e036
js 0x40e02c
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x40e027
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e068
push r11
je 0x40e03d
jbe 0x40e06e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e063
js 0x40e059
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e059
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x40e08f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40e099
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x40e072
jb 0x40e0a4
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40e0c1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40e0bb
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40e0c3
insd dword [rdi], dx
js 0x40e0ad
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40e0c0
jbe 0x40e0f1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40e0e3
xor al, 0x5f
pop rdi
jne 0x40e124
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x40e105
jbe 0x40e136
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e12b
js 0x40e121
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e132
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e173
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e153
xor bl, byte [rdi + 0x5f]
jne 0x40e194
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor byte [rbp + 0x45], al
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40e18a
jbe 0x40e1bb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor al, 0x5f
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40e1af
movsxd rbp, dword [rdi + 0x75]
je 0x40e1c0
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40e1c4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e205
push r11
je 0x40e1da
jbe 0x40e20b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40e22a
pop rdi
jae 0x40e23c
outsd dx, dword [rsi]
jb 0x40e22c
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40e207
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e248
push r11
je 0x40e21d
jbe 0x40e24e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
xor esp, dword [rdi + rbp*2 + 0x74]
jbe 0x40e20e
pop rdi
pop rdi
jae 0x40e282
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x40e258
pop rdi
jae 0x40e299
jb 0x40e296
jns 0x40e272
push rax
push rbx
je 0x40e263
jbe 0x40e294
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40e295
pop rdi
push rbx
xor al, 0x5f
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40e285
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e2c6
js 0x40e2b7
js 0x40e2ad
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40e2a4
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40e2da
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40e2e4
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x40e2ee
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e307
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e2e2
jbe 0x40e313
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40e302
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e346
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e35f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40e355
je 0x40e33a
jbe 0x40e36b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e360
js 0x40e356
push rbx
je 0x40e34a
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40e3af
jo 0x40e39d
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40e376
movsxd rbp, dword [rdi + 0x70]
jns 0x40e390
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e3ae
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e3c7
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e3a2
jbe 0x40e3d3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40e3c2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e403
js 0x40e3f4
js 0x40e3ea
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40e3ec
jbe 0x40e41d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e412
js 0x40e408
imul r15d, dword [r8 + 0x45], 0x5f5f006d
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push r11
je 0x40e416
jbe 0x40e447
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x40e42c
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
insd dword [rdi], dx
cmp qword fs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e473
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x40e45c
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x40e481
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x40e4a2
insb byte [rdi], dx
jne 0x40e4a9
push r12
pop rdi
pop rdi
pop rdi
je 0x40e4c6
jo 0x40e4b4
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e4c5
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e4ce
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e4c2
push rbx
je 0x40e4b2
jbe 0x40e4e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e4f9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e502
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e4f6
push rbx
je 0x40e4e6
jbe 0x40e517
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40e4fa
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40e530
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40e53a
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x40e544
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e55d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40e553
je 0x40e538
jbe 0x40e569
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e55e
js 0x40e554
push r8
js 0x40e55a
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40e559
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e59a
push r11
je 0x40e56f
jbe 0x40e5a0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e595
js 0x40e58b
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40e58b
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40e5dc
je 0x40e5d1
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40e5b7
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40e612
push r11
je 0x40e5ce
xor ebp, dword [rbp + 0x6f]
jbe 0x40e607
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e628
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e631
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e625
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e61f
jbe 0x40e650
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40e63c
jbe 0x40e66d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40e665
js 0x40e65b
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40e65c
xor byte [rdi + 0x5f], bl
jne 0x40e69d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40e6b8
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40e6b9
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40e6cd
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e6bc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e6d5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e6b0
jbe 0x40e6e1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40e6d1
pop rdi
pop rdi
jne 0x40e712
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40e722
je 0x40e717
outsb dx, byte [rsi]
pop rdi
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40e70e
jbe 0x40e73f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40e737
js 0x40e72d
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40e733
pop rdi
jae 0x40e774
jb 0x40e771
jns 0x40e74d
push rax
jbe 0x40e75d
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e777
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e780
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e774
push rbx
je 0x40e764
jbe 0x40e795
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e78a
js 0x40e780
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e7ab
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e7b4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e7a8
push rbx
je 0x40e798
jbe 0x40e7c9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e7be
js 0x40e7b4
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40e7b6
jbe 0x40e7e7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
push rbx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rbp + 0x65], ch
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40e81a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40e7ff
jbe 0x40e830
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40e828
js 0x40e81e
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40e82e
pop rdi
jae 0x40e86f
jb 0x40e86c
jns 0x40e848
push rax
push rbx
je 0x40e839
jbe 0x40e86a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40e868
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40e883
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e89c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40e877
jbe 0x40e8a8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x62
jae 0x40e8ba
jbe 0x40e858
pop rdi
pop rdx
push rbx
je 0x40e88f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e8d0
js 0x40e8c1
js 0x40e8b7
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e8f3
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40e8fc
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40e8f0
xor dword fs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40e8e9
xor bl, byte [rdi + 0x5f]
jne 0x40e92a
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40e945
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40e936
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40e94f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40e945
je 0x40e92a
jbe 0x40e95b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e950
js 0x40e946
push r8
js 0x40e97f
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40e953
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e994
push r11
je 0x40e969
jbe 0x40e99a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e98f
js 0x40e985
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40e98a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40e9cb
push r11
je 0x40e9a0
jbe 0x40e9d1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40e9c6
js 0x40e9bc
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
jae 0x40e9fb
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x40e9c9
jbe 0x40e9fa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
imul r15d, dword fs:[r8 + 0x45], 0x5a5f006d
push rbx
je 0x40e9dd
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ea1e
push r11
je 0x40e9f3
jbe 0x40ea24
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5f], bl
jae 0x40ea5b
pop rdi
jae 0x40ea5f
jb 0x40ea62
add byte [rdi + 0x5a], bl
push rbx
je 0x40ea2b
jbe 0x40ea5c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ea51
js 0x40ea47
xor dword [r15], r14d
pop rdi
pop r15
jne 0x40ea7a
je 0x40ea6f
jo 0x40ea83
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40ea51
xor al, 0x5f
pop rdi
jne 0x40ea91
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x40ea98
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40ea9f
push r8
js 0x40ea98
xor byte [rdi + 0x53], bl
js 0x40ea91
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40ea93
xor dword [rdi + 0x5f], ebx
jb 0x40eacf
jae 0x40eadf
outsd dx, dword [rsi]
push r11
je 0x40eaa8
jbe 0x40ead9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40eace
js 0x40eac4
push r8
push rsp
pop rdi
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40eac0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40eaf9
je 0x40eb0e
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
cmp byte [r13 + 0x61], r13b
js 0x40eb0b
jae 0x40eb17
jp 0x40eb15
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40eaf3
jbe 0x40eb24
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40eb1c
js 0x40eb12
push r11
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5f5f006d
jae 0x40eb53
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40eb60
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40eb69
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40eb5d
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40eb53
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x40eb91
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40eb98
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40eb78
xor ebp, dword [rbp + 0x6f]
jbe 0x40ebb1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ebca
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ebd3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ebc7
push rbx
je 0x40ebb7
jbe 0x40ebe8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ebdd
js 0x40ebd3
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ebfe
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ec17
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40ec0d
je 0x40ebf2
jbe 0x40ec23
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ec18
js 0x40ec0e
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40ec0a
xor eax, 0x6c615f5f
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x6f]
outsb dx, byte [rsi]
pop rdi
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40ec4e
push r11
push r11
je 0x40ec26
jbe 0x40ec57
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40ec54
push rsp
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x40ec3e
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40ec99
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ec88
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40eca1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ec7c
jbe 0x40ecad
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x40eca4
jbe 0x40ecd5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ecca
js 0x40ecc0
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40ecba
xor bl, byte [rdi + 0x5f]
jne 0x40ecfb
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor dword [rbp + 0x45], eax
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40ed01
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ed45
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ed5e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40ed54
je 0x40ed39
jbe 0x40ed6a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ed5f
js 0x40ed55
push rbx
je 0x40ed49
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40edae
jo 0x40ed9c
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40ed73
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40edc4
je 0x40edb9
outsb dx, byte [rsi]
push r8
js 0x40edcc
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40eda5
jbe 0x40edd6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40edc4
xor bl, byte [rdi + 0x5f]
jne 0x40ee05
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40ee20
pop rdi
push r11
je 0x40edde
xor ebp, dword [rbp + 0x6f]
jbe 0x40ee17
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40ee04
push rbx
xor dword [rdi + 0x78], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40ee0f
xor byte [rdi + 0x49], bl
je 0x40ee48
jb 0x40ee44
jae 0x40ee4e
push r8
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40ee5e
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40ee35
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ee76
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ee99
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40eea2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ee96
js 0x40ee94
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
js 0x40eecc
add byte [rdi + 0x5a], bl
push rbx
je 0x40ee97
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40eed0
je 0x40eee5
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40eeb4
jbe 0x40eee5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40eed5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ef16
js 0x40ef07
js 0x40eefd
xor dword [r9], r15d
pop rdi
pop r15
je 0x40ef21
push rsp
jo 0x40ef24
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ef14
jbe 0x40eed1
pop rdi
pop rdx
push rbx
je 0x40ef08
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ef49
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40eeff
pop rdi
pop rdx
push rbx
je 0x40ef37
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524564
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x40ef54
jbe 0x40ef85
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ef7a
js 0x40ef70
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ef69
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x40ef9f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40efa9
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x40ef82
jb 0x40efb4
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40efd1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40efcb
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40efd3
insd dword [rdi], dx
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40eff2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40effb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40efef
js 0x40efed
cmp byte [rbp + 0x61], ch
js 0x40f00c
jae 0x40f018
jp 0x40f016
jbe 0x40efb4
pop rdi
pop rdx
push rbx
je 0x40eff0
jbe 0x40f021
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40f004
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f045
push rbx
xor al, byte fs:[r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f029
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f06a
push r11
je 0x40f03f
jbe 0x40f070
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x40f087
push rsp
jo 0x40f08a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f07a
jbe 0x40f037
pop rdi
pop rdx
push rbx
je 0x40f06e
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40f08c
jbe 0x40f0bd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40f0b2
js 0x40f0a8
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40f0af
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f0f0
push r11
je 0x40f0c5
jbe 0x40f0f6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x40f10d
push rsp
jo 0x40f110
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f100
jbe 0x40f0bd
pop rdi
pop rdx
push rbx
je 0x40f0f9
jbe 0x40f12a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40f118
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x40f14e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40f158
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x40f131
jb 0x40f163
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40f180
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40f17a
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40f182
insd dword [rdi], dx
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40f173
jbe 0x40f1a4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40f199
js 0x40f18f
xor dword [rip + 0x655f4d5f], r14d
jb 0x40f1b4
jae 0x40f1ba
pop rdi
je 0x40f1b8
outsb dx, byte gs:[rsi]
push r8
js 0x40f160
pop rdi
pop rdx
push rbx
je 0x40f198
insd dword [rdi], dx
js 0x40f1b2
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40f1ad
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f1e6
je 0x40f1fb
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
xor r14d, dword [r15]
jae 0x40f1fd
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x40f206
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x40f227
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40f228
jb 0x40f22b
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f1f9
xor byte [rdi + 0x49], bl
je 0x40f232
jb 0x40f22e
jae 0x40f238
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f23b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f254
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f22f
jbe 0x40f260
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x40f27b
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f257
jbe 0x40f288
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40f2b3
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40f2bc
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f2b0
cmp byte fs:[r13 + 0x61], r13b
js 0x40f2cd
jae 0x40f2d9
jp 0x40f2d7
jbe 0x40f275
pop rdi
pop rdx
push rbx
je 0x40f2b1
jbe 0x40f2e2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r15 + rbx*2], r14d
pop r15
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40f302
pop rdi
jae 0x40f314
imul esp, dword [rdi + 0x6e], 0x33534f45
pop rdi
push rbx
je 0x40f2dd
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40f32f
outsb dx, byte [rsi]
je 0x40f308
xor dword [rbp + 0x45], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40f2ff
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40f334
push r10
push rbx
je 0x40f30a
jbe 0x40f33b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor byte [rdi + 0x49], bl
js 0x40f334
js 0x40f32a
push r11
push r11
xor bl, byte [rdi + 0x45]
push rbx
je 0x40f325
jb 0x40f35c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40f360
pop rdi
jb 0x40f363
jb 0x40f367
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40f37d
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f34b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f38c
js 0x40f37d
js 0x40f373
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f39d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40f3a6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f39a
js 0x40f398
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x40f3a5
js 0x40f3a2
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40f3a6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f3e7
push r11
je 0x40f3bc
jbe 0x40f3ed
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40f3e2
js 0x40f3d8
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40f3af
pop rdi
pop rdx
push rbx
je 0x40f3e6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f427
push r11
je 0x40f3fc
jbe 0x40f42d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40f42f
jbe 0x40f460
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40f458
js 0x40f44e
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40f45a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40f48f
push r10
push rax
push rbx
je 0x40f466
jbe 0x40f497
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x40f475
jb 0x40f4ac
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40f4b0
pop rdi
jb 0x40f4b3
jb 0x40f4b7
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40f4cd
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40f49a
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40f4e4
jb 0x40f4e7
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40f4ae
jbe 0x40f4df
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r10
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40f4e0
push rsp
pop rdi
jo 0x40f4e4
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40f4d0
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40f4ee
jbe 0x40f51f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40f515
jbe 0x40f546
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40f52d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f56e
js 0x40f55f
js 0x40f555
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40f581
pop rdi
jae 0x40f593
outsd dx, dword [rsi]
jb 0x40f583
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40f563
jbe 0x40f594
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40f589
js 0x40f57f
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40f577
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f5b0
je 0x40f5c5
imul esi, dword [rbx + rsi*2 + 0x49], 0x78496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40f5aa
jbe 0x40f5db
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40f5d0
js 0x40f5c6
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40f5da
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f61b
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x40f626
push rsp
jo 0x40f629
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f619
jbe 0x40f5d6
pop rdi
pop rdx
push rbx
je 0x40f60c
pop rdi
pop rdi
je 0x40f648
jb 0x40f651
ja 0x40f643
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f665
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40f66e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f662
js 0x40f660
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40f656
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f69a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f6b3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f68e
jbe 0x40f6bf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x40f69e
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40f703
jo 0x40f6f1
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40f6c7
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40f722
push r11
je 0x40f6de
xor ebp, dword [rbp + 0x6f]
jbe 0x40f717
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40f704
push rbx
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40f706
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f747
push r11
je 0x40f71c
jbe 0x40f74d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40f740
jbe 0x40f771
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40f755
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f796
push r11
je 0x40f76b
jbe 0x40f79c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
imul esi, dword [rdx + 0x73], 0x40785245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40f79e
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40f7d4
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40f7de
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
js 0x40f7d7
xor byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40f7cb
xor bl, byte [rdi + 0x44]
jae 0x40f814
jb 0x40f811
jns 0x40f803
jne 0x40f81f
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x40f828
jb 0x40f825
jns 0x40f801
push rax
jbe 0x40f812
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40f7fa
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f83b
js 0x40f82c
js 0x40f822
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x40f7f1
pop rdi
pop rdx
push rbx
je 0x40f828
xor byte [rdi + 0x49], bl
je 0x40f861
jb 0x40f85d
jae 0x40f867
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f86a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40f883
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40f85e
jbe 0x40f88f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40f8aa
push r11
pop rdi
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40f89f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40f8e0
push r11
je 0x40f8b5
jbe 0x40f8e6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40f8db
js 0x40f8d1
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40f8d7
xor bl, byte [rdi + 0x5f]
jne 0x40f918
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor dword [rbp + 0x45], eax
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
js 0x40f944
js 0x40f91e
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40f91f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f958
je 0x40f96d
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor r14d, dword [r15]
jae 0x40f96f
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x40f978
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x40f999
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40f99a
jb 0x40f99d
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40f99d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40f9a6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40f99a
js 0x40f998
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40f994
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x40f9d2
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40f9d9
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40f9d9
je 0x40f9b9
xor ebp, dword [rbp + 0x6f]
jbe 0x40f9f2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40fa0b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40fa14
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40fa08
push rbx
je 0x40f9f8
jbe 0x40fa29
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40fa23
jbe 0x40fa54
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40fa3e
pop rdi
jae 0x40fa7f
jb 0x40fa7c
jns 0x40fa58
push rbx
je 0x40fa48
jbe 0x40fa79
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40fa73
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40fa8f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40fa98
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40fa8c
push rbx
je 0x40fa7c
jbe 0x40faad
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40faa2
js 0x40fa98
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40fa64
pop rdi
je 0x40facb
add byte [rdi + 0x5a], bl
push r11
je 0x40faa3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fae4
push r11
je 0x40fab9
jbe 0x40faea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fadf
js 0x40fad5
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
je 0x40fafe
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40faee
jbe 0x40faab
pop rdi
pop rdx
push rbx
je 0x40fae7
jbe 0x40fb18
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x40fb10
js 0x40fb06
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40fb06
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fb47
js 0x40fb38
js 0x40fb2e
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40fb4e
pop rdi
add byte [rdi + 0x5f], bl
js 0x40fb7a
pop rdi
jo 0x40fb6a
jb 0x40fb7a
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
js 0x40fb6b
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40fb62
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fba3
push r11
je 0x40fb78
jbe 0x40fba9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fb9e
js 0x40fb94
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x40fb6b
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40fbd5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40fbee
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40fbe4
je 0x40fbc9
jbe 0x40fbfa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fbef
js 0x40fbe5
xor al, 0x62
jae 0x40fc0c
jbe 0x40fbaa
pop rdi
pop rdx
push rbx
je 0x40fbe1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fc22
push r11
je 0x40fbf7
jbe 0x40fc28
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fc1d
js 0x40fc13
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x40fc2d
jbe 0x40fc5e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fc53
js 0x40fc49
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40fc45
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40fc7b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40fc85
pop rdi
xor byte [rbp + 0x50], al
push rax
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40fc73
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40fca8
push r10
push rbx
push r11
je 0x40fc81
jbe 0x40fcb2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fca7
js 0x40fc9d
push rbx
je 0x40fc91
jb 0x40fcc8
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40fccc
pop rdi
jb 0x40fccf
jb 0x40fcd3
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40fce9
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40fcb7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fcf8
push r11
je 0x40fccd
jbe 0x40fcfe
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fcf3
js 0x40fce9
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x40fd24
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40fcfc
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fd3d
push r11
je 0x40fd12
jbe 0x40fd43
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fd38
js 0x40fd2e
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40fd05
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40fd73
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40fd86
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40fd54
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fd95
push r11
je 0x40fd6a
jbe 0x40fd9b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fd90
js 0x40fd86
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x40fd5d
pop rdi
pop rdx
push rbx
je 0x40fd94
xor al, 0x5f
pop rdi
jne 0x40fdd5
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
js 0x40fdec
js 0x40fdf9
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40fdce
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40fe04
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40fe0e
pop rdi
xor byte [rbp + 0x50], al
js 0x40fe04
js 0x40fdfb
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40fdfc
movsxd rbp, dword [rdi + 0x70]
jns 0x40fe16
push rbx
je 0x40fe01
xor ebp, dword [rbp + 0x6f]
jbe 0x40fe3a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x40fe27
push rbx
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push r11
je 0x40fe2f
jbe 0x40fe60
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r13 + 0x61], r13b
js 0x40fe6b
jae 0x40fe77
jp 0x40fe75
jbe 0x40fe13
pop rdi
pop rdx
push rbx
js 0x40fe60
xor dword [r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40fe5a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fe9b
push rbx
xor dword fs:[r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40fe7f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40fec0
push r11
je 0x40fe95
jbe 0x40fec6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push r11
je 0x40febb
jbe 0x40feec
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40fee1
js 0x40fed7
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x40fede
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ff1f
push r11
je 0x40fef4
jbe 0x40ff25
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ff1a
js 0x40ff10
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x40ff21
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ff62
push rbx
xor dword fs:[r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40ff50
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ff91
push r11
je 0x40ff66
jbe 0x40ff97
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x40ff8c
js 0x40ff82
push r11
push r11
xor bl, byte [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ffb4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ffbd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ffb1
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40ffa6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ffe7
push r11
je 0x40ffbc
jbe 0x40ffed
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40ffe2
jbe 0x410013
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x410008
js 0x40fffe
jb 0x410022
jae 0x410028
jp 0x410026
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40fffb
xor byte [rdi + 0x49], bl
je 0x410034
jb 0x410030
jae 0x41003a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41003d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x410056
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
js 0x41004c
je 0x410031
jbe 0x410062
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x410057
js 0x41004d
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x41007d
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x410086
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41008f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410083
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x410078
xor bl, byte [rdi + 0x5f]
jne 0x4100b9
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x4100d4
pop rdi
push r11
je 0x410092
xor ebp, dword [rbp + 0x6f]
jbe 0x4100cb
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor dword [rdi + 0x64], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x4100cb
jbe 0x4100fc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4100f1
js 0x4100e7
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4100e9
jbe 0x41011a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x410112
js 0x410108
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
push r11
xor dword [rdi], ebx
insd dword [rdi], dx
imul ebp, dword [rsi], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x410156
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x41015f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410153
push rbx
je 0x410143
jbe 0x410174
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x41018a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x410193
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x410187
push rbx
je 0x410177
jbe 0x4101a8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x41019d
js 0x410193
xor al, byte [r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x410195
jbe 0x4101c6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
js 0x4101be
js 0x4101b4
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4101be
pop rdi
jae 0x4101ff
jb 0x4101fc
jns 0x4101d8
push rbx
je 0x4101c8
jbe 0x4101f9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
js 0x4101ee
js 0x4101e4
jbe 0x4101f3
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4101dd
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x41021e
push rbx
xor dword fs:[r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rax], al
jae 0x41024e
insd dword [rdi], dx
je 0x410239
add byte [rsi], ch
jae 0x410251
jb 0x410253
add byte [rsi], ch
jae 0x41024d
jae 0x41025b
jb 0x41025d
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x41025e
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x41026c
outsb dx, byte cs:[esi]
jne 0x41023a
jne 0x410278
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x410248
push 0x687361
jns 0x410291
jae 0x41029e
insd dword [rdi], dx
add byte [rsi], ch
jns 0x410299
jae 0x4102a1
jb 0x41022f
outsb dx, byte cs:[esi]
jne 0x410262
jbe 0x41029b
jb 0x4102ab
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x41026f
jbe 0x4102a8
jb 0x4102b8
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x4102b3
insb byte [rdi], dx
jns 0x4102c2
add byte [rsi], ch
jb 0x4102bd
insb byte [rdi], dx
jo 0x4102c9
je 0x41025f
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x410298
outsd dx, dword [esi]
je 0x41026e
je 0x4102d6
js 0x4102e7
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x4102ec
je 0x4102e2
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x410305
jo 0x410319
pop rdi
je 0x410309
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x410317
jns 0x4102b8
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x410333
jns 0x4102c4
push 0x63
jb 0x4102c9
jns 0x41033b
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x410345
je 0x4102db
je 0x410341
add byte [rsi], ch
jae 0x410358
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4102ef
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xa000000000004005]
add eax, 0
add byte [rax], al
ret
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4008], ah
add byte [rax], al
add byte [rax + 8], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], ch
add byte [rax], al
add byte [rax], al
add byte [rax + 9], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400b], dl
add byte [rax], al
add byte [rax + 0xb], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400b], dh
add byte [rax], al
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax + 1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or eax, 0x40
add byte [rax], al
xor byte [rip], cl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
push rdx
add byte [rax], al
add byte [rax], al
add ah, dl
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
push rdx
add byte [rax], al
add byte [rax], al
add al, ah
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], ch
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x405b], bl
add byte [rax], al
add byte [rax + 0x5b], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*2], dh
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*2], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [1]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
lea esp, [rax]
add byte [rax], al
add byte [rax], al
call 0x41089a
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
lea esp, [rax]
add byte [rax], al
add byte [rax], al
clc
lea eax, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov fs, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
mov fs, word [rax]
add byte [rax], al
add byte [rax], al
or byte [rsi], cl
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
pop qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rax + 0x60], 1
add byte [rax], al
rcl byte [rax], 1
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x410952
add byte [rax], al
add byte [rax], al
add al, ah
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol dword [rcx], 1
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x28, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
mov ecx, 0
add byte [rax], al
int1
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
