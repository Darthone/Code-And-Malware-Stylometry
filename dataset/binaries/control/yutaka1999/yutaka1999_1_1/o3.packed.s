call 0x400f98
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400db0
add ebx, ebx
je 0x400d66
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400d9e
cmp rbp, -4
ja 0x400d9e
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400d86
add ecx, 4
mov dl, byte [rax]
je 0x400dae
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400d9e
ret
cld
pop r11
cmp r8b, 2
je 0x400dc6
jmp 0x400e43
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400dd6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400dbe
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400dee
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400ddb
sub eax, 3
jb 0x400e0c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400e43
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400e33
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400e31
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400e20
cmp rbp, -0xd00
adc ecx, eax
call 0x400d72
jmp 0x400dc6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400f1c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400eba
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400f06
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400ed9
push 0x3a707474
jne 0x400f32
js 0x400ef2
jae 0x400f2c
outsb dx, byte cs:[rsi]
je 0x400eeb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400f59
jb 0x400f4b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400f76
jb 0x400f89
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211cb9
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211cb9
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400e54
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400f7f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400f2d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1027
jb 0x40103f
movsxd rbp, dword [rdi]
jae 0x401039
insb byte [rdi], dx
js 0x40103f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40101f
cmp rsi, rcx
jae 0x401027
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401006
cmp al, 0x8f
ja 0x401006
cmp byte [rsi - 2], 0xf
je 0x40100c
sub al, 0xe8
jg 0x401009
push rdi
cmp al, 1
ja 0x400ff4
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400ff7
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401024
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40107b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c14f9
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4010bf
mov al, 0xa
jmp 0x4010bf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x40109b
inc ebx
mov al, 0
jmp 0x4010c3
mov al, 2
jmp 0x4010c3
mov al, 3
jmp 0x4010c3
mov al, 0x3c
jmp 0x4010c3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401104
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401116
jg 0x401108
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a688b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401162
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb62df
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40116a
cmp esi, 0x21585055
jne 0x40116e
jge 0x401160
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401163
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401167
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401213
pop rcx
or al, 0x3b
jb 0x401219
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40118b
jmp 0x40118d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36610ce
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53316
in eax, dx
jg 0x4011c5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40120b
mov bh, 0x2a
add edi, 0x10
jmp 0x401208
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401245
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401281
jne 0x401298
fstpnce st(6), st(0)
jle 0x401261
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401297
jrcxz 0x4012cb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b22f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40134a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40130a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582958df
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40137d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401317
and ecx, 7
or al, 0xeb
jae 0x401382
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4013b7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x4013f5
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4013ae
push rax
call 0xffffffff868d109b
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4013b8
std
cmp edi, esi
xchg eax, edi
jle 0x40140d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95999
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40140b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x4013f9
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401422
js 0x401462
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4014f4
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad272f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401515
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40151a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20fcc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4014a8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
iretd
add eax, dword [rax]
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
mov esp, dword [rax + 0x92]
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0x98
adc al, 0
add byte [rcx + 0x2000006], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4015ce
je 0x4015d7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4015a0
mov dh, 0x7d
jbe 0x40159f
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4015d8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x4580006], bl
add byte [rax - 0x6fd837fa], al
invd
add byte [rax + 0x7480009], ch
in al, 0x13
enter 0xa07, 0
or eax, dword [rax]
or byte [rax], 0xf6
or esp, esp
add ecx, dword [rax + rax]
movabs al, byte [0xcac09f470970000d]
add dword [rsi], ecx
sldt esp
and byte [r15], r11b
and byte [rax], dl
add al, dl
adc dword [rax], eax
and al, 0x81
xchg eax, ebp
add eax, dword [rax + rbx - 0x6fe8ede1]
adc eax, dword ds:[rax]
mov ah, 0x19
adc al, 0
sbb eax, 0x9027c860
adc eax, 0x16f800
add byte [rsi], bl
in al, 0x13
enter 0x1707, 0
or byte [rax], bl
add al, bh
add edx, esi
add ebx, dword [rcx]
add byte [rax], al
and byte [rdx], bl
add byte [rax - 0x27], bh
add al, 0xf2
add al, 0x1b
add byte [rax + 0x48ec131c], ah
fimul word [rbp + 1]
add al, 0
int1
dec dword [rbx + rbx]
sti
xor al, 0x5c
pop rcx
mov edi, 0x16029719
xchg byte [rax + rdx*4 + 9], ah
sbb eax, eax
mov ebx, dword cs:[rbp - 0x38]
add byte [r15], dl
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
or dword [rcx + 0x17012ec1], edx
push rbx
xor r12b, byte [r11 + r8*4]
pop rbp
jp 0x40169e
and byte [rsi + 0x212bb058], al
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
out dx, eax
and dword [rbx], edi
adc dword [rbx + 0x1019b00f], ebp
test byte ss:[rax - 0x47], dh
add byte [rdi - 0x3c], al
scasb al, byte [rdi]
mov eax, ds
add eax, 0x5247d86f
jbe 0x4016a3
out dx, al
add eax, 0xef19ef14
xchg eax, ebp
int 0x58
xlatb
adc al, byte [rcx]
and cl, 0x5e
xor al, byte [rdx]
pop rdx
nop dword [rdi]
ficom word [rbp + 0x4600d535]
scasd eax, dword [rdi]
in al, 0xc9
ror dword [rsi + 2], 0x17
add dl, byte ss:[rax + 0x16]
add dword [rcx + rbx + 0x56472aec], esp
and byte [rbx], bl
ret 0xb086
jns 0x401732
mov edx, dword [rdi]
xchg eax, ecx
and dword [rax + rcx - 0x61], esp
push rax
test byte ss:[rbp + 0x49], bl
out dx, eax
mov ecx, 0xd8fd82f
pop rax
int 0x10
hlt
adc dword [rdi], ebx
add al, 0x20
nop
add dword [rdi + 3], 2
add dh, byte [rsi]
xor byte [rsp + rbx*2], 0x30
adc byte [eip - 0x2269b7b9], bh
adc byte [rbx - 0x77fdeed1], dl
test byte [rcx], ah
sbb dword [rdi + rbx*4 + 0x17], ebp
sub byte [rdi + rdi*2 + 0x393b0646], 0x17
ja 0x4016bc
sbb esi, dword [rax + 0x47ca6c21]
enter -0x1b89, 0x17
mov ebp, 0xfa876790
add byte [rdi - 0x50], al
and al, 0x39
add ebx, dword [rbp - 0x27]
jns 0x40169a
nop
add edi, dword [rdi + 0x2437597]
sub dword [rdi], 0x50
lahf
mov eax, 0x9c841117
cmp al, 0xd9
pop rdi
shl byte [rax], 0xed
add edi, dword [rcx + rbx*8 - 0x2bc9dfb5]
out 0xc3, eax
or al, 0xbf
int1
add ecx, dword [rsi + rcx*8]
mov dh, 0x47
movsxd rsi, dword [rdx + 0x74]
jae 0x401746
idiv bh
mov word [rsi + 0x66], fs
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x4017c5
imul edi, dword [ebx - 9], 0x61a6b7f
pop rdi
je 0x4017d8
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401794
outsd dx, dword fs:[rsi]
pop rdi
or esi, esi
fstp xword [rdi + 0x7b]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4017e4
jne 0x401800
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4017f9
sub dword gs:[rdi + 0x64fec0bf], esi
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0x7208
jb 0x401812
mov bh, 0x2f
int1
jns 0x401808
std
jb 0x401826
add byte [rsi + 0xa], ah
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
fld qword [rax + 0xd3279b9]
pop rdi
sub dword [rdx + rbp - 0x47], esi
out dx, al
pushfq
jo 0x401839
and al, 0x46
push rdx
pop r15
lahf
rcl dword [rsi + 0xbac9b0f], 0x47
push rbp
and bpl, dil
idiv bh
in eax, dx
push rdx
adc al, byte [rdi + 0x4c]
pop rdi
push rbx
iretd
push rsp
fcmovb st(0), st(2)
in al, dx
sub byte [rbx + 0x64], bl
adc ah, ch
int1
jbe 0x401880
fild dword [rdi]
je 0x40181b
pop rcx
or byte [r10 + 0x53], bl
je 0x4017ea
outsb dx, byte [rsi]
jg 0x401882
xchg eax, ebx
and dword [rax + rbp*2 + 0x72], esi
outsd dx, dword [rsi]
ja 0x40187e
loopne 0x40188f
or dword [ecx + esi*8], esi
outsd dx, dword [rsi]
mov edi, 0x50d129b5
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor eax, ebp
mov esp, 0x6c46bc6b
imul esp, dword [rdx + 0x63], 0xe7757325
outsd dx, dword [rsi]
push rsi
fmul dword [rdi]
insd dword [edi], dx
xor byte [rax - 0x61], dl
jbe 0x4018b1
push rdx
push rsi
fdiv st(0)
or dword [rbp + 0x43], 0x6c
jae 0x4018d0
jo 0x4018d5
ja 0x4018a6
enter 0x6dde, 0xf
pop rdi
xor ch, byte [rsi]
add dword [rip + 0x506c646f], esi
jbe 0x4018c9
insb byte [rdi], dx
fldln2
div byte [rax + 0x72]
push rax
je 0x4018e0
pop rdx
push 0x43722d6b
sahf
add eax, 0x24616d62
std
mov al, 0x2d
loope 0x4018e2
pop r15
ret
or al, 0x43
rcl dword [rcx + 0x62], -0x5f
fnstsw dword [rdx + 0x4f1bc7ae]
xor bl, byte fs:[rdi + 0x75]
mov dword [rbx], eax
add eax, 0x737ec016
movsxd rsp, dword [rcx + 0x6e]
cmp ax, 0x853b
xchg eax, edx
mov dh, 0x54
jb 0x4018e2
pop rdx
and r14b, dil
mov dh, 0xdb
mov bh, 0x37
adc ah, byte [rbx + 0x78]
js 0x4018f6
add byte [rdx], dh
fldcw word [rcx - 0x6f]
mov cl, 0xe5
lodsd eax, dword [rsi]
mov ch, 0x76
movsxd rbx, dword [r9d]
adc dh, byte [rbp + 0x72745f9d]
mov r11d, 0x10eb6b7b
push r11
add al, 0x45
cmp dword [rdi + 0x5a], ebx
add ch, byte [rsi + 0x4b]
fdivr dword [rdi + 0x69]
outsb dx, byte [esi]
push r10
push r11
xor al, 0x5f
jge 0x40192a
mov ah, 0xc6
jo 0x401970
fldenv [rbx + rsi*2 + 0x4c]
ja 0x40195e
ret 0xaa2b
jnp 0x401970
mov ch, 0xf
sbb al, 0x7e
ret
pop rdx
mov r8b, byte [r15]
movsxd rbp, dword [rbx + 0x27]
sub byte [rbx + 0x6f822b6c], bh
insb byte [rdi], dx
iretd
xor al, 0xa6
lodsb al, byte [rsi]
movabs eax, dword [0xa56dee45247511a3]
rcr byte [rsi], 1
xchg eax, ecx
lodsd eax, dword [rsi]
push rsp
insd dword [rdi], dx
jne 0x4018dc
xchg dword [rbx], ecx
lodsb al, byte [rsi]
mov cl, 0x55
call 0x5b9f7e95
movabs eax, dword [0x6efd7cfb57401ed0]
pop rsp
mov ebx, 0x42464ad1
pushfq
jbe 0x401981
sub esp, dword [rdi]
test qword [r13 + 0x5f49c737], r9
xor dword [rax], eax
add byte [rcx], dl
lea edx, [rbp + 0x2b]
adc eax, 0x776edb1c
outsb dx, byte [rsi]
pop rdx
adc dword [rdx + rcx*2], edi
mov eax, edi
scasb al, byte [rdi]
xchg eax, esp
imul eax, dword [rsi + 0x30], 0
or eax, 0x6ec9d829
mov ebx, 0x496d7973
je 0x4019f4
push -0x6491a4f7
movsxd rdx, dword [rcx + 0x59]
jo 0x401993
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push rcx
mov al, 0xad
sub eax, 0x950d6715
jne 0x4019c9
imul edi, dword [rax + rdx*2 + 0x2d643f9e], 0x69
sbb dword [rip - 0x4233253a], ecx
mov ch, 0x38
or dword [rcx + rdi*2 + 0x6e], esp
pop r8
jmp 0x401985
sbb dword [rsi - 0x62], esi
imul ebx, dword [rdi - 0x427da0f4], 0x381bc346
jrcxz 0x4019ee
or dword [rbp - 0x31], ebp
mov dh, 0x1b
je 0x401a40
mov al, 0xa
sub al, 0x6f
lodsb al, byte [rsi]
cmp edi, dword [rcx + 0x786908cd]
add eax, 0xf26f242b
mov bh, 0xec
sar dword [rdx + 0x2e], 0x65
push 0x72646805
or eax, 0xb78d755d
movsxd rbx, dword [rax + 0x2e]
movsxd rsp, dword [rbp + 0x70]
out 0xbd, eax
insb byte [rdi], dx
wait
sub eax, 0x43b311c9
or ebp, dword [rdx - 0x22]
mov esi, dword [rbp - 0x74c95e34]
add byte [rax - 0x52], ch
out 0x98, al
int 0x7b
pop rsi
sub eax, dword [rdx + rbp*4]
test eax, 0x536daeb2
add byte [rax], al
lahf
stosd dword [rdi], eax
add ah, 1
out 0x8f, eax
and dword [rcx], ebx
xchg eax, edx
mov bl, 0x3f
sbb al, 1
sbb dword [rax + rax*2 - 0x66], esp
and eax, dword [rdi]
push rsp
push rsp
xchg byte [rax + rcx*2 + 6], ah
and byte [rcx + rsi], al
sbb dword [rax + rcx*2 + 0x74], esp
je 0x401a66
xchg dword [rcx + rbx - 0x9bbb6], edi
ljmp [rdi - 0x68]
or dword [rip + 0x59820c9], 0x7f
or byte [rax + 0x49], ah
xor esp, dword [rsi + rcx*2]
or ecx, esi
jnp 0x401a71
add r11, r15
int 0x20
xchg eax, ebx
sbb byte [rsi + 3], dl
loope 0x401abb
and byte [rip + 0x493f0757], 0x77
xchg eax, ecx
cmp al, 0x27
add bl, byte [rsi - 0x41]
cmp dword [rbx + 0x13], edi
jg 0x401a89
mov edi, 0xb21ba422
and dword [rdx], eax
imul edi, dword [rdi], -2
in al, 0xcc
test al, 7
cmpsd dword [rsi], dword ptr [rdi]
movabs al, byte [0x4f7aff0619365374]
add al, 0xb0
add dword [rsi - 0x4f18f831], edx
sub ebx, dword [rbx - 0x7b00c050]
sbb dword [rdx + rax*2 + 0x60], esp
ret 0x7200
leave
and byte [rcx], al
sbb dword [rsi + 0x4492d13], ecx
or ebp, dword [rsi + 0x436407d7]
leave
or edi, edi
sbb cl, byte [rcx + 0xc83243f]
xor ah, byte [rax + 0x6420d0a0]
adc byte ss:[rdi], al
xchg eax, esp
mov dh, 0xc0
jo 0x401b12
outsd dx, dword [rsi]
paddusb mm5, qword [rsp + 0x47]
popfq
mov edi, 0x5b0e073f
and bh, cl
jg 0x401b33
movabs dword [0xdff07cf48519bd9], eax
leave
or dword [rcx - 0x36bc2f41], ebp
and byte [rbx - 0x4eab2fc1], al
in al, dx
int 0x2a
and al, 0x9f
sbb dword [rdx - 0x40cb1b5f], edx
pop rax
add al, 0x37
pop rsp
add esp, ebx
and al, 8
fxch st(1)
pop rdi
add dword [rsi + 0x6d7fb392], eax
fist dword [rdi]
loope 0x401b80
sahf
add eax, dword [rax]
mov edi, 0xbba406
out 0x3f, eax
psubb mm7, qword [rbp - 0x7be6fdf]
xchg eax, ebx
shl byte [rsi], 3
xchg eax, esi
nop dword [rdi]
mov bl, 0xd9
xchg eax, edx
clc
wait
jb 0x401b65
jg 0x401b50
jg 0x401b18
test dword [rdx + rsi], ecx
adc byte [rax + 0x2e411fbf], bl
xchg eax, edx
or ah, ch
nop
or cl, cl
add dword [rcx], eax
iretd
and byte [rdi], bh
sbb dword [rdx + 0xa78e4a1], edx
js 0x401b06
xchg eax, edx
xor esi, dword [rdi]
call qword [rax]
adc byte [rax + rdx*4 + 1], ah
jmp 0xffffffff88e023ce
sbb edx, dword [rdx + 0x2004390b]
adc eax, 0xc8598c7f
xor byte [rdi], dl
mov edi, 0xaec86cb6
add dword [rdi], eax
adc dword [rbx + 0x27], edi
mov esp, esp
sbb dword [rdi], edx
sub al, 0x7f
add dword [rcx + 0x2e], eax
insb byte [rdi], dx
sbb dword [rbx - 0x53593f81], edi
fxch st(1)
push -0x5ce0f9
or dword [rax - 0x62], ecx
sbb al, 0xc2
jg 0x401bef
sub cl, bl
add eax, dword [rax]
add byte [rax], al
mov al, 0
add byte [rax], al
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x4ef7fdea], ecx
xor byte [rsi - 0x587d6652], dh
sbb byte [rax - 0x7effffec], bl
add byte [rax], al
and byte [rip + 0x490000], dh
add byte [rbx], bh
hlt
add byte [rax], al
add bh, bh
