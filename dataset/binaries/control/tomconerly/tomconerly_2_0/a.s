xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60609f
push rbp
sub rax, obj.completed.7585
cmp rax, 0xe
mov rbp, rsp
jbe 0x400990
mov eax, 0
test rax, rax
je 0x400990
pop rbp
mov edi, obj.completed.7585
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.completed.7585
push rbp
sub rsi, obj.completed.7585
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x4009d8
mov eax, 0
test rax, rax
je 0x4009d8
pop rbp
mov edi, obj.completed.7585
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x2056b1], 0
jne 0x4009fa
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x20569e], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400a10
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400a0b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x168
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rax, [rbp - 0x160]
mov rsi, rax
mov edi, str._lld
mov eax, 0
call sym.imp.scanf
mov qword [rbp - 0x148], 1
mov rax, qword [rbp - 0x160]
cmp qword [rbp - 0x148], rax
jg 0x4012df
lea rdx, [rbp - 0x150]
lea rax, [rbp - 0x158]
mov rsi, rax
mov edi, str._lld__lld
mov eax, 0
call sym.imp.scanf
lea rax, [rbp - 0x40]
mov rdi, rax
call method.std::allocator_long_.allocator
mov rax, qword [rbp - 0x158]
mov rcx, rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xe0]
mov rsi, rcx
mov rdi, rax
call method.std::vector_long_std::allocator_long__.vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_long_::_allocator
lea rax, [rbp - 0x40]
mov rdi, rax
call method.std::allocator_long_.allocator
mov rax, qword [rbp - 0x158]
mov rcx, rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xc0]
mov rsi, rcx
mov rdi, rax
call method.std::vector_long_std::allocator_long__.vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_long_::_allocator
mov qword [rbp - 0x140], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0x140], rax
jge 0x400b7c
mov rdx, qword [rbp - 0x140]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov rbx, rax
mov rdx, qword [rbp - 0x140]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov rdx, rbx
mov rsi, rax
mov edi, str._lld__lld
mov eax, 0
call sym.imp.scanf
add qword [rbp - 0x140], 1
jmp 0x400b18
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_std::vector_long_std::allocator_long___::allocator
lea rax, [rbp - 0x60]
mov rdi, rax
call method.std::allocator_long_.allocator
mov rax, qword [rbp - 0x158]
mov rcx, rax
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x80]
mov rsi, rcx
mov rdi, rax
call method.std::vector_long_std::allocator_long__.vector
mov rax, qword [rbp - 0x158]
mov rsi, rax
lea rcx, [rbp - 0x40]
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::vector
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::_vector
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_long_::_allocator
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_std::vector_long_std::allocator_long___::_allocator
mov qword [rbp - 0x138], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0x138], rax
jge 0x400d40
mov qword [rbp - 0x130], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0x130], rax
jge 0x400d33
mov rbx, qword [rbp - 0x130]
mov rdx, qword [rbp - 0x138]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov rsi, rax
mov edi, str._lld
mov eax, 0
call sym.imp.scanf
mov rbx, qword [rbp - 0x130]
mov rdx, qword [rbp - 0x138]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov rax, qword [rax]
cmp rax, -1
sete al
test al, al
je 0x400d26
mov rax, qword [rbp - 0x138]
cmp rax, qword [rbp - 0x130]
je 0x400cf4
mov rbx, qword [rbp - 0x130]
mov rdx, qword [rbp - 0x138]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
movabs rcx, 0x2386f26fc10000
mov qword [rax], rcx
jmp 0x400d26
mov rbx, qword [rbp - 0x130]
mov rdx, qword [rbp - 0x138]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov qword [rax], 0
add qword [rbp - 0x130], 1
jmp 0x400c20
add qword [rbp - 0x138], 1
jmp 0x400c01
mov qword [rbp - 0x128], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0x128], rax
jge 0x400e99
mov qword [rbp - 0x120], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0x120], rax
jge 0x400e8c
mov qword [rbp - 0x118], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0x118], rax
jge 0x400e7f
mov rbx, qword [rbp - 0x118]
mov rdx, qword [rbp - 0x120]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov r13, rax
mov rbx, qword [rbp - 0x128]
mov rdx, qword [rbp - 0x120]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov r12, qword [rax]
mov rbx, qword [rbp - 0x118]
mov rdx, qword [rbp - 0x128]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov rax, qword [rax]
add rax, r12
mov qword [rbp - 0x40], rax
mov rbx, qword [rbp - 0x118]
mov rdx, qword [rbp - 0x120]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::min_long_
mov rax, qword [rax]
mov qword [r13], rax
add qword [rbp - 0x118], 1
jmp 0x400d89
add qword [rbp - 0x120], 1
jmp 0x400d6a
add qword [rbp - 0x128], 1
jmp 0x400d4b
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::allocator
lea rax, [rbp - 0x161]
mov rdi, rax
call sym.std::allocator_double_::allocator
mov rax, qword [rbp - 0x158]
mov rcx, rax
lea rdx, [rbp - 0x161]
lea rax, [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call method.std::vector_double_std::allocator_double__.vector
mov rax, qword [rbp - 0x158]
mov rsi, rax
lea rcx, [rbp - 0x80]
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::vector
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
lea rax, [rbp - 0x161]
mov rdi, rax
call sym.std::allocator_double_::_allocator
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
mov qword [rbp - 0x110], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0x110], rax
jge 0x40106f
mov qword [rbp - 0x108], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0x108], rax
jge 0x401062
mov rbx, qword [rbp - 0x108]
mov rdx, qword [rbp - 0x110]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov r13, rax
mov rdx, qword [rbp - 0x110]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov r12, qword [rax]
mov rbx, qword [rbp - 0x108]
mov rdx, qword [rbp - 0x110]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov rax, qword [rax]
cmp r12, rax
jl 0x401047
mov rbx, qword [rbp - 0x108]
mov rdx, qword [rbp - 0x110]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov rax, qword [rax]
pxor xmm1, xmm1
cvtsi2sd xmm1, rax
movsd qword [rbp - 0x178], xmm1
mov rdx, qword [rbp - 0x110]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::operator__
mov rax, qword [rax]
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
movsd xmm1, qword [rbp - 0x178]
divsd xmm1, xmm0
movapd xmm0, xmm1
jmp 0x40104f
movsd xmm0, qword [rip + 0x2761]
movsd qword [r13], xmm0
add qword [rbp - 0x108], 1
jmp 0x400f43
add qword [rbp - 0x110], 1
jmp 0x400f24
mov qword [rbp - 0x100], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0x100], rax
jge 0x4011cf
mov qword [rbp - 0xf8], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0xf8], rax
jge 0x4011c2
mov qword [rbp - 0xf0], 0
mov rax, qword [rbp - 0x158]
cmp qword [rbp - 0xf0], rax
jge 0x4011b5
mov rbx, qword [rbp - 0xf0]
mov rdx, qword [rbp - 0xf8]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov r12, rax
mov rbx, qword [rbp - 0x100]
mov rdx, qword [rbp - 0xf8]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm2, qword [rax]
movsd qword [rbp - 0x178], xmm2
mov rbx, qword [rbp - 0xf0]
mov rdx, qword [rbp - 0x100]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
movsd xmm0, qword [rax]
addsd xmm0, qword [rbp - 0x178]
movsd qword [rbp - 0x40], xmm0
mov rbx, qword [rbp - 0xf0]
mov rdx, qword [rbp - 0xf8]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::min_double_
movsd xmm0, qword [rax]
movsd qword [r12], xmm0
add qword [rbp - 0xf0], 1
jmp 0x4010b8
add qword [rbp - 0xf8], 1
jmp 0x401099
add qword [rbp - 0x100], 1
jmp 0x40107a
mov rax, qword [rbp - 0x148]
mov rsi, rax
mov edi, str.Case___lld:
mov eax, 0
call sym.imp.printf
mov qword [rbp - 0xe8], 0
mov rax, qword [rbp - 0x150]
cmp qword [rbp - 0xe8], rax
jge 0x40128f
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x80]
mov rsi, rax
mov edi, str._lld__lld
mov eax, 0
call sym.imp.scanf
mov rax, qword [rbp - 0x80]
sub rax, 1
mov qword [rbp - 0x80], rax
mov rax, qword [rbp - 0x40]
sub rax, 1
mov qword [rbp - 0x40], rax
mov rax, qword [rbp - 0x40]
mov rbx, rax
mov rax, qword [rbp - 0x80]
mov rdx, rax
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::operator__
mov rsi, rbx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rax, qword [rax]
mov qword [rbp - 0x178], rax
movsd xmm0, qword [rbp - 0x178]
mov edi, str._.09f
mov eax, 1
call sym.imp.printf
add qword [rbp - 0xe8], 1
jmp 0x4011f3
mov edi, 0xa
call sym.imp.putchar
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_vector
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_vector
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::_vector
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::_vector
add qword [rbp - 0x148], 1
jmp 0x400a69
mov eax, 0
mov rcx, qword [rbp - 0x28]
xor rcx, qword fs:[0x28]
je 0x4013df
jmp 0x4013da
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_long_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_long_::_allocator
jmp 0x4013c0
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::_vector
jmp 0x40133e
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_long_::_allocator
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::allocator_std::vector_long_std::allocator_long___::_allocator
jmp 0x4013b1
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
jmp 0x40136c
mov rbx, rax
lea rax, [rbp - 0x161]
mov rdi, rax
call sym.std::allocator_double_::_allocator
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
jmp 0x40139d
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_vector
jmp 0x40139d
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_vector
jmp 0x4013b1
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::_vector
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x168
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_long_.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_long_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::_Vector_base
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::_M_default_initialize
jmp 0x4014a1
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_long_std::allocator_long__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_long__long_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::vector_long_std::allocator_long___.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_long_std::allocator_long___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_M_fill_initialize
jmp 0x4015a7
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::vector_long_std::allocator_long____std::vector_long_std::allocator_long___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
cmp rdx, rax
jge 0x401640
mov rax, qword [rbp - 0x10]
jmp 0x401644
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_base
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_default_initialize
jmp 0x4016d9
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_base
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_fill_initialize
jmp 0x4017bf
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double____std::vector_double_std::allocator_double___
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 8]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
jbe 0x40187c
mov rax, qword [rbp - 0x10]
jmp 0x401880
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_long_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::_M_create_storage
jmp 0x40190d
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_long_std::allocator_long__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_long__unsignedlong_long_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_long__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_long_std::allocator_long___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_M_create_storage
jmp 0x401a6b
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_std::vector_long_std::allocator_long____unsignedlong_std::vector_long_std::allocator_long___std::vector_long_std::allocator_long___
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_long_std::allocator_long____
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_double_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_create_storage
jmp 0x401bdf
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_double__unsignedlong_double_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::vector_double_std::allocator_double___::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_create_storage
jmp 0x401d3d
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xaaaaaaaaaaaaaaab
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rdi, rax
call sym.std::__uninitialized_fill_n_a_std::vector_double_std::allocator_double____unsignedlong_std::vector_double_std::allocator_double___std::vector_double_std::allocator_double___
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_long_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x401efc
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_long__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_long__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_long__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::allocator_std::vector_long_std::allocator_long___.allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_long_std::allocator_long___std::allocator_std::vector_long_std::allocator_long____::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
lea rdx, [rcx + rax]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x40202e
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_long_std::allocator_long____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_std::vector_long_std::allocator_long____unsignedlong_std::vector_long_std::allocator_long___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::vector_long_std::allocator_long____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x40249a
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x40215e
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_double__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::allocator_std::vector_double_std::allocator_double___.allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::vector_double_std::allocator_double___std::allocator_std::vector_double_std::allocator_double____::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
lea rdx, [rcx + rax]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402290
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_double_std::allocator_double____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_fill_n_std::vector_double_std::allocator_double____unsignedlong_std::vector_double_std::allocator_double___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::vector_double_std::allocator_double____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_long_::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40233c
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_long__::allocate
jmp 0x402341
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_long_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_long__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_long_std::allocator_long___::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4023fc
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_long_std::allocator_long____::allocate
jmp 0x402401
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_long_std::allocator_long___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_false_::__uninit_fill_n_std::vector_long_std::allocator_long____unsignedlong_std::vector_long_std::allocator_long___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x402497
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_long_std::allocator_long___
mov rdi, rax
call sym.std::_Destroy_std::vector_long_std::allocator_long___
add qword [rbp - 8], 0x18
jmp 0x402472
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_double_.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4024ec
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::allocate
jmp 0x4024f1
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_double__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4025ac
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::vector_double_std::allocator_double____::allocate
jmp 0x4025b1
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_fill_n_false_::__uninit_fill_n_std::vector_double_std::allocator_double____unsignedlong_std::vector_double_std::allocator_double___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x402647
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::vector_double_std::allocator_double___
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double___
add qword [rbp - 8], 0x18
jmp 0x402622
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_long_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov qword [rbp - 0x10], 0
lea rdx, [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_long__unsignedlong_long_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4026f9
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_long_std::allocator_long___::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x30], 0
je 0x4027a7
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::vector_long_std::allocator_long___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::vector_long_std::allocator_long___std::vector_long_std::allocator_long__const__
sub qword [rbp - 0x30], 1
add qword [rbp - 0x18], 0x18
jmp 0x402776
mov rax, qword [rbp - 0x18]
jmp 0x4027e0
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_long_std::allocator_long____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::_vector
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
pxor xmm0, xmm0
movsd qword [rbp - 0x10], xmm0
lea rdx, [rbp - 0x10]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_double__unsignedlong_double_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4028c0
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x18], rax
cmp qword [rbp - 0x30], 0
je 0x40296d
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::vector_double_std::allocator_double___
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::vector_double_std::allocator_double___std::vector_double_std::allocator_double__const__
sub qword [rbp - 0x30], 1
add qword [rbp - 0x18], 0x18
jmp 0x40293c
mov rax, qword [rbp - 0x18]
jmp 0x4029a6
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::vector_double_std::allocator_double____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_long_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402a06
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_long__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_long__unsignedlong_long_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_long_std::allocator_long___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402a80
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::vector_long_std::allocator_long__const__
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x18
call 0x4013ed
mov rbx, rax
test rbx, rbx
je 0x402b0c
mov rsi, r13
mov rdi, rbx
call sym.std::vector_long_std::allocator_long__::vector
jmp 0x402b0c
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x4013ff
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402b48
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_double__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_double__unsignedlong_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::vector_double_std::allocator_double___::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402bc2
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
add rax, rax
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x18
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_std::vector_double_std::allocator_double__const__
mov r13, rax
mov r12, qword [rbp - 0x28]
mov rsi, r12
mov edi, 0x18
call 0x4013ed
mov rbx, rax
test rbx, rbx
je 0x402c4e
mov rsi, r13
mov rdi, rbx
call sym.std::vector_double_std::allocator_double__::vector
jmp 0x402c4e
mov r13, rax
mov rsi, r12
mov rdi, rbx
call 0x4013ff
mov rax, r13
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_long__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x10], rax
cmp qword [rbp - 0x10], 0
je 0x402cc9
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 8]
mov qword [rax], rdx
sub qword [rbp - 0x10], 1
add qword [rbp - 0x18], 8
jmp 0x402cab
mov rax, qword [rbp - 0x18]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xaaaaaaaaaaaaaaa
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::_M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_long__::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_long_::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_long_std::allocator_long__._M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_long_std::allocator_long__::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____long__long_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x402dec
jmp 0x402de7
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_long_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_long_std::allocator_long__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_double__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
movsd xmm0, qword [rax]
movsd qword [rbp - 8], xmm0
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x10], rax
cmp qword [rbp - 0x10], 0
je 0x402e6b
mov rax, qword [rbp - 0x18]
movsd xmm0, qword [rbp - 8]
movsd qword [rax], xmm0
sub qword [rbp - 0x10], 1
add qword [rbp - 0x18], 8
jmp 0x402e4b
mov rax, qword [rbp - 0x18]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xaaaaaaaaaaaaaaa
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_double_std::allocator_double__._M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_double__::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_double_::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__double_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x402f8e
jmp 0x402f89
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_double_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_long__::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403018
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403079
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4030ce
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____long__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403180
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4031e1
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403236
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_long_::allocator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____long__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x40249a
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____long__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____long__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____double__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_long__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_longconst__long__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_double__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_doubleconst__double__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_long_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_double_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_longconst__std::vector_long_std::allocator_long___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x40364d
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_doubleconst__std::vector_double_std::allocator_double___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x4036cf
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x2026de]
push rbp
lea rbp, [rip + 0x2026de]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x403756
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x403740
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x646c6c], ah
and eax, 0x646c6c
and eax, 0x20646c6c
and eax, 0x646c6c
jae 0x403801
and byte [rbx], ah
and eax, 0x3a646c6c
add byte [rax], ah
and byte [rip + 0x6639302e], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x3c86c820], al
add dword [r11], ebx
add dword [rbx], ebx
add edi, dword [rbx]
mov ah, 5
add byte [rax], al
mov ch, 0
add byte [rax], al
js 0x403796
inc dword [rax]
add byte [rax], al
js 0x40379f
call rax
add eax, 0xd26e0000
dec dword [rax + 0x35000006]
fdiv st(7), st(0)
ljmp [rax]
add byte [rax], al
fdiv st(7), st(0)
dec dword [rax + 6]
add byte [rax], al
push rsi
fdiv st(7), st(0)
mov eax, 0x72000006
fdiv st(7), st(0)
fadd dword [rsi]
add byte [rax], al
mov ds, esp
clc
add byte [rax], al
fdiv st(7), st(0)
jmp qword [rax]
add byte [rax], al
xor al, 0xdd
dec dword [rax + 7]
add byte [rax], al
push rsp
ljmp [rax + 7]
add byte [rax], al
jo 0x4037fb
dec dword [rax - 0x73fffff9]
ljmp [rax - 0x9fffff9]
call rax
add byte [rax], al
cmp bl, dh
clc
add byte [rax], al
movsxd rbx, esi
lcall [rax]
or byte [rax], al
add byte [rsi + 0x38ffffde], cl
or byte [rax], al
add byte [rdx + 0x58ffffde], ch
or byte [rax], al
add dh, al
fdivp st(7)
js 0x403862
add byte [rax], al
sub bh, bl
jmp qword [rax + 0x6c000008]
dec eax
or byte [rax], al
add byte [rax - 0x17000021], cl
or byte [rax], al
add byte [rdi + rbx*8 + 0x908ffff], ah
add byte [rax], al
loopne 0x40387e
push qword [rax]
or dword [rax], eax
add byte [rdx - 0x20], dl
lcall [rax + 9]
add byte [rax], al
jl 0x40386e
js 0x40389b
add byte [rax], al
pushfq
loopne 0x403896
lcall [rax - 0x35fffff7]
loopne 0x40389e
mov eax, 0xd6000009
loopne 0x4038a6
fmul dword [rcx]
add byte [rax], al
loop 0x40388e
clc
or dword [rax], eax
add dh, bh
loopne 0x4038b6
lcall [rax]
or al, byte [rax]
add byte [rcx - 1], bl
inc dword [rax + 0xa]
add byte [rax], al
lodsb al, byte [rsi]
loope 0x4038c6
ljmp [rax + 0xa]
add byte [rax], al
loope 0x4038ce
dec dword [rax - 0x1fffff6]
loope 0x4038d6
ljmp [rax + 0x2800000a]
loop 0x4038de
dec eax
or al, byte [rax]
add byte [rdx], dh
call 0x404038f7
loop 0x4038ee
dec dword [rax]
or eax, dword [rax]
add byte [rdx - 1], bl
ljmp [rax]
or eax, dword [rax]
add byte [rdx + 0x50ffffe2], bh
or eax, dword [rax]
add byte [rbx], bl
js 0x403915
add byte [rax], al
jrcxz 0x40390e
lcall [rax + 0x7200000b]
jrcxz 0x403916
mov eax, 0x9c00000b
jrcxz 0x40391e
fmul dword [rbx]
add byte [rax], al
test al, 0xe3
clc
or eax, dword [rax]
add byte [rbx + 0xc18ffff], dh
add byte [rax], al
shl bl, 1
cmp byte [rax + rax], cl
add byte [rsi], ch
in al, 0xff
jmp qword [rax + 0xc]
add byte [rax], al
jle 0x40392a
dec dword [rax - 0x3dfffff4]
in al, 0xff
ljmp [rax - 0x2ffffff4]
in al, 0xff
dec eax
or al, 0
add dl, bh
in al, 0xff
call 0x6403971
in eax, 0xff
dec dword [rax]
or eax, 0xe5120000
ljmp [rax]
or eax, 0xe52e0000
dec dword [rax + 0xd]
add byte [rax], al
mov ebp, fs
push qword [rax + 0xd]
add byte [rax], al
out dx, al
in eax, 0xff
lcall [rax + 0x3600000d]
out 0xff, al
mov eax, 0x4400000d
out 0xff, al
fmul dword [rip - 0x19920000]
clc
or eax, 0xe6b80000
lcall [rax]
add byte [rax], al
adc ah, bh
cmp byte [rsi], cl
add byte [rax], al
out 0xff, eax
lcall [rax + 0xe]
add byte [rax], al
jo 0x4039a5
js 0x4039d0
add byte [rax], al
xchg eax, esi
out 0xff, eax
lcall [rax - 0x1ffffff2]
out 0xff, eax
mov eax, 0x4400000e
call 0xf1939d9
add byte [rax], al
jns 0x4039c6
clc
add byte [rax], al
stosb byte [rdi], al
call 0xf5939e9
add byte [rax], al
shr al, 1
cmp byte [rdi], cl
add byte [rax], al
sbb ch, cl
lcall [rax + 0xf]
add byte [rax], al
je 0x4039e7
js 0x403a11
add byte [rax], al
test eax, 0x98ffffe9
sldt word [rax]
shr cl, cl
mov eax, 0xf800000f
jmp 0x10193a19
add byte [rax], al
clc
sldt word [rax]
cmpsb byte [rsi], byte ptr [rdi]
lcall [rax]
adc byte [rax], al
add bl, bl
cmp byte [rax], dl
add byte [rax], al
or al, 0xeb
lcall [rax + 0x10]
add byte [rax], al
xor ch, bl
js 0x403a52
add byte [rax], al
pop rax
jmp 0x403a46
lcall [rax - 0x74fffff0]
jmp 0x403a4e
mov eax, 0xb9000010
jmp 0x403a56
fcom dword [rax]
add byte [rax], al
loop 0x403a49
clc
adc byte [rax], al
add dl, dh
jmp 0x403a66
lcall [rax]
adc dword [rax], eax
add byte [rax], bl
in al, dx
cmp byte [rcx], dl
add byte [rax], al
in al, dx
lcall [rax + 0x11]
add byte [rax], al
jns 0x403a6a
js 0x403a93
add byte [rax], al
stosb byte [rdi], al
in al, dx
lcall [rax - 0x1dffffef]
in al, dx
mov eax, 0x8000011
in eax, dx
fcom dword [rcx]
add byte [rax], al
cmp ebp, ebp
clc
adc dword [rax], eax
add byte [rcx - 0x13], ch
lcall [rax]
adc al, byte [rax]
add byte [rdx + 0x38ffffed], dl
adc al, byte [rax]
add byte [rdx + 0x58ffffed], ah
adc al, byte [rax]
add al, cl
in eax, dx
js 0x403ad4
add byte [rax], al
sti
in eax, dx
lcall [rax + 0x29000012]
out dx, al
mov eax, 0x5a000012
out dx, al
fcom dword [rdx]
add byte [rax], al
xchg eax, edx
out dx, al
clc
adc al, byte [rax]
add byte [rcx + 0x18ffffee], ah
adc eax, dword [rax]
add ah, cl
out dx, al
cmp byte [rbx], dl
add byte [rax], al
out dx, eax
out dx, al
lcall [rax + 0x13]
add byte [rax], al
out dx, eax
js 0x403b15
add byte [rax], al
push rbx
out dx, eax
lcall [rax + 0x7e000013]
out dx, eax
mov eax, 0xa1000013
out dx, eax
fcom dword [rbx]
add byte [rax], al
inc dword [rax]
adc al, 0
add byte [rip + 0x20fffff0], bh
adc al, 0
add byte [rax - 0x10], bl
inc dword [rax + 0x14]
add byte [rax], al
jmp qword [rax + 0x14]
add byte [rax], al
xchg eax, edx
inc dword [rax - 0x4affffec]
jmp qword [rax + 0xa000014]
int1
inc eax
adc al, 0
add byte [rcx], bl
int1
jmp rax
adc al, 0
add byte [rcx + rsi*8 - 1], al
inc dword [rax]
adc eax, 0xf1670000
jmp qword [rax]
adc eax, 0xf1f50000
dec dword [rax + 0x15]
add byte [rax], al
add esi, edx
ljmp [rax + 0x15]
add byte [rax], al
dec dword [rax + 0x60000015]
ljmp [rax - 0x67ffffeb]
dec eax
adc eax, 0xf2e30000
call 0xfffffffff1403bb2
dec dword [rax]
add byte [rax], al
cmp byte [rsi], dl
add byte [rax], al
movabs byte [0xda00001658fffff3], al
js 0x403bd0
add byte [rax], al
and eax, 0x98fffff4
add byte [rax], al
xor esi, esp
mov eax, 0xa2000016
hlt
call 0xffffffffb6403beb
hlt
dec dword [rax]
add byte [rax], al
sal ah, 1
ljmp [rax]
add byte [rax], al
sbb ch, dh
dec dword [rax + 0x17]
add byte [rax], al
sub al, 0xf5
ljmp [rax + 0x17]
add byte [rax], al
idiv dil
lcall [rax + 0x54000017]
idiv bh
mov eax, 0x6e000017
idiv bh
fcom dword [rdi]
add byte [rax], al
mov edx, 0xf8fffff6
add byte [rax], al
idiv bh
lcall [rax]
sbb byte [rax], al
add cl, ah
idiv edi
dec dword [rax + 0x18]
add byte [rax], al
idiv edi
ljmp [rax + 0x18]
add byte [rax], al
clc
dec dword [rax + 0x62000018]
clc
ljmp [rax + 0x70000018]
clc
dec eax
sbb byte [rax], al
add ah, al
clc
call 0x18403c65
stc
dec dword [rax]
sbb dword [rax], eax
add byte [rcx - 7], cl
ljmp [rax]
sbb dword [rax], eax
add byte [rax - 7], bl
dec dword [rax + 0x19]
add byte [rax], al
jle 0x403c5f
ljmp [rax + 0x19]
add byte [rax], al
retf -7
dec dword [rax - 0x27ffffe7]
stc
ljmp [rax + 0x2c000019]
cli
dec eax
sbb dword [rax], eax
add byte [rax - 0x17000006], al
sbb dword [rax], eax
add byte [rcx + 0x8fffffa], dh
sbb al, byte [rax]
add dl, bl
cli
ljmp [rax]
sbb al, byte [rax]
add bh, dh
cli
dec dword [rax + 0x1a]
add byte [rax], al
sub bl, bh
ljmp [rax + 0x1a]
add byte [rax], al
push rdx
sti
dec dword [rax + 0x6f00001a]
sti
ljmp [rax - 0x5fffffe6]
sti
dec eax
sbb al, byte [rax]
add ch, cl
sti
call 0xfffffffffa403ce7
sti
dec dword [rax]
sbb eax, dword [rax]
add byte [rsi - 4], al
push qword [rax]
sbb eax, dword [rax]
add byte [rdx + 0x58fffffc], dl
sbb eax, dword [rax]
add byte [rsp + rdi*8 + 0x1b78ffff], ch
add byte [rax], al
add al, 0xfd
jmp qword [rax + 0x1e00001b]
std
inc eax
sbb eax, dword [rax]
add byte [rsi - 3], dh
call 0xffffffff84403d20
std
dec dword [rax]
sbb al, 0
add byte [rsi + 0x28fffffd], bl
sbb al, 0
add bh, cl
std
dec dword [rax + 0x1c]
add byte [rax], al
std
ljmp [rax + 0x1c]
add byte [rax], al
idiv ebp
dec dword [rax + 0x2800001c]
ljmp [rax + 0x4500001c]
dec eax
sbb al, 0
add byte [rdx - 0x17000002], ch
sbb al, 0
add bh, al
dec dword [rax]
sbb eax, 0xff2c0000
ljmp [rax]
sbb eax, 0xff3a0000
dec dword [rax + 0x1d]
add byte [rax], al
ljmp [rax + 0x1d]
add byte [rax], al
mov eax, 0xb0ffffff
sbb eax, 0
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403d8f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movabs al, byte [0x2affffcb]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403dbf
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jo 0x403d8c
push rax
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rip + 0x12ffffd6], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add bh, dh
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x403e41
add esi, eax
or byte [rax], al
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x2c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
fmulp st(3)
inc edi
or dword [rax], eax
add byte [rsp + rax*4], al
push rbp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea r8, [rbx]
mov word [rbx + rax*4], es
add eax, 0xc09b603
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1bffffd5], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
add byte [rdx + 0x1bffffd5], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rsi + 0x62ffffd5], cl
add byte [rax], al
add byte [rcx + rcx*8], al
push rbp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0xc8000000
inc dword [rax + rax]
add byte [rcx + rbx*8], al
push rbp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x403f03
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword fs:[rax], eax
add ah, ah
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], al
add byte [rax], al
in al, 0xd5
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add al, ah
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add dword [rax], r8d
add ah, bl
ljmp [rdx]
add byte [rax], al
add al, 0xdd
push rbp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add dword [rax], eax
add byte [rsi], bl
inc dword [rax + rax]
add byte [rbp*8 + 0x41004055], al
adc byte [rsi + 0x60d4302], al
jg 0x403fb3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 2
add byte [rax], al
cmp dl, dh
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 2
add byte [rax], al
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add al, byte [rax]
add byte [rsi - 0x2a], cl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x404018
add byte [rax], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 2
add byte [rax], al
jmp qword [rdx]
add byte [rax], al
add al, 0xf1
push rbp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cmp al, 2
add byte [rax], al
adc dh, 0xff
inc dword [rax + rax]
add byte [rcx + rax], al
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x404083
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 2
add byte [rax], al
pushfq
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 3
add byte [rax], al
cwde
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rsi + rdx*8 + 0x6affff], dl
add byte [rax], al
add al, 5
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add al, byte [rax]
add dh, dl
inc dword [rax + rax]
add byte [rdx + 0x41004056], al
adc byte [rsi + 0x60d4302], al
jg 0x404113
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x404119
add byte [rax], al
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add ah, bh
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 3
add byte [rax], al
cld
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rdx], cl
xlatb
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add eax, dword [rax]
add dh, dh
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
loop 0x404190
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 3
add byte [rax], al
fcomp st(0), st(6)
lcall [rsi]
add byte [rax], al
add al, 0x19
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
adc al, 0xd7
call qword [rax]
add byte [rax], al
add al, 0x25
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rax + rax], al
add byte [rdi + rdx*8], bh
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x404247
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, 0
add byte [rax - 0x29], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rsi - 0x29], cl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 4
add byte [rax], al
pop rax
xlatb
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 5
add byte [rax], al
xlatb
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 5
add byte [rax], al
xor bh, dl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0
add byte [rdi + rdx*8], ch
lcall [rsi]
add byte [rax], al
add al, 0x29
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add al, 0
add byte [rdx - 0x29], ah
jmp qword [rcx]
add byte [rax], al
add al, 0x35
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
add eax, 0xd79c0000
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 5
add byte [rax], al
xlatb
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, 0xd7b20000
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add eax, 0xd7bc0000
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 6
add byte [rax], al
test al, 0xd7
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 6
add byte [rax], al
xchg eax, esp
xlatb
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add eax, 0xd7900000
lcall [rsi]
add byte [rax], al
add al, 0x39
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add eax, 0xd7c60000
call qword [rax]
add byte [rax], al
add al, 0x45
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
out dx, al
xlatb
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x404467
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
adc bl, al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 6
add byte [rax], al
add al, bl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 7
add byte [rax], al
or bl, al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 7
add byte [rax], al
not bh
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
loop 0x4044c1
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, 6
add byte [rax], al
fcomp st(0), st(7)
lcall [rsi]
add byte [rax], al
add al, 0x49
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 7
add byte [rax], al
adc al, 0xd8
jmp qword [rcx]
add byte [rax], al
add al, 0x55
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 7
add byte [rax], al
fdivr st(7)
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
jbe 0x404552
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
fdivr st(7)
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 8
add byte [rax], al
outsb dx, byte [rsi]
fdivr st(7)
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 8
add byte [rax], al
cwde
fdivr st(7)
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
or byte [rax], al
add dl, dl
fdivr st(7)
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404617
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40461e
add byte [rax], al
out 0xd8, eax
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or byte [rax], al
add al, dh
fdivr st(7)
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 8
add byte [rax], al
neg al
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or byte [rax], al
add byte [rax], ah
fcos
jmp qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
or byte [rax], al
add byte [rcx + rbx*8 - 1], ah
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x4046b7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 9
add byte [rax], al
jns 0x404693
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 9
add byte [rax], al
mov bl, cl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or dword [rax], eax
add byte [rax + 0x49ffffd9], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x40471f
add byte [rax], al
mov edx, 0x59ffffd9
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
or dword [rax], eax
add ah, dh
fcos
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404757
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 9
add byte [rax], al
or edx, ebx
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword [rax], eax
add byte [rdx], dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or dword [rax], eax
add byte [rax], bl
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 0xa
add byte [rax], al
jmp qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 0xa
add byte [rax], al
xchg dl, bl
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x4047f7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or al, byte [rax]
add byte [rbx + 0x31ffffda], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x404820
add byte [rax], al
lodsb al, byte [rsi]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or al, byte [rax]
add byte [rdx + 0x26ffffda], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xa
add byte [rax], al
mov eax, 0x33ffffda
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, byte [rax]
add bl, cl
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
hlt
or al, byte [rax]
add cl, bl
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xb
add byte [rax], al
loop 0x404894
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xb
add byte [rax], al
rcr dl, cl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or eax, dword [rax]
add al, bl
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x404921
add byte [rax], al
jmp 0x4048f4
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
xchg eax, esp
or eax, dword [rax]
add cl, bh
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xb
add byte [rax], al
or bl, bl
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x404977
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, dword [rax]
add byte [rdx], ah
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or eax, dword [rax]
add byte [rax], ch
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xc
add byte [rax], al
cmp ebx, ebx
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
xor al, 0xc
add byte [rax], al
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or al, 0
add byte [rdx - 0x25], dl
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x404a22
add byte [rax], al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or al, 0
add byte [rax - 0x25], cl
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xc
add byte [rax], al
pop rbx
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
or al, 0
add byte [rcx - 0x25], ch
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or al, 0
add byte [rdx - 0x25], bh
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x404ab7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xd
add byte [rax], al
xchg eax, edx
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xd
add byte [rax], al
sbb ebx, 0x2affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or eax, 0xdb8c0000
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x404b23
add byte [rax], al
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
or eax, 0xdbc40000
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xd
add byte [rax], al
mov bl, 0xdb
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, 0xdbbe0000
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
je 0x404ba3
add byte [rax], al
rcr ebx, -1
dec dword [rsi + 0x4000000]
pop rsp
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
test byte [rdi + rax], cl
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xe
add byte [rax], al
fdiv st(7), st(0)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xe
add byte [rax], al
adc eax, 0x1bffffdc
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
adc ah, bl
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404c2c
add byte [rax], al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
or bl, ah
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xd00000e
fdiv st(7), st(0)
call qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fmul qword [rsi]
add byte [rax], al
fdiv st(7), st(0)
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
xor esp, ebx
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xf
add byte [rax], al
cmp al, 0xdc
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0x3f00000e
fdiv st(7), st(0)
dec dword [rsi + 0x4000000]
je 0x404d41
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
test byte [rdi + rax], cl
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word fs:[rax]
movsd dword [rdi], dword ptr [rsi]
fdiv st(7), st(0)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], cl
add byte [rax], al
xchg eax, ebx
fdiv st(7), st(0)
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sldt word [rax]
mov ds, esp
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x404d67
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word [rax]
mov al, 0xdc
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x404d87
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xf
add byte [rax], al
enter -0x24, -1
add byte [r8], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x10
add byte [rax], al
fdiv st(7), st(0)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sldt word [rax]
loope 0x404da6
ljmp [rdi]
add byte [rax], al
add al, 0x8c
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
adc byte [rax], al
add byte [rax], ah
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x404e17
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x404e26
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x404e37
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
adc byte [rax], al
add byte [rdx - 0x23], bl
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 0x10
add byte [rax], al
test ebp, ebx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
push rsp
adc byte [rax], al
add byte [rbx - 0x23], dh
ljmp [rdi]
add byte [rax], al
add al, 0x98
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70c6102
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x11
add byte [rax], al
mov dl, 0xdd
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x11
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc dword [rax], r8d
add byte [rax + 0x47ffffdd], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc dword fs:[rax], eax
add al, cl
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
add al, 0x11
add byte [rax], al
mov esp, 0x13ffffdd
add dword [rax], eax
add byte [rsp], al
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 0x11
add byte [rax], al
movabs al, byte [0x14ffffde]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc dword [rax], eax
add byte [rsi + rbx*8 + 0x1affff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
adc dword [rax], eax
add byte [rsi + 0x4bffffde], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 0x12
add byte [rax], al
mov edx, 0x14ffffde
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
mov ah, 0x11
add byte [rax], al
scasb al, byte [rdi]
fdivp st(7)
call qword [rbx]
add dword [rax], eax
add byte [rsp + rdi*4], al
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, byte fs:[rax]
add byte [rcx + 0xeffffdf], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], dl
add byte [rax], al
sbb bh, 0xff
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
adc al, byte [rax]
add byte [rsi + 0x4cffffdf], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, byte [rax]
add byte [rdx + 0xeffffdf], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x12
add byte [rax], al
movabs al, byte [0x53ffffdf]
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x13
add byte [rax], al
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 0x13
add byte [rax], al
or al, ah
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc r8d, dword [rax]
add byte [rcx], bl
loopne 0x4050ea
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc eax, dword fs:[rax]
add byte [rax], cl
loopne 0x40510a
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], dl
add byte [rax], al
loopne 0x40512a
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
adc eax, dword [rax]
add byte [rdx], bh
loopne 0x40514a
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc eax, dword [rax]
add byte [rax], ch
loopne 0x40516a
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 0x13
add byte [rax], al
pop rsp
loopne 0x40518a
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x14
add byte [rax], al
nop
loopne 0x4051aa
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x14
add byte [rax], al
movabs eax, dword [0x29ffffe0]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0
add byte [rdx + 0x1dffffe0], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0
add byte [rdi + 0x31ffffe0], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], dl
add byte [rax + 0x29ffffe0], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
adc al, 0
add dl, al
loopne 0x40524a
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0
add byte [rdi + 0x31ffffe0], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x14
add byte [rax], al
shl al, 1
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x15
add byte [rax], al
fucom st(0)
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
and al, 0
add byte [rax], al
and al, 0x15
add byte [rax], al
loopne 0x4052ca
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc rax, -0x1ef20000
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40532b
add byte [rax], al
xor ah, cl
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
adc eax, 0xe12c0000
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x5c000015
loope 0x405362
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fcom qword [rip - 0x1eaa0000]
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x16
add byte [rax], al
xchg cl, ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x16
add byte [rax], al
je 0x4053ab
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
loope 0x4053ea
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
jg 0x4053eb
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rsi], dl
add byte [rax], al
insd dword [rdi], dx
loope 0x40542a
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
loope 0x40544a
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
js 0x40544b
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0x16
add byte [rax], al
jne 0x40546b
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0x17
add byte [rax], al
mov edx, 0x1dffffe1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0x17
add byte [rax], al
mov bh, 0xe1
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
cld
loope 0x4054ea
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
loope 0x40550a
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rdi + rdx - 0x1e280000], al
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x405562
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
int3
add byte [rax], al
add dl, ah
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
xor eax, dword [r8 + rax]
sahf
add dword [rip - 0x29ffee2a], eax
add dword [rip - 0x38ffee10], eax
add al, byte [rip - 0x79ffec78]
add eax, dword [rip - 0x58ffed6b]
add eax, dword [rip - 0x39ffed7c]
add al, 5
hlt
adc al, byte [rax]
test eax, 0x12c30509
add bh, al
or dword [rip - 0x42ffed4e], eax
movzx eax, byte [rcx]
jrcxz 0x4055d4
add bl, ch
adc ecx, ecx
add dword [rax], eax
add bh, bh
inc dword [rcx]
or al, 0x27
add eax, 0x53a0000
add byte [r14 + 5], dl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x27
add eax, 0x53a0000
add byte [r14 + 5], dl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x2b
add eax, 0x5420000
add byte [r14 + 5], bl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add byte [rax], al
inc dword [rbx]
adc eax, 0x53d0d01
push rsp
add dword [rdx + 0xa], ebp
je 0x405669
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rbx]
adc eax, 0x53d0d01
push rsp
add dword [rdx + 0xa], ebp
je 0x405681
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
inc dword [rcx]
or byte [rbx + 5], al
add byte [rsi + 5], bl
add byte [rax], al
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add al, ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rdi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 0x4004], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x405ed3
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4006], bh
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4006], ah
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add al, bh
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi + 0x60], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 8], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 8], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 8], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 8], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4008], al
add byte [rax], al
add byte [rsi + 0x4008], dl
add byte [rax], al
add byte [rsi + 0x4008], ah
add byte [rax], al
add byte [rsi + 0x4008], dh
add byte [rax], al
add dh, al
or byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
out 8, al
add byte [rax], al
add byte [rax], al
add dh, dh
or byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x406110
je 0x406119
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x406127
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x406124
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 0x4004], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add al, bh
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
and byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x4006], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax + 0x4006], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax], cl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, 0
xor byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40092000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x4037], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + 0x4037], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x3d], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rbp + rdx*2 + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x605df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x6060], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax + 0x6060], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4009], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x6060], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x605df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax + 0x4037], cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rdx], dl
add byte [rax + 0x4055], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
add byte [rax], al
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax + 0x4037], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dh
add byte [rax], al
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
clc
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], ch
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x25], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x20000010], bl
add byte [rdx], bl
add byte [rax + 0x6060], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x14], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x4065b3
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x16], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000001], al
add byte [rsi], cl
add byte [rsi + 0x16], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000001], cl
add byte [rsi], cl
add byte [rdx + 0x4032], dl
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add dh, cl
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x16], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4014], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rdx], al
add byte [rax], al
and al, byte [rax]
add bl, dh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 2], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x401f], bl
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add ah, bl
add al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x37], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx + rax], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x2a], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4023], ch
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000003], al
add byte [rsi], cl
add al, ah
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 3
add byte [rax], al
and al, byte [rax]
add ah, ch
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0x30000e0012000010]
or dword [rax], eax
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x40674d
add byte [rax], al
and al, byte [rax]
add bl, ch
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x401d], ah
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax + rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x33], bl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add bh, bh
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ch
adc eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 5
add byte [rax], al
and al, byte [rax]
add byte [rbx + rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 5], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x402a], bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000005], dl
add byte [rsi], cl
add byte [rax], dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000005], bh
add byte [rsi], cl
add byte [rbp + 0x28], ch
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4035], dl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax], dh
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rbx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4025], dh
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4031], dl
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rdi], eax
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x2e], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x22000007
add byte [rsi], cl
add byte [rcx + 0x26], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000007], dl
add byte [rsi], cl
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x2240691c
add byte [rsi], cl
add ah, ah
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4018], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1f], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x35], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000008], dl
add byte [rsi], cl
add byte [rcx + 0x402a], ch
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4018], cl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4029], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx], cl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add dh, ah
add al, byte [rax]
add byte [rdx], dl
add byte [rdi], cl
add byte [rdi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 9], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x406a0b
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x17], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000009], dl
add byte [rsi], cl
add byte [rdi], bl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rcx], 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x401c], cl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x22], bl
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdi + 0xa], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x23], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4022], dl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x25], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000b], al
add byte [rsi], cl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000b], bl
add byte [rsi], cl
add byte [rdx], cl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, 0
add byte [rax], al
add ch, bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x26], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000c], al
add byte [rsi], cl
add byte [rsi + 0x4019], dh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dl
add byte es:[rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xc], ah
add byte [rax], al
and al, byte [rax]
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xc], bh
add byte [rax], al
and al, byte [rax]
add ch, ch
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax + rax], 0
and al, byte [rax]
add byte [rax + 0x4019], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000c], dh
add byte [rsi], cl
add byte [rdx + 0x401c], dh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rdx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rip + 0x220000], cl
add byte [rcx], dh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rip + 0x220000], cl
add ah, ch
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000d], ah
add byte [rsi], cl
add byte [rax + 0x402f], ch
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000d], bh
add byte [rsi], cl
add byte [rax + 0x402c], cl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0xe
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4024], bl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx], dh
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
and al, byte [rax]
add dl, cl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000e], dl
add byte [rsi], cl
add byte [rsi + 0x16], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x28], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x23], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
sldt word [rax]
and al, byte [rax]
add byte [rax + 0x4021], dh
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
sldt word [rax]
adc dword [rax], eax
adc byte [rax], al
xor byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word fs:[rax]
and al, byte [rax]
add byte [rdx + 0x20], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx + 0x220000], cl
add byte [rsp + rsi + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
sldt word [rax]
and al, byte [rax]
add byte [rdx], cl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rax], edx
add byte [rax], al
and al, byte [rax]
add byte [rdi + rdx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [r8], r8b
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x1a], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], 0x200000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
adc byte [rax], al
add byte [rax], dl
add byte [rdx], bl
add byte [rax + 0x6060], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000010], ch
add byte [rsi], cl
add byte [rdx + 0x2b], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bh
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rcx], edx
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x11], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x14], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x406e7b
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4018], dh
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rdx], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4015], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdx], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4018], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12], ah
add byte [rax], al
and al, byte [rax]
add dh, ah
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000012], al
add byte [rsi], cl
add dl, al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000012], bh
add byte [rsi], cl
add dl, dl
and byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, ah
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dl, byte [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4023], ch
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x13], al
add byte [rax], al
and al, byte [rax]
add ah, ch
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x406f85
add byte [rax], al
and al, byte [rax]
add ch, bl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000013], bh
add byte [rsi], cl
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4020], cl
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rax + rax], edx
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4031], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x14], dl
add byte [rax], al
and al, byte [rax]
add al, ah
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax + rax], edx
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x402b], dl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4024], bl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
adc eax, 0x220000
add byte [rdx + 0x4018], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x15], cl
add byte [rax], al
and al, byte [rax]
add byte [rdi + rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x15], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
adc eax, 0x2110000
sbb al, byte [rax]
cwde
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000015], ch
add byte [rsi], cl
add byte [rdi], bl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
mov es, word [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add edx, dword [rsi]
add byte [rax], al
and al, byte [rax]
add dl, bh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
movsxd rax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4023], bl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x16], dh
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x27], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add al, dl
add byte [rax], al
and al, byte [rax]
add byte [rdx + rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdx], dl
add byte [rax], al
and al, byte [rax]
add ah, bh
sbb eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add dh, dl
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
and al, byte [rax]
add dh, bh
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add bl, dh
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add ah, bh
add byte es:[rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
sbb byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x18], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
add byte cs:[rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x401c], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx], cl
add byte [rax], al
and al, byte [rax]
add ah, ah
add byte ss:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x19], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x401c], dh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x19], bh
add byte [rax], al
and al, byte [rax]
add byte [rcx], ah
and eax, 0x40
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4015], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add al, dl
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rbx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x402e], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4033], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdi + 0x2200001a], al
add byte [rsi], cl
add byte [rax], ch
adc eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x21], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x40], cl
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rbx], ebx
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x32], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1b], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4021], cl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1b], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200001b], dl
add byte [rsi], cl
add byte [rsi + 0x16], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1200001b], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200001b], dh
add byte [rsi], cl
add al, dl
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x40], bh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4014], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1c], bh
add byte [rax], al
and al, byte [rax]
add ah, al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200001c], ah
add byte [rsi], cl
add byte [rsi], ch
xor eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, dh
add byte ss:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200001d], bh
add byte [rsi], cl
add byte [rbp + rdx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ebx, dword [rip + 0x220000], 0xe
add byte [rax], dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200001d], dl
add byte [rsi], cl
add byte [rdx], bl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
sbb eax, 0x220000
add byte [rdx + 0x4033], dh
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200001e], dl
add byte [rsi], cl
add byte [rax + rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4018], dh
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4025], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000001e], dl
add byte [rbx], bl
add byte [rax + 0x6060], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbx + 0x220000], bl
add byte [rsi + 0x4018], cl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
and al, byte [rax]
add dl, ch
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x2c], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub bl, byte [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1b], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1f], cl
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4026], ah
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200001f], bh
add byte [rsi], cl
add byte [rdi], ah
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x22000020
add byte [rsi], cl
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add al, dl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40760a
add byte [rax], al
and al, byte [rax]
add byte [rcx], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x220000], bl
add byte [rax + 0x4020], cl
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
and al, byte [rax]
add cl, dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and qword [rax], rax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4032], ch
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000021], ah
add byte [rsi], cl
add byte [rbx + rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, dl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x36], bh
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x34], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
and al, byte [rax]
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000023], dh
add byte [rsi], cl
add byte [rdx + 0x2c], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x401b], cl
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rbx], ah
add byte [rax], al
and al, byte [rax]
add dh, ch
sbb eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
and eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb ah, byte [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x36], ah
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbx + 0x24], dh
add byte [rax], al
and al, byte [rax]
add al, ah
xor eax, 0x40
add byte [rax], al
sbb eax, 0
add byte [rax], al
add ah, cl
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rdx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
cli
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x402a], ch
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x220000
add al, bh
sub eax, 0x40
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
and eax, 0x220000
add byte [rdx + 0x1a], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea esp, [rip + 0x220000]
add byte [rbx + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x10000001], dl
add byte [rbx], bl
add byte [rax + 0x6060], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
and eax, 0x220000
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rcx], al
add byte es:[rax], al
and al, byte [rax]
add byte [rax + 0x4021], dh
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
and al, byte [rax]
add byte [rdx + 0x4018], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x26], dh
add byte [rax], al
and al, byte [rax]
add byte [rcx], dh
and byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0x26
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x24], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
and al, byte [rax]
add al, bh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add bl, ch
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x27], dh
add byte [rax], al
and al, byte [rax]
add cl, ah
and eax, 0x40
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 0x27
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x16], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x402e], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add cl, dh
add byte [rax], al
and al, byte [rax]
add bh, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000028], bl
add byte [rsi], cl
add al, bh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rax + 0x22000028], ah
add byte [rsi], cl
add ah, bh
add byte es:[rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x1f], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0x29
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rcx], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1c], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x29], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ecx
sub dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add ch, dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000029], dh
add byte [rsi], cl
add byte [rsp + rsi + 0x40], bh
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x26], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2a], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + rsi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2a], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x17], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200002a], cl
add byte [rsi], cl
add byte [rbp + rbx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x2200002a
add byte [rsi], cl
add byte [rdx + rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
int1
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x25], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4035], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2b], bh
add byte [rax], al
and al, byte [rax]
add ah, ah
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1200002b], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp + 0x220000], dh
add ah, dl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200002c], bl
add byte [rsi], cl
add byte [rdx], ch
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x1e], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add al, ah
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add bh, bh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bl
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ch
xor byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add ch, bh
xor eax, 0x40
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2d], dl
add byte [rax], al
and al, byte [rax]
add ah, bh
sub byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
sub eax, 0x220000
add byte [rdi + rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200002d], dh
add byte [rsi], cl
add byte [rbx + 0x4029], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
sub eax, 0x100000
sbb al, byte [rax]
cwde
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
sub eax, 0x220000
add byte [rcx + 0x402f], bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp], al
add byte [rax], al
and al, byte [rax]
add bh, bh
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200002e], cl
add byte [rax], al
add al, dh
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
and al, byte [rax]
add dl, dh
adc eax, 0x40
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
add byte cs:[rax], al
and al, byte [rax]
add byte [rdi + 0x4035], ch
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2e], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte cs:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x2e
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld xword [rsi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x40], cl
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte cs:[rax], al
and al, byte [rax]
add byte [rax + 0x401b], cl
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x2200002f
add byte [rsi], cl
add byte [rcx + rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x2200002f
add byte [rsi], cl
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdi + rbp], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rbx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200002f], dl
add byte [rsi], cl
add dh, ah
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1b], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
add byte [rax], al
adc al, byte [rax]
add byte [rsi], ah
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x18], al
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
or byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x401c], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rsi], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4032], dl
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbx + 0x30], ah
add byte [rax], al
and al, byte [rax]
add ah, ah
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000030], al
add byte [rsi], cl
add al, al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x407e72
jne 0x407e66
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x407e26
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x407ea4
jb 0x407eaa
pop rdi
jne 0x407eb3
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x407ead
je 0x407ea9
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x407ec9
jb 0x407ecf
pop rdi
jne 0x407ed8
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x407edb
jns 0x407ecb
outsb dx, byte gs:[rsi]
je 0x407ee2
jns 0x407e72
jb 0x407ed6
insd dword [rdi], dx
pop rdi
jne 0x407ee8
insd dword [rdi], dx
jns 0x407e7e
pop rdi
pop rdi
jb 0x407ee4
insd dword [rdi], dx
pop rdi
jne 0x407ef6
insd dword [rdi], dx
jns 0x407eeb
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x407ef6
jns 0x407ef6
outsb dx, byte gs:[rsi]
je 0x407f0d
jns 0x407e9d
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x407ef4
xor dword [rcx], edi
jo 0x407f15
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x407f2d
jb 0x407f30
movsxd rsi, dword [rax + rax + 0x5f]
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x407f6d
jns 0x407f6d
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x407f7e
jns 0x407f7e
jae 0x407f95
jb 0x407f98
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
push r11
je 0x407f6d
jbe 0x407f9e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x407f8b
jbe 0x407fbc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407ff0
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408009
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x407fe4
jbe 0x408015
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40800f
jbe 0x408040
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408023
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408064
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x408057
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408090
je 0x4080a5
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40808a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4080cb
push r11
je 0x4080a0
jbe 0x4080d1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x4080f0
pop rdi
jae 0x408102
outsd dx, dword [rsi]
jb 0x4080f2
insd dword [edi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4080ff
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x408111
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x408126
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x408113
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40814d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408156
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40814a
push rbx
je 0x40813a
jbe 0x40816b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408185
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40818e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408182
push rbx
je 0x408172
jbe 0x4081a3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40815a
pop rdi
pop rdx
push rbx
push r11
je 0x408199
jbe 0x4081ca
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4081e4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4081ed
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4081e1
push rbx
je 0x4081d1
jbe 0x408202
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408218
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408221
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408215
push rbx
je 0x408205
jbe 0x408236
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408219
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x408263
jb 0x408266
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40822d
jbe 0x40825e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rdx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40825f
push rsp
pop rdi
jo 0x408263
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408254
jbe 0x408285
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor r14b, byte [r9]
pop rdi
pop r15
jne 0x4082a3
je 0x408298
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x5f006d45
pop rdx
push rbx
je 0x408282
jbe 0x4082b3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4082b9
xor byte [rdi + 0x5f], bl
jne 0x4082fa
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x408315
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x408316
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40832a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408319
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408332
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x40830d
jbe 0x40833e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r8
insb byte [rdi], dx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x408336
jbe 0x408367
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40834b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40838c
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x408342
pop rdi
pop rdx
push rbx
je 0x40837e
outsw dx, word [rsi]
jb 0x4083c2
jb 0x4083b2
push r10
push r11
je 0x40838a
jbe 0x4083bb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r12
pop rdi
push rdx
push rbx
je 0x40839c
jb 0x4083d3
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4083d7
pop rdi
jb 0x4083da
jb 0x4083de
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x4083f5
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4083f1
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4083fa
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4083ee
xor al, byte fs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4083e8
pop rdi
pop rdi
jne 0x408429
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x408439
je 0x40842e
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x40844c
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x408455
je 0x40844a
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408431
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408475
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40848e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408469
jbe 0x40849a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x408479
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4084de
jo 0x4084cc
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4084a3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4084e4
push r11
je 0x4084b9
jbe 0x4084ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4084d5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40850e
je 0x408523
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4084f2
jbe 0x408523
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x50]
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push r11
je 0x408520
jbe 0x408551
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x408501
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40856b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408574
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408568
push rbx
je 0x408558
jbe 0x408589
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r13 + 0x61], r13b
js 0x408595
jae 0x4085a1
jp 0x40859f
jbe 0x40853d
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4085ba
jb 0x4085bd
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x4085af
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x4085d0
jae 0x408560
pop rdi
pop rdx
push rbx
je 0x408597
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4085d0
je 0x4085e5
imul esi, dword [rbx + rsi*2 + 0x49], 0x6c496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x4085c5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4085fe
je 0x408613
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4085e2
jbe 0x408613
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x408613
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x40861d
jbe 0x40864e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r12d, dword fs:[r13 + 0x6e]
jbe 0x4085fc
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408665
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40866e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408662
insb byte [rdi], dx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408657
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408698
push r11
je 0x40866d
jbe 0x40869e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40869a
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x4086d0
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4086da
pop rdi
xor byte [rbp + 0x50], al
insb byte [rdi], dx
push rax
insb byte [rdi], dx
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4086c5
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40870f
jb 0x408712
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x4086d9
jbe 0x40870a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push rdx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40870b
push rsp
pop rdi
jo 0x40870f
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40872d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408736
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40872a
insb byte [rdi], dx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40871e
xor dword [rdi + 0x5f], ebx
jb 0x40875a
jae 0x40876a
outsd dx, dword [rsi]
push r11
je 0x408733
jbe 0x408764
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push rsp
pop rdi
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40877d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408796
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408771
jbe 0x4087a2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x4087c0
je 0x4087c5
jb 0x4087ce
ja 0x4087a1
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
push r11
je 0x4087ac
jbe 0x4087dd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4087c1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4087fa
je 0x40880f
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rax + 0x75], dh
je 0x40881f
push 0x40407261
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x40880a
pop rdi
jae 0x40884b
jb 0x408848
jns 0x408824
push rax
jbe 0x408835
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x408824
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x408839
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40889e
jo 0x40888c
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x408863
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4088a4
push r11
je 0x408879
jbe 0x4088aa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x4088ef
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4088c5
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x408916
je 0x40890b
outsb dx, byte [rsi]
push r8
insb byte [rdi], dx
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4088ff
xor al, 0x5f
pop rdi
jne 0x408940
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x408921
jbe 0x408952
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40894e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408987
je 0x40899c
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40896b
jbe 0x40899c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x50]
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40899b
jbe 0x4089cc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4089b9
jbe 0x4089ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4089ff
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408a18
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4089f3
jbe 0x408a24
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408a3e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408a47
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408a3b
insb byte [rdi], dx
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408a3a
pop rdi
jae 0x408a7b
jb 0x408a78
jns 0x408a54
push rax
insb byte [rdi], dx
insb byte [rdi], dx
jbe 0x408a65
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x408a55
xor bl, byte [rdi + 0x44]
jae 0x408a9e
jb 0x408a9b
jns 0x408a8d
jne 0x408aa9
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x408ab2
jb 0x408aaf
jns 0x408a8b
push rax
push rbx
je 0x408a7c
jbe 0x408aad
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x408aac
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x408a95
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b52456c
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x408ae5
push rax
jbe 0x408a7b
pop rdi
pop rdx
push rbx
je 0x408ab2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408af3
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r9], r15d
pop rdi
pop r15
je 0x408afe
push rsp
jo 0x408b01
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408af1
jbe 0x408aae
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408b17
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408b20
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408b14
push rbx
je 0x408b04
jbe 0x408b35
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408b1e
jbe 0x408b4f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x408b47
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x408b65
jbe 0x408b96
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408bb9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408bc2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408bb6
insb byte [rdi], dx
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insb byte [rdi], dx
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x408bbc
jbe 0x408bed
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push r11
je 0x408bd6
jbe 0x408c07
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x408bec
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
insb byte [rdi], dx
insd dword [rdi], dx
insb byte [rdi], dx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408c33
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x408c1c
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x408c41
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x408c62
insb byte [rdi], dx
jne 0x408c69
push r12
pop rdi
pop rdi
pop rdi
je 0x408c86
jo 0x408c74
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x408c9a
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x408c7f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408cc0
push r11
je 0x408c95
jbe 0x408cc6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x408c88
pop rdi
pop rdx
push rbx
je 0x408cc4
jbe 0x408cf5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408d0f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408d18
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408d0c
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x408d0d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408d46
je 0x408d5b
imul esi, dword [rbx + rsi*2 + 0x49], 0x6c496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
insb byte [rdi], dx
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x408d40
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408d81
push r11
je 0x408d56
jbe 0x408d87
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop r15
jae 0x408dc7
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x408d99
pop rdi
jae 0x408dda
jb 0x408dd7
jns 0x408db3
push rax
push rbx
je 0x408da4
jbe 0x408dd5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
jbe 0x408dd3
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x408dba
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x408df0
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x408dfa
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x408e04
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408e1d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x408df8
jbe 0x408e29
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r8
insb byte [rdi], dx
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
jae 0x408e47
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x408e31
jbe 0x408e62
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x408e55
jbe 0x408e86
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x408e7e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408ebf
push r11
je 0x408e94
jbe 0x408ec5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x408ee5
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x408efa
pop rdi
jae 0x408f10
jb 0x408f13
add byte [rdi + 0x5a], bl
push rbx
je 0x408edb
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408ef6
xor bl, byte [rdi + 0x5f]
jne 0x408f37
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x408f52
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408f43
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408f5c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408f37
jbe 0x408f68
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408f92
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408f9b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408f8f
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x408f57
pop rdi
pop rdx
push rbx
je 0x408f93
jbe 0x408fc4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408fb1
jbe 0x408fe2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r14b, byte fs:[r9]
pop rdi
pop r15
jne 0x409000
je 0x408ff5
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x5f006d45
pop rdx
push rbx
je 0x408fda
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40901b
push r11
je 0x408ff0
jbe 0x409021
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x408fe3
pop rdi
pop rdx
push rbx
je 0x40901a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40905b
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409044
jbe 0x409075
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409063
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4090a4
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40905a
pop rdi
pop rdx
push rbx
je 0x409091
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4090d2
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4090e3
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4090ec
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4090e0
push rbx
je 0x4090d0
jbe 0x409101
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4090e9
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40912a
push rbx
xor dword fs:[r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40913d
pop rdi
jae 0x40914f
outsd dx, dword [rsi]
jb 0x40913f
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40911a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40915b
push r11
je 0x409130
jbe 0x409161
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
push r11
je 0x409159
jbe 0x40918a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4091a4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4091ad
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4091a1
push rbx
je 0x409191
jbe 0x4091c2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4091ab
outsw dx, word [rsi]
jb 0x4091ef
jb 0x4091df
push r10
push r11
je 0x4091b7
jbe 0x4091e8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r12
pop rdi
push rdx
push rbx
je 0x4091c9
jb 0x409200
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409204
pop rdi
jb 0x409207
jb 0x40920b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor eax, 0x7434455f
jns 0x409222
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4091ec
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40922d
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40921e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40925f
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x409251
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409292
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x40929d
push rsp
jo 0x4092a0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409290
jbe 0x40924d
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4092b6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4092bf
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4092b3
push rbx
je 0x4092a3
jbe 0x4092d4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4092ea
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4092f3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4092e7
push rbx
je 0x4092d7
jbe 0x409308
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4092bf
pop rdi
pop rdx
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x52], eax
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409348
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409351
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409345
push rbx
je 0x409335
jbe 0x409366
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40938a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409393
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409387
insb byte [rdi], dx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x409384
jbe 0x4093b5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x409399
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4093da
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4093d8
xor bl, byte [rdi + 0x5f]
jne 0x409419
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor byte [rbp + 0x45], al
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40940f
jbe 0x409440
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor al, 0x5f
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409432
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409473
push r11
je 0x409448
jbe 0x409479
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x409498
pop rdi
jae 0x4094aa
outsd dx, dword [rsi]
jb 0x40949a
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x409475
xor bl, byte [rdi + 0x44]
jae 0x4094be
jb 0x4094bb
jns 0x4094ad
jne 0x4094c9
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x4094d2
jb 0x4094cf
jns 0x4094ab
push rax
insb byte [rdi], dx
jbe 0x4094bc
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4094a5
xor bl, byte [rdi + 0x5f]
jne 0x4094e6
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
xor byte [rbp + 0x45], al
xor dword [rip + 0x6e755f5f], esi
imul ebp, dword [rsi + 0x69], 0x69665f74
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x4094dc
jbe 0x40950d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
insd dword [rdi], dx
push rbx
xor al, 0x5f
push r12
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4094ff
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409540
push r11
je 0x409515
jbe 0x409546
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdi
jae 0x409573
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x409549
pop rdi
jae 0x40958a
jb 0x409587
jns 0x409563
push rax
push rbx
je 0x409554
jbe 0x409585
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x409586
pop rdi
push rbx
xor al, 0x5f
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x409575
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4095ab
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4095b5
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x4095bf
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4095d8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4095b3
jbe 0x4095e4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4095d6
movsxd rbp, dword [rdi + 0x70]
jns 0x4095f0
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40960e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409627
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409602
jbe 0x409633
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
insb byte [rdi], dx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409661
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40966a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40965e
push rbx
je 0x40964e
jbe 0x40967f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x52]
push r11
xor al, 0x5f
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push r11
je 0x40967d
jbe 0x4096ae
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x409693
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
insd dword [rdi], dx
cmp qword fs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4096da
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x4096c3
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x4096e8
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x409709
insb byte [rdi], dx
jne 0x409710
push r12
pop rdi
pop rdi
pop rdi
je 0x40972d
jo 0x40971b
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40972c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409735
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409729
push rbx
je 0x409719
jbe 0x40974a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40976e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409787
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x409762
jbe 0x409793
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, 0x62
jae 0x4097a5
jbe 0x409743
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4097ac
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4097b5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4097a9
push rbx
je 0x409799
jbe 0x4097ca
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4097ae
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x4097ff
je 0x4097f4
outsb dx, byte [rsi]
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4097e0
jbe 0x409811
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409831
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40983a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40982e
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409828
jbe 0x409859
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409841
xor byte [rdi + 0x5f], bl
jne 0x409882
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40989d
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40989e
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x4098b2
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4098a1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4098ba
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409895
jbe 0x4098c6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x4098be
jbe 0x4098ef
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4098d3
pop rdi
pop rdi
jne 0x409914
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x409924
je 0x409919
outsb dx, byte [rsi]
pop rdi
push r8
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x409913
jbe 0x409944
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409928
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409969
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x409948
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409981
je 0x409996
imul esi, dword [rbx + rsi*2 + 0x49], 0x6c496153
xor r14d, dword [r15]
jae 0x409998
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x4099a1
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x4099c2
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x4099c3
jb 0x4099c6
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40999a
pop rdi
jae 0x4099db
jb 0x4099d8
jns 0x4099b4
push rax
jbe 0x4099c4
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4099b2
pop rdi
jae 0x4099f3
jb 0x4099f0
jns 0x4099cc
push rax
insb byte [rdi], dx
jbe 0x4099dc
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rbp + 0x65], ch
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409a06
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x409a19
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409a22
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409a16
push rbx
je 0x409a06
jbe 0x409a37
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
cmp byte [r13 + 0x61], r13b
js 0x409a43
jae 0x409a4f
jp 0x409a4d
jbe 0x4099eb
pop rdi
pop rdx
push rbx
je 0x409a21
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409a65
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409a7e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x409a59
jbe 0x409a8a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push rbx
je 0x409a69
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409ace
jo 0x409abc
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409a98
jbe 0x409ac9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x409ab2
pop rdi
jae 0x409af3
jb 0x409af0
jns 0x409acc
push rax
push rbx
je 0x409abd
jbe 0x409aee
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x409aec
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x409ad4
xor byte [rdi + 0x49], bl
je 0x409b0d
jb 0x409b09
jae 0x409b13
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409b16
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409b2f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x409b0a
jbe 0x409b3b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x409b56
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x409b60
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409b79
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409b54
jbe 0x409b85
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x62
jae 0x409b97
jbe 0x409b35
pop rdi
pop rdx
push rbx
je 0x409b71
jbe 0x409ba2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409bcc
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409bd5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409bc9
xor dword fs:[r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x409bc3
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409c04
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r9], r15d
pop rdi
pop r15
je 0x409c0f
push rsp
jo 0x409c12
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409c02
jbe 0x409bbf
pop rdi
pop rdx
push rbx
je 0x409bf8
movsxd rbp, dword [rdi + 0x70]
jns 0x409c12
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409c30
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409c49
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x409c24
jbe 0x409c55
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r8
insb byte [rdi], dx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409c49
jbe 0x409c7a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
imul r15d, dword fs:[r8 + 0x45], 0x5a5f006d
push rbx
je 0x409c5d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409c9e
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409c82
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409cc3
push r11
je 0x409c98
jbe 0x409cc9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5f], bl
jae 0x409d00
pop rdi
jae 0x409d04
jb 0x409d07
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409cfd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409d06
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409cfa
insb byte [rdi], dx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x52]
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409cfe
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
insb byte [rdi], dx
push rbx
je 0x409d13
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409d78
jo 0x409d66
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
jae 0x409d7e
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409d8b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409d94
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409d88
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x409d81
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
insb byte [rdi], dx
insd dword [rdi], dx
insb byte [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409d9d
pop rdi
pop rdi
jne 0x409dde
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x409dee
je 0x409de3
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x409e01
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x409e0a
je 0x409dff
outsb dx, byte [rsi]
push r8
insb byte [rdi], dx
insd dword [rdi], dx
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409de6
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409e41
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409e30
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409e49
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409e24
jbe 0x409e55
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r8
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409e49
jbe 0x409e7a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x409e68
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409ea9
push r11
je 0x409e7e
jbe 0x409eaf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x409ea5
xor byte [rdi + 0x49], bl
je 0x409ede
jb 0x409eda
jae 0x409ee4
push r8
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x409ef4
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409ecb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409f0c
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409f2f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x409f41
imul esi, dword [rbx + rsi*2 + 0x49], 0x6c496153
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x409f56
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x409f43
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409f3b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409f74
je 0x409f89
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x409f58
jbe 0x409f89
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x409f78
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x409fd3
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409fc2
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409fdb
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x409fb6
jbe 0x409fe7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r8
insb byte [rdi], dx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409fd6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a017
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x409fcd
pop rdi
pop rdx
push rbx
je 0x40a005
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524564
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40a01a
xor bl, byte [rdi + 0x5f]
jne 0x40a05b
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40a076
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a067
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a080
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x40a05b
jbe 0x40a08c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r8
insb byte [rdi], dx
insb byte [rdi], dx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40a084
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x40a0ba
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40a0c4
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x40a09d
jb 0x40a0cf
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40a0ec
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a0e6
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40a0ee
insd dword [rdi], dx
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40a0d9
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a11d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a136
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x40a111
jbe 0x40a142
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push rbx
je 0x40a121
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a186
jo 0x40a174
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a150
jbe 0x40a181
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a197
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a1a0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a194
insb byte [rdi], dx
cmp byte [r13 + 0x61], r13b
js 0x40a1b1
jae 0x40a1bd
jp 0x40a1bb
jbe 0x40a159
pop rdi
pop rdx
push rbx
je 0x40a190
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a1d1
push rbx
xor al, byte fs:[r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a1b5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a1f6
push r11
je 0x40a1cb
jbe 0x40a1fc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x40a213
push rsp
jo 0x40a216
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a206
jbe 0x40a1c3
pop rdi
pop rdx
push rbx
je 0x40a1ff
jbe 0x40a230
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a21e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a25f
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40a249
xor byte [rdi + 0x49], bl
je 0x40a282
jb 0x40a27e
jae 0x40a288
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a28b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a2a4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a27f
jbe 0x40a2b0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x40a2cb
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a2a2
xor byte [rdi + 0x49], bl
je 0x40a2db
jb 0x40a2d7
jae 0x40a2e1
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a2e4
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a2fd
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x40a2d8
jbe 0x40a309
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x40a324
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a300
jbe 0x40a331
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor dword [rdi + 0x52], ebx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40a328
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40a372
jb 0x40a375
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40a33c
jbe 0x40a36d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r10
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40a36e
push rsp
pop rdi
jo 0x40a372
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a391
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a39a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a38e
cmp byte fs:[r13 + 0x61], r13b
js 0x40a3ab
jae 0x40a3b7
jp 0x40a3b5
jbe 0x40a353
pop rdi
pop rdx
push rbx
je 0x40a38a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a3cb
push r11
je 0x40a3a0
jbe 0x40a3d1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a3bc
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a3fd
push r11
je 0x40a3d2
jbe 0x40a403
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r9], r15d
pop rdi
pop r15
je 0x40a41a
push rsp
jo 0x40a41d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a40d
jbe 0x40a3ca
pop rdi
pop rdx
push rbx
je 0x40a401
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a442
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insb byte [rdi], dx
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40a430
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a471
push r11
je 0x40a446
jbe 0x40a477
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40a474
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a4b5
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40a46b
pop rdi
pop rdx
push rbx
je 0x40a4a2
xor al, 0x5f
pop rdi
jne 0x40a4e3
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x40a4c4
jbe 0x40a4f5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor bl, byte [rdi + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a4f1
xor bl, byte [rdi + 0x44]
jae 0x40a53a
jb 0x40a537
jns 0x40a529
jne 0x40a545
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x40a54e
jb 0x40a54b
jns 0x40a527
push rax
push rbx
je 0x40a518
jbe 0x40a549
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
jbe 0x40a548
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a530
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a571
push r11
je 0x40a546
jbe 0x40a577
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40a539
pop rdi
pop rdx
push rbx
je 0x40a56f
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40a5b9
jb 0x40a5bc
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40a583
jbe 0x40a5b4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r10
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40a5b5
push rsp
pop rdi
jo 0x40a5b9
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a5a5
xor byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x69665f64
insb byte [rdi], dx
insb byte [rdi], dx
pop rdi
outsb dx, byte [rsi]
push r8
push rbx
je 0x40a5c3
jbe 0x40a5f4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
insd dword [rdi], dx
push rbx
xor bl, byte [rdi + 0x45]
push rsp
pop rdi
push rbx
xor al, 0x5f
push rsp
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a5ea
jbe 0x40a61b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a608
jbe 0x40a639
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40a61f
xor dword [rdi + 0x5f], ebx
jb 0x40a65b
jae 0x40a66b
outsd dx, dword [rsi]
push r11
je 0x40a634
jbe 0x40a665
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r8
push rsp
pop rdi
push rdx
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40a64c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a68d
push r11
je 0x40a662
jbe 0x40a693
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40a655
pop rdi
pop rdx
push rbx
je 0x40a68c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a6cd
push r11
je 0x40a6a2
jbe 0x40a6d3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a701
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a70a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a6fe
push rbx
je 0x40a6ee
jbe 0x40a71f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40a707
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a748
push r11
je 0x40a71d
jbe 0x40a74e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40a767
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a7a8
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x40a7b3
push rsp
jo 0x40a7b6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a7a6
jbe 0x40a763
pop rdi
pop rdx
push rbx
je 0x40a799
pop rdi
pop rdi
je 0x40a7d5
jb 0x40a7de
ja 0x40a7d0
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40a7c6
pop rdi
jae 0x40a807
jb 0x40a804
jns 0x40a7e0
push rbx
je 0x40a7d0
jbe 0x40a801
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
jbe 0x40a7fb
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a7e4
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a828
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a841
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a81c
jbe 0x40a84d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push rbx
je 0x40a82c
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a891
jo 0x40a87f
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a888
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40a891
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40a885
insb byte [rdi], dx
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40a884
jbe 0x40a8b5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor r12d, dword [r13 + 0x6e]
jbe 0x40a863
pop rdi
pop rdx
push rbx
push r11
je 0x40a8a2
jbe 0x40a8d3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a8b7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a8f8
push r11
je 0x40a8cd
jbe 0x40a8fe
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a8e9
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a92a
push r11
je 0x40a8ff
jbe 0x40a930
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40a920
xor bl, byte [rdi + 0x44]
jae 0x40a969
jb 0x40a966
jns 0x40a958
jne 0x40a974
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x40a97d
jb 0x40a97a
jns 0x40a956
push rax
jbe 0x40a967
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x40a94f
xor byte [rdi + 0x49], bl
je 0x40a988
jb 0x40a984
jae 0x40a98e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a991
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a9aa
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a985
jbe 0x40a9b6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40a9d1
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a9ad
jbe 0x40a9de
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40a9e8
jbe 0x40aa19
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor dword [rdi + 0x45], ebx
xor dword [r8], r15d
pop rdi
pop r15
imul bp, word [rsp + rbp*2 + 0x5f], 0x6e69
imul esi, dword [rcx + rbp*2 + 0x61], 0x657a696c
insd dword [rdi], dx
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40aa50
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40aa59
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40aa4d
insb byte [rdi], dx
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40aa15
pop rdi
pop rdx
push rbx
insb byte [rdi], dx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40aa59
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40aa9a
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x40aaad
pop rdi
jae 0x40aabf
outsd dx, dword [rsi]
jb 0x40aaaf
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40aa8a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40aac3
je 0x40aad8
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor r14d, dword [r15]
jae 0x40aada
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x40aae3
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x40ab04
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40ab05
jb 0x40ab08
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40aad6
pop rdi
pop rdi
jne 0x40ab17
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40ab27
je 0x40ab1c
outsb dx, byte [rsi]
pop rdi
push r8
insb byte [rdi], dx
insd dword [rdi], dx
insb byte [rdi], dx
push r12
pop rdi
push rbx
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push r11
je 0x40ab14
jbe 0x40ab45
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x40aaf5
pop rdi
pop rdx
push rbx
je 0x40ab2c
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x40ab62
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40ab6c
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x40ab45
jb 0x40ab77
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40ab94
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40ab8e
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40ab96
insd dword [rdi], dx
insb byte [rdi], dx
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40abb4
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40abbd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40abb1
push rbx
je 0x40aba1
jbe 0x40abd2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor ebx, dword [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40abcc
jbe 0x40abfd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40abe7
pop rdi
jae 0x40ac28
jb 0x40ac25
jns 0x40ac01
push rbx
je 0x40abf1
jbe 0x40ac22
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
jbe 0x40ac1c
push rsp
pop rdi
add byte [rdi + 0x65], bl
je 0x40ac36
add byte [rdi + 0x5a], bl
push rbx
je 0x40ac0d
xor byte [rdi + 0x49], bl
je 0x40ac46
jb 0x40ac42
jae 0x40ac4c
push r8
insb byte [rdi], dx
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40ac5c
push r11
xor byte [rdi], bl
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x40ac56
pop rdi
add byte [rdi + 0x5f], bl
js 0x40ac82
pop rdi
jo 0x40ac72
jb 0x40ac82
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40ac62
jbe 0x40ac93
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x40ac80
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40acb6
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40acc0
pop rdi
xor byte [rbp + 0x50], al
push rax
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x40ace7
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40acf6
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40ad09
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40acdd
pop rdi
jae 0x40ad1e
jb 0x40ad1b
jns 0x40acf7
push rax
push rbx
je 0x40ace8
jbe 0x40ad19
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40ad1a
pop rdi
push rbx
xor al, 0x5f
push rdx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40ad12
jbe 0x40ad43
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40ad27
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ad68
push rbx
xor dword fs:[r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40ad4c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ad8d
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40ad6c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40adad
push rbx
xor dword fs:[r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40adcd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40add6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40adca
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40adbf
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40ae00
push r11
je 0x40add5
jbe 0x40ae06
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
push r11
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ae28
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ae31
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ae25
xor r8b, byte fs:[rbp + 0x76]
add byte [rbp + 0x61], ch
imul ebp, dword [rsi], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x40ae51
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ae5a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ae4e
push rbx
je 0x40ae3e
jbe 0x40ae6f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ae85
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ae9e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
insb byte [rdi], dx
push rbx
je 0x40ae79
jbe 0x40aeaa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40ae97
jbe 0x40aec8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
insb byte [rdi], dx
push rbx
insb byte [rdi], dx
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40aeaf
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40aef0
push rbx
xor dword fs:[r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rax], al
jae 0x40af20
insd dword [rdi], dx
je 0x40af0b
add byte [rsi], ch
jae 0x40af23
jb 0x40af25
add byte [rsi], ch
jae 0x40af1f
jae 0x40af2d
jb 0x40af2f
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40af30
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40af3e
outsb dx, byte cs:[esi]
jne 0x40af0c
jne 0x40af4a
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40af1a
push 0x687361
jns 0x40af63
jae 0x40af70
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40af6b
jae 0x40af73
jb 0x40af01
outsb dx, byte cs:[esi]
jne 0x40af34
jbe 0x40af6d
jb 0x40af7d
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40af41
jbe 0x40af7a
jb 0x40af8a
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40af85
insb byte [rdi], dx
jns 0x40af94
add byte [rsi], ch
jb 0x40af8f
insb byte [rdi], dx
jo 0x40af9b
je 0x40af31
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40af6a
outsd dx, dword [esi]
je 0x40af40
je 0x40afa8
js 0x40afb9
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40afbe
je 0x40afb4
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40afd7
jo 0x40afeb
pop rdi
je 0x40afdb
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40afe9
jns 0x40af8a
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40b005
jns 0x40af96
push 0x63
jb 0x40af9b
jns 0x40b00d
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40b017
je 0x40afad
je 0x40b013
add byte [rsi], ch
jae 0x40b02a
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40afc1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add al, cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax + rax*2], al
add byte [rax], al
add byte [rax], al
add byte [rax + 4], cl
add byte [rax], al
add byte [rax + 1], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add eax, 0x40
add byte [rax], al
clc
add eax, 0
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xa000000000004006]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4006], bh
add byte [rax], al
add byte [rax + 6], bh
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
and byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
xor byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdi + rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4037], al
add byte [rax], al
add byte [rax + 0x37], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4037], bh
add byte [rax], al
add byte [rax + 0x37], bh
add byte [rax], al
add byte [rbp + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3d], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3d], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x18
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rdx*2 + 0x40], al
add byte [rax], al
test byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
pop rbp
add byte [rax], al
add byte [rax], al
add al, dh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], cl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x6060], bl
add byte [rax], al
add byte [rax + 0x60], bl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], bl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x1e000000000000ae], eax
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rip], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
jge 0x40b7a3
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x30], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
