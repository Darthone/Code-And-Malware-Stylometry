xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6060e7
push rbp
sub rax, obj.completed.7585
cmp rax, 0xe
mov rbp, rsp
jbe 0x400e80
mov eax, 0
test rax, rax
je 0x400e80
pop rbp
mov edi, obj.completed.7585
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.completed.7585
push rbp
sub rsi, obj.completed.7585
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400ec8
mov eax, 0
test rax, rax
je 0x400ec8
pop rbp
mov edi, obj.completed.7585
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x205209], 0
jne 0x400eea
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x2051f6], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400f00
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400efb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0xb8
mov qword [rbp - 0xb8], rdi
mov qword [rbp - 0xc0], rsi
mov qword [rbp - 0xc8], rdx
mov qword [rbp - 0xd0], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::allocator_char_::allocator
mov rdx, qword [rbp - 0xc0]
mov rax, qword [rbp - 0xc8]
add rdx, rax
mov rax, qword [rbp - 0xd0]
add rax, rdx
mov rsi, rax
lea rdx, [rbp - 0x80]
mov rax, qword [rbp - 0xb8]
mov rcx, rdx
mov edx, 0x20
mov rdi, rax
call 0x400d40
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov byte [rbp - 0xb0], 0x52
lea rdx, [rbp - 0xb0]
lea rcx, [rbp - 0xc0]
lea rax, [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_long_char_::pair_long__char_void_
mov byte [rbp - 0xaf], 0x59
lea rdx, [rbp - 0xaf]
lea rax, [rbp - 0xc8]
lea rcx, [rbp - 0x60]
add rcx, 0x10
mov rsi, rax
mov rdi, rcx
call sym.std::pair_long_char_::pair_long__char_void_
mov byte [rbp - 0xae], 0x42
lea rdx, [rbp - 0xae]
lea rax, [rbp - 0xd0]
lea rcx, [rbp - 0x60]
add rcx, 0x20
mov rsi, rax
mov rdi, rcx
call sym.std::pair_long_char_::pair_long__char_void_
lea rax, [rbp - 0x60]
mov r12, rax
mov r13d, 3
lea rax, [rbp - 0xad]
mov rdi, rax
call sym.std::allocator_std::pair_long_char__::allocator
lea rdx, [rbp - 0xad]
mov rsi, r12
mov rdi, r13
mov rcx, r12
mov rbx, r13
mov rdi, rbx
lea rax, [rbp - 0x80]
mov rcx, rdx
mov rdx, rdi
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::vector
lea rax, [rbp - 0xad]
mov rdi, rax
call sym.std::allocator_std::pair_long_char__::_allocator
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::end
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::begin
mov rsi, rbx
mov rdi, rax
call sym.std::sort___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
mov dword [rbp - 0xac], 0
mov qword [rbp - 0xa8], 0
lea rax, [rbp - 0x80]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::operator__
mov rax, qword [rax]
cmp rax, qword [rbp - 0xa8]
setg al
test al, al
je 0x40110c
mov eax, dword [rbp - 0xac]
movsxd rdx, eax
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x400df0
mov rbx, rax
lea rax, [rbp - 0x80]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::operator__
movzx eax, byte [rax + 8]
mov byte [rbx], al
add dword [rbp - 0xac], 2
add qword [rbp - 0xa8], 1
jmp 0x4010a4
sub dword [rbp - 0xac], 1
mov qword [rbp - 0xa0], 0
lea rax, [rbp - 0x80]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::operator__
mov rax, qword [rax]
cmp rax, qword [rbp - 0xa0]
setg al
test al, al
je 0x4011f7
mov eax, dword [rbp - 0xac]
movsxd rbx, eax
mov rax, qword [rbp - 0xb8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
setb al
test al, al
je 0x4011a4
mov eax, dword [rbp - 0xac]
movsxd rdx, eax
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x400df0
mov rbx, rax
lea rax, [rbp - 0x80]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::operator__
movzx eax, byte [rax + 8]
mov byte [rbx], al
add dword [rbp - 0xac], 2
jmp 0x4011ea
mov dword [rbp - 0xac], 1
mov eax, dword [rbp - 0xac]
movsxd rdx, eax
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x400df0
mov rbx, rax
lea rax, [rbp - 0x80]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::operator__
movzx eax, byte [rax + 8]
mov byte [rbx], al
add dword [rbp - 0xac], 2
add qword [rbp - 0xa0], 1
jmp 0x40111e
mov qword [rbp - 0x98], 0
mov qword [rbp - 0x90], 0
mov rax, qword [rbp - 0xb8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rdx, rax
mov rax, qword [rbp - 0x90]
cmp rdx, rax
seta al
test al, al
je 0x40129d
mov rdx, qword [rbp - 0x90]
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x20
sete al
test al, al
je 0x401290
mov rdx, qword [rbp - 0x90]
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x400df0
mov rbx, rax
lea rax, [rbp - 0x80]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::operator__
movzx eax, byte [rax + 8]
mov byte [rbx], al
add qword [rbp - 0x98], 1
add qword [rbp - 0x90], 1
jmp 0x40120d
lea rax, [rbp - 0x80]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::operator__
mov rax, qword [rax]
cmp rax, qword [rbp - 0x98]
je 0x4012d3
mov ecx, str.std::__cxx11::string_place_i64__i64__i64_
mov edx, 0x26
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.t____v_0_.first
call sym.imp.__assert_fail
mov qword [rbp - 0x88], 0
mov rax, qword [rbp - 0xb8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rdx, rax
mov rax, qword [rbp - 0x88]
cmp rdx, rax
seta al
test al, al
je 0x4013c4
mov rdx, qword [rbp - 0x88]
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx ebx, byte [rax]
mov rax, qword [rbp - 0x88]
add rax, 1
mov r12, rax
mov rax, qword [rbp - 0xb8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rcx, rax
mov rax, r12
mov edx, 0
div rcx
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp bl, al
jne 0x40137e
mov ecx, str.std::__cxx11::string_place_i64__i64__i64_
mov edx, 0x28
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans_i_____ans__i_1__ans.size___
call sym.imp.__assert_fail
mov rdx, qword [rbp - 0x88]
mov rax, qword [rbp - 0xb8]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x20
jne 0x4013b7
mov ecx, str.std::__cxx11::string_place_i64__i64__i64_
mov edx, 0x29
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans_i________
call sym.imp.__assert_fail
add qword [rbp - 0x88], 1
jmp 0x4012de
nop
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::_vector
nop
mov rax, qword [rbp - 0xb8]
mov rcx, qword [rbp - 0x28]
xor rcx, qword fs:[0x28]
je 0x401446
jmp 0x401441
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xad]
mov rdi, rax
call sym.std::allocator_std::pair_long_char__::_allocator
jmp 0x401427
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::_vector
mov rax, qword [rbp - 0xb8]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0xb8
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x88
mov qword [rbp - 0x78], rdi
mov qword [rbp - 0x80], rsi
mov eax, ecx
mov qword [rbp - 0x90], r8
mov byte [rbp - 0x84], dl
mov byte [rbp - 0x88], al
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
cmp qword [rbp - 0x90], 0
jne 0x4014ae
mov rdx, qword [rbp - 0x80]
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call 0x400d10
jmp 0x401617
mov qword [rbp - 0x70], 0
mov rax, qword [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rdx, rax
mov rax, qword [rbp - 0x70]
cmp rdx, rax
seta al
test al, al
je 0x4015d3
mov rdx, qword [rbp - 0x70]
mov rax, qword [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, byte [rbp - 0x84]
sete al
test al, al
je 0x4015c9
mov rax, qword [rbp - 0x70]
add rax, 1
mov rdx, rax
lea rax, [rbp - 0x60]
mov rsi, qword [rbp - 0x80]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov qword [rbp - 0x68], 0
mov rax, qword [rbp - 0x68]
cmp rax, qword [rbp - 0x90]
jge 0x401567
movsx edx, byte [rbp - 0x88]
lea rax, [rbp - 0x60]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movsx edx, byte [rbp - 0x84]
lea rax, [rbp - 0x60]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add qword [rbp - 0x68], 1
jmp 0x401529
mov rax, qword [rbp - 0x70]
add rax, 1
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, qword [rbp - 0x80]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call 0x400cf0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rdx, [rbp - 0x60]
mov rax, qword [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call 0x400d10
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401617
add qword [rbp - 0x70], 1
jmp 0x4014b6
mov ecx, str.std::__cxx11::string_replace_std::__cxx11::string__char__char__i64_
mov edx, 0x3c
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.false
call sym.imp.__assert_fail
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401600
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x78]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x40162f
call sym.imp.__stack_chk_fail
add rsp, 0x88
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x88
mov qword [rbp - 0x68], rdi
mov qword [rbp - 0x70], rsi
mov qword [rbp - 0x78], rdx
mov qword [rbp - 0x80], rcx
mov qword [rbp - 0x88], r8
mov qword [rbp - 0x90], r9
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rcx, rax
mov rdx, qword [rbp - 0x70]
mov rax, qword [rbp - 0x78]
add rdx, rax
mov rax, qword [rbp - 0x80]
add rdx, rax
mov rax, qword [rbp - 0x88]
add rdx, rax
mov rax, qword [rbp - 0x90]
add rdx, rax
mov rax, qword [rbp + 0x10]
add rax, rdx
cmp rcx, rax
je 0x4016bd
mov ecx, str.void_check_std::__cxx11::string__i64__i64__i64__i64__i64__i64_
mov edx, 0x40
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans.size______R___O___Y___G___B___V
call sym.imp.__assert_fail
mov qword [rbp - 0x58], 0
mov qword [rbp - 0x50], 0
mov qword [rbp - 0x48], 0
mov qword [rbp - 0x40], 0
mov qword [rbp - 0x38], 0
mov qword [rbp - 0x30], 0
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rdx, rax
mov rax, qword [rbp - 0x28]
cmp rdx, rax
seta al
test al, al
je 0x401a25
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rdx, rax
mov rax, qword [rbp - 0x28]
add rax, rdx
lea rbx, [rax - 1]
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, rdx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rdx, rax
mov rax, qword [rbp - 0x28]
add rax, rdx
lea rbx, [rax + 1]
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rcx, rax
mov rax, rbx
mov edx, 0
div rcx
mov rax, rdx
mov qword [rbp - 0x18], rax
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x47
sete al
test al, al
je 0x40181a
add qword [rbp - 0x40], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x52
je 0x4017e3
mov ecx, str.void_check_std::__cxx11::string__i64__i64__i64__i64__i64__i64_
mov edx, 0x47
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans_p______R_
call sym.imp.__assert_fail
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x52
je 0x4019af
mov ecx, str.void_check_std::__cxx11::string__i64__i64__i64__i64__i64__i64_
mov edx, 0x48
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans_n______R_
call sym.imp.__assert_fail
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x56
sete al
test al, al
je 0x4018a8
add qword [rbp - 0x30], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x59
je 0x401871
mov ecx, str.void_check_std::__cxx11::string__i64__i64__i64__i64__i64__i64_
mov edx, 0x4b
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans_p______Y_
call sym.imp.__assert_fail
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x59
je 0x4019af
mov ecx, str.void_check_std::__cxx11::string__i64__i64__i64__i64__i64__i64_
mov edx, 0x4c
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans_n______Y_
call sym.imp.__assert_fail
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x4f
sete al
test al, al
je 0x401936
add qword [rbp - 0x50], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x42
je 0x4018ff
mov ecx, str.void_check_std::__cxx11::string__i64__i64__i64__i64__i64__i64_
mov edx, 0x4f
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans_p______B_
call sym.imp.__assert_fail
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x42
je 0x4019af
mov ecx, str.void_check_std::__cxx11::string__i64__i64__i64__i64__i64__i64_
mov edx, 0x50
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans_n______B_
call sym.imp.__assert_fail
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx ebx, byte [rax]
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp bl, al
je 0x401996
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx ebx, byte [rax]
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp bl, al
jne 0x4019af
mov ecx, str.void_check_std::__cxx11::string__i64__i64__i64__i64__i64__i64_
mov edx, 0x52
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.ans_p_____ans_i_____ans_n_____ans_i_
call sym.imp.__assert_fail
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x52
sete al
test al, al
je 0x4019d3
add qword [rbp - 0x58], 1
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x59
sete al
test al, al
je 0x4019f7
add qword [rbp - 0x48], 1
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400df0
movzx eax, byte [rax]
cmp al, 0x42
sete al
test al, al
je 0x401a1b
add qword [rbp - 0x38], 1
add qword [rbp - 0x28], 1
jmp 0x4016f5
mov rax, qword [rbp - 0x70]
cmp rax, qword [rbp - 0x58]
jne 0x401a67
mov rax, qword [rbp - 0x78]
cmp rax, qword [rbp - 0x50]
jne 0x401a67
mov rax, qword [rbp - 0x80]
cmp rax, qword [rbp - 0x48]
jne 0x401a67
mov rax, qword [rbp - 0x88]
cmp rax, qword [rbp - 0x40]
jne 0x401a67
mov rax, qword [rbp - 0x90]
cmp rax, qword [rbp - 0x38]
jne 0x401a67
mov rax, qword [rbp + 0x10]
cmp rax, qword [rbp - 0x30]
je 0x401a80
mov ecx, str.void_check_std::__cxx11::string__i64__i64__i64__i64__i64__i64_
mov edx, 0x5b
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.R____r____O____o____Y____y____G____g____B____b____V____v
call sym.imp.__assert_fail
nop
add rsp, 0x88
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r15
push r14
push r13
push r12
push rbx
sub rsp, 0x1a8
mov rax, qword fs:[0x28]
mov qword [rbp - 0x38], rax
xor eax, eax
lea rax, [rbp - 0x1b0]
mov rsi, rax
mov edi, str._lld
mov eax, 0
call sym.imp.scanf
mov qword [rbp - 0x158], 1
mov rax, qword [rbp - 0x1b0]
cmp qword [rbp - 0x158], rax
jg 0x4020f3
lea r8, [rbp - 0x188]
lea rdi, [rbp - 0x190]
lea rcx, [rbp - 0x198]
lea rdx, [rbp - 0x1a0]
lea rax, [rbp - 0x1a8]
lea rsi, [rbp - 0x178]
push rsi
lea rsi, [rbp - 0x180]
push rsi
mov r9, r8
mov r8, rdi
mov rsi, rax
mov edi, str._lld__lld__lld__lld__lld__lld__lld
mov eax, 0
call sym.imp.scanf
add rsp, 0x10
mov rdx, qword [rbp - 0x1a0]
mov rax, qword [rbp - 0x188]
sub rdx, rax
mov rax, rdx
mov qword [rbp - 0x170], rax
mov rdx, qword [rbp - 0x190]
mov rax, qword [rbp - 0x178]
sub rdx, rax
mov rax, rdx
mov qword [rbp - 0x168], rax
mov rdx, qword [rbp - 0x180]
mov rax, qword [rbp - 0x198]
sub rdx, rax
mov rax, rdx
mov qword [rbp - 0x160], rax
mov rax, qword [rbp - 0x170]
test rax, rax
js 0x401bff
mov rax, qword [rbp - 0x168]
test rax, rax
js 0x401bff
mov rax, qword [rbp - 0x160]
test rax, rax
js 0x401bff
lea rdx, [rbp - 0x160]
lea rax, [rbp - 0x168]
mov rsi, rdx
mov rdi, rax
call sym.std::max_long_
mov rdx, rax
lea rax, [rbp - 0x170]
mov rsi, rdx
mov rdi, rax
call sym.std::max_long_
mov rax, qword [rax]
lea rcx, [rax + rax]
mov rdx, qword [rbp - 0x170]
mov rax, qword [rbp - 0x168]
add rdx, rax
mov rax, qword [rbp - 0x160]
add rax, rdx
cmp rcx, rax
jle 0x401c06
mov eax, 1
jmp 0x401c0b
mov eax, 0
test al, al
je 0x401c2d
mov rax, qword [rbp - 0x158]
mov rsi, rax
mov edi, str.Case___lld:_IMPOSSIBLE_n
mov eax, 0
call sym.imp.printf
jmp 0x4020e6
mov rax, qword [rbp - 0x170]
test rax, rax
jne 0x401e8c
mov rax, qword [rbp - 0x168]
test rax, rax
jne 0x401e8c
mov rax, qword [rbp - 0x160]
test rax, rax
jne 0x401e8c
mov rax, qword [rbp - 0x188]
test rax, rax
jle 0x401c70
mov edx, 1
jmp 0x401c75
mov edx, 0
mov rax, qword [rbp - 0x178]
test rax, rax
jle 0x401c88
mov eax, 1
jmp 0x401c8d
mov eax, 0
add edx, eax
mov rax, qword [rbp - 0x198]
test rax, rax
jle 0x401ca2
mov eax, 1
jmp 0x401ca7
mov eax, 0
add eax, edx
cdqe
mov qword [rbp - 0x148], rax
cmp qword [rbp - 0x148], 0
jg 0x401cd5
mov ecx, str.int_main__
mov edx, 0x6f
mov esi, str.sorted_code_control_tomconerly_tomconerly_1_1_B.cpp
mov edi, str.greater___0
call sym.imp.__assert_fail
cmp qword [rbp - 0x148], 1
jle 0x401cfd
mov rax, qword [rbp - 0x158]
mov rsi, rax
mov edi, str.Case___lld:_IMPOSSIBLE_n
mov eax, 0
call sym.imp.printf
jmp 0x4020e6
lea rax, [rbp - 0x80]
mov rdi, rax
call 0x400d00
mov rax, qword [rbp - 0x188]
test rax, rax
jle 0x401d25
mov byte [rbp - 0x1b2], 0x52
mov byte [rbp - 0x1b1], 0x47
jmp 0x401d5b
mov rax, qword [rbp - 0x178]
test rax, rax
jle 0x401d41
mov byte [rbp - 0x1b2], 0x59
mov byte [rbp - 0x1b1], 0x56
jmp 0x401d5b
mov rax, qword [rbp - 0x198]
test rax, rax
jle 0x401d5b
mov byte [rbp - 0x1b2], 0x42
mov byte [rbp - 0x1b1], 0x4f
mov qword [rbp - 0x150], 0
lea rdx, [rbp - 0x198]
lea rax, [rbp - 0x178]
mov rsi, rdx
mov rdi, rax
call sym.std::max_long_
mov rdx, rax
lea rax, [rbp - 0x188]
mov rsi, rdx
mov rdi, rax
call sym.std::max_long_
mov rax, qword [rax]
cmp rax, qword [rbp - 0x150]
setg al
test al, al
je 0x401dd9
movsx edx, byte [rbp - 0x1b2]
lea rax, [rbp - 0x80]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movsx edx, byte [rbp - 0x1b1]
lea rax, [rbp - 0x80]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
add qword [rbp - 0x150], 1
jmp 0x401d66
mov r14, qword [rbp - 0x178]
mov rax, qword [rbp - 0x180]
mov qword [rbp - 0x1c8], rax
mov r15, qword [rbp - 0x188]
mov r13, qword [rbp - 0x190]
mov r12, qword [rbp - 0x198]
mov rbx, qword [rbp - 0x1a0]
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x60]
sub rsp, 8
push r14
mov r9, qword [rbp - 0x1c8]
mov r8, r15
mov rcx, r13
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.check
add rsp, 0x10
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rdx, rax
mov rax, qword [rbp - 0x158]
mov rsi, rax
mov edi, str.Case___lld:__s_n
mov eax, 0
call sym.imp.printf
nop
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4020e6
mov rax, qword [rbp - 0x170]
test rax, rax
jne 0x401ea4
mov rax, qword [rbp - 0x188]
test rax, rax
jg 0x401ed4
mov rax, qword [rbp - 0x168]
test rax, rax
jne 0x401ebc
mov rax, qword [rbp - 0x178]
test rax, rax
jg 0x401ed4
mov rax, qword [rbp - 0x160]
test rax, rax
jne 0x401ef2
mov rax, qword [rbp - 0x198]
test rax, rax
jle 0x401ef2
mov rax, qword [rbp - 0x158]
mov rsi, rax
mov edi, str.Case___lld:_IMPOSSIBLE_n
mov eax, 0
call sym.imp.printf
jmp 0x4020e6
mov rcx, qword [rbp - 0x160]
mov rdx, qword [rbp - 0x168]
mov rsi, qword [rbp - 0x170]
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.place_abi:cxx11_
mov rbx, qword [rbp - 0x188]
lea rdx, [rbp - 0x140]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x120]
lea rsi, [rbp - 0x100]
mov r8, rbx
mov ecx, 0x47
mov edx, 0x52
mov rdi, rax
call sym.replace
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rbx, qword [rbp - 0x178]
lea rdx, [rbp - 0x120]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xe0]
lea rsi, [rbp - 0xc0]
mov r8, rbx
mov ecx, 0x56
mov edx, 0x59
mov rdi, rax
call sym.replace
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rbx, qword [rbp - 0x198]
lea rdx, [rbp - 0xe0]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xa0]
lea rsi, [rbp - 0x80]
mov r8, rbx
mov ecx, 0x4f
mov edx, 0x42
mov rdi, rax
call sym.replace
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov r14, qword [rbp - 0x178]
mov rax, qword [rbp - 0x180]
mov qword [rbp - 0x1c8], rax
mov r15, qword [rbp - 0x188]
mov r13, qword [rbp - 0x190]
mov r12, qword [rbp - 0x198]
mov rbx, qword [rbp - 0x1a0]
lea rdx, [rbp - 0xa0]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x60]
sub rsp, 8
push r14
mov r9, qword [rbp - 0x1c8]
mov r8, r15
mov rcx, r13
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.check
add rsp, 0x10
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rdx, rax
mov rax, qword [rbp - 0x158]
mov rsi, rax
mov edi, str.Case___lld:__s_n
mov eax, 0
call sym.imp.printf
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
add qword [rbp - 0x158], 1
jmp 0x401ad2
mov eax, 0
mov rcx, qword [rbp - 0x38]
xor rcx, qword fs:[0x28]
je 0x4021e3
jmp 0x4021de
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402124
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4021c4
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4021b0
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40219c
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402188
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40219c
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4021b0
mov rbx, rax
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4021c4
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x28]
pop rbx
pop r12
pop r13
pop r14
pop r15
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov edx, 0x40
mov rax, qword [rbp - 8]
bsr rax, rax
xor rax, 0x3f
cdqe
sub rdx, rax
mov rax, rdx
sub rax, 1
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_long__
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_char_
movzx edx, byte [rax]
mov rax, qword [rbp - 8]
mov byte [rax + 8], dl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_long_char__::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_long_char__::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::initializer_list_std::pair_long_char__::begin
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::initializer_list_std::pair_long_char__::size
shl rax, 4
add rax, rbx
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, rsi
mov rsi, rdx
mov rdx, rsi
mov qword [rbp - 0x40], rax
mov qword [rbp - 0x38], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_long_char__std::allocator_std::pair_long_char___::_Vector_base
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::initializer_list_std::pair_long_char__::end
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::initializer_list_std::pair_long_char__::begin
mov rcx, rax
mov rax, qword [rbp - 0x28]
sub rsp, 8
push r12
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::pair_long_char__std::allocator_std::pair_long_char___::_M_range_initialize_std::pair_long_char_const__
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4023e1
jmp 0x4023dc
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Vector_base_std::pair_long_char__std::allocator_std::pair_long_char___::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_long_char__std::allocator_std::pair_long_char___::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_long_char___std::pair_long_char__
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_long_char__std::allocator_std::pair_long_char___::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402474
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4024c0
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
call sym.__gnu_cxx::__ops::__iter_less_iter
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402518
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 4
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jge 0x402563
mov rax, qword [rbp - 0x10]
jmp 0x402567
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_long_char__::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_long_char__std::allocator_std::pair_long_char___::_Vector_impl::_Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_long_char__std::allocator_std::pair_long_char___::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_long_char__std::allocator_std::pair_long_char___::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::distance_std::pair_long_char_const__
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_long_char__std::allocator_std::pair_long_char___::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x18]
mov rax, qword [rax]
mov rdx, qword [rbp - 8]
shl rdx, 4
add rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::pair_long_char__std::allocator_std::pair_long_char___::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax]
mov rsi, qword [rbp - 0x28]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__uninitialized_copy_a_std::pair_long_char_const__std::pair_long_char___std::pair_long_char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_long_char___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call 0x4028f8
test al, al
je 0x402781
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x402934
mov rdi, rax
call sym.std::__lg
lea rdx, [rax + rax]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push r12
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__final_insertion_sort___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::allocator_std::pair_long_char__.allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402808
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_long_char___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x28]
mov rdi, rax
call sym.std::__iterator_category_std::pair_long_char_const__
mov rax, qword [rbp - 0x28]
mov rdx, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__distance_std::pair_long_char_const__
add rsp, 0x10
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x402867
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40289a
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_long_char___::allocate
jmp 0x40289f
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::pair_long_char_const__std::pair_long_char___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_std::pair_long_char___
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 4
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x402934
cmp rax, 0x10
setg al
test al, al
je 0x402a3a
cmp qword [rbp - 0x48], 0
jne 0x4029e7
mov rdx, qword [rbp - 0x50]
mov rcx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x40]
sub rsp, 8
push r13
mov rsi, rcx
mov rdi, rax
call sym.std::__partial_sort___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x402a3a
sub qword [rbp - 0x48], 1
mov rdx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rdx
mov rdi, rax
call sym.std::__unguarded_partition_pivot___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov qword [rbp - 0x30], rax
mov rdx, qword [rbp - 0x48]
mov rcx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x30]
mov qword [rbp - 0x50], rax
jmp 0x40299f
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x402a4e
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x402934
cmp rax, 0x10
setg al
test al, al
je 0x402ae8
lea rax, [rbp - 0x30]
mov esi, 0x10
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov rdx, rax
mov rax, qword [rbp - 0x30]
sub rsp, 8
push r13
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x30]
mov esi, 0x10
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov rdx, rax
mov rax, qword [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rax
mov rdi, rdx
call sym.std::__unguarded_insertion_sort___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x402b04
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x402f9e
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_long_char__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
sub rdx, rax
mov rax, rdx
sar rax, 4
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_long_char__::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::pair_long_char_const__std::pair_long_char___
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x40], rdx
mov rdx, qword [rbp - 0x40]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push r8
mov rsi, rcx
mov rdi, rax
call sym.std::__heap_select___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort_heap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x402934
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x50]
mov esi, 1
mov rdi, rax
call 0x40318e
mov rbx, rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov rsi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x40]
sub rsp, 8
push r13
mov rcx, rbx
mov rdi, rax
call sym.std::__move_median_to_first___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov rcx, rax
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x50]
sub rsp, 8
push r12
mov rsi, rax
mov rdi, rcx
call sym.std::__unguarded_partition___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rbx, qword [rbp - 0x28]
xor rbx, qword fs:[0x28]
je 0x402d43
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 4
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402dae
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x58
mov qword [rbp - 0x60], rdi
mov qword [rbp - 0x70], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____
test al, al
jne 0x402eed
lea rax, [rbp - 0x60]
mov esi, 1
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x50], rax
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x4028f8
test al, al
je 0x402eee
mov rdx, qword [rbp - 0x60]
mov rax, qword [rbp - 0x50]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x402eb7
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x4034ac
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x40], rax
mov qword [rbp - 0x38], rdx
lea rax, [rbp - 0x50]
mov esi, 1
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov rdx, rax
mov rcx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x60]
mov rsi, rcx
mov rdi, rax
call sym.std::move_backward___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::pair_long_char_::operator_
jmp 0x402edc
sub rsp, 8
push r13
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
mov rax, qword [rbp - 0x50]
sub rsp, 8
push r12
mov rdi, rax
call sym.std::__unguarded_linear_insert___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator__
jmp 0x402e12
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x402f02
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call 0x4028f8
test al, al
je 0x402f80
sub rsp, 8
push r12
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rdi, rax
call sym.std::__unguarded_linear_insert___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator__
jmp 0x402f37
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402f95
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_long_char__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x403002
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 4
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x18]
cmp rax, qword [rbp - 0x20]
je 0x403064
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::pair_long_char__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov rdi, rdx
call sym.std::_Construct_std::pair_long_char__std::pair_long_char_const__
add qword [rbp - 0x18], 0x10
add qword [rbp - 8], 0x10
jmp 0x403030
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x50], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rcx
mov rsi, rdx
mov rdi, rax
call sym.std::__make_heap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____
test al, al
je 0x40310f
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x403101
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator__
jmp 0x4030b2
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403124
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x402934
cmp rax, 1
setg al
test al, al
je 0x403187
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x4038fc
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x40313b
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x30]
shl rdx, 4
neg rdx
add rax, rdx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4031f1
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
mov qword [rbp - 0x40], rcx
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x403298
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x403253
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
jmp 0x403305
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x403283
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
jmp 0x403305
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
jmp 0x403305
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x4032c5
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
jmp 0x403305
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x4032f2
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
jmp 0x403305
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x10]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x403342
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator__
jmp 0x40331c
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x4038fc
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x30]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x403374
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x4038fc
jmp 0x40334e
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____
xor eax, 1
test al, al
je 0x403394
mov rax, qword [rbp - 0x10]
jmp 0x4033b8
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator__
jmp 0x40331c
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::base
mov rax, qword [rax]
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jl 0x40345c
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
cmp rdx, rax
jl 0x403463
mov rax, qword [rbp - 8]
movzx edx, byte [rax + 8]
mov rax, qword [rbp - 0x10]
movzx eax, byte [rax + 8]
cmp dl, al
jge 0x403463
mov eax, 1
jmp 0x403468
mov eax, 0
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x4034ac
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::operator__long_char_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x40], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
mov rcx, rax
mov rax, qword [rbp - 0x40]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_backward_a2_true___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_long_
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x10]
add rax, 8
mov rdi, rax
call sym.std::forward_char_
movzx edx, byte [rax]
mov rax, qword [rbp - 8]
mov byte [rax + 8], dl
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x50], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x4034ac
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x30], rax
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x50]
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4038fc
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Val_less_iter::operator___std::pair_long_char____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x40360d
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4034ac
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::pair_long_char_::operator_
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4038fc
jmp 0x4035b1
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::pair_long_char_::operator_
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403648
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xfffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::pair_long_char_const__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x10
call 0x40222b
mov rcx, rax
test rcx, rcx
je 0x4036c7
mov rax, qword [rbx]
mov rdx, qword [rbx + 8]
mov qword [rcx], rax
mov qword [rcx + 8], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov qword [rbp - 0x60], rdi
mov qword [rbp - 0x70], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x70]
mov rsi, rdx
mov rdi, rax
call 0x402934
cmp rax, 1
setle al
test al, al
jne 0x4037bc
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x70]
mov rsi, rdx
mov rdi, rax
call 0x402934
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x40], rax
mov rdx, qword [rbp - 0x40]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x4034ac
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x30], rax
mov qword [rbp - 0x28], rdx
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rcx, qword [rax]
mov rdi, qword [rax + 8]
mov rdx, qword [rbp - 0x38]
mov rsi, qword [rbp - 0x40]
mov rax, qword [rbp - 0x60]
sub rsp, 8
push rbx
mov r8, rdi
mov rdi, rax
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____long_std::pair_long_char____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
cmp qword [rbp - 0x40], 0
je 0x4037bf
sub qword [rbp - 0x40], 1
jmp 0x403741
nop
jmp 0x4037c0
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4037d4
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::base
mov rax, qword [rax]
cmp rbx, rax
setb al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x60], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x60]
mov rdi, rax
call 0x4034ac
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rdx, qword [rax + 8]
mov rax, qword [rax]
mov qword [rbp - 0x30], rax
mov qword [rbp - 0x28], rdx
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4034ac
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::pair_long_char_::operator_
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rbx, rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x402934
mov rdi, rax
mov rdx, qword [rbx]
mov rsi, qword [rbx + 8]
mov rax, qword [rbp - 0x40]
sub rsp, 8
push r12
mov rcx, rdx
mov r8, rsi
mov rdx, rdi
mov esi, 0
mov rdi, rax
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____long_std::pair_long_char____gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4038f2
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax - 0x10]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x4034ac
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::swap_long_char_
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x60], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
mov r12, rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
mov rbx, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_backward_a_true_std::pair_long_char___std::pair_long_char___
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::__normal_iterator
mov rax, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x403a02
call sym.imp.__stack_chk_fail
add rsp, 0x50
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x20], rdx
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x4034ac
mov rdx, rax
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__long_char_
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x68
mov qword [rbp - 0x60], rdi
mov qword [rbp - 0x58], rsi
mov qword [rbp - 0x68], rdx
mov rax, rcx
mov rcx, r8
mov rdx, rcx
mov qword [rbp - 0x80], rax
mov qword [rbp - 0x78], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x58]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x58]
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x68]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x38]
jle 0x403b65
mov rax, qword [rbp - 0x38]
add rax, 1
add rax, rax
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
lea rdx, [rax - 1]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov rbx, rax
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov rdx, rbx
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_______gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____
test al, al
je 0x403afc
sub qword [rbp - 0x38], 1
mov rdx, qword [rbp - 0x38]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4034ac
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rbx, rax
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::pair_long_char_::operator_
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x58], rax
jmp 0x403a89
mov rax, qword [rbp - 0x68]
and eax, 1
test rax, rax
jne 0x403c0b
mov rax, qword [rbp - 0x68]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x38]
jne 0x403c0b
mov rax, qword [rbp - 0x38]
add rax, 1
add rax, rax
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x38]
lea rdx, [rax - 1]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4034ac
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rbx, rax
mov rdx, qword [rbp - 0x58]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::pair_long_char_::operator_
mov rax, qword [rbp - 0x38]
sub rax, 1
mov qword [rbp - 0x58], rax
sub rsp, 8
push r13
call sym.__gnu_cxx::__ops::__iter_comp_val
add rsp, 0x10
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rcx, qword [rax]
mov rdi, qword [rax + 8]
mov rdx, qword [rbp - 0x30]
mov rsi, qword [rbp - 0x58]
mov rax, qword [rbp - 0x60]
sub rsp, 8
push r12
mov r8, rdi
mov rdi, rax
call sym.std::__push_heap___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____long_std::pair_long_char____gnu_cxx::__ops::_Iter_less_val_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x403c63
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_long_char_::swap
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 0
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_backward_true_false_std::random_access_iterator_tag_::__copy_move_b_std::pair_long_char___std::pair_long_char___
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x48], rsi
mov qword [rbp - 0x58], rdx
mov rax, rcx
mov rcx, r8
mov rdx, rcx
mov qword [rbp - 0x70], rax
mov qword [rbp - 0x68], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x48]
cmp rax, qword [rbp - 0x58]
jle 0x403d79
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov rcx, rax
lea rax, [rbp - 0x70]
mov rdx, rax
mov rsi, rcx
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_val::operator_____gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char_____std::pair_long_char__
test al, al
je 0x403d79
mov eax, 1
jmp 0x403d7e
mov eax, 0
test al, al
je 0x403e08
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x4034ac
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::pair_long_char_::operator_
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x48], rax
mov rax, qword [rbp - 0x48]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
jmp 0x403d3b
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::operator_
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x4034ac
mov rsi, rbx
mov rdi, rax
call sym.std::pair_long_char_::operator_
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403e5a
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_long_
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::swap_char_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_long_char___std::vector_std::pair_long_char__std::allocator_std::pair_long_char____::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
jle 0x403f20
sub qword [rbp - 0x20], 0x10
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_long_char___
mov rdx, rax
sub qword [rbp - 0x28], 0x10
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_long_char_::operator_
sub qword [rbp - 8], 1
jmp 0x403eea
mov rax, qword [rbp - 0x28]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call 0x4034ac
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov rdi, rdx
call sym.std::operator__long_char_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_long__
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_long__
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_long__
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x403fdb
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_char__
movzx eax, byte [rax]
mov byte [rbp - 9], al
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x18]
mov byte [rax], dl
lea rax, [rbp - 9]
mov rdi, rax
call sym.std::move_char__
movzx edx, byte [rax]
mov rax, qword [rbp - 0x20]
mov byte [rax], dl
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40405b
call sym.imp.__stack_chk_fail
leave
ret
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201d7e]
push rbp
lea rbp, [rip + 0x201d7e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x4040b6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x4040a0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x404179
jb 0x404180
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x40418b
outsd dx, dword [rsi]
insb byte [rdi], dx
je 0x40418d
insd dword [rdi], dx
movsxd rbp, dword [rdi + 0x6e]
jb 0x404191
jns 0x404156
je 0x404198
insd dword [rdi], dx
movsxd rbp, dword [rdi + 0x6e]
jb 0x40419c
jns 0x404191
xor dword [rdi + 0x31], ebx
movsxd rsi, dword cs:[rax + 0x70]
add byte [rax + 0x3d], dh
je 0x40415e
cmp eax, 0x5b76203d
xor byte [rbp + 0x2e], bl
imul si, word [rdx + 0x73], 0x74
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
jae 0x4041af
imul ebx, dword [rbp + 0x20], 0x61203d21
outsb dx, byte [rsi]
jae 0x4041b9
sub byte [rcx + 0x2b], ch
xor dword [rcx], ebp
and eax, 0x2e736e61
jae 0x4041d3
jp 0x4041d1
sub byte [rcx], ch
pop rbp
add byte [rcx + 0x6e], ah
outsb dx, byte [rsi]
jae 0x4041cf
imul ebx, dword [rbp + 0x20], 0x27203d21
and byte [rdi], ah
add byte [rsi + 0x61], ah
insb byte [rdi], dx
jae 0x4041e8
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x6e], ah
outsb dx, byte [rsi]
jae str.ans_n______R_
jae 0x4041f7
jp 0x4041f5
sub byte [rcx], ch
and byte [rip + 0x2052203d], bh
sub esp, dword [rax]
and byte [r11], r13b
and byte [rcx + 0x20], bl
sub esp, dword [rax]
and byte [r11], r13b
and byte [rdx + 0x20], al
sub esp, dword [rax]
push rsi
add byte [rcx + 0x6e], ah
outsb dx, byte [rsi]
jae 0x40420b
jo 0x40420f
and byte [rip + 0x5227203d], bh
add byte [rcx + 0x6e], ah
outsb dx, byte [rsi]
jae 0x404219
outsb dx, byte [rsi]
pop rbp
and byte [rip + 0x5227203d], bh
add byte [rcx + 0x6e], ah
outsb dx, byte [rsi]
jae 0x404227
jo 0x40422b
and byte [rip + 0x5927203d], bh
add byte [rcx + 0x6e], ah
outsb dx, byte [rsi]
jae 0x404235
outsb dx, byte [rsi]
pop rbp
and byte [rip + 0x5927203d], bh
add byte [rcx + 0x6e], ah
outsb dx, byte [rsi]
jae 0x404243
jo 0x404247
and byte [rip + 0x4227203d], bh
add byte [rcx + 0x6e], ah
outsb dx, byte [rsi]
jae 0x404251
outsb dx, byte [rsi]
pop rbp
and byte [rip + 0x4227203d], bh
add byte [rcx + 0x6e], ah
outsb dx, byte [rsi]
jae 0x40425f
jo 0x404263
and byte [rcx], ah
cmp eax, 0x736e6120
pop rbx
imul ebx, dword [rbp + 0x20], 0x61202626
outsb dx, byte [rsi]
jae 0x404273
outsb dx, byte [rsi]
pop rbp
and byte [rcx], ah
cmp eax, 0x736e6120
pop rbx
imul ebx, dword [rbp], 0x52000000
push rdx
and byte [rip + 0x2072203d], bh
and byte es:[rdi + 0x20], cl
cmp eax, 0x206f203d
and byte es:[rcx + 0x20], bl
cmp eax, 0x2079203d
and byte es:[rdi + 0x20], al
cmp eax, 0x2067203d
and byte es:[rdx + 0x20], al
cmp eax, 0x2062203d
and byte es:[rsi + 0x20], dl
cmp eax, 0x76203d
and eax, 0x646c6c
add byte [rax], al
and eax, 0x20646c6c
and eax, 0x20646c6c
and eax, 0x20646c6c
and eax, 0x20646c6c
and eax, 0x20646c6c
and eax, 0x20646c6c
and eax, 0x646c6c
jae 0x4042f4
and byte [rbx], ah
and eax, 0x3a646c6c
and byte [rcx + 0x4d], cl
push rax
push r11
push rbx
or r8b, byte [r8]
jb 0x40430b
je 0x40430e
jb 0x4042cb
and byte ds:[rax], dh
add byte [rbx + 0x61], al
jae 0x404318
and byte [rbx], ah
and eax, 0x3a646c6c
and byte [rip + 0xa73], ah
jae 0x404336
cmp bh, byte fs:[rdx]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
cmp bh, byte [rdx]
jae 0x404344
jb 0x40433b
outsb dx, byte [rsi]
and byte [eax + 0x6c], dh
movsxd rsp, dword [rbp + 0x28]
imul esi, dword [rsi], 0x69202c34
xor al, 0x2c
and byte [rcx + 0x36], ch
xor al, 0x29
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dh
jae 0x404376
cmp bh, byte fs:[rdx]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
cmp bh, byte [rdx]
jae 0x404384
jb 0x40437b
outsb dx, byte [rsi]
and byte [edx + 0x65], dh
jo 0x404385
movsxd rsp, dword [rbp + 0x28]
jae 0x404393
cmp bh, byte fs:[rdx]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
cmp bh, byte [rdx]
jae 0x4043a1
jb 0x404398
outsb dx, byte [rsi]
sub al, 0x20
movsxd rbp, dword [rax + 0x61]
jb 0x404364
and byte [rbx + 0x68], ah
jb 0x40436a
and byte [rcx + 0x36], ch
xor al, 0x29
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x6f], dh
jbe 0x4043d1
imul esp, dword [rax + 0x63], 0x6b636568
sub byte [rbx + 0x74], dh
cmp bh, byte fs:[rdx]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
cmp bh, byte [rdx]
jae 0x4043ef
jb 0x4043e6
outsb dx, byte [rsi]
sub al, 0x20
imul esi, dword [rsi], 0x69202c34
xor al, 0x2c
and byte [rcx + 0x36], ch
xor al, 0x2c
and byte [rcx + 0x36], ch
xor al, 0x2c
and byte [rcx + 0x36], ch
xor al, 0x2c
and byte [rcx + 0x36], ch
xor al, 0x29
add byte [rax], al
imul ebp, dword [rsi + 0x74], 0x69616d20
outsb dx, byte [rsi]
sub byte [rcx], ch
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
pop rax
add eax, dword [rax]
add byte [rdx], ch
add byte [rax], al
in al, 0xc8
jmp qword [rbx + rax - 0x358c0000]
push qword [rbx + rax]
add byte [rdx - 0x35], ch
in al, dx
add al, 0
add byte [rax + 0x1cffffd0], ch
add eax, 0xd28d0000
inc dword [rbp + rax]
add bh, bl
ljmp [rbp + rax]
add byte [rsi - 0x22], al
dec esp
add eax, dword [rax]
add byte [rsi + rbx*8 - 1], cl
in al, dx
add eax, dword [rax]
add byte [rdx - 0x22], dl
dec dword [rsp + rax]
add byte [rax], al
pop rax
fdivp st(7)
ljmp [rsp + rax]
add byte [rax], al
jg 0x4043e8
dec dword [rsp + rax]
add byte [rcx + 0x6cffffde], dl
add al, 0
add byte [rdi - 0x73000022], bl
add al, 0
add byte [rsi - 0x53000022], ch
add al, 0
add dl, dh
fdivp st(7)
ljmp [rbp + rax - 0x20f20000]
dec esp
add eax, 0xdf2a0000
in al, dx
add eax, 0xdf3c0000
dec dword [rsi + rax]
add byte [rax], al
ljmp [rsi + rax]
add byte [rax], al
test bh, bl
dec dword [rsi + rax]
add byte [rsi], bh
loopne 0x40445a
jl 0x404464
add byte [rax], al
loopne 0x404462
jmp qword [rsi + rax - 0x1f360000]
inc esp
add byte [rax], al
loope 0x404472
jmp rsp
add byte [rax], al
jb 0x40445b
dec dword [rdi + rax]
add byte [rax], al
xchg eax, edx
loope 0x404482
ljmp [rdi + rax]
add byte [rax], al
mov esi, 0x4cffffe1
add byte [rax], al
retf -0x1f
ljmp [rdi + rax]
add dh, dl
loope 0x40449a
dec dword [rdi + rax - 0x1e0e0000]
ljmp [rdi + rax - 0x1de80000]
dec esp
add byte [rax], al
push -0xb00001e
add byte [rax], al
loop 0x4044ba
call qword [rax + rcx]
add byte [rax], al
or al, 0xe3
push qword [rax + rcx]
add byte [rax], al
jrcxz 0x4044ca
call qword [rax + rcx]
add byte [rbx - 0x1d], dl
push qword [rax + rcx]
add al, ah
jrcxz 0x4044da
lcall [rax + rcx - 0x1bd60000]
mov esp, 0x5f000008
in al, 0xff
fmul qword [rax]
add byte [rax], al
ret 0xffe4
inc dword [rcx + rcx]
add byte [rax], al
cmc
in al, 0xff
jmp qword [rcx + rcx]
add byte [rax], al
in eax, 0xff
inc dword [rcx + rcx]
add byte [rbp - 1], cl
jmp qword [rcx + rcx]
add byte [rax - 0x7b00001b], cl
or dword [rax], eax
add bl, cl
in eax, 0xff
jmp qword [rcx + rcx - 0x19530000]
dec esp
or dword [rax], eax
add byte [rdi - 1], ah
push rsp
or dword [rax], eax
add byte [rdx + 0x14ffffe7], cl
or al, byte [rax]
add byte [rax + 0x34ffffe7], bh
or al, byte [rax]
add dl, al
out 0xff, eax
call qword [rdx + rcx]
add dl, ah
out 0xff, eax
push qword [rdx + rcx]
add byte [rax + rbp*8], cl
call qword [rdx + rcx - 0x17c30000]
push qword [rdx + rcx - 0x17b40000]
call rsp
or al, byte [rax]
add byte [rdx - 0x18], bl
push rsp
or al, byte [rax]
add byte [rbx + 0x1cffffe8], dh
or eax, dword [rax]
add byte [rdx + 0x44ffffe9], ah
or eax, dword [rax]
add byte [rdx + rbp*8], al
jmp qword [rbx + rcx]
add byte [rdx], dl
inc dword [rbx + rcx - 0x149f0000]
ljmp [rbx + rcx - 0x140e0000]
call rsp
or eax, dword [rax]
add byte [rdx], al
in al, dx
push rsp
or eax, dword [rax]
add byte [rsi], ah
in al, dx
call qword [rsp + rcx]
add byte [rax], al
push 0x34ffffec
or al, 0
add byte [rsi + 0x54ffffec], bh
or al, 0
add byte [rsi - 0x13], bh
jl 0x4045d2
add byte [rax], al
loop 0x4045b7
jmp qword [rsp + rcx - 0x11b90000]
inc esp
or al, 0
add byte [rdi + rbp*8 - 1], bl
jmp rsp
or al, 0
add byte [rsi], cl
inc dword [rcx - 0xfb60000]
jmp qword [rcx - 0xf960000]
inc dword [rbp + rcx]
add byte [rsi + 0x64fffff0], bh
or eax, 0xf1000000
inc dword [rbp + rcx - 0xeef0000]
jmp qword [rbp + rcx - 0xea30000]
dec esp
or eax, 0xf16c0000
in al, dx
or eax, 0xf1b20000
dec dword [rsi + rcx]
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
push qword [rsi + rcx]
add byte [rax], al
mov eax, 0x54fffff2
add byte [rax], al
push qword [rsi + rcx]
add ah, dl
call qword [rsi + rcx - 0xcdd0000]
mov esp, 0x2e00000e
hlt
jmp rsp
add byte [rax], al
push -0xc
inc dword [rdi + rcx]
add byte [rax], al
push rax
cmc
ljmp [rdi + rcx]
add byte [rax], al
jo 0x40465f
dec dword [rdi + rcx]
add byte [rdi + 0x6cfffff5], ch
sldt word [rax]
leave
cmc
dec dword [rdi + rcx - 0x9a00000]
push qword [rdi + rcx - 0x96c0000]
call rsp
sldt word [rax]
ret 0xfff8
cld
sldt word [rax]
call 0x1d404695
adc byte [rax], al
add dh, dh
clc
cmp al, 0x10
add byte [rax], al
adc cl, bh
lcall [rax + rdx]
add byte [rcx - 7], al
jl 0x4046c6
add byte [rax], al
mov dh, 0xfa
jmp qword [rax + rdx - 0x5090000]
inc esp
adc byte [rax], al
add byte [rbx + rdi*8], dl
jmp rsp
adc byte [rax], al
add byte [rdx - 5], bh
inc dword [rcx + rdx]
add byte [rax], al
scasb al, byte [rdi]
sti
jmp qword [rcx + rdx]
add byte [rax], al
mov esp, 0x44fffffb
adc dword [rax], eax
add byte [rcx], dh
cld
jmp qword [rcx + rdx]
add byte [rdi], bh
cld
inc dword [rcx + rdx - 0x34c0000]
jmp qword [rcx + rdx - 0x2dc0000]
in al, dx
adc dword [rax], eax
add byte [rax + rax], dl
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x404727
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
clc
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x404757
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp ch, al
inc dword [rax + 1]
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rdx - 0x26], dh
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rax - 0x26], bl
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rdx + rbx*8], ah
jmp qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
sbb eax, 0xeffffda
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 1
add byte [rax], al
or ebx, edx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
cli
fcos
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x40487f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x404899
add eax, eax
or eax, 0x1b030040
or al, 7
or byte [rax + 0x2c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
jbe 0x404868
add eax, 0xb4040000
push rbp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea r8, [rbx]
mov word [rbx + rax*4], es
add eax, 0xc052d03
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
push rsp
add byte [rax], al
add byte [rbx + rcx*8 + 0x1e5ffff], al
add byte [rax], al
add al, 0xcf
push rbp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
fadd dword [rcx]
or al, 7
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov esp, 0x41000001
int 0xff
call qword [rdx + 4]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
add al, 0xc
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rbx - 0x2f], ch
jmp qword [rdi + 7]
add byte [rax], al
add al, 0xe9
push rbp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rax
pop qword [rbx]
mov es, word [rcx*4 - 0x7cf973fb]
add ebx, dword [rsi + 0x78102e03]
add byte cs:[rbx], al
cmc
add dword [rsi], ebp
adc byte [rbx + 0x2e], bh
add byte [rbx], al
add qword [rdi + rax], r9
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 2
add byte [rax], al
fcos
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rdx], bh
fcos
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rsi], dh
fcos
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
sub cl, bl
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rdx], bl
fcos
push qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6c
or al, 7
or byte [rax + rax], ch
add byte [rax], al
test byte [rcx], al
add byte [rax], al
xor cl, bl
mov edx, 0x4000000
push r14
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x6c
adc byte cs:[rdx], al
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 1
add byte [rax], al
mov edx, 0x44ffffd9
add byte [rax], al
add byte [rbx + rdx*2], al
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x404a53
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 3
add byte [rax], al
fcos
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 3
add byte [rax], al
fcos
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
pop rsp
add eax, dword [rax]
add byte [rdx], ch
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], al
add byte [rax], al
pop rsi
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add byte [rsi - 0x26], bl
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rdx - 0x26], ch
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 3
add byte [rax], al
push rsi
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 4
add byte [rax], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 4
add byte [rax], al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 3
add byte [rax], al
call qword [rax]
add byte [rax], al
add al, 0x57
push rsi
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
insb byte [rdi], dx
add al, 0
add byte [rdx + rbx*8 - 1], ch
call qword [rsi]
adc byte [rsi + 0x60d4302], al
add dl, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
mov word [rax + rax], es
add dl, ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add al, 0
add al, dl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add al, 0
add dl, bl
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add al, 0
add bh, dl
dec dword [rax + rax + 0x41000000]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x80
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 5
add byte [rax], al
cmp al, 0xdb
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 5
add byte [rax], al
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x404c8f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
add eax, 0xdb7b0000
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x404cbb
add byte [rax], al
mov dh, 0xdb
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add eax, 0xdbc90000
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xda000005
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rip - 0x24200000]
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
cld
add eax, 0xdbfc0000
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], ah
add byte [rax], al
sbb al, 6
add byte [rax], al
fdiv st(7), st(0)
jmp rdx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70cd402
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
fstpnce st(4), st(0)
push qword [rdi]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70ca902
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
push 0x26ffffdd
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rsi], es
add byte [rax], al
outsb dx, byte [rsi]
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
jl 0x404dc7
dec dword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add byte [rax], al
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 7
add byte [rax], al
jo 0x404e27
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 7
add byte [rax], al
sbb ebp, 0xfffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
jo 0x404e67
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
pop rsi
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
out dx, eax
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70ce102
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x56000007
fdivp st(7)
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rdi]
add byte [rax], al
cwde
fdivp st(7)
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add byte [rax], al
xchg dh, bl
dec dword [rdi + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc014103
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
and al, 8
add byte [rax], al
lodsd eax, dword [rsi]
call qword [rcx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x7b
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte [rax], r8b
add byte [rsi], dl
loopne 0x404f8a
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
or byte [rax], al
add byte [rsi], al
loopne 0x404faa
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax], cs
add byte [rax], al
or ah, al
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x404fe7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or byte [rax], al
add byte [rax], ch
call qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
int3
or byte [rax], al
add byte [rdx - 0x20], ah
inc eax
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov dh, 0xc
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
or byte [rax], al
add dl, bh
loopne 0x405032
jmp qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 9
add byte [rax], al
loope 0x40505a
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 9
add byte [rax], al
jnp 0x40505b
call qword [rip + 1]
adc byte [rsi + 0x60d4302], al
add edx, dword [rax]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or dword [rax], eax
add byte [rax - 0x1e], dh
push qword [rdx]
adc byte [rsi + 0x60d4302], al
add ch, byte [rbp + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
jl 0x4050bf
add byte [rax], al
add ah, bl
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
pushfq
or dword [rax], eax
add byte [rsi], bl
jrcxz 0x4050da
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x1e000009
jrcxz 0x4050fa
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fmul qword [rcx]
add byte [rax], al
push rdx
jrcxz 0x40511a
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x78
or al, 7
or byte [rax + rax], bl
add byte [rax], al
cld
or dword [rax], eax
add byte [rbx - 1], dh
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0xa
add byte [rax], al
jrcxz 0x40515a
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or r8b, byte [rax]
add byte [rcx + 0xeffffe3], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, byte fs:[rax]
add byte [rax - 0x1d], bh
inc dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
test byte [rdx], cl
add byte [rax], al
sahf
jrcxz 0x4051c2
push rcx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
out 0xc, eax
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or al, byte [rax]
add byte [rax - 0x1c], ch
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
or al, byte [rax]
add byte [rsp - 1], bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
or al, byte [rax]
add byte [rdx - 0x1c], cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 0xb
add byte [rax], al
cmp ah, ah
dec dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 0xb
add byte [rax], al
pop rdi
in al, 0xff
dec dword [rbx]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
add dword [rcx], eax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pop rsp
or eax, dword [rax]
add byte [rdx - 0x1b], al
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], ah
add byte [rax], al
jl 0x4052c1
add byte [rax], al
pop rsi
in eax, 0xff
jmp rbp
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x27
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or eax, dword [rax]
add byte [rsi], bl
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, dword [rax]
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x75
or al, 7
or byte [rax + rax], bl
add byte [rax], al
in al, 0xb
add byte [rax], al
cmp esp, esi
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0xc
add byte [rax], al
xor eax, 0x96ffffe6
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x76
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xc
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
out 0xff, al
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 0
add byte [rax + 0x2effffe6], bh
add al, byte [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc022003
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x4053ba
add byte [rax], al
mov esi, 0x26ffffe8
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or al, 0
add ah, al
call 0x4f53d5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xc
add byte [rax], al
mov dl, 0xe8
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 0
add byte [rax + rbp*8 + 0x31ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
or al, 0
add byte [rbp + 0x74ffffe8], bh
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
push 1
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0xd
add byte [rax], al
or ch, dl
inc dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x405477
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xd
add byte [rax], al
sub ebp, edx
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or eax, 0xea280000
jmp qword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x4054c3
add byte [rax], al
outsb dx, byte [rsi]
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or eax, 0xea820000
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x7000000d
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fmul qword [rip - 0x153b0000]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or eax, 0xeab30000
push qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], al
add byte [rsi + rcx], bl
add byte [rax], al
or bl, ch
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x405592
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
xor bl, ch
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
jnp 0x4055bf
or dword [rax], eax
mov edi, 0x9ee0502
add ah, dh
add cl, byte [rbp + 0xa8206]
jmp 0x4097d8
inc dword [rcx]
xchg eax, ecx
add dword [rax + rax], edi
add dl, dh
add dword [rbx - 0x57], eax
add eax, dword [rax]
ret
add al, byte [rip - 0x41fffc68]
add eax, dword [rip - 0x10000]
add dword [rax + 0x37], ebx
mov dh, 4
add byte [rax], al
stosb byte [rdi], al
push -0x4dfff26a
add eax, 0xea000d85
add eax, 0xdd000d96
or byte [rsi], ch
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
or dword [rip - 0x36fff14a], eax
or dword [rip - 0x7fff250], eax
or dword [rip - 0x64fff15e], eax
or al, byte [rip - 0x38fff23c]
or al, byte [rip - 0x18fff172]
or al, byte [rip - 0x45fff228]
or eax, dword [rip - 0x20fff206]
or eax, dword [rip - 0x65fff217]
or al, 5
cli
or eax, 0xa80dab00
add dword [rax], eax
add bh, bh
inc dword [rcx]
or dh, byte [rdi + 5]
xchg eax, edx
add dword [rax], eax
cmpsd dword [rsi], dword ptr [rdi]
add dword [rip - 0x10000], eax
add dword [rax], eax
inc dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 3], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x405e35
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x405e4e
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 5], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4009], ah
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rsi + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400c], ah
add byte [rax], al
add byte [rsi + 0x400c], dh
add byte [rax], al
add dh, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
push rsi
or eax, 0x40
add byte [rax], al
or ax, 0x40
add byte [rax], al
add byte [rax], al
jbe 0x40608f
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400d], al
add byte [rax], al
add byte [rsi + 0x400d], dl
add byte [rax], al
add byte [rsi + 0x400d], ah
add byte [rax], al
add byte [rsi + 0x400d], dh
add byte [rax], al
add dh, al
or eax, 0x40
add byte [rax], al
or eax, 0x40
add byte [rax], al
out 0xd, al
add byte [rax], al
add byte [rax], al
add dh, dh
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x406158
je 0x406161
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40616f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40616c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 5], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rsi + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax + 0x4009], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax], dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, byte [rax]
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
jo 0x406236
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
nop
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x400e1000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rbx + rax*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, byte [rax]
or byte [rdi + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rbp + rdx*2 + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x605df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0xe], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400e], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x605df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], cl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000001], ah
add byte [rax], dl
add byte [rax + 0x4043], ah
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
add dword [rax], eax
add byte [rcx], al
add byte [rdx], dl
add byte [rax + 0x4055], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add dword [rax], eax
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add dword [rax], eax
add byte [rax], al
add byte [rcx], dl
add byte [rbx + rax*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
add dword [rax], eax
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 2], al
add byte [rax + rax], dl
clc
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add al, byte [rax]
add byte [rax], al
add byte [rax + rax], dl
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add al, byte [rax]
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
shl byte [rax + 0x60], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, bh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x30], ch
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x402d], dh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x40668d
add byte [rax], al
and al, byte [rax]
add ah, al
and eax, 0x40
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000003], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000003], bh
add byte [rsi], cl
add bl, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 4], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4022], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 4], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4025], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000004], bl
add byte [rsi], cl
add byte [rax + 0x4036], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 4
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add eax, 0x120000
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rdx + 4], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add rax, 0x220000
add byte [rbx + 0x22], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 5], bh
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rip + 0x200000], es
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0x6000e0022000005]
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rsi], eax
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rsi], es
add byte [rax], al
and al, byte [rax]
add dl, ah
add byte es:[rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add al, bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4026], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000007], al
add byte [rsi], cl
add dl, ch
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
mov dl, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 7, 0
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x4068b9
add byte [rax], al
and al, byte [rax]
add ah, bh
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub ecx, dword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000008], dl
add byte [rsi], cl
add byte [rcx + 0x2a], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add al, bl
add eax, dword [rax]
add byte [rdx], dl
add byte [rdi], cl
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rbx + 9], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x3c], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx + 0x120000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 9
add byte [rax], al
adc al, byte [rax]
add byte [rsi], dl
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], cl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x2c], bl
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000a], ah
add byte [rsi], cl
add byte [rsi + 0x4025], bl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x25], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], ch
and al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x402b], bh
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200000b], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000b], cl
add byte [rsi], cl
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4025], bl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x34], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rbp + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x403c], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xd], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], bl
xor eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2000000d], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000d], ah
add byte [rsi], cl
add byte [rdx + 0x25], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
or eax, 0x220000
add ah, al
and eax, 0x40
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
adc byte [rax], al
loopne 0x406b52
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0x1200000e]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rcx + 0x200000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
shl byte [rax + 0x60], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x2200000f
add byte [rsi], cl
add byte [rdx + 0x4025], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xf], bl
add byte [rax], al
and al, byte [rax]
add dl, dh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1200000f], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
sldt word [rax]
and al, byte [rax]
add byte [rdx + 0x4022], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
sldt word [rax]
and al, byte [rax]
add byte [rsi], dl
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000010], cl
add byte [rsi], cl
add al, bh
sub byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte gs:[rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x4028], ah
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000010], ch
add byte [rsi], cl
add byte [rax], dl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add dh, al
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [r8], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x3a], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add dl, cl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte ss:[rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], bl
and eax, 0x40
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb edx, dword [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3f], ch
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add bh, bh
add byte es:[rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, bh
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2b], ch
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x13], bl
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
loopne 0x406d82
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x13], ch
add byte [rax], al
and al, byte [rax]
add cl, ch
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x11000013], ah
add bl, byte [rdx]
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000013], dh
add byte [rsi], cl
add byte [rax], dh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
mov edx, 0
add byte [rax], al
add dl, dh
adc eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, byte [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
and al, byte [rax]
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax + rax], dl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], dh
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add bh, al
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4022], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x402f], bl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
adc eax, 0x220000
add byte [rip + 0x402f], cl
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax + 0x22000015], bh
add byte [rsi], cl
add byte [rdx + 0x4022], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
adc eax, 0x220000
add byte [rax + 0x4036], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x220000
add byte [rsi + 0x35], bl
add byte [rax], al
add byte [rax], al
add cl, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000016], al
add byte [rsi], cl
add byte [rsi + 0x4022], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000016], bl
add byte [rsi], cl
add byte [rsi + rsi + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
and al, byte [rax]
add al, ch
and al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
add byte [rax], al
and al, byte [rax]
add byte [rcx], cl
xor eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x24], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x17], dh
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x29], dh
add byte [rax], al
add byte [rax], al
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dh
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
loopne 0x406f7a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4034], bh
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x18], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x402b], cl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000018], bl
add byte [rsi], cl
add ch, bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dl
sbb byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dl, al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x19], al
add byte [rax], al
and al, byte [rax]
add byte [rsp + rsi + 0x40], ch
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, byte [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
and eax, 0x40
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xcf000e0022000019]
add byte ss:[rax], al
add byte [rax], al
add byte [rbx], cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
sbb al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200001a], dh
add byte [rsi], cl
add byte [rbx + 0x39], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200001a], dh
add byte [rsi], cl
add byte [rax + 0x36], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp 0x2240704f
add byte [rsi], cl
add ch, ch
cmp al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1b], ch
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x403e], ah
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add bl, dl
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4031], cl
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0x1c
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x22], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp ebx, dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x36], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1c], bh
add byte [rax], al
and al, byte [rax]
add dl, ch
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1200001c], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add al, byte [rax]
add byte [rax], dl
add byte [rbx], bl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
sbb eax, 0x220000
add byte [rdi + 0x40], cl
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1d], cl
add byte [rax], al
and al, byte [rax]
add byte [rcx + rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200001d], ch
add byte [rsi], cl
add byte [rsi + 0x28], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
sbb eax, 0x220000
add byte [rdi + 0x40], cl
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4033], bh
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x4071a0
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x402d], bh
add byte [rax], al
add byte [rdi + 1], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
neg dword [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x2200001f
add byte [rsi], cl
add byte [rdx + 0x3e], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1f], al
add byte [rax], al
and al, byte [rax]
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x407219
add byte [rax], al
and al, byte [rax]
add byte [rdx + rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x1f, eax
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte ss:[rax], al
add byte [rdx], ah
add byte [rsi], cl
add bl, dh
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
adc eax, 1
add byte [rax], al
add dl, al
and byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rsp + rdx + 0x40], dl
add byte [rax], al
add byte [rax], al
add ch, ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x2d], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
and qword [r8], r8
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x39], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add dl, al
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x402f], bl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
and dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22], al
add byte [rax], al
and al, byte [rax]
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdi + 0x22], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
mov edx, 0
add byte [rax], al
add cl, al
and al, byte [rax]
add byte [rax], dl
add byte [rdx], bl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
and al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dh
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rbx], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub ah, byte [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte fs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000023], ah
add byte [rsi], cl
add al, al
add byte ds:[rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x12000024
add byte [rax], al
add al, al
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4026], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x24], dh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x25], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000024], ah
add byte [rsi], cl
add byte [rsi + 0x25], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dl
and al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
and al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x402f], ch
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
and eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rip + 0x220000], ah
add dl, ah
add byte es:[rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbp + 0x120000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rsi], ah
add byte [rax], al
adc al, byte [rax]
add byte [rbx + 0x401a], cl
add byte [rax], al
add byte [rdi + 7], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
adc eax, dword [rax]
add byte [rdx], dl
add byte [rbx], cl
add byte [rax + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000026], bl
add byte [rsi], cl
add byte [rdx + 0x3f], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x26], cl
add byte [rax], al
and al, byte [rax]
add byte [rsp + rdi + 0x40], bh
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x407528
je 0x40752c
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4074de
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40755c
jb 0x407562
pop rdi
jne 0x40756b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x407565
je 0x407561
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x407581
jb 0x407587
pop rdi
jne 0x407590
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x407593
jns 0x407583
outsb dx, byte gs:[rsi]
je 0x40759a
jns 0x40752a
jb 0x40758e
insd dword [rdi], dx
pop rdi
jne 0x4075a0
insd dword [rdi], dx
jns 0x407536
pop rdi
pop rdi
jb 0x40759c
insd dword [rdi], dx
pop rdi
jne 0x4075ae
insd dword [rdi], dx
jns 0x4075a3
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4075ae
jns 0x4075ae
outsb dx, byte gs:[rsi]
je 0x4075c5
jns 0x407555
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x4075ac
xor dword [rcx], edi
jo 0x4075cd
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4075e5
jb 0x4075e8
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
pop rdx
xor eax, 0x63616c70
xor eax, 0x31787863
xor dword [rsp + rbp*2 + 0x6c], ebp
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
jb 0x40760b
jo 0x407614
movsxd rsp, dword [rbp + 0x4e]
push rbx
je 0x4075e6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407625
movsxd rbx, dword [rdi + 0x73]
je 0x407633
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40762e
je 0x407643
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r12, dword [r11 + 0x6c]
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor eax, 0x63656863
imul ecx, dword [rsi + 0x53], 0x74
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40767c
movsxd rbx, dword [rdi + 0x73]
je 0x40768a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407685
je 0x40769a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insb byte [rdi], dx
insb byte [rdi], dx
insb byte [rdi], dx
insb byte [rdi], dx
insb byte [rdi], dx
insb byte [rdi], dx
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x6d
imul ebp, dword [rsi + 0x45], 0x5f5f3931
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x407721
jns 0x407721
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x407732
jns 0x407732
jae 0x407749
jb 0x40774c
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40774b
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x407727
xor eax, 0x74695f5f
jb 0x40775d
movsxd rbp, dword [rdi + 0x6d]
jo 0x407762
jbe 0x407766
insb byte [rdi], dx
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x407772
insb byte [rdi], dx
jae 0x40778a
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
push rbx
je 0x407754
xor ebx, dword [rdi + 0x5f]
push 0x5f706165
jae 0x407792
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rcx*2 + 0x4e]
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x407799
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4077b2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407789
jo 0x4077b8
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x407796
jbe 0x4077c7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4077f1
xor dword [rip + 0x6574495f], esi
jb 0x4077e5
insb byte [rdi], dx
jae 0x4077fd
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4077d7
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40780c
push r10
push rbx
je 0x4077e0
jo 0x40780f
imul esi, dword [rdx + 0x49], 0x4545636c
push rbx
je 0x4077eb
jb 0x407822
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407826
pop rdi
jb 0x407829
jb 0x40782d
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x407843
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x407812
xor byte [rdi + 0x5f], bl
jne 0x407853
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40786e
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40786f
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x407883
push r8
push r11
je 0x407844
jo 0x407873
imul esi, dword [rdx + 0x49], 0x5045636c
push rbx
xor ebx, dword [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x407861
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4078a2
push r11
je 0x407875
jo 0x4078a4
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4078a3
jae 0x4078e8
jo 0x4078bd
movsxd rax, dword [rbp + 0x76]
push rdx
push rsp
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
push r11
je 0x4078cb
jo 0x4078fa
imul esi, dword [rdx + 0x49], 0x4545636c
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x4078e7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407926
movsxd rbx, dword [rdi + 0x73]
je 0x407934
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40792f
je 0x407944
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x407957
jae 0x407959
jb 0x40792c
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x407937
jo 0x407966
imul esi, dword [rdx + 0x49], 0x4545636c
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x407948
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407989
push r11
je 0x40795c
jo 0x40798b
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40794b
pop rdi
pop rdx
push rbx
je 0x407981
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x4079cb
jb 0x4079ce
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x407993
jo 0x4079c2
imul esi, dword [rdx + 0x49], 0x4945636c
push rdx
push r11
xor dword [rdi + 0x45], ebx
jbe 0x4079c1
push rsp
pop rdi
jo 0x4079c5
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4079e3
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4079bf
xor eax, 0x61765f5f
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x4079f9
imul esi, dword [rbp + 0x72], 0x30534e45
pop rdi
xor dword [rip + 0x6574495f], esi
jb 0x407a0a
insb byte [rdi], dx
jae 0x407a22
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
xor eax, 0x63656863
imul ecx, dword [rsi + 0x53], 0x74
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407a38
movsxd rbx, dword [rdi + 0x73]
je 0x407a46
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407a41
je 0x407a56
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
insb byte [rdi], dx
insb byte [rdi], dx
insb byte [rdi], dx
insb byte [rdi], dx
insb byte [rdi], dx
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x407a35
outsw dx, word [rsi]
jb 0x407a79
jb 0x407a69
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x407a41
jb 0x407a78
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407a7c
pop rdi
jb 0x407a7f
jb 0x407a83
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x407a9a
add byte gs:[r15 + 0x5f], r11b
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x407aaa
jb 0x407aad
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x407a9f
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x407ac0
jae 0x407a50
pop rdi
pop rdx
push rbx
je 0x407a86
xor al, 0x5f
pop rdi
jo 0x407abb
jb 0x407ad0
imul esp, dword [rcx + 0x6c], 0x726f735f
je 0x407aae
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407acc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407ae5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407abc
jo 0x407aeb
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x407ac9
jbe 0x407afa
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x407b24
xor dword [rip + 0x6574495f], esi
jb 0x407b18
insb byte [rdi], dx
jae 0x407b30
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407b3a
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x70347453
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x407b26
jbe 0x407b57
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407b7c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x407b8f
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x407ba9
jo 0x407b97
push r10
push r11
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407ba5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407bbe
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407b95
jo 0x407bc4
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x407ba2
jbe 0x407bd3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x407bc5
pop rdi
jae 0x407c06
jb 0x407c03
jns 0x407bdf
push rax
push rbx
je 0x407bce
jo 0x407bfd
imul esi, dword [rdx + 0x49], 0x5345636c
xor dword [rdi + 0x45], ebx
jbe 0x407bfc
pop rdi
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x407bf1
jbe 0x407c22
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x407bf9
jo 0x407c28
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x407c21
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x407c25
xor dword [rdi + 0x5f], ebx
jne 0x407c66
jne 0x407c5c
jb 0x407c61
pop rdi
jo 0x407c63
jb 0x407c78
imul esi, dword [rcx + rbp*2 + 0x6f], 0x394e496e
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x407c71
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407c8a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407c61
jo 0x407c90
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x407c6e
jbe 0x407c9f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x407cc9
xor dword [rip + 0x6574495f], esi
jb 0x407cbd
insb byte [rdi], dx
jae 0x407cd5
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
jae 0x407cf0
jb 0x407cf4
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x407cfc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407d15
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407cec
jo 0x407d1b
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x407cf9
jbe 0x407d2a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
jbe 0x407cdb
pop rdi
pop rdx
push rbx
je 0x407d12
xor byte [rdi + 0x49], bl
je 0x407d4b
jb 0x407d47
jae 0x407d51
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407d54
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407d6d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407d44
jo 0x407d73
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x407d51
jbe 0x407d82
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x407da1
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x407d78
xor bl, byte [rdi + 0x5f]
imul bp, word [rsi + 0x61], 0x5f6c
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x407dca
jb 0x407dd1
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407dc5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407dde
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407db5
jo 0x407de4
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x407dc2
jbe 0x407df3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x407e1d
xor dword [rip + 0x6574495f], esi
jb 0x407e11
insb byte [rdi], dx
jae 0x407e29
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x407e03
jbe 0x407e34
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x407e0b
jo 0x407e3a
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
jb 0x407e4f
outsb dx, byte [rsi]
pop rdi
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x534b5049
xor dword [rdi + 0x45], ebx
jbe 0x407e5a
pop rdi
push rbx
pop rdi
push rbx
je 0x407e3f
xor byte [rsi + 0x6f], ah
jb 0x407e89
jb 0x407e79
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x407e82
add byte [edi + 0x5a], bl
push rbx
je 0x407e5c
jae 0x407ea1
jo 0x407e76
insb byte [rdi], dx
movsxd rax, dword [rbp + 0x76]
push rdx
push rbx
je 0x407e69
jo 0x407e98
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor al, 0x5f
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x407ec4
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x355a5f00
jo 0x407ed4
movsxd rsp, dword [rbp + 0x42]
xor eax, 0x31787863
xor dword [rsp + rbp*2 + 0x6c], ebp
add byte [rdi + 0x5a], bl
push rbx
je 0x407eb3
imul esi, dword fs:[rbx + 0x74], 0x65636e61
push r8
push r11
je 0x407ebd
jo 0x407eec
imul esi, dword [rdx + 0x49], 0x4545636c
push rbx
je 0x407ec7
xor eax, 0x72657469
je 0x407f0d
jb 0x407eff
je 0x407f14
imul esi, dword [rbx + rsi*2 + 0x49], 0x31455f54
xor eax, 0x66666964
jb 0x407f18
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x407f32
jo 0x407f20
push r11
xor eax, 0x5f35535f
add byte [rdi + 0x5a], bl
push rbx
je 0x407efa
pop rdi
pop rdi
jne 0x407f3b
jne 0x407f31
jb 0x407f36
pop rdi
jo 0x407f38
jb 0x407f4d
imul esi, dword [rcx + rbp*2 + 0x6f], 0x69705f6e
jbe 0x407f52
je 0x407f2e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407f4c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407f65
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x407f3c
jo 0x407f6b
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x407f49
jbe 0x407f7a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x407fa4
xor dword [rip + 0x6574495f], esi
jb 0x407f98
insb byte [rdi], dx
jae 0x407fb0
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x407f87
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407fc8
push r11
je 0x407f9b
jo 0x407fca
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407fe9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x407ff2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407fe6
push rbx
je 0x407fd4
jo 0x408003
imul esi, dword [rdx + 0x49], 0x4545636c
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x408020
push rax
jbe 0x407fb6
pop rdi
pop rdx
push rbx
je 0x407fec
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x408047
push r8
push r11
je 0x408008
jo 0x408037
imul esi, dword [rdx + 0x49], 0x5045636c
push rbx
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x40802a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408069
movsxd rbx, dword [rdi + 0x73]
je 0x408077
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408072
je 0x408087
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x408070
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4080a5
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x408081
xor al, 0x5f
je 0x4080ba
jb 0x4080b6
insb byte [rdi], dx
jae 0x4080ce
pop rdi
jbe 0x4080bf
insb byte [rdi], dx
movsxd rbp, dword [rcx + rcx*2 + 0x4e]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4080da
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4080b1
jo 0x4080e0
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x4080be
jbe 0x4080ef
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor eax, 0x4961535f
push rbx
xor eax, 0x4545455f
push r11
xor eax, 0x6245455f
push rsp
pop rdi
push rdx
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4080e0
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408121
push r11
je 0x4080f4
jo 0x408123
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x408143
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40811f
xor eax, 0x6574495f
jb 0x408154
insb byte [rdi], dx
jae 0x40816c
pop rdi
imul esi, dword [rbp + 0x72], 0x4e496c63
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408179
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408150
jo 0x40817f
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x40815d
jbe 0x40818e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor eax, 0x4961535f
push rbx
xor eax, 0x4545455f
push r11
pop r15
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40817d
cmp dword [rdi + 0x5f], ebx
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword gs:[esi]
jb 0x4081d9
push r8
push r11
je 0x40819a
jo 0x4081c9
imul esi, dword [rdx + 0x49], 0x4545636c
push rbx
je 0x4081a4
xor eax, 0x72657469
je 0x4081ea
jb 0x4081dc
je 0x4081f1
imul esi, dword [rbx + rsi*2 + 0x49], 0x31455f54
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword gs:[esi]
jb 0x408213
push r10
push r11
xor eax, 0x5a5f005f
push rbx
je 0x4081d7
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40821b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408234
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40820b
jo 0x40823a
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408218
jbe 0x408249
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
je 0x40822c
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x408291
jo 0x40827f
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x408259
jo 0x408288
imul esi, dword [rdx + 0x49], 0x6145636c
push rbx
push r11
xor byte [rdi], bl
pop rdi
push r12
pop r15
jb 0x4082a3
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4082ba
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4082c3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4082b7
push rbx
je 0x4082a5
jo 0x4082d4
imul esi, dword [rdx + 0x49], 0x4545636c
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4082b6
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4082f7
push r11
je 0x4082ca
jo 0x4082f9
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x4082e8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408327
movsxd rbx, dword [rdi + 0x73]
je 0x408335
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408330
je 0x408345
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x49], bl
pop r15
jae 0x40836f
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x408341
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408380
movsxd rbx, dword [rdi + 0x73]
je 0x40838e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408389
je 0x40839e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rbx + 0x63], dh
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x54495f00
pop r15
jb 0x4083d0
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x4083e5
pop rdi
jae 0x4083fb
jb 0x4083fe
add byte [rdi + 0x5a], bl
push rbx
je 0x4083c8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408407
movsxd rbx, dword [rdi + 0x73]
je 0x408415
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408410
je 0x408425
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40840c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40844d
push r11
je 0x408420
jo 0x40844f
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40840f
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408478
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x408454
pop rdi
pop rdi
imul esi, dword [rbp + 0x72], 0x73656c5f
jae 0x40848f
imul esi, dword [rbp + 0x72], 0x5f007645
pop rdx
push rbx
je 0x408474
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4084b3
movsxd rbx, dword [rdi + 0x73]
je 0x4084c1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4084bc
je 0x4084d1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x6d], eax
movsxd rdx, dword [rdx + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x4084c4
jo 0x4084f3
imul esi, dword [rdx + 0x49], 0x4545636c
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40850f
je 0x4084ee
insb byte [rdi], dx
movsxd rax, dword [rbp + 0x62]
push rdx
push r11
je 0x4084e2
jo 0x408511
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
xor eax, 0x5a5f005f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408526
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
push rbx
je 0x408505
jo 0x408534
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408512
jbe 0x408543
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40856b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40854c
xor bl, byte [rdi + 0x5f]
jne 0x40858d
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x4085a8
pop rdi
push r8
push r11
je 0x40856b
jo 0x40859a
imul esi, dword [rdx + 0x49], 0x5045636c
push rbx
xor dword [rdi + 0x53], ebx
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x6153525f
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x408598
jo 0x4085c7
imul esi, dword [rdx + 0x49], 0x4545636c
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4085ac
xor byte [rdi + 0x5f], bl
jo 0x4085ef
jo 0x4085e1
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4085ee
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408607
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4085de
jo 0x40860d
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x4085eb
jbe 0x40861c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408646
xor dword [rip + 0x6574495f], esi
jb 0x40863a
insb byte [rdi], dx
jae 0x408652
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408629
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x408675
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40866e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408687
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40865e
jo 0x40868d
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x40866b
jbe 0x40869c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insb byte [rdi], dx
push rbx
xor ebx, dword [rdi + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4086ca
xor dword [rip + 0x6574495f], esi
jb 0x4086be
insb byte [rdi], dx
jae 0x4086d6
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x4086b2
imul ebp, dword ss:[rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x696c5f72
jae 0x408706
push r11
je 0x4086ca
jo 0x4086f9
imul esi, dword [rdx + 0x49], 0x4545636c
xor esp, dword [rbp + 0x6e]
jbe 0x4086a6
pop rdi
pop rdx
push rbx
je 0x4086e2
jbe 0x408713
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4086ea
jo 0x408719
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x408704
jae 0x408749
jo 0x40871e
insb byte [rdi], dx
jbe 0x40872b
push rsp
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40871a
pop rdi
pop rdi
jae 0x408757
jb 0x40875e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408752
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40876b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408742
jo 0x408771
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x40874f
jbe 0x408780
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4087aa
xor dword [rip + 0x6574495f], esi
jb 0x40879e
insb byte [rdi], dx
jae 0x4087b6
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4087be
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4087d7
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4087ae
jo 0x4087dd
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x4087bb
jbe 0x4087ec
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x62
jae 0x408802
jbe 0x4087a0
pop rdi
pop rdx
push rbx
je 0x4087d6
xor byte [rdi + 0x5f], bl
imul esi, dword fs:[rbx + 0x74], 0x65636e61
push r8
push r11
je 0x4087ea
jo 0x408819
imul esi, dword [rdx + 0x49], 0x4545636c
push rbx
je 0x4087f4
xor eax, 0x72657469
je 0x40883a
jb 0x40882c
je 0x408841
imul esi, dword [rbx + rsi*2 + 0x49], 0x31455f54
xor eax, 0x66666964
jb 0x408845
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x40885f
jo 0x40884d
push r11
xor eax, 0x5f35535f
push rbx
je 0x408824
jb 0x408856
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x408873
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40886d
add byte [edi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x408851
xor bl, byte [rdi + 0x44]
jae 0x40889a
jb 0x408897
jns 0x408889
jne 0x4088a5
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x4088ae
jb 0x4088ab
jns 0x408887
push rax
push rbx
je 0x408876
jo 0x4088a5
imul esi, dword [rdx + 0x49], 0x4545636c
jbe 0x4088a2
pop rdi
push rbx
xor eax, 0x5f5f005f
jae 0x4088c7
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x40889c
jbe 0x4088cd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4088a4
jo 0x4088d3
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x53], eax
je 0x4088b7
imul ebp, dword ss:[rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x696c5f72
jae 0x40890b
push r11
xor dword [rdi + 0x45], ebx
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40891b
movsxd rdi, dword [rax + 0x78]
insb byte [rdi], dx
je 0x40890b
push rax
push rbx
je 0x4088fa
jo 0x408929
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408907
jbe 0x408938
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408960
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push r11
je 0x408942
imul ebp, dword ss:[rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x696c5f72
jae 0x408996
push r11
je 0x40895a
jo 0x408989
imul esi, dword [rdx + 0x49], 0x4545636c
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x408938
pop rdi
pop rdx
push rbx
je 0x40896f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4089a8
je 0x4089bd
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40898a
jo 0x4089b9
imul esi, dword [rdx + 0x49], 0x4545636c
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x50]
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x4089b3
outsw dx, word [rsi]
jb 0x4089f7
jb 0x4089e7
push r10
insb byte [rdi], dx
push r12
pop rdi
push rdx
push rbx
je 0x4089c0
jb 0x4089f7
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4089fb
pop rdi
jb 0x4089fe
jb 0x408a02
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x408a19
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408a15
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408a1e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408a12
push rbx
je 0x408a00
jo 0x408a2f
imul esi, dword [rdx + 0x49], 0x4545636c
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x408a15
pop rdi
pop rdi
jne 0x408a56
jne 0x408a4c
jb 0x408a51
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x408a6b
jb 0x408a72
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408a66
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408a7f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408a56
jo 0x408a85
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408a63
jbe 0x408a94
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408abe
xor dword [rip + 0x6574495f], esi
jb 0x408ab2
insb byte [rdi], dx
jae 0x408aca
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x408aa5
jo 0x408ad4
imul esi, dword [rdx + 0x49], 0x4545636c
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x408ab5
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x408aff
jb 0x408b02
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x408ac7
jo 0x408af6
imul esi, dword [rdx + 0x49], 0x4a45636c
push rdx
push r11
xor dword [rdi + 0x45], ebx
jbe 0x408af5
push rsp
pop rdi
jo 0x408af9
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408ae5
xor eax, 0x6e755f5f
jne 0x408b1c
jb 0x408b21
pop rdi
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x695f7261
outsb dx, byte [rsi]
jae 0x408b30
jb 0x408b41
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408b35
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408b4e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408b25
jo 0x408b54
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408b32
jbe 0x408b63
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408b8d
xor dword [rdi + rbx*2], esi
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x408b98
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
push r11
je 0x408b70
jo 0x408b9f
imul esi, dword [rdx + 0x49], 0x4545636c
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408b80
xor dword [rdi + 0x5f], ebx
jb 0x408bbc
jae 0x408bcc
outsd dx, dword [rsi]
push r11
je 0x408b93
jo 0x408bc2
imul esi, dword [rdx + 0x49], 0x4545636c
push rax
push rsp
pop rdi
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x408ba8
imul ebp, dword ss:[rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x696c5f72
jae 0x408bfc
push r11
je 0x408bc0
jo 0x408bef
imul esi, dword [rdx + 0x49], 0x4545636c
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x408bd9
outsw dx, word [rsi]
jb 0x408c1d
jb 0x408c0d
insb byte [rdi], dx
push r12
pop rdi
push rdx
push rbx
je 0x408be5
jb 0x408c1c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x408c20
pop rdi
jb 0x408c23
jb 0x408c27
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x408c3e
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x408c0d
jbe 0x408c3e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x408c15
jo 0x408c44
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x408bfa
pop rdi
pop rdx
push rbx
je 0x408c36
jbe 0x408c67
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x408c3e
jo 0x408c6d
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor r12d, dword [r13 + 0x6e]
jbe 0x408c21
pop rdi
pop rdx
push rbx
je 0x408c57
pop rdi
pop rdi
imul ebp, dword [rsi + 0x74], 0x6f736f72
jb 0x408ca6
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
outsd dx, dword [rsi]
jo 0x408c81
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408c9f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408cb8
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408c8f
jo 0x408cbe
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408c9c
jbe 0x408ccd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insb byte [rdi], dx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408cf8
xor dword [rip + 0x6574495f], esi
jb 0x408cec
insb byte [rdi], dx
jae 0x408d04
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi], ebx
pop rdi
pop rdi
jae 0x408d1d
pop rdi
jae 0x408d21
jb 0x408d24
add byte [rdi + 0x5a], bl
push rbx
je 0x408ce7
xor ebp, dword [rbp + 0x6f]
jbe 0x408d20
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x408d28
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408d2c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408d45
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408d1c
jo 0x408d4b
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408d29
jbe 0x408d5a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r11
cmp byte [rdi + 0x45], bl
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408d4e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408d87
je 0x408d9c
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x408d69
jo 0x408d98
imul esi, dword [rdx + 0x49], 0x4545636c
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x408d88
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x408dbd
push r10
movsxd rax, dword [rbp + 0x4f]
push rbx
je 0x408d92
jb 0x408dc9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x408dcd
pop rdi
jb 0x408dd0
jb 0x408dd4
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x408dea
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
jae 0x408df9
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x408dd6
jae 0x408e13
jb 0x408e1a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408e0e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408e27
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408dfe
jo 0x408e2d
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408e0b
jbe 0x408e3c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
jbe 0x408e40
pop rdi
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x408e5b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408e74
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408e4b
jo 0x408e7a
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408e58
jbe 0x408e89
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jbe 0x408e3a
pop rdi
pop rdx
push rbx
je 0x408e72
insd dword [rdi], dx
js 0x408e8c
insb byte [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x408e86
xor dword [rdi + 0x5f], ebx
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x408eab
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408ec9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408ee2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408eb9
jo 0x408ee8
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408ec6
jbe 0x408ef7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408f21
xor dword [rip + 0x6574495f], esi
jb 0x408f15
insb byte [rdi], dx
jae 0x408f2d
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x408f1b
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408f5f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408f78
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408f4f
jo 0x408f7e
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x408f5c
jbe 0x408f8d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
je 0x408f70
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x408fd5
jo 0x408fc3
push r11
pop r15
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x408fcd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x408fd6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408fca
push rbx
je 0x408fb8
jo 0x408fe7
imul esi, dword [rdx + 0x49], 0x4545636c
cmp byte [rbp + 0x61], ch
js 0x408ff1
jae 0x408ffd
jp 0x408ffb
jbe 0x408f99
pop rdi
pop rdx
push rbx
je 0x408fcf
xor dword [rdi + 0x5f], ebx
jo 0x409018
jae 0x40900d
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409012
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40902b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409002
jo 0x409031
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x40900f
jbe 0x409040
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
insb byte [rdi], dx
push rbx
xor ebx, dword [rdi + 0x4e]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40906e
xor dword [rdi + rbx*2], esi
je 0x409066
jb 0x409062
insb byte [rdi], dx
jae 0x40907a
pop rdi
jbe 0x40906b
insb byte [rdi], dx
jbe 0x409063
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x409054
xor byte [rdi + 0x49], bl
je 0x40908d
jb 0x409089
jae 0x409093
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409096
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4090af
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409086
jo 0x4090b5
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x409093
jbe 0x4090c4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x4090e3
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4090ed
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409106
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4090dd
jo 0x40910c
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x4090ea
jbe 0x40911b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
insd dword [rdi], dx
imul eax, dword [rbp + 0x6c], 0x4e5a5f00
push rbx
je 0x409106
jo 0x409135
imul esi, dword [rdx + 0x49], 0x4345636c
xor dword [rcx + 0x52], ecx
insb byte [rdi], dx
movsxd rsi, dword [rsi + 0x45]
push r12
pop rdi
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409127
outsw dx, word [rsi]
jb 0x40916b
jb 0x40915b
push r10
push r11
je 0x409131
jo 0x409160
imul esi, dword [rdx + 0x49], 0x4545636c
push r12
pop rdi
push rdx
push rbx
je 0x40913f
jb 0x409176
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40917a
pop rdi
jb 0x40917d
jb 0x409181
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor al, 0x5f
xor al, 0x74
jns 0x409198
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x409167
jbe 0x409198
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40916f
jo 0x40919e
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x40918e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4091cd
movsxd rbx, dword [rdi + 0x73]
je 0x4091db
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4091d6
je 0x4091eb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4091db
pop rdi
jae 0x40921c
jb 0x409219
jns 0x4091f5
push rax
push rbx
je 0x4091e4
jo 0x409213
imul esi, dword [rdx + 0x49], 0x4545636c
jbe 0x40920f
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4091f7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409238
push r11
je 0x40920b
jo 0x40923a
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40923c
imul esi, dword [rbp + 0x72], 0x6177735f
jo 0x409256
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409274
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40928d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409264
jo 0x409293
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x409271
jbe 0x4092a2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r11
cmp byte [rdi + 0x45], bl
jbe 0x4092a9
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409291
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4092d2
push r11
je 0x4092a5
jo 0x4092d4
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4092c8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409309
push r11
je 0x4092dc
jo 0x40930b
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409338
movsxd rdi, dword [rax + 0x78]
jno 0x409328
push rax
push rbx
je 0x409317
jo 0x409346
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x409324
jbe 0x409355
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40937d
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40935d
pop rdi
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4093aa
jb 0x4093b1
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4093a5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4093be
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409395
jo 0x4093c4
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x4093a2
jbe 0x4093d3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4093fd
xor dword [rip + 0x6574495f], esi
jb 0x4093f1
insb byte [rdi], dx
jae 0x409409
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4093dd
pop rdi
pop rdi
je 0x409419
jb 0x409422
ja 0x409414
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x409407
jo 0x409436
imul esi, dword [rdx + 0x49], 0x3445636c
jae 0x409455
jo 0x409426
push rdx
push rbx
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40941f
pop rdi
pop rdi
insb byte [rdi], dx
insb byte [edi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40945a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409463
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409457
push rbx
je 0x409445
jo 0x409474
imul esi, dword [rdx + 0x49], 0x4545636c
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x409429
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x409493
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40946f
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x4094bb
pop rdi
imul esi, dword [rbp + 0x72], 0x53496c63
je 0x409487
jo 0x4094b6
imul esi, dword [rdx + 0x49], 0x4e45636c
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4094d3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
xor al, 0x5f
push rbx
je 0x4094af
jbe 0x4094e0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor al, 0x5f
push rbx
push r11
xor al, 0x5f
push rdx
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x4094d5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409514
movsxd rbx, dword [rdi + 0x73]
je 0x409522
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40951d
je 0x409532
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x74735f63
jb 0x409519
jbe 0x409516
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40951d
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409557
pop rdi
insd dword [rdi], dx
imul esp, dword fs:[rcx + 0x6e], 0x5f6f745f
imul si, word [rdx + 0x73], 0x4974
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40956a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409583
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40955a
jo 0x409589
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x409567
jbe 0x409598
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4095c2
xor dword [rip + 0x6574495f], esi
jb 0x4095b6
insb byte [rdi], dx
jae 0x4095ce
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
jb 0x4095dc
jo 0x4095e5
movsxd rsp, dword [rbp + 0x4e]
push rbx
je 0x4095b7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4095f6
movsxd rbx, dword [rdi + 0x73]
je 0x409604
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4095ff
je 0x409614
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd r12, dword [r11 + 0x6c]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40961e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409637
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40960e
jo 0x40963d
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x40961b
jbe 0x40964c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x409666
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x409634
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x409669
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409673
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x40967b
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x4e], eax
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x409686
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40969f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409676
jo 0x4096a5
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x409683
jbe 0x4096b4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r11
cmp byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4096db
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4096e4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4096d8
push rbx
je 0x4096c6
jo 0x4096f5
imul esi, dword [rdx + 0x49], 0x4545636c
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4096e1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409720
movsxd rbx, dword [rdi + 0x73]
je 0x40972e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409729
je 0x40973e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x409729
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40976a
push r11
je 0x40973d
jo 0x40976c
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x40976b
jbe 0x40979c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x409773
jo 0x4097a2
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x53]
je 0x409786
imul ebp, dword ss:[rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x696c5f72
jae 0x4097da
push r11
xor dword [rdi + 0x45], ebx
push rdx
push r11
xor bl, byte [rdi]
pop rdi
je 0x4097d8
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4097e1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4097fa
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4097d1
jo 0x409800
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x4097de
jbe 0x40980f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x40982d
jbe 0x4097c0
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x409810
xor dword [rdi + 0x5f], ebx
jae 0x409853
jb 0x40985a
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409853
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40986c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409843
jo 0x409872
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x409850
jbe 0x409881
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4098ab
xor dword [rip + 0x6574495f], esi
jb 0x40989f
insb byte [rdi], dx
jae 0x4098b7
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40988d
xor byte [rdi + 0x5f], bl
movsxd rbp, dword [rdi + 0x70]
jns 0x4098c2
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4098cc
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x4098d4
xor dword [rbp + 0x4c], eax
xor byte [rbp + 0x53], al
je 0x4098ae
jb 0x4098e0
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x4098fd
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4098f7
xor dword [r11d], r14d
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x409900
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40990a
pop rdi
push r8
push rbx
je 0x4098e0
jo 0x40990f
imul esi, dword [rdx + 0x49], 0x5345636c
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5f], bl
js 0x409942
pop rdi
jo 0x409932
jb 0x409942
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40991d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40995e
push r11
je 0x409931
jo 0x409960
imul esi, dword [rdx + 0x49], 0x5345636c
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x409975
push rsp
jo 0x409978
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409968
jbe 0x409925
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40998e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409997
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40998b
push rbx
je 0x409979
jo 0x4099a8
imul esi, dword [rdx + 0x49], 0x4545636c
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4099bc
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4099c5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4099b9
push rbx
je 0x4099a7
jo 0x4099d6
imul esi, dword [rdx + 0x49], 0x4545636c
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x4099f3
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4099fd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409a06
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4099fa
push rbx
je 0x4099e8
jo 0x409a17
imul esi, dword [rdx + 0x49], 0x4545636c
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x55], bl
outsb dx, byte [rsi]
ja 0x409a3e
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x409a51
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409a51
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409a6a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409a41
jo 0x409a70
imul esi, dword [rdx + 0x49], 0x5345636c
je 0x409a4e
jbe 0x409a7f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x409a71
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409ab0
movsxd rbx, dword [rdi + 0x73]
je 0x409abe
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409ab9
je 0x409ace
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x409abb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409afa
movsxd rbx, dword [rdi + 0x73]
je 0x409b08
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409b03
je 0x409b18
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x409b01
movsxd r8, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rbp + 0x61], ch
imul ebp, dword [rsi], 0x74535a5f
xor al, 0x6d
outsd dx, dword [rsi]
jbe 0x409b3b
push r10
insb byte [rdi], dx
push rbx
je 0x409b10
jb 0x409b47
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409b4b
pop rdi
jb 0x409b4e
jb 0x409b52
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x409b68
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x409b36
xor bl, byte [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x409b6b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409b75
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x409b7d
pop rdi
xor dword [rbp + 0x50], eax
push rbx
je 0x409b58
jo 0x409b87
imul esi, dword [rdx + 0x49], 0x5345636c
xor bl, byte [rdi + 0x45]
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
add byte [rsi], ch
jae 0x409bba
insd dword [rdi], dx
je 0x409ba5
add byte [rsi], ch
jae 0x409bbd
jb 0x409bbf
add byte [rsi], ch
jae 0x409bb9
jae 0x409bc7
jb 0x409bc9
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x409bca
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x409bd8
outsb dx, byte cs:[esi]
jne 0x409ba6
jne 0x409be4
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x409bb4
push 0x687361
jns 0x409bfd
jae 0x409c0a
insd dword [rdi], dx
add byte [rsi], ch
jns 0x409c05
jae 0x409c0d
jb 0x409b9b
outsb dx, byte cs:[esi]
jne 0x409bce
jbe 0x409c07
jb 0x409c17
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x409bdb
jbe 0x409c14
jb 0x409c24
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x409c1f
insb byte [rdi], dx
jns 0x409c2e
add byte [rsi], ch
jb 0x409c29
insb byte [rdi], dx
jo 0x409c35
je 0x409bcb
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x409c04
outsd dx, dword [esi]
je 0x409bda
je 0x409c42
js 0x409c53
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x409c58
je 0x409c4e
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x409c71
jo 0x409c85
pop rdi
je 0x409c75
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x409c83
jns 0x409c24
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x409c9f
jns 0x409c30
push 0x63
jb 0x409c35
jns 0x409ca7
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x409cb1
je 0x409c47
je 0x409cad
add byte [rsi], ch
jae 0x409cc4
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x409c5b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x40
add byte [rax], al
add eax, 0
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 9], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4009], ah
add byte [rax], al
add byte [rax + 9], ah
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], cl
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], dl
add byte [rax], al
add byte [rax + 0xc], dl
add byte [rax], al
add byte [rax + 1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, 0x32
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
add byte [rax], al
add byte [rax], al
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax*2 + 0x40], ch
add byte [rax], al
lodsb al, byte [rsi]
add byte [r8], al
add byte [rax], al
add byte [rax], al
pop rsp
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rdx*2 + 0x40], dh
add byte [rax], al
mov ah, 0x55
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
pop rbp
add byte [rax], al
add byte [rax], al
add al, dh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add al, bh
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], cl
pop rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add al, bh
pop rdi
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
shl byte [rax + 0x60], 1
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40a392
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x9b
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rip + 0x8000000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x74], dh
add byte [rax], al
add byte [rbp + 0x26], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
