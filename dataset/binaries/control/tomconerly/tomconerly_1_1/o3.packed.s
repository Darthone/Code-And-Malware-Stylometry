call 0x401c00
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401a18
add ebx, ebx
je 0x4019ce
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401a06
cmp rbp, -4
ja 0x401a06
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4019ee
add ecx, 4
mov dl, byte [rax]
je 0x401a16
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401a06
ret
cld
pop r11
cmp r8b, 2
je 0x401a2e
jmp 0x401aab
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x401a3e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401a26
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401a56
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401a43
sub eax, 3
jb 0x401a74
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401aab
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401a9b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401a99
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401a88
cmp rbp, -0xd00
adc ecx, eax
call 0x4019da
jmp 0x401a2e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401b84
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401b22
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401b6e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401b41
push 0x3a707474
jne 0x401b9a
js 0x401b5a
jae 0x401b94
outsb dx, byte cs:[rsi]
je 0x401b53
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401bc1
jb 0x401bb3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401bde
jb 0x401bf1
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x213234
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x213234
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401abc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401be7
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401b95
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add dword [rax], eax
jmp rbp
call 0x706f1c8f
jb 0x401ca7
movsxd rbp, dword [rdi]
jae 0x401ca1
insb byte [rdi], dx
js 0x401ca7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401c87
cmp rsi, rcx
jae 0x401c8f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401c6e
cmp al, 0x8f
ja 0x401c6e
cmp byte [rsi - 2], 0xf
je 0x401c74
sub al, 0xe8
jg 0x401c71
push rdi
cmp al, 1
ja 0x401c5c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401c5f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401c8c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401ce3
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c2161
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401d27
mov al, 0xa
jmp 0x401d27
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401d03
inc ebx
mov al, 0
jmp 0x401d2b
mov al, 2
jmp 0x401d2b
mov al, 3
jmp 0x401d2b
mov al, 0x3c
jmp 0x401d2b
push rcx
rcr ah, 1
fstp st(7)
jle 0x401d6c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401d7e
jg 0x401d70
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a74f3
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401dca
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6f47
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401dd2
cmp esi, 0x21585055
jne 0x401dd6
jge 0x401dc8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401dcb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401dcf
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401e7b
pop rcx
or al, 0x3b
jb 0x401e81
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401df3
jmp 0x401df5
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661d36
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53f7e
in eax, dx
jg 0x401e2d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401e73
mov bh, 0x2a
add edi, 0x10
jmp 0x401e70
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401ead
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401ee9
jne 0x401f00
fstpnce st(6), st(0)
jle 0x401ec9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401eff
jrcxz 0x401f33
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1be97
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401fb2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401f72
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58296547
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401fe5
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401f7f
and ecx, 7
or al, 0xeb
jae 0x401fea
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40201f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40205d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x402016
push rax
call 0xffffffff868d1d03
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x402020
std
cmp edi, esi
xchg eax, edi
jle 0x402075
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c96601
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x402073
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x402061
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40208a
js 0x4020ca
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40215c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad3397
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x40217d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x402182
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21c34
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x402110
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
je 0x4021a4
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dl
movabs al, byte [0x9282]
add byte [rax], cl
call qword [rax + 0x1a]
add byte [rax], al
cmp byte [rax], cl
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x402236
je 0x40223f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x402208
mov dh, 0x7d
jbe 0x402207
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x402240
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x4b80006], bl
add byte [rsi + 7], dh
enter -0x6fd9, 0xf
or byte [rax], al
movabs al, byte [0x7c813e408600009]
or al, byte [rax]
js 0x402233
add al, bh
or ecx, edi
add edx, esi
add ecx, dword [rax + rax]
and byte [rdx], cl
or eax, 0x7d0b3000
add bh, cl
add byte [rsi], cl
add byte [rax + 0xf], al
add byte [rdi - 0x7f8d4fd9], dl
mov edi, 0x111710
add esp, esp
fsubr st(4)
sub ch, bh
adc al, byte [rax]
pop rax
sub eax, dword [rax + 0x13f201fc]
add ah, dl
adc al, 0
cmp eax, 0xb027c860
xor dl, byte [rip + 0x1617]
insb byte [rdi], dx
adc ecx, eax
add byte [rax], cl
sbb byte [rdi + 0x3f], al
fdiv dword [rdx - 0x80]
sbb dword [rax + 0x17], eax
sbb dl, byte [rbx]
enter -0x37ed, 0
cwde
sbb eax, dword [rax]
test al, 0x1c
and edi, dword [rcx + 0x37]
adc eax, dword gs:[rcx]
add al, 0
int1
call rbx
jo 0x4022fc
mov cl, 0xc
sbb edi, dword [rdi - 0x36fd68e7]
and byte [rbx], dl
jbe 0x402243
sbb esp, eax
mov ebx, 0x2e0c8390
and byte [rax], bl
pop rdi
and al, byte [rbx + 0x1a7165d]
push rbx
mov ebx, 0x477a4f12
push rdi
xchg byte fs:[rdi - 0x5cfa285b], dl
jrcxz 0x4022d9
stosd dword [rdi], eax
enter -0x1037, -0x79
add al, 1
and byte [rdi], bh
ja 0x402270
pop rsi
add dword [rax + 0x1d72f1f], edx
cmp al, 0x79
jbe 0x40227b
shr byte [rdx], 0x17
sub al, byte [rax]
adc al, 2
or dword [r11 + 0x670b009c], eax
xor ebx, esi
test esp, ebp
js 0x40232f
xchg eax, edx
jnp 0x402287
test dword [rax], esi
add r8b, byte [rip - 0x39a89dce]
out 0x60, eax
insb byte [rdi], dx
sbb byte [rbx + 0x67142f76], dil
xchg dword [rdi], edx
xor ah, byte [rdx + 0x53]
ret 0x9a4f
mov r15b, 0x37
sub byte [rsp + rdi*4 + 0x75], 4
xchg dword [rax], esp
movabs dword [0x27371243c9bdf92f], eax
push rsi
jns 0x402341
sub al, 0x76
and dword [rax + rsi*2], edi
mov bl, 0x2f
add ah, ch
leave
shr dword [rsi + 0x1d0047e6], -0x7f
add dh, byte [rdi + 8]
mov ebx, 0x329f3b2
add byte [rax], bh
nop
adc r12b, byte [rax + 0x21]
or byte fs:[rcx], bl
jnp 0x4022fd
or byte [rbx + 0x2adceb2], bh
xchg eax, edi
jmp 0xf0e64a3
or byte [rdi], al
and edi, edx
je 0x4023db
jne 0x402394
enter 0x41b, 0x37
adc edi, ebx
mov ebx, 0x4360e40
pop rdi
add al, 0x59
add dword [r9 + r12*2 + 0x10af7308], r12d
iretd
sahf
cmp al, 0xcb
add byte [rdx], 0x25
add dword [rdi + 7], esi
add eax, 0x36b29b06
add bl, byte [rdx]
adc r10, qword [r15]
movabs al, byte [0x20d705204876793b]
ja 0x4023ae
retf 0x73a
xor byte [rip - 0x40fac369], al
and dword [rbx - 0x28], eax
add eax, 0xc8821758
nop
pushfq
sbb eax, 0xd7b05f02
fmul st(1)
mov bl, 0x43
out dx, eax
and edx, ebx
adc byte [rsi + 0xe], cl
xor ch, byte [rsi - 0x5040db30]
iretd
sahf
or al, 0x72
cmp al, byte [rdi]
sbb byte [rbp + 0x77c5f04], al
sub ecx, edi
pop rsi
and bl, dl
out dx, eax
sbb bl, al
nop
leave
fiadd dword [rdi]
sti
mov al, 0x43
or byte [rdi], dl
loope 0x402431
adc dword [rcx], ebx
cmp dword [rdi], esi
and dword [rdi + rax], ecx
jle 0x402395
cmp dword [rdx], ebp
xchg eax, edi
movsxd rsi, dword [rdx + 0x74]
jae 0x4023fd
ljmp [rip + 0x2e6666dc]
movsxd rax, dword [rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x402426
outsd dx, dword [rsi]
in eax, dx
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40246b
outsd dx, dword fs:[rsi]
pop rdi
jle 0x40244b
outsd dx, dword [rsi]
outsd dx, dword [rsi]
or esp, dword [rdx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4024bb
jne 0x4024d7
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4024d0
not byte gs:[rdi]
fcomp st(7)
sub dword [rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xed08
test byte [rbp + 0x617272fe], 0x79
pop rdi
jb 0x4024fd
add byte [rsi + 0xa], ah
insd dword [rdi], dx
and byte gs:[rbx + rbx + 0x6d75f730], ch
insd dword [rdi], dx
jns 0x4024c5
or eax, 0x2a74295f
lodsd eax, dword [rsi]
mov ebp, 0x9c4226dd
jo 0x402510
and al, 0x5a
pop rdx
xchg eax, ebx
imul edi, dword [rsi + 0x61fedf6d], 0x534e6563
je 0x4024e8
xor esp, dword [rbx + 0x78]
js 0x4024e7
add byte [rdx], dh
jae 0x402524
movsxd rbx, dword [rdi - 0x24]
pop rbx
jnp 0x40249c
test eax, 0x49673772
movsxd rbx, dword [rcx]
adc ah, byte [rbx + 0x68]
mov ch, 0xdb
fcomp st(0), st(3)
jae 0x4024e5
push r11
add al, 0
movsxd rax, ebx
mov ecx, 0x457b7fff
xor dword [rcx], edi
xor eax, 0x54455250
push rsp
pop rcx
pop rdi
push rbp
push r12
ja 0x402536
not dh
pop rax
xor eax, 0x6b636532
push rsi
insb byte [rdi], dx
add ch, bl
lodsd eax, dword [rsi]
mov al, 0x59
or byte ss:[rcx - 0x3a], ch
outsd dx, dword [rsi]
ja 0x40256d
push -0x29f58c7b
outsd dx, dword [rsi]
jo 0x402560
sub al, 0x67
outsb dx, byte [rsi]
jne 0x4024be
jmp 0x402582
imul esi, dword [rax + 0x6e], 0x692b6d18
imul esp, esi, -0x13
mov dh, 0xa1
push r8
xor al, 0x34
jo 0x402599
jb 0x40257f
insb byte [rdi], dx
scasd eax, dword [rdi]
jae 0x4025b9
in eax, dx
je 0x402573
jbe 0x4024d8
adc eax, 0x725f3353
add eax, 0x76c37545
imul ebp, dword [rdi - 0x56], 0x30
pop rdi
xor eax, 0x31734c3a
movsq qword [rdi], qword ptr [rsi]
outsd dx, dword [rsi]
mov bh, 0xd8
test dword [rcx + 0x1d437373], eax
jbe 0x4025b5
sub al, byte [rdx + 0x5f]
push rsp
outsd dx, dword [rsi]
test dword [rdi + 0x21], ebp
push rsp
xor dword [rdi + 0x2e], ebx
ret
push rbp
xor eax, 0xb20fe534
fcom dword [rcx]
cmp al, 0x42
xor eax, 0x345ab5e1
fild word [rsi + 0x58]
imul edx, dword [rax + 0x520c1eb3], 0x41
sahf
in al, dx
int1
outsb dx, byte [rsi]
xchg dword [rsi + 0x44], ecx
or eax, 0x4e470b34
push rbp
push qword [rdi + 0x20485b07]
push rdx
adc al, byte [rdi + 0x4c]
pop rdi
test al, r14b
mov esi, 0x904853b5
sub r11b, r12b
fist dword [rsi + 0x58]
fsub dword [rax + rdx + 0x73]
je 0x4025d5
jrcxz 0x40254b
mov ebx, 0x454e59db
sbb ebp, dword [r9 + r13*2 + 0x62]
mov dword [rbx + 0x73], esp
jne 0x40261a
sub al, 0x5c
mov ss, word [rax]
push rsp
xor dh, byte [rsp + rsi*2]
push -0x5e9288ad
mov ebp, 0x3675012d
outsd dx, dword [rsi]
pop di
movsd dword [rdi], dword ptr [rsi]
xor dh, ch
outsd dx, dword [rsi]
ljmp [rbp + 0x74]
push rax
movsxd rdi, dword [r10 + 0x40]
jne 0x402646
pop r8
pop rax
pop rdi
xor ebp, dword [rcx - 0x6a3ed5c9]
cmpsd dword [rsi], dword ptr [rdi]
xor ah, al
test edx, edx
mov edi, 0x6d676959
add ebx, dword [rbx + 0x5f764aea]
push rdx
and bh, bh
push rsp
sub byte [rbx + rax*2], cl
push rbp
jp 0x40263f
pop rdx
insb byte [rdi], dx
push rax
jbe 0x4025d5
jnp 0x402658
jl 0x402663
sbb esi, dword [rdx]
push bp
fst st(3)
jbe 0x4025e5
insb byte [rdi], dx
sbb bl, byte [rdi + 0x32]
xchg eax, ebx
jo 0x4026b8
je 0x402676
mov dh, 0x6c
imul edi, dword [rbx + 0x34196b76], 0x5a
test al, 0x4b
insd dword [rdi], dx
and dword [rax - 0x55], eax
xor byte [r15], r11b
xor byte [rsp + rdx*4], ah
outsb dx, byte [rsi]
nop
push r10
add r14b, byte [r9]
and dword [rbx], edi
int3
xchg byte [rbp - 0x41], al
fisttp qword [rsp + rbp*4 + 0x1c194b76]
adc cl, byte [rcx + 0x54]
push rcx
scasb al, byte [rdi]
int1
xlatb
mov dh, 0xc
add al, 0x54
imul ebx, dword [rbx], 0xbadda170
pop r15
jne 0x402663
mov esi, 0xf6056373
mov sil, 0x7e
push ax
cmp eax, 0xb669383b
mov ch, 0x54
movsb byte [rdi], byte ptr [rsi]
mov dword [rcx], esp
xor eax, dword [rax]
jns 0x402648
insd dword [rdi], dx
and eax, 0x1e496a64
push 0x28d36165
leave
and eax, 0x191e2107
out dx, al
int1
imul edx, dword [rbx + 0x43], 0x90325421
movabs byte [0x89aa6434ad6de3c5], al
shl dword [rsp + rbp*4 + 0x7c], 1
scasb al, byte [rdi]
jnp 0x4026f6
movabs eax, dword [0xbc687090bb44620f]
push rsp
mov edi, 0xc61b61de
fnstenv [rdi + rdx*8]
cmp dword [rsp + rdi*8 - 0x1e6f3e99], esp
fcomp dword [rdx - 0x608df488]
and ebx, edx
ret 0x8488
in al, dx
sub dword [rax + 0x3a], esi
mov r14b, 0x12
pop rsp
push r8
in eax, dx
push rsp
rcl byte [rip + 0x42272d1e], 1
cmpsd dword [rsi], dword ptr [rdi]
jne 0x402696
lodsb al, byte [rsi]
xchg eax, ebp
mov ebp, 0x636d4553
push rsi
iretd
add byte [rdx + 0x69d3f4eb], al
paddq mm6, qword [rax + 0xac02d27]
cli
xor ch, byte [rsi - 0x4c]
push rsi
sub cl, byte [rcx + 0x69780444]
mov dl, 6
scasb al, byte [rdi]
or dword [rbx + 0x16], 0xb3068564
pop rcx
or byte [rdx], al
mov ecx, dword [rbp + 0x542922be]
out 0x6d, al
jne 0x4027b4
jmp 0xffffffffe5b4c847
sti
pop rdi
imul esi, dword [rbp + 0x6257b0d7], -0x46
movabs byte [0x5742076ec2b40bb5], al
jbe 0x40278b
sub ebx, ebx
mov ch, 0x5e
shl byte [rdi], 0x82
pop r15
xor dword [rdi + 0x7e], esp
outsb dx, byte [rsi]
ja 0x4027a7
scasb al, byte [rdi]
lodsd eax, dword [rsi]
insb byte [rdi], dx
or edx, dword [rdx]
push rbp
jge 0x4027d6
fld dword [rax - 0x10e5ea25]
pop rsi
sbb eax, dword [rbx + 0x43]
mov ebx, 0x3fad1b8c
or ecx, dword [rax + rsi*2]
jns 0x402766
xor dword [rdx], ebp
outsb dx, byte [rsi]
mov ebx, 0x464257a1
jae 0x40280a
insd dword [rdi], dx
imul esp, dword [rdx + 7], -0x65
imul ebx, eax, -0x37
je 0x40280d
push 0x707bda09
mov al, 0xad
pop rbx
outsb dx, byte [rsi]
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jae 0x4027d7
adc eax, 0xbd6b0d67
je 0x4027f4
movsd dword [rdi], dword ptr [rsi]
jne 0x4027e6
sub eax, 0xcc0d3b69
mov ebp, 0x38e816b5
or dword [rcx + rdi*2 + 0x6e], esp
int3
loope 0x402798
fiadd dword [rbp + 0x19]
jbe 0x40278f
push -0x1f5ea1f4
pop rdi
sbb edi, dword [rbx + 0x7a]
sub byte [rdi + 0x7a], ah
or eax, ecx
or dword [rax + 0xaa17274], ecx
paddusb mm4, mm6
mov dh, 0x2c
outsd dx, dword [rsi]
or byte [rcx + 0x78], ch
add eax, 0x23c58333
je 0x402818
outsd dx, dword [rsi]
adc al, 0x2e
push -0x597a9796
outsb dx, byte [rsi]
fldenv [rdx + rsi*2 + 0xd]
pop rbp
movsxd rbx, dword [rdi - 0x3f343488]
jne 0x4027b8
jo 0x402790
mov ebp, 0x5890116c
add ebx, 0x6a0b4366
movabs eax, dword fs:[0x6800ad36b42decd9]
jnp 0x402882
lodsd eax, dword [rsi]
sbb dword [rdx - 0x52], ebp
sbb al, 4
rsqrtps xmm7, xmm5
xor al, 0xc1
add byte [rax + 0x1570000], dh
fmul qword [rax + rbx*2 + 0x7473f02]
xchg byte [rax + rcx*2 - 0x32], ah
sbb al, 1
and esp, dword [rax + rdx*4 + 1]
imul eax, dword [rdi], 0x92195454
and dword [rcx], ebx
and byte [rcx + rsi], al
sbb dword [rax + rdx*4 + 0x21], esp
je 0x4028cc
and al, 0x1c
sub byte [rsi + rsi*8 - 1], al
ljmp [rdi - 0x68]
or al, 0x32
and al, 0x83
cwde
add eax, 0xc126c308
nop
pushfq
sbb eax, 0xc0c09064
clc
add ebx, edi
wait
sbb byte [rsi + 3], dl
ret 0x149b
sysret
xchg eax, edx
out dx, al
and bh, byte [rcx - 0x42]
add bl, byte [rsi - 0x41]
push qword [rdx - 0xa]
mov edi, 0x6437482a
add al, byte [r15]
imul edi, dword [rdi], -2
enter -0x6467, 0xc
movabs al, byte [0x6326ca6e9c0a707]
jp 0x402903
add al, 0x61
outsd dx, dword [rsi]
push rdx
sub al, 0x87
out 0x60, eax
push rdi
inc dword [rdi + rdi - 0x37cdf37d]
js 0x402943
add byte [rcx + rax + 0x190192e4], 0x8e
adc edi, dword [rcx + rbx*2 + 0x3f061905]
nop
or eax, 0x1aff2725
mov dword [rdi], edi
cmp ecx, eax
mov r15b, r15b
jo 0x4028fb
and dword [rbx], ebx
mov dl, 0x21
adc byte [rdi], al
xchg eax, esp
add eax, 0x27159b86
xchg eax, ebx
and dword [rbx], edi
mov dl, 0xf
popfq
insb byte [rdi], dx
cmp dword [rbx + rsi*2], 0x1c527f07
wait
add al, 0x21
cmp dword [rbx + 0x434907df], esp
leave
cdq
dec dword [rcx]
test eax, 0x8320e4bf
or eax, 0x4aa03fa0
add eax, dword [rsp - 0x4edfd1b8]
and eax, 0xdf426e67
jg 0x40299d
int 0x8a
nop
or al, 0xbf
out dx, eax
jbe 0x4028ca
cmp al, 0xc1
jl 0x402942
leave
sub al, 0x37
add dword [rdx + 0x17], 0xba697f07
movabs eax, dword [0xbc20030e0edba8e4]
sbb dword [rcx], esi
push rdi
mov edi, 0x177480c8
out 0x3f, eax
psubb mm6, qword [rdx - 0x7cdfbc9]
xchg eax, ebx
add eax, 0x4fc524d8
outsb dx, byte [rsi]
pop rbx
sar al, cl
wait
insb byte [rdi], dx
leave
pop rcx
jg 0x40296e
jg 0x402990
enter -0x6f4a, 0x41
cwde
mov edi, 0x45c8393f
xor bh, byte [rdi]
or byte [rcx], al
add dword [rdi - 0x7d], esp
add eax, 0x3f404f21
cwde
leave
nop
or al, 0x25
or bl, byte [rax - 0x46636bc9]
call qword [rax]
adc byte [rdi], bh
wait
or al, 0x48
or byte [rax - 0x27c900f9], ch
push rax
jb 0x4029bb
adc eax, 0x8517307f
nop
ret
xor al, 0x76
retf -0x789a
adc dword [rbx], edi
push rcx
jg 0x402a35
and bh, byte [rcx + 0x1e]
add dword [rbx + 0x59e4e600], edi
scasd eax, dword [rdi]
loopne 0x402a16
mov eax, 0xc21c1f08
nop
xor eax, 0x49987f09
add byte [rax + 0x83e9e48], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 1], cl
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip + 0x3e080216], ecx
movsb byte [rdi], byte ptr [rsi]
jle 0x402a76
cmp byte [rbx + 0x1a50812b], cl
add byte [rax], al
cmp byte [rax], cl
add byte [rax], al
clc
pop rdx
add byte [rax], al
add qword [r8], rax
hlt
add byte [rax], al
add bh, bh
