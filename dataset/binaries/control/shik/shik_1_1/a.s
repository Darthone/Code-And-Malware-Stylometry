xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60311f
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x401160
mov eax, 0
test rax, rax
je 0x401160
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x4011a8
mov eax, 0
test rax, rax
je 0x4011a8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x202079], 0
jne 0x4011ca
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x202066], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x4011e0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x4011db
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x4024e8
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x4024eb
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x4024ef
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x4024f3
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x4024f7
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov eax, dword [rax]
mov esi, eax
mov edi, 0x4024e8
mov eax, 0
call sym.imp.printf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rax
mov edi, 0x4024eb
mov eax, 0
call sym.imp.printf
nop
leave
ret
push rbp
mov rbp, rsp
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x78
mov qword [rbp - 0x68], rdi
mov rcx, rsi
mov eax, edx
mov qword [rbp - 0x78], rcx
mov dword [rbp - 0x70], eax
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x78]
mov esi, 0
mov rdi, rax
call sym.std::array_int_3ul_::operator__
mov ebx, dword [rax]
lea rax, [rbp - 0x78]
mov esi, 1
mov rdi, rax
call sym.std::array_int_3ul_::operator__
mov eax, dword [rax]
add ebx, eax
lea rax, [rbp - 0x78]
mov esi, 2
mov rdi, rax
call sym.std::array_int_3ul_::operator__
mov eax, dword [rax]
add eax, ebx
mov dword [rbp - 0x44], eax
cmp dword [rbp - 0x44], 0
jg 0x401392
mov ecx, str.std::__cxx11::string_greedy_std::array_int__3ul__
mov edx, 0x6d
mov esi, str.sorted_code_control_shik_shik_1_1_pb.cpp
mov edi, 0x402529
call sym.imp.__assert_fail
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x400fa0
mov dword [rbp - 0x54], 0xffffffff
mov dword [rbp - 0x50], 0
mov eax, dword [rbp - 0x50]
cmp eax, dword [rbp - 0x44]
jge 0x4014d2
mov dword [rbp - 0x4c], 0xffffffff
mov dword [rbp - 0x48], 0
cmp dword [rbp - 0x48], 2
jg 0x401450
mov eax, dword [rbp - 0x48]
cmp eax, dword [rbp - 0x54]
je 0x401438
mov eax, dword [rbp - 0x48]
movsxd rdx, eax
lea rax, [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::array_int_3ul_::operator__
mov eax, dword [rax]
test eax, eax
je 0x401438
cmp dword [rbp - 0x4c], -1
je 0x401431
cmp dword [rbp - 0x50], 0
jle 0x401438
mov eax, dword [rbp - 0x48]
movsxd rdx, eax
lea rax, [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::array_int_3ul_::operator__
mov ebx, dword [rax]
mov eax, dword [rbp - 0x4c]
movsxd rdx, eax
lea rax, [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::array_int_3ul_::operator__
mov eax, dword [rax]
cmp ebx, eax
jle 0x401438
mov eax, 1
jmp 0x40143d
mov eax, 0
test al, al
je 0x401447
mov eax, dword [rbp - 0x48]
mov dword [rbp - 0x4c], eax
add dword [rbp - 0x48], 1
jmp 0x4013c6
cmp dword [rbp - 0x4c], -1
jne 0x401488
lea rax, [rbp - 0x55]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x55]
mov rax, qword [rbp - 0x68]
mov esi, 0x40252d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x55]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401576
mov eax, dword [rbp - 0x4c]
add eax, eax
cdqe
movzx eax, byte [rax + str.ROYGBV]
movsx edx, al
lea rax, [rbp - 0x40]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
mov eax, dword [rbp - 0x4c]
movsxd rdx, eax
lea rax, [rbp - 0x78]
mov rsi, rdx
mov rdi, rax
call sym.std::array_int_3ul_::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov eax, dword [rbp - 0x4c]
mov dword [rbp - 0x54], eax
add dword [rbp - 0x50], 1
jmp 0x4013ac
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp eax, dword [rbp - 0x44]
je 0x4014fc
mov ecx, str.std::__cxx11::string_greedy_std::array_int__3ul__
mov edx, 0x78
mov esi, str.sorted_code_control_shik_shik_1_1_pb.cpp
mov edi, str.SZ_s___n
call sym.imp.__assert_fail
lea rax, [rbp - 0x40]
mov esi, 0
mov rdi, rax
call 0x4010b0
movzx ebx, byte [rax]
mov eax, dword [rbp - 0x44]
sub eax, 1
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x4010b0
movzx eax, byte [rax]
cmp bl, al
sete al
test al, al
je 0x401563
lea rax, [rbp - 0x55]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x55]
mov rax, qword [rbp - 0x68]
mov esi, 0x40252d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x55]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401576
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call 0x400fb0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, qword [rbp - 0x68]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4015d8
jmp 0x4015d3
mov rbx, rax
lea rax, [rbp - 0x55]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4015bc
mov rbx, rax
lea rax, [rbp - 0x55]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4015bc
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x78
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov edi, obj.n
call sym.R_int_
mov dword [rbp - 4], 0
cmp dword [rbp - 4], 5
jg 0x40161b
mov eax, dword [rbp - 4]
cdqe
shl rax, 2
add rax, obj.c
mov rdi, rax
call sym.R_int_
add dword [rbp - 4], 1
jmp 0x4015f8
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov dword [rbp - 0x34], edx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call 0x400fa0
mov dword [rbp - 0x1c], 0
mov eax, dword [rbp - 0x1c]
cmp eax, dword [rbp - 0x34]
jge 0x40168f
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call 0x400f80
add dword [rbp - 0x1c], 1
jmp 0x401654
mov rbx, rax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
mov rax, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4016a8
call sym.imp.__stack_chk_fail
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x168
mov qword [rbp - 0x168], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edx, dword [rip + 0x201b7d]
mov eax, dword [rip + 0x201b83]
add edx, eax
mov eax, dword [rip + 0x201b5b]
cmp edx, eax
jne 0x40176d
mov edx, dword [rip + 0x201b61]
mov eax, dword [rip + 0x201b67]
cmp edx, eax
jne 0x40176d
mov eax, dword [rip + 0x201b3d]
mov edx, eax
shr edx, 0x1f
add eax, edx
sar eax, 1
mov ebx, eax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x140]
lea rax, [rbp - 0x40]
mov esi, 0x402537
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
mov rax, qword [rbp - 0x168]
lea rcx, [rbp - 0x40]
mov edx, ebx
mov rsi, rcx
mov rdi, rax
call sym.rep
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401f0c
mov edx, dword [rip + 0x201ae9]
mov eax, dword [rip + 0x201ad7]
add edx, eax
mov eax, dword [rip + 0x201abf]
cmp edx, eax
jne 0x401809
mov edx, dword [rip + 0x201acd]
mov eax, dword [rip + 0x201abb]
cmp edx, eax
jne 0x401809
mov eax, dword [rip + 0x201aa1]
mov edx, eax
shr edx, 0x1f
add eax, edx
sar eax, 1
mov ebx, eax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x140]
lea rax, [rbp - 0x40]
mov esi, 0x40253a
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
mov rax, qword [rbp - 0x168]
lea rcx, [rbp - 0x40]
mov edx, ebx
mov rsi, rcx
mov rdi, rax
call sym.rep
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401f0c
mov edx, dword [rip + 0x201a55]
mov eax, dword [rip + 0x201a43]
add edx, eax
mov eax, dword [rip + 0x201a23]
cmp edx, eax
jne 0x4018a5
mov edx, dword [rip + 0x201a39]
mov eax, dword [rip + 0x201a27]
cmp edx, eax
jne 0x4018a5
mov eax, dword [rip + 0x201a05]
mov edx, eax
shr edx, 0x1f
add eax, edx
sar eax, 1
mov ebx, eax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x140]
lea rax, [rbp - 0x40]
mov esi, 0x40253d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
mov rax, qword [rbp - 0x168]
lea rcx, [rbp - 0x40]
mov edx, ebx
mov rsi, rcx
mov rdi, rax
call sym.rep
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401f0c
mov eax, dword [rip + 0x2019a9]
test eax, eax
je 0x4018fd
mov edx, dword [rip + 0x20199f]
mov eax, dword [rip + 0x2019a5]
cmp edx, eax
jl 0x4018fd
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x140]
mov rax, qword [rbp - 0x168]
mov esi, 0x40252d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401f0c
mov eax, dword [rip + 0x201959]
test eax, eax
je 0x401955
mov edx, dword [rip + 0x20194f]
mov eax, dword [rip + 0x20193d]
cmp edx, eax
jl 0x401955
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x140]
mov rax, qword [rbp - 0x168]
mov esi, 0x40252d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401f0c
mov eax, dword [rip + 0x201909]
test eax, eax
je 0x4019ad
mov edx, dword [rip + 0x2018ff]
mov eax, dword [rip + 0x2018ed]
cmp edx, eax
jl 0x4019ad
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x140]
mov rax, qword [rbp - 0x168]
mov esi, 0x40252d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401f0c
mov edx, dword [rip + 0x2018ad]
mov eax, dword [rip + 0x20189b]
sub edx, eax
mov eax, edx
mov dword [rip + 0x20189d], eax
mov edx, dword [rip + 0x201887]
mov eax, dword [rip + 0x20188d]
sub edx, eax
mov eax, edx
mov dword [rip + 0x201877], eax
mov edx, dword [rip + 0x201879]
mov eax, dword [rip + 0x20187f]
sub edx, eax
mov eax, edx
mov dword [rip + 0x201869], eax
mov eax, dword [rip + 0x20185b]
mov dword [rbp - 0x130], eax
mov eax, dword [rip + 0x201857]
mov dword [rbp - 0x12c], eax
mov eax, dword [rip + 0x201853]
mov dword [rbp - 0x128], eax
lea rax, [rbp - 0x120]
mov rcx, qword [rbp - 0x130]
mov edx, dword [rbp - 0x128]
mov rsi, rcx
mov rdi, rax
call sym.greedy_abi:cxx11_
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::empty
test al, al
je 0x401a63
lea rdx, [rbp - 0x120]
mov rax, qword [rbp - 0x168]
mov rsi, rdx
mov rdi, rax
call 0x400fb0
jmp 0x401d40
lea rax, [rbp - 0x100]
mov rdi, rax
call 0x400fa0
lea rax, [rbp - 0x120]
mov qword [rbp - 0x138], rax
mov rax, qword [rbp - 0x138]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::begin
mov qword [rbp - 0x150], rax
mov rax, qword [rbp - 0x138]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::end
mov qword [rbp - 0x140], rax
lea rdx, [rbp - 0x140]
lea rax, [rbp - 0x150]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
test al, al
je 0x401d18
lea rax, [rbp - 0x150]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
movzx eax, byte [rax]
mov byte [rbp - 0x151], al
movsx edx, byte [rbp - 0x151]
lea rax, [rbp - 0x100]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::push_back
cmp byte [rbp - 0x151], 0x42
jne 0x401bb3
mov eax, dword [rip + 0x201744]
test eax, eax
je 0x401bb3
mov ebx, dword [rip + 0x201736]
lea rax, [rbp - 0x152]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x152]
lea rax, [rbp - 0xe0]
mov esi, 0x402537
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xc0]
lea rcx, [rbp - 0xe0]
mov edx, ebx
mov rsi, rcx
mov rdi, rax
call sym.rep
lea rdx, [rbp - 0xc0]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call 0x400f80
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x152]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rip + 0x2016a1], 0
cmp byte [rbp - 0x151], 0x52
jne 0x401c60
mov eax, dword [rip + 0x201696]
test eax, eax
je 0x401c60
mov ebx, dword [rip + 0x201688]
lea rax, [rbp - 0x152]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x152]
lea rax, [rbp - 0xa0]
mov esi, 0x40253a
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x80]
lea rcx, [rbp - 0xa0]
mov edx, ebx
mov rsi, rcx
mov rdi, rax
call sym.rep
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call 0x400f80
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x152]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rip + 0x2015fc], 0
cmp byte [rbp - 0x151], 0x59
jne 0x401d04
mov eax, dword [rip + 0x2015f1]
test eax, eax
je 0x401d04
mov ebx, dword [rip + 0x2015e3]
lea rax, [rbp - 0x152]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x152]
lea rax, [rbp - 0x60]
mov esi, 0x40253d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x40]
lea rcx, [rbp - 0x60]
mov edx, ebx
mov rsi, rcx
mov rdi, rax
call sym.rep
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x100]
mov rsi, rdx
mov rdi, rax
call 0x400f80
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x152]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rip + 0x201560], 0
lea rax, [rbp - 0x150]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator__
jmp 0x401aac
lea rdx, [rbp - 0x100]
mov rax, qword [rbp - 0x168]
mov rsi, rdx
mov rdi, rax
call 0x400fb0
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401f0c
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401d68
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401d96
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401dc4
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401e4c
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401e60
mov rbx, rax
lea rax, [rbp - 0x152]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401ee3
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401e85
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401e99
mov rbx, rax
lea rax, [rbp - 0x152]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401ee3
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401ebe
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401ecf
mov rbx, rax
lea rax, [rbp - 0x152]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401ee3
mov rbx, rax
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x168]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401f27
call sym.imp.__stack_chk_fail
add rsp, 0x168
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x78
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rip + 0x201300]
mov qword [rbp - 0x60], rax
mov rax, qword [rip + 0x2012fd]
mov qword [rbp - 0x58], rax
mov rax, qword [rip + 0x2012fa]
mov qword [rbp - 0x50], rax
mov dword [rip + 0x2012cc], 0
mov dword [rbp - 0x7c], 0
cmp dword [rbp - 0x7c], 5
jg 0x401fa1
mov eax, dword [rbp - 0x7c]
cdqe
mov edx, dword [rax*4 + obj.c]
mov eax, dword [rip + 0x2012ad]
add eax, edx
mov dword [rip + 0x2012a5], eax
add dword [rbp - 0x7c], 1
jmp 0x401f7b
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.check_abi:cxx11_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::empty
test al, al
je 0x401fd3
lea rax, [rbp - 0x40]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
jmp 0x402137
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov edx, eax
mov eax, dword [rip + 0x201259]
cmp edx, eax
je 0x402004
mov ecx, str.void_solve__
mov edx, 0xa7
mov esi, str.sorted_code_control_shik_shik_1_1_pb.cpp
mov edi, str.SZ_ans___n
call sym.imp.__assert_fail
mov dword [rbp - 0x78], 0
mov eax, dword [rip + 0x20122f]
cmp dword [rbp - 0x78], eax
jge 0x402077
mov eax, dword [rbp - 0x78]
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x4010b0
movzx ebx, byte [rax]
mov eax, dword [rbp - 0x78]
add eax, 1
mov ecx, dword [rip + 0x201206]
cdq
idiv ecx
mov eax, edx
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x4010b0
movzx eax, byte [rax]
cmp bl, al
jne 0x402071
mov ecx, str.void_solve__
mov edx, 0xa8
mov esi, str.sorted_code_control_shik_shik_1_1_pb.cpp
mov edi, str.ans_i___ans__i_1__n_
call sym.imp.__assert_fail
add dword [rbp - 0x78], 1
jmp 0x40200b
mov dword [rbp - 0x74], 0
mov eax, dword [rip + 0x2011bc]
cmp dword [rbp - 0x74], eax
jge 0x4020fe
mov eax, dword [rbp - 0x74]
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x4010b0
movzx eax, byte [rax]
movsx eax, al
mov esi, eax
mov edi, str.ROYGBV
call sym.imp.strchr
mov qword [rbp - 0x68], rax
cmp qword [rbp - 0x68], 0
jne 0x4020d4
mov ecx, str.void_solve__
mov edx, 0xab
mov esi, str.sorted_code_control_shik_shik_1_1_pb.cpp
mov edi, 0x40256b
call sym.imp.__assert_fail
mov rax, qword [rbp - 0x68]
mov edx, str.ROYGBV
sub rax, rdx
mov dword [rbp - 0x6c], eax
mov eax, dword [rbp - 0x6c]
cdqe
mov eax, dword [rbp + rax*4 - 0x60]
lea edx, [rax - 1]
mov eax, dword [rbp - 0x6c]
cdqe
mov dword [rbp + rax*4 - 0x60], edx
add dword [rbp - 0x74], 1
jmp 0x40207e
mov dword [rbp - 0x70], 0
cmp dword [rbp - 0x70], 5
jg 0x402137
mov eax, dword [rbp - 0x70]
cdqe
mov eax, dword [rbp + rax*4 - 0x60]
test eax, eax
je 0x402131
mov ecx, str.void_solve__
mov edx, 0xaf
mov esi, str.sorted_code_control_shik_shik_1_1_pb.cpp
mov edi, str.oc_i___0
call sym.imp.__assert_fail
add dword [rbp - 0x70], 1
jmp 0x402105
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.W_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402180
jmp 0x40217b
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x78
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov dword [rbp - 0x14], edi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.R_int_
mov dword [rbp - 0xc], 1
mov eax, dword [rbp - 0x10]
cmp dword [rbp - 0xc], eax
jg 0x402205
call sym.input
cmp dword [rbp - 0x14], 2
jne 0x4021e3
mov rax, qword [rbp - 0x20]
add rax, 8
mov rax, qword [rax]
mov rdi, rax
call sym.imp.atoi
cmp eax, dword [rbp - 0xc]
jne 0x4021fe
mov eax, dword [rbp - 0xc]
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
call sym.solve
jmp 0x4021ff
nop
add dword [rbp - 0xc], 1
jmp 0x4021b8
mov eax, 0
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x40221e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x40225b
cmp dword [rbp - 8], 0xffff
jne 0x40225b
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
lea rdx, [rax*4]
mov rax, qword [rbp - 8]
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::__array_traits_int_3ul_::_S_ref
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym._R
call sym.R
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_char__std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 1]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym._W_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov edi, 0xa
call sym.imp.putchar
call sym.W
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, obj.std::cout
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
nop
leave
ret
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x200a36]
push rbp
lea rbp, [rip + 0x200a3e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x4023f6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x4023e0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, 0
add byte [rax], al
add eax, 0x6000000
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
or al, byte [rax]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp qword [rip + 0x6c250064]
add byte fs:[rip + 0x2000666c], ah
and eax, 0x73250063
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x6f], dh
jae 0x402571
jb str.Case___d:
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x402583
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x40257e
imul ebp, dword [rbx + 0x2f], 0x6b696873
pop rdi
xor dword [rdi + 0x31], ebx
jo 0x402586
movsxd rsi, dword cs:[rax + 0x70]
add byte [rsi + 0x3e], ch
xor byte [rax], al
add byte [rbx + 0x5a], dl
push rbx
pop rdx
sub byte [rbx + 0x29], dh
cmp eax, 0x4f006e3d
add byte [rdi + 0x52], al
add byte [rsi + 0x59], dl
add byte [rcx + 0x4d], cl
push r8
push r11
push rbx
add byte [r11 + 0x5a], r10b
push rbx
pop rdx
sub byte [rcx + 0x6e], ah
jae 0x40257b
cmp eax, 0x61006e3d
outsb dx, byte [rsi]
jae 0x4025b5
imul ebx, dword [rbp + 0x21], 0x736e613d
pop rbx
sub byte [rcx + 0x2b], ch
xor dword [rcx], ebp
and eax, 0x70005d6e
je 0x4025e0
add byte [rdi + 0x63], ch
outsd dx, dword [rsi]
movsxd rbx, dword [rbx + 0x69]
pop rbp
cmp eax, 0x4300303d
jae 0x4025e1
and byte [rbx], ah
and eax, 0x203a64
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dh
jae 0x402616
cmp bh, byte fs:[rdx]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
cmp bh, byte [rdx]
jae 0x402624
jb 0x40261b
outsb dx, byte [rsi]
and byte [edi + 0x72], ah
jns 0x4025e4
jae 0x402632
cmp bh, byte fs:[rdx]
jb 0x402636
jns 0x402603
imul ebp, dword [rsi + 0x74], 0x7533202c
insb byte [rdi], dx
sub dword ds:[rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x402649
imul esp, dword [rax + 0x73], 0x65766c6f
sub byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
cld
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], ch
jmp 0x18925f9
add byte [rax], al
sbb bl, ch
lcall [rax]
add dword [rax], eax
add byte [rsi], cl
in al, dx
push qword [rax + 1]
add byte [rax], al
xor ebp, esp
call qword [rax + 0x58000001]
in al, dx
push qword [rax + 0x7d000001]
in al, dx
call rax
add dword [rax], eax
add byte [rdx - 0xf000014], ah
add dword [rax], eax
add bh, al
in al, dx
call qword [rax]
add al, byte [rax]
add dh, cl
in al, dx
push qword [rax]
add al, byte [rax]
add ah, dh
in al, dx
call qword [rax + 2]
add byte [rax], al
sbb al, 0xed
push qword [rax + 2]
add byte [rax], al
and ebp, ebp
push qword [rax - 0x8fffffe]
out dx, eax
fadd dword [rdx]
add byte [rax], al
clc
add al, byte [rax]
add bh, al
jmp qword [rax]
add eax, dword [rax]
add byte [rcx - 7], cl
dec dword [rax + 3]
add byte [rax], al
lahf
sti
push qword [rax + 3]
add byte [rax], al
cmp ah, bh
push qword [rax + 0x76000004]
cld
call rax
add al, 0
add byte [rbx - 0x6f000004], cl
add eax, dword [rax]
add byte [rsp + rdi*8 + 0x3b0ffff], ch
add byte [rax], al
sar esp, 1
call rax
add eax, dword [rax]
add cl, dh
cld
push rax
add eax, dword [rax]
add byte [rsi], ch
std
call qword [rax]
add al, 0
add byte [rsi - 3], cl
push qword [rax]
add al, 0
add byte [rdi - 3], bl
call qword [rax + 4]
add byte [rax], al
mov bh, ch
push qword [rax + 4]
add byte [rax], al
cwde
std
call qword [rax - 0x47fffffc]
std
push rax
add al, 0
add byte [rax], ch
cmp byte [rip], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402707
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
clc
jmp 0x6b270d
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402737
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fsub st(7)
jmp rax
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rsi + 0x25ffffea], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rbx + 0x25ffffea], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
movabs al, byte [0x25ffffea]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rbp + 0x25ffffea], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x25ffffea], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
scasd eax, dword [rdi]
inc dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 1
add byte [rax], al
xchg eax, esi
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
pushfq
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rdx + rbp*8 + 0x7ffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x402899
add eax, dword [rax + 0x3004010]
sbb ecx, dword [rdi + rax]
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
imul ebp, edx, -1
call rsp
add al, byte [rax]
add byte [rsp + rdi], al
sub eax, dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
retf 0xc02
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
add dword [rax], eax
add byte [rdi], dl
in eax, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jp 0x4028e7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
add byte [rsi], dh
in eax, dx
call qword [rcx + 0x4000000]
pop rax
sub eax, dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
xchg dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rdi - 0x7d000013], bl
or byte [rax], al
add byte [rsp], al
sub eax, dword [rax]
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
jne 0x402933
or al, 7
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov esp, 0xf9000000
cmc
call qword [rsi + 2]
add byte [rax], al
add al, 0xe5
sub eax, dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
add r9b, byte [rdi + rax]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add r8b, byte [rax]
add byte [rdi], ah
clc
lcall [rcx]
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 0x807]
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add bl, dh
clc
jmp qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
hlt
clc
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add cl, bh
clc
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte [rax]
add cl, bh
clc
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
in al, 2
add byte [rax], al
stc
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 3
add byte [rax], al
stc
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
stc
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8d, dword [rax]
add byte [rdx], dl
stc
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword fs:[rax]
add byte [rax], al
stc
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], al
add byte [rax], al
xor bh, 0xff
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x402abf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add byte [rsi + 0x15fffff7], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, al
add eax, dword [rax]
add al, al
clc
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x402b1a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
or al, 4
add byte [rax], al
call 0x3402b25
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
sbb bh, ah
add al, byte [rip - 0x68fffa74]
add eax, dword [rsi + 0x5ae01]
add al, 5
popfq
add eax, 0x505c300
add byte [rax], al
inc dword [rcx]
or byte [rbp + rax + 0x57], cl
add byte [rbp + rax], ch
add bh, bh
inc dword [rcx]
jge 0x402aea
add dword [rip - 0x66fff24a], eax
add dword [rip - 0x62fff25b], eax
add al, byte [rip - 0x4afff21c]
add al, byte [rip - 0x46fff22d]
add eax, dword [rip - 0x2efff16e]
add eax, dword [rip - 0x4afff17f]
add al, 5
scasd eax, dword [rdi]
add byte [rbp + 0xecc0505], cl
add ch, ah
add eax, 0xee905
inc byte [rsi]
add eax, 0x8c90000
add eax, 0x940010b1
or dword [rip - 0x50fff052], eax
or dword [rip - 0x37fff066], eax
or dword [rip - 0x35fff07a], eax
or al, byte [rip - 0x1dfff019]
or al, byte [rip - 0x7fff02d]
or al, byte [rip - 0xbfff03e]
or eax, dword [rip - 0x76ffef63]
or al, 5
mov word [rax], ss
add byte [rdi + 0xffb050c], bl
add dh, cl
or eax, 0x38f
inc dword [rcx]
adc byte [rdi + 5], dh
add byte [rax], al
cwde
add edx, edi
add dh, byte [rax + 0x4c50004]
add eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
pop rsi
and al, byte [rax]
add byte [rax], al
add byte [rax], al
mov al, 0x11
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 4], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x406e53
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rsp], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
sub eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rip], eax
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 2
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx], ch
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
cmovo r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x403051
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400f], al
add byte [rax], al
add byte [rsi + 0x400f], dl
add byte [rax], al
add byte [rsi + 0x400f], ah
add byte [rax], al
add byte [rsi + 0x400f], dh
add byte [rax], al
add dh, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xf, al
add byte [rax], al
add byte [rax], al
add dh, dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte es:[rax], al
add byte [rax], al
add byte [rax], al
adc byte ss:[rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], r8b
add byte [rax], al
add byte [rax], al
push rsi
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x4030d2
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4010], al
add byte [rax], al
add byte [rsi + 0x4010], dl
add byte [rax], al
add byte [rsi + 0x4010], ah
add byte [rax], al
add byte [rsi + 0x4010], dh
add byte [rax], al
add dh, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x10, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x4f], dl
pop rcx
push rsi
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40318f
je 0x403198
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x4031a6
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add dword [rax], eax
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rdx], ch
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
jo 0x403225
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax], dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
adc byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x4010f000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
lldt word [rsp]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add al, ch
and eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, byte [rax]
call 0x407333
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rbx + rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40936a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x602df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, byte [rax]
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], ah
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x11], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4011], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax], dh
xor ah, byte [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rcx], al
add byte [rip + 0x602df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
call 0x409502
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], ch
adc byte [rax], al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x24], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x24], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x32], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rsp + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x24], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x24], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x24], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], dl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x4035d3
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push rax
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rsp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 1
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pop rax
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rcx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pop rsp
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x24], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 2
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte ds:[rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x24], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rsp + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x403694
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
jo 0x4036be
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rsp + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x24], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x14036df
add byte [rax], dl
add byte [rsp + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rbx], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
and byte [rax + rax*2], 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rbx], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
test byte [rax + rax*2], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4024], cl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rbx], 0
add byte [rcx], al
add byte [rax], dl
add byte [rsp + 0x40], cl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4024], dl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rsp + 0x40], dl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax + rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4024], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rax + rax]
add byte [rcx], al
add byte [rax], dl
add byte [rsp + 0x40], bl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4024], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x4037ce
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
movsb byte [rdi], byte ptr [rsi]
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4024], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 4
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
lodsb al, byte [rsi]
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4024], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rip + 0x10000]
adc byte [rax], al
mov ah, 0x24
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
mov eax, 0x4024
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x1000005
add byte [rax], dl
add byte [rsp + 0x40], bh
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov es, word [rip + 0x10000]
adc byte [rax], al
shl byte [rax + rax*2], 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld qword [rip + 0x10000]
adc byte [rax], al
enter 0x4024, 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
int3
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rsi], eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
shl byte [rax + rax*2], 1
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x403908
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
fsub dword [rax + rax*2]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
loopne 0x403946
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
movabs al, byte [0x3200000000004025]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
fsub dword [rip + 0x40]
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add al, byte [rax]
add byte [rax], ah
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 7], dl
add byte [rax], al
add al, byte [rax]
add byte [rsi + 0x22], bl
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 7], ch
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
cmp byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 7], dh
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 7], al
add byte [rcx], dl
add al, ch
and eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], ch
adc al, 0
clc
sub eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 7
add byte [rax + rax], dl
call 0x409a72
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
or al, byte [rax]
add byte [rax], ah
add byte [rdx], bl
add byte [rax], al
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4023], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
or byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dl
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
or al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte ds:[rax], al
add byte [rdx], dl
add byte [rsi], cl
add ah, bl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [r8], r8b
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 8], dl
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 8
add byte [rax], al
adc al, byte [rax]
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x403b4a
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], cl
add byte [rax], al
adc al, byte [rax]
lldt word [rsp]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000008], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx + 0x120000], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
or byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x12], al
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add al, dh
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], bl
add byte [rax], al
adc dword [rax], eax
sbb al, byte [rax]
adc byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx], bl
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0x400f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x20000009], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12000009], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
or dword [rax], eax
add byte [rcx], dl
add byte [rax], dl
add byte [rax], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rcx], 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x40], dl
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rip + 0x1200000a], cl
add byte [rsi], cl
add byte [rbx + rdx], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jae 0x403ce4
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x23], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
or al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ch
or al, byte [rax]
add byte [rax], dl
add byte [rdx], bl
add byte [rax], al
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
or al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rbx], cl
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x4022], bh
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xb], bh
add byte [rax], al
adc al, byte [rax]
add byte [rbx], bl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rcx + 0x1200000b], al
add byte [rsi], cl
add byte [rsi + 0x4012], dh
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1100000b], cl
add bl, byte [rdx]
add byte [rax], bl
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esi
or eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ah
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
or eax, dword [rax]
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax], cl
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x1200000b
add byte [rsi], cl
add byte [rax + 0x4023], ah
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0xb
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add cl, bl
and al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000c], bl
add byte [rsi], cl
add byte [rsi], dh
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rax + rax], 0
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
or eax, 0x220000
add byte [rbx + 0x22], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1200000d], al
add byte [rsi], cl
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rsi + 0x1000000d], bh
add byte [rbx], bl
add byte [rdi], dl
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 0xd
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
or eax, 0x120000
add byte [rbp + 0x12], ah
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add dh, ch
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], cl
add byte [rax], al
adc al, byte [rax]
add bh, bl
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
adc dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x32], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc cl, byte [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x10000007
add byte [rbx], bl
add byte [rax + 0x32], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xe], ah
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x23], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1200000e], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
add byte [rax], al
adc al, byte [rax]
add byte [rdi + 0x4012], ch
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
sldt word [rax]
and al, byte [rax]
add byte [rsi], dl
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
sldt word [rax]
adc al, byte [rax]
add byte [rdx + 0x4012], cl
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rsi + 0xf], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 0xf
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x1200000f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
sldt word [rax]
and al, byte [rax]
add byte [rcx + 0x4022], bh
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
adc byte [rax], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000010], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000010], al
add byte [rsi], cl
add byte [rdi + 0x4016], ch
add byte [rax], al
add byte [rdx + 8], al
add byte [rax], al
add byte [rdx + 0x12000010], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000010], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x23], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000011], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000011], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
adc dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rdi + 0x4021], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add ah, al
or eax, dword [rax]
add byte [rdx], dl
add byte [rbx], cl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x32], dl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 7], ah
add byte [rax], al
adc al, byte [rax]
add dh, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add dl, bl
adc dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x404202
jne 0x4041f6
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4041b6
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404234
jb 0x40423a
pop rdi
jne 0x404243
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x40423d
je 0x404239
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404259
jb 0x40425f
pop rdi
jne 0x404268
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40426b
jns 0x40425b
outsb dx, byte gs:[rsi]
je 0x404272
jns 0x404202
jb 0x404266
insd dword [rdi], dx
pop rdi
jne 0x404278
insd dword [rdi], dx
jns 0x40420e
pop rdi
pop rdi
jb 0x404274
insd dword [rdi], dx
pop rdi
jne 0x404286
insd dword [rdi], dx
jns 0x40427b
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404286
jns 0x404286
outsb dx, byte gs:[rsi]
je 0x40429d
jns 0x40422d
jo 0x404291
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x404285
xor dword [rcx], edi
jo 0x4042a6
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4042be
jb 0x4042c1
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x4042a0
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4042bf
jb 0x4042ca
add byte [rdi + 0x5a], bl
push rbx
je 0x4042b5
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x4042c2
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4042e9
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x404304
je 0x4042f9
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x404310
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x4042f8
xor dword [rax], esi
jb 0x404313
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x40430a
xor dword [rcx], esi
je 0x404334
jns 0x404323
je 0x404335
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x40431d
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x40434c
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x404315
xor eax, 0x65676572
js 0x40434a
movsxd rbp, dword [rdi + 0x6e]
jae 0x404364
outsb dx, byte [rsi]
je 0x404367
xor rax, 0x73616369
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x404334
xor eax, 0x65676572
js 0x404369
movsxd rbp, dword [rdi + 0x6e]
jae 0x404383
outsb dx, byte [rsi]
je 0x404386
outsb dx, byte ss:[rsi]
outsd dx, dword [rsi]
jae 0x40438e
jae 0x404361
add byte [rdi + 0x5a], bl
push rbx
je 0x404354
xor eax, 0x65676572
js 0x404389
movsxd rbp, dword [rdi + 0x6e]
jae 0x4043a3
outsb dx, byte [rsi]
je 0x4043a6
cmp byte [rdi + 0x70], r13b
je 0x4043a2
insd dword [rdi], dx
imul edi, dword [rdx + 0x65], 0x5a5f0045
push rbx
je 0x404376
xor eax, 0x65676572
js 0x4043ab
movsxd rbp, dword [rdi + 0x6e]
jae 0x4043c5
outsb dx, byte [rsi]
je 0x4043c8
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x4043c3
add byte [r15 + 0x5a], r11b
push rbx
je 0x404397
xor eax, 0x65676572
js 0x4043cc
movsxd rbp, dword [rdi + 0x6e]
jae 0x4043e6
outsb dx, byte [rsi]
je 0x4043e9
xor qword [rax], r14
push r11
movsxd rsi, dword [rdx + 0x69]
jo 0x4043f7
add byte [r15 + 0x5a], r11b
push rbx
je 0x4043bc
xor eax, 0x65676572
js 0x4043f1
movsxd rbp, dword [rdi + 0x6e]
jae 0x40440b
outsb dx, byte [rsi]
je 0x40440e
xor rax, 0x69736162
movsxd rax, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x4043db
xor eax, 0x65676572
js 0x404410
movsxd rbp, dword [rdi + 0x6e]
jae 0x40442a
outsb dx, byte [rsi]
je 0x40442d
cmp byte [rbp + 0x78], r12b
je 0x404425
outsb dx, byte [rsi]
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4043fd
xor eax, 0x65676572
js 0x404432
movsxd rbp, dword [rdi + 0x6e]
jae 0x40444c
outsb dx, byte [rsi]
je 0x40444f
xor r12, qword [rcx + 0x77]
imul eax, dword [rbp], 0x5f
pop rdx
push rbx
je 0x40441a
xor eax, 0x65676572
js 0x40444f
movsxd rbp, dword [rdi + 0x6e]
jae 0x404469
outsb dx, byte [rsi]
je 0x40446c
xor al, 0x67
jb 0x404463
jo 0x404445
add byte [rdi + 0x5a], bl
push rbx
je 0x404438
xor eax, 0x65676572
js 0x40446d
movsxd rbp, dword [rdi + 0x6e]
jae 0x404487
outsb dx, byte [rsi]
je 0x40448a
xor rax, 0x65726765
jo 0x404464
add byte [rdi + 0x5a], bl
push rbx
je 0x404457
xor eax, 0x65676572
js 0x40448c
movsxd rbp, dword [rdi + 0x6e]
jae 0x4044a6
outsb dx, byte [rsi]
je 0x4044a9
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4044a0
push 0x6665645f
jne 0x4044b1
je 0x40448c
add byte [rdi + 0x5a], bl
push rbx
je 0x40447f
xor eax, 0x65676572
js 0x4044b4
movsxd rbp, dword [rdi + 0x6e]
jae 0x4044ce
outsb dx, byte [rsi]
je 0x4044d1
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4044c8
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4044a7
xor eax, 0x65676572
js 0x4044dc
movsxd rbp, dword [rdi + 0x6e]
jae 0x4044f6
outsb dx, byte [rsi]
je 0x4044f9
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4044f0
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4044cf
xor eax, 0x65676572
js 0x404504
movsxd rbp, dword [rdi + 0x6e]
jae 0x40451e
outsb dx, byte [rsi]
je 0x404521
xor qword [rbx], r14
insd dword [rdi], dx
je 0x404518
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
ja 0x404504
add byte [rdi + 0x5a], bl
push rbx
je 0x4044f7
xor eax, 0x65676572
js 0x40452c
movsxd rbp, dword [rdi + 0x6e]
jae 0x404546
outsb dx, byte [rsi]
je 0x404549
xor qword [rbx], r14
insd dword [rdi], dx
je 0x404540
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
ja 0x40452c
add byte [rdi + 0x5a], bl
push rbx
je 0x40451f
xor eax, 0x65676572
js 0x404554
movsxd rbp, dword [rdi + 0x6e]
jae 0x40456e
outsb dx, byte [rsi]
je 0x404571
cmp qword [rbp + 0x61], r13
je 0x404567
push 0x796e615f
add byte [r15 + 0x5a], r11b
push rbx
je 0x404542
xor eax, 0x65676572
js 0x404577
movsxd rbp, dword [rdi + 0x6e]
jae 0x404591
outsb dx, byte [rsi]
je 0x404594
xor qword [rbp*2 + 0x68637461], r14
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
je 0x40458d
outsb dx, byte [rsi]
jne 0x40459d
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x40456b
xor eax, 0x65676572
js 0x4045a0
movsxd rbp, dword [rdi + 0x6e]
jae 0x4045ba
outsb dx, byte [rsi]
je 0x4045bd
xor qword [rsi], r14
insd dword [rdi], dx
je 0x4045b4
push 0x6e6f635f
je 0x4045c1
outsb dx, byte [rsi]
jne 0x4045ca
jne 0x4045d0
add byte [r15 + 0x5a], r11b
push rbx
je 0x404596
xor eax, 0x65676572
js 0x4045cb
movsxd rbp, dword [rdi + 0x6e]
jae 0x4045e5
outsb dx, byte [rsi]
je 0x4045e8
xor qword [rsi], r14
insd dword [rdi], dx
je 0x4045df
push 0x6572705f
jbe 0x4045e2
jbe 0x4045e7
imul ebp, dword [rbp + rax*2], 0x534e5a5f
je 0x4045c1
xor eax, 0x65676572
js 0x4045f6
movsxd rbp, dword [rdi + 0x6e]
jae 0x404610
outsb dx, byte [rsi]
je 0x404613
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x404614
je 0x404609
jne 0x40461c
je 0x4045f7
add byte [rdi + 0x5a], bl
push rbx
je 0x4045ea
xor eax, 0x65676572
js 0x40461f
movsxd rbp, dword [rdi + 0x6e]
jae 0x404639
outsb dx, byte [rsi]
je 0x40463c
xor qword [rax], r14
outsw dx, word [rsi]
jb 0x40463d
je 0x404632
jae 0x40463a
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x40460f
xor eax, 0x65676572
js 0x404644
movsxd rbp, dword [rdi + 0x6e]
jae 0x40465e
outsb dx, byte [rsi]
je 0x404661
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x404662
je 0x404657
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x404645
add byte [rdi + 0x5a], bl
push rbx
je 0x404638
xor eax, 0x65676572
js 0x40466d
movsxd rbp, dword [rdi + 0x6e]
jae 0x404687
outsb dx, byte [rsi]
je 0x40468a
xor qword [rdi], r14
outsw dx, word [rsi]
jb 0x40468b
je 0x404680
imul si, word [rdx + 0x73], 0x5f74
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
jns 0x404671
add byte [rdi + 0x5a], bl
push rbx
je 0x404664
xor eax, 0x65676572
js 0x404699
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046b3
outsb dx, byte [rsi]
je 0x4046b6
xor qword [rbx], r14
jb 0x4046bb
outsd dx, dword [rsi]
jb 0x4046ab
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x4046b8
add byte [r15 + 0x5a], r11b
push rbx
je 0x40468c
xor eax, 0x65676572
js 0x4046c1
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046db
outsb dx, byte [rsi]
je 0x4046de
xor qword [rcx], r14
jb 0x4046e3
outsd dx, dword [rsi]
jb 0x4046d3
movsxd rsi, dword [rcx + rdi*2 + 0x70]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4046b2
xor eax, 0x65676572
js 0x4046e7
movsxd rbp, dword [rdi + 0x6e]
jae 0x404701
outsb dx, byte [rsi]
je 0x404704
xor qword [rdx], r14
jb 0x404709
outsd dx, dword [rsi]
jb 0x4046f9
jae 0x404700
jo 0x404705
add byte [r15 + 0x5a], r11b
push rbx
je 0x4046d9
xor eax, 0x65676572
js 0x40470e
movsxd rbp, dword [rdi + 0x6e]
jae 0x404728
outsb dx, byte [rsi]
je 0x40472b
xor qword [rbx], r14
jb 0x404730
outsd dx, dword [rsi]
jb 0x404720
movsxd rbp, dword [rbx + 0x72]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x404701
xor eax, 0x65676572
js 0x404736
movsxd rbp, dword [rdi + 0x6e]
jae 0x404750
outsb dx, byte [rsi]
je 0x404753
xor qword [rcx], r14
jb 0x404758
outsd dx, dword [rsi]
jb 0x404748
jb 0x40474d
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404727
xor eax, 0x65676572
js 0x40475c
movsxd rbp, dword [rdi + 0x6e]
jae 0x404776
outsb dx, byte [rsi]
je 0x404779
xor qword [rcx], r14
jb 0x40477e
outsd dx, dword [rsi]
jb 0x40476e
jo 0x404772
jb 0x404778
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
push rbx
je 0x40474d
xor eax, 0x65676572
js 0x404782
movsxd rbp, dword [rdi + 0x6e]
jae 0x40479c
outsb dx, byte [rsi]
je 0x40479f
xor qword [rcx], r14
jb 0x4047a4
outsd dx, dword [rsi]
jb 0x404794
jb 0x404799
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404773
xor eax, 0x65676572
js 0x4047a8
movsxd rbp, dword [rdi + 0x6e]
jae 0x4047c2
outsb dx, byte [rsi]
je 0x4047c5
xor qword [0x726f7272], r14
pop rdi
jb 0x4047c2
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40479c
xor eax, 0x65676572
js 0x4047d1
movsxd rbp, dword [rdi + 0x6e]
jae 0x4047eb
outsb dx, byte [rsi]
je 0x4047ee
xor qword [rcx], r14
jb 0x4047f3
outsd dx, dword [rsi]
jb 0x4047e3
jb 0x4047e7
outsb dx, byte [rsi]
add byte gs:[r15d + 0x5a], r11b
push rbx
je 0x4047c2
xor eax, 0x65676572
js 0x4047f7
movsxd rbp, dword [rdi + 0x6e]
jae 0x404811
outsb dx, byte [rsi]
je 0x404814
xor qword [rcx], r14
jb 0x404819
outsd dx, dword [rsi]
jb 0x404809
jae 0x40481c
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x4047e8
xor eax, 0x65676572
js 0x40481d
movsxd rbp, dword [rdi + 0x6e]
jae 0x404837
outsb dx, byte [rsi]
je 0x40483a
xor qword [rip + 0x6f727265], r14
jb 0x40482f
jb 0x40483a
jo 0x40483c
je 0x40481f
add byte [rdi + 0x5a], bl
push rbx
je 0x404812
xor eax, 0x65676572
js 0x404847
movsxd rbp, dword [rdi + 0x6e]
jae 0x404861
outsb dx, byte [rsi]
je 0x404864
xor qword [rsi], r14
jb 0x404869
outsd dx, dword [rsi]
jb 0x404859
movsxd rbp, dword [rdi + 0x6d]
jo 0x40486b
js 0x40486b
je 0x40487d
add byte [r15 + 0x5a], r11b
push rbx
je 0x40483d
xor eax, 0x65676572
js 0x404872
movsxd rbp, dword [rdi + 0x6e]
jae 0x40488c
outsb dx, byte [rsi]
je 0x40488f
xor qword [rcx], r14
jb 0x404894
outsd dx, dword [rsi]
jb 0x404884
jae 0x40489b
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40486a
pop rdi
pop rdi
je 0x404899
imul ebp, dword [rsp + rcx*2 + 0x31], 0x5f535f39
imul ebp, dword [rsi + 0x76], 0x64696c61
pop rdi
jae 0x4048be
je 0x4048b2
pop rdi
imul esp, dword [rbp + rax*2], 0x365a5a5f
jb 0x4048be
jns 0x40489f
xor eax, 0x31787863
xor dword [rbx + 0x74], edx
xor eax, 0x61727261
jns 0x4048b5
imul ecx, dword [rbp + rbp*2 + 0x33], 0x31454545
cmp dword [rdi + 0x5f], ebx
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor eax, 0x766c6f73
jbe 0x4048d9
xor dword [rcx], edi
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x404926
je 0x40491e
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x40492c
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x404942
jb 0x404945
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x40495a
pop rdi
pop r15
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rdx
imul eax, dword [rax], 0x52465f5f
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4049a0
jns 0x4049a0
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4049b1
jns 0x4049b1
jae 0x4049c8
jb 0x4049cb
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
xor bl, byte [rdi + 0x57]
push rbx
je 0x4049a2
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4049e1
movsxd rbx, dword [rdi + 0x73]
je 0x4049ef
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4049ea
je 0x4049ff
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x4049f0
push r12
pop rdi
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6c5f5f00
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
xor bl, byte [rdi + 0x57]
push rdx
js 0x4049cf
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x404a4c
jb 0x404a4f
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x404a41
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x404a62
jae 0x4049f2
pop rdi
pop rdx
xor eax, 0x766c6f73
jbe 0x4049fc
pop rdi
pop rdi
jae 0x404a74
jb 0x404a78
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x74757000
movsxd rbp, dword [rax + 0x61]
jb 0x404a5f
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x404a6a
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x404ad1
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x325a5f00
pop rdi
push rdx
push rdx
add byte fs:[rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x404ae6
js 0x404aec
je 0x404ac5
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x404acf
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404b0e
movsxd rbx, dword [rdi + 0x73]
je 0x404b1c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404b17
je 0x404b2c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x404b15
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdx + 0x6c], dh
add byte [rdi + 0x5a], bl
push rbx
je 0x404b22
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x404b77
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x404b62
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404ba1
movsxd rbx, dword [rdi + 0x73]
je 0x404baf
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404baa
je 0x404bbf
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x49], bl
pop r15
jae 0x404be9
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x404bb9
jb 0x404bf9
jns 0x404bd3
imul ecx, dword [rbp + rbp*2 + 0x33], 0x78694545
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor dword [rdi + 0x76], edx
add byte [rdi + 0x5a], bl
push rbx
je 0x404bd8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404c17
movsxd rbx, dword [rdi + 0x73]
je 0x404c25
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404c20
je 0x404c35
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rbx + 0x63], dh
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x404c65
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404c7e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x404c5a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404c99
movsxd rbx, dword [rdi + 0x73]
je 0x404ca7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404ca2
je 0x404cb7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
jae 0x404cbe
jbe 0x404c5c
pop rdi
push r12
pop r15
jb 0x404cc8
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x404cdd
pop rdi
jae 0x404cf3
jb 0x404cf6
add byte [rdi + 0x5a], bl
jb 0x404cee
jns 0x404ccf
xor eax, 0x31787863
xor dword [rbx + 0x74], edx
xor eax, 0x61727261
jns 0x404ce5
imul ecx, dword [rbp + rbp*2 + 0x33], 0x5f004545
pop rdx
xor dword [rdx + 0x49], edx
imul ecx, dword [rdx + 0x45], 0x54527645
pop rdi
jo 0x404d05
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x404cf4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404d33
movsxd rbx, dword [rdi + 0x73]
je 0x404d41
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404d3c
je 0x404d51
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor bl, byte [rdi + 0x52]
push rdx
js 0x404d09
pop rdi
pop rdx
xor bl, byte [rdi + 0x57]
push rdx
imul rax, qword [r8], 0x4d545f5f
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x404d57
movsxd rbp, dword [rdi + 0x75]
je 0x404d68
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x404da9
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x74610074
outsd dx, dword [rsi]
imul eax, dword [rax + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x404dcd
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x404db1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404df0
movsxd rbx, dword [rdi + 0x73]
je 0x404dfe
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404df9
je 0x404e0e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404e27
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x404e0f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404e4e
movsxd rbx, dword [rdi + 0x73]
je 0x404e5c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404e57
je 0x404e6c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x74706d65
jns 0x404e53
jbe 0x404e50
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x404e8a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404ea3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x404e7f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404ebe
movsxd rbx, dword [rdi + 0x73]
je 0x404ecc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404ec7
je 0x404edc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x404e7e
pop rdi
pop rdx
push rbx
je 0x404ebb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404efa
movsxd rbx, dword [rdi + 0x73]
je 0x404f08
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404f03
je 0x404f18
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor esp, dword [rbp + 0x6e]
jbe 0x404efa
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rbx + 0x74], dh
jb 0x404f31
push 0x47404072
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x404f15
xor al, 0x5f
pop rdi
jb 0x404f5c
jns 0x404f4c
je 0x404f61
imul esi, dword [rbx + rsi*2 + 0x49], 0x336d4c69
pop rdi
push rbx
pop rdi
jb 0x404f65
push r10w
xor ebx, dword [r15 + 0x4b]
imul ebp, dword [rbp], 0x72335a5f
jo 0x404f5f
push rbx
je 0x404f4b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404f8a
movsxd rbx, dword [rdi + 0x73]
je 0x404f98
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404f93
je 0x404fa8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul r8d, dword [r8], 0x73625f5f
jae 0x404fab
jae 0x404fc2
jb 0x404fc5
add byte [rdi + 0x5f], bl
jae 0x404fca
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rdx
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor eax, 0x75706e69
je 0x40500f
add byte [rdi + 0x5a], bl
push r11
je 0x404fd8
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405017
movsxd rbx, dword [rdi + 0x73]
je 0x405025
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405020
je 0x405035
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor dword [rdi + 0x49], edx
push rbx
je 0x405028
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405067
movsxd rbx, dword [rdi + 0x73]
je 0x405075
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405070
je 0x405085
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x405078
push r12
pop rdi
jo 0x40507e
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40506e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4050ad
movsxd rbx, dword [rdi + 0x73]
je 0x4050bb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4050b6
je 0x4050cb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rax + 0x75], esi
jae 0x4050d3
pop rdi
movsxd rbp, dword [rbx + 0x45]
movsxd rax, dword [rax + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor dword [rdx + 0x76], edx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4050f2
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40510b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
movsxd rcx, dword [rsi + 0x53]
je 0x4050e7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405126
movsxd rbx, dword [rdi + 0x73]
je 0x405134
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40512f
je 0x405144
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x405153
jbe 0x4050e6
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rax
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40512b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40516a
movsxd rbx, dword [rdi + 0x73]
je 0x405178
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405173
je 0x405188
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x4051a6
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
imul ecx, dword [rcx + 0x45], 0x54527645
pop rdi
jo 0x4051c2
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
js 0x4051f1
pop rdi
jo 0x4051e1
jb 0x4051f1
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x405206
jae 0x4051e5
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405205
je 0x40521a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x4051ea
xor esp, dword [rdx + 0x61]
jae 0x405227
movsxd rbx, dword [rdi + 0x6f]
jae 0x405237
jb 0x40522a
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rdx
push rbx
je 0x40520e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40524d
movsxd rbx, dword [rdi + 0x73]
je 0x40525b
imul ebp, dword [rsi + 0x67], 0x5f345349
push rbx
xor eax, 0x5f31545f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor eax, 0x63656863
imul eax, dword [rdx + 0x35], 0x63
js 0x40528e
xor dword [rcx], esi
jbe 0x40521a
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x405288
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40529b
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40526f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4052ae
movsxd rbx, dword [rdi + 0x73]
je 0x4052bc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4052b7
je 0x4052cc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor dword [rdi + 0x49], edx
push rbx
je 0x4052bc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4052fb
movsxd rbx, dword [rdi + 0x73]
je 0x405309
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405304
je 0x405319
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x40530c
push r12
pop rdi
jo 0x405312
push r12
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405302
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405341
movsxd rbx, dword [rdi + 0x73]
je 0x40534f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40534a
je 0x40535f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x405343
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405350
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40538f
movsxd rbx, dword [rdi + 0x73]
je 0x40539d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405398
je 0x4053ad
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x405396
movsxd r8, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rbp + 0x61], ch
imul ebp, dword [rsi], 0x534e5a5f
je 0x40539f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4053de
movsxd rbx, dword [rdi + 0x73]
je 0x4053ec
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4053e7
je 0x4053fc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rax], al
jae 0x40542b
insd dword [rdi], dx
je 0x405416
add byte [rsi], ch
jae 0x40542e
jb 0x405430
add byte [rsi], ch
jae 0x40542a
jae 0x405438
jb 0x40543a
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40543b
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405449
outsb dx, byte cs:[esi]
jne 0x405417
jne 0x405455
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x405425
push 0x687361
jns 0x40546e
jae 0x40547b
insd dword [rdi], dx
add byte [rsi], ch
jns 0x405476
jae 0x40547e
jb 0x40540c
outsb dx, byte cs:[esi]
jne 0x40543f
jbe 0x405478
jb 0x405488
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40544c
jbe 0x405485
jb 0x405495
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x405490
insb byte [rdi], dx
jns 0x40549f
add byte [rsi], ch
jb 0x40549a
insb byte [rdi], dx
jo 0x4054a6
je 0x40543c
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x405475
outsd dx, dword [esi]
je 0x40544b
je 0x4054b3
js 0x4054c4
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x4054c9
je 0x4054bf
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x4054e2
jo 0x4054f6
pop rdi
je 0x4054e6
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4054f4
jns 0x405495
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x405510
jns 0x4054a1
push 0x63
jb 0x4054a6
jns 0x405518
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x405522
je 0x4054b8
je 0x40551e
add byte [rsi], ch
jae 0x405535
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4054cc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x4002, 0
add byte [rax], al
add byte [rax], al
enter 2, 0
add byte [rax], al
add byte [rax], al
add rax, qword [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rip], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub cl, byte [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax*2], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 2], bh
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x4057f3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
lock adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dl, byte [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp], dl
add byte [rax], al
add byte [rax], al
add byte [rsp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
and al, 0
add byte [rax], al
add byte [rax], al
add ch, al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
and eax, 0x40
add byte [rax], al
call 0x405952
add byte [rax], al
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte es:[rax], al
add byte [rax], al
add al, ch
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
push rsp
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x60
add byte [rax], al
call 0x405a1a
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x60
add byte [rax], al
clc
sub eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
xor dword [rax], esp
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasb al, byte [rdi]
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x31], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
